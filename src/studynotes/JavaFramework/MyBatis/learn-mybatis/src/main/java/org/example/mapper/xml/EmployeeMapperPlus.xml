<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.EmployeeMapperPlus">

	<cache></cache>


	<resultMap type="employee" id="MySimpleEmp">
		<id column="id" property="id"/>
		<!-- 定义普通列封装规则 -->
<!--		<result column="last_name" property="lastName"/>-->
		<!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
	</resultMap>
	
	<!-- resultMap:自定义结果集映射规则；  -->
	<!-- public Employee getEmpById(Integer id); -->
	<select id="getEmpById"  resultMap="MySimpleEmp">
		select * from tbl_employee where id=#{id}
	</select>

<!--	测试驼峰  结果：last_name也封装上了-->
<!--	<select id="getEmpById" resultType="employee">-->
<!--		select * from tbl_employee where id=#{id}-->
<!--	</select>-->


	<!--
	场景一：
		查询Employee的同时查询员工对应的部门
		Employee===Department
		一个员工有与之对应的部门信息；
		id  last_name  gender    d_id     id1  dept_name (private Department dept;)
	 -->

	<!--
		联合查询：级联属性封装结果集
	  -->
	<resultMap id="_getEmpAndDept" type="employee">
<!--		<id column="id" property="id"/>-->
<!--		级联属性，我下面这两个属性爆红，但是不影响-->
		<result column="d_id" property="dept.id"/>
		<result column="dept_name" property="dept.departmentName"/>
	</resultMap>

	<!--
		使用association定义关联的单个对象的封装规则；
		我使用了association后所有的属性都要映射，就算属性和查询后起的别名一样也不行。
	 -->
	<resultMap id="_getEmpAndDept2" type="employee">
		<id column="id" property="id"/>
		<!--发现下面这些不写的话，不会自动封装了-->
		<result column="last_name" property="lastName"/>
		<result column="gender" property="gender"/>
		<result column="email" property="email"/>
		<!--
		association可以指定联合的javaBean对象
		property="dept"：指定哪个属性是联合的对象
		javaType:指定这个属性对象的类型[不能省略]
		-->
		<association property="dept" javaType="department">
			<id column="id" property="id"/>
			<result column="dept_name" property="departmentName"/>
		</association>
	</resultMap>

	<select id="getEmpAndDept" resultMap="_getEmpAndDept2">
		select * from tbl_employee e join tbl_dept d
		on e.id = d.id
		where d.id = #{id}
	</select>


	<!-- 使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中；
	 -->
	<resultMap id="_getEmpByIdStep" type="employee">
		<id column="id" property="id"/>
		<!--其他属性不写也自动封装上了，但建议只要指定resultMap就把全部的映射规则都写上-->

		<!-- association定义关联对象的封装规则
	 		select:表明当前属性是调用select指定的方法查出的结果
	 		column:指定将哪一列的值传给这个方法

	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
	 	 -->
		<association property="dept" select="org.example.mapper.DepartmentMapper.getDeptById"
					 column="id"/>
	</resultMap>

	<select id="getEmpByIdStep" resultMap="MyEmpDis">
		select * from tbl_employee where id=#{id}
	</select>


	<!--
            查询部门的时候将部门对应的所有员工信息也查询出来：注释在DepartmentMapper.xml中
         -->
	<!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
	<select id="getEmpsByDeptId" resultType="org.example.bean.Employee">
		select * from tbl_employee where d_id=#{deptId}
	</select>



	<!-- =======================鉴别器============================ -->
	<!-- <discriminator javaType=""></discriminator>
		鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
		封装Employee：
			如果查出的是女生：就把部门信息查询出来，否则不查询；
			如果是男生，把last_name这一列的值赋值给email;
	 -->
	<resultMap id="MyEmpDis" type="employee">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<!--
            column：指定判定的列名
            javaType：列值对应的java类型 MyBatis已经对所有java类型起好名了具体看官方文档 -->
		<discriminator javaType="string" column="gender">
			<!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
			<case value="0" resultType="org.example.bean.Employee">
				<association property="dept"
							 select="org.example.mapper.DepartmentMapper.getDeptById"
							 column="{id=d_id}">
				</association>
			</case>
			<!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->
			<case value="1" resultType="org.example.bean.Employee">
				<id column="id" property="id"/>
				<result column="last_name" property="lastName"/>
				<result column="last_name" property="email"/>
				<result column="gender" property="gender"/>
			</case>
		</discriminator>
	</resultMap>

</mapper>