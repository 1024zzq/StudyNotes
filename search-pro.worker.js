const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":1188,\"nextId\":1188,\"documentIds\":{\"0\":\"1\",\"1\":\"1@0\",\"2\":\"2\",\"3\":\"2@0\",\"4\":\"2@1\",\"5\":\"3\",\"6\":\"3@0\",\"7\":\"3@1\",\"8\":\"4\",\"9\":\"4#markdown-介绍\",\"10\":\"4#markdown-配置\",\"11\":\"4#markdown-扩展\",\"12\":\"4#vuepress-扩展\",\"13\":\"4#主题扩展\",\"14\":\"4#提示容器\",\"15\":\"4#代码块\",\"16\":\"4#上下角标\",\"17\":\"4#自定义对齐\",\"18\":\"4#attrs\",\"19\":\"4#脚注\",\"20\":\"4#标记\",\"21\":\"4#任务列表\",\"22\":\"4#图片增强\",\"23\":\"4#组件\",\"24\":\"4@0\",\"25\":\"4@1\",\"26\":\"5\",\"27\":\"5#页面标题\",\"28\":\"5#页面信息\",\"29\":\"5#页面内容\",\"30\":\"5#组件\",\"31\":\"5@0\",\"32\":\"5@1\",\"33\":\"6\",\"34\":\"6#功能亮点\",\"35\":\"6#bar\",\"36\":\"6#foo\",\"37\":\"7\",\"38\":\"7#介绍\",\"39\":\"7#详情\",\"40\":\"8\",\"41\":\"9\",\"42\":\"9#介绍\",\"43\":\"9#详情\",\"44\":\"10\",\"45\":\"11\",\"46\":\"11#一、general-请求行\",\"47\":\"11#二、request-headers-请求头\",\"48\":\"11#三、response-headers-响应头\",\"49\":\"11#四、xhr\",\"50\":\"11#session-缺点\",\"51\":\"11#为什么要使用session技术\",\"52\":\"11#sessin-缺点\",\"53\":\"11#cookie\",\"54\":\"11#token\",\"55\":\"11#计网面试题\",\"56\":\"11#tcp和udp的区别-tcp靠什么保证可靠连接\",\"57\":\"11#讲一下tcp三次握手-为什么要3次-两次或者四次不行吗\",\"58\":\"11#base64\",\"59\":\"11#chrome-js\",\"60\":\"11#chrome-url\",\"61\":\"11#f12-js\",\"62\":\"11#chrome-shortcutkey\",\"63\":\"11#html-刷新\",\"64\":\"12\",\"65\":\"12#_1-ruoyi\",\"66\":\"12#前端存-session-不过期\",\"67\":\"12#后端存-redis-通过login-user-key对应-存用户信息-loginuser-class\",\"68\":\"12#后端设置-token\",\"69\":\"12#前端有-token-后的请求\",\"70\":\"12#_1-概念\",\"71\":\"13\",\"72\":\"13#正向代理-vs-反向代理-的概念\",\"73\":\"13#_5-1-root-alias\",\"74\":\"14\",\"75\":\"14#知识汇总\",\"76\":\"14#icmp\",\"77\":\"14#访问-github-进不去\",\"78\":\"15\",\"79\":\"15#_1-认识-jmeter\",\"80\":\"15#jvm-本地锁-synchronized-reentrantlock-三种情况导致锁失效-2-3是很难避免的-也就是说必须要单机部署单例模式-【600吞吐】\",\"81\":\"15#一个sql语句解决-把判断和更新等语句合成一个语句-【2000吞吐】\",\"82\":\"15#悲观锁-select-for-update-用这个语句查-就锁住了-其他线程不能update。但能查-【600吞吐】\",\"83\":\"15#乐观锁-时间戳、version版本号、cas-机制-变量等于旧值就允许更新-例如修改密码\",\"84\":\"15#_1-jvm本地锁机制-单机情况下\",\"85\":\"15#_2-redis乐观锁-事务-乐观锁-watch-lua\",\"86\":\"15#_3-分布式锁-跨进程、跨服务、跨服务器【细说】\",\"87\":\"15#分布式锁用的redis的哪种数据结构\",\"88\":\"15#lua脚本\",\"89\":\"15#可以这样操作-redis-数据库里的数据\",\"90\":\"16\",\"91\":\"16#前言\",\"92\":\"16#商品上架\",\"93\":\"16#_1-nginx\",\"94\":\"16#nginx反向代理流程\",\"95\":\"16#nginx-动静分离\",\"96\":\"16#_2-thymeleaf\",\"97\":\"16#_2-1-视图映射\",\"98\":\"16#_2-2-model-redirectattributes\",\"99\":\"16#_1-前言\",\"100\":\"16#_2-压力测试-线程\",\"101\":\"16#_3-性能监控-jvm\",\"102\":\"16#_4-两者结合-压测同时看性能\",\"103\":\"16#_1-前言-1\",\"104\":\"16#_2-redis使用\",\"105\":\"16#_2-1-引入-redis-注意-云服务器redis不设密容易被挖矿\",\"106\":\"16#_2-2-lettuce堆外内存溢出bug\",\"107\":\"16#单个自己测单线程没问题-但当进行压力测试时后期会出现堆外内存溢出outofdirectmemoryerror\",\"108\":\"16#_2-3-redis-三大问题\",\"109\":\"16#_3-分布式锁\",\"110\":\"16#加锁\",\"111\":\"16#解锁\",\"112\":\"16#_4-分布式锁-redisson\",\"113\":\"16#_4-1-初体验\",\"114\":\"16#项目上怎么用的分布式锁-原理是什么\",\"115\":\"16#分布式锁用的redis的哪种数据结构\",\"116\":\"16#_5-分布式锁-缓存数据一致性\",\"117\":\"16#_1-、双写模式-写数据库后-写缓存\",\"118\":\"16#_2-、失效模式-写完数据库后-删缓存-推荐\",\"119\":\"16#_5-1-canal-了解\",\"120\":\"16#_6-springcache\",\"121\":\"16#_6-1-why\",\"122\":\"16#_6-2-初步理解\",\"123\":\"16#_6-3-使用步骤\",\"124\":\"16#补充-题外-redis热部署不生效\",\"125\":\"16#_6-4-配置原理\",\"126\":\"16#_1-商品搜索\",\"127\":\"16#_1-注册流程\",\"128\":\"16#_1-1-js-验证码倒计时\",\"129\":\"16#缺点\",\"130\":\"16#_1-2-jsr303\",\"131\":\"16#_1-3-md5\",\"132\":\"16#md5使用场景-百度网盘秒传功能\",\"133\":\"16#解决-org-springframework-security-bcryptpasswordencoder-class-把盐交给-spring-工具类\",\"134\":\"16#_1-4-总结\",\"135\":\"16#_2-社交登录\",\"136\":\"16#_2-1-oauth2-0\",\"137\":\"16#_2-2-github\",\"138\":\"16#_1-大致流程\",\"139\":\"16#_2-httputils\",\"140\":\"16#_3-分布式session\",\"141\":\"16#_3-1-session-两个问题\",\"142\":\"16#_3-2-分布式session解决方案\",\"143\":\"16#_1-session复制\",\"144\":\"16#_3-hash一致性\",\"145\":\"16#_4-redis统一存储\",\"146\":\"16#_3-3-springsession整合redis\",\"147\":\"16#_3-3-1-简单配置\",\"148\":\"16#_3-3-2-bean-配置\",\"149\":\"16#_3-4-我遇到的坑\",\"150\":\"16#_1-redis、session的yaml配置每个model都要\",\"151\":\"16#_2-gulimallsessionconfig-这个配置类每个model都要\",\"152\":\"16#_3-5-springsession核心原理-装饰者模式\",\"153\":\"16#_4-单点登录-sso\",\"154\":\"16#_1-需求描述\",\"155\":\"16#_2-redis-存储设计-vo\",\"156\":\"16#_3-threadlocal用户身份鉴别\",\"157\":\"16#_3-1-上面补充\",\"158\":\"16#_1-模块介绍\",\"159\":\"16#_2-feign-两个问题\",\"160\":\"16#_1-feign远程调用丢失请求头问题\",\"161\":\"16#_2-feign异步情况丢失上下文问题\",\"162\":\"16#_3-接口幂等性\",\"163\":\"16#_1-前言-2\",\"164\":\"16#哪些情况需要防止\",\"165\":\"16#天然幂等性\",\"166\":\"16#_2-解决方案\",\"167\":\"16#_2-1-token令牌机制\",\"168\":\"16#_2-2-各种锁机制\",\"169\":\"16#_2-2-1-数据库悲观锁\",\"170\":\"16#_2-2-2-数据库乐观锁【带上版本号】\",\"171\":\"16#_2-2-3-分布式锁-todo-不太理解-xd-20240320再学redisson理解了\",\"172\":\"16#_2-3-各种唯一约束\",\"173\":\"16#_2-4-防重表\",\"174\":\"16#_2-5-全局唯一id\",\"175\":\"16#_4-分布式事务\",\"176\":\"16#_4-1-本地事务问题\",\"177\":\"16#_4-2-事务的两大属性-本地事务隔离级别-传播行为\",\"178\":\"16#_4-2-1-传播行为\",\"179\":\"16#_4-2-1-1-transactional\",\"180\":\"16#_4-2-2-隔离级别\",\"181\":\"16#联想-title-的另外一大特性-事务属性-具体看自己笔记-mysql-事务隔离级别回顾\",\"182\":\"16#_4-2-3-补充\",\"183\":\"16#_4-3-分布式事务几种方案\",\"184\":\"16#后来补充-总结两者\",\"185\":\"16#_2pc-看seata那篇\",\"186\":\"16#tcc-补充\",\"187\":\"16#_5-rabbitmq延时队列-实现定时任务\",\"188\":\"16#_6-解锁库存\",\"189\":\"16#_7-支付\",\"190\":\"16#_7-1-前言\",\"191\":\"16#_7-2-使用\",\"192\":\"16#_7-2-1-异步回调\",\"193\":\"16#_7-2-2-收单\",\"194\":\"16#_8-内网穿透\",\"195\":\"16#_8-1-原理\",\"196\":\"16#_8-2-适用场景\",\"197\":\"16#_8-3-服务商\",\"198\":\"16#_8-4-我的问题\",\"199\":\"16#_1-秒杀-高并发-系统关注的问题\",\"200\":\"16#_2-quartz\",\"201\":\"16#_2-1-cron-表达式\",\"202\":\"16#_2-2-spring-定时任务demo\",\"203\":\"17\",\"204\":\"17#_1-项目简介\",\"205\":\"17#_1-1-b2b-模式\",\"206\":\"17#_1-2-b2c-模式\",\"207\":\"17#_2-架构图\",\"208\":\"17#_3-分布式基础概念\",\"209\":\"17#_1-mysql\",\"210\":\"17#_1-1-安装\",\"211\":\"17#_1-2-配置\",\"212\":\"17#_1-3-使用\",\"213\":\"17#_2-redis\",\"214\":\"17#_1-前端\",\"215\":\"17#_1-1-前言\",\"216\":\"17#_1-2-es6\",\"217\":\"17#_1-3-模块化\",\"218\":\"17#_1-4-vue-2\",\"219\":\"17#_1-4-1-新建项目\",\"220\":\"17#_1-4-2-常用的属性\",\"221\":\"17#注意-组件的-data-必须是一个函数-不再是一个对象。-data-return\",\"222\":\"17#_1-4-3-模块化开发\",\"223\":\"17#_1-4-3-element-ui\",\"224\":\"17#_1-4-4-解决闪烁问题\",\"225\":\"17#_1-4-5-生命周期方法\",\"226\":\"17#_1-5-高级部分\",\"227\":\"17#_2-后端\",\"228\":\"17#_3-技术选型\",\"229\":\"17#_1-注意小点\",\"230\":\"17#_2-跨源资源共享-cors\",\"231\":\"17#解决跨域\",\"232\":\"17#补充-我现在说的两种方式-1-第一种-corsconfig-2-注解方式-nginx-算一种-还有ruoyi前端vue解决\",\"233\":\"17#_3-axios和vue-axios的关系及使用区别\",\"234\":\"17#_4-三级菜单-拖拽前端业务实现\",\"235\":\"17#_5-踩坑\",\"236\":\"17#逻辑删除\",\"237\":\"17#前端校验\",\"238\":\"17#_6-oss-object-storage-service\",\"239\":\"17#_7-jsr-303\",\"240\":\"17#使用过程\",\"241\":\"17#分组校验\",\"242\":\"17#数组类型的属性\",\"243\":\"17#自定义校验-仿照别的校验写\",\"244\":\"17#_8-spu-与-sku\",\"245\":\"17#_9-其他重要的点\",\"246\":\"17#关于-mybatis-plus\",\"247\":\"17#jackson-介绍\",\"248\":\"17#element-ui-cascader-级联选择器\",\"249\":\"17#issue\",\"250\":\"17#other\",\"251\":\"17#object-划分\",\"252\":\"17#常用的封装类\",\"253\":\"17#技巧\",\"254\":\"17#idea占用内存过大-服务过多\",\"255\":\"17#为了方便重启一部分服务可以用-compound-包起来\",\"256\":\"17#集群负载均衡-取巧\",\"257\":\"17#后端加了事务-transactional-还没提交前的语句看不到数据库的变换\",\"258\":\"17#踩坑\",\"259\":\"17#采购\",\"260\":\"17#用好数据库连接池\",\"261\":\"17#从商品保存开始就对业务走马观花-都是cv没去自己写\",\"262\":\"18\",\"263\":\"18#elasticsearch-store-search-and-analyze\",\"264\":\"18#倒排索引机制-分词\",\"265\":\"18#基本概念\",\"266\":\"18#docker-安装-es\",\"267\":\"18#下载镜像文件\",\"268\":\"18#使用-postman-测试\",\"269\":\"18#乐观锁\",\"270\":\"18#_1-cat-看基本信息\",\"271\":\"18#_2-update-更新\",\"272\":\"18#_3-query-dsl\",\"273\":\"18#_1-匹配所有\",\"274\":\"18#_2-条件匹配\",\"275\":\"18#_3-match-phrase-短句匹配\",\"276\":\"18#_4-multi-math-多字段匹配\",\"277\":\"18#_5-bool用来做复合查询\",\"278\":\"18#_6-filter【结果过滤】\",\"279\":\"18#_7-term\",\"280\":\"18#_4-nested-去扁平化\",\"281\":\"18#_5-分词器\",\"282\":\"18#分词器可以有自定义词库-给一个远程文本地址-配置后就可根据里面的分\",\"283\":\"19\",\"284\":\"19#_0-jmm-前置知识\",\"285\":\"19#_1-可见性\",\"286\":\"19#弹幕\",\"287\":\"19#脑图\",\"288\":\"19#开始\",\"289\":\"19#_2-原子性\",\"290\":\"19#复现\",\"291\":\"19#解决\",\"292\":\"19#_3-有序性\",\"293\":\"19#指令重排-example-1\",\"294\":\"19#例子\",\"295\":\"19#指令重排-example-2\",\"296\":\"19#volatile针对指令重排做了啥\",\"297\":\"19#线程安全获得保证\",\"298\":\"19#_4-使用场景\",\"299\":\"19#_5-volatile的应用\",\"300\":\"19#单例模式的逐步优化\",\"301\":\"19#_1-dcl-double-check-lock-双端检锁机制\",\"302\":\"19#_2-volatile-解决上述问题\",\"303\":\"19#_1-概念\",\"304\":\"19#_2-底层原理-unsafe-class-rt-jar-cas-思想-自旋\",\"305\":\"19#_3-自旋锁源码\",\"306\":\"19#_4-底层汇编\",\"307\":\"19#_5-cas缺点\",\"308\":\"19#_6-aba问题\",\"309\":\"19#连环套路\",\"310\":\"19#原子引用\",\"311\":\"19#版本号\",\"312\":\"19#_7-longadder-cas机制优化\",\"313\":\"19#_1-java锁之公平锁和非公平锁\",\"314\":\"19#_1-概念-1\",\"315\":\"19#公平锁\",\"316\":\"19#非公平锁\",\"317\":\"19#如何创建\",\"318\":\"19#两者区别\",\"319\":\"19#题外话\",\"320\":\"19#_2-可重入锁和递归锁reentrantlock\",\"321\":\"19#概念\",\"322\":\"19#代码\",\"323\":\"19#作用\",\"324\":\"19#_3-自旋锁\",\"325\":\"19#优缺点\",\"326\":\"19#_4-独占锁-写锁-共享锁-读锁-互斥锁\",\"327\":\"19#_5-为什么synchronized无法禁止指令重排-却能保证有序性\",\"328\":\"19#前言\",\"329\":\"19#标准解答\",\"330\":\"19#来源\",\"331\":\"19#_1-countdownlatch-闭锁\",\"332\":\"19#概念-1\",\"333\":\"19#场景\",\"334\":\"19#解决方案\",\"335\":\"19#完整代码\",\"336\":\"19#_2-cyclicbarrier\",\"337\":\"19#概念-2\",\"338\":\"19#案例\",\"339\":\"19#完整代码-1\",\"340\":\"19#_3-semaphore-信号量\",\"341\":\"19#概念-3\",\"342\":\"19#代码-1\",\"343\":\"19#完整代码-2\",\"344\":\"19#_4-阻塞队列\",\"345\":\"19#概念-4\",\"346\":\"19#为什么要用\",\"347\":\"19#为什么需要blockingqueue\",\"348\":\"19#生产者消费者模式\",\"349\":\"19#_5-synchronized和lock的区别\",\"350\":\"19#前言-1\",\"351\":\"19#问题\",\"352\":\"19#synchronized-和-lock-有什么区别-用新的lock有什么好处-举例说明\",\"353\":\"19#_1-异步\",\"354\":\"19#_1-1-初始化线程的-4-种方式\",\"355\":\"19#_1-thread-方式启动\",\"356\":\"19#_2-runnable\",\"357\":\"19#_3-callable-futuretask-【陌生】\",\"358\":\"19#_2-线程池\",\"359\":\"19#_2-1-池化技术\",\"360\":\"19#_2-2-线程池实际中使用哪一个\",\"361\":\"19#_1-executors-工具类\",\"362\":\"19#_2-new-threadpoolexecutor-线程池七大参数\",\"363\":\"19#_3-运行流程\",\"364\":\"19#_4-面试-一个线程池-core-7-max-20-queue-50-100-并发进来怎么分配的\",\"365\":\"19#_5-executors-常见的-4-种线程池\",\"366\":\"19#_6-executors-中jdk已经给你提供了-为什么不用\",\"367\":\"19#_7-开发中为什么使用线程池\",\"368\":\"19#_8-项目中使用\",\"369\":\"19#一、mythreadconfig-java\",\"370\":\"19#二、threadpoolconfigproperties-java\",\"371\":\"19#三、use\",\"372\":\"19#_3-completablefuture-异步编排\",\"373\":\"19#_1-whencomplete-res-exception-方法完成后的感知-看下面例子\",\"374\":\"19#_2-handle-res-exception-方法完成后的处理-相对上面可以-return\",\"375\":\"19#_3-线程串行化方法\",\"376\":\"19#_4-两任务组合-都要完成-解决上面一开始说的关联性的问题\",\"377\":\"19#_3-项目中使用\",\"378\":\"19#aqs\",\"379\":\"19#了解锁升级吗\",\"380\":\"19#reentrantlock和synchronized区别\",\"381\":\"20\",\"382\":\"20#双亲委派模型\",\"383\":\"20#jvm-参数\",\"384\":\"20#java-内存区域\",\"385\":\"20#堆结构\",\"386\":\"20#方法区\",\"387\":\"20#类加载器\",\"388\":\"20#other\",\"389\":\"20#面试题\",\"390\":\"20#场景题\",\"391\":\"20#oom常见原因\",\"392\":\"20#排查\",\"393\":\"21\",\"394\":\"21#_1-搭建环境\",\"395\":\"21#_1-1-搭建数据库mysql\",\"396\":\"21#_1-2-idea-环境\",\"397\":\"21#_1-2-1-maven\",\"398\":\"21#_1-2-2-jdbc-properties\",\"399\":\"21#_1-2-3-log4j-properties\",\"400\":\"21#_1-2-4-mybatis-config-xml\",\"401\":\"21#_2-编写代码\",\"402\":\"21#_2-1-mybatisutil-工具类\",\"403\":\"21#_2-2-增删改查\",\"404\":\"21#_1-获取自增主键的值\",\"405\":\"21#_2-参数处理\",\"406\":\"21#_2-1-单个参数\",\"407\":\"21#_2-2-多个参数\",\"408\":\"21#_2-3-命名参数\",\"409\":\"21#_2-4-pojo\",\"410\":\"21#_2-4-to\",\"411\":\"21#_3-和-的区别\",\"412\":\"21#_4-返回list和map\",\"413\":\"21#_4-1-list\",\"414\":\"21#_4-2-map\",\"415\":\"21#_4-2-1-key-列名value-列值\",\"416\":\"21#_4-2-1-key-主键value-实体对象\",\"417\":\"21#_5-resulttype属性\",\"418\":\"21#_6-resultmap-自定义结果集映射\",\"419\":\"21#_6-1-简单使用\",\"420\":\"21#_6-2-association-一对一\",\"421\":\"21#_6-2-1-级联属性封装结果集\",\"422\":\"21#_6-2-2-使用association定义关联的单个对象的封装规则\",\"423\":\"21#_6-2-3-分步查询\",\"424\":\"21#_6-2-4-延迟加载\",\"425\":\"21#_6-3-collection-一对多\",\"426\":\"21#_6-3-1-封装list-employee-emps\",\"427\":\"21#_6-3-2-分步查询\",\"428\":\"21#_6-4-扩展\",\"429\":\"21#_6-5-鉴别器\",\"430\":\"21#_1-if\",\"431\":\"21#_2-where\",\"432\":\"21#_3-trim\",\"433\":\"21#_4-choose\",\"434\":\"21#_5-set\",\"435\":\"21#_6-foreach\",\"436\":\"21#_6-1-用法一\",\"437\":\"21#_6-2-用法二\",\"438\":\"21#_7-两个内置参数\",\"439\":\"21#_8-bind\",\"440\":\"21#_9-sql\",\"441\":\"21#_1-简介\",\"442\":\"21#_2-一级缓存-本地缓存\",\"443\":\"21#_2-1-特点\",\"444\":\"21#_2-2-一级缓存失效情况\",\"445\":\"21#_3-二级缓存\",\"446\":\"21#_3-1-工作机制\",\"447\":\"21#_3-2-效果\",\"448\":\"21#_3-3-使用\",\"449\":\"21#_4-和缓存有关的设置-属性\",\"450\":\"21#_5-缓存原理图\",\"451\":\"21#_6-第三方缓存整合\",\"452\":\"21#_1-前言\",\"453\":\"21#_1-1-好处\",\"454\":\"21#_1-2-我的问题\",\"455\":\"21#_2-整合流程\",\"456\":\"21#_2-1-踩坑\",\"457\":\"21#_2-2-代码\",\"458\":\"21#_2-2-1-maven\",\"459\":\"21#_2-2-2-web-xml\",\"460\":\"21#_2-2-3-spring-mvc-xml\",\"461\":\"21#_2-2-3-dbconfig-properties\",\"462\":\"21#_2-2-4-applicationcontext-xml【重头戏】\",\"463\":\"21#_2-2-5-log4j-properties\",\"464\":\"21#_2-2-6-mybatis-config-xml\",\"465\":\"21#_2-3-项目结构\",\"466\":\"22\",\"467\":\"22#_1-spring能做什么\",\"468\":\"22#_1-1-spring的能力\",\"469\":\"22#_1-2-spring5重大升级\",\"470\":\"22#_1-2-1-响应式编程\",\"471\":\"22#_1-2-2-内部源码设计\",\"472\":\"22#_2-为什么用springboot\",\"473\":\"22#_2-1-springboot优点\",\"474\":\"22#_2-2-时代背景\",\"475\":\"22#_1-依赖管理\",\"476\":\"22#_1-1-版本仲裁\",\"477\":\"22#_1-2-starter场景启动器\",\"478\":\"22#_2-自动配置-重要\",\"479\":\"22#_2-1-效果体现\",\"480\":\"22#_2-1-1-what-效果\",\"481\":\"22#_2-1-2-why-怎么做到的\",\"482\":\"22#_2-2-autoconfigurationpackage🌟\",\"483\":\"22#_2-3-import-autoconfigurationimportselector-class-🌟\",\"484\":\"22#_3-自动配置-实践\",\"485\":\"22#以mysql-配置数据源为例-datasourceproperties\",\"486\":\"22#_1-spring提供的ioc容器实现的两种方式-两个接口\",\"487\":\"22#_2-ioc操作bean管理\",\"488\":\"22#补充-构造参数注入-vs-setter注入\",\"489\":\"22#_3-bean生命周期\",\"490\":\"22#_4-aop\",\"491\":\"22#学习手册-pdf-补充\",\"492\":\"22#说说你平时有用到aop吗-例子很好-要知行合一\",\"493\":\"22#静态代理为什么是静态代理\",\"494\":\"22#补充-spring-aop-和-aspectj-aop-有什么区别\",\"495\":\"22#ruoyi-补充-aop-实操\",\"496\":\"22#upupor-补充-aop-实操\",\"497\":\"22#_5-spring-事务\",\"498\":\"22#_6-设计模式\",\"499\":\"22#_7-哪些模块组成\",\"500\":\"22#retention-retentionpolicy-runtime\",\"501\":\"22#postconstruct\",\"502\":\"22#rquestbody\",\"503\":\"22#responsebody\",\"504\":\"22#scope\",\"505\":\"22#value\",\"506\":\"22#springbootapplication-exclude-datasourceautoconfiguration-class\",\"507\":\"22#enableconfigurationproperties\",\"508\":\"22#configurationproperties\",\"509\":\"22#import-componentscan\",\"510\":\"22#postconstruct-1\",\"511\":\"22#pathvariable-page\",\"512\":\"22#pathparam-发现post请求的话只能用这个来拿参数-注意参数过长拿不到需要用request类拿\",\"513\":\"22#builder\",\"514\":\"22#bean\",\"515\":\"22#getmapping\",\"516\":\"22#componentscan-com-example-springbootapplication-scanbasepackages-com-example\",\"517\":\"22#configuration-proxybeanmethods-false-默认是true-告诉springboot这是一个配置类-配置文件\",\"518\":\"22#importresource-classpath-beans-xml\",\"519\":\"22#controlleradvice\",\"520\":\"22#restcontrolleradvice\",\"521\":\"22#servletcomponentscan\",\"522\":\"22#_1-一些小点\",\"523\":\"22#springboot-因为默认加入了slf4j-api和logback的依赖-所以只需要添加lombok的依赖即可\",\"524\":\"22#spring-boot-2-默认连接池hikaricp-黑卡丽-光的意思很快-日本人发明。区分druid连接池为监控而生扩展点多\",\"525\":\"22#spring-mvc-的默认json解析器便是-jackson\",\"526\":\"22#快速定位报错原因\",\"527\":\"22#_3-test-测试类\",\"528\":\"22#org-junit-jupiter-api-test和org-junit-test区别\",\"529\":\"22#关于-runwith-springrunner-class-的作用\",\"530\":\"22#单元测试类中-初始化方法\",\"531\":\"22#补充-springboottest\",\"532\":\"22#_4-有参数的-bean-configuration注解\",\"533\":\"22#_5-数据校验\",\"534\":\"22#_6-拦截器\",\"535\":\"22#_7-controller方法常用参数\",\"536\":\"22#_7-1-model-redirectattributes\",\"537\":\"22#_8-idea设置程序根目录\",\"538\":\"22#_8-实现applicationcontextaware接口的作用\",\"539\":\"22#_9-spring-静态资源启用版本控制\",\"540\":\"22#_9-1-minio处理\",\"541\":\"22#_10-springboot-配置加载优先级详解\",\"542\":\"22#_1-加载位置与顺序\",\"543\":\"22#_2-q-a\",\"544\":\"22#目的-解决springboot跨域请求的问题\",\"545\":\"22#第一种-corsconfig\",\"546\":\"22#第二种-注解方式\",\"547\":\"22#_1、vm-options\",\"548\":\"22#_2、program-arguments\",\"549\":\"22#_3、environment-variables\",\"550\":\"22#_4、通过项目中配置文件bootstrap-application文件载入\",\"551\":\"22#配置多数据源\",\"552\":\"23\",\"553\":\"23#_1-介绍\",\"554\":\"23#_2-再次总结什么是微服务\",\"555\":\"23#_1-idea-新建-父工程\",\"556\":\"23#_1-1-dependencymanagement-标签\",\"557\":\"23#_1-2-maven-跳过单元测试\",\"558\":\"23#_2-rest-微服务工程构建\",\"559\":\"23#_2-1-springboot-maven-plugin插件原理及作用【扩展】\",\"560\":\"23#_2-2-resttemplate\",\"561\":\"23#_3-工程重构\",\"562\":\"23#概述\",\"563\":\"23#_1-1-什么是服务治理\",\"564\":\"23#_1-2-什么是服务注册与发现\",\"565\":\"23#_1-3-eureka-集群\",\"566\":\"23#_1-4-service-provider-集群\",\"567\":\"23#actuator-微服务信息完善\",\"568\":\"23#_1-5-服务发现-discovery\",\"569\":\"23#_1-6-eureka自我保护理论知识\",\"570\":\"23#因为需要-虚拟机-暂时搁置-这一节自己还没有实践\",\"571\":\"23#cap\",\"572\":\"23#不是所谓的-3-选-2\",\"573\":\"23#_1-前言\",\"574\":\"23#_2-ribbon的负载均衡和rest调用\",\"575\":\"23#_3-ribbon负载规则替换\",\"576\":\"23#_1-openfeign服务调用\",\"577\":\"23#_2-openfeign超时控制\",\"578\":\"23#_3-openfeign日志增强\",\"579\":\"23#_4-补充-gulimall\",\"580\":\"23#_4-1-源码\",\"581\":\"23#_4-2-问题\",\"582\":\"23#_1-重要概念\",\"583\":\"23#_2-服务降级\",\"584\":\"23#_2-1-解决代码膨胀问题\",\"585\":\"23#_2-2-hystrix之通配服务降级feignfallback\",\"586\":\"23#_3-服务熔断\",\"587\":\"23#断路器开启或者关闭的条件\",\"588\":\"23#_4-服务限流\",\"589\":\"23#_5-hystrix图形化dashboard搭建\",\"590\":\"23#_1-前言-1\",\"591\":\"23#_2-通过微服务名实现动态路由\",\"592\":\"23#_1-config配置总控中心搭建\",\"593\":\"23#_2-config客户端配置与测试\",\"594\":\"23#_3-config动态刷新之手动版\",\"595\":\"23#_1-注册中心-代替-eureka\",\"596\":\"23#_2-配置中心-代替-bus\",\"597\":\"23#配置文件详解\",\"598\":\"23#common-yaml\",\"599\":\"23#_3-nacos集群和持久化配置-重要\",\"600\":\"23#_1-流控\",\"601\":\"23#_1-1-sentinel流控-关联\",\"602\":\"23#_1-2-sentinel流控-预热\",\"603\":\"23#_2-熔断-降级\",\"604\":\"23#_3-sentinelresource配置\",\"605\":\"23#_4-github-wiki文档\",\"606\":\"23#_1-概念\",\"607\":\"23#_2-快速开始\",\"608\":\"23#举例-at-模式-自动\",\"609\":\"23#后面看javaguide《面试指北》补充\",\"610\":\"23#一、spring-boot多服务项目不显示service窗口\",\"611\":\"24\",\"612\":\"24#常见集成模式\",\"613\":\"24#两个系统之间架设通道大致流程\",\"614\":\"25\",\"615\":\"25#_1-介绍\",\"616\":\"25#_2-项目流程\",\"617\":\"25#_3-流程图\",\"618\":\"25#需要调整的点-默认帮我们实现很多东西-我们需要定制改\",\"619\":\"25#_4-springsecurity原理\",\"620\":\"25#_1-认证流程图-橙色部分\",\"621\":\"25#_2-思路分析\",\"622\":\"25#后端\",\"623\":\"25#前端\",\"624\":\"25#_3-认证实现-userdetailsservice\",\"625\":\"25#_3-1-密码加密校验问题\",\"626\":\"25#_4-登陆接口-xxx-jwt\",\"627\":\"25#_5-校验其他接口-定义jwt认证过滤器\",\"628\":\"25#_6-退出登录\",\"629\":\"25#_1-实现\",\"630\":\"25#_2-rbac权限模型\",\"631\":\"25#_1-一些其他的过滤器\",\"632\":\"25#_2-以前没这么用过-postman测\",\"633\":\"26\",\"634\":\"26#典型回答\",\"635\":\"26#知识扩展\",\"636\":\"26#典型回答-1\",\"637\":\"26#考点分析\",\"638\":\"26#典型回答-2\",\"639\":\"26#考点分析-1\",\"640\":\"26#知识扩展-1\",\"641\":\"26#典型回答-3\",\"642\":\"27\",\"643\":\"27#for-int-j-0-j-100-0000-j-其中100-0000是什么\",\"644\":\"27#i-字节码三步-不是原子性\",\"645\":\"27#arraylist可以在循环时删除里面的数据吗😡todo\",\"646\":\"27#基础知识-unexpected-token\",\"647\":\"27#long-类型比较\",\"648\":\"27#在计算机系统中-数值一律用补码来表示-存储\",\"649\":\"27#return-碰上-finally\",\"650\":\"27#join-yield\",\"651\":\"27#map接口和collection接口是同一等级的\",\"652\":\"27#重载只看参数列表\",\"653\":\"27#赋值运算有返回值\",\"654\":\"27#is-a-like-a\",\"655\":\"27#is-a\",\"656\":\"27#has-a\",\"657\":\"27#like-a\",\"658\":\"27#static-初始化-类的加载顺序\",\"659\":\"27#接口与其实现类\",\"660\":\"27#四种引用类型\",\"661\":\"27#构造方法\",\"662\":\"27#final-变量\",\"663\":\"27#静态变量只能在类主体中定义-不能在方法中定义\",\"664\":\"27#pc寄存器-就是-程序计数器\",\"665\":\"27#导包\",\"666\":\"27#二维数组命名\",\"667\":\"27#实例对象也可以调用静态方法。-可以通过编译-但是不建议这样用\",\"668\":\"27#类指外部类的访问修饰符\",\"669\":\"27#interface-修饰符\",\"670\":\"27#值传递-i-i\",\"671\":\"27#switch语句中的参数\",\"672\":\"27#二分\",\"673\":\"27#map-通过匿名内部类方式初始化会有内存泄漏问题\",\"674\":\"27#concurrenthashmap-1-7-vs-1-8\",\"675\":\"27#并发和并行有什么区别\",\"676\":\"27#线程状态\",\"677\":\"27#java集合\",\"678\":\"27#谈一谈你对面向对象的理解\",\"679\":\"27#类加载具体过程\",\"680\":\"27#重载和重写\",\"681\":\"27#讲一下-hashmap-的哈希函数怎么实现\",\"682\":\"27#然后讲一下-hashmap-线程并发安全问题\",\"683\":\"27#说一下java对象中的对象拷贝\",\"684\":\"27#java基本语法\",\"685\":\"27#一、基础类型\",\"686\":\"27#面向对象\",\"687\":\"27#java高级部分\",\"688\":\"27#注解\",\"689\":\"27#stream流和for的区别\",\"690\":\"27#为什么重写-equals-时必须重写-hashcode-方法\",\"691\":\"27#集合set添加某元素时-先调用hashcode-方法-定位到此元素实际存储位置-如果这个位置没有元素-说明是第一次存储-若此位置有对象存在-调用equals-进行比较-相等就舍弃此元素不存-不等则散列到其他地址。\",\"692\":\"27#进阶-源码\",\"693\":\"27#一、jdk7的hashmap头插法循环的问题\",\"694\":\"27#一、jdk1-7-hashmap头插法在多线程环境下链表成环的场景怎么形成\",\"695\":\"27#《jvm规范》\",\"696\":\"27#_2-3-顺序\",\"697\":\"27#_1-首先-需要明白类的加载顺序。-构造方法的优先级一般比代码块低。\",\"698\":\"27#不会初始化子类的几种\",\"699\":\"27#有了对象的多态性以后-我们在编译期-只能调用父类中声明的方法-但在运行期-我们实际执行的是子类重写父类的方法。\",\"700\":\"27#重点懒汉式和饿汉式手写\",\"701\":\"27#一个java应用程序java-exe-其实至少三个线程-main-主线程-gc-垃圾回收线程-异常处理线程。当然如果发生异常-会影响主线程。\",\"702\":\"27#自动类型转换-只涉及7种基本数据类型\",\"703\":\"27#hashmap\",\"704\":\"27#一定要区分-实例变量-vs-类变量\",\"705\":\"27#检查异常-编译器要求必须处置的异常\",\"706\":\"27#本地访问-tomcat访问\",\"707\":\"28\",\"708\":\"28#如何解决大文件上传问题\",\"709\":\"28#javaio模型常见面试题总结\",\"710\":\"28#java-中-3-种常见-io-模型\",\"711\":\"28#bio-blocking-i-o\",\"712\":\"28#nio-non-blocking-new-i-o\",\"713\":\"28#aio-asynchronous-i-o\",\"714\":\"28#泛型\",\"715\":\"28#什么是泛型擦除机制-为什么要擦除\",\"716\":\"28#什么是桥方法-呈上\",\"717\":\"28#泛型有哪些限制-为什么\",\"718\":\"28#以下代码是否能编译-为什么\",\"719\":\"28#string-类常见面试题总结\",\"720\":\"28#第-1-题-奇怪的-nullnull\",\"721\":\"28#第-2-题-改变-string-的值\",\"722\":\"28#第-3-题-创建了几个对象\",\"723\":\"28#第-4-题-烧脑的-intern\",\"724\":\"28#string-s1-new-string-abc-这句话创建了几个字符串对象\",\"725\":\"28#第-5-题-还是创建了几个对象\",\"726\":\"28#简单介绍一下-spring-有啥缺点\",\"727\":\"28#什么是-spring-boot-starters\",\"728\":\"28#spring-springboot常用注解总结\",\"729\":\"28#如何使用-spring-boot-实现全局异常处理\",\"730\":\"28#spring-boot-中如何实现定时任务\",\"731\":\"28#springboot自动配置原理\",\"732\":\"28#分布式事务\",\"733\":\"28#分布式下日志收集\",\"734\":\"28#痛点\",\"735\":\"28#elk-了解么\",\"736\":\"28#elk-老三件套\",\"737\":\"28#什么是-tomcat\",\"738\":\"28#什么是-servlet-有什么作用\",\"739\":\"28#hashmap-的长度为什么是-2-的幂次方-⭐⭐⭐\",\"740\":\"28#jdk-1-7-和-jdk-1-8-的-concurrenthashmap-实现有什么不同\",\"741\":\"29\",\"742\":\"29#zero、xd\",\"743\":\"29#mp-框架api-get-it\",\"744\":\"29#一、lambda表达式简介\",\"745\":\"29#什么是lambda\",\"746\":\"29#为什么使用lambda\",\"747\":\"29#lambda对接口的要求\",\"748\":\"29#functionalinterface\",\"749\":\"29#二、lambda的基础语法\",\"750\":\"29#_1-语法\",\"751\":\"29#_2-创建多个接口\",\"752\":\"29#_3-创建测试类\",\"753\":\"29#三、语法精简\",\"754\":\"29#_1-参数类型精简\",\"755\":\"29#_2-参数小括号精简\",\"756\":\"29#_3-方法大括号精简\",\"757\":\"29#_4-大括号精简补充\",\"758\":\"29#_5-多参数-有返回值-精简\",\"759\":\"29#四、lambda语法进阶\",\"760\":\"29#_1-方法引用-普通方法与静态方法\",\"761\":\"29#语法\",\"762\":\"29#例\",\"763\":\"29#_2-方法引用-构造方法\",\"764\":\"29#五、综合练习\",\"765\":\"29#_1-集合排序案例\",\"766\":\"29#_2-treeset排序案例\",\"767\":\"29#_3-集合的遍历\",\"768\":\"29#_4-删除集合中满足条件的元素\",\"769\":\"29#_5-开辟一条线程-做一个数字的输出\",\"770\":\"29#六、系统内置的函数式接口\",\"771\":\"29#七、lambda闭包\",\"772\":\"29#stream流可以收集多次吗\",\"773\":\"29#stream-map-时-stream是否已经被操作了\",\"774\":\"30\",\"775\":\"30#flatmap\",\"776\":\"30#foreach\",\"777\":\"31\",\"778\":\"31#i\",\"779\":\"31#singleton单例模式\",\"780\":\"31#方法参数传递机制\",\"781\":\"32\",\"782\":\"32#shell-cli\",\"783\":\"32#tips\",\"784\":\"32#一般写日志输出-sh-test-sh-log-txt-其实-就等同于-1\",\"785\":\"32#linux是多用户操作系统\",\"786\":\"32#权限\",\"787\":\"32#scene\",\"788\":\"33\",\"789\":\"33#_1-1-docker\",\"790\":\"33#_1-2-java\",\"791\":\"33#_1-3-mysql\",\"792\":\"33#修改密码\",\"793\":\"33#开启mysql的远程访问-navicat\",\"794\":\"33#_1-4-redis\",\"795\":\"33#_1-5-nginx\",\"796\":\"33#_1-6-minio\",\"797\":\"33#_1-前置配置\",\"798\":\"33#通俗解释\",\"799\":\"33#_2-备份-minio\",\"800\":\"33#_3-备份-sql\",\"801\":\"33#_1-安装\",\"802\":\"33#_2-设置\",\"803\":\"33#_3-开启mysql的远程访问\",\"804\":\"33#_4-为firewalld添加开放端口\",\"805\":\"33#_5-更改mysql的语言\",\"806\":\"33#_6-linux-mysql导入sql文件\",\"807\":\"33#实测-运行-sql-文件的时长-取决于外存的好坏。例如-c-盘是固体对比其他盘机械硬盘差距很大\",\"808\":\"33#附录\",\"809\":\"33#_1-前言\",\"810\":\"33#_2-具体操作\",\"811\":\"34\",\"812\":\"34#_1-三大作用\",\"813\":\"34#_1-1-异步与解耦\",\"814\":\"34#_1-2-流量削峰\",\"815\":\"34#_1-3-没有哪一门技术是-银弹-消息队列也有它的副作用\",\"816\":\"34#_2-两大概念\",\"817\":\"34#_2-1-两种消息模型-jms提供为例\",\"818\":\"34#_2-2-两大规范-协议\",\"819\":\"34#_2-3-java-落地\",\"820\":\"34#spring支持\",\"821\":\"34#spring-boot自动配置\",\"822\":\"34#_2-核心概念\",\"823\":\"34#_1-rabbitmq\",\"824\":\"34#_2-rocketmq-时候笔记\",\"825\":\"34#_1-安装-rabbitmq\",\"826\":\"34#_2-spring-boot整合rabbitmq\",\"827\":\"34#_2-1-简介\",\"828\":\"34#_2-2-配置\",\"829\":\"34#_2-3-使用\",\"830\":\"34#rabbitlistener-类-方法上-监听哪些队列即可\",\"831\":\"34#rabbithandler-标在方法上-重载区分不同类型的消息\",\"832\":\"34#_2-4-消息确认机制-可靠抵达\",\"833\":\"34#_2-4-1-发送端确认\",\"834\":\"34#简介-两个过程-p-b、e-q\",\"835\":\"34#打开确认模式\",\"836\":\"34#设置回调-定制rabbittemplate\",\"837\":\"34#_2-4-2-消费端确认-手动-ack\",\"838\":\"34#_3-rabbitmq延时队列-实现定时任务\",\"839\":\"34#_3-1-为什么用延时队列不用定时任务\",\"840\":\"34#_3-2-延时队列实现\",\"841\":\"34#_3-2-1-队列过期-推荐\",\"842\":\"34#_3-2-2-消息过期\",\"843\":\"34#_3-3-mq-架构\",\"844\":\"34#_3-4-解锁库存\",\"845\":\"34#_3-5-可靠消息\",\"846\":\"34#_3-5-1-消息丢失\",\"847\":\"34#_3-5-2-消息重复\",\"848\":\"34#_3-5-3-消息积压\",\"849\":\"35\",\"850\":\"35#限流\",\"851\":\"35#分布式锁\",\"852\":\"35#缓存\",\"853\":\"35#_1-前置条件-改配置\",\"854\":\"35#_2-模拟业务场景-手机验证码\",\"855\":\"35#事务的冲突问题\",\"856\":\"35#watch-操作\",\"857\":\"35#redis-秒杀案例\",\"858\":\"35#lua脚本解决库存遗留问题\",\"859\":\"35#rdb\",\"860\":\"35#aof-append-only-file\",\"861\":\"35#_1-搭建一主多从\",\"862\":\"35#_2-复制原理\",\"863\":\"35#_3-薪火相传\",\"864\":\"35#_4-反客为主\",\"865\":\"35#_5-哨兵模式\",\"866\":\"35#_1-缓存穿透\",\"867\":\"35#_2-缓存击穿\",\"868\":\"35#_3-缓存雪崩\",\"869\":\"36\",\"870\":\"36#_1-课程内容\",\"871\":\"36#_2-redis的java客户端\",\"872\":\"36#_2-1-redistemplate\",\"873\":\"36#_2-2-反序列化问题-stringredistemplate\",\"874\":\"36#_1-问题\",\"875\":\"36#_2-解决\",\"876\":\"36#_1-1-这里使用hash保存用户信息\",\"877\":\"37\",\"878\":\"37#_1-1-redis-处理\",\"879\":\"37#_1-2-前端\",\"880\":\"37#_1-2-1-vue-baseurl\",\"881\":\"37#问题一-env-development\",\"882\":\"37#问题二-vue-config-js-proxy\",\"883\":\"37#仍然疑惑\",\"884\":\"37#日志\",\"885\":\"37#_3-1-list-centerpanel\",\"886\":\"37#_3-2-tree-leftpanel\",\"887\":\"37#ps-pagehelper\",\"888\":\"37#前端\",\"889\":\"37#后端\",\"890\":\"37#tips-注解\",\"891\":\"38\",\"892\":\"38#_1-mysql-查询拆解\",\"893\":\"38#_2-连接器\",\"894\":\"38#_3-查询缓存\",\"895\":\"38#_4-分析器\",\"896\":\"38#_5-优化器\",\"897\":\"38#_6-执行器\",\"898\":\"38#_1-前言\",\"899\":\"38#_2-redo-log\",\"900\":\"38#_3-binlog\",\"901\":\"38#_4-两阶段提交\",\"902\":\"38#_5-小结\",\"903\":\"38#补充\",\"904\":\"38#_1-前言-1\",\"905\":\"38#_2-隔离性与隔离级别\",\"906\":\"38#_3-事务隔离的实现\",\"907\":\"38#_4-事务的启动方式\",\"908\":\"38#_5-小结-1\",\"909\":\"38#_1-前言-2\",\"910\":\"38#补充-索引的优缺点\",\"911\":\"38#优点\",\"912\":\"38#面试题-百万级别以上的数据如何删除\",\"913\":\"38#_2-索引的常见模型\",\"914\":\"38#_2-1-哈希表\",\"915\":\"38#_2-2-有序数组\",\"916\":\"38#_2-3-搜索树\",\"917\":\"38#_3-innodb-的索引模型\",\"918\":\"38#_4-索引维护\",\"919\":\"38#_5-小结-2\",\"920\":\"38#补充-int-4-、int-8-、int-11-分别占用几个字节\",\"921\":\"38#_1-前言-3\",\"922\":\"38#_2-覆盖索引\",\"923\":\"38#_3-最左前缀原则\",\"924\":\"38#_4-索引下推\",\"925\":\"38#_5-小结-3\",\"926\":\"38#_1-前言-4\",\"927\":\"38#_2-全局锁\",\"928\":\"38#_3-表级锁\",\"929\":\"38#_4-小结\",\"930\":\"38#_1-前言-5\",\"931\":\"38#_2-从两阶段锁说起\",\"932\":\"38#_3-死锁和死锁检测\",\"933\":\"38#_4-小结-1\",\"934\":\"38#_1-前言-6\",\"935\":\"38#_2-快照-在-mvcc-里是怎么工作的\",\"936\":\"39\",\"937\":\"39#注意自连接\",\"938\":\"39#注意-update-没有-from\",\"939\":\"39#可以把-null-字段过滤成-0-或者用-if\",\"940\":\"39#if-表达式-if-expr1-expr2-expr3-expr1-的值为-true-则返回值为-expr2-expr1-的值为false-则返回值为-expr3\",\"941\":\"39#mysql-中调用下面的语句提示该错误\",\"942\":\"39#如果表名用了别名-要将别名放在delete和from之间\",\"943\":\"39#用-group-by-删除后面id值大的重复的数据\",\"944\":\"39#学习自连接-自连接-自己和自己做笛卡尔积\",\"945\":\"39#名字首字母大写-后面小写\",\"946\":\"39#group-concat-distinct-字段名-order-by-排序字段-asc-desc-separator-分隔符\",\"947\":\"39#列转行用union-all-一开始我没那么理解\",\"948\":\"39#case的使用\",\"949\":\"39#第二高的薪水\",\"950\":\"39#datediff-函数返回两个日期之间的天数。\",\"951\":\"39#date-时间格式的处理函数-取date类型字段为-2021年8月-的数据\",\"952\":\"39#要创建1天间隔-请使用以下表达式\",\"953\":\"39#可以-group-by-多个字段-且可以用-select-查出的东西\",\"954\":\"39#year-time-stamp-2020\",\"955\":\"39#sum-里面可以-case-when-then-end\",\"956\":\"39#sql中-select-count-1-count中的1-到底是什么意思呢-和count-的区别\",\"957\":\"39#between-2019-01-01-and-2019-03-31\",\"958\":\"39#发现函数的下标都是从-1-开始的\",\"959\":\"39#字符串匹配指定字串\",\"960\":\"39#概念\",\"961\":\"39#水平拆分实现\",\"962\":\"39#acid\",\"963\":\"39#mysql中字段类型与合理的选择字段类型-int-11-最大长度是多少-varchar最大长度是多少\",\"964\":\"39#全连接是外连接吗\",\"965\":\"39#mysql中创建表时候必须指定主键吗\",\"966\":\"39#mysql没有索引查行数据怎么查\",\"967\":\"39#全表扫码顺序有主键就根据主键扫-没有主键就是根据rowid来的是吗-yes\",\"968\":\"39#高性能-有哪些常见的-sql-优化手段\",\"969\":\"39#避免使用-select\",\"970\":\"39#尽量避免多表做-join\",\"971\":\"39#建议不要使用外键与级联\",\"972\":\"39#尽量使用自增-id-作为主键。\",\"973\":\"39#批量操作\",\"974\":\"39#删除长期未使用的索引\",\"975\":\"39#面试题-百万级别以上的数据如何删除\",\"976\":\"39#面试题-百万千万级大表如何添加字段\",\"977\":\"39#面试mai题-mysql-数据库-cpu-飙升的话-要怎么处理呢\",\"978\":\"39#聚簇索引一个表为什么只能有一个\",\"979\":\"40\",\"980\":\"40#https-www-youtube-com-watch-v-4zxtyc2zjxm\",\"981\":\"41\",\"982\":\"42\",\"983\":\"42#_1-前置配置\",\"984\":\"42#通俗解释\",\"985\":\"42#_1-备份-minio\",\"986\":\"42#前置设置\",\"987\":\"42#推送流程\",\"988\":\"42#无法获取远程分支\",\"989\":\"42#创建分支\",\"990\":\"42#创建并且切换到分支里\",\"991\":\"42#_1-三个板块\",\"992\":\"42#_2-以行为单位-解决冲突\",\"993\":\"42#_3-三种颜色标识\",\"994\":\"43\",\"995\":\"44\",\"996\":\"44#software\",\"997\":\"44#shortkey\",\"998\":\"44#tips\",\"999\":\"44#mac-knowledge\",\"1000\":\"44#other\",\"1001\":\"44#sqlserver\",\"1002\":\"44#安装-clashx-你懂的\",\"1003\":\"44#安装-app-和-cli-工具\",\"1004\":\"44#准备本地目录\",\"1005\":\"44#配置-app\",\"1006\":\"44#系统设置\",\"1007\":\"44#参考\",\"1008\":\"45\",\"1009\":\"45#pom-xml-relativepath\",\"1010\":\"45#true\",\"1011\":\"45#打包jar指定名字\",\"1012\":\"45#dependency-scope\",\"1013\":\"45#could-not-transfer-artifact-maven-default-http-blocker-maven打包报错\",\"1014\":\"45#maven项目pom文件-和-setting文件都有那个标签repository。是不是这两个文件作用一样\",\"1015\":\"46\",\"1016\":\"46#_1-匹配空行\",\"1017\":\"46#_2-使用错误\",\"1018\":\"46#非集\",\"1019\":\"46#capturing-group\",\"1020\":\"46#lzay\",\"1021\":\"46#positive-lookahead-negative-lookahead\",\"1022\":\"46#自己再研究\",\"1023\":\"46#other\",\"1024\":\"47\",\"1025\":\"47#隐藏系统磁盘\",\"1026\":\"47#wtg装pe-pe重装系统\",\"1027\":\"47#重装系统坑\",\"1028\":\"48\",\"1029\":\"48#win-ppause-看电脑系统参数\",\"1030\":\"48#win-k-打开「连接」设备-快速连耳机-暂时联想记忆为link\",\"1031\":\"48#calc-mspaint-notepad\",\"1032\":\"48#ctrl-d-删除文件\",\"1033\":\"48#win-p设置屏幕投影功能\",\"1034\":\"48#在文本输入过程中-键入windows徽标键-。-句点-将显示表情符号键盘。\",\"1035\":\"48#ctrl-alt-tab-打开切换界面-可以使用鼠标在打开的项目之间切换\",\"1036\":\"48#alt-esc-其实类似-alt-tab-不过它是让我们在没有最小化的窗口之间快速切换-按第一次打开的顺序切换【自我感觉少一步视图-更快】\",\"1037\":\"48#而当你摁下-alt-键的同时摁-prt-scr-它就会默认帮你截取当前窗口-而不是当前屏幕。这在一些媒体图片制作和屏幕截取中-非常方便。\",\"1038\":\"48#tips\",\"1039\":\"48#know\",\"1040\":\"48#start-www-baidu-com\",\"1041\":\"48#explorer-http-www-baidu-com\",\"1042\":\"48#代码块-ctrl-shift-k-mac-not-same\",\"1043\":\"48#插入链接-ctrl-k\",\"1044\":\"48#行-entry-段-shift-entry-两者决定行间隙\",\"1045\":\"48#shortcut-1-快速定位到修改过的地方的快捷键-好用-2-书签快捷键-3-还有github中python的批量保存关闭快捷键\",\"1046\":\"48#在-sublime-text-4-中-当你尝试替换文本时-它默认会保持替换的文本与原始文本的大小写一致。这意味着-如果你选择替换为大写文本-但原始文本是小写的-替换后的文本也会保持小写。\",\"1047\":\"48#搜索可以用正则-正则中的表达式可以用-包到里面-替换的时候可以用-1-n-代表第1-n个括号-来复用匹配到的内容-真的好用\",\"1048\":\"48#ctrl-shift-f-可以查-匹配-整个文件夹里的内容-高频使用\",\"1049\":\"48#快速插入多行递增数字\",\"1050\":\"48#ctrl-shift-p-install-package-control-搜索-insert-nums\",\"1051\":\"48#列模式批量操作-以矩形的形式选取内容\",\"1052\":\"49\",\"1053\":\"49#ctrl-ctrl-可以快速跳转到方法大括号的起止位置-配合方法分隔符使用-不怕找不到方法在哪儿分割了\",\"1054\":\"49#shift-alt-左键-可以和-sublime-一样多个光标\",\"1055\":\"49#ctrl-m-滚动到光标所在行\",\"1056\":\"49#条件断点、异常断点好用-停在异常抛出前-有问题的那一行代码\",\"1057\":\"49#idea-ctrl-shift-f-整理代码\",\"1058\":\"49#ctrl-o查看类中所有的方法\",\"1059\":\"49#先写输出语句括号里要输出的-再-sout试一下还有-if\",\"1060\":\"49#ctrl-alt-看有哪些有哪些构造方法\",\"1061\":\"49#alt向下移动该行-ctrl-alt复制该行\",\"1062\":\"49#_100-for-快速生成for循环-选择fori会生成递加-选择forr会生成递减\",\"1063\":\"49#ctrl-鼠标右键-可以高亮指定范围代码-还是-alt-鼠标右键也可以\",\"1064\":\"49#shift-shift-查类-再shift-shift-选中从jar包找\",\"1065\":\"49#alt-shift-m-可以把所选代码提取出来当方法\",\"1066\":\"49#alt-shift-z-包代码例try-catch\",\"1067\":\"49#f4-ctrl-h-看这个类结构-从哪里继承下来。。-ctrl-t-看这个接口有哪些实现类\",\"1068\":\"49#ctrl-shift-数字键。注意-这个快捷键只支持0-9十个数字助记符书签的快速添加。-shift-f11-直接标记-shift-f11-查看书签-ctrl-数字是跳转\",\"1069\":\"49#ctrl-home-end-到底部或顶部-ctrl-l-跳到指定行\",\"1070\":\"49#用【shift-enter】-可以【idea新建一行-并且光标移到新行】\",\"1071\":\"49#ctrl-o-ait-7-可以看这个类有哪些属性\",\"1072\":\"49#ctrl-可以收或打开括号-同ctrl-和输入法冲突\",\"1073\":\"49#上面的标签-按ctrl点击可以打开explorer\",\"1074\":\"49#ctrl-d-对比选中的两个文件代码-可比较两个-entity-属性等\",\"1075\":\"50\",\"1076\":\"50#围城\",\"1077\":\"51\",\"1078\":\"52\",\"1079\":\"52#_1-flyway\",\"1080\":\"52#_2-环境变量\",\"1081\":\"52#_1-事件驱动-eventlistener\",\"1082\":\"52#_1-实现applicationcontextaware接口的作用\",\"1083\":\"52#_2-spring-静态资源启用版本控制\",\"1084\":\"52#_3-lucene\",\"1085\":\"53\",\"1086\":\"53#问题建模-求解关键\",\"1087\":\"54\",\"1088\":\"54#_1-理论\",\"1089\":\"54#_1-前言\",\"1090\":\"54#_2-直接寻址技术\",\"1091\":\"54#_3-内存地址的表示方式\",\"1092\":\"54#_4-内存地址的数量决定cpu能访问的内存大小\",\"1093\":\"54#补充评论-没有深入探究了、尽信书-不如无书\",\"1094\":\"54#_2-实际\",\"1095\":\"54#_1-线程数和逻辑cpu个数-内核个数\",\"1096\":\"55\",\"1097\":\"55#_1-knife4j\",\"1098\":\"55#_2-module\",\"1099\":\"55#_3-node-js\",\"1100\":\"55#_4-vscode\",\"1101\":\"55#_1-mp-框架api-get-it\",\"1102\":\"56\",\"1103\":\"56#术语科普\",\"1104\":\"56#话术解读\",\"1105\":\"56#找工作到底该看什么\",\"1106\":\"56#地区\",\"1107\":\"56#月薪\",\"1108\":\"56#工资构成\",\"1109\":\"56#团队\",\"1110\":\"56#项目\",\"1111\":\"56#技术\",\"1112\":\"56#成长\",\"1113\":\"56#加班\",\"1114\":\"56#行业\",\"1115\":\"56#为防止受骗-要看什么\",\"1116\":\"56#公司工商信息\",\"1117\":\"56#坊间传闻\",\"1118\":\"56#确定想要离职吗\",\"1119\":\"56#原则一-骑驴找马\",\"1120\":\"56#原则二-不要相信挽留\",\"1121\":\"56#原则三-离职原因一定要不可打回\",\"1122\":\"56#离职时间\",\"1123\":\"56#面试官问离职原因\",\"1124\":\"56#简历注意事项\",\"1125\":\"56#原则\",\"1126\":\"56#格式\",\"1127\":\"56#内容\",\"1128\":\"56#投递平台\",\"1129\":\"56#投递时间\",\"1130\":\"56#hr-要工资条怎么办\",\"1131\":\"56#hr-说只能按上一份工资涨薪-30\",\"1132\":\"56#hr-说你不值这个价\",\"1133\":\"56#面试遇到不会的-心态如何把握\",\"1134\":\"56#你需要尽量引导话题\",\"1135\":\"56#如果遇到不会的-要大方承认-但是\",\"1136\":\"57\",\"1137\":\"57#文章的整体思路\",\"1138\":\"57#一、认清自己\",\"1139\":\"57#_1-1\",\"1140\":\"57#_1-2\",\"1141\":\"57#二、学习的目的\",\"1142\":\"57#三、时间管理\",\"1143\":\"57#四、学习方法\",\"1144\":\"57#_4-1-学习的步骤\",\"1145\":\"57#_4-2-获取资料的途径和一些工具。\",\"1146\":\"57#五、影响学习的几个因素\",\"1147\":\"57#_5-1-自己的心态\",\"1148\":\"57#_5-2-外物的影响\",\"1149\":\"57#六、其他想说的\",\"1150\":\"57#_6-1-关于大学生的学习\",\"1151\":\"57#_6-2-一点感悟\",\"1152\":\"57#七、结语\",\"1153\":\"58\",\"1154\":\"58#逼逼赖赖\",\"1155\":\"59\",\"1156\":\"60\",\"1157\":\"60#一、操作\",\"1158\":\"60#二、注意点\",\"1159\":\"60#三、总结\",\"1160\":\"61\",\"1161\":\"62\",\"1162\":\"63\",\"1163\":\"63#ios-15-ipados-15\",\"1164\":\"63#使用日常\",\"1165\":\"63#杂言\",\"1166\":\"64\",\"1167\":\"65\",\"1168\":\"66\",\"1169\":\"67\",\"1170\":\"68\",\"1171\":\"69\",\"1172\":\"70\",\"1173\":\"71\",\"1174\":\"72\",\"1175\":\"73\",\"1176\":\"74\",\"1177\":\"75\",\"1178\":\"76\",\"1179\":\"77\",\"1180\":\"78\",\"1181\":\"79\",\"1182\":\"80\",\"1183\":\"81\",\"1184\":\"82\",\"1185\":\"83\",\"1186\":\"84\",\"1187\":\"85\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[null,null,1],\"2\":[1,18],\"3\":[null,null,1],\"4\":[null,null,1],\"5\":[1,20],\"6\":[null,null,1],\"7\":[null,null,1],\"8\":[2,11],\"9\":[2,8],\"10\":[2,13],\"11\":[2,11],\"12\":[2,10],\"13\":[1,10],\"14\":[1,19],\"15\":[1,1],\"16\":[1,3],\"17\":[1,3],\"18\":[1,5],\"19\":[1,2],\"20\":[1,3],\"21\":[1,5],\"22\":[1,2],\"23\":[1],\"24\":[null,null,1],\"25\":[null,null,1],\"26\":[1,3],\"27\":[1,19],\"28\":[1,20],\"29\":[1,12],\"30\":[1,13],\"31\":[null,null,1],\"32\":[null,null,2],\"33\":[1],\"34\":[1],\"35\":[1,2],\"36\":[1,2],\"37\":[2],\"38\":[1,4],\"39\":[1,2],\"40\":[1,2],\"41\":[2],\"42\":[1,4],\"43\":[1,2],\"44\":[1,2],\"45\":[1,7],\"46\":[4,57],\"47\":[5,146],\"48\":[1,118],\"49\":[1,79],\"50\":[2,2],\"51\":[2,5],\"52\":[3,35],\"53\":[1],\"54\":[1,27],\"55\":[1],\"56\":[3,17],\"57\":[3,8],\"58\":[1,17],\"59\":[2],\"60\":[2,91],\"61\":[2,54],\"62\":[2,37],\"63\":[2,21],\"64\":[1,4],\"65\":[2,37],\"66\":[4,14],\"67\":[9,42],\"68\":[2,18],\"69\":[3,53],\"70\":[2,158],\"71\":[1,80],\"72\":[4,67],\"73\":[4,84],\"74\":[2],\"75\":[1],\"76\":[2,189],\"77\":[3,60],\"78\":[1,43],\"79\":[3,44],\"80\":[10,26],\"81\":[4,35],\"82\":[10,16],\"83\":[8,25],\"84\":[4],\"85\":[7,23],\"86\":[1,36],\"87\":[2,109],\"88\":[2,42],\"89\":[4,15],\"90\":[1,14],\"91\":[1,30],\"92\":[1,62],\"93\":[2,18],\"94\":[2,21],\"95\":[2,6],\"96\":[2,7],\"97\":[3,35],\"98\":[3,23],\"99\":[2,26],\"100\":[3,59],\"101\":[1,45],\"102\":[1,75],\"103\":[2,77],\"104\":[2],\"105\":[7,116],\"106\":[2,5],\"107\":[2,70],\"108\":[2,67],\"109\":[2,21],\"110\":[2,34],\"111\":[2,45],\"112\":[1,91],\"113\":[3,45],\"114\":[3,36],\"115\":[2,112],\"116\":[3,7],\"117\":[4,11],\"118\":[6,37],\"119\":[4,15],\"120\":[1,8],\"121\":[4,15],\"122\":[4,22],\"123\":[1,122],\"124\":[3,62],\"125\":[1,169],\"126\":[2,55],\"127\":[2],\"128\":[3,59],\"129\":[1,16],\"130\":[3,52],\"131\":[3,15],\"132\":[2,50],\"133\":[8,35],\"134\":[3,14],\"135\":[2,5],\"136\":[4,43],\"137\":[1],\"138\":[2,8],\"139\":[2,29],\"140\":[2,20],\"141\":[5,27],\"142\":[3,2],\"143\":[2,7],\"144\":[2,10],\"145\":[2,3],\"146\":[2,8],\"147\":[3,35],\"148\":[4,15],\"149\":[3],\"150\":[3,10],\"151\":[3,7],\"152\":[1,60],\"153\":[3,130],\"154\":[2,24],\"155\":[5,38],\"156\":[2,326],\"157\":[1,158],\"158\":[2,23],\"159\":[3,4],\"160\":[2,13],\"161\":[1,29],\"162\":[1,6],\"163\":[2],\"164\":[2,16],\"165\":[2,18],\"166\":[2],\"167\":[3,27],\"168\":[2],\"169\":[3,47],\"170\":[4,31],\"171\":[8,9],\"172\":[3,14],\"173\":[3,10],\"174\":[3,29],\"175\":[1],\"176\":[3,34],\"177\":[5,5],\"178\":[4,73],\"179\":[1,168],\"180\":[3],\"181\":[1],\"182\":[4,129],\"183\":[1,137],\"184\":[3,15],\"185\":[2],\"186\":[3,88],\"187\":[4,2],\"188\":[2,4],\"189\":[2,3],\"190\":[3,8],\"191\":[3,14],\"192\":[4,37],\"193\":[3,7],\"194\":[2,5],\"195\":[3,2],\"196\":[3,12],\"197\":[3,24],\"198\":[3,30],\"199\":[4,5],\"200\":[2,10],\"201\":[4,15],\"202\":[3,101],\"203\":[1,15],\"204\":[2,6],\"205\":[3,6],\"206\":[4,18],\"207\":[1,3],\"208\":[2,71],\"209\":[2],\"210\":[2,106],\"211\":[3,45],\"212\":[3,18],\"213\":[2,45],\"214\":[2],\"215\":[2,43],\"216\":[3,116],\"217\":[3,29],\"218\":[2,38],\"219\":[1,66],\"220\":[1,237],\"221\":[4,56],\"222\":[4,62],\"223\":[5,56],\"224\":[3,10],\"225\":[3,35],\"226\":[3,29],\"227\":[2,49],\"228\":[2,33],\"229\":[2,254],\"230\":[1,37],\"231\":[1,70],\"232\":[3,7],\"233\":[1,33],\"234\":[3,19],\"235\":[2],\"236\":[1,37],\"237\":[1,14],\"238\":[6,69],\"239\":[1,18],\"240\":[1,90],\"241\":[1,44],\"242\":[1,49],\"243\":[3,27],\"244\":[4,32],\"245\":[2],\"246\":[3,9],\"247\":[1,39],\"248\":[4],\"249\":[1,23],\"250\":[1,19],\"251\":[2,18],\"252\":[1,78],\"253\":[1,8],\"254\":[2,12],\"255\":[3,2],\"256\":[2,13],\"257\":[3,22],\"258\":[1,7],\"259\":[1],\"260\":[2,52],\"261\":[2,136],\"262\":[1,18],\"263\":[5,11],\"264\":[2,2],\"265\":[1,38],\"266\":[3],\"267\":[1,81],\"268\":[3,27],\"269\":[1,9],\"270\":[3,15],\"271\":[3,20],\"272\":[3,23],\"273\":[2,8],\"274\":[2,9],\"275\":[4,16],\"276\":[4,14],\"277\":[2,24],\"278\":[4,32],\"279\":[2,12],\"280\":[3,2],\"281\":[2,24],\"282\":[3,19],\"283\":[3,90],\"284\":[4,21],\"285\":[2],\"286\":[2,20],\"287\":[2,22],\"288\":[2,8],\"289\":[2],\"290\":[2,69],\"291\":[2,9],\"292\":[2,25],\"293\":[3,33],\"294\":[1,21],\"295\":[3,62],\"296\":[1,28],\"297\":[1,6],\"298\":[2,6],\"299\":[2,7],\"300\":[2],\"301\":[6,79],\"302\":[4,115],\"303\":[2,25],\"304\":[11,34],\"305\":[2,93],\"306\":[2,8],\"307\":[2,19],\"308\":[2,1],\"309\":[2,77],\"310\":[1,33],\"311\":[1,3],\"312\":[1,24],\"313\":[2],\"314\":[2],\"315\":[1,6],\"316\":[1,8],\"317\":[1,43],\"318\":[1,15],\"319\":[1,6],\"320\":[2],\"321\":[1,49],\"322\":[1,16],\"323\":[1,2],\"324\":[2,12],\"325\":[1,6],\"326\":[6,33],\"327\":[3,7],\"328\":[1,16],\"329\":[1,61],\"330\":[1,8],\"331\":[3,7],\"332\":[1,9],\"333\":[1,10],\"334\":[1,53],\"335\":[1,37],\"336\":[2,2],\"337\":[1,18],\"338\":[1,55],\"339\":[1,53],\"340\":[3],\"341\":[1,3],\"342\":[1,37],\"343\":[1,53],\"344\":[2,5],\"345\":[1,17],\"346\":[2,11],\"347\":[1,9],\"348\":[1,16],\"349\":[2],\"350\":[1,10],\"351\":[1],\"352\":[6,162],\"353\":[2,7],\"354\":[4,21],\"355\":[3,5],\"356\":[2,6],\"357\":[4,35],\"358\":[1],\"359\":[3,33],\"360\":[2,11],\"361\":[3,24],\"362\":[5,93],\"363\":[3,55],\"364\":[12,15],\"365\":[5,22],\"366\":[5,40],\"367\":[2,12],\"368\":[2],\"369\":[3,8],\"370\":[3,11],\"371\":[2,9],\"372\":[1,52],\"373\":[6],\"374\":[7,47],\"375\":[2,10],\"376\":[5,5],\"377\":[2,37],\"378\":[2,33],\"379\":[2,50],\"380\":[2,49],\"381\":[1,15],\"382\":[2,31],\"383\":[1,138],\"384\":[3],\"385\":[1,96],\"386\":[1,21],\"387\":[2,8],\"388\":[2,110],\"389\":[2,62],\"390\":[2],\"391\":[2,12],\"392\":[1,23],\"393\":[1,41],\"394\":[2,2],\"395\":[2,1],\"396\":[4],\"397\":[3,63],\"398\":[4,26],\"399\":[5,31],\"400\":[6,98],\"401\":[2],\"402\":[4,42],\"403\":[2,42],\"404\":[2,30],\"405\":[2],\"406\":[3,4],\"407\":[2,8],\"408\":[3,29],\"409\":[3,5],\"410\":[3,7],\"411\":[4,46],\"412\":[2],\"413\":[3,3],\"414\":[3],\"415\":[8,50],\"416\":[8,25],\"417\":[2,10],\"418\":[4],\"419\":[3,72],\"420\":[5],\"421\":[5,44],\"422\":[4,50],\"423\":[4,48],\"424\":[4,24],\"425\":[5],\"426\":[6,53],\"427\":[4,74],\"428\":[3,28],\"429\":[3,96],\"430\":[2,103],\"431\":[2,24],\"432\":[2,62],\"433\":[2,45],\"434\":[2,40],\"435\":[2],\"436\":[4,75],\"437\":[4,48],\"438\":[2,60],\"439\":[2,8],\"440\":[2,48],\"441\":[2,18],\"442\":[4],\"443\":[3,33],\"444\":[2,14],\"445\":[2,3],\"446\":[4,12],\"447\":[4,30],\"448\":[3,67],\"449\":[4,32],\"450\":[2,2],\"451\":[2,31],\"452\":[2],\"453\":[2,7],\"454\":[3,48],\"455\":[2],\"456\":[3,8],\"457\":[2],\"458\":[3,86],\"459\":[3,98],\"460\":[5,82],\"461\":[4,15],\"462\":[6,168],\"463\":[4,27],\"464\":[5,42],\"465\":[3,109],\"466\":[1,64],\"467\":[2],\"468\":[2,26],\"469\":[3],\"470\":[3],\"471\":[3,18],\"472\":[2,10],\"473\":[1,87],\"474\":[2,17],\"475\":[2],\"476\":[2,41],\"477\":[3,57],\"478\":[1,27],\"479\":[3],\"480\":[5,36],\"481\":[1,13],\"482\":[2,44],\"483\":[6,98],\"484\":[3,3],\"485\":[3,26],\"486\":[4,55],\"487\":[2,51],\"488\":[3,46],\"489\":[2,80],\"490\":[2,8],\"491\":[4,7],\"492\":[4,163],\"493\":[2,35],\"494\":[7,40],\"495\":[4,39],\"496\":[4,28],\"497\":[3,10],\"498\":[2,48],\"499\":[2,21],\"500\":[4,5],\"501\":[2,13],\"502\":[2,15],\"503\":[2,27],\"504\":[2,24],\"505\":[2,29],\"506\":[2,13],\"507\":[1,18],\"508\":[2,4],\"509\":[3,14],\"510\":[2,5],\"511\":[3,21],\"512\":[4,17],\"513\":[2,11],\"514\":[2,18],\"515\":[2,13],\"516\":[8],\"517\":[9,59],\"518\":[5,4],\"519\":[2,4],\"520\":[2,68],\"521\":[2,12],\"522\":[2,78],\"523\":[2,29],\"524\":[5],\"525\":[1,6],\"526\":[1,2],\"527\":[4],\"528\":[1,13],\"529\":[1,25],\"530\":[2,12],\"531\":[1,30],\"532\":[1,19],\"533\":[2,1],\"534\":[2,66],\"535\":[2],\"536\":[4,23],\"537\":[2,59],\"538\":[2,64],\"539\":[3,121],\"540\":[3,69],\"541\":[1],\"542\":[2,5],\"543\":[3,387],\"544\":[2],\"545\":[3,6],\"546\":[2,160],\"547\":[3,31],\"548\":[3,24],\"549\":[3,23],\"550\":[3,12],\"551\":[1,21],\"552\":[1,32],\"553\":[1,44],\"554\":[1,67],\"555\":[4],\"556\":[3,77],\"557\":[4,3],\"558\":[3,12],\"559\":[7,43],\"560\":[1,16],\"561\":[2,19],\"562\":[1,12],\"563\":[2,13],\"564\":[3,25],\"565\":[4,25],\"566\":[5,31],\"567\":[2,19],\"568\":[4,27],\"569\":[3,12],\"570\":[5,25],\"571\":[1,93],\"572\":[5,134],\"573\":[2,26],\"574\":[2,21],\"575\":[2,27],\"576\":[2,102],\"577\":[2,34],\"578\":[2,7],\"579\":[3],\"580\":[3,26],\"581\":[3,62],\"582\":[2,39],\"583\":[2,16],\"584\":[3,21],\"585\":[2,20],\"586\":[2,32],\"587\":[1,38],\"588\":[1,3],\"589\":[2,38],\"590\":[2,77],\"591\":[1,163],\"592\":[2,2],\"593\":[2,52],\"594\":[2,281],\"595\":[4,18],\"596\":[4,8],\"597\":[1,39],\"598\":[2,133],\"599\":[4,50],\"600\":[2,21],\"601\":[3,9],\"602\":[4,10],\"603\":[3,50],\"604\":[2,21],\"605\":[1,29],\"606\":[2,91],\"607\":[1,62],\"608\":[5,83],\"609\":[2,51],\"610\":[3,28],\"611\":[1,6],\"612\":[2,29],\"613\":[2,38],\"614\":[1,20],\"615\":[2,12],\"616\":[2,25],\"617\":[2,11],\"618\":[3,13],\"619\":[2,32],\"620\":[4,26],\"621\":[2,23],\"622\":[2,2],\"623\":[2,2],\"624\":[3,68],\"625\":[3,88],\"626\":[5,38],\"627\":[3,86],\"628\":[2,21],\"629\":[2,34],\"630\":[2,68],\"631\":[2,9],\"632\":[3,39],\"633\":[1,20],\"634\":[1,53],\"635\":[1,71],\"636\":[1,67],\"637\":[1,48],\"638\":[1,26],\"639\":[1,33],\"640\":[1,39],\"641\":[1,34],\"642\":[1,16],\"643\":[12,15],\"644\":[4,7],\"645\":[2,19],\"646\":[1,37],\"647\":[3,42],\"648\":[1,77],\"649\":[4,9],\"650\":[3,54],\"651\":[2],\"652\":[2,7],\"653\":[2,14],\"654\":[3],\"655\":[1,14],\"656\":[1,16],\"657\":[1,41],\"658\":[1,139],\"659\":[2,7],\"660\":[2,110],\"661\":[2,17],\"662\":[3,40],\"663\":[3],\"664\":[4,13],\"665\":[2,11],\"666\":[2,11],\"667\":[4,4],\"668\":[2,14],\"669\":[3,10],\"670\":[5,39],\"671\":[2,51],\"672\":[2,8],\"673\":[3],\"674\":[6,24],\"675\":[2,20],\"676\":[2,8],\"677\":[1,17],\"678\":[2,32],\"679\":[2,76],\"680\":[2,20],\"681\":[4,61],\"682\":[4,24],\"683\":[2,44],\"684\":[1],\"685\":[2,119],\"686\":[1,362],\"687\":[1,190],\"688\":[1,669],\"689\":[2,86],\"690\":[6,15],\"691\":[12,85],\"692\":[2],\"693\":[2,34],\"694\":[1,134],\"695\":[2,19],\"696\":[4,35],\"697\":[5,51],\"698\":[1,3],\"699\":[6,6],\"700\":[2,30],\"701\":[11],\"702\":[3,20],\"703\":[1,50],\"704\":[4,8],\"705\":[3,25],\"706\":[3,177],\"707\":[1,5],\"708\":[2,31],\"709\":[2,84],\"710\":[6],\"711\":[5,26],\"712\":[7,160],\"713\":[5,156],\"714\":[2],\"715\":[3,90],\"716\":[3,31],\"717\":[3,41],\"718\":[3,32],\"719\":[3],\"720\":[5,73],\"721\":[6,106],\"722\":[5,189],\"723\":[5,111],\"724\":[7,86],\"725\":[5,145],\"726\":[4,53],\"727\":[5,30],\"728\":[3,10],\"729\":[5,9],\"730\":[4,52],\"731\":[2,59],\"732\":[2,1],\"733\":[2],\"734\":[2,18],\"735\":[3,6],\"736\":[2,39],\"737\":[3,18],\"738\":[4,26],\"739\":[5,91],\"740\":[9,161],\"741\":[1,15],\"742\":[2],\"743\":[5,59],\"744\":[2],\"745\":[2,4],\"746\":[1,1],\"747\":[1,9],\"748\":[2,28],\"749\":[2],\"750\":[2,23],\"751\":[2,39],\"752\":[2,95],\"753\":[2,1],\"754\":[2,23],\"755\":[2,16],\"756\":[2,15],\"757\":[2,12],\"758\":[4,12],\"759\":[2],\"760\":[4,17],\"761\":[2,19],\"762\":[2,44],\"763\":[4,53],\"764\":[2],\"765\":[2,71],\"766\":[2,73],\"767\":[2,63],\"768\":[2,75],\"769\":[3,43],\"770\":[2,79],\"771\":[2,74],\"772\":[2,7],\"773\":[5,16],\"774\":[1],\"775\":[2,37],\"776\":[2,27],\"777\":[1,8],\"778\":[1,56],\"779\":[2,158],\"780\":[2,67],\"781\":[1],\"782\":[2,144],\"783\":[1],\"784\":[9,43],\"785\":[1,59],\"786\":[1,48],\"787\":[1,84],\"788\":[2,5],\"789\":[1,54],\"790\":[3,62],\"791\":[3,25],\"792\":[1,26],\"793\":[2,27],\"794\":[3,25],\"795\":[3,41],\"796\":[3,89],\"797\":[1,33],\"798\":[2,38],\"799\":[3,53],\"800\":[3,95],\"801\":[2,26],\"802\":[2,99],\"803\":[2,27],\"804\":[2,21],\"805\":[2,35],\"806\":[3,13],\"807\":[1,3],\"808\":[1,22],\"809\":[2,20],\"810\":[2,101],\"811\":[1,4],\"812\":[2,2],\"813\":[2,16],\"814\":[3,28],\"815\":[5,23],\"816\":[2,10],\"817\":[5,30],\"818\":[3,31],\"819\":[4],\"820\":[1,13],\"821\":[2,2],\"822\":[2],\"823\":[2,126],\"824\":[3,22],\"825\":[3,35],\"826\":[3],\"827\":[3,16],\"828\":[2,45],\"829\":[3,37],\"830\":[4,42],\"831\":[4,27],\"832\":[1,20],\"833\":[4,6],\"834\":[1,14],\"835\":[1,19],\"836\":[3,54],\"837\":[2,88],\"838\":[1,4],\"839\":[3,13],\"840\":[3,6],\"841\":[6,2],\"842\":[3,8],\"843\":[3,9],\"844\":[3,72],\"845\":[3,22],\"846\":[4,47],\"847\":[4,11],\"848\":[3,16],\"849\":[1,159],\"850\":[2,38],\"851\":[2,54],\"852\":[2,28],\"853\":[3,14],\"854\":[3,28],\"855\":[1,20],\"856\":[2,6],\"857\":[2,46],\"858\":[1,10],\"859\":[1,9],\"860\":[5,18],\"861\":[2,26],\"862\":[2,18],\"863\":[2,7],\"864\":[2,15],\"865\":[2,86],\"866\":[2,59],\"867\":[2,38],\"868\":[2,79],\"869\":[1,28],\"870\":[2,6],\"871\":[2,44],\"872\":[3,16],\"873\":[3,3],\"874\":[3,2],\"875\":[2,14],\"876\":[2,168],\"877\":[2,63],\"878\":[3,52],\"879\":[3,50],\"880\":[4,31],\"881\":[3,16],\"882\":[6,22],\"883\":[2,140],\"884\":[1,46],\"885\":[4,21],\"886\":[4,3],\"887\":[2,108],\"888\":[2,11],\"889\":[2,61],\"890\":[2,93],\"891\":[1,12],\"892\":[3,77],\"893\":[2,134],\"894\":[2,84],\"895\":[2,76],\"896\":[2,52],\"897\":[2,158],\"898\":[2,72],\"899\":[3,184],\"900\":[2,139],\"901\":[2,133],\"902\":[2,77],\"903\":[1,23],\"904\":[2,52],\"905\":[2,241],\"906\":[2,199],\"907\":[2,81],\"908\":[2,99],\"909\":[2,34],\"910\":[2],\"911\":[2,23],\"912\":[3,2],\"913\":[2,25],\"914\":[3,69],\"915\":[2,46],\"916\":[3,187],\"917\":[3,89],\"918\":[2,118],\"919\":[2,80],\"920\":[1,25],\"921\":[2,100],\"922\":[2,101],\"923\":[2,244],\"924\":[2,93],\"925\":[2,115],\"926\":[2,20],\"927\":[2,183],\"928\":[2,199],\"929\":[2,146],\"930\":[2,39],\"931\":[2,114],\"932\":[2,209],\"933\":[2,111],\"934\":[2,148],\"935\":[6,198],\"936\":[1,53],\"937\":[1,41],\"938\":[4,64],\"939\":[6,14],\"940\":[9,9],\"941\":[2,31],\"942\":[2,14],\"943\":[1,17],\"944\":[3],\"945\":[2,14],\"946\":[12,12],\"947\":[3,68],\"948\":[1,27],\"949\":[1,13],\"950\":[3,5],\"951\":[5,43],\"952\":[3,24],\"953\":[1,13],\"954\":[5,27],\"955\":[1,21],\"956\":[1,31],\"957\":[7],\"958\":[3],\"959\":[1,501],\"960\":[1,81],\"961\":[1,183],\"962\":[1,45],\"963\":[1,66],\"964\":[1,20],\"965\":[1,15],\"966\":[1,6],\"967\":[3,27],\"968\":[5],\"969\":[3,29],\"970\":[3,76],\"971\":[1,12],\"972\":[4,56],\"973\":[1,24],\"974\":[1,12],\"975\":[3,23],\"976\":[3,34],\"977\":[7,49],\"978\":[2,6],\"979\":[2],\"980\":[6,73],\"981\":[1,56],\"982\":[2],\"983\":[1,33],\"984\":[2,38],\"985\":[3,89],\"986\":[1,51],\"987\":[1,82],\"988\":[1,10],\"989\":[1,4],\"990\":[1,191],\"991\":[2,7],\"992\":[3],\"993\":[2,70],\"994\":[2,162],\"995\":[1,4],\"996\":[1,91],\"997\":[1,26],\"998\":[1,165],\"999\":[2,44],\"1000\":[1],\"1001\":[1,84],\"1002\":[3,2],\"1003\":[5,159],\"1004\":[1,18],\"1005\":[2,867],\"1006\":[1,165],\"1007\":[1,10],\"1008\":[1,9],\"1009\":[1,80],\"1010\":[1,117],\"1011\":[1,4],\"1012\":[2,168],\"1013\":[1,53],\"1014\":[4,33],\"1015\":[2,8],\"1016\":[2,14],\"1017\":[3,26],\"1018\":[2,8],\"1019\":[3,64],\"1020\":[3,17],\"1021\":[1,27],\"1022\":[1,28],\"1023\":[1,18],\"1024\":[1,3],\"1025\":[2,3],\"1026\":[3,6],\"1027\":[1,12],\"1028\":[1],\"1029\":[2],\"1030\":[7,2],\"1031\":[3],\"1032\":[2],\"1033\":[1],\"1034\":[6],\"1035\":[3],\"1036\":[10,10],\"1037\":[5,60],\"1038\":[1,56],\"1039\":[1,18],\"1040\":[4],\"1041\":[5,183],\"1042\":[9],\"1043\":[4],\"1044\":[6],\"1045\":[8,2],\"1046\":[12,5],\"1047\":[10,1],\"1048\":[5],\"1049\":[1],\"1050\":[8],\"1051\":[3,24],\"1052\":[1],\"1053\":[3],\"1054\":[4],\"1055\":[2],\"1056\":[1],\"1057\":[6],\"1058\":[2],\"1059\":[5],\"1060\":[4],\"1061\":[2],\"1062\":[3],\"1063\":[6],\"1064\":[4],\"1065\":[5],\"1066\":[5],\"1067\":[9],\"1068\":[11],\"1069\":[4],\"1070\":[8],\"1071\":[6],\"1072\":[5],\"1073\":[2],\"1074\":[5,42],\"1075\":[1],\"1076\":[1,41],\"1077\":[1,35],\"1078\":[1,17],\"1079\":[2,33],\"1080\":[2,30],\"1081\":[3,249],\"1082\":[2,68],\"1083\":[1,29],\"1084\":[2,169],\"1085\":[3,107],\"1086\":[3,9],\"1087\":[1],\"1088\":[2],\"1089\":[2,16],\"1090\":[2,18],\"1091\":[2,23],\"1092\":[2,39],\"1093\":[5,29],\"1094\":[1],\"1095\":[3,36],\"1096\":[1,10],\"1097\":[2,26],\"1098\":[2,3],\"1099\":[3,10],\"1100\":[2,17],\"1101\":[6,62],\"1102\":[2],\"1103\":[1,32],\"1104\":[1,54],\"1105\":[2,9],\"1106\":[1,29],\"1107\":[1,22],\"1108\":[1,27],\"1109\":[1,15],\"1110\":[1,9],\"1111\":[1,11],\"1112\":[1,12],\"1113\":[1,9],\"1114\":[1,18],\"1115\":[2,4],\"1116\":[1,8],\"1117\":[1,7],\"1118\":[1,9],\"1119\":[2,11],\"1120\":[2,4],\"1121\":[2,12],\"1122\":[1,7],\"1123\":[1,7],\"1124\":[1],\"1125\":[1,12],\"1126\":[1,20],\"1127\":[1,24],\"1128\":[1,15],\"1129\":[1,12],\"1130\":[2,48],\"1131\":[4,13],\"1132\":[2,18],\"1133\":[2],\"1134\":[1,20],\"1135\":[3,19],\"1136\":[5],\"1137\":[1,13],\"1138\":[2],\"1139\":[1,48],\"1140\":[2,50],\"1141\":[2,29],\"1142\":[2,64],\"1143\":[2,14],\"1144\":[3,132],\"1145\":[4,88],\"1146\":[2],\"1147\":[3,14],\"1148\":[3,25],\"1149\":[2],\"1150\":[3,511],\"1151\":[3,13],\"1152\":[2,27],\"1153\":[1,8],\"1154\":[1,19],\"1155\":[3,21],\"1156\":[1,11],\"1157\":[2,24],\"1158\":[2,22],\"1159\":[2,7],\"1160\":[4,69],\"1161\":[1,109],\"1162\":[1,47],\"1163\":[3,10],\"1164\":[1,58],\"1165\":[1,4],\"1166\":[3,71],\"1167\":[1,3],\"1168\":[2],\"1169\":[1],\"1170\":[2],\"1171\":[2],\"1172\":[1],\"1173\":[1],\"1174\":[2],\"1175\":[2],\"1176\":[1],\"1177\":[1],\"1178\":[2],\"1179\":[2],\"1180\":[1],\"1181\":[1],\"1182\":[1],\"1183\":[1],\"1184\":[2],\"1185\":[1],\"1186\":[1],\"1187\":[2]},\"averageFieldLength\":[2.530947920060821,42.96450196817136,0.8351981351981352],\"storedFields\":{\"0\":{\"h\":\"主要功能与配置演示\"},\"1\":{\"c\":[\"使用指南\"]},\"2\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"3\":{\"c\":[\"使用指南\"]},\"4\":{\"c\":[\"禁用\"]},\"5\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"6\":{\"c\":[\"指南\"]},\"7\":{\"c\":[\"布局\"]},\"8\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"9\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"10\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"相关信息\",\"Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 Frontmatter 介绍。\"]},\"11\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"12\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"13\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"14\":{\"h\":\"提示容器\",\"t\":[\"安全的在 Markdown 中使用 {{ variable }}。\",\"自定义标题\",\"信息容器，包含 代码 与 链接。\",\"const a = 1; \",\"自定义标题\",\"提示容器\",\"自定义标题\",\"警告容器\",\"自定义标题\",\"危险容器\",\"自定义标题\",\"详情容器\",\"查看详情\"]},\"15\":{\"h\":\"代码块\",\"t\":[\"查看详情\"]},\"16\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"17\":{\"h\":\"自定义对齐\",\"t\":[\"我是居中的\",\"我在右对齐\",\"查看详情\"]},\"18\":{\"h\":\"Attrs\",\"t\":[\"一个拥有 ID 的 单词。\",\"查看详情\"]},\"19\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注^first.\",\"查看详情\"]},\"20\":{\"h\":\"标记\",\"t\":[\"你可以标记 重要的内容 。\",\"查看详情\"]},\"21\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"22\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小\",\"查看详情\"]},\"23\":{\"h\":\"组件\"},\"24\":{\"c\":[\"使用指南\"]},\"25\":{\"c\":[\"Markdown\"]},\"26\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"27\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 --- \"]},\"28\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"29\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"30\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"31\":{\"c\":[\"使用指南\"]},\"32\":{\"c\":[\"页面配置\",\"使用指南\"]},\"33\":{\"h\":\"指南\"},\"34\":{\"h\":\"功能亮点\"},\"35\":{\"h\":\"Bar\",\"t\":[\"baz\",\"...\"]},\"36\":{\"h\":\"Foo\",\"t\":[\"ray\",\"...\"]},\"37\":{\"h\":\"Bar 功能\"},\"38\":{\"h\":\"介绍\",\"t\":[\"我们支持 bar 功能，...\"]},\"39\":{\"h\":\"详情\",\"t\":[\"baz\",\"...\"]},\"40\":{\"h\":\"Baz\",\"t\":[\"功能详情...\"]},\"41\":{\"h\":\"Foo 功能\"},\"42\":{\"h\":\"介绍\",\"t\":[\"我们支持 foo 功能，...\"]},\"43\":{\"h\":\"详情\",\"t\":[\"ray\",\"...\"]},\"44\":{\"h\":\"Ray\",\"t\":[\"功能详情...\"]},\"45\":{\"h\":\"HttpRequest\",\"t\":[\"http 请求包含哪几个部分（请求行、请求头、请求体）\",\"这里放一些常见的，具体的去搜\"]},\"46\":{\"h\":\"一、General（请求行）\",\"t\":[\"Request URL: http://127.0.0.1:8848/nacos/\",\"Request Method: GET\",\"Status Code:304（响应状态码）\",\"Remote Address: 127.0.0.1:8848（HTTP请求的源地址）\",\"HTTP协议在三次握手时使用的就是这个Remote Address地址，在发送响应报文时也是使用这个Remote Address地址。因此，如果请求者伪造Remote Address地址，他将无法收到HTTP的响应报文，此时伪造没有任何意义。这也就使得Remote Address默认具有防篡改的功能。\",\"如果http请求经过代理服务器转发，用户的真实ip会丢失，为了避免这个情况，代理服务器通常会增加一个叫做x_forwarded_for的头信息，把连接它的客户端IP（即你的上网机器IP）加到这个头信息里，这样就能保证网站的web服务器能获取到真实IP\",\"Referrer Policy: strict-origin-when-cross-origin（引用策略，有八种）\",\"Referer提供访问来源的信息，告诉服务器，用户在访问当前资源之前的位置，发生传场景包含：加载图片、样式文件、JS文件、请求。浏览器会将当前网址作为Referer字段，放在 HTTP 请求的头信息发送。\"]},\"47\":{\"h\":\"二、Request Headers（请求头）\",\"t\":[\"Accept: text/html, application/xhtml+xml, application/xml;q=0.9, /;q=0.8\",\"请求头用来告知服务器 客户端可以处理的内容类型(用MIME类型来表示)，借助内容协商机制服务器从备选项中选择一项进行应用，并使用Content-Type应答头通知客户端它的选择。\",\"Accept-Encoding: gzip, deflate, br\",\"请求头用来告知服务器 客户端可以处理的编码方式\",\"Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en;q=0.7\",\"Cache-Control: max-age=0\",\"Connection: keep-alive\",\"面试常问1.1和1.0的区别。。有必要说明的是，HTTP/1.0 仍提供了长连接选项，即在请求头中加入Connection: Keep-alive。同样的，在 HTTP/1.1 中，如果不希望使用长连接选项，也可以在请求头中加入Connection: close，这样会通知服务器端：“我不需要长连接，连接成功后即可关闭”。\",\"著作权归Guide所有 原文链接：https://javaguide.cn/cs-basics/network/http1.0-vs-http1.1.html#%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F\",\"Cookie: JSESSIONID=B4717473F69FD975072100C7E181E807; JSESSIONID=BF468917A7A82EB64D8E913D8F4457F5\",\"这两个Name一样但是Path不一样\",\"Cookie是Web服务器发送给客户端的一小段信息，客户端请求时，可以读取该信息发送到服务器端\",\"DNT: 1 （Do Not Track）\",\"**已弃用：**不再推荐此功能。尽管某些浏览器可能仍然支持它\",\"Host: 127.0.0.1:8848\",\"场景：Ngixn 转发会丢失这个，需配置的时候加个参数set上去\",\"If-Modified-Since: Fri, 29 Apr 2022 02:20:32 GMT\",\"Sec-Fetch-Dest: document\",\"Sec-Fetch-Mode: navigate\",\"Sec-Fetch-Site: same-origin\",\"Sec-Fetch-User: ?1\",\"Upgrade-Insecure-Requests: 1\",\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 sec-ch-ua: \\\"Not?A_Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"108\\\", \\\"Google Chrome\\\";v=\\\"108\\\"\",\"sec-ch-ua-mobile: ?0\",\"sec-ch-ua-platform: \\\"Windows\\\"\"]},\"48\":{\"h\":\"\",\"t\":[\"包含服务器类型，日期，长度，内容类型等\",\"响应正文响应正文就是服务器返回的HTML页面或者json数据 text/html application/json\",\"Connection: keep-alive\",\"可以看到请求头也有这个属性\",\"服务器可以解析请求头中的 Connection 字段来了解客户端的连接偏好，并相应地处理连接的保持与关闭。\",\"Content-Encoding: gzip\",\"Content-Language: zh-CN\",\"Content-Type: text/html;charset=utf-8\",\"对应请求头的 Accept 告诉你采用的是哪个\",\"Date: Thu, 12 Jan 2023 08:27:16 GMT\",\"Set-Cookie: xxx\",\"设置和页面关联的Cookie\",\"Content-Length: 6867\",\"Keep-Alive: timeout=60\",\"这意味着在客户端与服务器之间的通信中，如果在 60 秒内没有新的请求或响应发生，连接可能会被关闭。\",\"CATIC 商网就是做了这个限制，然后直接报错 504 (Gateway Time-out) 但实际上，你只要请求丢过去了他后台服务器就还在执行。返回值如果不重要的话，我这里就是 return true 不太重要 响应值丢了就丢了 反正接口幂等了\",\"Response Headers的参数Keep-Alive: timeout=60该在哪里设置\",\"---对于Apache服务器： 对于 Apache Tomcat，你可以通过修改 server.xml 文件来配置\",\"<Connector port=\\\"8080\\\" protocol=\\\"HTTP/1.1\\\" connectionTimeout=\\\"60\\\" /> \",\"---对于Nginx服务器： 在 Nginx 的配置文件（通常是 nginx.conf 或位于 sites-available 目录中的虚拟主机配置文件）中，可以添加以下指令来设置 Keep-Alive 的超时时间：\",\"keepalive_timeout 60s; \",\"上述配置中，keepalive_timeout 设置为 60s 表示超时时间为60秒。\",\"请注意，以上配置示例仅供参考，实际配置可能会根据你的服务器环境和需求而有所不同。在修改服务器配置之前，请确保备份现有配置文件，并确保你对服务器配置有足够的了解。\",\"完成配置更改后，重新启动服务器以使更改生效。之后，服务器会在响应头中包含 Keep-Alive: timeout=60，指示客户端保持持久连接的时间为60秒。\"]},\"49\":{\"h\":\"\",\"t\":[\"XMLHttpRequest\",\"https://www.cnblogs.com/xiaohuochai/p/6036475.html\",\"概括起来，就是一句话，ajax通过原生的XMLHttpRequest对象发出HTTP请求，得到服务器返回的数据后，再进行处理\",\"Chrome F12 筛选请求的时候可以勾这个(就只会捕获 Ajax 请求)，其实本质是 ajax 核心。。。。我理解为所有交互的请求都是这个 ajax技术的核心是XMLHttpRequest对象(简称XHR)\",\"http协议本身是一种无状态的协议\",\"会话跟踪是一种灵活、轻便的机制，它使Web上的状态编程变为可能。 HTTP是一种无状态协议，每当用户发出请求时，服务器就会做出响应，客户端与服务器之间的联系是离散的、非连续的。当用户在同一网站的多个页面之间转换时，根本无法确定是否是同一个客户，会话跟踪技术就可以解决这个问题。当一个客户在多个页面间切换时，服务器会保存该用户的信息。 有四种方法可以实现会话跟踪技术：URL重写、隐藏表单域、Cookie、Session。 1）.隐藏表单域：，非常适合步需要大量数据存储的会话应用。 2）.URL 重写:URL 可以在后面附加参数，和服务器的请求一起发送，这些参数为名字/值对。 3）.Cookie:一个 Cookie 是一个小的，已命名数据元素。服务器使用 SET-Cookie 头标将它作为 HTTP 响应的一部分传送到客户端，客户端被请求保存 Cookie 值，在对同一服务器的后续请求使用一个 Cookie 头标将之返回到服务器。与其它技术比较，Cookie 的一个优点是在浏览器会话结束后，甚至 在客户端计算机重启后它仍可以保留其值 4）.Session：使用 setAttribute(String str,Object obj)方法将对象捆绑到一个会话\"]},\"50\":{\"h\":\"Session 缺点\",\"t\":[\"其实Session是依据Cookie来识别是否是同一个用户。\"]},\"51\":{\"h\":\"为什么要使用Session技术？\",\"t\":[\"Session比Cookie使用方便，Session可以解决Cookie解决不了的事情【Session可以存储对象，Cookie只能存储字符串。】。\"]},\"52\":{\"h\":\"Sessin 缺点：\",\"t\":[\"Session: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，中，而随着认证用户的增多，服务端的开销会明显增大。\",\"CSRF: 因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击\",\"扩展性: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。\",\"解决系统之间Session不共享问题：把Session数据放在Redis中（使用Redis模拟Session）【建议】\",\"针对Cookie存在跨域问题，有几种解决方案：\",\"服务端将Cookie写到客户端后，客户端对Cookie进行解析，将Token解析出来，此后请求都把这个Token带上就行了\",\"多个域名共享Cookie，在写到客户端的时候设置Cookie的domain。\",\"将Token保存在SessionStroage中（不依赖Cookie就没有跨域的问题了）\"]},\"53\":{\"h\":\"\"},\"54\":{\"h\":\"token\",\"t\":[\"JWT -- JSON WEB TOKEN\",\"基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。\",\"流程上是这样的：\",\"用户使用用户名密码来请求服务器\",\"服务器进行验证用户的信息\",\"服务器通过验证发送给用户一个token\",\"客户端存储token，并在每次请求时附送上这个token值\",\"服务端验证token值，并返回数据\",\"这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了Access-Control-Allow-Origin: *。\"]},\"55\":{\"h\":\"计网面试题\"},\"56\":{\"h\":\"TCP和UDP的区别，TCP靠什么保证可靠连接？\",\"t\":[\"TCP通过以下机制来保证可靠连接：\",\"序列号和确认应答：TCP将每个发送的数据包进行编号，接收方通过发送确认应答来确认已接收到的数据包。发送方根据确认应答确定是否需要重传丢失的数据包。\",\"重传机制：如果发送方未收到确认应答或检测到数据包丢失，它会自动重传该数据包，确保数据的可靠传输。\",\"滑动窗口：TCP使用滑动窗口机制来控制发送方发送的数据量，以适应网络的拥塞情况，保证发送速率与接收速率的匹配。\",\"拥塞控制：TCP通过拥塞窗口和拥塞避免算法来控制发送速率，避免网络拥塞并保证整体性能。\"]},\"57\":{\"h\":\"讲一下TCP三次握手 为什么要3次，两次或者四次不行吗\",\"t\":[\"TCP 建立连接时，通过三次握手能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号。序列号能够保证数据包不重复、不丢弃和按序传输。\"]},\"58\":{\"h\":\"Base64\",\"t\":[\"介绍：\",\"base64 - 只是一种编码方法，并不是加密算法 所有的数据都是明文存储\",\"可以把任意的二进制（图片、视频、音频、字符串）转成可打印的字符\",\"原理：\",\"由来 2^6=64位二进制，把所有字符串转成二进制然后每6位一个转成base64\",\"编码后的长度要是4的倍数，不是则需最后补上一个等号\"]},\"59\":{\"h\":\"Chrome & JS\"},\"60\":{\"h\":\"Chrome-Url\",\"t\":[\"url地址栏区分大小写吗\",\"在大多数常见的浏览器中，URL地址栏通常是不区分大小写的。这意味着无论您输入的是大写字母、小写字母还是大小写混合，浏览器都会将其视为相同的URL。\",\"例如，以下URL在地址栏中是等效的：\",\"复制\",\"http://www.example.com HTTP://WWW.EXAMPLE.COM http://www.Example.com \",\"不过需要注意的是，尽管地址栏不区分大小写，但是URL路径和查询参数部分可能会受到服务器的影响。某些服务器可能会对URL路径和查询参数进行区分大小写的处理。这意味着在特定的服务器环境中，/path 和 /Path 可能被视为不同的路径。\",\"在Spring Boot中，默认情况下，@GetMapping(\\\"/A\\\") 和 @GetMapping(\\\"/a\\\") 是被视为两个不同的路径的。这是因为Spring Boot默认情况下是区分路径的大小写的。\",\"所以，当您使用@GetMapping(\\\"/A\\\")注解时，它将映射到路径/A，而@GetMapping(\\\"/a\\\")将映射到路径/a。这两个路径被视为不同的URL。\",\"如果您希望路径大小写不敏感，即/A和/a被视为相同的路径，可以在Spring Boot的配置中进行相应的设置。您可以在application.properties或application.yml文件中添加以下配置：\",\"spring.mvc.pathmatch.matching-strategy=ant_path_matcher \",\"What does %2F mean in a URL? ASCII Encoding Reference\",\"场景：我用电脑识别 QR_Code 到 URL 浏览器 发现把里面的 / 全部转移成 %2F 了\",\"联想到 空格 是 %20 于是系统总结下：\",\"常见的需要转义的字符：https://www.w3schools.com/tags/ref_urlencode.ASP\",\"在线 URLDecode 解码工具\"]},\"61\":{\"h\":\"F12-JS\",\"t\":[\"实用 JS 到 Console\",\"1）复制一个 input 的 Selector, 我这里也有便捷方式，发现input有个 readonly 控制的不可编辑！！！把这个删了就行！~\",\"在 JavaScript 字符串中需要转义的特殊字符：\",\"反斜杠 \\\\: 反斜杠用于转义后面的字符，例如 \\\\\\\\ 表示一个普通的反斜杠字符。\",\"引号 \\\" 和 ': 如果字符串本身包含引号，需要使用反斜杠进行转义，例如 \\\\\\\" 或 \\\\'。\",\"换行符 \\\\n: 表示换行。\",\"回车符 \\\\r: 表示回车。\",\"制表符 \\\\t: 表示水平制表符。\",\"image-20231120173938571\",\"2）js如何给td标签设置值\",\"//tdElement 可以通过 getElementById / querySelector 获取 tdElement.innerHTML = '新的值'; // 设置 <td> 的内容 tdElement.textContent = '新的值'; tdElement.innerText = '新的值'; \"]},\"62\":{\"h\":\"Chrome-ShortcutKey\",\"t\":[\"Chrome 官网快捷键总结\",\"操作\",\"快捷键\",\"为网站名称添加 www. 和 .com，然后在当前标签页中打开该网址\",\"输入网站名称并按 Ctrl + Enter 键\",\"打开新的标签页并执行 Google 搜索\",\"输入搜索字词并按 Alt + Enter 键\",\"跳转到地址栏\",\"Ctrl + l 或 Alt + d 或 F6\",\"shift+esc 任务管理器\",\"ctrl+shift+delete 清缓存必备\",\"F12 == ctrl+shift+i\",\"搜索技巧\",\"只搜索某个站点： 空格域名\",\"排除某个站点： 空格 -域名\"]},\"63\":{\"h\":\"HTML 刷新\",\"t\":[\"让网页多长时间（秒）刷新自己，或在多长时间后让网页自动链接到其它网页。\",\"<meta http-equiv=\\\"refresh\\\" content=\\\"1;url=http://www.baidu.com/\\\"> or <body onload=\\\"parent.location='http://www.baidu.com'\\\"> \"]},\"64\":{\"h\":\"JWT\",\"t\":[\"Token 续期问题面试杭州问过 长沙那个也问过！！！ 个人认为是频繁点\"]},\"65\":{\"h\":\"1.RuoYi\",\"t\":[\"感觉跟直接用最简单方式 UUID 存 Redis 一样的做法！！！\",\"我感觉这里 JWT 都有点多余，顶多是看上去更安全？？？？（我感觉是单体项目其实完全可 Session 解决，这里用 Token 避免分布式共享?其实UUID也行？）\",\"感觉RuoYi是只用Redis ttl实现的， Token的作用像是只充当了个UUID和Redis关联\",\"个人总结：\",\"axios配置请求、响应拦截器\",\"前端 Session 存JWT解析数据为 UUID， 后端 Redis 对应这个 UUID 有 User 数据\",\"靠 Redis 驱动，Redis 一过期就返回 401，前端响应拦截器就删 Session 重定向到 login.html\"]},\"66\":{\"h\":\"# 前端存 Session 不过期\",\"t\":[\"解密后的数据只有 HEADER \\\"alg\\\": \\\"HS512\\\" & PAYLOAD \\\"login_user_key\\\": \\\"a667e3f6-5af2-4799-83d6-5c871507df08\\\"\"]},\"67\":{\"h\":\"# 后端存 Redis 通过login_user_key对应，存用户信息 LoginUser.class\",\"t\":[\"后端如果redis过期，则返回状态 401\",\"核心方法：com.ruoyi.framework.web.service.TokenService#getLoginUser\",\"com.ruoyi.framework.web.service.TokenService#verifyToken 验证令牌有效期，相差不足20分钟，自动刷新Redis缓存\",\"借助了 Redis\",\"public void refreshToken(LoginUser loginUser){ loginUser.setLoginTime(System.currentTimeMillis()); loginUser.setExpireTime(loginUser.getLoginTime() + expireTime * MILLIS_MINUTE); // 根据uuid将loginUser缓存 String userKey = getTokenKey(loginUser.getToken()); redisCache.setCacheObject(userKey, loginUser, expireTime, TimeUnit.MINUTES); } \"]},\"68\":{\"h\":\"后端设置 Token\",\"t\":[\"存Redis用户信息\",\"登录完成最终返回了一个真正的token字符串 return tokenService.createToken(loginUser);\",\"Token 放在前端 session 里\",\"Admin-Token\",\"eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6ImI1OWNlOTUyLWQwOTctNGNmOC1hYzYwLTU1MzdlOTBhNDg5ZSJ9.YxyKCvcLmj2EvWXVSjop1b2cCrW-j5PLtVmSMvL1V6H1PZUZCSxpcSInnp3BT1Okt48DJ-b_QAG7--kRjRhuKw\"]},\"69\":{\"h\":\"前端有 Token 后的请求\",\"t\":[\"后端 JwtAuthenticationTokenFilter extends OncePerRequestFilter 解析 Token 拿 UUID （这个时候过期就抛异常）\",\"通过 UUID 再拿 Redis 存好的 UserInfo\",\"拿到 UserInfo 代表 Token 未过期，那么 refreshToken 不过这里我看只是setCacheObject，没有更换 Token？？？（少于20分钟就refresh）\",\"前端同样也搭配了 request拦截器、响应拦截器（axios）\",\"看源码更新Token只更了 Redis，真正JWT没换啊？？？\",\"https://www.bilibili.com/video/BV1Ke411X7V4/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\",\"买了案例，我觉得前端 js 代码也很值得学习！\"]},\"70\":{\"h\":\"1.概念\",\"t\":[\"实际就是一个一次性字符串，会过期 parser 过期了会抛异常-就作废了\",\"JWT最大特点不就是状态存储在客户端么，可以实现多点登录，服务端不用做很多的额外工作\",\"jwt颁发后，一般扩展包没提供让其失效方法。但是要让jwt失效依然很简单，因为jwt一般会放在redis或者mysql表，只要逻辑上去找到uid对应的jwt，删了就可以了。\",\"个人认为jwt解决最大的问题不是跨域，而是前后端分离后，纯接口方面的用户认证问题。\",\"jwt--> JSONWeb Token，以JSON为载体，在不同系统（或语言）之间安全的传送信息，常用于认证授权方面。\",\"三段：头部（Header）。载荷（PlayLoad）。签名（signature） 【它是一个很长的字符串，中间用点（.）分隔成三个部分】\",\"我看我后来学的项目基本都是单 Token 看网上也比较认同 但是网上教程大部分为 **双Token ** access_token、refresh_token --个人觉得没必要维护 2 个Token之所以有这样例子我也会思考存在必要性。。。。我猜2个token是因为节省相对 1token频繁续期？ 而2token可以在access_token过期后再刷，1token的话就每次时间<20就刷每次判断？\",\"刷的操作都在 axios响应拦截器里\",\"大致思路：重点在前端 请求/响应拦截器\",\"后 -> 前（登录）：Token 放 session/local storage\",\"前 -> 后：axios 请求拦截器带上放header-config.headers['accessToken'] = token; 后端拦截校验 如过期，响应拦截器调用刷新2个token，此时拿的是refresh_token校验（过期是过期的access_token）\",\"还有一种更方便的，不生成token直接生成一个guid当token用，redis里存过期时间。就是有点不安全哈\",\"我们的方案是这样的，设置token过期时间30分钟，每次请求的时候走过滤器判断token是否过期，如果将要过期取token里用户名重新生成token返回前端，如果已经过期重新跳登\",\"和RuoYi一样，只不过RuoYi是只用Redis ttl实现的， Token的作用像是只充当了个UUID和Redis关联\",\"怎么还让后端给你判断是否快过期，401就表示无权限就是已经过期了。前端自己记住token有限期，每次操作都前端直接检验下token有效期，例如设定在最后30分钟范围内的操作会刷新token，就可以保证30分钟内有操作就可以无感刷新。临近过期又超过30分钟没操作，就活该过期重登录。当然这30分钟可以根据产品灵活设定。\",\"每次更新accessToken都会刷新refresh token？的只要一直在操作就不会过期而 refreshtoken一般是一天一周这种只要你中途打开页面就又续期了\",\"如果是这样的话，refreshtoken的意义是什么呢。我一直以为使用refreshtoken的意义就是为了每次网络传输只使用有效期很短的accesstokenä，既然现在每次都要传递这两个，还不如只使用一个accesstoken来直接续期，因为我实在想不到refreshtoken存\",\"能想到的大概是请求带accesstoken，被抓包后accesstoken容易被利用爬，所以把accesstoken几分钟有效，失效就用refresh去重新获取，但现在https加密，而且可以从很多角度去避免这种问题，实际项目中一个token搞定也不会有什么问题，用双token很多时候是给自己找麻烦\",\"我这边的做法是： 后端返回token的有效期，比如2小时 前端通过有效期时间逆推出token的过期时间之后，把过期时间存入本地缓存中然后在axios拦截器里，去获取当前的时间，去对比判断token有没有过期过期了就调用refreshToken接口，获得新token\",\"就是调用refreshTokenα，把旧 token给他然后换取新的token\",\"不是很认可所谓的双token方案。\\n1.传统的web系统，只要用户在操作那么就一定在线，只有用户长期不操作才会下线。也就是让用户在操作中不下线是第一保障。\\n2.最早双token方案在哪出现的？在开放的api接口请求中。而不是在web应用设计里。\\n3.接2，开放API里？为了降低API服务的压力。可以通过简单比对token来快速处理外部应用访问。出现问题后哪怕全部token都失效，client全部刷新一次也基本是无感知的。\\n4.双token明显增加前后端的工作量，而并不一定能提升体验。还要专门设计一套token体系。\\n5.一般应用在使用jwt后，基本上都存在过期问题，要解决的是这个问题。简单一点，解析jwt后发现即将过期就生成一个新token，在请求中返回。复杂一点本地缓存自动刷新，只要用户的最近一次访问存在足够时间就刷新token的过期时间。\\n6.真当KPI项目搞啊？\"]},\"71\":{\"h\":\"Nginx\",\"t\":[\"狂神Nginx学习笔记\",\"Nginx 三大作用：1）动静分离 2）反向代理 3）负载均衡\",\"特点：一旦启动永远不需要重启，但是我们需要重新加载配置文件 nginx -s reload\",\"常用配置：Nginx 代理后会丢失很多东西，比如 host.. 也可以使用 nginx 设置每一个请求的唯一 id\",\"nginx server_name 多个的话，空格隔开就行 恰好nginx -t检查不会报错。 跟其它配置混一起，感觉有时生效，有时不生效，排查了好久。现在看来是nginx把 “a.example.com,”当成匹配规则了。\",\"#主配置文件 http{ #添加其他配置，注意分号不要丢 include /etc/nginx/conf.d/*.conf; } #其它配置 server { listen 80; server_name 1024zzq.com; location / { proxy_pass http://101.34.55.204:8080; index index.html index.htm; proxy_set_header Host $host; proxy_set_header X-Real-Ip $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; #proxy_set_header X-Request-Id $request_id; } # access_log /logs/1024.zzq.com.access.log; } \"]},\"72\":{\"h\":\"正向代理 vs 反向代理 的概念\",\"t\":[\" 正向代理：例如翻墙软件，客户端请求到香港的一台服务器，由这台服务器再请求到美国等其它被墙地区的服务器。 代理客户端的 客户端 -- 代理服务器 -- 目标服务器 反向代理：例如百度的服务器肯定不止一台，你会先访问到代理服务器再给你决定具体让你到哪一台服务器拿数据 代理服务器端的 反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。 \",\"正向代理：（翻墙）\",\"正向代理\",\"反向代理：（百度）\",\"反向代理\",\"session问题：SpringCache+Redis 保存Cookie解决\",\"upstream lb{ server 127.0.0.1:8080 weight=1; server 127.0.0.1:8081 weight=1; } location / { proxy_pass http://lb; } \",\"有错误不要蒙头瞎搞，瞎百度。先凝练自己的问题。 第一步是查 log 我就是靠这个分析出了错误！\",\"问题：假如项目没用Thymeleaf 用的vue 是不是就不需要nginx处理动静分离了\",\"upstream gulimall { server 127.0.0.1:88; } include conf.d/*.conf; \",\"server { listen 80; server_name *.gulimall.com; location /static { root html; } location / { proxy_set_header Host $host; proxy_pass http://gulimall; } } \",\"access.log\",\"看过一篇订阅号，可以通过这个访问日志拿到所有访问者的ip地址 然后写脚本进行限制恶意访问\"]},\"73\":{\"h\":\"5.1.root & alias\",\"t\":[\"场景：想搭建本地静态资源Web服务器\",\"在Nginx中，root 和 alias 都是用于定义服务器上的文件路径的指令，但它们之间存在一些区别。\",\"root 指令用于定义一个目录作为请求的根目录。当一个请求到达时，Nginx将在指定的根目录下查找相应的文件。以下是一个示例：\",\"server { listen 80; server_name example.com; root /var/www/html; } \",\"在上面的配置中，当用户访问 example.com 时，Nginx将在 /var/www/html 目录下查找相应的文件并返回给用户。如果用户请求的URI是 /index.html，Nginx将尝试找到并返回 /var/www/html/index.html 文件。\",\"alias 指令用于指定一个别名路径，它用于将请求映射到文件系统中的不同位置，而不是直接将请求与根目录进行拼接。以下是一个示例：\",\"server { listen 80; server_name example.com; location /static/ { alias /var/www/static/; } } \",\"在上面的配置中，当用户访问 example.com/static/file.txt 时，Nginx将在 /var/www/static/ 目录下查找相应的文件并返回给用户。与 root 不同的是，alias 可以指定一个不同于URI的文件系统路径。（记得alias最后要带上 /）\",\"总结一下：\",\"root 指令指定的路径是与URI拼接的，适用于将请求直接映射到文件系统路径。\",\"alias 指令指定了一个别名路径，用于将请求映射到文件系统中的不同位置。\",\"实践：特喵的感觉一样的效果\",\"location / { #root html; #root /Users/xd/Documents/GitRepo/StudyNotes; alias /Users/xd/Documents/GitRepo/StudyNotes/; #不加 / 会访问不到 index index.html index.htm; } \",\"https://www.cnblogs.com/qingshan-tang/p/12763522.html\",\"五.重点 重点是理解alias与root的区别，root与alias主要区别在于nginx如何解释location后面的uri，这使两者分别以不同的方式将请求映射到服务器文件上。 alias（别名）是一个目录别名。 例子： location /123/abc/ { root /ABC; } 当请求http://qingshan.com/123/abc/logo.png时，会返回 /ABC/123/abc/logo.png文件，即用/ABC 加上 /123/abc。 root（根目录）是最上层目录的定义。 例子： location /123/abc/ { alias /ABC; } 当请求http://qingshan.com/123/abc/logo.png时，会返回 /ABC/logo.png文件，即用/ABC替换 /123/abc。 \"]},\"74\":{\"h\":\"Network FAQ\"},\"75\":{\"h\":\"知识汇总\"},\"76\":{\"h\":\"*）ICMP\",\"t\":[\"场景：感觉还是防火墙策略问题，1、检查到DNS服务器208.67.222.222的UDP53端口 2、检查到223.70.221.223和36.112.111.95 icmp、http（tcp80）、https（tcp443） 【icmp】\",\"ping命令使用ICMP协议来发送请求和接收回复\",\"如果ping不通是证明icmp不可用吗\",\"如果您无法成功ping通目标主机，这并不意味着ICMP协议不可用。虽然ping命令使用ICMP协议来发送请求和接收回复，但有几种可能的原因导致ping不通：\",\"目标主机配置或防火墙设置：目标主机可能配置了防火墙规则，阻止了ICMP请求的回复。这可能是出于安全或网络管理的考虑。在这种情况下，即使ICMP协议可用，您仍然无法通过ping命令与目标主机进行通信。\",\"网络故障或路由问题：网络中的故障、路由问题或网络拥塞可能导致ping不通。即使ICMP协议正常工作，但如果网络中存在问题，数据包可能无法成功传输到目标主机或返回到源主机。\",\"主机配置问题：源主机的配置问题也可能导致ping不通。例如，如果源主机的网络配置不正确，它可能无法正确路由ICMP数据包到目标主机。\",\"目标主机禁用ICMP回复：目标主机可以选择禁用ICMP回复，以增加安全性或减少暴露。即使ICMP协议可用，目标主机也可能不会回复ping请求。\",\"因此，无法成功ping通目标主机并不一定意味着ICMP协议不可用。这可能是由于网络配置、防火墙规则、路由问题或目标主机的设置等其他因素引起的。如果您遇到ping不通的问题，建议检查网络配置、目标主机的防火墙设置以及网络基础设施的状态，以确定导致问题的根本原因。\",\"举例来说，当主机发送一个ICMP回显请求（Ping请求）时，它会将ICMP消息封装在IP数据包中，在网络中传输到目标主机，然后目标主机接收到该请求后，会生成一个ICMP回显回复（Ping回复），同样将其封装在IP数据包中进行传输。\",\"因此，ICMP并不是以IP形式交互数据包的协议，而是在IP网络中使用IP数据包来传输控制消息和错误报告的协议。\",\"网络故障诊断：ICMP用于诊断网络故障。例如，当源主机希望测试与目标主机的连接是否正常时，可以发送一个ICMP回显请求（Ping请求），目标主机接收到请求后会发送回一个ICMP回显回复（Ping回复），从而确认连接的可用性。\",\"找了很多教程都没解决的计网问题：\",\"场景：在学校用学校 DNS 可进官网，用其他的就进不了\",\"所有接入校园网的用户都必须使用学校自己的DNS，使用其他地址如218.2.135.1,114.114.114.114,8.8.8.8的DNS服务解析的，在校园网内将无法访问学校主页。好奇怎么实现？\",\"也就是说要判断：在同一个局域网 + 用的学校的 DNS 服务器\",\"好奇怎么判断DNS服务器是不是学校的，细化来说 JAVA能做到获取访问我这台服务器的用户使用的是哪一个 DNS服务器吗\",\"公司上班时间段不准员工访问特定的网页 怎么实现的？ 实测可搭梯子开全局访问（开不开全局取决于，机场的 Rule 策略），午休和下班后也可访问\",\"ping计算机名得到局域网ip\",\"ping计算机名得到局域网ip\",\"ping主机名得到的不是本机局域网ip\",\"image-20220721122030582\",\"才区分到一个概念，计算机名称和用户名称不冲突\",\"具体看 AIDA64：\",\"类型 类别 计算机名称 DNS 主机名称 逻辑 zzqhandsome\",\"Q：机房网络显示，无网络访问权限\",\"A：是因为那个 IP 地址被占用了\",\"Chrome浏览器访问不了学校官网，Edge 可以。（解决）\",\"原因是我在Chrome 设置中设置了一个 使用安全 DNS 。我是用的第三方DoH服务器 DNS over Https（DoH），具体书签搜记录。\",\"Q：想要 Windows To Go 但 BIOS 设了密码\",\"A：输错 5 次，会有一个提示码，更具提示码到一个网站逆向出密码\",\"CMD ping 命令参数\",\"字节代表数据包的大小，时间顾名思义就是返回时间，“TTL”的意思就是数据包的生存时间，当然你得到的这个就是剩余的生存时间。\",\"TTL用来计算数据包在路由器的消耗时间，因为现在绝大多数路由器的消耗时间都小于1s，而时间小于1s就当1s计算，所以数据包没经过一个路由器节点TTL都减一。\",\"那么TTL的值一开始是什么呢？不同的操作系统默认下TTL是不同的。默认情况下，Linux系统的TTL值为64或255，Windows NT/2000/XP系统的TTL值为128，Windows 98系统的TTL值为32，UNIX主机的TTL值为255。\",\"上图看到Ping百度服务器返回的数据包的TTL值为56（一般都是找2^n且离返回值最近的那个值），那么途中则经过了64-56=9个路由器。\",\"总结：通过上述例子的分析，说“TTL”的值越小越好显然是不对的，相反，应该说是“TTL”的值越大越好才对，因为“TTL”的值越大，说明发送数据包经过路由器越少，而经过路由器越少，说明越快到达目的地，速度当然也就越快。\"]},\"77\":{\"h\":\"访问 GitHub 进不去\",\"t\":[\"CDN 内容分发网络 (Content delivery network) 静态内容的分发\",\"CDN遭到dns污染\",\"当CDN（内容分发网络）遭到DNS（域名系统）污染时，它可能会对网络性能和用户体验产生负面影响。DNS污染是一种恶意行为，旨在篡改或劫持DNS解析过程，将用户发送到错误的IP地址或恶意网站上。\",\"用户请求一个网站是先到CDN服务器吗\",\"CDN（内容分发网络）是一种分布式架构，旨在提供高效的内容交付和加速用户访问网站的体验。CDN服务器位于全球各个地理位置，并存储了网站的静态资源，如图片、脚本文件和样式表等。\",\"所以如果我请求github.com可能请求的不是真是的github服务器而是CDN服务器\",\"是的，当你请求像github.com这样的网站时，你的请求可能会被导向CDN服务器而不是直接到达真正的GitHub服务器。 当你在浏览器中输入github.com的URL或点击链接时，你的请求会先经过DNS解析，将域名转换为对应的IP地址。然后，你的请求会被发送到最近的CDN节点，该节点会根据你的地理位置和网络条件，选择一个最优的CDN服务器来响应你的请求。\",\"那我一些登录的后台逻辑，会请求到真实的github服务器吗\",\"对于登录后台逻辑等需要与GitHub进行交互的操作，你的请求会直接发送到真实的GitHub服务器，而不是经过CDN服务器。\",\"租房\",\"场景: 路由器有wifi可以连，但是连上没有网络。\",\"设备: 每层楼都有路由器，二楼有个弱电箱(光猫，交换机)\",\"要等光猫上网的灯亮了，才有网\",\"问题: 过一段时间自动没网，需要重启电源(两个)。\",\"我怀疑是交换机的问题因为我试着重启了光猫不行\",\"预测光猫只能那么多人连超过就坏数据包堆积\",\"后面限制20人就好多了\",\"#网络\"]},\"78\":{\"h\":\"DistributedLock\",\"t\":[\"搞不懂事务和锁的概念-可以用@Transactional代替Redisson吗\",\"@Transactional 和 Redisson 是两个不同的概念和用途，它们不能直接相互替代。\",\"@Transactional 处理数据库事务的一致性。可以确保一组数据库操作要么全部成功提交，要么全部回滚\",\"Redisson 是一个用于 Redis 的分布式对象的 Java 客户端库用于解决分布式环境中的线程并发访问问题\",\"在某些情况下，您可以将 @Transactional 和 Redisson 结合使用。例如，在进行数据库操作之前，可以使用 Redisson 获取分布式锁来确保在事务期间对共享资源的独占访问\",\"【尚硅谷】分布式锁全家桶丨一套搞定Redis/Zookeeper/MySQL实现分布式锁 尚硅谷视频地址\",\"建议 SQL 和 Redis 都先到其客户端写好对应语句，再到 idea 构建代码，这样逻辑就清晰多了\",\"结合后面学的 GuliMall 缓存那一篇一起学习，这一篇回顾起来有点陌生可能没大处着眼。需要层层递进看解决什么问题带着3w才能学好！\",\"个人觉得 GuliMall 从本地锁开始层层递进阐述抛出问题好理解。而这一篇可能自己走马观花了\"]},\"79\":{\"h\":\"1. 认识 JMeter\",\"t\":[\"GUliMall 压测章节也用了好用。可以搭配 jvisualvm 这个软件可以直接设置中文就不用看的那么费劲了！\",\"image-20220901090225517\",\"throughput 吞吐量\",\"image-20220901000424905\",\"Java 自带的锁只适用于单个 JVM 内的线程同步\",\"两种方法：\",\"ReentrantLock\",\"Synchronized\",\"在实际开发中很少出现，因为一般我们的共享资源在服务外部（MySQL...）由此引出分布式锁\",\"image-20220901005746190\",\"以下两种方式是：\",\"基于数据库的实现：使用数据库的v和锁机制来实现分布式锁。可以创建一个专门的表来存储锁状态，通过在事务中对该表进行操作来获取和释放锁。使用数据库可以提供 ACID（原子性、一致性、隔离性和持久性）的特性，确保分布式锁的可靠性。\",\"基于缓存的实现：利用分布式缓存系统如Redis或Memcached来实现分布式锁。可以利用缓存的原子性操作（如SETNX）来实现锁的获取和释放。获取锁时尝试设置一个特定的键值对，如果设置成功则表示获取到了锁，否则表示锁已被其他进程持有。\",\"没有最好的，只有最适合的\"]},\"80\":{\"h\":\"JVM 本地锁（synchronized / ReentrantLock）：三种情况导致锁失效（2，3是很难避免的，也就是说必须要单机部署单例模式）【600吞吐】\",\"t\":[\"多例模式（@Scope(value = \\\"prototype\\\", proxyMode = ScopedProxyMode.TARGET_CLASS)） \",\"每个请求的都是一个单独的对象，锁不住。单例模式所有请求都是同一个对象\",\"事务（事务B在事务A提交之前获取锁，就相当于事务B把A的事又干一遍） \",\"事务设置 read_uncommitted 可解决，但是我们不能这样用。（这里还需来理解）\",\"image-20220902232830929\",\"集群部署（和多例模式有点类似）\",\"不推荐JVM本地锁\"]},\"81\":{\"h\":\"一个SQL语句解决（把判断和更新等语句合成一个语句）【2000吞吐】\",\"t\":[\"有很大局限性：\",\"1.锁范围问题表级锁行级锁 2.同一个商品有多条库存记录 3.无法记录库存变化前后的状态\",\"使用==select … for update==给数据加锁的时候，咱们需要注意锁的级别，MySQL InnoDB 默认行级锁。\",\"SELECT * FROM my_table WHERE id = 1 FOR UPDATE; -- 对 id 为 1 的数据行加悲观锁 \",\"行级锁都是基于索引的，如果一条 SQL 语句用不到索引是不会使用行级锁的，而会使用表级锁把整张表锁住，这点需要咱们格外的注意\",\"1）要使用行级锁：查询或者更新条件必须是索引字段\",\"2）查询或更新条件必须是具体值\"]},\"82\":{\"h\":\"悲观锁：select ... for update（用这个语句查，就锁住了，其他线程不能update。但能查）【600吞吐】\",\"t\":[\"问题： \",\"性能问题\",\"死锁问题：对多条数据加锁时，加锁顺序要一致\",\"库存操作要统一：select.…for update 普通select\",\"如果写并发量较高，一般会经常冲突，此时选择乐观锁的话，会导致业务代码不间断的重试。优先选择：mysql悲观锁\"]},\"83\":{\"h\":\"乐观锁：时间戳、version版本号、CAS 机制（变量等于旧值就允许更新，例如 ）\",\"t\":[\"不会导致死锁，悲观锁则有一定概率会\",\"在高并发下，吞吐量低。因为总是在内旋重试，浪费CPU资源\",\"ABA问题（图片很形象）\",\"image-20220903163701486\",\"如果写并发量较低（多读），争抢不是很激烈的情况下优先选择：乐观锁\",\"这个笔记很详细！！！ 老师的Redis 笔记 结合这个看！！！案例都一样\",\"注意在 xShell 云服务器上用 Redis 命令有提示，方便些\"]},\"84\":{\"h\":\"1. jvm本地锁机制（单机情况下）\"},\"85\":{\"h\":\"2. redis乐观锁：事务 + 乐观锁（Watch）+ Lua\",\"t\":[\"自己的Redis 笔记\",\"watch：可以监控一个或者多个key的值，如果在事务（exec）执行之前，key的值发生变化则取消事务执行 multi：开启事务 exec：执行事务\",\"注意：java 代码中不能想当然的使用这三条指令！！！要把这三条指定包在execute里面，可以搞个匿名内部类实现 <T> T execute(SessionCallback<T> var1);\",\"缺点：性能得不到保障\"]},\"86\":{\"h\":\"\",\"t\":[\"首先分布式锁是一种跨进程跨机器节点的互斥锁，可以保证在多机器节点下对共享资源的排他性，通过第三方服务比如 reids 去共享锁，保证同一时刻只能有一个实例能够获取到锁。\",\"然后分布式锁主要使用 Redisson 去实现的，Redisson的底层逻辑是基于 lua 脚本去实现的；\",\"如果是第一次加锁，就会在 key 对应的 hash结构中添加一个 UUID：线程标识和1，代表了该线程对这个 key加锁了一次；\",\"并且key的过期时间默认为30秒，如果启用了 watchdog机制，就会在后台启用一个线程，该线程会去执行一个定时任务，每10秒检查一次，如果key存在，就重置key的生存时间为30秒；\",\"并且 Redisson 也实现了可重入锁的机制，当再次加锁，会对key对应的value加1，当value为0或者宕机，锁就会释放。\"]},\"87\":{\"h\":\"分布式锁用的redis的哪种数据结构？\",\"t\":[\"hash结构，用来线程id+重入次数，（然后扯一下它的流程和原理）\",\"场景：\",\"超卖现象（NoSQL）\",\"缓存击穿（一个热点 key 过期，缓存有过期时间） \",\"MySQL 是放在硬盘上的数据库，属于文件性的数据库，性能低。\",\"Redis 内存性，性能好，但是能支持的数据量比较少。加入缓存就可以支持更多数据！ \",\"解决：可在中间加锁\",\"分布式锁的实现方式：\",\"基于redis实现\",\"基于zookeeper/etcd实现\",\"基于mysql实现\",\"🌟特征：（遇到问题，一步步进阶！，看自己标注的【✨】） 我这个笔记也把下面的总结了一边： GuliMall\",\"一定要注意：Redis 不保证原子性，所以不能一条语句解决的问题都要考虑是否产生问题！！！\",\"解决：一条指令解决 / Lua（世界上 90% 的外挂都是 Lua写的）\",\"独占排他使用 setnx（猜缩写，not exist）【保证只有一个线程会拿到锁】\",\"防死锁发生 如果redis客户端程序从redis服务中获取到锁之后立马宕机 解决：给锁设置过期时间。expire【防宕机没释放锁，导致死锁】\",\"原子性： 获取锁和过期时间之间：set key value ex 3 nx【因Redis不保证原子性，所以这里只用一条命令设置锁和过期时间】\",\"判断和释放锁之间：Lua 脚本 原因 No.4\",\"防误删：解铃还需系铃人【新人程序员，锁没加上就解锁把别人的解了。还有No.5的情况。恶意的还是无意的都要防止一下】\",\"可重入性：hash + lua脚本，有些复杂我暂时略过了\",\"自动续期【当业务处理时间比锁的过期时间长，时间到锁一释放自己在裸奔，最后del操作还会把其他服务器的锁释放（就是No.4的操作 ）】\",\"**操作：**具体看一下自己的代码\",\"加锁：setnx（当 lock 的值不存在才能设置成功）\",\"解锁：del\",\"重试：递归、循环\",\"场景：假如获取锁后服务器宕机，那么其他服务也拿不到自己就算重启也要重新拿锁也拿不到。\",\"解决：设置锁的过期时间 expire / pexpire ttl 查看过期时间 或一条命令 set 设置 set lock 111 ex 20 xx/nx\"]},\"88\":{\"h\":\"lua脚本：\",\"t\":[\"一次性发送多个指令给redis。redis单线程执行指令遵守one-by-one规则 EVAL SCript numkeys key[key..J arg[arg1] 输出的不是print，而是return\",\"script：lua脚本字符串 numkeys：key列表的元素数量\",\"key列表：以空格分割。获取方式：KEYS[index，应该是从1开始]\",\"arg列表：以空格分割。ARGV[下标]\",\"变量： 全局变量：a=5 局部变量：local a=5 (Redis 只能用 局部变量)\",\"分支控制： if条件 then 代码块 elseif条件 then 代码库 else 代码块 end\",\"image-20220904144154210\"]},\"89\":{\"h\":\"可以这样操作 Redis 数据库里的数据：\",\"t\":[\"eval \\\"return redis.call('get', 'stock')\\\" 0\",\"略。。。看自己juc篇的笔记\",\"unsafe  相当于jdk留的后门，可通过指针操作内存   有大量硬件级别的 CAS 原子操作\"]},\"90\":{\"h\":\"Advanced\",\"t\":[\"API 文档\",\"项目视频地址，碰到忘记点搜本笔记配合视频再度复习！自己代码地址\",\"Google 到的笔记，很详细比视频评论下我看初级篇找的要详细：别人笔记还是评论区的更贴近视频别人代码 建议搭配食用\",\"我看到后面看的两篇别人的笔记 一二\",\"个人认为这四个功能为该项目最折磨人功能，一P能卡一两天\"]},\"91\":{\"h\":\"前言\",\"t\":[\"视频中雷神stream循环查库了，我问了ChatGPT：\",\"Q: 如何避免stream循环查库\",\"A: 下面是一些避免stream循环查询数据库的常见方法：\",\"利用缓存：在访问数据库前，先从缓存中查找所需的数据，只有在缓存中没有找到时才会查询数据库。\",\"批量读取：对于一次需要多次查询数据库的操作，可以通过一次性读取多条记录，而不是对每一条记录单独读取，从而减少数据库的读取次数。\",\"延迟加载：可以通过延迟加载技术，在需要时再读取数据库，而不是在一开始就读取。\",\"分页：对于大量的数据，可以通过分页的方式，分批读取数据，减少单次读取数据的量。\",\"这些方法都可以减少stream循环查询数据库的次数，提高代码效率。\",\"高并发三宝：缓存、异步、消息队列\"]},\"92\":{\"h\":\"商品上架\",\"t\":[\"由于是结合 ES 的，我这里就看视频 CV 了。视频给我的感觉还挺繁琐的！\",\"发请求是得益于 Fegin 的 MethodHandle，在发请求之前会把请求的数据编码成 JSON XD：我想的是它可以看成HTTP+JSON\",\"接受请求体的 JSON 转成 List 得益于 SpringMVC\",\"@PostMapping(value = \\\"/product\\\") public R productStatusUp(@RequestBody List<SkuEsModel> skuEsModels) \",\"Q：静态资源放 nginx\",\"A：反证法 -> 请求个图片都要到后台，假如 3k 个请求 2k 都是静态资源请求，真正处理业务的就 1k 拖慢\",\"QAQ：视频中繁琐的，异常类中的各种常量Enum，各种封装的VO。封装API跨服务调用。返回值R //这个叫分层思想，又不是写学生作业，什么都混一起，能用就行\",\"image-20221207164702704\",\"独立自治：不局限于 Java 也可以用 php..\"]},\"93\":{\"h\":\"1.Nginx\",\"t\":[\"由于这里需要本地开虚拟机操作，我跳过了！如果我要用云服务的Nginx有没有解决方法？ 内网穿透？？？TODO 待定\",\"注意点：Nginx 代理后会丢失很多东西，比如 host 就是。所以需要注意，看图片红色部分\",\"image-20221224145341950\",\"这两块流程具体看我的 Nginx 笔记\"]},\"94\":{\"h\":\"Nginx反向代理流程：\",\"t\":[\"本地配Hosts gulimall.com 127.0.0.1\",\"虚拟机 Nginx 代理 Hosts 里面配的域名转发到 网关（Nginx配置记得set Host不然会丢失）\",\"网关配置匹配host到指定的 product 集群\",\"各个模块在host给一个二级域名\",\"Nginx代理*.gulimall.com丢给网关\",\"网关再根据二级域名给断言路由到各个模块\"]},\"95\":{\"h\":\"Nginx 动静分离\",\"t\":[\"配置一个 location 静态资源就到 Nginx 拿了！\"]},\"96\":{\"h\":\"2.Thymeleaf\",\"t\":[\"为了教学目的考虑：加 Thymeleaf 并关闭缓存\",\"vue 是客户端渲染，模板引擎是服务端渲染\"]},\"97\":{\"h\":\"2.1 视图映射\",\"t\":[\"发送一个请求直接跳转到一个页面。 -> SpringMVC viewcontroller;将请求和页面映射过来\",\"视图映射：请求直接跳转页面的，用这种方式！不写空方法了\",\"@Configuration public class GulimallWebConfig implements WebMvcConfigurer { /** * @GetMapping(\\\"/login.html\\\") * public String loginPage(){ * return \\\"login\\\"; * } */ @Override public void addViewControllers(ViewControllerRegistry registry) { //路径映射：直接写哪个请求映射哪个页面就行，无需写多余的Controller 【注意：默认都是Get方式访问的】 registry.addViewController(\\\"/login.html\\\").setViewName(\\\"login\\\"); registry.addViewController(\\\"/reg.html\\\").setViewName(\\\"reg\\\"); } } \"]},\"98\":{\"h\":\"2.2 Model / RedirectAttributes\",\"t\":[\"可以往 Thymeleaf 携带参数，模拟的 HttpSession\",\"Model 数据是在请求域中的！ vs RedirectAttributes 重定向视图（addFlashAttribute方法代表只需要取一次！跳转取到后刷新页面就没了 | addAttribute():将数据放在url后面）\",\"重定向携带数据,利用session原理.将数据放在session中.\",\"只要跳到下一个页面取出这个数据以后,session里面的数据就会删掉\",\"问题：但是他是利用的session原理，所以后期我们需要解决分布式的session问题\"]},\"99\":{\"h\":\"1）前言\",\"t\":[\"微服务模块在上线之前乃至上线之后都会进行压力测试 老师讲课时基本都是50线程持续压\",\"先说答案：CPU核心数和线程数量没什么必然的关系。 线程是运行在内存中的，因此系统内存的大小也会影响可以创建的线程数 你可以在只有一个核心的CPU上创建任意多线程，也可以在有多个核心的CPU上创建一个线程。要想充分利用多核，一般来说线程数至少不能少于核心数。\",\"压测目的：首先考虑自己的应用属于 CPU 密集型 还是 IO 密集型\",\"例如中间件多是计算基本是 CPU 密集型（Nginx、网关）\",\"考察当前软硬件环境下系统所能承受的最大负荷并帮助找出系统瓶颈所在\",\"使用压力测试，我们有希望找到很多种用其他测试方法更难发现的错误。有两种错误类型是: 内存泄漏，并发与同步。\"]},\"100\":{\"h\":\"2）压力测试-线程\",\"t\":[\"重要指标-吞吐量：\",\"TPS（Transaction per Second）：系统每秒处理交易数，单位是笔/秒。（不能狭义的理解为数据库的事务，而是走完整个事务的流程 电商要求高）\",\"QPS（Query per Second）：系统每秒处理查询次数，单位是次/秒。对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS=QPS=HPS，一般情况下用 TPS 来衡量整个业务流程，用 QPS 来衡量接口查询次数，用HPS 来表示对服务器单击请求。\",\"重要指标-吞吐量：\",\"最大响应时间（Max Response Time） 指用户发出请求或者指令到系统做出反应（响应）的最大时间。\",\"最少响应时间（Mininum ResponseTime） 指用户发出请求或者指令到系统做出反应（响应）的最少时间。\",\"90%响应时间（90% Response Time） 是指所有用户的响应时间进行排序，第90%的响 应时间。\",\"重要指标-错误率\",\"注意：如测首页不精准只拿了html数据，而我们需要模拟更真实的全量数据（image、js、css），需要到JMeter HTTP请求高级部分设置\",\"JMeter 可以设置中文\",\"JMeter 一般就看结果树、汇总报告、聚合报告\",\"JMeter 压测的时候搭配 jvisualvm 看图形化分析\"]},\"101\":{\"h\":\"\",\"t\":[\"这几集才是成长的精髓啊 以前都不知道这东西\",\"优化期间看图标衡量这些指标：看当前应用是卡在 cpu 的计算了 还是内存经常容易满 还是线程数不够运行太慢 ...\",\"jconsole 与 jvisualvm（更推荐）\",\"直接 cmd 输入 jconsole/jvisualvm 即可打开，看到内存占用是我在 idea 设置的 vm option 100 头一次知道还有这个功能！\",\"jvisualvm 能干什么 监控内存泄露，跟踪垃圾回收，执行时内存、cpu\",\"安装插件方便查看 gc: 感觉这有点 JVM 调优那味了 可以和面试官唠唠！\",\"因为我这个项目 -Xmx 只给了 100MB 一下就满了要回收导致 图 频繁GC直角三角形，所以多给点空间肯定能提升性能！\",\"可用插件 -> Visual GC\"]},\"102\":{\"h\":\"\",\"t\":[\"各个中间件的压测数据：04、性能与压力测试.pdf 其实浏览器F12也可以看到一个响应时间也可做一部分依据\",\"该表极具学习价值：\",\"压测内容\",\"压测线程数\",\"吞吐量/s\",\"90%响应时间/ms\",\"99%响应时间\",\"Nginx\",\"50\",\"2335\",\"11\",\"944\",\"Gateway\",\"50\",\"10367\",\"8\",\"31\",\"简单服务\",\"50\",\"11341\",\"8\",\"17\",\"首页一级菜单煊染\",\"50\",\"270（db,thymeleaf）\",\"267\",\"365\",\"首页染（开缓存）\",\"50\",\"290\",\"251\",\"365\",\"首页染（开缓存、优化数据库、关日志）\",\"50\",\"700\",\"105\",\"183\",\"三级分类数据获取\",\"50\",\"2（db）/8（加索引）\",\"三级分类（优化业务）\",\"50\",\"111\",\"571\",\"896\",\"三级分类（使用redis 作为缓存）\",\"50\",\"411\",\"153\",\"217\",\"首页全量数据获取\",\"50\",\"7（静态资源）\",\"Nginx+Gateway\",\"50\",\"Gateway+简单服务\",\"50\",\"3126\",\"30\",\"125\",\"全链路\",\"50\",\"800\",\"88\",\"310\",\"中间件越多，性能损失越大，大多都损失在网络交互了；\",\"业务：\",\"Db（MySQL 优化）\",\"模板的渲染速度（缓存）\",\"静态资源\"]},\"103\":{\"h\":\"1）前言\",\"t\":[\"这个项目代码里很多 stream 中循环查表了！ 看本文开头\",\"初步解决：优化代码 -> 一次性查出所有数据，需要的时候再通过集合操作去filter拿对应的\",\"提升：例如首页的菜单基本不怎么变，进一次首页就要查一次 考虑 缓存\",\"缓存的技术有很多 -> 最简单的缓存技术可以用 Map（本地缓存）：声明个Map到最外圈，方法里面if这个Map有没有缓存\",\"//如果缓存中有就用缓存的 Map<String, List<Catelog2Vo>> catalogJson = (Map<String, List<Catelog2Vo>>) cache.get(\\\"catalogJson\\\"); if (cache.get(\\\"catalogJson\\\") == null) { //调用业务 //返回数据又放入缓存 } \",\"问题：\",\"只适用于单体应用，分布式下会每个一份\",\"修改没法附带其它服务器一起改缓存（数据一致性问题）\",\"解决:\",\"不应该存本地服务器，应该在集群服务器上面加一层 中间件 Redis\",\"注意：分片存概念：集群的Redis 1号存id为1-1w的数据 2号存2-3w的数据以此类推\",\"Redis 分片是一种将数据分散存储在多个 Redis 节点上的技术，它可以扩展 Redis 存储容量和吞吐量，以满足大规模应用程序的需求。在 Redis 分片中，数据被分割成多个较小的数据片段，每个数据片段存储在一个单独的 Redis 节点上。通过将数据分散存储在多个节点上，可以将负载均衡到多个节点上，提高系统的可扩展性和可靠性。\",\"Redis 分片的实现方式通常是将数据根据其键进行哈希，然后将哈希结果映射到不同的 Redis 节点上。具体来说，可以使用一致性哈希算法来实现 Redis 分片。在一致性哈希算法中，每个 Redis 节点被分配一个哈希值，每个键也被映射到一个哈希值。当需要将数据存储到 Redis 中时，可以使用一致性哈希算法将键哈希为一个值，然后将值映射到一个 Redis 节点上，从而将数据存储在相应的节点上。\"]},\"104\":{\"h\":\"2）Redis使用\"},\"105\":{\"h\":\"2.1 引入 Redis：注意 -> 云服务器redis不设密容易被挖矿\",\"t\":[\"引入 pom\",\"no-sql 和sql一样配地址密码\",\"使用，建议先来个单元测试 一般都是用 StringRedisTemplate 够用 注意：至于为什么看自己Redis笔记，这个也可操作Hash\",\"com.alibaba.fastjson.JSON（jackson也有这个类） -> TypeReference\",\"jackson都是操作ObjectMapper这个对象进行序列化、反序列化 XD：Jackson笔记官方的，更偏向于它 -> ObjectMapper\",\"String json = JSON.toJSONString(map); //对象 -> Json /** * Json -> 对象 * 重点：protected TypeReference() 构造方法是protected所以需要匿名创建 */ JSON.parseObject(catalogJson, new TypeReference<Map<String, List<Catelog2Vo>>>(){}) -----------------jackson 获取json字符串指定key的value值------------------------ ------【Spring Boot项目中，Jackson通常是默认集成的】---- // 创建 ObjectMapper 对象 ObjectMapper mapper = new ObjectMapper(); // 将 JSON 字符串转换为 JsonNode 对象 JsonNode jsonNode = mapper.readTree(user); // 获取指定 key 的 value String id = jsonNode.get(\\\"id\\\").asText(); socialUser.setSocial_uid(id); ----------------------------------------- <!-- 反序列化报错（autoType）因为fastjson的漏洞解决: 我这里是降到有漏洞的版本 / 按官网加配置--> <dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.47</version> </dependency> 后面我光order模块总是有这个问题，其它通过上述解决。不想再纠结了，就换了一个序列化 https://blog.csdn.net/qq_40265247/article/details/114374706 -----------------Boke Company 我常用------------------------ ObjectMapper mapper = new ObjectMapper(); //Map<String, Object> map = mapper.readValue(s, new TypeReference<Map<String, Object>>() {}); //一般二开不复杂，就把map对象转一下。传前端 JsonNode JsonNode jsonNode = mapper.convertValue(map, JsonNode.class); return jsonNode; \",\"转 JSON对象 注意不是 String！！！\",\"我测出的两种好一点的方法：\",\" ObjectMapper mapper = new ObjectMapper(); JsonNode jsonNode = mapper.convertValue(res, JsonNode.class); JsonNode jsonNode1 = mapper.valueToTree(res); \"]},\"106\":{\"h\":\"2.2 lettuce堆外内存溢出bug\",\"t\":[\"这不就是面试中常问的\\\"开发中遇到什么困难,怎么解决的嘛\\\"\",\"lettuce和jedis是操作redis的底层客户端，RedisTemplate是再次封装\"]},\"107\":{\"h\":\"单个自己测单线程没问题，但当进行压力测试时后期会出现\",\"t\":[\"产生原因：lettuce 可能没有及时释放掉内存，导致堆外内存溢出。（源码体现某一块可能没有减内存导致溢出）\",\"1)、springboot2.0以后默认使用lettuce作为操作redis的客户端，它使用netty进行网络通信（优点，所以吞吐量是极大的。而Jedis比较老了）\",\"2)、lettuce的bug导致netty堆外内存溢出。netty如果没有指定堆外内存，默认使用Xms的值，可以使用-Dio.netty.maxDirectMemory进行设置\",\"解决方案：由于是lettuce的bug造成，不要直接使用-Dio.netty.maxDirectMemory去调大虚拟机堆外内存，治标不治本。\",\"1)、升级lettuce客户端。但是没有解决的 2)、切换使用jedis\",\"摘自弹幕： 2022 2 13 表示和老师同样的版本还会出现和老师同样的问题 其它高版本或许没有这个问题 如果不想改成jedis 先exclusion排除 然后导入letture依赖5.2.*版本的也行 5.2.0.RELEASE亲测可用\",\"JMeter\",\"压测内容\",\"压测线程数\",\"吞吐量/s\",\"90%响应时间\",\"99%响应时间\",\"三级分类（优化业务）\",\"50\",\"2\",\"21481\",\"22192\",\"压测时候 redis上显示timeout连接超时，自己加了配置 timeout 改大了就行\",\"😡但是我发现 idea 改 yaml 时候点击 build 能编译到 target 但是运行起来修改的这个timeout却还是原先的没有改变，不知道这个参数是不是 Redis 刚跑的时候拿的后面就算修改也不会再去拿了\"]},\"108\":{\"h\":\"2.3\",\"t\":[\"自己的笔记\",\"1）、读模式\",\"缓存穿透【空结果缓存||布隆过滤器】\",\"缓存雪崩【加随机时间】\",\"缓存击穿【加锁】 //其它两个好解决，这个代码层面加锁如果加不好又会产生很多问题\",\"使用sync = true来解决击穿问题\",\"2)、写模式：（缓存与数据库一致）\",\"读写加锁。\",\"引入Canal，感知到MySQL的更新去更新Redis\",\"读多写多，直接去数据库查询就行\",\"3）、总结：\",\"常规数据（读多写少，即时性，一致性要求不高的数据，完全可以使用Spring-Cache）：\",\"写模式(只要缓存的数据有过期时间就足够了)\",\"特殊数据：特殊设计\",\"加锁初体验：\",\"加本地锁 Synchronized / JUC（Lock）这些都只放在单体应用的话都可以叫本地锁， 在分布式环境下这些JUC类都没法用 想用的话得用 Redisson (Java implementation) 它对这些类封装成了分布式可用的！\",\"因为会有集群环境，即每个应用一把锁。所以得用分布式锁 本地锁的this只能锁住当前服务\",\"本地锁体现：因为只锁当前服务，所以下图每个服务都会走一遍数据库。而我们正常想要的是所有服务有一个走了数据库就行了其它用缓存\",\"加锁问题：查询数据库的业务执行了两次\",\"//TODO 这里查了两次数据库 原因是锁的时序问题具体看资料图，这个方法完了放入redis的操作没在锁里。所以交互的空隙后面排队的乘空隙判断redis里没数据 //解决办法：把redis set也放到这个synchronized块里 \",\"解决：查完后+放缓存 这两步得保证是一个原子操作！在同一把锁内进行的\"]},\"109\":{\"h\":\"3）分布式锁\",\"t\":[\"注：我这里 3）4) 都没有手动敲，印象没有那么深刻。以后再回顾，先往下赶进度了\",\"结合前面的笔记 + 以及自己有篇笔记\",\"分布式项目时，但本地锁只能锁住当前服务，需要分布式锁\",\"redis自己实现分布式锁的最大的问题就是自旋，自旋消耗cpu资源，所以还是得中间件进行拿阻塞，比如zookeeper\",\"正规笔记看我另一篇笔记，现在是我看视频我接地气的理解：\"]},\"110\":{\"h\":\"加锁：\",\"t\":[\"xshell多开，通过撰写栏同时执行 set K V NX 【保证只有一个线程会拿到锁，独占排它 这是分布式锁的基本原理！】 \",\"前提，锁的key是一定的，value不重要。重点是排它 作为一把锁来用\",\"题外：Xshell多窗口同时输入命令 窗口 -> 撰写栏\",\"代码初步写好，发现会有死锁问题！expire【防宕机没释放锁，导致死锁】 while好一点，这里递归太容易内存溢出\",\"问题来了：设置锁和设置过期时间 java代码体现得有两行。没有原子性！ 换成一行的 API 是有的！\"]},\"111\":{\"h\":\"解锁：\",\"t\":[\"业务还没处理完锁就过期，这时候又去删锁就是删别的线程的锁了！【value利用起来，用来辨别当前锁是不是自己拿着】\",\"问题来了：与Redis有个网络IO。去的时候判断是自己的锁，回的途中时间过期别的线程占了这把锁 而此时我却删了它！没锁住！ 即 获取值对比（去）+对比成功删除（回）=原子操作【Lua 脚本原子删锁】 不然就会出现上述问题\",\"难点：解决 No.3 的难点，业务还没处理完。这时候锁需要自动续期（Redisson有个看门狗）\",\"总结：原子加锁、原子解锁、续期不想做了就把锁时间搞长一点（加锁解锁都是这段代码可以封装工具类，但是分布式锁有更专业的框架！） 官网给出了以上流程，在 setnx 中，最后的总结说不推荐用这种，并指出了更专业的：Redlock -> Redisson (Java implementation).\"]},\"112\":{\"h\":\"\",\"t\":[\"它是底层基于Redis实现了一系列的工具（分布式的可伸缩的java工具）\",\"JRedis、Lettuce一样都是 Redis 的JAVA客户端 / redisson是作为分布式锁的客户端 只不过更强大提供分布式解决方案，我觉得可理解为再把JUC包了一层适用于分布式了，而JUC是单体。同样有加锁、信号量等后面项目用到的点！\",\"在分布式环境下这些本地锁JUC类都没法用 想用的话得用 Redisson (Java implementation) 它对这些类封装成了分布式可用的！\",\"Q：Redisson和redis有什么关联吗 总之，Redisson 和 Redis 之间密切相关，Redisson 是 Redis 的一个客户端，并且对 Redis 进行了封装和扩展，提供了更方便的 Redis 功能和更多的分布式功能。\",\"突然又看到官网： Redisson 是具有内存数据网格功能的 Redis Java 客户端。它提供了更方便和最简单的方式来使用 Redis。Redisson 对象提供关注点分离，使您可以专注于数据建模和应用程序逻辑。\",\"OpenAI:\",\"Redisson是基于Redis的分布式Java对象和服务框架。它提供了一系列的分布式Java对象，例如分布式Map、分布式Set、分布式List等等，这些对象都是通过Redis进行存储和同步的。\",\"Redisson可以用来解决分布式系统中的一些常见问题，例如分布式锁、分布式集群选举、分布式对象存储和分布式限流等。Redisson支持多种部署模式，包括单机模式、哨兵模式、集群模式和云托管模式等，可以适应不同的部署需求。\",\"除了基本的分布式对象，Redisson还提供了一些高级特性，例如分布式计数器、分布式BitSet、分布式消息队列等等，可以满足更加复杂的分布式应用场景。\",\"总的来说，Redisson是一个功能强大的分布式Java框架，可以帮助开发者更加容易地构建分布式应用。\",\"Q: 老师，问您个很简单的问题我不太懂，就是咱们这个不是一个单体项目嘛，怎么还用到了分布式锁呢？我以为只有分布式项目才会用到分布式锁呢哈哈哈\",\"A: 单体项目也可以水平扩展，部署多个机器，构成负载均衡集群。此时如果需要加锁，可能就需要分布式锁了\",\"image-20230304152602369\",\"pom start好处什么都配好了，只需要写两三个配置就行。而这里我们引入单纯的 Redisson 以学习为目的都自己搞一下\",\"注意：redission 听听就好，后面还会讲导入 cache、Redis 两个Start 一配置类 后面就直接用注解了方便的很\",\"具体：看GitHub的Redisson官方文档就行，有中文。看着配：视频以程序化配置讲解\"]},\"113\":{\"h\":\"4.1 初体验\",\"t\":[\"看下面代码注释！理清看门狗 结合官方文档\",\"看门狗机制是Redission提供的一种自动延期机制，这个机制使得Redission提供的分布式锁是可以自动续期的。\",\"private long lockWatchdogTimeout = 30 * 1000; \",\"看门狗机制提供的默认超时时间是30*1000毫秒，也就是30秒\",\"在Redission中想要启动看门狗机制，那么我们就不用获取锁的时候自己定义leaseTime(锁自动释放时间)。\",\"如果自己定义了锁自动释放时间的话，无论是通过lock还是tryLock方法，都无法启用看门狗机制。\",\"但是，如果传入的leaseTime为-1，也是会开启看门狗机制的。\",\"看门狗机制的工作原理如下：\",\"当一个线程成功获取到分布式锁后，看门狗会启动一个定时任务（默认加锁 30秒，每10秒钟检查一次，如果存在就重新设置 过期时间为30秒）\",\"定时任务会定期发送续约请求到Redis，更新锁的过期时间。\",\"如果获取锁的线程因为某种原因（如网络故障、线程挂起等）未能及时续约锁的过期时间，锁会在过期时间到达后自动释放，其他线程可以获取到锁。\",\"如果获取锁的线程仍然活跃，并且定时任务成功续约了锁的过期时间，那么锁将一直保持有效，直到线程显式释放锁。\"]},\"114\":{\"h\":\"项目上怎么用的分布式锁，原理是什么？\",\"t\":[\"首先分布式锁是一种跨进程跨机器节点的互斥锁，可以保证在多机器节点下对共享资源的排他性，通过第三方服务比如 reids 去共享锁，保证同一时刻只能有一个实例能够获取到锁。\",\"然后分布式锁主要使用 Redisson 去实现的，Redisson的底层逻辑是基于 lua 脚本去实现的；\",\"如果是第一次加锁，就会在 key 对应的 hash结构中添加一个 UUID：线程标识和1，代表了该线程对这个 key加锁了一次；\",\"并且key的过期时间默认为30秒，如果启用了 watchdog机制，就会在后台启用一个线程，该线程会去执行一个定时任务，每10秒检查一次，如果key存在，就重置key的生存时间为30秒；\",\"并且 Redisson 也实现了可重入锁的机制，当再次加锁，会对key对应的value加1，当value为0或者宕机，锁就会释放。\"]},\"115\":{\"h\":\"分布式锁用的redis的哪种数据结构？\",\"t\":[\"hash结构，用来线程id+重入次数，（然后扯一下它的流程和原理）\",\"String lockKey = \\\"DISTRIBUTE_LOCK:redissonLock:product_\\\" + productId;\",\"在这里插入图片描述\",\"基于Redis的Redisson分布式可重入锁RLock Java对象实现了java.util.concurrent.locks.Lock接口。 也就是如果学过 Lock 就不用再花时间成本学了，都是一样的API。厉害的点是：一个本地锁一个分布式锁\",\"优秀的地方：模拟两个服务，业务处理3秒。第一个服务处理业务途中给停掉还没有释放锁，第二个服务此时发现过一过时间还是能拿到锁！【有ttl默认30s】 没有手动解锁它也会给解锁 看Redis的表现：锁的ttl30，刷新到18..再刷新又变成了30 看来是实现了自动续期【看门狗】 注意：用带参参构造就不会用看门狗\",\"// 参数为锁名字 锁的粒度，越细越快。 即名字可以细致一点 不要很多都公用一把锁 // 锁的粒度：具体缓存的是某个数据，11-号商品； product-11-Lockproduct-12-Lock product-Lock RLock lock = redissonClient.getLock(\\\"CatalogJson-Lock\\\");//该锁实现了JUC.locks.lock接口 /** * 问题：Lock.Lock（10,TimeUnit.SECONDS）在锁时间到了以后，不会自动续期。 * 1、如果我们传递了锁的超时时间，就发送给redis执行脚本，进行占锁，默认超时就是我们指定的时间 * 2、如果我们未指定锁的超时时间，就使用30*1000【LockWatchdogTimeout看门狗的默认时间】； * 只要占锁成功，就会启动一个定时任务【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】每隔10s续期续成30s看下行 * internalLockLeaseTime【看门狗时间】／3,10s 续期 默认30s-20>=10给恢复到30 * //最佳实战 * //1）、Lock.Lock（30,TimeUnit.SECONDS）省掉了整个续期操作。手动解锁 注意：有参构造没用看门狗 */ lock.lock();//阻塞式等待，以前是自旋 这里的加锁是给 redis 给的Key里放UUID+线程号和之前是差不多的 // 解锁放到finally // 如果这里宕机：有看门狗，不用担心 lock.unlock(); \",\"还有一些其它锁，API和JUC差不多 例如读写锁可以看看[自己笔记](../juc/juc#4） 独占锁（写锁） / 共享锁（读锁） / 互斥锁)\"]},\"116\":{\"h\":\"5）分布式锁-缓存数据一致性\",\"t\":[\"缓存里面的数据如何和数据库保持一致，针对读多写少的场景\",\"缓存本来保证的就是 最终一致性，反正有 ttl 失效后重查放入缓存就又是最新数据了\"]},\"117\":{\"h\":\"1）、双写模式：写数据库后，写缓存\",\"t\":[\"问题：脏数据（No.1写完数据库还没写缓存，此时 No.2也写完这两个了。这时No.1再写缓存就覆盖No.2的新数据了）\",\"解决：加锁写数据和写缓存锁一起\"]},\"118\":{\"h\":\"2）、失效模式：写完数据库后，删缓存（推荐）\",\"t\":[\"解决：可以 读写锁 但是如果不关心这些数据有点延迟也没关系那就不加锁没事。例如 iphone 11刚发布的商品介绍变了点参数我晚一点看也不影响\",\"解决方案：\",\"如果是用户纬度数据（订单数据、用户数据），这种并发几率非常小，不用考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可 如果是菜单，商品介绍等基础数据，也可以去使用canal订阅binlog的方式 缓存数据+过期时间也足够解决大部分业务对于缓存的要求。 通过加锁保证并发读写，写写的时候按顺序排好队。读读无所谓。所以适合使用读写锁。（业务不关心脏数据，允许临时脏数据可忽略）；\",\"总结：\",\"我们能放入缓存的数据本就不应该是实时性、一致性要求超高的。所以缓存数据的时候加上过期时间，保证每天拿到当前最新数据即可。 我们不应该过度设计，增加系统的复杂性 遇到实时性、一致性要求高的数据，就应该查数据库，即使慢点。\"]},\"119\":{\"h\":\"5.1 Canal 了解\",\"t\":[\"最好的解决方法：Canal 原理伪装成mysql的一个从服务器 通过订阅 binlog 拿每一次的更新 好处：只需要关心数据库就好，不用管缓存（屏蔽了对整个缓存的操作） 缺点又加了个中间件 canal 还可以做数据异构：jd 首页每个人的个性化推荐\"]},\"120\":{\"h\":\"\",\"t\":[\"这是属于 Spring 框架里面的 Integration 里面有个 Caching（具体看官网文档！）\"]},\"121\":{\"h\":\"6.1 Why：\",\"t\":[\"先读缓存，缓存没有再读数据库 封装查询一大块。每次都那样写缓存太麻烦了。有简单的方式处理这些 Spring Cache可以通过简单的几个注解把缓存功能跑起来，不用编写一大堆的模式代码了。spring从3.1开始定义了Cache、CacheManager接口来统一不同的缓存技术。并支持使用JCache(JSR-107)注解简化我们的开发\"]},\"122\":{\"h\":\"6.2 初步理解：\",\"t\":[\"CacheManager（Redis） 规则制定者管理不同名字的 Cache Cache则是管自己的CRUD CacheManager(RedisCacheManager)->Cache(RedisCache)->Cache负责缓存的读写\",\"Cache接口的实现包括RedisCache、EhCacheCache、ConcurrentMapCache等\",\"每次调用需要缓存功能的方法时，spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。\",\"使用Spring缓存抽象时我们需要关注以下两点：\",\"1、确定方法需要缓存以及他们的缓存策略 2、从缓存中读取之前缓存存储的数据\"]},\"123\":{\"h\":\"\",\"t\":[\"@Cacheable 注解是用于将方法的返回值缓存起来\",\"注意：使用spring-data-redis2.x版本时，@Cacheable缓存key值时默认会给vlue或cacheNames后加上双引号，具体看如下类 org.springframework.data.redis.cache.CacheKeyPrefix\",\"SpringSession整合redis，Redis 存的 Session 是自动续期的吗\",\"一开始听chatgpt说是的，经过验证发现不是那么回事！！！\",\"使用Spring Cache的CacheManager接口提供的putIfAbsent方法来更新缓存的过期时间。\",\"框架实现的，保存会存类的全限定类名 用于反序列化，在RedisAdvaced笔记中说了这样占地方\",\"1）导入 cache、Redis 的 Start 2）spring: cache: #指定缓存类型为redis type: redis redis: time-to-live: 100000 #这里我想热部署，搞一下午 jrebel+devtools 都不行还得重启项目 # 我想到的结论： @Bean是项目启动时候加载进来的！所以得重启项目才会跑@Bean加载配置！不像Demo中Entity直接绑yaml没有代码处理 # 热部署部署代码和配置文件，而这里部署了yaml但是读这个yaml的代码@Bean没变动不会重新去读？ # 总之：涉及启动流程的配置就不能热部署 3）主启动类/配置类 @EnableCaching 使用： //每一个需要缓存的数据我们都来指定要放到那个名字的缓存。【缓存的分区（按照业务类型分）】 // sync表示该方法的缓存被读取时会加锁]【注意：是本地锁！！分布式锁重】 本地锁的确够了，一个单体锁一个查询，100个单体才100个查询 // value等同于cacheNames // key是SpEL表达式如果是字符串\\\"''\\\" @Cacheable(value = {\\\"category\\\"},key = \\\"#root.method.name\\\",sync = true) @Cacheable(value = \\\"cache:shop\\\", key = \\\"#root.args[0]\\\", sync = true) //cache:shop::1 //代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。如果缓存中没有，会调用方法，最后将方法的结果放入缓存！ // @Caching(evict = { // @CacheEvict(value = \\\"category\\\",key = \\\"'getLevel1Category'\\\"), // @CacheEvict(value = \\\"category\\\",key = \\\"'getCatalogJson'\\\") // })//Group annotation for multiple cache annotations //调用该方法会删除缓存category下的所有cache，如果要删除某个具体，用key=\\\"''\\\" @CacheEvict(value = {\\\"category\\\"},allEntries = true) \",\"默认行为 如果缓存中有，方法不再调用 key是默认生成的:缓存的名字 -> SimpleKey:: 【value::key】 缓存的value值，默认使用jdk序列化机制，将序列化的数据存到redis中 默认时间是 -1： 自定义操作：key的生成 指定生成缓存的key【key属性指定，接收一个Spel 】 指定缓存的数据的存活时间【配置文档中修改存活时间】 将数据保存为json格式【配置一个config类，仿照源码抄部分】\"]},\"124\":{\"h\":\"补充：题外-redis热部署不生效\",\"t\":[\"Springboot重新加载Bean @Bean 在 application 启动的时候加载！所以配置文件改了热部署也没用 有解决方案但是要多写个接口调用一下：销毁这个Bean再重新注册进来：\",\"@Configuration public class DemoConfiguration { @Bean(name=\\\"execute\\\") public static Execute getBean(){ //Execute是我逻辑中需要的类 Execute execute = ....（逻辑过程省略） return execute; } } ----------------------------------- @Controller public class DemoController { @Autowired private ApplicationContext applicationContext; @ResponseBody @PostMapping(\\\"/getVersion\\\") public void reloadInstance(){ //获取上下文 DefaultListableBeanFactory defaultListableBeanFactory = (DefaultListableBeanFactory)applicationContext.getAutowireCapableBeanFactory(); //销毁指定实例 execute是上文注解过的实例名称 name=\\\"execute\\\" defaultListableBeanFactory.destroySingleton(\\\"execute\\\"); //按照旧有的逻辑重新获取实例,Excute是我自己逻辑中的类 Execute execute = DemoConfiguration.getBean(); //重新注册同名实例，这样在其他地方注入的实例还是同一个名称，但是实例内容已经重新加载 defaultListableBeanFactory.registerSingleton(\\\"execute\\\",execute); } } ----------------------------------- Springboot重新加载Bean https://blog.51cto.com/u_15072908/3946684 \",\"启动 Debug 了下看到进了应该是的吧，但是又有问题：那不是那些配置的东西基本都是@Bean操作了下启动时才进来的。换句话说也就是配置文件热部署也就只能对自己Demo中Entity直接绑yaml没有代码处理的有效了 也就没有第三方jar yaml配置能热部署的了 因为基本都依赖启动\"]},\"125\":{\"h\":\"\",\"t\":[\"CacheAutoConfiguration -> RedisCacheConfiguration -> 自动配置了RedisCacheManager->初始化所有的缓存->每个缓存决定使用什么配置 ->如果redisCacheConfiguration有就用已有的，没有就用默认配置 ->想改缓存的配置，只需要给容器中放一个RedisCacheConfiguration即可 ->就会应用到当前RedisCacheManager管理的所有缓存分区中\",\"全是抄的源码createConfiguration方法，目的只是为了把value改为json序列化！源码key好像是用的string的 org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration#createConfiguration\",\"Q：我这里其实对每一次的\\\"config =\\\"都充满疑惑：这样不是每次都指向一个新对象那么意义何在？？？\",\"A：因为RedisCacheConfiguration.class中的属性都是final，所以每次\\\"config =\\\"等号右边可以理解为在setxxx\",\"Q：我可以理解为这样的目的是使得final属性获得指定的值吗\",\"不完全是这样的，如果某个属性是final类型，那么它只能在构造函数或者成员变量声明的时候初始化一次，并且不能被修改。因此，为了在构造RedisCacheConfiguration对象的时候能够对final属性进行初始化，我们需要使用这种“链式调用”的方式，每次调用方法时都会返回一个新的RedisCacheConfiguration对象，这样就能保证final属性每次都能被正确初始化。\",\"Q：那上一次\\\"config =\\\"指向的对象不会被回收吗\",\"Java中的对象是有垃圾回收机制的，当对象不再被任何引用所指向时，垃圾回收机制会将其回收。在该代码片段中，每次重新赋值config时，前一次指向的对象会失去引用，如果没有其他引用指向该对象，则该对象会被垃圾回收机制回收。因此，不需要担心对象的内存泄漏问题。\",\"Q：被回收掉后RedisCacheConfiguration的final属性变量所得到的值还会保留吗\",\"是的，一旦一个final属性被初始化，它的值就不能被改变，即使它所引用的对象被回收了，final属性依然会持有它最初引用的对象的值。因此，在这种情况下，即使上一次\\\"config =\\\"所指向的对象被回收了，最终的返回值仍然会包含之前设置的所有属性和值。\",\"@EnableConfigurationProperties(CacheProperties.class) @EnableCaching @Configuration public class MyCacheConfig { // @Autowired // CacheProperties cacheProperties; //因为下面是 @Bean 直接放参数用就行！ @Bean //原来@Bean注解想容器注入对象的时候，会自动将容器中已经有的对象传入到@Bean注解的方法参数中 public RedisCacheConfiguration redisCacheConfiguration(CacheProperties cacheProperties) { //这个参数能拿值？ 这个方法就是给容器放东西，方法传的所有参数所有参数都会从容器中进行确定 所以会自动去IOC中拿 RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig(); config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer())); // 序列化 value 时使用此序列化方法 config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer())); //下面抄源码，不然配置文件写的过期时间之类的失效 具体看 RedisCacheConfiguration.java【注意是autoconfigure包下的！】 CacheProperties.Redis redisProperties = cacheProperties.getRedis(); if (redisProperties.getTimeToLive() != null) { config = config.entryTtl(redisProperties.getTimeToLive()); } if (redisProperties.getKeyPrefix() != null) { config = config.prefixKeysWith(redisProperties.getKeyPrefix()); } if (!redisProperties.isCacheNullValues()) { config = config.disableCachingNullValues(); } if (!redisProperties.isUseKeyPrefix()) { config = config.disableKeyPrefix(); } return config; } } \",\"碰到的问题\",\"JDK8 中新的时间 API LocalDateTime，究其原因是 Jackson 在序列化 LocalDateTime 时输出的不是普通的字符串时间格式【解决】\",\"/** //JDK8 中新的时间 API LocalDateTime，究其原因是 Jackson 在序列化 LocalDateTime 时输出的不是普通的字符串时间格式 //解决Could not read JSON: Cannot construct instance of `java.time.LocalDateTime` //发现一开始我就错了，我return的是一个Bean才会引发这个。实际还是return list / map / String好一些 */ ObjectMapper objectMapper = new ObjectMapper(); objectMapper.registerModule(new JavaTimeModule()); // 序列化 value 时使用此序列化方法 config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer(objectMapper))); \",\"反序列化报错，总是用map强转相应的Bean\",\"我的解决 -> return list / map / String\",\"js 报错 search() 不是一个方法，前面加javascript:解决\",\"<a href=\\\"javascript:search();\\\" > \",\"我被这里卡了半天，因为我es查的是product，而我java写的EsConstant是 PRODUCT_INDEX = \\\"gulimall_product\\\";p133第4分钟\",\"找不到数据的，看看自己的EsConstant里面的索引名字写对没\"]},\"126\":{\"h\":\"1）商品搜索\",\"t\":[\"重点：\",\"1、准备检索请求 把写的DSL语句转成java执行\",\"2、执行检索请求 调用es api执行上面处理好的检索请求得到响应数据\",\"3、分析响应数据，封装成我们需要的格式\",\"DSL转java书写，返回值封装成对象\",\"Other：\",\"面包屑导航：选一个就有个title标签后面有个×，把这些标签组合起来搜。也可删掉\",\"这一个章节对急着找工作人士的性价比极低 商品搜索直接 copy 跳了，营养价值不大\",\"CompletableFuture 异步编排、 实现 Callable 接口 + FutureTask\",\"这章知识以前是很陌生的，感觉很有用！\",\"juc\",\"架构图-认证中心：处理登录注册，再放行请求到服务器\",\"面试就喜欢问认证，授权，社交登录，单点登录。 来判断新手，逻辑思维能力\",\"SMS 具体看ali官网给的文档就行，优雅一点放配置文件 @ConfigurationProperties(prefix = \\\"spring.cloud.alicloud.sms\\\")\",\"具体写的Controller应该是提供给别的服务进行调用的！\"]},\"127\":{\"h\":\"1.注册流程\"},\"128\":{\"h\":\"1.1 JS 验证码倒计时\",\"t\":[\"点击获取验证码后，进入倒计时\",\"计时功能可以使用js的timing计时时间，setTimeout()可以设置一段时间后执行代码\",\"递归回调可以解决倒计时刷新的功能\",\"开始倒计时后设置按钮不可用$(\\\"#sendCode\\\").attr(\\\"class\\\", \\\"disabled\\\")\",\"$(function () { //当文档载入完成的时候执行的 $(\\\"#sendCode\\\").click(function () { //2、倒计时 if($(this).hasClass(\\\"disabled\\\")) { //正在倒计时中 } else { //1、给指定手机号发送验证码 $.get(\\\"/sms/sendCode?phone=\\\" + $(\\\"#phoneNum\\\").val(),function (data) { if(data.code != 0) { alert(data.msg); } }); timeoutChangeStyle(); } }); }); var num = 60; function timeoutChangeStyle() { $(\\\"#sendCode\\\").attr(\\\"class\\\",\\\"disabled\\\"); if(num == 0) { $(\\\"#sendCode\\\").text(\\\"发送验证码\\\"); num = 60; $(\\\"#sendCode\\\").attr(\\\"class\\\",\\\"\\\"); } else { var str = num + \\\"s 后再次发送\\\"; $(\\\"#sendCode\\\").text(str); setTimeout(\\\"timeoutChangeStyle()\\\",1000); } num --; } \",\"//凭前缀是因为redis会存大量不同的数据，方便区分，小傻瓜 public static final String SMS_CODE_CACHE_PREFIX = \\\"sms:code:\\\"; \"]},\"129\":{\"h\":\"\",\"t\":[\"1）暴露了短信接口API，会被别人恶意调用 【接口防刷 -> Redis拼个_时间戳校验】 2）倒计时刷新就没用了 【同上用时间戳校验】 \",\"Redis存 code_时间戳，校验时间戳是不是60s内 （后端校验解决此问题）\"]},\"130\":{\"h\":\"1.2 JSR303\",\"t\":[\"值得学习：哪天完全脱离自己写，要有这思路\",\"获取表单信息、封装VO（需要JSR303校验）、重定向登录页面 【搞熟三个参数、Lambda】\",\" /** * * TODO: 重定向携带数据：利用session原理，将数据放在session中。 * TODO: 只要跳转到下一个页面取出这个数据以后，session里面的数据就会删掉 * TODO：分布下session问题 * RedirectAttributes：重定向也可以保留数据，不会丢失 * 用户注册 * @return */ @PostMapping(value = \\\"/register\\\") public String register(@Valid UserRegisterVo vos, BindingResult result, RedirectAttributes attributes) { if (result.hasErrors()) { Map<String, String> errors = result.getFieldErrors().stream().collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage)); attributes.addFlashAttribute(\\\"errors\\\",errors); } } \",\"[2.2 Model / RedirectAttributes](#2.2 Model / RedirectAttributes) -> TODO 但是他是利用的session原理，所以后期我们需要解决分布式的session问题\"]},\"131\":{\"h\":\"1.3 MD5\",\"t\":[\"密码存数据库加密分: 可逆 vs 不可逆（√）\",\"不可逆更合理一些 MD5+salt\",\"apache base64 长度能改变么 没有办法，base64是编码而已，是对称的，不是像md5那样的非对称的加密算法能够讲任意长度字符加密后长固定长度。\"]},\"132\":{\"h\":\"MD5使用场景：百度网盘秒传功能\",\"t\":[\"Answer：算出MD5值，看别人有没有上传过\",\"因为这些特性:\",\"无论多大文件MD5都会搞成固定长度的串（压缩性）\",\"两个不同的数据要有一样的MD5是非常困难的（强抗碰撞）\",\"从原数据计算出MD5值很容易（容易计算）\",\"对原数据进行任何改动,哪怕只修改1个字节,所得到的MD5值都有很大区别（抗修改性）\",\"最大特点：不可逆\",\"使用：以前还傻傻的自己Copy工具类\",\"org.apache.commonns 有很多加密算法 -> DigestUtils.md5Hex()、Md5Crypt.md5Crypt()\",\"但是光零零一个MD5，网上随便搜破解随便破。 原因：彩虹表 -> 预先计算（因为123456的MD5不可变我就把这个放数据库）在字典法的基础上改进\",\"解决+salt 问题：我这个盐存哪里？难道再维护一个字段放盐？\",\"//Apache commons包 DigestUtils类，【简单的MD5】 DigestUtils.md5Hex(\\\"123456\\\"); //Apache commons包 Md5Crypt类，这个方法的颜值有正则限定，需要以$1$开头，【MD5+salt】 Md5Crypt.md5Crypt(\\\"123456\\\".getBytes(), \\\"$1$1\\\"); \"]},\"133\":{\"h\":\"解决：org.springframework.security -> 把盐交给 Spring 工具类\",\"t\":[\"/** * 密码加密器：多个用户过来存 123456 用这个Util存的值都不一样，但是都能 match 123456 * 加了个算法生成盐 */ @Test public void testBCryptPasswordEncoder(){ BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(); //$2a$10$Vu.YcPJ5LOY.pIXhqxvgGuO/haGTVe5g/bpXCYYasSgS9sF2vxauC //$2a$10$C/7Ur.ScOTYkYIOKChppD.TwGZfMyl3QbgWtbiYU1VIYWcNJ.dNH. String s = encoder.encode(\\\"123456\\\"); System.out.println(s); //两个都是 true System.out.println(encoder.matches(\\\"123456\\\", \\\"$2a$10$Vu.YcPJ5LOY.pIXhqxvgGuO/haGTVe5g/bpXCYYasSgS9sF2vxauC\\\")); System.out.println(encoder.matches(\\\"123456\\\", \\\"$2a$10$C/7Ur.ScOTYkYIOKChppD.TwGZfMyl3QbgWtbiYU1VIYWcNJ.dNH.\\\")); } \"]},\"134\":{\"h\":\"1.4 总结\",\"t\":[\"校验表单 JSR303 redis 存key-phone,value-code\",\"截串取 Redis 验证码 \",\"通过则删 Redis，远程调用注册API（BCryptPasswordEncoder存密码）\"]},\"135\":{\"h\":\"2.社交登录\",\"t\":[\"社交登录指的是用QQ微信等方式登录\",\"点击QQ按钮\",\"引导跳转到QQ授权页\",\"用户主动点击授权，跳回之前网页\"]},\"136\":{\"h\":\"2.1 OAuth2.0\",\"t\":[\"上面社交登录的流程就是OAuth协议\",\"OAuth（开放授权）是一个开放标准，允许用户授权第三方移动应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容，OAuth2.0是OAuth协议的延续版本，但不向后兼容OAuth 1.0即完全废止了OAuth1.0。\",\"在这里插入图片描述\",\"微信：https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_Login/Development_Guide.html\",\"客户端是\",\"资源拥有者：用户本人\",\"授权服务器：QQ服务器，微信服务器等。返回访问令牌\",\"资源服务器：拿着令牌访问资源服务器看令牌合法性\",\"img\",\"1、使用Code换取AccessToken，Code只能用一次 2、同一个用户的accessToken一段时间是不会变化的，即使多次获取\"]},\"137\":{\"h\":\"\"},\"138\":{\"h\":\"1）大致流程\",\"t\":[\"授权获取重定向到自己url 会拼个code 【获取code】\",\"【code换accessToken】 -> 这里要写后端代码\",\"accessToken访问GitHub开放的API openAPI获取用户信息\"]},\"139\":{\"h\":\"2）HttpUtils\",\"t\":[\"是搞短信验证码ali的文档给的java示例代码教引入的，这里可以拿来用\",\"org.apache.http.util.EntityUtils#toString(org.apache.http.HttpEntity) //可以拿HttpEntity响应体的json内容\",\"String json = EntityUtils.toString(response.getEntity()); JSONObject jsonObject = JSON.parseObject(json); //也可以转成指定对象 //SocialUser socialUser = JSON.parseObject(json, SocialUser.class); String name = jsonObject.getString(\\\"name\\\"); \",\"严谨点可以\",\"针对不同的社交网站可能需要建不同的表 这里视频直接在会员信息加了个字段放社交id，关联本系统会员信息\"]},\"140\":{\"h\":\"3.分布式session\",\"t\":[\"原理：session存储在服务端 tomcat 源码其实就是个 map，jsessionId存在客户端，每次通过jsessionid取出保存的数据\",\"org.apache.tomcat.embed:tomcat-embed-core:9.0.24 (tomcat-embed-core-9.0.24.jar) javax.servlet.http.HttpSession#setAttribute\"]},\"141\":{\"h\":\"3.1 Session 两个问题：\",\"t\":[\"问题 1：Session 不能跨不同域名共享 场景：在 auth 模块存的session，只在它这个模块的登录页面有 session 而 product对应的主页模块没有 session jsessionid这个cookie默认是当前系统域名的（具体验证F12 Session有Domain限定，所以 auth.gulimall.com VS gulimall.com 不同域）\",\"image-20230105171317820\",\"问题 2：Session 是放服务器中，即使是单体应用（同域名）。但是它集群的话不同服务器也不能共享 Session\"]},\"142\":{\"h\":\"3.2 分布式session解决方案\",\"t\":[\"不用的两种方案：\"]},\"143\":{\"h\":\"1) session复制\",\"t\":[\"用户登录后得到session后，服务把session也复制到别的机器上，显然这种处理很不好\",\"img\",\"2）\",\"可用的两种方案：\"]},\"144\":{\"h\":\"3) hash一致性\",\"t\":[\"记得看了个文章还是视频：问 hash 有什么应用场景，这里就是。负载均衡\",\"根据用户，到指定的机器上登录。但是远程调用还是不好解决\",\"img\"]},\"145\":{\"h\":\"4) redis统一存储\",\"t\":[\"最终的选择方案，把session放到redis中\",\"img\"]},\"146\":{\"h\":\"3.3 SpringSession整合redis\",\"t\":[\"针对上面的 4） Spring 早就想到了解决方案：SpringSession 和 SpringCache 样的去官网摸索\"]},\"147\":{\"h\":\"3.3.1 简单配置\",\"t\":[\"怎么用：spring 官网！！！ 必须学会看官方文档解决问题！！！官网解决不了的再 Google\",\"不要忘了第二个网址告诉的需要配置类加：\",\"//创建了一个springSessionRepositoryFilter ，负责将原生HttpSession 替换为Spring Session的实现 @EnableRedisHttpSession//整合redis作为session存储 \",\"注意：session 的操作API不变 session.setAttribute(LOGIN_USER,data);\",\"做完上述简单的配置操作数据是放redis了，但仍有问题：\",\"//TODO 1、默认发的令牌。当前域（解决子域session共享问题 扩大作用域：二级域名扩大到一级域名（auth.gulimall.com 扩大成 gulimall.com））\",\"//TODO 2、使用JSON的序列化方式来序列化对象到Redis中\"]},\"148\":{\"h\":\"3.3.2 Bean 配置\",\"t\":[\"解决上述两个问题：看官网！ctrl+f 搜 keyword: customize 两个@Bean解决 GulimallSessionConfig.java\",\"序列化时Bean需要返回的实现类：FastJsonRedisSerializer.class 因为要通用用泛型的：GenericFastJsonRedisSerializer.class\"]},\"149\":{\"h\":\"3.4 我遇到的坑\"},\"150\":{\"h\":\"1）redis、session的yaml配置每个model都要\",\"t\":[\"解决：放Nacos，配置 shared-dataids: common.yaml\",\"但是中途总是不生效，踩坑很久发现我Nacos配Data ID时候没有加后缀\"]},\"151\":{\"h\":\"2）GulimallSessionConfig 这个配置类每个model都要\",\"t\":[\"解决：放common模块 @ComponentScan({\\\"com.zzq\\\"}) or @Import\"]},\"152\":{\"h\":\"\",\"t\":[\"这里我暂时掠过\",\"核心原理 1）、@EnableRedisHttpSession导入RedisHttpSessionConfiguration配置 1、给容器中添加了一个组件 RedisOperationsSessionRepository：Redis操作session，session的增删改查封装类\",\"Redis 存的 Session 是自动续期的 TODO：待验证\",\"是的，Spring Session 整合 Redis 后，Redis 存储的 Session 是自动续期的。\",\"在 Spring Session 中，当一个 Session 被创建时，会生成一个唯一的 Session ID，并且这个 Session ID 会被用来作为 Redis 中存储 Session 的 key。同时，Spring Session 会将这个 Session ID 作为 cookie 发送给客户端。\",\"当客户端发送请求时，Spring Session 会根据请求中携带的 Session ID 从 Redis 中获取对应的 Session 数据，并检查 Session 是否过期。如果 Session 没有过期，Spring Session 会自动将 Session 的过期时间延长，确保 Session 不会在使用期间过期。\",\"因此，Spring Session 整合 Redis 后，Redis 存储的 Session 是自动续期的。\",\"GPT：\",\"会话过期时间重置：每当用户进行会话操作时（例如访问页面或发送请求），Spring Session 会自动更新 Redis 中存储的会话的过期时间。这样，只要用户保持活动状态，会话就会自动续期，不会过期。\"]},\"153\":{\"h\":\"4.单点登录-SSO\",\"t\":[\"Single Sign-On，简称 SSO\",\"一级域名都不一样 taobao.com tmall.com 所以不能用 SpringSession 解决不了不同域名的问题了。无法扩大域名\",\"Gitee 有个开源Demo：xxl-sso\",\"最终解决方案：都去中央认证器\",\"记住一个核心思想：建议一个公共的登陆点server，他登录了代表这个集团的产品就登录过了\",\"开源项目，一个认证中心，其它客户端：1）配好配置文件、2）cmd maven打包\",\"mvn clean package -Dmaven.skip.test=true \",\"流程： server：登录服务器、8080 、ssoserver.com web-sample1：项目1 、8081 、client1.com web-sample2：项目1 、8082 、client2.com 3个系统即使域名不一样，想办法给三个系统同步同一个用户的票据；\",\"中央认证服务器： 其他系统都去【中央认证服务器】登录，登录成功后跳转回原服务 一个系统登录，都登录；一个系统登出，都登出 全系统统一一个 sso-sessionId\",\"开源项目试过了能行，自己的项目怎么整合：\",\"雷神写了Demo，这里暂时掠过\",\"问了 chatGPT：\",\"要用 Java 实现单点登录，你需要做以下几件事：\",\"建立认证服务器：你可以使用 Java 开发认证服务器，负责存储用户的认证信息并负责验证用户的身份。\",\"在应用程序或网站中集成认证接口：你需要在应用程序或网站中集成认证接口，以便与认证服务器进行通信。\",\"处理用户输入的认证信息：你需要设计一个用户登录界面，让用户输入认证信息（例如用户名和密码）。\",\"发送认证请求：当用户点击登录按钮时，你的应用程序或网站需要向认证服务器发送认证请求，以验证用户的身份。\",\"处理认证结果：当你的应用程序或网站收到认证服务器的认证结果时，你需要根据认证结果来决定是否允许用户登录。如果认证成功，你可以允许用户登录；如果认证失败，你可以提示用户输入的认证信息有误，并让用户重新输入。\",\"Spring Security 是一款流行的 Java 安全框架，提供了认证和授权功能，包括单点登录功能。使用 Spring Security 实现单点登录，你需要在应用程序中配置 Spring Security，然后在认证服务器上配置相应的认证提供者。具体实现细节可以参考 Spring Security 的文档和教程。另外，你还可以参考其他框架或库，例如 Apache Shiro 或 PicketLink，它们也提供了单点登录功能。\",\"认证服务器通常使用数据库来存储用户的认证信息，但也可以使用其他的存储方式，例如文件系统或内存数据库。\",\"此外，在单点登录的认证过程中，应用程序或网站可能会为用户生成一个认证令牌，并将这个令牌存储在用户的浏览器上。这样，当用户访问其他应用程序或网站时，就可以通过这个认证令牌来验证用户的身份，而无需再次输入认证信息。这个认证令牌通常是一个字符串，包含了用户的认证信息和其他相关信息。\",\"总之，单点登录的认证信息可以存储在认证服务器上或者存储在用户的浏览器上（通过认证令牌）\"]},\"154\":{\"h\":\"1.需求描述\",\"t\":[\"在线购物车 vs 离线购物车\",\"特点：读多写少，放入数据库并不合适\",\"登录状态：登录购物车:\",\"放入数据库\",\"mongodb\",\"放入redis（采用） \",\"登录以后，将离线购物车里合并后清空离线购物车\",\"未登录状态：离线购物车：JD 貌似删了这个功能了\",\"放入localstorage浏览器的技术（浏览器的技术，缺点：大数据时代后台没法分析用户推荐）\",\"cookie\",\"WebSQL\",\"放入redis（采用） \",\"浏览器重启后还在\"]},\"155\":{\"h\":\"2.Redis 存储设计 & VO：\",\"t\":[\"每个人都有购物车\",\"购物车排列有顺序，例如选择了第三个商品进行增删改查\",\"redis有5种不同数据结构，这里选择哪一种比较合适呢？Map<String,List<String>>\",\"首先不同用户应该有独立的购物车，因此购物车应该以用户的作为key 来存储，Value 是用户的所有购物车信息。这样看来基本的k-v结构就可以了。\",\"但是，我们对购物车中的商品进行增、删、改操作，基本都需要根据商品id 进行判断，为了方便后期处理，我们的购物车也应该是k-v结构，key 是商品 id，value 才是这个商品的购物车信息。\",\"综上所述，我们的购物车结构是一个双层 Map：Map<String,Map<String,String>>\",\"第一层 Map，Key 是用户 id\",\"第二层 Map，Key 是购物车中商品 id，值是购物项数据\"]},\"156\":{\"h\":\"3.\",\"t\":[\"通常情况下,我们创建的变量是可以被任何一个线程访问并修改的.如果想实现每一个线程都有自己的专属本地变量该如何解决呢?\",\"常用应用场景：保存用户登录信息 需要注意的是，ThreadLocal 存储的数据仅对当前线程可见，因此适合存储一些只有在当前线程中使用的数据，例如用户信息等。而 Session 存储的数据对于整个 Web 应用程序都是可见的，因此适合存储一些需要在多个页面或请求之间共享的数据，例如用户登录状态、购物车信息等。\",\"Q：Threadlocal存用户信息比用session存用户信息有什么优势\",\"ThreadLocal 和 Session 都是在多线程环境下存储用户信息的方式，但是它们的作用和使用场景有所不同。下面是 ThreadLocal 存储用户信息比 Session 存储用户信息的一些优势：\",\"线程安全性：ThreadLocal 是线程局部变量，每个线程拥有自己的一个变量副本，不同线程之间不会相互影响，可以有效地避免多线程环境下的竞态条件和线程安全问题。\",\"跨请求访问：ThreadLocal 可以在同一线程内的多个请求之间共享数据，而 Session 则只能在同一会话（同一用户在同一浏览器中访问同一网站期间的所有请求）之间共享数据。\",\"性能优势：由于 ThreadLocal 是线程内部的变量，存取速度相对于 Session 更快，而且不需要将数据序列化和反序列化，也不需要在不同的请求之间进行传输，因此对系统性能的影响更小。(XD：Session一般会借助 Redis 存取，所以要 serialize)\",\"需要注意的是，ThreadLocal 适用于单个线程内部共享数据，而不适合在不同线程之间传递数据。此外，使用 ThreadLocal 时需要注意及时清除数据，否则可能会出现内存泄漏等问题。\",\"ThreadLocal 是一种线程本地存储的机制，它可以为每个线程维护一个独立的变量副本。因此，当多个线程访问同一个 ThreadLocal 变量时，它们看到的值是不同的。在一个 Web 应用程序中，每个请求都由一个独立的线程处理，因此可以将用户信息存储在 ThreadLocal 中，以便在整个请求处理过程中都可以访问这些信息，而不必将这些信息存储在 Session 中。\",\"实现：参考京东，在点击购物车时，会为临时用户生成一个name为user-key的cookie临时标识，过期时间为一个月，如果手动清除user-key，那么临时购物车的购物项也被清除，所以user-key是用来标识和存储临时购物车数据的\",\"解决：搞个拦截器（TODO：不知道能用AOP实现不，弹幕说执行太晚了面试官：拦截器跟过滤器有什么区别） 前后端分离的话，是用token，其实你登没登录，只要看前端能不能获取到token就行了\",\"场景：com.zzq.gulimall.cart.intercept.CartIntercept XD: SpringBoot的拦截器HandlerInterceptor + Threadlocal\",\" 判断用户登录状态，把购物车临时用户 / 登录用户放到 Threadlocal 里 \",\"过滤器和拦截器是两种不同的Web请求处理机制。\",\"过滤器：是在请求和响应被发送到服务器之间执行的，用于检查请求和响应，可以修改请求和响应内容。（1.场景学JSP的时候好像把请求的编码统一改成UTF-8。。。。。2.学SpringSecurity的时候用来校验 Token 并把用户信息放到指定class里面）\",\"拦截器：是在请求被发送到服务器之前和服务器处理请求之后执行的，可以拦截请求，并在请求到达服务器之前进行预处理。（使用场景看下面笔记 1.fegin源码 cookie丢失。。。2.Threadlocal 判断用户是否登陆）\",\"简而言之，过滤器主要用于请求和响应的修改，而拦截器主要用于请求的拦截和预处理。\",\"从灵活性上说拦截器功能更强大些，Filter能做的事情，他都能做，而且可以在请求前，请求后执行，比较灵活。Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），太细的话，还是建议用interceptor。不过还是根据不同情况选择合适的。但是Aspect能够做到方法级更细的操作。\",\"ChatGPT：通俗来说过滤器和拦截器的区别：\",\"过滤器和拦截器是用于对Web请求进行预处理和后处理的不同技术。\",\"区别：\",\"执行位置：过滤器在请求被路由之前执行，拦截器在请求被路由后执行。\",\"执行顺序：过滤器可以定义执行顺序(学SpringSecurity配置 http.addFilterBefore)，拦截器按照配置顺序执行。\",\"功能：过滤器可以对请求数据进行预处理，拦截器可以对请求结果进行后处理。\",\"231115 回顾\",\"什么时候用过滤器什么时候用拦截器\",\"在软件开发中，使用过滤器(Filter)或拦截器(Interceptor)取决于具体的需求和应用场景。虽然它们都可以用于处理请求和响应，但它们在功能和使用方式上有一些区别。\",\"过滤器适合于以下情况：\",\"请求和响应的处理流程较为简单，不需要涉及复杂的业务逻辑。\",\"需要对请求进行预处理或对响应进行后处理，例如数据转换、验证、日志记录等。\",\"需要在请求到达业务处理之前或响应返回给客户端之前进行干预。\",\"需要在整个应用程序中统一应用某种处理逻辑。\",\"拦截器适合于以下情况：\",\"需要对请求和响应进行更细粒度的拦截和处理。\",\"需要在业务处理的前后进行额外的操作，例如事务管理、异常处理、权限控制等。\",\"需要在不同层级的组件之间进行交互和协调，例如在控制器(Controller)和服务(Service)之间进行拦截和处理。\",\"需要在多个请求之间共享或传递特定的上下文信息。\",\"总的来说，过滤器适用于较为简单和统一的处理逻辑，而拦截器适用于更灵活和复杂的处理需求。根据具体的应用架构和需求，可以综合考虑使用过滤器和拦截器来满足功能和性能的要求。\",\"不清楚的点：\",\"拦截器可以处理响应。拦截器通常用于在请求处理的前后进行额外的操作，包括对请求的预处理和对响应的后处理。在后处理阶段，拦截器可以对生成的响应进行修改、添加额外的信息或执行其他相关操作。\",\"以下是一些拦截器处理响应的典型使用场景：\",\"响应数据格式化：拦截器可以对返回的数据进行格式化，例如将数据转换为特定的格式（如JSON、XML）或进行数据加工。\",\"响应结果的处理：拦截器可以检查响应结果，根据特定条件对结果进行处理，例如对结果进行筛选、排序或分页。\",\"响应的日志记录：拦截器可以记录响应的详细信息，如响应状态码、响应时间、返回的数据等，以用于后续的分析和监控。\",\"响应的异常处理：拦截器可以捕获响应过程中发生的异常，并进行统一的异常处理、错误日志记录或错误页面的返回。\",\"拦截器使用场景：1）这里判断用户状态信息，是否登录再决定要不要放行。\",\"​ 2）Feign远程调用丢失请求头：订单模块的 Feign 源码会自动创 Request 导致丢失 Cookie。而底层自创的时候用到拦截器增强（即DIY 个拦截器把原Requset Cookie放新Request） 解决重点：Spring类 RequestContextHolder\",\"拦截器拦完后，想要快速得到用户信息（to对象）：id,user-key 即截器定义好了，将来怎么把拦截器中获取的用户信息传递给后续的每个业务逻辑：\",\"后续的每个业务逻辑也可以从 Redis 中直接获取用户信息，但是这样会增加 Redis 的访问次数，对系统性能造成影响。为了提高系统的响应速度，建议将用户信息存储到 ThreadLocal 中，并在业务逻辑中直接从 ThreadLocal 中获取用户信息，以避免频繁地访问 Redis。\",\"public类型的公共变量。线程不安全\",\"request对象。不够优雅\",\"ThreadLocal线程变量。推荐\",\"/** threadLocals 是 Thread 类的属性之一 1）它是一个 ThreadLocal.ThreadLocalMap 类型的对象，用于存储线程的局部变量。每个线程都有自己的 threadLocals 对象，用于管理该线程的局部变量。 2）threadLocals 字段使用了线程封闭设计模式，确保每个线程都拥有自己独立的局部变量存储空间，避免了线程之间的数据共享和冲突。 3）threadLocals 字段的类型为 ThreadLocal.ThreadLocalMap。它是 ThreadLocal 类的内部类，用于存储 ThreadLocal 实例和对应的局部变量值的映射关系。 通过 threadLocals 字段，每个线程可以维护自己的局部变量，并且线程之间的局部变量不会相互干扰。 需要注意的是，threadLocals 字段是 Thread 类的实例级别字段，每个线程对象都有自己的 threadLocals 对象。这意味着每个线程都可以独立地管理和访问其自己的局部变量。 */ public class Thread implements Runnable { /* ... */ /* ThreadLocal values pertaining to this thread. This map is maintained * by the ThreadLocal class. */ ThreadLocal.ThreadLocalMap threadLocals = null; /* ... */ } \",\"注意：java.lang.ThreadLocal 是一个类，用泛型来放我们的TO对象 public static ThreadLocal<MemberResponseVo> loginUser = new ThreadLocal<>();\",\"​ tomcat多线程接收请求，这个点不知道的话，整个过程内心会充满疑问的 同一个线程共享。其他用户是其他线程\",\"​\"]},\"157\":{\"h\":\"\",\"t\":[\"具体结合 title link 一起看，还有下面自己的文中 link\",\"订单确认页需要feign拿用户地址、购物车数据都需用户数据这个ThreadLocal\",\"为什么用它，它有什么优势，简单来说有两点\",\"无锁化提升并发性能\",\"简化变量的传递逻辑\",\"文中多个不同线程拿用户信息是通过 InheritableThreadLocal\",\"Gulimall的时候雷神好像是用的拦截器，每次请求进来从spring session(redis)拿封装给ThreadLocal。现在不确定的点是拦截/**是不是也可把远程Feign的拦下来？(如可以那这也算种做法吧)\",\"Q：preHandle可以拦截fegin的请求吗\",\"A：是的，preHandle方法可以拦截Feign的请求。Feign是基于HTTP客户端的声明式Web服务客户端，通过拦截器可以对Feign发送的请求进行拦截。preHandle方法是在请求发送之前被调用，因此可以在该方法中对请求数据进行处理或修改。\",\"问题场景：ware远程调用订单（有拦截器），请求头没有登录消息被拦截，应该放行\",\"解决：订单的拦截器使用new AntPathMatcher().match(“放行路径”，目标路径)\",\"2）Feign异步情况丢失上下文问题\",\"突然发现他是 RequestContextHolder 来解决异步编排会丢失 ThreadLocal\",\"发现上面说的并不是这么回事，拦截器只是针对每一个请求\",\"Q: RequestContextHolder解决CompletableFuture丢失ThreadLocal\",\"RequestContextHolder是Spring框架提供的一个用于保存请求上下文的工具类，可以用来解决CompletableFuture丢失ThreadLocal的问题。\",\"通过将请求上下文存储到RequestContextHolder中，在CompletableFuture执行时可以在需要的地方访问请求上下文。\",\"代码示例：\",\"public CompletableFuture<String> asyncMethodWithContext() { RequestContext context = RequestContextHolder.currentRequestAttributes(); return CompletableFuture.supplyAsync(() -> { RequestContextHolder.setRequestAttributes(context); // access to context here return \\\"Result of async method\\\"; }); } \",\"在上面的代码中，通过RequestContextHolder.currentRequestAttributes()\",\"Q: InheritableThreadLocal解决CompletableFuture丢失ThreadLocal\",\"InheritableThreadLocal是Java提供的一个用于在父线程和子线程之间传递ThreadLocal变量值的工具类，可以用来解决CompletableFuture丢失ThreadLocal的问题。\",\"通过使用InheritableThreadLocal，在父线程中设置的ThreadLocal变量值会被子线程继承。\",\"代码示例：\",\"javaCopy codepublic class Context { private static final InheritableThreadLocal<Map<String, Object>> context = new InheritableThreadLocal<Map<String, Object>>() { @Override protected Map<String, Object> childValue(Map<String, Object> parentValue) { return new HashMap<>(parentValue); } }; public static void set(String key, Object value) { context.get().put(key, value); } public static Object get(String key) { return context.get().get(key); } public static void remove() { context.remove(); } } public CompletableFuture<String> asyncMethodWithContext() { Map<String, Object> context = Context.context.get(); return CompletableFuture.supplyAsync(() -> { Context.context.set(context); // access to context here return \\\"Result of async method\\\"; }); } \",\"在上面的代码中，通过Context.context.get()获取父线程的Context，并在子线程中使用Context.context.set(context)将该Context设置为子线程的Context，从而实现在子线程中访问请求上下文。\",\"!!! ThreadLocal 记得回收\",\"ThreadLocal内存泄漏问题与线程的创建方式没有直接的关联。 需要注意的是，使用线程池的情况下，由于线程是被重用的，可能会导致ThreadLocal中的数据在多个任务之间共享。这可能会引发意料之外的问题\",\"ThreadLocalMap中使用的 key 为ThreadLocal 的弱引用,而 value 是强引用\",\"具体来说，如果在线程执行过程中，使用ThreadLocal存储了一些对象或数据，并且没有在线程执行结束后手动清理ThreadLocal变量，那么这些对象或数据将会一直被ThreadLocal持有，无法被垃圾回收，从而导致内存泄漏。\",\"ThreadLocal对象之后,手动调用ThreadLocal的remove方法,手动清除Entry对象\",\"在拦截器中设置ThreadLocal的值，在请求处理完成后进行清理操作\",\"public class LoginInterceptor implements HandlerInterceptor { private static ThreadLocal<UserInfo> userInfoThreadLocal = new ThreadLocal<>(); @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { // 在拦截器中设置ThreadLocal的值 UserInfo userInfo = retrieveUserInfoFromRequest(request); userInfoThreadLocal.set(userInfo); return true; } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { // 在请求处理完成后进行清理操作 userInfoThreadLocal.remove(); } } \",\"自己的MQ笔记\"]},\"158\":{\"h\":\"1.模块介绍\",\"t\":[\"比较复杂且重要：需要多模块查询检索 复杂的流程调用，具体看 PDF 结算的Service是我看过的最繁琐的\",\"电商系统涉及到3流，分别是信息流，资金流，物流，而订单系统作为中枢将三者有机的集合起来。\",\"信息流：商品信息、优惠信息\",\"资金流：退款、付款\",\"物流：发送、退货\",\"订单模块是电商系统的枢纽，在订单这个环节上需求获取多个模块的数据和信息，同时对这些信息进行加工处理后流向下个环节，这一系列就构成了订单的信息流通。\"]},\"159\":{\"h\":\"2.Feign 两个问题\",\"t\":[\"看两张图特别清楚，涉及到 Feign 的底层逻辑要看个大概\"]},\"160\":{\"h\":\"1）Feign远程调用丢失请求头问题\",\"t\":[\"场景：Feign 源码会自创 Request 导致丢失老Request Cookie，而自创的时候用到拦截器增强 解决：即可DIY个拦截器把原Requset Cookie放新Request 解决重点：Spring类 RequestContextHolder\"]},\"161\":{\"h\":\"\",\"t\":[\"场景：RequestContextHolder 也是通过 ThreadLocal 拿数据，就会每个线程都不一样（异步编排会丢失 ThreadLocal）\",\"解决：主线程 RequestContextHolder.getRequestAttributes(); 其它两个线程 RequestContextHolder.setRequestAttributes(requestAttributes);\",\"知道 Thread.class 属性有 ThreadLocalMap 这样就好理解了 具体看title link\",\"image-20230116105631702\",\"PS：Feign 源码暂时掠过了，其实想看一下自己new request、set过滤器增强的地方\"]},\"162\":{\"h\":\"\",\"t\":[\"面试这里是高频考点，认真听！！！！！！！\",\"说白了幂等性设计就是：通过 redis 或者数据库唯一键\"]},\"163\":{\"h\":\"1）前言\"},\"164\":{\"h\":\"哪些情况需要防止：\",\"t\":[\"用户多次点击按钮\",\"用户页面回退再次提交\",\"微服务互相调用，由于网络问题，导致请求失败。feign触发重试机制\",\"其他业务情况 例如update tab1 set col1=col1+1 where col2 = 2，每次执行结果不一样\"]},\"165\":{\"h\":\"天然幂等性：\",\"t\":[\"查询接口\",\"更新接口update tab1 set col1=1 where col2=2\",\"delete from user where userId = 1\",\"insert user(userId, name) values(1, 'wan')，其中userId为主键\"]},\"166\":{\"h\":\"2）解决方案\"},\"167\":{\"h\":\"2.1 token令牌机制\",\"t\":[\"服务器存储了一个令牌，页面请求时要带上令牌，服务器接收请求后会匹配令牌，匹配成功则删除令牌（再次提交则匹配失败，服务器已删除令牌。但是F5刷新的话就不一样了，会有新的token产生）\",\"注意： 1.删除令牌要在执行业务代码之前 2.获取redis令牌、令牌匹配、令牌删除要保证原子性（lua脚本）\",\"场景：好像是 注册时候验证码页面\",\"服务器Redis 放一个，页面放一个这里是放一个hidden的input里面 TODO：这不是可以刷新重复提交吗 : 理解刷新会覆盖，然后再一和redis如果还在的一比对就发现不对！\"]},\"168\":{\"h\":\"2.2 各种锁机制\"},\"169\":{\"h\":\"2.2.1.数据库悲观锁\",\"t\":[\"随着互联网三高架构（高并发、高性能、高可用）的提出，悲观锁已经越来越少的被使用到生产环境中了，尤其是并发量比较大的业务场景。\",\"使用 select * from xxx where id = 1 for update; 查询的时候锁定该条数据\",\"//0.开始事务 begin; //1.查询出商品库存信息 select quantity from items where id=1 for update; //2.修改商品库存为2 update items set quantity=2 where id = 1; //3.提交事务 commit; \",\"以上，在对id = 1的记录修改前，先通过for update的方式进行加锁，然后再进行修改。这就是比较典型的悲观锁策略。\",\"注意： 悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用。 id字段一定是主键或者唯一索引，不然可能造成锁表的结果，处理起来会非常麻烦。\"]},\"170\":{\"h\":\"2.2.2.数据库乐观锁【带上版本号】\",\"t\":[\"这种方法适合在更新的场景中 update t_goods set count = count-1,version =version + 1 where good_id=2 and version = 1 根据version版本，也就是在操作库存前先获取当前商品的version版本号，然后操作的时候带上此version号。 第一次操作库存时，得到version为1，调用库存服务version变成了2﹔但返回给订单服务出现了问题，订单服务又一次发起调用库存服务，当订单服务传的version还是1，再执行上面的sal语句时，就不会执行﹔因为version已经变为2了，where条件就不成立。这样就保证了不管调用几次，只会真正的处理一次。 乐观锁主要使用于处理读多写少的问题\"]},\"171\":{\"h\":\"2.2.3.分布式锁：(TODO 不太理解 XD:20240320再学Redisson理解了)\",\"t\":[\"​ 例如集群下多个定时器处理相同的数据，可以加分布式锁，锁定此数据，处理完成后释放锁。获取到锁的必须先判断这个数据是否被处理过（double check）\"]},\"172\":{\"h\":\"2.3 各种唯一约束\",\"t\":[\"1.数据库唯一约束 order_sn字段【数据库层面】\",\"2.redis set防重【百度网盘秒传功能】 需要处理的数据 计算MD5放入redis的set，每次处理数据，先看MD5是否存在，存在就不处理\"]},\"173\":{\"h\":\"2.4 防重表\",\"t\":[\"数据库创建防重表，插入成功才可以操作【不采用，DB慢】 使用订单号orderNo作为去重表唯一索引，然后将数据插入去重表+业务操作 放在同一事物中，如果插入失败事物回滚导致业务操作也同时回滚，（如果业务操作失败也会导致插入去重表回滚）保证了数据一致性\"]},\"174\":{\"h\":\"2.5 全局唯一id\",\"t\":[\"全局请求唯一id：Fegin重复请求会带上老的id去（感觉是Token的感觉），弹幕中很多人公司是这么做的\",\"调用接口时，生成一个唯一ID，redis将数据保存到集合中（去重），存在即处理过\",\"情景1：feign调用 生成一个请求唯一ID，A调用B时带上唯一ID，B处理feign请求时判断此唯一ID是否已处理（feign重试时会带上相同ID）\",\"情景2：页面请求 可以使用nginx设置每一个请求的唯一id，proxy_set_header X-Request-ld $request_id; 【链路追踪】但是没办法保证请求幂等性，因为每次请求nginx都会生成一个新的ID\"]},\"175\":{\"h\":\"\"},\"176\":{\"h\":\"4.1.本地事务问题\",\"t\":[\"@Transactional 是本地事务，Fegin 调用的是远程服务 即需要分布式事务\",\"本地事务：在分布式系统 只能控制住自己的回滚，控制不了其他服务的回滚（同一个数据库&连接）\",\"分布式事务：最大原因 网络问题+分布式机器（不同数据库）\",\"实现：抛异常来使整个 @Transactional 回滚\",\"问题：执行成功的远程Feign调用的服务肯定不会回滚了 这里所库存是Fegin，创订单是本方法。如出异常订单库不会创建但是库存表会锁\",\"假失败：Feign Read Out time 但实际执行成功，可能就只是由于网络抖动造成没及时返回\",\"ps：都会导致 订单回滚但是下面Feign调用的不会回滚\"]},\"177\":{\"h\":\"4.2.事务的两大属性-本地事务隔离级别&传播行为\",\"t\":[\"针对 @Transactional 就是 propagation、isolation\"]},\"178\":{\"h\":\"4.2.1.传播行为\",\"t\":[\"事务的传播行为:一个方法运行在了一个开启了事务的方法中时,当前方法是使用原来的事务还是开启一个新的事务\",\"XD: 就是开启的 @Transactional 的方法里面调用的另外的方法也用了 @Transactional (以下例子视频 Link)\",\"注意：看了视频，以下两个方法分别属于不同的类\",\"@Transactional(isolation = Isolation.READ_COMMITTED) //设置事务的隔离级别 @Transactional(propagation = Propagation.REQUIRED) //设置事务的传播级别，默认值就是这个 Propagation.REQUIRES_NEW /*将原来的事务挂起,开启一个新的事务 记一下，这两个就行*/ @Transactional method01{ /*前置：账户余额只有买一本书，现在方法调用要买两本 */ for bookShopService.purchase(); //1001、1002 两本书 } /* * REQUIRES_NEW： * 1）开启这个事务会成功买上一本，不开则都不成功。。 * 2）买1001、1002都是新事务，与上面的互不影响 * * REQUIRED：都会用父method01的事务，两次买都会失败（事务原子性回滚） */ @Transactional(propagation = Propagation.REQUIRES_NEW) purchase{ buyBook } \",\"😡TODO：事务的7大传播行为：传播行为那里，防止本地事务失效 默认是 required\",\"分析 Maven 依赖发现：可能知道会有本地事务失效的问题，搞个AOP给你去代理解决\",\"org.springframework.cloud:spring-cloud-starter-openfeign:2.1.3.RELEASE\",\"带了\",\"org.springframework.boot:spring-boot-starter-aop:2.1.8.RELEASE\"]},\"179\":{\"h\":\"\",\"t\":[\"My：方便本类方法互调！好像是用AOP的aspectJ实现同一个服务的不同方法用不同事务，不然默认都是用同一个事务\",\"Why：在同一个类里面，编写两个方法，内部调用的时候，会导致事务设置失效。原因是没有用到 代理对象 的缘故。\",\"Spring的声明式事务本质上是通过AOP来增强了类的功能\",\"本质在这个类上的方法在执行前后开启了事务\",\"Spring的AOP本质上就是为类做了一个代理\",\"看似在调用自己写的类,实际用的是增强后的代理类\",\"问题的解法\",\"访问增强后的代理类的方法,而非直接访问自身的方法\",\" /** * 本地事务失效问题 * 同一个对象内事务方法互调默认失效,原因绕过了代理对象,事务使用代理对象来控制的 * 解决:使用代理对象来调用事务方法 * 1)、引入aop-starter;spring-boot-starter-aop;引入了aspectj * 2)、@EnableAspectJAutoProxy(exposeProxy=true);开启aspectJ动态代理功能.以后所有的动态代理都是aspectJ（即使没有接口也可以创建动态代理） 对外暴露代理对象 * 3)、本类互调用调用对象 * OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy(); * orderService.b(); * orderService.c(); */ //同一个对象内事务方法互调默认失效,原因绕过了代理对象 //事务使用代理对象来控制的 @Transactional(timeout=30)//a事务的所有设置就传播到了和他公用一个事务的方法 public void a(){ //b,c做任何设置都没用.都是和α公用一个事务 只相当于是把b()c()的代码放过来了 MY:这样bc的@Transactional失效 //this.b();//没用 //this.c();//没用 //OrderServiceImpl is YourClassName 通过使用AopContext.currentProxy()方法来获取代理对象，并通过代理对象调用methodB方法，可以确保methodB方法被AOP代理捕获，从而使得事务注解生效。 //需要注意的是，使用AopContext.currentProxy()方法需要确保Spring的exposeProxy属性设置为true，以便让Spring能够在当前线程中暴露代理对象。@EnableAspectJAutoProxy(exposeProxy=true);这里没用Spring默认的AOP（JDK / CGLib） OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy(); orderService.b(); orderService.c(); int i = 10/0; } //这里是REQUIRED所以后面的timeout等设置都没用，会跟着a()的来 30 @Transactional(propagation= Propagation.REQUIRED,timeout=2) public void b(){} //7s @Transactional(propagation = Propagation.REQUIRES_NEW,timeout = 2) public void c() {} \",\"为什么会失效呢？其实原因很简单，Spring在扫描Bean的时候会自动为标注了@Transactional注解的类生成一个代理类（proxy）,当有注解的方法被调用的时候，实际上是代理类调用的，代理类在调用之前会开启事务，执行事务的操作，但是同类中的方法互相调用，相当于this.B()，此时的B方法并非是代理类调用，而是直接通过原有的Bean直接调用，所以注解会失效。\",\"默认的事务传播属性是Propagation.REQUIRED\",\"后来补充：因为看了上面笔记 REQUIRES_NEW 以为是同一个类的两个方法 看了视频后发现不是。。。仍不知道以下是否成立\",\"TODO：是否也能通过 @Transactional(propagation = Propagation.REQUIRES_NEW) 解决\",\"同一个对象内事务方法互调默认失效可以通过代理对象调用解决，是否也可以通过@Transactional(propagation = Propagation.REQUIRES_NEW) 设置事务的传播行为解决\",\"是的，您可以通过使用@Transactional(propagation = Propagation.REQUIRES_NEW)注解来设置事务的传播行为，以解决同一个对象内事务方法互调时默认失效的问题。\",\"当一个事务方法（例如method01）内部调用同一个对象的另一个事务方法（例如purchase）时，默认情况下，Spring事务管理器会忽略内部方法的事务设置，而沿用外部方法的事务。这意味着内部方法的事务设置将被忽略，事务行为将按照外部方法的事务来执行。\",\"为了解决这个问题，可以在内部方法上使用@Transactional(propagation = Propagation.REQUIRES_NEW)注解。这将使内部方法在一个新的事务中运行，而不受外部方法事务的影响。当内部方法调用完成后，外部方法的事务会继续执行。\",\"下面是示例代码：\",\"@Transactional public void method01() { // 事务A bookShopService.purchase(); // 事务B } @Transactional(propagation = Propagation.REQUIRES_NEW) public void purchase() { // 事务B的逻辑 } \",\"在上面的代码中，method01方法标记了@Transactional注解，表示它运行在一个事务（事务A）中。而purchase方法标记了@Transactional(propagation = Propagation.REQUIRES_NEW)注解，表示它运行在一个新的事务（事务B）中。\",\"当method01方法调用bookShopService.purchase()时，purchase方法将在一个新的事务B中执行，独立于外部方法的事务A。如果在purchase方法内部发生异常，只会回滚事务B，而事务A将不受影响。\",\"通过设置事务的传播行为为Propagation.REQUIRES_NEW，您可以解决同一个对象内事务方法互调时默认失效的问题。这样，内部方法的事务设置将得到正确的应用，并且可以独立于外部方法的事务运行。\"]},\"180\":{\"h\":\"4.2.2.隔离级别\"},\"181\":{\"h\":\"\"},\"182\":{\"h\":\"4.2.3.补充\",\"t\":[\"@Transactional失效大概列举几种情况，仅供参考；\",\"直接new出来的对象添加事务不起作用，因为只有spring定义的bean才接受事务。（XD：既然要享受Spring的好处，那就得是Spring）\",\"由于mysql的引擎用Myisam不支持事务，所以如果使用mysal的myisam引擎的话，事务不起作用。\",\"如果@Transaction注解到非public方法上，事务不起作用，这是因为spring的AOP特性。\",\"当@Transactional注解应用于非public方法时，Spring的AOP代理机制默认只会代理public方法。这是因为Spring使用基于代理的AOP来实现事务管理，默认使用的是JDK动态代理或CGLIB代理。JDK动态代理只能代理实现接口的类的方法，而CGLIB代理可以代理任何类的方法。但无论是JDK动态代理还是CGLIB代理，它们都无法代理非public方法。因此，如果你将@Transactional注解应用于非public方法，事务将不会起作用。\",\"如果在当前类中进行内部调用方法，比如在A类中有a方法和b方法，a方法没有加@Transaction，b方法加了@Transaction，在方法a中调用方法b，方法b中的事务也不会生效。这是因为spring在扫描bean的时候会自动为标注了@Transaction注解类生成一个代理类，在有注解方法被调用时，实际上是代理类调用的，代理类在调用之前会开启事务，执行事务操作。但是同类中的方法相互调用，相当于this.b（），此时的b方法并非代理类调用，而是直接通过原有的bean直接调用，所以注解不起作用。\",\"异常类型错误，如果抛出的 RuntimeException及其子类 事务才会回滚。XD：（废话）不是废话，看下面例子\",\"if (account.getBalance().compareTo(amount) < 0) { throw new IOException(\\\"Insufficient balance\\\"); // 抛出已检查异常 } \",\"如果异常被catch到，必须要抛出异常，事务才会回滚。\",\"GPT：\",\"Spring AOP默认使用的是JDK动态代理或CGLIB代理吗？ 为什么不能代理非public方法？ aspectJ可以代理非public方法吗？\",\"默认情况下，Spring AOP 使用 JDK 动态代理来生成代理对象。JDK 动态代理是基于接口的代理，它通过运行时生成代理对象的方式来实现对目标对象方法的拦截和增强。\",\"Spring AOP 也支持使用 CGLIB 代理，当目标对象没有实现接口时，会自动切换到使用 CGLIB 代理。CGLIB 代理是基于继承的代理，它通过生成目标对象的子类来实现对方法的拦截和增强。\",\"关于代理非public方法的问题，这涉及到 JDK 动态代理和 CGLIB 代理的限制。\",\"JDK 动态代理只能代理实现了接口的目标对象，并且只能代理接口中定义的方法。它无法代理目标对象中的非 public 方法，因为接口中的方法默认为 public，而非 public 方法在接口中是不可见的。\",\"==CGLIB 代理可以代理目标对象中的非 public 方法，因为它是通过生成目标对象的子类来实现代理的，子类可以访问父类的非 public 方法。==但是，CGLIB 代理也有一个限制，就是无法代理被 final 关键字修饰的方法，因为 final 方法无法被子类重写。\",\"关于 AspectJ，它是一个独立的 AOP 框架，与 Spring AOP 有所不同。AspectJ 可以代理非 public 方法，因为它在编译时织入切面，直接修改字节码。AspectJ 可以实现更强大的切面功能，包括对非 public 方法的拦截和增强。\",\"总结起来，Spring AOP 默认使用 JDK 动态代理，无法代理非 public 方法。如果需要代理非 public 方法或使用更强大的切面功能，可以考虑使用 AspectJ。\"]},\"183\":{\"h\":\"\",\"t\":[\"后面补充：（前言）：JavaGuide-《Java面试指北》-服务治理：分布式事务解决方案有哪些？这一篇讲的真好，真细致！！！🤺🤺🤺\",\"微服务架构下，一个系统被拆分为多个小的微服务。每个微服务都可能存在不同的机器上，并且每个微服务可能都有一个单独的数据库供自己使用。这种情况下，一组操作可能会涉及到多个微服务以及多个数据库。举个例子：电商系统中，你创建一个订单往往会涉及到订单服务（订单数加一）、库存服务（库存减一）等等服务，这些服务会有供自己单独使用的数据库。\",\"那么如何保证这一组操作要么都执行成功，要么都执行失败呢？\",\"这个时候单单依靠数据库事务就不行了！我们就需要引入 分布式事务 这个概念了！\",\"实际上，只要跨数据库的场景都需要用到引入分布式事务。比如说单个数据库的性能达到瓶颈或者数据量太大的时候，我们需要进行 分库。分库之后，同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。\",\"一言蔽之，分布式事务的终极目标就是保证系统中多个相关联的数据库中的数据的一致性！\",\"那既然分布式事务也属于事务，理论上就应该准守事物的 ACID 四大特性。但是，考虑到性能、可用性等各方面因素，我们往往是无法完全满足 ACID 的，只能选择一个比较折中的方案。\",\"针对分布式事务，又诞生了一些新的理论。 分布式事务基础理论 ---> CAP 理论和 BASE 理论\",\"分布式每个服务用自己的数据库，每个服务放的机器还不一样 一个机器的成功失败，别的节点无法感知\",\"分布式系统经常出现的异常 机器宕机、网络异常、消息丢失、消息乱序、数据错误、不可靠的 TCP、存储数据丢失...\",\"CAP & BASE & Seata with My 建议结合自己的这篇Seata笔记看，更了解 2PC\",\"刚性事务（强一致性） vs 柔性事务（最终一致性）\",\"这里具体看 PDF！注意方案是方案框架是框架（落地实现这个方案） ✔是高并发优先考虑的，用MQ 订单用异步确保型/商品保存可2PC\",\"实际上，柔性事务就是 BASE 理论 +业务实践 柔性事务追求的是最终一致性。\",\"2PC（Seata AT事务模式是这个的一个变形）还有3PC 【2 phase commit 二阶提交】 准备阶段+提交阶段 注意和MySQL写日志的两阶段提交区分，是不一样的东西。Seata AT是第一阶段提交+2第二阶段看要不要补偿-2 只适合一般的分布式事务不合适高并发 虽然它有补偿机制，但他就是刚性事务\",\"柔性事务-TCC 事务补偿型方案：相当于3PC的手动版 【TCC 是 Try、Confirm、Cancel 三个词的缩写，它分为三个阶段】 商城项目用的很多，也有很多框架给你去用。把正常的业务代码按照框架要求拆成z和三部分就行 Try+2/add Cancel-2/delete\",\"柔性事务-最大努力通知型方案（弹幕有公司是这个）✔ 支付宝告诉你有没有支付成功，MQ 一会发个消息告诉你成了 一会发个消息告诉你成了\",\"柔性事务-可靠消息+最终一致性方案（异步确保型，视频是这个）✔ 也是借助 MQ 总结一句：异步下单，提高并发，提升响应，提升购物体验。\"]},\"184\":{\"h\":\"后来补充-总结两者：\",\"t\":[\"2PC/3PC 依靠数据库或者存储资源层面的事务（XD: Seata好像借助了表），TCC 主要通过修改业务代码来实现。\",\"2PC/3PC 属于业务代码无侵入的，TCC 对业务代码有侵入。\",\"2PC/3PC 追求的是强一致性，在两阶段提交的整个过程中，一直会持有数据库的锁。TCC 追求的是最终一致性，不会一直持有各个业务资源的锁。\"]},\"185\":{\"h\":\"2PC 看Seata那篇\"},\"186\":{\"h\":\"TCC 补充：\",\"t\":[\"TCC 属于目前比较火的一种柔性事务解决方案\",\"简单来说，TCC 是 Try、Confirm、Cancel 三个词的缩写，它分为三个阶段：\",\"Try（尝试）阶段 : 尝试执行。完成业务检查，并预留好必需的业务资源。\",\"Confirm（确认）阶段 ：确认执行。当所有事务参与者的 Try 阶段执行成功就会执行 Confirm ，Confirm 阶段会处理 Try 阶段预留的业务资源。否则，就会执行 Cancel 。\",\"Cancel（取消）阶段 ：取消执行，释放 Try 阶段预留的业务资源。\",\"每个阶段由业务代码控制，这样可以避免长事务，性能更好。\",\"我们拿转账场景来说：\",\"Try（尝试）阶段 : 在转账场景下，Try 要做的事情是就是检查账户余额是否充足，预留的资源就是转账资金。\",\"Confirm（确认）阶段 ： 如果 Try 阶段执行成功的话，Confirm 阶段就会执行真正的扣钱操作。\",\"Cancel（取消）阶段 ：释放 Try 阶段预留的转账资金。\",\"一般情况下，当我们使用TCC模式的时候，需要自己实现 try, confirm, cancel 这三个方法，来达到最终一致性。\",\"正常情况下，会执行 try, confirm 方法。\",\"出现异常的话，会执行 try, cancel 方法。\",\"Try 阶段出现问题的话，可以执行 Cancel。那如果 Confirm 或者 Cancel 阶段失败了怎么办呢？\",\"TCC 会记录事务日志并持久化事务日志到某种存储介质上比如本地文件、关系型数据库、Zookeeper，事务日志包含了事务的执行状态，通过事务执行状态可以判断出事务是提交成功了还是提交失败了，以及具体失败在哪一步。如果发现是 Confirm 或者 Cancel 阶段失败的话，会进行重试，继续尝试执行 Confirm 或者 Cancel 阶段的逻辑。重试的次数通常为 6 次，如果超过重试的次数还未成功执行的话，就需要人工介入处理了。\",\"如果代码没有特殊 Bug 的话，Confirm 或者 Cancel 阶段出现问题的概率是比较小的。\",\"事务日志会被删除吗？ 会的。如果事务提交成功（没有抛出任何异常），就可以删除对应的事务日志，节省资源。\",\"TCC 模式不需要依赖于底层数据资源的事务支持，但是需要我们手动实现更多的代码，属于 侵入业务代码 的一种分布式解决方案。\",\"TCC 事务模型的思想类似 2PC，我简单花了一张图对比一下二者。\"]},\"187\":{\"h\":\"5.RabbitMQ延时队列(实现定时任务)\",\"t\":[\"MQ笔记\",\"该业务的MQ架构图\"]},\"188\":{\"h\":\"6.解锁库存\",\"t\":[\"看着有些繁琐，直接 CV ，没有去捋了\"]},\"189\":{\"h\":\"7.支付\",\"t\":[\"以后有空可以试着做做微信的！项目代码中他做了！！！可以参考\"]},\"190\":{\"h\":\"7.1.前言\",\"t\":[\"用的是支付宝的沙盒，测试时候这个通了正式环境改个参数就行\",\"签名可以想象为 MD5 稍微变动就变\",\"支付宝私钥是肯定不知道的\",\"image-20230202110044964\"]},\"191\":{\"h\":\"7.2.使用\",\"t\":[\"具体想体验深一点可以下载ali的model有几个jsp页面和一个配置类，导入Eclipse进行测试。这个model有很多东西可以抽出来用。\",\"雷神自己根据 ali 的 model 封装了一个AlipayTemplate 使用就 alipayTemplate.pay(payVo) 完成！其它全是配参数\"]},\"192\":{\"h\":\"7.2.1.异步回调\",\"t\":[\"我这里由于没有用内网穿透暂且搁置\",\"不建议在同步回调直接修改订单状态，推荐在异步回调的时候修改订单状态 因为：支付成功后url? 后会带签名等信息给你去验证。但是用户可能没进这个成功页面\",\"// 服务器[异步通知]页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 // 支付宝会悄悄的给我们发送一个请求，告诉我们支付成功的信息 public String notify_url 写一个Controller处理订单状态，最后得 return \\\"success\\\" 不然支付宝服务器还会通知【柔性事务-最大努力通知型方案】 \",\"注意：修改订单状态之前一定要验签！万一别人知道这个请求路径用postman发一个假的数据让你改订单状态能篡改伪造\",\"各位注意:这里老师在配置文件中改时间格式一定用弃用的格式化方式和老师一样，不然会报错，而且贼难找。排了2个多小时。\",\"mvc配时间格式\"]},\"193\":{\"h\":\"7.2.2.收单\",\"t\":[\"pay时候可以根据官网给一个时间参数\",\"时延问题：订单关单的时候手动调用支付宝的收单\",\"也可 搞个定时任务与支付宝对账 这些在ali api中都有示例\"]},\"194\":{\"h\":\"8.内网穿透\",\"t\":[\"支付宝服务器异步回调 验签、改订单状态 时候。肯定需要公网ip才能访问到你\"]},\"195\":{\"h\":\"8.1.原理\",\"t\":[\"说白了就是用内网穿透服务商备案好了的提供给你用 主域名备案好了下面的二级三级就不需要了\"]},\"196\":{\"h\":\"8.2.适用场景\",\"t\":[\"1、开发测试（微信、支付宝）\",\"2、智慧互联 （路由器可以绑花生壳，我没在家也能访问！！！）\",\"3、远程控制 4、私有云\"]},\"197\":{\"h\":\"8.3.服务商\",\"t\":[\"utools也可以内网穿透，我之前用过\",\"1、natapp：https://natapp.cn/ 优惠码：022B93FD（9 折）[仅限第一次使用]\",\"2、续断：www.zhexi.tech 优惠码：SBQMEA（95 折）[仅限第一次使用] 视频中用的这个一个月9块\",\"3、花生壳：https://www.oray.com/\"]},\"198\":{\"h\":\"8.4.我的问题\",\"t\":[\"注意支付成功后的异步回调需要内网穿透和Nginx联调\",\"问题是域名问题 沿用了外网的域名 所以到不了网关\",\"注意：内网穿透后发现F12是下面的，访问也老是404。第二天才发现是clash的问题查了7890的端口 但是改了后还是不行搞了几个小时搞不好\",\"Remote Address: 192.168.0.1:7890\",\"打算一口气看完视频，后期自己根据网友笔记再补代码 跳过\",\"定时任务就参考秒杀系统的定时任务设计 重点看一下秒杀系统设计的那一集\",\"秒杀具有瞬间高并发的特点，针对这一特点，必须要做限流 + 异步+ 缓存（页面静态化）+ 独立部署。\"]},\"199\":{\"h\":\"1. 秒杀（高并发）系统关注的问题\",\"t\":[\"前端限流：点一下要1s后才能再点..\",\"07 保证服务的稳，其它有了快\"]},\"200\":{\"h\":\"2.Quartz\",\"t\":[\"jdk Timer.class 可以做一点定时任务，包括Spring也有自己的定时任务注解。可能实际开发更多的是用框架 Quartz 视频用的就是 Spring 的定时任务\"]},\"201\":{\"h\":\"2.1.cron 表达式\",\"t\":[\"可以使用在线的Cron表达式生成器\",\"语法：秒 分 时 日 月 周 年（Spring 不支持） 日和周的位置至少有个?因为两个制约了\",\"注意周中1代表周日 看pdf的图片\"]},\"202\":{\"h\":\"2.2.Spring 定时任务Demo\",\"t\":[\"/** * 定时任务 * 1、@EnableScheduling 开启定时任务 * 2、@Scheduled开启一个定时任务 * 3、自动配置类 TaskSchedulingAutoConfiguration * * 异步任务 * 1、@EnableAsync:开启异步任务 * 2、@Async：给希望异步执行的方法标注 * 3、自动配置类 TaskExecutionAutoConfiguration * * 思考异步编排和异步任务的区别，这种异步任务不好管理好像也是个Executor * 觉得可以把他当成异步编排，该配置去yaml配。一种手动写代码一种直接注解到方法 */ @Slf4j @Component @EnableAsync @EnableScheduling public class HelloSchedule { /** * 与Quarz Cron的两点区别： * 1、在Spring中表达式是6位组成，不允许第七位的年份 * 2、在周几的的位置,1-7代表周一到周日 MON-SUN（英文标识也行） * * 定时任务不该阻塞。（默认是阻塞的） * 1）、可以让业务以异步的方式，自己提交到线程池 * CompletableFuture.runAsync(() -> { * },execute); * * 2）、支持定时任务线程池；设置 TaskSchedulingProperties （size 默认是1 所以才会阻塞） * spring.task.scheduling.pool.size: 5 【雷神说这个不好使，有bug】 * * 3）、让定时任务异步执行 * 异步任务 * * 解决：使用异步任务 + 定时任务来完成定时任务不阻塞的功能 * 注意：这两者都有其线程池，注意要配置 */ @Async @Scheduled(cron = \\\"*/5 * * ? * 5\\\") public void hello() throws InterruptedException { log.info(\\\"hello...\\\"); Thread.sleep(3000); } } \",\"加商品随机码 秒杀链接加密，防黄牛 随机码，秒杀开始才暴露\",\"Redisson的信号量 每一个商品都有它的参与秒杀的库存信号量 redissonClient.getSemaphore(SKU_STOCK_SEMAPHORE + token); 信号量最大作用：限流\",\"定时任务上架：TODO 幂等性处理\",\"伪完结：\",\"1）秒杀往后没跟\",\"微服务因为模块很多需要 可以由全自动部署机制独立部署，具体看 martinfowler 的见解！\"]},\"203\":{\"h\":\"Basic\",\"t\":[\"谷粒商城是一个B2C模式的电商平台，销售自营商品给客户\",\"雷神B站教程，分基础、高级、集群三篇。“不要做锤子之神，要做雷霆之神”\",\"接口文档地址 一些业务的实现感觉就挺贴近算法的，自我感觉数据库的设计是最重要的\",\"别人前端代码别人后端代码\",\"Google到的笔记很详细：别人笔记别人代码\",\"最高境界就是数据库设计师和系统架构师\"]},\"204\":{\"h\":\"1. 项目简介\",\"t\":[\"市面上有5种常见的电商模式 B2B、B2C、C2B、C2C、O2O\"]},\"205\":{\"h\":\"1.1 B2B 模式\",\"t\":[\"B2B(Business to Business)，是指商家和商家建立的商业关系，如阿里巴巴 \"]},\"206\":{\"h\":\"1.2 B2C 模式\",\"t\":[\"B2C(Business to Consumer) 就是我们经常看到的供应商直接把商品买个 用户，即 “商对客” 模式，也就是我们呢说的商业零售，直接面向消费销 售产品和服务，如苏宁易购，京东，天猫，小米商城 \",\"etc.\"]},\"207\":{\"h\":\"\",\"t\":[\"image-20220720220817554\",\"image-20220722154237978\"]},\"208\":{\"h\":\"3. 分布式基础概念\",\"t\":[\"常见的负载均衡算法：记一下最后一个！\",\"轮询：为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直到最后一个，然后循环。\",\"最小连接：优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式。\",\"散列：根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到 和之前相同的服务器，可以考虑采取这种方式。\",\"在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我们称为远程调用。 SpringCloud 中使用 HTTP+JSON 的方式完成远程调用、\",\"在这里插入图片描述\",\"根据 官网文档 来安装...\",\"建议看看 菜鸟 的教程入门一下 Docker！！！\",\"因为 DockerHub 是国外网站，可以登录 阿里云 找到容器镜像服务，使用镜像加速器\",\"# 配置镜像加速 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://chqac97z.mirror.aliyuncs.com\\\"] } EOF sudo systemctl daemon-reload sudo systemctl restart docker \",\"小 Tip 值得学习：用 Docker 就参考这个例子！\"]},\"209\":{\"h\":\"1. MySQL\"},\"210\":{\"h\":\"1.1 安装\",\"t\":[\"拉镜像 注意 -v 已经 Docker 我下面的理念理解！\",\"-v 外部:Docker容器内部，以后想改配置到外部的 linux 挂载的文件里改容器也就跟着改了！\",\"理解成 Linux 和 Docker容器（可以理解为一个完整的Linux【容器的 bin/bash 里没有 wget，外面 linux有】）是隔离的，所以需要端口映射目录挂载！！！看图\",\"--- 1 拉去mysql镜像 【其实，run时发现没有pull也会自动pull，所以这步可以省略的】--- docker pull mysql #默认拉最新的 docker pull mysql:5.7 #拉取指定的 --- 2 启动mysql容器 --- # --name指定容器名字 -v目录挂载 -p指定端口映射 -e设置mysql参数 -d后台运行 docker run -p 3306:3306 --name mysql \\\\ -v /mydata/mysql/log:/var/log/mysql \\\\ -v /mydata/mysql/data:/var/lib/mysql \\\\ -v /mydata/mysql/conf:/etc/mysql \\\\ -e MYSQL_ROOT_PASSWORD=123456 \\\\ -d mysql:5.7 #这个 -v 目录挂载经常用，MySQL、Redis... #因为 MySQL 相当于部署到了一台隔离的虚拟的 Linux(Docker 容器隔离) 上了，但我们又想看到期中一些目录 参数说明 -p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口 -v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机 -v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机 -v /mydata/mysql/data:/var/lib/mysql/：将配置文件夹挂载到主机-e MYSQL_ROOT_PASSWORD=123456：初始化 123456 --- 3 进入容器 --- #验证 以root身份进入mysql容器内部 root@f126639a0424:/# -it【交互模式】 bin/bash【控制台】 docker exec -it 容器名称|容器id bin/bash docker exec -it mysql bin/bash \",\"image-20220724160235682\",\"Linux ps （英文全拼：process status）命令用于显示当前进程的状态，类似于 windows 的任务管理器。\",\"docker ps\",\"设置 docker 指定容器自动启动，这个语句在菜鸟找不到\",\"docker update xxx --restart=always \"]},\"211\":{\"h\":\"1.2 配置\",\"t\":[\"在挂载的 conf 目录加 MySQL 配置\",\"[client] default-character-set=utf8 [mysql] default-character-set=utf8 [mysqld] init_connect='SET collation_connection = utf8_unicode_ci' init_connect='SET NAMES utf8' character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake skip-name-resolve \",\"进 MySQL 容器 验证挂载生效！\",\"# 使用 docker ps 来查看我们正在运行的容器： docker ps docker exec -it mysql bin/bash cd /etc/mysql # 重启指定 image，用于改完配置后重启 docker restart mysql \"]},\"212\":{\"h\":\"1.3 使用\",\"t\":[\"# 进入容器 推荐大家使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止。 # -it【交互模式】 bin/bash【控制台】 docker exec -it mysql /bin/bash # 通过容器的 mysql 命令行工具连接 docker exec -it mysql mysql -uroot -p123456 \",\"docker exec -it mysql mysql -uroot -p123456\"]},\"213\":{\"h\":\"2. Redis\",\"t\":[\"注意和 MySQL 不同，因为要通过配置文件启动 Redis 所以需要先创好文件！\",\"下载 latest 的版本就好 docker pull redis\",\"# 先创好文件！ 修改需要自定义的配置(docker-redis默认没有配置文件，自己在宿主机建立后挂载映射) mkdir -p /mydata/redis/conf touch /mydata/redis/conf/redis.conf \",\"docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \\\\ -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\\ -d redis redis-server /etc/redis/redis.conf \",\"docker exec -it redis redis-cli\",\"# Redis 从cli中设置密码 config set requirepass test123 # 加配置 bind 0.0.0.0 开启远程权限 appendonly yes 开启aof持久化 \"]},\"214\":{\"h\":\"1. 前端\"},\"215\":{\"h\":\"1.1 前言\",\"t\":[\"vsCode 好用的快捷键，Ctrl E 选中下一个同名单词 / Alt 点击光标多个\",\"ctrl + ` 打开终端\",\"启动项目：\",\"我们关注与 node.js 的 npm 功能就行； NPM 是随同 NodeJS 一起安装的包管理工具\",\"导入vscode\",\"终端 npm install（相当于 Maven 下载依赖包） \",\"这里是根据package.json下载后端是pom.xml\",\"下载完的依赖会在 node_modules 包下面\",\"npm run dev\",\"Babel：将新特性代码自动转换成浏览器能兼容的老代码\",\"Webpack：打包工具\",\"ES6 & Vue 快速入门\"]},\"216\":{\"h\":\"1.2 ES6\",\"t\":[\"具体看文档：03、前端开发基础知识 点 原始数据 可以看！\",\"let 有点强类型语言的意思：\",\"var 声明的变量往往会越域，let 声明的变量有严格局部作用域（var 全局 let 局部）\",\"var 可以声明多次，let 只能声明一次\",\"var 会变量提升， let 不存在变量提升\",\"const 声明常量（只读变量）\",\"对象解构\",\"多行字符串相当于加强版的字符串，用反引号 `\",\"${} 实现字符串拼接\",\"注意这里 7 要和 6 一起用！let info = `我是${name}，今年${age}了`;\",\"函数表达式 区别 函数声明\",\"etc.\",\"还有箭头函数+解构\",\"const person = { name: \\\"jack\\\", age: 21, language: ['java', 'js', 'css'] } // var hello1 = (param) => console.log(\\\"hello,\\\" + param.name); // hello1(person); var hello2 = ({name}) => console.log(\\\"hello,\\\" + name); hello2(person); \",\"针对嵌套的 ajax ES6 提供 Promise\",\"感觉可以理解成把 嵌套 调用，变成 链式 调用\",\"Promise vs axios 你可以使用 Promise 来处理任何异步操作的结果，而当你需要在 JavaScript 中进行 HTTP 请求时，可以选择使用 Axios 这样的库来简化和加强 HTTP 请求的处理。\",\"在JavaScript中实参与形参数量并不需要像JAVA一样必须在数量上严格保持一致，具有很大的灵活性。如下：下面四个调用都能执行！\",\"function test(str1, str2, str3) { // ...... } test(); // str1: undefined, str2: undefined, str3: undefined test('hello'); // str1: 'hello', str2: undefined, str3: undefined test('hello', 'world'); // str1: 'hello', str2: 'world', str3: undefined test('hello', 'world', '!'); // str1: 'hello', str2: 'world', str3: '!' \",\"简化\",\"computed: { totalPrice: function(){} 等价于 totalprice(){} } \",\"js 两种方法构建一个正则表达式：\",\"使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示： \",\"var re = /ab+c/;\",\"脚本加载后，正则表达式字面量就会被编译。当正则表达式保持不变时，使用此方法可获得更好的性能。\",\"或者调用RegExp对象的构造函数，如下所示： \",\"var re = new RegExp(\\\"ab+c\\\");\",\"在脚本运行过程中，用构造函数创建的正则表达式会被编译。如果正则表达式将会改变，或者它将会从用户输入等来源中动态地产生，就需要使用构造函数来创建正则表达式。\"]},\"217\":{\"h\":\"1.3 模块化\",\"t\":[\"模块化就是把代码进行拆分，方便重复利用。类似 java 中的导包：要使用一个包，必须先导包。而 JS 中没有包的概念，换来的是 模块。\",\"模块功能主要由两个命令构成：export和import。\",\"export命令用于规定模块的对外接口。\",\"import命令用于导入其他模块提供的功能。 \",\"注意 import 还不算完，要用的话得在需要注入到对象中才能使用 components\",\"export不仅可以导出对象，一切JS变量都可以导出。比如：基本类型变量、函数、数组、对象。\"]},\"218\":{\"h\":\"1.4\",\"t\":[\"详细点看：Vue入门学习笔记 & 03、前端开发基础知识\",\"在 MVVM 之前，开发人员从后端获取需要的数据模型，然后要通过DOM操作Model 渲染到 View 中。而后当用户操作视图，我们还需要通过 DOM 获取 View 中的数据，然后同步到Model 中。\",\"而 MVVM 中的 VM 要做的事情就是把 DOM 操作完全封装起来，开发人员不用再关心Model 和 View 之间是如何互相影响的\",\"虚拟DOM：Vue.js 使用虚拟DOM（Virtual DOM）来优化性能。在数据发生变化时，Vue.js 会生成一个虚拟DOM树，然后通过比较新旧虚拟DOM树的差异，最小化实际DOM操作的次数，从而提高性能和响应速度。\"]},\"219\":{\"h\":\"\",\"t\":[\"当前工程要用 npm npm init -y 初始化项目，出来一个 package.json\",\"终端 npm install vue@2（相当于 Maven 下载依赖包）加上@2，新版本没有vue.js文件\",\"这里是根据package.json下载后端是pom.xml\",\"下载完的依赖会在 node_modules 包下面，且这个包下有 vue 包\",\"html 页面 script 引入 ./node_modules/vue/dist/\",\"npm run dev\",\"尚上优选笔记：\",\"#全局安装命令行工具 实测：不执行这行下面的 vue 标识都识别不了 vue : 无法将“vue”项识别为 cmdlet、函数、脚本文件或可运行程序的名称 npm install --location=global @vue/cli #创建一个项目 vue create vue-test #选择vue2 #进入到项目目录 cd vue-test #启动程序 npm run serve \",\"如果启动不起来 digital envelope routines::unsupported 可能是Node版本不一样，可以把 node_modules 目录删掉，重新 npm install [不行，我换16版本才行]\"]},\"220\":{\"h\":\"\",\"t\":[\"v-if\",\"v-else-if\",\"v-else\",\"v-for\",\"v-on 绑定事件 , 简写@\",\"v-model 数据双向绑定（模型、视图）\",\".number ——将输入的合法符串转为数字 建议看这个例子\",\"v-bind 给组件绑定参数,简写 :\",\"数据库里数据是 int 这里就可以冒号绑定搞成数字 :active-value=\\\"1\\\" :inactive-value=\\\"0\\\"\",\"v-html\",\"一些惊艳的示例：\",\"v-on、v-model...\",\"事件修饰符（阻止冒泡，不然里面div点一下弹两个）\",\"按键修饰符（这个很有意思！可以监听键盘！）\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Document</title> </head> <body> <div id=\\\"app\\\"> <!--事件中直接写js片段--> <button v-on:click=\\\"num++\\\">点赞</button> <!--事件指定一个回调函数，必须是Vue实例中定义的函数--> <button @click=\\\"cancle\\\">取消</button> <!-- --> <h1>有{{num}}个赞</h1> <!-- 事件修饰符 --> <div style=\\\"border: 1px solid red;padding: 20px;\\\" v-on:click.once=\\\"hello\\\"> 大div <div style=\\\"border: 1px solid blue;padding: 20px;\\\" @click.stop=\\\"hello\\\"> 小div <br /> <a href=\\\"http://www.baidu.com\\\" @click.prevent.stop=\\\"hello\\\">去百度</a> </div> </div> <!-- 按键修饰符： --> <input type=\\\"text\\\" v-model=\\\"num\\\" v-on:keyup.up=\\\"num+=2\\\" @keyup.down=\\\"num-=2\\\" @click.ctrl=\\\"num=10\\\"><br /> 提示： </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> new Vue({ el:\\\"#app\\\", data:{ num: 1 }, methods:{ cancle(){ this.num--; }, hello(){ alert(\\\"点击了\\\") } } }) </script> </body> </html> \",\"vue的函数调用加不加()都可以的（js里确实不行，不过vue里可以）\",\"@click=\\\"addCategory()\\\" --- vs --- 在 Vue 中两者都可以 @click=\\\"addCategory\\\" \",\"使用 props 属性传递参数\",\"<div id=\\\"app\\\"> <ul> <my_component_li v-for=\\\"item in items\\\" v-bind:item=\\\"item\\\"></my_component_li> </ul> </div> <script src=\\\"https://unpkg.com/vue/dist/vue.js\\\"></script> <script> Vue.component( 'my_component_li',{ props: ['item'], //通过循环的遍历item，绑定属性，此属性‘item’作为媒介，传递给模板 template:'<li>{{item}}</li>' } ); //viewModel 实现与Model双向绑定，动态更新视图 var vm = new Vue({ el:\\\"#app\\\", data: { items: [\\\"李泽玉考西电\\\",\\\"西电必上岸\\\",\\\"西电我来了\\\"] } }); </script> \",\"说明：\",\"v-for=\\\"item in items\\\"：遍历 Vue 实例中定义的名为 items 的数组，并创建同等数量的组件\",\"v-bind:item=\\\"item\\\"：将遍历的 item 项绑定到组件中 props 定义的名为 item 属性上；= 号左边的 item 为 props 定义的属性名，右边的为 item in items 中遍历的 item 项的值\",\"v-html\",\"<body> <div id=\\\"app\\\"> <!-- 会变成 <span><h1>Hello</h1></span> --> <span v-html=\\\"msg\\\"></span> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> new Vue({ el: \\\"#app\\\", data: { msg: \\\"<h1>Hello</h1>\\\", } }) </script> </body> \",\"v-if VS v-show\",\"v-if 是直接 F12 中看不到代码了，v-show 是 display 属性为 false\",\"计算属性 & 监听器\",\"<body> <div id=\\\"app\\\"> <!-- 某些结果是基于之前数据实时计算出来的，我们可以利用计算属性。来完成 --> <ul> <li>西游记； 价格：{{xyjPrice}}，数量：<input type=\\\"number\\\" v-model=\\\"xyjNum\\\"> </li> <li>水浒传； 价格：{{shzPrice}}，数量：<input type=\\\"number\\\" v-model=\\\"shzNum\\\"> </li> <li>总价：{{totalPrice}}</li> {{msg}} </ul> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> //watch可以让我们监控一个值的变化。从而做出相应的反应。 new Vue({ el: \\\"#app\\\", data: { xyjPrice: 99.98, shzPrice: 98.00, xyjNum: 1, shzNum: 1, msg: \\\"\\\" }, computed: { totalPrice(){ return this.xyjPrice*this.xyjNum + this.shzPrice*this.shzNum } }, watch: { xyjNum(newVal,oldVal){ if(newVal>=3){ this.msg = \\\"库存超出限制\\\"; this.xyjNum = 3 }else{ this.msg = \\\"\\\"; } } }, }) </script> </body> \"]},\"221\":{\"h\":\"注意： data + return\",\"t\":[\"可全局 / 局部\",\"<body> <div id=\\\"app\\\"> <button v-on:click=\\\"count++\\\">我被点击了 {{count}} 次</button> <counter></counter> <counter></counter> <counter></counter> <counter></counter> <counter></counter> <button-counter></button-counter> </div> <script src=\\\"../node_modules/vue/dist/vue.js\\\"></script> <script> //1、全局声明注册一个组件 Vue.component(\\\"counter\\\", { template: `<button v-on:click=\\\"count++\\\">我被点击了 {{count}} 次</button>`, data() { return { count: 1 } } }); //2、局部声明一个组件 const buttonCounter = { template: `<button v-on:click=\\\"count++\\\">我被点击了 {{count}} 次~~~</button>`, data() { return { count: 1 } } }; new Vue({ el: \\\"#app\\\", data: { count: 1 }, components: { 'button-counter': buttonCounter } }) </script> </body> \",\"为了简化开发，Vue 为生命周期中的每个状态都设置了钩子函数（监听函数）\"]},\"222\":{\"h\":\"1.4.3 模块化开发\",\"t\":[\"使用 vue-cli 快速搭建脚手架工程\",\"vue-cli是什么：vue-cli是vue的命令行工具，只要按照官网敲几行命令就可以新建一个基本的vue项目框架。方便快捷。\",\"vue-cli和webpack是什么关系：vue-cli 里面包含了webpack， 并且配置好了基本的webpack打包规则\",\"npm install webpack -g（全局安装 webpack ）\",\"npm install -g @vue/cli-init （全局安装 vue 脚手架 ）\",\"初始化 vue 项目（vue init webpack appname：vue 脚手架使用 webpack 模板初始化一个appname 项目）\",\"启动 vue 项目（项目的 package.json 中有 scripts，代表我们能运行的命令 npm start = npm run dev：启动项目 npm run build：将项目打包）\",\"讲解一下目录🤺：\",\"build 和 webpack 有关的代码\",\"config 配置信息，如项目端口配置\",\"node_modules 项目所有的依赖，相当于 Maven 下载依赖包\",\"src 我们编写代码的地方\",\".babellrc 将新特性代码自动转换成浏览器能兼容的老代码\",\"package.json 相当于后端的 pom.xml\",\"package-lock.json 是上者的详细信息，包括去哪里下\",\"src/main.js 主程序\"]},\"223\":{\"h\":\"1.4.3 Element-UI\",\"t\":[\"Element UI 基于 Vue 2.0 的桌面端组件库（具体看官网）\",\"npm install element-ui\",\"装完后可在 package.json 看到信息\",\"在 main.js 导入\",\"import ElementUI from 'element-ui'; import 'element-ui/lib/theme-chalk/index.css'; Vue.use(ElementUI); \",\"看文档写就行了，文档明明白白，ui框架学习没啥成本，就是cv\",\"踩坑：npm 安装后，用 <el-image> 的时候报错\",\"Unknown custom element: \\\\<el-image> - did you register the component correctly?\",\"解决：文档 -> 快速上手 自己copy完整组件列表import {}里面的和use，到 src\\\\element-ui\\\\index.js 再把一些没有的组件删掉\"]},\"224\":{\"h\":\"1.4.4 解决闪烁问题\",\"t\":[\" <!--v-cloak 解决闪烁问题--> <style> [v-cloak] { display: none; } </style> \"]},\"225\":{\"h\":\"1.4.5\",\"t\":[\" \\\"components: {},\\\", \\\"data() {\\\", \\\"//这里存放数据\\\", \\\"return {\\\", \\\"\\\", \\\"};\\\", \\\"},\\\", \\\"//监听属性 类似于data概念\\\", \\\"computed: {},\\\", \\\"//监控data中的数据变化\\\", \\\"watch: {},\\\", \\\"//方法集合\\\", \\\"methods: {\\\", \\\"\\\", \\\"},\\\", \\\"//生命周期 - 创建完成（可以访问当前this实例）\\\", \\\"created() {\\\", \\\"\\\", \\\"},\\\", \\\"//生命周期 - 挂载完成（可以访问DOM元素）\\\", \\\"mounted() {\\\", \\\"\\\", \\\"},\\\", \\\"beforeCreate() {}, //生命周期 - 创建之前\\\", \\\"beforeMount() {}, //生命周期 - 挂载之前\\\", \\\"beforeUpdate() {}, //生命周期 - 更新之前\\\", \\\"updated() {}, //生命周期 - 更新之后\\\", \\\"beforeDestroy() {}, //生命周期 - 销毁之前\\\", \\\"destroyed() {}, //生命周期 - 销毁完成\\\", \\\"activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发\\\", \\\"}\\\", \"]},\"226\":{\"h\":\"1.5 高级部分\",\"t\":[\"父子组件传递数据：仔细看下面的例子便于理解！\",\"/** * 父子组件传递数据 * 1)、子组件给父组件传递数据，事件机制； * 子组件给父组件发送一个事件，携带上数据。 * // this.$emit(\\\"事件名\\\",携带的数据...) */ //向父组件发送事件；参数含义（事件名推荐-的写法，任意多的数据都会带出去） this.$emit(\\\"tree-node-click\\\", data, node, component); //父组件绑定这个事件（@tree-node-click），触发一个自己的方法treenodeclick <category @tree-node-click=\\\"treenodeclick\\\"></category> \"]},\"227\":{\"h\":\"2. 后端\",\"t\":[\"导入人人开源的项目到idea时，报错。通过改parent的boot版本解决！\",\"在测试类测试 product 模块的功能，结果一直报错，怎么解决都搞不好\",\"结果认真看有个 seata 的报错，我就去 pom 把 seata 依赖注销就好了！！！\",\"org.junit.jupiter.api.Test和org.junit.Test区别\",\"现在需要知道！主要是 spring boot 2.2之前使用的是 Junit4 之后是 Junit5，还需知道他们两个有什么区别看网站！\",\"关于@RunWith(SpringRunner.class)的作用\",\"SpringBoot 测试类 需要从容器中获取实例是需要加上该注解，否则空指针，管你是啥IDE。貌似是Junit4用的注解\",\"@Value 取 user.name 取的是系统变量\",\"所以最好加前缀 coupon.user.name\"]},\"228\":{\"h\":\"3. 技术选型\",\"t\":[\"结合 SpringCloud Alibaba 我们最终的技术搭配方案：\",\"SpringCloud Alibaba - Nacos：注册中心（服务发现/注册）\",\"SpringCloud Alibaba - Nacos：配置中心（动态配置管理）\",\"SpringCloud - Ribbon：负载均衡\",\"SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务）\",\"SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断）\",\"SpringCloud - Gateway：API 网关（webflux 编程模式）\",\"SpringCloud - Sleuth：调用链监控\",\"SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方案\"]},\"229\":{\"h\":\"1. 注意小点\",\"t\":[\"使用 MyBatis-Plus 时候，ServiceImpl 可以不用 注入 Dao，可以直接使用 baseMapper\",\"public class CategoryServiceImpl extends ServiceImpl<CategoryDao, CategoryEntity> implements CategoryService /** * 以前正常写法 */ @Autowired private CategoryDao categoryDao; /** * 现在用了 MyBatis-Plus 后 * baseMapper 代替了 categoryDao(不用注入) */ baseMapper.selectList(null); //具体看 extends ServiceImpl 这个类的源码，public class ServiceImpl<M extends BaseMapper<T>, T> implements IService<T> //因为继承泛型是 categoryDao 到这个类投射成了 protected M baseMapper; \",\"@Mapper 接口时候方法签名中的形参的 @Param 可以用 MybatisX 插件生成\",\"image-20221019140152140\",\"感觉很洋气 ！善用 lambda 表达式 ！多看看学学，那个博客留言三级应该也可以简化成这样\",\"实现树形结构的 三级分类，先给 entity 加一个\",\"@TableField(exist=false) private List<CategoryEntity> children; \",\"@Override public List<CategoryEntity> listWithTree() { // 查出所有分类 List<CategoryEntity> entities = baseMapper.selectList(null); //从一级分类开始给每个递归给一个子list List<CategoryEntity> AllLevelMenus = entities.stream() .filter(entity -> entity.getParentCid() == 0) .map((entity) -> { entity.setChildren(getChildrens(entity, entities)); //因为 map 的Lambda表达式必须是 Function 接口的一个实例，也就是需要参数需要返回值，上面这行没有返回值 return entity; }) .sorted((menu1, menu2) -> menu1.getSort() - menu2.getSort()) .collect(Collectors.toList()); return AllLevelMenus; } ###################################################### private List<CategoryEntity> getChildrens(CategoryEntity entity, List<CategoryEntity> all) { List<CategoryEntity> childrenList = all.stream() .filter(menu -> menu.getParentCid() == entity.getCatId()) .map((menu) -> { menu.setChildren(getChildrens(menu, all)); return menu; }) .sorted((menu1, menu2) -> menu1.getSort() == null ? 0 : menu1.getSort() - (menu2.getSort() == null ? 0 : menu2.getSort())) .collect(Collectors.toList()); return childrenList; } \",\"vscode 注释报错，关闭ESlint的语法检查\",\"build -> webpack.base.conf.js 里面的 createLintingRule 注销掉\",\"const createLintingRule = () => ({ // test: /\\\\.(js|vue)$/, // loader: 'eslint-loader', // enforce: 'pre', // include: [resolve('src'), resolve('test')], // options: { // formatter: require('eslint-friendly-formatter'), // emitWarning: !config.dev.showEslintErrorsInOverlay // } }) \",\"console.log 不要再 String 拼接，直接多个变量\",\"console.log('data'+data); // data:[object Object]\",\"console.log('1', '2', data); // 1 data具体数据\",\"getMenus 刷新的原因：如果多个人操作了这个页面呢，不再请求一次页面数据怎么是最新的？\",\"​ this.getMenus();\",\"​ this.expandedKey = [node.parent.data.catId];\",\"yaml 配置小点\",\"#可以加上下文路径 http://localhost:8080/renren-fast server.servlet.context-path:/renren-fast \",\"特殊注释说明，学到了！！！\",\"//TODO: + 说明： 在 idea 中这个注释会变成金色，且会在下面工具栏显示！类似快速备忘录功能 如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。搞完了就删掉TODO\",\"image-20220814161700939\",\"// XXX 勉强可以工作，但是性能差等原因.\",\"// FIXME 代码是错误的，不能工作，需要修复.\",\"因为数据库用的 自增 主键，所以要配置一下，不然\",\"@TableId private Long catId; 其中 IdType type() default IdType.NONE; \",\"mybatis-plus: global-config: db-config: id-type: auto \",\"同时配置 注解 与 配置文件 注解会生效，配置文件失效\",\"测试点：\",\"在bootstrap.yml中配置：id-type: auto，\",\"注解为@TableId(value = \\\"id\\\", type = IdType.ASSIGN_ID)\",\"经过测试：注解生效。\",\"将配置移动到application.yml中测试结果与上面相同。\",\"结论：注解优先配置生效。\",\"MyBatis-Plus 逻辑删除有两种方法\",\"物理删除 ：从数据库中直接移除\",\"逻辑删除 ：再数据库中没有被移除，而是通过一个变量来让他失效，类似于回收站！\",\"yaml 配置标志位、删除与未删除是 0/1\",\"用 @TableLogic 注解配置\",\"yaml 配置日志，看 SQL 语句\",\"看到 renren-fast 配置的是 logback-spring.xml\",\"XD: 用到 mybatis-plus 但是没有输出日志想着怎么配又回来回顾\",\"logging: level: com.zzq.gulimall: debug #就代表这个包下面所有的 \"]},\"230\":{\"h\":\"\",\"t\":[\"跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。\",\"同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域；\",\"image-20220813175848410\",\"理解 简单请求 和预检请求 看Title解释，1）请求类型得是Get,Post 2）Content-Type：text，form\",\"不是简单请求的都需要发送一个预检请求 比如看标题链接，这里发的是 Application/json 浏览器响应\",\"Request Method: OPTIONS\",\"image-20220813180934578\",\"所以服务器不允许，就一个OPTIONS请求过去后。真实请求就没有发了！\"]},\"231\":{\"h\":\"解决跨域\",\"t\":[\"（一）使用nginx部署为同一域 感觉：套了一层又一层\",\"image-20220813182436081\",\"（二）配置当次请求允许跨域\",\"image-20220813185445762\",\"一个个 Model 配太繁琐，因为所有 Model 的方法都会经过 Gateway 所以网关搞一个配置类\",\"主要就是搞一个 CorsWebFilter 的 Bean\",\"一点一点的new，需要什么配置什么！！！看源码参数缺什么。学习一下雷神的思想，别的老师都是直接去网上复制\",\"注意：\",\" //配置跨域 corsConfiguration.addAllowedHeader(\\\"*\\\"); corsConfiguration.addAllowedMethod(\\\"*\\\"); corsConfiguration.addAllowedOrigin(\\\"*\\\"); //设置允许携带cookies，不然跨域请求会丢失携带的cookies corsConfiguration.setAllowCredentials(true); \",\"image-20220813191254660\",\"为了解决浏览器跨域问题，W3C 提出了跨源资源共享方案，即 CORS(Cross-Origin Resource Sharing)。它允许浏览器向跨源服务器，发出XMLHttpRequest请求。spring mvc 4.2版本增加了对cors的支持，通过spring boot可以非常简单的实现跨域访问。\",\"值得一看CorsConfig：【跨域】使用CorsConfig和注解，解决跨域 和 gateway跨域解决方案\",\"==SSYX Project 补充：\",\"1）在后端接口controller添加@CorsConfig跨域注解最简单解决跨域 （跨域有多种解决方案，现在暂时这么做）\",\"2）可能后期还是以网关层面解决是最好==\"]},\"232\":{\"h\":\"Nginx 算一种，还有RuoYi前端Vue解决\",\"t\":[\"CORS与JSONP的使用目的相同，但是比JSONP更强大。\",\"==JSONP只支持GET请求，CORS支持所有类型的HTTP请求。==JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。\"]},\"233\":{\"h\":\"\",\"t\":[\"所以说 axios 使用方式就是用this.$http：Vue.prototype.$http = axios\",\"# 第一步：安装 npm install --save axios # 第二步：在入口文件main.js中配置 import Vue from 'vue' import axios from 'axios' Vue.prototype.$http = axios # 第三步：使用案例 this.$http.get('/user?id=666').then((response) => { console.log(response.data) }).catch( (error) => { console.log(error); }); \"]},\"234\":{\"h\":\"4. 三级菜单：拖拽前端业务实现\",\"t\":[\"能否拖拽的实现思路是自己简单一个 if 判断没有用雷神的\",\"拖拽的 handleDrop 方法实现那三点cv的没有去看 (抽空可以再看看)\",\"ref 给组件唯一标识（起个名字） this.$refs 拿到\",\"ref=\\\"menuTree\\\" //下面这样就可以唯一定位到上面属性指定的组件 this.$refs.menuTree.filter(val); \",\"后台脚手架平台一般是后端顺手写出来的\"]},\"235\":{\"h\":\"5. 踩坑\"},\"236\":{\"h\":\"逻辑删除\",\"t\":[\"/product/brand/update 传的data：{brandId,showStatus}\",\"SQL报错是因为mybatis-plus不支持更新逻辑删除的字段\",\"注意wrapper要用数据库里的字段_，而不是entity里面的小驼峰\",\"wrapper.eq(\\\"brand_id\\\",brand.getBrandId()) .set(\\\"show_status\\\",brand.getShowStatus()); \",\"MyBatisPlus中开启了逻辑删除则更新逻辑字段不再管用，总是自动带上show_status=1\",\"Preparing: UPDATE pms_brand SET show_status=? WHERE show_status=1 AND (brand_id = ?)\",\"加了配置文件全局的逻辑删除，用updateWrapper也是不行的，还是会在where后面拼接\",\"解决：不用全局的逻辑删除，category 那个实体类用一下注解就行！\"]},\"237\":{\"h\":\"前端校验\",\"t\":[\"排序必须是一个大于等于0的整数\",\"v-model.number=\\\"dataForm.sort\\\" 和 if (!Number.isInteger(value) || value<0)\"]},\"238\":{\"h\":\"6. OSS（Object Storage Service）\",\"t\":[\"服务端SDK在上传方面主要提供两种功能：\",\"一种是直接上传文件到云端。\",\"最好的是生成客户端上传所需要的上传凭证\",\"项目采取：第二种服务端签名后直传。保证了一定的安全性\",\"上传就不用经过自己的服务器了（不用占带宽），上传在客户端完成\",\"总结：服务器拿 Token 前端页面带上到 OSS\",\"image-20220818222235756\",\"我这里用的是七牛云所以没用到下面，自己捣鼓了很久。难的就是前端的 vue 文件是直接 copy 的，大部分东西不知道作用！\",\"解决aliyun-oss-spring-boot-starter导入报错的问题\",\"https://blog.csdn.net/gao_jun1/article/details/111414976\",\"注意区分：\",\"<dependencyManagement> <dependencies> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>aliyun-spring-boot-dependencies</artifactId> <version>1.0.0</version> <type>pom</type> <scope>import</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.1.8.RELEASE</version> <type>pom</type> <scope>import</scope> </dependency> </dependencyManagement> \"]},\"239\":{\"h\":\"\",\"t\":[\"前端校验主要是给一般用户看的，提高用户体验。因为可用 PostMan 绕过直接给后端发请求！\",\"\\\"status\\\": 400,\",\"\\\"error\\\": \\\"Bad Request\\\"\",\"看到上面这个就证明校验不通过！\",\"注意：spring-boot-starter-web 里面有 validation\"]},\"240\":{\"h\":\"使用过程\",\"t\":[\"以前总觉得 Controller 类还要在类头加注解，记忆混乱了。实测不用！ 后话：不懂\",\"Entity 字段加 @NotNull etc.\",\"Controller 方法形参加注解 @Valid\",\"能使用，但报错不符合业务规定，优化：\",\"实体类：+message @NotBlank(message = \\\"品牌名必须提交\\\") //报错json变成 -> \\\"defaultMessage\\\": \\\"品牌名必须提交\\\", Contrller：+BindingResult public R save(@Valid @RequestBody BrandEntity brand, BindingResult result){ \",\"@Pattern 可以用正则表达式校验\",\"注意：java 正则确实不需要 / / 注意区分 js (var re = /ab+c/😉\",\"统一异常处理\",\"类+ @RestControllerAdvice(\\\"com.zzq.gulimall.product.controller\\\")\",\"方法+ @ExceptionHandler(需要处理的异常类.class)\",\"上面优化，每个方法都要到业务里处理异常太繁琐了，抽取解耦封装\",\"不用 BindingResult，建一个异常类集中处理所有异常\",\"这里雷神NB，参数先 Exception e，获取它的异常错误类 e.getClass() 替换大的 Exception异常，细化后就能又获取BindingResult对象。\",\"Exception 是没有这个方法的！\",\"image-20220820145558332\",\"@ExceptionHandler(MethodArgumentNotValidException.class) //处理对应异常 public R handlerValidException(MethodArgumentNotValidException e /*感知异常*/) \",\"最后 如果不能精确匹配异常，就来到最大的类 Exception ，再写一个方法来囊括\",\"错误码Enum\",\"return 的 R 错误码可以看尚硅谷的文档，一般可以是5位，业务场景2+错误码3。用个枚举类囊括\"]},\"241\":{\"h\":\"分组校验\",\"t\":[\"场景：新增 / 修改时我们想要校验的字段和规则可能是不一样的！比如说，ID 字段 新增时不需要携带。而修改时必须要携带\",\"没有标注分组的校验注解就不会被校验\",\"看公司 反正你不用你也要写if else 我觉得还是用的好 不带直接弹回还省的浪费数据库资源\",\"上手：比较麻烦，新建AddGroup、UpdateGroup这些空接口（只充当一个标识，问就是约定，规范），然后分组的时候填这些接口，controller方法指定用哪个分组 public R save(@Validated(AddGroup.class)\",\"新建分组接口 -> 注解填分组 -> controller改成**@Validated({AddGroup.class})**\",\"问题：\",\"//不知道为什么这两样都行,但明明属性是数组 @Validated({AddGroup.class}) @Validated(AddGroup.class) public @interface Validated { Class<?>[] value() default {}; } \",\"搜 Annotation 找出答案：\"]},\"242\":{\"h\":\"数组类型的属性\",\"t\":[\"注解类添加数组类型的属性：int[] id() default {1,2,3}; 使用类使用数组类型的属性：@Annotation(id={2,3,4}) 如果数组属性只有一个值，这时候属性值部分可以省略大括号，如：@Annotation(id=2)，表示数组属性只有一个值，值为2**(如同Butterknife中onClick注解)**\",\"链接：https://www.jianshu.com/p/2867f0558687\",\"正则处理不了校验（比如 Integer ），我们可以自定义校验注解\",\"需要导入，直接修复的时候有选择导入依赖的,不用手动\",\"image-20220821105014376\",\"<dependency> <groupId>jakarta.validation</groupId> <artifactId>jakarta.validation-api</artifactId> <version>2.0.2</version> </dependency> \"]},\"243\":{\"h\":\"自定义校验（仿照别的校验写）\",\"t\":[\"可以多看下代码，学学雷神的思想境界！\",\"//规定，建议看代码 以及P69 5：00 String message() default \\\"{com.zzq.common.valid.ListValue.message}\\\"; \",\"默认的Message信息是在这个文件：ValidationMessages_zh_CN.properties\",\"// 指定用什么校验，这里需要编写一个自己的自定义校验器。参照别的注解自己写一个 @Constraint( validatedBy = {} ) \"]},\"244\":{\"h\":\"8. SPU 与 SKU\",\"t\":[\"SPU（Standard Product Unit）：就是iphone xs 的一些标准信息（像素，尺寸等）-- > 基本属性 / 规格与包装\",\"SKU（stock keeping unit）：就是 xs 细化分不同颜色不同版本（多大内存）可能价格也不同（这是真正买的版本）-- > 销售属性\",\"从广义上讲，类目>SPU>SKU\",\"分类（Category） -> 分组（AttrGroup） -> 属性（Attr）\",\"勾中快速展示：就是把它展示到商品介绍上\"]},\"245\":{\"h\":\"9. 其他重要的点\"},\"246\":{\"h\":\"关于 MyBatis-Plus\",\"t\":[\"Query PageUtils 都是gulimall-common的自定义类封装（来源于 renrenfast 封装） 去公司也是直接封装好的 \"]},\"247\":{\"h\":\"介绍\",\"t\":[\"Jackson [/ˈdʒæksən/] 是当前用的比较广泛的，用来序列化和反序列化json的Java开源框架。Jackson社区相对比较活跃，更新速度也比较快， 从Github中的统计来看，Jackson是最流行的json解析器之一，Spring MVC的默认json解析器便是Jackson。\",\"场景：三级菜单最后没有 chidren 就不用显示，不然前端列表显示一片空白\",\"@JsonInclude(JsonInclude.Include.NON_EMPTY) @TableField(exist = false) private List<CategoryEntity> children; \",\"进行 Json 转换会按照这个规则\",\"spring: jackson: date-format: yyyy-mm-dd HH:mm:ss \"]},\"248\":{\"h\":\"Element UI Cascader 级联选择器\"},\"249\":{\"h\":\"Issue\",\"t\":[\"假设x是一个已知仅包含字符串的列表（List）。以下代码可用于将列表转储到新分配的String数组中：\",\" String[] y = x.toArray(new String[0]); \",\"测了一下输出都是 abc\",\"List<String> list = Arrays.asList(\\\"a\\\", \\\"b\\\", \\\"c\\\"); String[] strings = list.toArray(new String[0]); String[] strings1 = list.toArray(new String[list.size()]); \"]},\"250\":{\"h\":\"Other\",\"t\":[\"合理的冗余字段是为了快速查询，减少IO次数\",\"save功能，前端没有传这两个字段，想办法加这两个就不用再回到他们表再查了\",\"记住还需保证冗余字段的数据一致，cascade 级联值得学习\",\"image-20220824161553329\",\"场景：添加一些不属于表里的字段（extends + 额外字段） / 只需表里几个字段，最好还是单独新建一些 VO... 把每种不同对象按照功能进行了不同的划分\"]},\"251\":{\"h\":\"Object 划分\",\"t\":[\"PO：各种 Entity\",\"TO：微服务之间互相调用传输数，封装和发送出去的对象就是 TO\",\"跨服务 OpenFeign 时，to包放common\",\"VO：View Object 视图对象\",\"接受页面传递来的数据，封装对象\",\"将业务处理完成的对象，封装成页面要用的数据\"]},\"252\":{\"h\":\"常用的封装类\",\"t\":[\"要把 VO 的属性复制到 PO，一个个 set 很麻烦： BeanUtils\",\" public void saveAttr(AttrVo attr) { AttrEntity attrEntity = new AttrEntity(); // attrEntity.setAttrName(attr.getAttrName()); BeanUtils.copyProperties(attr,attrEntity); } \",\"spring 有一个工具类 StringUtils\",\"判断字符串是不是为空...很方便\",\"判断集合是不是空\",\"if(!CollectionUtils.isEmpty(attrIds)) \",\"封装的 R 返回数据\",\"public class R extends HashMap<String, Object> \",\"用map接参的，会挨锤的 map 开发一时爽，维护火葬场\",\"@RequestParam Map<String, Object> params\",\"字段：属性类型[0-销售属性，1-基本属性，2-既是销售属性又是基本属性]\",\"像这种字段，最好搞一个枚举常量。这样数据库更改规则了，我们只需要更改一下枚举类！\",\"感觉和 接口类 = 实现类 的设计感觉一样，后面要换实现类了只用换实现类一个地方\",\"Controller 与 Service 关系：Controller应该只需三句话 1（参数）、3（调用Service） 和 return\",\"1、Controller：处理请求，接收和效验数据\",\"2、Service接收Controller传来的数据，进行业务处理\",\"3、Controller接收Service处理完的数据，封装页面指定的vo\"]},\"253\":{\"h\":\"技巧\",\"t\":[\"在线解析 Json 的网站，有可以把 Json 转成 Java 对象！！！\"]},\"254\":{\"h\":\"idea占用内存过大，服务过多\",\"t\":[\"JavaGuide 最重要的 JVM 参数总结\",\"给每一个微服务设置：-Xmx100m 注意：内存调大 JMeter 压测吞吐量也会上来\",\"image-20220828170939115\"]},\"255\":{\"h\":\"为了方便重启一部分服务可以用，Compound 包起来\",\"t\":[\"image-20220828171101974\"]},\"256\":{\"h\":\"集群负载均衡，取巧\",\"t\":[\"为了下一章节演示nacos的负载均衡，参照9001新建9002\",\"这里取巧不想新建重复体力劳动，可以利用IDEA功能，直接拷贝虚拟端口映射\",\"在这里插入图片描述\",\"image-20220828171758542\",\"或 Environment variables: --server.port=9002\"]},\"257\":{\"h\":\"后端加了事务 @Transactional 还没提交前的语句看不到数据库的变换\",\"t\":[\"为了测试方便，将当前会话的隔离级别降低。有了它就可以很方便的看数据库的变化了，可读到没有提交的数据。\",\"SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\",\"Navicat要在加一行SELECT * FROM pms_spu_info; 在当前窗口（一个会话）搜索数据才能读到\",\"SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; SELECT * FROM `pms_spu_info`; \"]},\"258\":{\"h\":\"踩坑\",\"t\":[\"好使\",\"stream() -> map() -> filter() -> collect()\"]},\"259\":{\"h\":\"采购\"},\"260\":{\"h\":\"用好数据库连接池：\",\"t\":[\"场景：springboot项目启动开始可以访问数据库，但是几分钟之后就会报错\",\"idea报错信息：\",\"HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@18e7d21c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value. \",\"那么问题就很明了，你的连接在三分钟的时候就已经和数据库断开了连接，但是你默认连接的存活时间是五分钟，所以导致你的springboot项目开始能访问数据库，一会之后就不能访问数据库了\",\"Data source rejected establishment of connection, message from server: \\\"Too many connections\\\"\",\"MAX_LIFETIME = TimeUnit.MINUTES.toMillis(30L); \"]},\"261\":{\"h\":\"从商品保存开始就对业务走马观花，都是CV没去自己写\",\"t\":[\"SpringBoot 2.0 基于 Spring 5 最大的变化就是引入了 React（响应式编程）-> Web Flux（可以非常容易的创建出高性能、高并发的 Web 应用）\",\"例如：Gateway 的跨域 Filter 网关，CorsWebFilter 它是属于 Webflux\",\"耗时三个月断断续续敲完，高级篇功能打通，准备面试！ 文档地址：https://www.cnblogs.com/JuneQS/p/projectdemo.html 项目地址：https://gitee.com/JuneQ/mall-project 演示地址：http://projectdemo.top\",\"边工边敲历经52天，终于结束了，集群篇因为电脑拉胯只能看\",\"恭喜尚硅谷破百万关注，历时半年艰难学完一把辛酸泪（因为平时有工作），给点建议给想学和正在学的小伙伴 1、如有条件电脑内存至少16G起步，条件进一步加个屏幕，条件更进一步租一台至少4G内存的X86架构云服务器，所有部署的东西全扔云服务器上 2、P16，P17没法搭起来的建议照着rerenfast的github上的教程搭 3、项目搭起来后，每学完一章一定要用git提交一次，不然后续排错会令人崩溃 4、多记笔记，尤其是分布式，架构，锁相关的知识，有利于面试 5、IDEA的jrebel插件和ResetfulTool插件至少能提高一半的学习效率，必用 6、这章实在找不到解决办法看下弹幕，其余情况一律关闭 7、Maven依赖版本号一定要一模一样（除非你知道高版本怎么配置） 8、当前章节没达到老师的效果不要继续往下做，这个项目是线性的，你卡在这个环节后面基本也很难做下去，直到P325 9、单纯想学后端东西的，前端代码照抄，P28-P44跳过 10、ES的内存分配不要128MB，要256MB起步，商品上架的测试数据建议和老师的一模一样（除了图片），不然不好对照 11、nginx可以不用部署在服务器上，有windows版可以本地运行，跳过穿透 12、单点登录有条件直接用github的，不要用微博的，提高效率，可以用api.github.com/user这个接口 13、支付宝沙箱每周日12:00至每周一12:00维护不可用 14、个人认为新增商品，商品上架，保存订单数据，支付这四个功能为该项目最折磨人功能，一P能卡一两天 15、P100之前的内容属于当前JAVA后端能找到工作的最基本水平 16、调试环节是必要的，一定要跟着学，不会调试通过试用期堪忧 17、实际大多数公司的项目技术难点和涵盖范围不如这个项目（所以好多人边上班边学啊）\",\"4、12\",\"大佬，这个项目到底能不能写在简历中，很多人说，第一：商城项目烂大街。第二：这个项目涵盖的太多，如果面试官问的太多，可能有难度\",\"不可以直接写，把知识点穿插写到你的其他项目里就行了，比如你写一个后台系统，防止表单重复提交你用到了鼓粒商城提交订单的幂等性设计，注册登录用到了QQ或者微信的单点登录，如果有定时任务就参考秒杀系统的定时任务设计\"]},\"262\":{\"h\":\"Elasticsearch\",\"t\":[\"Port：9200 kibana：5601\",\"全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 Elastic）是目前全文搜索引擎的首选。\",\"它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。\"]},\"263\":{\"h\":\"Elasticsearch: Store, Search, and Analyze\",\"t\":[\"秒级的从我们海量数据中检索到我们感兴趣的数据，因为放在内存中。\",\"将MySQL数据往ES里面存一份\",\"在此系统中两种： 后话 -> ES我这里学的非常模糊，后面商品搜索也是照抄代码，暂时掠过待有需要回头再学\",\"商品搜索\",\"日志搜索\"]},\"264\":{\"h\":\"倒排索引机制：分词\",\"t\":[\"image-20220907215603856\"]},\"265\":{\"h\":\"基本概念\",\"t\":[\"Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。\",\"对比关系：\",\"索引（indices）----------------------Databases 数据库 类型（type）--------------------------Table 数据表 文档（Document）----------------------Row 行 字段（Field）-------------------------Columns 列 \",\"要注意的是：Elasticsearch本身就是分布式的，因此即便你只有一个节点，Elasticsearch默认也会对你的数据进行分片和副本操作，当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。\",\"ES 将数据存于内存的！\",\"内存：因为天然支持分布式，可以多装几台 ES 放在不同的服务器。就会将数据分片存储，10 W个数据，这台存几千那台几千。容量不够数量来凑！\"]},\"266\":{\"h\":\"Docker 安装 ES\"},\"267\":{\"h\":\"下载镜像文件\",\"t\":[\"踩坑：我没有指定版本号，Tag：latest 看一下 created 居然是三年前的 5.6.12！\",\"hub.docker.com 还是去这个网站 pull\",\"docker pull elasticsearch:7.4.2 #存储和检索数据 docker pull kibana:7.4.2 #可视化检索数据，类似 navicat 之于 mysql 的可视化界面 #配置，具体看基础篇 Docker 有 MySQL 的使用例子 mkdir -p /mydata/elasticsearch/config mkdir -p /mydata/elasticsearch/data echo \\\"http.host: 0.0.0.0\\\" >> /mydata/elasticsearch/config/elasticsearch.yml docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\\\ -e \\\"discovery.type=single-node\\\" \\\\ -e ES_JAVA_OPTS=\\\"-Xms64m -Xmx512m\\\" \\\\ -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\\\ -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\\\ -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\\\ -d elasticsearch:7.4.2 以后再外面装好插件重启即可； 特别注意： chmod -R 777 /mydata/elasticsearch/ 保证权限 -e ES_JAVA_OPTS=\\\"-Xms64m -Xmx256m\\\" \\\\ 测试环境下，设置 ES 的初始内存和最大内存，否则导致过大启动不了 ES \",\"kibana：\",\"docker run --name kibana -e ELASTICSEARCH_HOSTS=http://zzq8.cn:9200 -p 5601:5601 \\\\ -d kibana:7.4.2 \",\"参照官方文档，具体一些命令怎么用 官方文档\"]},\"268\":{\"h\":\"使用 postman 测试\",\"t\":[\"对 ES 的所有操作，它都封装成了 Rest Api\",\"第二次发送这个请求 version 就是 2 ，result 变成 update\",\"zzq8.cn:9200/customer/external/1 路径 index/type/id 可以理解成 数据库/表/数据\"]},\"269\":{\"h\":\"乐观锁\",\"t\":[\"更新携带 ?if_seq_no=0&if_primary_term=1\",\"根据 seq_no 来比对版本\"]},\"270\":{\"h\":\"1. _cat 看基本信息\",\"t\":[\"GET /_cat/nodes：查看所有节点 GET /_cat/health：查看 es 健康状况 GET /_cat/master：查看主节点 GET /_cat/indices：查看所有索引 show databases; \"]},\"271\":{\"h\":\"2. _update 更新\",\"t\":[\"带 _update 就会对比原来的数据，如果更新和原来一样就会 noop（no opration）不进行操作。带 _update 的记得要按照下面这样写：加 doc\",\"{ \\\"doc\\\":{ \\\"name\\\": \\\"John Doew\\\"} } \",\"不带发 post 和 put 就都会直接更新不会对比数据，version会往上涨\"]},\"272\":{\"h\":\"3. Query DSL\",\"t\":[\"Elasticsearch提供了一个可以执行查询的Json风格的DSL。这个被称为Query DSL，该查询语言非常全面。\",\"DSL(Domain Specific Language)的缩写，中文翻译为领域特定语言。\",\"Wikipedia 对于 DSL 的定义还是比较简单的：\",\"A specialized computer language designed for a specific task.\",\"为了解决某一类任务而专门设计的计算机语言。\"]},\"273\":{\"h\":\"1）匹配所有\",\"t\":[\"GET /atguigu/_search { \\\"query\\\":{ \\\"match_all\\\": {} } } \",\"query：代表查询对象\",\"match_all：代表查询所有\"]},\"274\":{\"h\":\"2）条件匹配\",\"t\":[\"GET bank/_search { \\\"query\\\":{ \\\"match\\\":{ \\\"account_number\\\": 20 } } } \"]},\"275\":{\"h\":\"3）match_phrase 短句匹配\",\"t\":[\"match_phrase和match的区别，观察如下实例：\",\"match_phrase是做短语匹配\",\"match是分词匹配，例如990 Mill匹配含有990或者Mill的结果\",\"GET bank/_search { \\\"query\\\":{ \\\"match_phrase\\\": { \\\"address\\\": \\\"mill road\\\" } } } \"]},\"276\":{\"h\":\"4）multi_math 多字段匹配\",\"t\":[\"state或者address中包含mill，并且在查询过程中，会对于查询条件进行分词。\",\"GET bank/_search { \\\"query\\\": { \\\"multi_match\\\": { \\\"query\\\": \\\"mill\\\", \\\"fields\\\": [ \\\"state\\\", \\\"address\\\" ] } } } \"]},\"277\":{\"h\":\"5）bool用来做复合查询\",\"t\":[\"布尔查询又叫组合查询\",\"bool把各种其它查询通过must（与）、must_not（非）、should（或）的方式进行组合\",\"GET bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"match\\\": { \\\"gender\\\": \\\"M\\\" } }, { \\\"match\\\": { \\\"address\\\": \\\"mill\\\" } } ], \\\"must_not\\\": [ { \\\"match\\\": { \\\"age\\\": \\\"18\\\" } } ], \\\"should\\\": [ { \\\"match\\\": { \\\"lastname\\\": \\\"Wallace\\\" } } ] } } } \"]},\"278\":{\"h\":\"6）Filter【结果过滤】\",\"t\":[\"所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件影响评分，那么就不要把过滤条件作为查询条件来用。而是使用filter方式：\",\"GET bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"match\\\": { \\\"address\\\": \\\"mill\\\" } } ], \\\"filter\\\": { \\\"range\\\": { \\\"balance\\\": { \\\"gte\\\": \\\"10000\\\", \\\"lte\\\": \\\"20000\\\" } } } } } } \",\"这里先是查询所有匹配address=mill的文档，然后再根据10000<=balance<=20000进行过滤查询结果\",\"range查询允许以下字符：\",\"操作符\",\"说明\",\"gt\",\"大于\",\"gte\",\"大于等于\",\"lt\",\"小于\",\"lte\",\"小于等于\"]},\"279\":{\"h\":\"7）term\",\"t\":[\"match模糊匹配 term精确匹配\",\"#像age这种精确取值 match换成用term GET bank/_search { \\\"query\\\": { \\\"term\\\": { \\\"age\\\": 28 } } } \"]},\"280\":{\"h\":\"4. nested 去扁平化\",\"t\":[\"image-20221018170313908\"]},\"281\":{\"h\":\"5. 分词器\",\"t\":[\"#使用 standard 分词，会把一个个单词分开 #中文需额外搞分词器 => ik 分词器\",\"POST _analyze { \\\"analyzer\\\": \\\"standard\\\", \\\"text\\\": \\\"the quick brown fox jumps over the lazy dog.\\\" } \",\"ik_smart、ik_max_word\"]},\"282\":{\"h\":\"分词器可以有自定义词库，给一个远程文本地址，配置后就可根据里面的分\",\"t\":[\"重启 ES 即可识别\",\"我这里直接拿 Nginx 当了文件服务器，配置好路由。/usr/share/nginx/html 放上 /es/fenci.txt\",\"http://zzq8.cn:9201/es/fenci.txt\"]},\"283\":{\"h\":\"JUC & JVM +GC\",\"t\":[\"Links that usually browsed:\",\"[2）new ThreadPoolExecutor(线程池七大参数)](#2）new ThreadPoolExecutor(线程池七大参数))\",\"2022/11/9 学于 教学视频脑图Gitee 别人笔记（全）别人的笔记 21:32 预计 每天 2h 11d 完成！于22nd\",\"会用只是 API 调用工程师、CURD 程序员！缩招不是不招聘，而是招聘更多更加优质的开发工程师。1 拿 1.8 干 3\",\"大学毕业后丧失学习能力的90后将彻底被挤出 IT 行业\",\"使用场景：\",\"标志位：当一个共享的标志位需要在多个线程之间进行读写操作时，可以使用 volatile 关键字来保证其可见性，以便线程能够及时获取最新的状态。\",\"双重检查锁定（Double-Checked Locking）：在单例模式中，当使用双重检查锁定来确保只有一个实例被创建时，需要将共享的实例变量声明为 volatile，以避免由于指令重排序导致的潜在问题。【看下面 5. 例子！！！】 \",\"禁止指令重排\",\"轻量级同步：这个变量是共享且不稳定的,每次使用它都到主存中进行读取，可以使用 volatile 替代 synchronized 来实现更轻量级的同步。 \",\"保证可见性\",\"能保证两个：主要自己不要把这个和 CAS 搞混了！应该是这个的缺点需要用到 CAS，它本身是和 CAS 没任何关系的！\",\"对volatile变量的操作不会造成阻塞。--> C选项中，volatile修饰一个变量时，是不会加锁的；而只有在加锁情况下才会造成阻塞，所以C正确；\",\"保证可见性（这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取）\",\"不保证原子性\",\"所以需要配 CAS（CPU并发原语） ？\",\"禁止指令重排（保证有序性 - 因为加入了CPU指令「内存屏障」所以能禁止指令优化重排 XD）\"]},\"284\":{\"h\":\"0. JMM（前置知识）\",\"t\":[\"JMM(Java内存模型Java Memory Model,简称JMM)本身是一种抽象的概念 并不真实存在,它描述的是一组规则或规范通过规范定制了程序中各个变量(包括实例字段,静态字段和构成数组对象的元素)的访问方式.\",\"JMM 三大特性：\",\"可见性（在自己的工作内存写好 volatile 的变量值，写入主内存。立刻通知其它线程让他们看到，前值作废拿直接拿主物理内存的最新值）\",\"原子性\",\"有序性\"]},\"285\":{\"h\":\"1. 可见性\"},\"286\":{\"h\":\"弹幕：\",\"t\":[\"我替前面的朋友解释一下，为什么说多核，首先你们要明白单核多线程和多核多线程的区别。\",\"单核多线程，在同一时间点，只有一个线程在执行。多核多线程，在同一时间点，有几个核心就会执行几个线程。\",\"这个时候就出现了一个问题，缓存是跟线程挂钩的还是跟核心挂钩的？答案是跟核心，所以单核多线程不会有缓存共享问题。请记住是缓存数据共享，但是依旧会产生并发。\",\" 数据传输速率：硬盘 < 内存 < < cache < CPU\"]},\"287\":{\"h\":\"脑图：\",\"t\":[\"由于JVM运行程序的实体是线程,而每个线程创建时JVM都会为其创建一个工作内存(有些地方成为栈空间),工作内存是每个线程的私有数据区域,而Java内存模型中规定所有变量都存储在主内存,主内存是共享内存区域,所有线程都可访问,但线程对变量的操作(读取赋值等)必须在工作内存中进行,首先要将变量从主内存拷贝到自己的工作空间,然后对变量进行操作,操作完成再将变量写回主内存,不能直接操作主内存中的变量,各个线程中的工作内存储存着主内存中的变量副本拷贝,因此不同的线程无法访问对方的工作内存,此案成间的通讯(传值) 必须通过主内存来完成,其简要访问过程如下图:\",\"image-20221109175055161\"]},\"288\":{\"h\":\"开始：\",\"t\":[\"通过前面对JMM的介绍,我们知道 各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存操作后再写回主内存中的. 这就可能存在一个线程AAA修改了共享变量X的值还未写回主内存中时 ,另外一个线程BBB又对内存中的一个共享变量X进行操作,但此时A线程工作内存中的共享比那里X对线程B来说并不不可见.这种工作内存与主内存同步延迟现象就造成了可见性问题.\"]},\"289\":{\"h\":\"2. 原子性\"},\"290\":{\"h\":\"复现：\",\"t\":[\"image-20200309174220675\",\"下面我们将一个简单的number++操作，转换为字节码文件一探究竟\",\"public class T1 { volatile int n = 0; public void add() { n++; } } public void add(); Code: 0: aload_0 1: dup 2: getfield #2 // Field n:I 5: iconst_1 6: iadd 7: putfield #2 // Field n:I 10: return \",\"我们能够发现 n++这条命令，被拆分成了3个指令\",\"执行getfield 从主内存拿到原始n\",\"执行iadd 进行加1操作\",\"执行putfileld 把累加后的值写回主内存\",\"假设我们没有加 synchronized那么第一步就可能存在着，三个线程同时通过getfield命令，拿到主存中的 n值，然后三个线程，各自在自己的工作内存中进行加1操作，但他们并发进行 iadd 命令的时候，因为只能一个进行写，所以其它操作会被挂起，假设1线程，先进行了写操作，在写完后，volatile的可见性，应该需要告诉其它两个线程，主内存的值已经被修改了，但是因为太快了，其它两个线程，陆续执行 iadd命令，进行写入操作，这就造成了其他线程没有接受到主内存n的改变，从而覆盖了原来的值，出现写丢失，这样也就让最终的结果少于20000\",\"自己的理解：由于调度算法有些线程执行着执行着会被挂起！\"]},\"291\":{\"h\":\"解决：\",\"t\":[\"synchronized（牛刀）\",\"使用原子包装类 AtomicInteger \",\"底层 CAS（Unsafe类、自旋锁）\"]},\"292\":{\"h\":\"3.\",\"t\":[\"计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令重排，一般分为以下三种：\",\"源代码 -> 编译器优化的重排 -> 指令并行的重排 -> 内存系统的重排 -> 最终执行指令 \",\"单线程环境里面确保最终执行结果和代码顺序的结果一致（因为就一个人，没人给你抢指令重排无所谓）\",\"处理器在进行重排序时，必须要考虑指令之间的****(具体看下面例子，例如先得有你妈才能有你)\",\"多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测。（例如高考，老师说先把会做的做了。不见得非得按卷子题目顺序来）\"]},\"293\":{\"h\":\"指令重排 - example 1\",\"t\":[\"public void mySort() { int x = 11; int y = 12; x = x + 5; y = x * x; } \",\"按照正常单线程环境，执行顺序是 1 2 3 4\",\"但是在多线程环境下，可能出现以下的顺序：\",\"2 1 3 4\",\"1 3 2 4\",\"上述的过程就可以当做是指令的重排，即内部执行顺序，和我们的代码顺序不一样\",\"但是指令重排也是有限制的，即不会出现下面的顺序\",\"4 3 2 1\",\"因为处理器在进行重排时候，必须考虑到指令之间的 数据依赖性\",\"因为步骤 4：需要依赖于 y的申明，以及x的申明，故因为存在数据依赖，无法首先执行\"]},\"294\":{\"h\":\"例子\",\"t\":[\"int a,b,x,y = 0\",\"线程1\",\"线程2\",\"x = a;\",\"y = b;\",\"b = 1;\",\"a = 2;\",\"x = 0; y = 0\",\"因为上面的代码，不存在数据的依赖性，因此编译器可能对数据进行重排\",\"线程1\",\"线程2\",\"b = 1;\",\"a = 2;\",\"x = a;\",\"y = b;\",\"x = 2; y = 1\",\"这样造成的结果，和最开始的就不一致了，这就是导致重排后，结果和最开始的不一样，因此为了防止这种结果出现，volatile就规定禁止指令重排，为了保证数据的一致性\"]},\"295\":{\"h\":\"指令重排 - example 2\",\"t\":[\"比如下面这段代码\",\"/** * ResortSeqDemo * * @author: 陌溪 * @create: 2020-03-10-16:08 */ public class ResortSeqDemo { int a= 0; boolean flag = false; public void method01() { a = 1; flag = true; } public void method02() { if(flag) { a = a + 5; System.out.println(\\\"reValue:\\\" + a); } } } \",\"我们按照正常的顺序，分别调用method01() 和 method02() 那么，最终输出就是 a = 6\",\"但是如果在多线程环境下，因为方法1 和 方法2，他们之间不能存在数据依赖的问题，因此原先的顺序可能是\",\"a = 1; flag = true; a = a + 5; System.out.println(\\\"reValue:\\\" + a); \",\"但是在经过编译器，指令，或者内存的重排后，可能会出现这样的情况\",\"flag = true; a = a + 5; System.out.println(\\\"reValue:\\\" + a); a = 1; \",\"也就是先执行 flag = true后，另外一个线程马上调用方法2，满足 flag的判断，最终让a + 5，结果为5，这样同样出现了数据不一致的问题\",\"为什么会出现这个结果：多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测。\",\"这样就需要通过volatile来修饰，来保证线程安全性\"]},\"296\":{\"h\":\"Volatile针对指令重排做了啥\",\"t\":[\"Volatile实现禁止指令重排优化，从而避免了多线程环境下程序出现乱序执行的现象\",\"首先了解一个概念，==内存屏障（Memory Barrier）==又称内存栅栏，是一个CPU指令，它的作用有两个：\",\"保证特定操作的顺序\",\"保证某些变量的内存可见性（利用该特性实现volatile的内存可见性）\",\"由于编译器和处理器都能执行指令重排的优化，如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说 通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。 内存屏障另外一个作用是刷新出各种CPU的缓存数，因此任何CPU上的线程都能读取到这些数据的最新版本。\",\"image-20200310162654437\",\"也就是过在Volatile的写 和 读的时候，加入屏障，防止出现指令重排的\"]},\"297\":{\"h\":\"线程安全获得保证\",\"t\":[\"工作内存与主内存同步延迟现象导致的可见性问题\",\"可通过synchronized或volatile关键字解决，他们都可以使一个线程修改后的变量立即对其它线程可见\",\"对于指令重排导致的可见性问题和有序性问题\",\"可以使用volatile关键字解决，因为volatile关键字的另一个作用就是禁止重排序优化\"]},\"298\":{\"h\":\"4. 使用场景\",\"t\":[\"单例模式\",\"读写锁手写缓存\",\"CAS 底层 JUC 包里大规模使用到\"]},\"299\":{\"h\":\"5. Volatile的应用\",\"t\":[\"一般我们写单例模式都是加 sychronized ，但是这样的话就整个代码都锁了（它包的这个方法）。为了数据一致性，并发性就下降了，实际只用锁一行\"]},\"300\":{\"h\":\"单例模式的逐步优化：\"},\"301\":{\"h\":\"1. DCL（Double Check Lock）双端检锁机制\",\"t\":[\"通俗的说：加锁前后都进行了一次判断，用 sychronized 同步代码块\",\" public static SingletonDemo getInstance() { if(instance == null) { // 同步代码段的时候，进行检测 synchronized (SingletonDemo.class) { if(instance == null) { instance = new SingletonDemo(); } } } return instance; } \",\"问题：因为有指令重排，可能运行一千万次会出现一次错误\",\"就是说，还没初始化完成（刚进第一个 if），又有一个线程来了，发现instance不为空，返回Instance，但实际没有完成初始化，这个对象还没创建成功，返回了一个寂寞\",\"原因是在某一个线程执行到第一次检测的时候，读取到 instance 不为null，instance的引用对象 可能没有完成实例化。因为 instance = new SingletonDemo()；可以分为以下三步进行完成：\",\"memory = allocate(); // 1、分配对象内存空间 instance(memory); // 2、初始化对象 instance = memory; // 3、设置instance指向刚刚分配的内存地址，此时instance != null \",\"但是我们通过上面的三个步骤，能够发现，步骤2 和 步骤3之间不存在 数据依赖关系，而且无论重排前 还是重排后，程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的。\",\"memory = allocate(); // 1、分配对象内存空间 instance = memory; // 3、设置instance指向刚刚分配的内存地址，此时instance != null，但是对象还没有初始化完成 instance(memory); // 2、初始化对象 \",\"这样就会造成什么问题呢？\",\"也就是当我们执行到重排后的步骤2，试图获取instance的时候，会得到null，因为对象的初始化还没有完成，而是在重排后的步骤3才完成，因此执行单例模式的代码时候，就会重新在创建一个instance实例\",\"指令重排只会保证串行语义的执行一致性（单线程），但并不会关系多线程间的语义一致性 \",\"所以当一条线程访问instance不为null时，由于instance实例未必已初始化完成，这就造成了线程安全的问题\",\"所以需要引入volatile，来保证出现指令重排的问题，从而保证单例模式的线程安全性\",\"private static volatile SingletonDemo instance = null; \"]},\"302\":{\"h\":\"2. + volatile 解决上述问题\",\"t\":[\"注意：是多线程环境\",\"XD 以下解释很清白了：\",\"uniqueInstance 采用 volatile 关键字修饰也是很有必要的， uniqueInstance = new Singleton(); 这段代码其实是分为三步执行：\",\"为 uniqueInstance 分配内存空间\",\"初始化 uniqueInstance\",\"将 uniqueInstance 指向分配的内存地址\",\"但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1->3->2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.htms\",\" private static volatile SingletonDemo instance = null; private SingletonDemo () { System.out.println(Thread.currentThread().getName() + \\\"\\\\t 我是构造方法SingletonDemo\\\"); } public static SingletonDemo getInstance() { if(instance == null) { // a 双重检查加锁多线程情况下会出现某个线程虽然这里已经为空，但是另外一个线程已经执行到d处 synchronized (SingletonDemo.class) //b { //c不加volitale关键字的话有可能会出现尚未完全初始化就获取到的情况。原因是内存模型允许无序写入 if(instance == null) { // d 此时才开始初始化 instance = new SingletonDemo(); } } } return instance; } \",\"CAS的全称是Compare-And-Swap，它是**CPU并发原语 **，是实现并发算法时常用到的一种技术\",\"所谓原语，一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。\",\"原语一旦开始执行，就要连续执行完，不允许中断 [1] 。\",\"它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的\",\"我们都知道，CAS 是一条 CPU 的原子指令（cmpxchg 指令），不会造成所谓的数据不一致问题，Unsafe 提供的 CAS 方法（如 compareAndSwapXXX）底层实现即为 CPU 指令 cmpxchg\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/basis/unsafe.html\"]},\"303\":{\"h\":\"1. 概念\",\"t\":[\"==CAS并发原语体现在Java语言中就是sun.misc.Unsafe类的各个方法。==调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令，这是一种完全依赖于硬件的功能，通过它实现了原子操作，再次强调，由于CAS是一种系统原语，原语属于操作系统用于范畴，是由若干条指令组成，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致的问题，也就是说CAS是线程安全的。\",\"为什么能保证原子性：靠的底层汇编\",\"这个就类似于SVN或者Git的版本号，如果没有人更改过，就能够正常提交，否者需要先将代码pull下来，合并代码后，然后提交\"]},\"304\":{\"h\":\"2. 底层原理：Unsafe.class（rt.jar）+ CAS 思想（自旋）\",\"t\":[\"多线程环境下不要用 i++ 要用 atomicInteger.getAndIncrement();\",\"这个方法其实底层调用的是 Unsafe 类下面的方法\",\"image-20200310203030720\",\"Unsafe是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地（Native）方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定的内存数据。Unsafe类存在sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中的CAS操作的执行依赖于Unsafe类的方法。\",\"总结：Unsafe 相当于jdk留的后门，可通过指针操作内存 有大量硬件级别的 CAS 原子操作\",\"注意Unsafe类的所有方法都是native修饰的，也就是说unsafe类中的方法都直接调用操作系统底层资源执行相应的任务 \",\"为什么Atomic修饰的包装类，能够保证原子性，依靠的就是底层的unsafe类\",\"Unsafe就是根据内存偏移地址获取数据的。\"]},\"305\":{\"h\":\"3. 自旋锁源码\",\"t\":[\"重要：看一下理解 √\",\"为什么用 CAS（两者都保证） 不用 synchronized（只保证一致性不保证并发性）\",\"image-20200310210701761\",\"var5：就是我们从主内存中拷贝到工作内存中的值(每次都要从主内存拿到最新的值到自己的本地内存，然后执行compareAndSwapInt()在再和主内存的值进行比较。因为线程不可以直接越过高速缓存，直接操作主内存，所以执行上述方法需要比较一次，在执行加1操作)\",\"那么操作的时候，需要比较工作内存中的值，和主内存中的值进行比较\",\"假设执行 compareAndSwapInt返回false，那么就一直执行 while方法，直到期望的值和真实值一样\",\"val1：AtomicInteger对象本身\",\"var2：该对象值得引用地址\",\"var4：需要变动的数量\",\"var5：用var1和var2找到的内存中的真实值 \",\"用该对象当前的值与var5比较\",\"如果相同，更新var5 + var4 并返回true\",\"如果不同，继续取值然后再比较，直到更新完成\",\"这里没有用synchronized，而用CAS，这样提高了并发性，也能够实现一致性，是因为每个线程进来后，进入的do while循环，然后不断的获取内存中的值，判断是否为最新，然后在进行更新操作。\",\"假设线程A和线程B同时执行getAndInt操作（分别跑在不同的CPU上）\",\"AtomicInteger里面的value原始值为3，即主内存中AtomicInteger的 value 为3，根据JMM模型，线程A和线程B各自持有一份价值为3的副本，分别存储在各自的工作内存\",\"线程A通过getIntVolatile(var1 , var2) 拿到value值3，这是线程A被挂起（该线程失去CPU执行权）\",\"线程B也通过getIntVolatile(var1, var2)方法获取到value值也是3，此时刚好线程B没有被挂起，并执行了compareAndSwapInt方法，比较内存的值也是3，成功修改内存值为4，线程B打完收工，一切OK\",\"这是线程A恢复，执行CAS方法，比较发现自己手里的数字3和主内存中的数字4不一致，说明该值已经被其它线程抢先一步修改过了，那么A线程本次修改失败，只能够重新读取后在来一遍了，也就是在执行do while\",\"线程A重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总能够看到，线程A继续执行compareAndSwapInt进行比较替换，直到成功。\",\"Unsafe类 + CAS思想： 也就是自旋，自我旋转\"]},\"306\":{\"h\":\"4. 底层汇编\",\"t\":[\"Unsafe类中的compareAndSwapInt是一个本地方法，该方法的实现位于unsafe.cpp中\",\"先想办法拿到变量value在内存中的地址\",\"通过Atomic::cmpxchg实现比较替换，其中参数X是即将更新的值，参数e是原内存的值\"]},\"307\":{\"h\":\"5. CAS缺点\",\"t\":[\"CAS不加锁，保证一次性，但是需要多次比较\",\"循环时间长，开销大（因为执行的是do while，如果比较不成功一直在循环，最差的情况，就是某个线程一直取到的值和预期值都不一样，这样就会无限循环）\",\"只能保证一个共享变量的原子操作 \",\"当对一个共享变量执行操作时，我们可以通过循环CAS的方式来保证原子操作\",\"但是对于多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候只能用锁来保证原子性\",\"引出来ABA问题？\"]},\"308\":{\"h\":\"6. ABA问题\",\"t\":[\"狸猫换太子\"]},\"309\":{\"h\":\"连环套路：\",\"t\":[\"从AtomicInteger引出下面的问题\",\"CAS -> Unsafe -> CAS底层思想 -> ABA -> 原子引用更新 -> 如何规避ABA问题\",\"抛出问题\",\"两个线程 t1、t2：t2执行比较快2s，t1慢要10s。（时间差）\",\"主内存：A\",\"t2 快把 A 改成 B，又改成 A\",\"t1 可以执行了，看了下还是 A 觉得没问题！但真的没问题吗？（首尾是一样的，但中途有猫腻被改过）\",\"尽管线程t1的CAS操作成功，但是不代表这个过程就是没有问题的\",\"ABA我听懂了，但是没想到什么场景会产生危害\",\"假设有一个库存管理系统，其中有一个共享的原子变量stock表示某个商品的库存数量。\",\"初始状态：stock的值为10，表示商品的库存数量为10个。\",\"线程A和线程B同时读取stock的值为10。\",\"线程A将stock的值减少2，并执行一些操作。\",\"线程B将stock的值减少3，并执行一些操作。\",\"线程A将stock的值增加2，并执行一些操作。\",\"线程B将stock的值增加3，并执行一些操作。\",\"在这个简化的例子中，线程A和线程B分别对stock进行了多次操作，其中包括减少和增加操作。由于CAS操作只关注stock的当前值，而不考虑过程中的变化，可能导致ABA问题的发生。\",\"假设线程A的操作执行顺序是减少2，然后增加2，此时stock的值仍为10，CAS操作可以成功。然而，线程B在线程A执行过程中执行了减少3和增加3的操作，并将stock的值从10减少到7，然后又增加回10。由于CAS操作只检查当前值与预期值是否相等，而不考虑过程中的变化，线程B的操作可能会被误判为未修改过stock的值。\",\"为了解决这个问题，可以使用带有版本号的原子引用或其他适当的同步机制，以确保CAS操作同时考虑值的变化和状态的变化，避免ABA问题的发生。\",\"我把太子换成狸猫，中途打了太子一顿，再换回太子。但中途太子受到了伤害\",\"所以在A线程的10秒内，A并没有进行修改写回主物理内存 CAS的好处就是保证的数据一致性的同时，也保证了并发性 CPU底层的指令原语的原子性是在修改的时候保证不受其他线程抢断\",\"解决：原子引用 + 新增一种机制，也就是修改版本号，类似于时间戳的概念\"]},\"310\":{\"h\":\"原子引用\",\"t\":[\"原子引用其实和原子包装类是差不多的概念，就是将一个java类，用原子引用类进行包装起来，那么这个类就具备了原子性\",\" User z3 = new User(\\\"z3\\\", 22); User l4 = new User(\\\"l4\\\", 25); // 创建原子引用包装类 AtomicReference<User> atomicReference = new AtomicReference<>(); // 现在主物理内存的共享变量，为z3 atomicReference.set(z3); // 比较并交换，如果现在主物理内存的值为z3，那么交换成l4 System.out.println(atomicReference.compareAndSet(z3, l4) + \\\"\\\\t \\\" + atomicReference.get().toString()); // 比较并交换，现在主物理内存的值是l4了，但是预期为z3，因此交换失败 System.out.println(atomicReference.compareAndSet(z3, l4) + \\\"\\\\t \\\" + atomicReference.get().toString()); \"]},\"311\":{\"h\":\"版本号\",\"t\":[\"也就是每次更新的时候，需要比较期望值和当前值，以及期望版本号和当前版本号\"]},\"312\":{\"h\":\"\",\"t\":[\"但是这个CAS有没有问题呢？肯定是有的。比如说大量的线程同时并发修改一个AtomicInteger，可能有很多线程会不停的自旋，进入一个无限重复的循环中。\",\"这些线程不停地获取值，然后发起CAS操作，但是发现这个值被别人改过了，于是再次进入下一个循环，获取值，发起CAS操作又失败了，再次进入下一个循环。\",\"在大量线程高并发更新AtomicInteger的时候，这种问题可能会比较明显，导致大量线程空循环，自旋转，性能和效率都不是特别好。\",\"于是，当当当当，Java 8推出了一个新的类，LongAdder，他就是尝试使用分段CAS以及自动分段迁移的方式来大幅度提升多线程高并发执行CAS操作的性能！\"]},\"313\":{\"h\":\"1）Java锁之公平锁和非公平锁\"},\"314\":{\"h\":\"1. 概念\"},\"315\":{\"h\":\"公平锁\",\"t\":[\"是指多个线程按照申请锁的顺序来获取锁，类似于排队买饭，先来后到，先来先服务，就是公平的，也就是队列\"]},\"316\":{\"h\":\"非公平锁\",\"t\":[\"是指多个线程获取锁的顺序，并不是按照申请锁的顺序，有可能申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转，或者饥饿的线程（也就是某个线程一直得不到锁）\"]},\"317\":{\"h\":\"如何创建\",\"t\":[\"并发包中ReentrantLock的创建可以指定析构函数的boolean类型来得到公平锁或者非公平锁，默认是非公平锁\",\"/** * 创建一个可重入锁，true 表示公平锁，false 表示非公平锁。默认非公平锁 */ Lock lock = new ReentrantLock(true); ####### 两个构造方法 /** * Creates an instance of ReentrantLock with the given fairness policy. * Params: fair – true if this lock should use a fair ordering policy */ public ReentrantLock(boolean fair) { sync = fair ? new FairSync() : new NonfairSync(); } /** * Creates an instance of {@code ReentrantLock}. * This is equivalent to using {@code ReentrantLock(false)}. */ public ReentrantLock() { sync = new NonfairSync(); } \"]},\"318\":{\"h\":\"两者区别\",\"t\":[\"公平锁：就是很公平，在并发环境中，每个线程在获取锁时会先查看此锁维护的等待队列，如果为空，或者当前线程是等待队列中的第一个，就占用锁，否者就会加入到等待队列中，以后安装FIFO的规则从队列中取到自己\",\"非公平锁： 非公平锁比较粗鲁，上来就直接尝试占有锁，如果尝试失败，就再采用类似公平锁那种方式。\"]},\"319\":{\"h\":\"题外话\",\"t\":[\"Java ReenttrantLock通过构造函数指定该锁是否公平，默认是非公平锁，因为非公平锁的优点在于吞吐量比公平锁大，对于synchronized而言，也是一种非公平锁\"]},\"320\":{\"h\":\"2）可重入锁和递归锁ReentrantLock\"},\"321\":{\"h\":\"概念\",\"t\":[\"可重入锁就是递归锁（例如湘就是湖南）\",\"GPT 真正理解了：A->B(inner->A)\",\"假设有一个方法 A，它是一个 synchronized 方法，然后在方法 A 中调用了另一个方法 B，也是一个 synchronized 方法，而且方法 B 中又调用了方法 A，那么就会出现死锁的问题。这是因为当方法 A 调用方法 B 时，它已经获取了方法 A 所对应的锁，但是当方法 B 又调用方法 A 时，由于方法 A 已经被锁住了，所以它无法获得方法 A 所对应的锁，从而导致死锁的问题。\",\"如果使用可重入锁，就可以避免出现这种死锁的问题。在可重入锁中，同一个线程在获取同一个锁的时候，只需要增加该锁的计数器即可，而不需要重新获取锁，所以即使在方法 A 中调用方法 B，也不会出现死锁的问题。这就是可重入锁的好处。\",\"指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取到该锁的代码，在同一线程在外层方法获取锁的时候，在进入内层方法会自动获取锁\",\"也就是说：线程可以进入任何一个它已经拥有的锁所同步的代码块\",\"ReentrantLock / Synchronized 就是一个典型的可重入锁\"]},\"322\":{\"h\":\"代码\",\"t\":[\"可重入锁就是，在一个method1方法中加入一把锁，方法2也加锁了，那么他们拥有的是同一把锁\",\"public synchronized void method1() { method2(); } public synchronized void method2() { } \",\"也就是说我们只需要进入method1后，那么它也能直接进入method2方法，因为他们所拥有的锁，是同一把。\",\"比喻：进了大门，厕所卧室就不需要加锁了\"]},\"323\":{\"h\":\"作用\",\"t\":[\"🤺 可重入锁的最大作用就是避免死锁\"]},\"324\":{\"h\":\"3） 自旋锁\",\"t\":[\"自旋锁：spinlock，是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU\",\"原来提到的比较并交换，底层使用的就是自旋，自旋就是多次尝试，多次访问，不会阻塞的状态就是自旋。\"]},\"325\":{\"h\":\"优缺点\",\"t\":[\"优点：循环比较获取直到成功为止，没有类似于wait的阻塞\",\"缺点：当不断自旋的线程越来越多的时候，会因为执行while循环不断的消耗CPU资源\"]},\"326\":{\"h\":\"4） 独占锁（写锁） / 共享锁（读锁） / 互斥锁\",\"t\":[\"多个线程 同时读一个资源类没有任何问题，所以为了满足并发量，读取共享资源应该可以同时进行，但是如果一个线程想去写共享资源，就不应该再有其它线程可以对该资源进行读或写\",\"读-读：能共存\",\"读-写：不能共存\",\"写-写：不能共存\",\"/** * 创建一个读写锁 * 它是一个读写融为一体的锁，在使用的时候，需要转换 */ private ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock(); // 创建一个写锁 rwLock.writeLock().lock(); // 写锁 释放 rwLock.writeLock().unlock(); // 创建一个读锁 rwLock.readLock().lock(); // 读锁 释放 rwLock.readLock().unlock(); \",\"写入操作是一个一个线程进行执行的，并且中间不会被打断，而读操作的时候，是同时5个线程进入，然后并发读取操作\"]},\"327\":{\"h\":\"5）为什么Synchronized无法禁止指令重排，却能保证有序性\",\"t\":[\"as-if-serial 学习，拔高自己的高度！（现在看的迷迷糊糊）\"]},\"328\":{\"h\":\"前言\",\"t\":[\"首先我们要分析下这道题，这简单的一个问题，其实里面还是包含了很多信息的，要想回答好这个问题，面试者至少要知道一下概念：\",\"Java内存模型\",\"并发编程有序性问题\",\"指令重排\",\"synchronized锁\",\"可重入锁\",\"排它锁\",\"as-if-serial语义\",\"单线程&多线程\"]},\"329\":{\"h\":\"标准解答\",\"t\":[\"为了进一步提升计算机各方面能力，在硬件层面做了很多优化，如处理器优化和指令重排等，但是这些技术的引入就会导致有序性问题。\",\"先解释什么是有序性问题，也知道是什么原因导致的有序性问题\",\"我们也知道，最好的解决有序性问题的办法，就是禁止处理器优化和指令重排，就像volatile中使用内存屏障一样。\",\"表明你知道啥是指令重排，也知道他的实现原理\",\"但是，虽然很多硬件都会为了优化做一些重排，但是在Java中，不管怎么排序，都不能影响单线程程序的执行结果。这就是as-if-serial语义，所有硬件优化的前提都是必须遵守as-if-serial语义。\",\"as-if-serial语义把单线程程序保护了起来，遵守as-if-serial语义的编译器，runtime 和处理器共同为编写单线程程序的程序员创建了一个幻觉：单线程程序是按程序的顺序来执行的。as-if-serial语义使单线程程序员无需担心重排序会 干扰他们，也无需担心内存可见性问题。\",\"重点！解释下什么是as-if-serial语义，因为这是这道题的第一个关键词，答上来就对了一半了\",\"再说下synchronized，他是Java提供的锁，可以通过他对Java中的对象加锁，并且他是一种排他的、可重入的锁。\",\"所以，当某个线程执行到一段被synchronized修饰的代码之前，会先进行加锁，执行完之后再进行解锁。在加锁之后，解锁之前，其他线程是无法再次获得锁的，只有这条加锁线程可以重复获得该锁。\",\"介绍synchronized的原理，这是本题的第二个关键点，到这里基本就可以拿满分了。\",\"synchronized通过排他锁的方式就保证了同一时间内，被synchronized修饰的代码是单线程执行的。所以呢，这就满足了as-if-serial语义的一个关键前提，那就是单线程，因为有as-if-serial语义保证，单线程的有序性就天然存在了。\"]},\"330\":{\"h\":\"来源\",\"t\":[\"https://mp.weixin.qq.com/s/Pd6dOXaMQFUHfAUnOhnwtw\",\"基本看例子理解了就行\"]},\"331\":{\"h\":\"1）CountDownLatch 闭锁\",\"t\":[\"指定第八个线程 main 得在其余 7 个线程执行完才能执行（计数器倒计数为0就执行）\"]},\"332\":{\"h\":\"概念\",\"t\":[\"让一些线程阻塞直到另一些线程完成一系列操作才被唤醒\",\"CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程就会被阻塞。其它线程调用CountDown方法会将计数器减1（调用CountDown方法的线程不会被阻塞），当计数器的值变成零时，因调用await方法被阻塞的线程会被唤醒，继续执行\"]},\"333\":{\"h\":\"场景\",\"t\":[\"现在有这样一个场景，假设一个自习室里有7个人，其中有一个是班长，班长的主要职责就是在其它6个同学走了后，关灯，锁教室门，然后走人，因此班长是需要最后一个走的，那么有什么方法能够控制班长这个线程是最后一个执行，而其它线程是随机执行的\"]},\"334\":{\"h\":\"解决方案\",\"t\":[\"这个时候就用到了CountDownLatch，计数器了。我们一共创建6个线程，然后计数器的值也设置成6\",\"// 计数器 CountDownLatch countDownLatch = new CountDownLatch(6); \",\"然后每次学生线程执行完，就让计数器的值减1\",\"for (int i = 0; i <= 6; i++) { new Thread(() -> { System.out.println(Thread.currentThread().getName() + \\\"\\\\t 上完自习，离开教室\\\"); countDownLatch.countDown(); }, String.valueOf(i)).start(); } \",\"最后我们需要通过CountDownLatch的await方法来控制班长主线程的执行，这里 countDownLatch.await()可以想成是一道墙，只有当计数器的值为0的时候，墙才会消失，主线程才能继续往下执行\",\"countDownLatch.await(); System.out.println(Thread.currentThread().getName() + \\\"\\\\t 班长最后关门\\\"); \",\"不加CountDownLatch的执行结果，我们发现main线程提前已经执行完成了\",\"1 上完自习，离开教室 0 上完自习，离开教室 main 班长最后关门 2 上完自习，离开教室 3 上完自习，离开教室 4 上完自习，离开教室 5 上完自习，离开教室 6 上完自习，离开教室 \",\"引入CountDownLatch后的执行结果，我们能够控制住main方法的执行，这样能够保证前提任务的执行\",\"0 上完自习，离开教室 2 上完自习，离开教室 4 上完自习，离开教室 1 上完自习，离开教室 5 上完自习，离开教室 6 上完自习，离开教室 3 上完自习，离开教室 main 班长最后关门 \"]},\"335\":{\"h\":\"完整代码\",\"t\":[\"public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(7); for (int i = 0; i <= 6; i++) { new Thread(() -> { System.out.println(Thread.currentThread().getName() + \\\"\\\\t 上完自习，离开教室\\\"); countDownLatch.countDown(); }, String.valueOf(i)).start(); } countDownLatch.await(); System.out.println(Thread.currentThread().getName() + \\\"\\\\t 班长最后关门\\\"); } \"]},\"336\":{\"h\":\"2）CyclicBarrier\",\"t\":[\"第一个线程执行的条件：后七个执行完才能执行\"]},\"337\":{\"h\":\"概念\",\"t\":[\"和CountDownLatch相反，需要集齐七颗龙珠，召唤神龙。也就是做加法，开始是0，加到某个值的时候就执行\",\"CyclicBarrier的字面意思就是可循环（cyclic）使用的屏障（Barrier）。它要求做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await方法\"]},\"338\":{\"h\":\"案例\",\"t\":[\"集齐7个龙珠，召唤神龙的Demo，我们需要首先创建CyclicBarrier\",\"/** * 定义一个循环屏障，参数1：需要累加的值，参数2 需要执行的方法 */ CyclicBarrier cyclicBarrier = new CyclicBarrier(7, () -> { System.out.println(\\\"召唤神龙\\\"); }); \",\"然后同时编写七个线程，进行龙珠收集，但一个线程收集到了的时候，我们需要让他执行await方法，等待到7个线程全部执行完毕后，我们就执行原来定义好的方法\",\" for (int i = 0; i < 7; i++) { final Integer tempInt = i; new Thread(() -> { System.out.println(Thread.currentThread().getName() + \\\"\\\\t 收集到 第\\\" + tempInt + \\\"颗龙珠\\\"); try { // 先到的被阻塞，等全部线程完成后，才能执行方法 cyclicBarrier.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } }, String.valueOf(i)).start(); } \"]},\"339\":{\"h\":\"完整代码\",\"t\":[\"public static void main(String[] args) { //定义一个循环屏障，参数1：需要累加的值（在触发障碍之前必须调用的线程数量），参数2 需要执行的方法 CyclicBarrier barrier = new CyclicBarrier(7, () -> { System.out.println(\\\"召唤神龙\\\"); }); for (int i = 0; i < 7; i++) { final Integer tempInt = i; new Thread(() -> { System.out.println(Thread.currentThread().getName() + \\\"\\\\t 收集到 第\\\" + tempInt + \\\"颗龙珠\\\"); try { // 先到的被阻塞，等全部线程完成后，才能执行方法 // 我的理解：需要7个线程摸一下这个方法 barrier.await(); } catch (Exception e) { e.printStackTrace(); } }, String.valueOf(i)).start(); } } \"]},\"340\":{\"h\":\"3）Semaphore：信号量\"},\"341\":{\"h\":\"概念\",\"t\":[\"信号量主要用于两个目的\",\"一个是用于共享资源的互斥使用\",\"另一个用于并发线程数的控制\"]},\"342\":{\"h\":\"代码\",\"t\":[\"我们模拟一个抢车位的场景，假设一共有6个车，3个停车位\",\"那么我们首先需要定义信号量为3，也就是3个停车位\",\"/** * 初始化一个信号量为3，默认是false 非公平锁， 模拟3个停车位 */ Semaphore semaphore = new Semaphore(3, false); \",\"然后我们模拟6辆车同时并发抢占停车位，但第一个车辆抢占到停车位后，信号量需要减1\",\"// 代表一辆车，已经占用了该车位 semaphore.acquire(); // 抢占 \",\"同时车辆假设需要等待3秒后，释放信号量\",\"// 每个车停3秒 try { TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } \",\"最后车辆离开，释放信号量\",\"// 释放停车位 semaphore.release(); \"]},\"343\":{\"h\":\"完整代码\",\"t\":[\"public static void main(String[] args) { // 还有一个构造方法只填数，默认非公平锁 NonfairSync // 模拟3个停车位 Semaphore semaphore = new Semaphore(3, false); // 模拟6部车 for (int i = 1; i <= 6; i++) { new Thread(() -> { try { // 代表一辆车，已经占用了该车位 semaphore.acquire(); System.out.println(Thread.currentThread().getName() + \\\"\\\\t 抢到车位\\\"); // 每个车停3秒 TimeUnit.SECONDS.sleep(3); System.out.println(Thread.currentThread().getName() + \\\"\\\\t 离开车位\\\"); } catch (InterruptedException e) { e.printStackTrace(); } finally { // 释放停车位 semaphore.release(); } }, String.valueOf(i)).start(); } } \"]},\"344\":{\"h\":\"4）阻塞队列\",\"t\":[\"只有知道阻塞队列，才能真正懂线程池。我这里没有深入【待补】\"]},\"345\":{\"h\":\"概念\",\"t\":[\"当阻塞队列是空时，从队列中获取元素的操作将会被阻塞\",\"当蛋糕店的柜子空的时候，无法从柜子里面获取蛋糕\",\"当阻塞队列是满时，从队列中添加元素的操作将会被阻塞\",\"当蛋糕店的柜子满的时候，无法继续向柜子里面添加蛋糕了\",\"也就是说 试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其它线程往空的队列插入新的元素\",\"同理，试图往已经满的阻塞队列中添加新元素的线程，直到其它线程往满的队列中移除一个或多个元素，或者完全清空队列后，使队列重新变得空闲起来，并后续新增\"]},\"346\":{\"h\":\"为什么要用？\",\"t\":[\"去海底捞吃饭，大厅满了，需要进候厅等待，但是这些等待的客户能够对商家带来利润，因此我们非常欢迎他们阻塞\",\"在多线程领域：所谓的阻塞，在某些清空下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动唤醒\"]},\"347\":{\"h\":\"为什么需要BlockingQueue\",\"t\":[\"好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都帮你一手包办了\",\"在concurrent包发布以前，在多线程环境下，我们每个程序员都必须自己取控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。\"]},\"348\":{\"h\":\"生产者消费者模式\",\"t\":[\"有个虚假唤醒问题，需要用 while 循坏。我这里暂时掠过，用到的时候再回头看别人笔记 Coding\",\"在回顾发现一个虚假唤醒的 https://blog.csdn.net/jerry11112/article/details/114481542\"]},\"349\":{\"h\":\"5）Synchronized和Lock的区别\"},\"350\":{\"h\":\"前言\",\"t\":[\"早期的时候我们对线程的主要操作为：\",\"synchronized wait notify\",\"然后后面出现了替代方案\",\"lock await signal\",\"image-20200317101210376\"]},\"351\":{\"h\":\"问题\"},\"352\":{\"h\":\"synchronized 和 lock 有什么区别？用新的lock有什么好处？举例说明\",\"t\":[\"synchronized 和 lock 有什么区别？用新的lock有什么好处？举例说明\",\"1）synchronized属于JVM层面，属于java的关键字\",\"monitorenter（底层是通过monitor对象来完成，其实wait/notify等方法也依赖于monitor对象 只能在同步块或者方法中才能调用 wait/ notify等方法）\",\"Lock是具体类（java.util.concurrent.locks.Lock）是api层面的锁 new\",\"javap 看底层\",\"image-20221126101938997\",\"2）使用方法：\",\"synchronized：不需要用户去手动释放锁，当synchronized代码执行后，系统会自动让线程释放对锁的占用\",\"ReentrantLock：则需要用户去手动释放锁，若没有主动释放锁，就有可能出现死锁的现象，需要lock() 和 unlock() 配置try catch语句来完成\",\"3）等待是否中断\",\"synchronized：不可中断，除非抛出异常或者正常运行完成\",\"ReentrantLock：可中断，可以设置超时方法 \",\"设置超时方法，trylock(long timeout, TimeUnit unit)\",\"lockInterrupible() 放代码块中，调用interrupt() 方法可以中断\",\"4）加锁是否公平\",\"synchronized：非公平锁\",\"ReentrantLock：默认非公平锁，构造函数可以传递boolean值，true为公平锁，false为非公平锁\",\"5）锁绑定多个条件Condition\",\"synchronized：没有，要么随机，要么全部唤醒\",\"ReentrantLock：用来实现分组唤醒需要唤醒的线程，可以精确唤醒，而不是像synchronized那样，要么随机，要么全部唤醒 \",\"精准唤醒 synchronized 能实现，但是很麻烦\",\"我的问题：Condition 的作用\",\"简单点，就是替代对象监视器了。它的两个常用方法分别是await()和signal()，相当于之前的wait()和notify()。我们具体来看代码实现\",\"package com.zzq.vlt; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; /** * Synchronized 和 Lock的区别 */ class ShareResource { // A 1 B 2 c 3 private int number = 1; // 创建一个重入锁 private Lock lock = new ReentrantLock(); // 这三个相当于备用钥匙 private Condition condition1 = lock.newCondition(); private Condition condition2 = lock.newCondition(); private Condition condition3 = lock.newCondition(); public void print5() { lock.lock(); try { // 判断 while (number != 1) { // 不等于1，需要等待 condition1.await(); } // 干活 for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName() + \\\"\\\\t \\\" + number + \\\"\\\\t\\\" + i); } // 唤醒 （干完活后，需要通知B线程执行） number = 2; // 通知2号去干活了 condition2.signal(); } catch (Exception e) { e.printStackTrace(); } finally { lock.unlock(); } } public void print10() { lock.lock(); try { // 判断 while (number != 2) { // 不等于2，需要等待 condition2.await(); } // 干活 for (int i = 0; i < 10; i++) { System.out.println(Thread.currentThread().getName() + \\\"\\\\t \\\" + number + \\\"\\\\t\\\" + i); } // 唤醒 （干完活后，需要通知C线程执行） number = 3; // 通知2号去干活了 condition3.signal(); } catch (Exception e) { e.printStackTrace(); } finally { lock.unlock(); } } public void print15() { lock.lock(); try { // 判断 while (number != 3) { // 不等于3，需要等待 condition3.await(); } // 干活 for (int i = 0; i < 15; i++) { System.out.println(Thread.currentThread().getName() + \\\"\\\\t \\\" + number + \\\"\\\\t\\\" + i); } // 唤醒 （干完活后，需要通知C线程执行） number = 1; // 通知1号去干活了 condition1.signal(); } catch (Exception e) { e.printStackTrace(); } finally { lock.unlock(); } } } public class SyncAndReentrantLockDemo { public static void main(String[] args) { ShareResource shareResource = new ShareResource(); new Thread(() -> { for (int i = 0; i < 10; i++) { shareResource.print5(); } }, \\\"A\\\").start(); new Thread(() -> { for (int i = 0; i < 10; i++) { shareResource.print10(); } }, \\\"B\\\").start(); new Thread(() -> { for (int i = 0; i < 10; i++) { shareResource.print15(); } }, \\\"C\\\").start(); } } \",\"主要是 GUlimall Movies + 部分 JUC Movies\"]},\"353\":{\"h\":\"1.异步\",\"t\":[\"注意：测试类测不出多线程的效果\",\"原因：junit在运行时，在主线程结束后就关闭了进程，不会等待各个线程运行结束，junit源码可见\"]},\"354\":{\"h\":\"1.1 初始化线程的 4 种方式\",\"t\":[\"1）、继承 Thread 2）、实现 Runnable 接口 3）、实现 Callable 接口 + FutureTask （可以拿到返回结果，可以处理异常）4）、线程池\",\"都是靠着 Thread 的 start() 启动，而new的这个 Thread 都是直接或者间接实现了 Runnable 接口\"]},\"355\":{\"h\":\"1）Thread 方式启动\",\"t\":[\"​ new thread01().start();\"]},\"356\":{\"h\":\"2）Runnable\",\"t\":[\"​ new Thread(new runnable01()).start();\"]},\"357\":{\"h\":\"3）Callable+FutureTask 【陌生】\",\"t\":[\"/*好像相对上面两个来说 可以拿返回值！！！这才是重点*/ //以下语句也可替换成线程池版本 Future<Singleton04> futureTask1 = pool.submit(callable); FutureTask<Integer> futureTask = new FutureTask<>(new callable01()); //FutureTask 间接实现了 Runnable new Thread(futureTask).start(); //阻塞等待整个线程执行完成,获取返回结果 你可以把这个get放在逻辑最后面,不影响其他逻辑的执行 System.out.println(futureTask.get()); //get()获取 run()的返回值 \",\"4）线程池【ExecutorService】\"]},\"358\":{\"h\":\"\"},\"359\":{\"h\":\"2.1 池化技术\",\"t\":[\"比较常用的池化技术还是很多：1）线程池 2）连接池 3）内存池 4）对象池\",\"Java中的线程池是通过Executor框架实现的，该框架中用到了Executor，Executors，ExecutorService，ThreadPoolExecutor这几个类。\",\"补充-代码书写规范：一般 Set 注入，构造方法注入。能传接口就传接口（写：足够的抽象往高处写。传：足够的落地往细节传）\",\"屁股后带 s 的辅助工具类：\",\"Array Arrays\",\"Collection Colletcions\",\"Executor Executors\"]},\"360\":{\"h\":\"2.2 线程池实际中使用哪一个\",\"t\":[\"（超级大坑警告）你在工作中单一的/固定数的/可变的三种创建线程池的方法，你用那个多？\",\"答案是一个都不用，我们生产上只能使用自定义的\",\"Executors vs ThreadPoolExecutor\"]},\"361\":{\"h\":\"1）Executors 工具类\",\"t\":[\"//注意这个是属性，但是最好还是在方法中先写会有提示！然后再剪切到属性。 //不然光在属性中写点方法没提示不说左边也不给自动生成，光只有右半边会报错就又要去源码copy public static ExecutorService pool = Executors.newFixedThreadPool(10);//注意带了 s 是Executors工具类 pool.execute(new thread01()); //给线程池直接提交任务 注意submit() 有返回值，execute()没 \"]},\"362\":{\"h\":\"2）new ThreadPoolExecutor(线程池七大参数)\",\"t\":[\"参数是面试重点 ---> 线程池建议用原生是为了规避资源耗尽的风险，也就是 OOM\",\"corePoolSize – the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set\",\"maximumPoolSize – the maximum number of threads to allow in the pool\",\"keepAliveTime – when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.\",\"解雇临时工，针对核心线程数外的线程超出这个时间还没有被使用就解雇\",\"unit – the time unit for the keepAliveTime argument\",\"workQueue – the queue to use for holding tasks before they are executed. This queue will hold only the Runnable tasks submitted by the execute method.\",\"阻塞队列-如果任务有很多,就会将目前多的任务放在队列里面。只要有线程空闲,就会去队列里面取出新的任务继续执行\",\"threadFactory – the factory to use when the executor creates a new thread\",\"一般默认的，除非想自定义比如想给线程名字一个约束\",\"RejectedExecutionHandler handler – the handler to use when execution is blocked because the thread bounds and queue capacities are reached\",\"如果队列和maximumPoolSize要满了,按照我们指定的拒绝策略拒绝执行任务\",\"丢老的 DiscardOldestPolicy、丢新的AbortPolicy 抛异常 DiscardPolicy 不抛、只执行run方法[同步]CallerRunsPolicy...\"]},\"363\":{\"h\":\"3）运行流程：\",\"t\":[\"线程池创建，准备好 core 数量的核心线程，准备接受任务\",\"新的任务进来，用 core 准备好的空闲线程执行。 \",\"core 满了，就将再进来的任务放入阻塞队列中。空闲的core 就会自己去阻塞队列获取任务执行\",\"阻塞队列满了，就直接开新线程执行，最大只能开到 max 指定的数量\",\"max 都执行好了。Max-core 数量空闲的线程会在 keepAliveTime 指定的时间后自动销毁。最终保持到 core 大小\",\"如果线程数开到了 max 的数量，还有新任务进来，就会使用reject 指定的拒绝策略进行处理\",\"所有的线程创建都是由指定的 factory 创建的。\",\"new ThreadPoolExecutor(5, 200, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<>(100000), //这里注意要填 capacity 不填默认 this(Integer.MAX_VALUE); 内存不够 Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy());//抛出异常，并且丢弃掉任务 \"]},\"364\":{\"h\":\"4）面试： 一个线程池 core 7； max 20 ，queue：50，100 并发进来怎么分配的；\",\"t\":[\"先有 7 个能直接得到执行，接下来 50 个进入队列排队，在多开 13 个继续执行。现在70 个被安排上了。剩下 30 个默认拒绝策略。\"]},\"365\":{\"h\":\"5）Executors 常见的 4 种线程池\",\"t\":[\"newCachedThreadPool：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程\",\"newFixedThreadPool：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\",\"newScheduledThreadPool：创建一个定长线程池，支持定时及周期性任务执行。\",\"newSingleThreadExecutor：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。【秒杀确保数据一致性】\"]},\"366\":{\"h\":\"6）Executors 中JDK已经给你提供了，为什么不用?\",\"t\":[\"3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。\",\"说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。 如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。\",\"4.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。\",\"说明：Executors 返回的线程池对象的弊端如下：\",\"1） FixedThreadPool 和 SingleThreadPool： 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。\",\"2） CachedThreadPool： 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。\",\"阿里巴巴《Java 开发手册》\"]},\"367\":{\"h\":\"7）开发中为什么使用线程池\",\"t\":[\"降低资源的消耗 \",\"通过重复利用已经创建好的线程降低线程的创建和销毁带来的损耗\",\"提高响应速度 \",\"因为线程池中的线程数没有超过线程池的最大上限时，有的线程处于等待分配任务的状态，当任务来时无需创建新的线程就能执行\",\"提高线程的可管理性 \",\"线程池会根据当前系统特点对池内的线程进行优化处理，减少创建和销毁线程带来的系统开销。无限的创建和销毁线程不仅消耗系统资源，还降低系统的稳定性，使用线程池进行统一分配\"]},\"368\":{\"h\":\"8）项目中使用\"},\"369\":{\"h\":\"一、MyThreadConfig.java\",\"t\":[\"@Bean public ThreadPoolExecutor getPool(ThreadPoolConfigProperties properties) //properties放前3个常用的参数 \"]},\"370\":{\"h\":\"二、ThreadPoolConfigProperties.java\",\"t\":[\"@Component @ConfigurationProperties(prefix = \\\"gulimall.thread\\\") @Data public class ThreadPoolConfigProperties \"]},\"371\":{\"h\":\"三、Use\",\"t\":[\"@Autowired private ThreadPoolExecutor executor; 结合 CompletableFuture 使用，这个类的一些API第二个参数就放上面注入的线程池！ \"]},\"372\":{\"h\":\"\",\"t\":[\"Promise 的感觉， 嵌套 调用，变成 链式 调用 能提升系统的性能和吞吐量！\",\"vs @Async\",\"需要注意的是，@Async 是基于线程池的异步执行方式，而 CompletableFuture 可以更加灵活地控制异步执行的方式，例如使用指定的线程池、设置超时等。\",\"这是 @Async 和 CompletableFuture 两种常见的异步编程方式，你可以根据具体的需求选择合适的方式来实现异步操作。\",\"业务场景： 查询商品详情页的逻辑比较复杂，有些数据还需要远程调用，必然需要花费更多的时间。\",\"假如商品详情页的每个查询，需要如下标注的时间才能完成 那么，用户需要 5.5s 后才能看到商品详情页的内容。很显然是不能接受的。如果有多个线程同时完成这 6 步操作，也许只需要 1.5s 即可完成响应。\",\"还需要考虑关联性，例如 4 需要 1、2、3 的结果才能执行 -> 异步编排，别的线程需要这个结果，肯定的拿到这个结构来能执行啊 Future.get() 会阻塞\"]},\"373\":{\"h\":\"1）whenComplete(res,exception) 方法完成后的感知，看下面例子\"},\"374\":{\"h\":\"2）handle(res,exception) 方法完成后的处理，相对上面可以 return\",\"t\":[\" public static ExecutorService pool = Executors.newFixedThreadPool(10); CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {//如调用 runAsync() 则是不带返回值 System.out.println(Thread.currentThread().getName() + \\\" Begin.\\\"); int c = 10 / 0; System.out.println(Thread.currentThread().getName() + \\\" End.\\\"); return c; }, pool).whenComplete((res,exception)->{ //虽然能得到异常信息,但是没法修改返回数据. System.out.println(\\\"异步任务成功完成了...结果是:\\\"+res+\\\";异常是:\\\"+exception); }).exceptionally(throwable -> { //可以感知异常,同时返回默认值 return 10; }); Integer integer = future.get(); \"]},\"375\":{\"h\":\"3）线程串行化方法\",\"t\":[\"下面这三组API区别：是否需要拿上一个的返回值，以及自己是不是要return -> 第一组感知上个返回值自己也返回、二、感知上个返回值、三、只执行\",\"倒着看由简入繁\"]},\"376\":{\"h\":\"4）两任务组合 - 都要完成 -> 解决上面一开始说的关联性的问题\",\"t\":[\"任务一二完后我才做 xxx / 这两个任务完成其中一个我就开始 / 所有任务执行完我才做 一些API同串行化的感觉返回值要不要那一块\"]},\"377\":{\"h\":\"3）项目中使用\",\"t\":[\"图上的6步执行获取6个CompletableFuture，最后CompletableFuture.allOf再return\",\"com.zzq.gulimall.product.service.impl.SkuInfoServiceImpl#item\",\"此方法的应用之一是在继续程序之前等待一组独立的CompletableFutures完成，如： CompletableFuture.allOf(c1, c2, c3).join();\",\"一般方法后面要给个 CompletableFuture.allOf 等异步方法都完成后才能放数据之类的操作。。。\",\"死锁很难人为干预，只能说是预防\",\"发生死锁的四个条件：\",\"互斥条件，线程使用的资源至少有一个不能共享的。\",\"至少有一个线程必须持有一个资源且正在等待获取一个当前被别的线程持有的资源。\",\"资源不能被抢占。\",\"循环等待。\",\"如何避免死锁：\",\"破坏发生死锁的四个条件其中之一即可。\",\"从 线程池 和 死锁 开始就略过后面的了！！！\"]},\"378\":{\"h\":\"# AQS\",\"t\":[\"AQS 的全称为 AbstractQueuedSynchronizer ，翻译过来的意思就是抽象队列同步器。这个类在 java.util.concurrent.locks 包下面。\",\"AQS 就是一个抽象类，主要用来构建锁和同步器\",\"AQS 为构建锁和同步器提供了一些通用功能的实现，因此，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue等等皆是基于 AQS 的\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html\"]},\"379\":{\"h\":\"# 了解锁升级吗？\",\"t\":[\"中软猎头问到，我不会！ 高级工程师问题\",\"synchroinzed升级过程：无锁---->偏向锁----->轻量级锁(自旋锁)----->重量级锁\",\"具体流程：\",\"初次执行到synchronized代码块时候，锁对象变成偏向锁，偏向于第一个获得它的线程的锁，执行完同步代码块后，线程不主动释放偏向锁，第二次到达同步代码块时，线程会判断此时持有锁的线程是否是自己，正常则往下执行，由于没有释放锁，这里不需要重新加锁，性能高\",\"有第二个线程加入锁竞争，偏向锁升级为轻量级锁，在锁竞争下，没有获得到锁的线程自旋：不停地循环判断是否能够成功获取锁，自旋线程会原地空耗CPU，执行不了任务，处于忙等状态，如果多个线程用一个锁但是没有锁竞争或者轻微锁竞争，synchronized用轻量级锁。轻量级锁的目的是用短时间忙等换取线程在用户态和内核态切换的开销。\",\"如果锁竞争严重，某个达到最大自旋次数的线程会升级为重量级锁，后续线程尝试获取锁时，发现被占用的是重量级锁直接将自己挂起\",\"【XD 这个up汇总的很好】\",\"作者：raxcl 链接：https://www.nowcoder.com/discuss/465219671411773440?sourceSSR=users 来源：牛客网\"]},\"380\":{\"h\":\"# ReenTrantLock和Synchronized区别\",\"t\":[\"​ 首先都是可重入锁，然后他们的区别主要有几个方面，第一个是锁的实现不同，\",\"​ synchronized是JVM实现的关键字\",\"​ ReentrantLock是JDK实现的类\",\"​ 第二个是性能，\",\"​ synchronized与ReentrantLock大致相同，但是新版本Java对synchronized进行了很多优化，如自旋锁\",\"​ 第三个是等待可中断\",\"​ 可中断：当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，处理其他事情\",\"​ ReentrantLock可中断\",\"​ synchronized不可中断\",\"​ 第四个是公平锁\",\"​ synchronized的锁是非公平的\",\"​ ReentranlLock默认非公平，也可以调为公平\",\"​ 第五个是可以实现选择性通知\",\"​ 一个ReentrantLock可以同时绑定多个Condition对象，可以指定线程信息去实现选择性通知\",\"当时错误的回答：\",\"说了分布式锁\",\"面试官提示：可以结合业务场景去说\",\"业务场景：防止用户点击多次，要保证只有一个请求能进方法里面（这里应该是同单据number下），需要加分布式锁，用单据号作为分布式锁的key，原理采用到了 ReentrantLock ,以及lua脚本去保证它的原子性\",\"作者：raxcl\\n链接：https://www.nowcoder.com/discuss/465219671411773440?sourceSSR=users\\n来源：牛客网\"]},\"381\":{\"h\":\"JVM\",\"t\":[\"JVM 相关的知识点，一般是大厂才会问到，面试中小厂就没必要准备了。JVM 面试中比较常问的是 Java 内存区域、JVM 垃圾回收、类加载器和双亲委派模型 以及 JVM 调优和问题排查（我之前分享过一些常见的线上问题案例，里面就有 JVM 相关的）。\",\"img\"]},\"382\":{\"h\":\"# 双亲委派模型\",\"t\":[\"Java有哪些类加载器，双亲委派模型是什么，为什么要这样设计？怎么打破双亲委派模型？ 看了jvm笔记的link地址 javaguide\",\"​ Bootstrap\\\\extension\\\\application ​ 针对JVM提供的三个内置的类加载器 【自底向上查找判断类是否被加载，自顶向下尝试加载类】 ​ 可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。\",\"​ 类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。 如果想打破双亲委派模型则需要重写 loadClass() 方法。\"]},\"383\":{\"h\":\"\",\"t\":[\"先分析一下里面各个参数的含义：\",\"-Xms：1G ， 就是说初始堆大小为1G\",\"-Xmx：2G ， 就是说最大堆大小为2G\",\"-Xmn：500M ，就是说年轻代大小是500M（包括一个Eden和两个Survivor S0、S1）\",\"-XX:MaxPermSize：64M ， 就是说设置持久代（永久代）最大值为64M\",\"在 JDK 8 及更高版本中，-XX:MaxPermSize 参数不再起作用。在 JDK 8 之前的版本中，Java 虚拟机使用永久代（Permanent Generation）来存储类的元数据、静态变量等信息。-XX:MaxPermSize 参数用于配置永久代的最大大小。\",\"然而，从 JDK 8 开始，永久代被称为元空间（Metaspace），并且不再受到固定大小的限制。元空间的大小由系统的可用内存决定，并且可以根据需要自动扩展。因此，-XX:MaxPermSize 参数不再适用于 JDK 8 及更高版本。\",\"取而代之的是使用 -XX:MaxMetaspaceSize 参数来配置元空间的最大大小。你可以使用该参数来限制元空间的增长，防止应用程序使用过多的内存。\",\"例如，可以使用以下命令行参数来设置元空间的最大大小为 256MB：\",\"-XX:MaxMetaspaceSize=256m \",\"需要注意的是，元空间的大小不再计入 Java 堆内存的限制，因此你不再需要为永久代或元空间单独分配内存。Java 虚拟机会根据应用程序的需求自动管理元空间的内存使用。(XD 脑袋里想着那个三层的图就好。上两层可以看作是堆的，最下面一层就是这个参数点了)\",\"-XX:+UseConcMarkSweepGC ， 就是说使用使用CMS内存收集算法\",\"-XX:SurvivorRatio=3 ， 就是说Eden区与Survivor区的大小比值为3：1：1\",\"在默认情况下，Eden区和Survivor0、Survivor1的比例是8:1:1\",\"题目中所问的Eden区的大小是指年轻代的大小，直接根据-Xmn：500M和-XX:SurvivorRatio=3可以直接计算得出 500M*(3/(3+1+1)) =500M*（3/5） =500M*0.6 =300M 所以Eden区域的大小为300M。\",\"先说VM选项， 三种：\",\"- : 标准VM选项，VM规范的选项\",\"-X: 非标准VM选项，不保证所有VM支持\",\"-XX: 高级选项，高级特性，但属于不稳定的选项\",\"参见 Java HotSpot VM Options\",\"题主提到的参数前缀为X，显然属于第二类\",\"再说这几个参数，其语义分别是：\",\"-Xmx: 堆的最大内存数，等同于-XX:MaxHeapSize\",\"-Xms: 堆的初始化初始化大小\",\"-Xmn: 堆中新生代初始及最大大小，如果需要进一步细化，初始化大小用-XX:NewSize，最大大小用-XX:MaxNewSize\",\"-Xss: 线程栈大小，等同于-XX:ThreadStackSize\",\"命名应该非简称，助记的话： memory maximum, memory startup, memory nursery/new, stack size.\",\"作者：Home3k 链接：https://www.zhihu.com/question/59957834/answer/170775050 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\"]},\"384\":{\"h\":\"# Java 内存区域\"},\"385\":{\"h\":\"堆结构\",\"t\":[\"新生代内存/ 年轻代 (Young Generation) ：1 个 Eden 2 个 Survivor (Eden区和Survivor0、Survivor1的比例是8:1:1)\",\"老生代(Old Generation) 2/3 的堆空间\",\"---------Young + Old = Heap---------\",\"永久代(Permanent Generation)\",\"大部分情况，对象都会首先在 Eden 区域分配。如果对象在 Eden 出生并经过第一次 Minor GC后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间（SO 或者s1）中，并将对象年龄设为 1（Eden 区->Survivor 区后对象的初始年龄变为1）。\",\"对象在 Survivor 中每熬过一次 MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数一XX: MaxTenuringThreshold来设置。\",\"堆内存结构\",\"复制算法用于年轻代（大部分对象的生命周期较短），标记-整理算法用于老年代。\",\"标记-清除算法（Mark and Sweep）：该算法分为两个阶段。首先，通过根对象开始，标记所有从根对象可达的存活对象。然后，在清除阶段，清除未被标记的对象，释放其占用的内存空间。标记-清除算法可能导致内存碎片化问题。\",\"复制算法（Copying）：该算法将内存分为两个区域，通常是年轻代的Eden区和存活区域。在垃圾回收时，将存活的对象从一个区域复制到另一个区域，同时清除已经复制的对象。复制算法解决了内存碎片化问题，但需要额外的复制操作。\",\"标记-整理算法（Mark and Compact）：是根据老年代的特点提出的一种标记算法, 让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。\",\"分代收集算法（Generational）：该算法基于一种观察，即大部分对象很快变成垃圾。根据对象的生命周期，将内存划分为不同的代（例如年轻代和老年代），并针对不同代采用不同的收集算法，如复制算法用于年轻代，标记-压缩算法用于老年代。\",\"内存连续空间：eden区通过复制/清除算法保证了读写连续性(因为新生代的对象产生和销毁非常频繁,所以才采用了清空的方式)\"]},\"386\":{\"h\":\"方法区\",\"t\":[\"JIT 代码缓存 TODO description\",\"虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。\",\"当程序运行时被加载到内存后，这些符号才有对应的内存地址信息。这些常量一旦被转入内存就会变成运行时常量池。运行时常量池在方法区中。\",\"method-area-jdk1.7\"]},\"387\":{\"h\":\"# 类加载器\",\"t\":[\"8468A0AF-362C-40A8-A0D9-D3837C925B83_1_101_o\"]},\"388\":{\"h\":\"# Other\",\"t\":[\"牛客\",\"不是局部变量在该方法被执行/调用时创建，而是应该为在该变量被声明并赋值时创建，可以理解为“当代码执行到该变量被赋值的代码时才被创建”\",\"栈会为每个方法在运行的时候分配一块独立的栈帧内存区域，栈帧又包含“局部变量表”、“操作数栈”、“动态链接”以及“方法出口”四个部分。\",\"举例说明：\",\"public class Demo { public void test() { int a; int b = 5; int c = b + 4; a = 2; } public static void main(String[] args) { Demo demo = new Demo(); demo.test(); } } \",\"定义了一个Demo类，其中有一个测试主方法main以及一个test()方法\",\"那么在执行main的时候，内存分配如下\",\"img\",\"其中我们只看test()桢栈中具体的流程\",\"首先我们使用javac Demo.java来生成Demo.class文件，然后通过执行javap -c Demo来查看执行原理，这里我只截取test()方法部分\",\"img\",\"其中\",\"0：iconst_5,表示将一个int类型的常量5，压入操作数栈中 \",\"img\",\"1：istore_2,表示将这个int值从栈中取出，存储到局部变量_2中（代码为变量b） \",\"img\",\"2：iload_2,表示将变量2，int类型的值取出，压到操作数栈 \",\"img\",\"3：iconst_4,表示将一个int类型的常量4，压入操作数栈中 \",\"img\",\"4：iadd,执行int类型的加***将操作数栈的4和5从栈中弹出并相加，将结果压入操作数栈中\",\"5：istore_3,表示将这个int值从栈中取出，存储到局部变量_3中（代码为变量c）6：iconst_2,表示将一个int类型的常量2，压入操作数栈中7：istore_1,表示将这个int值从栈中取出，存储到局部变量_1中（代码为变量a）8：return,方法结束，返回 以上可以看出，虽然int a;在第一行就声明了a变量，但是直到给a赋值之后，才会在局部变量表中给a分配内存空间我们可以把赋值的代码删掉，再看看执行流程\",\"public class Demo { public void test() { int a; int b = 5; int c = b + 4; } public static void main(String[] args) { Demo demo = new Demo(); demo.test(); } } \",\"img\",\"这次我们可以看出，并没有对a就行任何操作，也就证明了“只有当给变量赋值的时候才会分配内存空间”的说法。以上\",\"ps：我也是刚刚学到这里，如有说的不对之处望大家指出，一起探讨学习\",\"参考：\",\"[小白都能看得懂的Java虚拟机内存模型]https://zhuanlan.zhihu.com/p/98337005\",\"[通过javap命令分析java汇编指令]https://www.jianshu.com/p/6a8997560b05\"]},\"389\":{\"h\":\"# 面试题\",\"t\":[\".new创建的对象一定在java堆吗，局部变量是基本类型创建在哪，如果基本类型是成员变量呢\",\"不一定内存逃逸？？？ 栈 堆？\",\"是的一定在堆\",\"3.jvm堆内存详细说说，为什么要这么划分，用的垃圾回收算法\",\"JVM笔记，新生代用coping 算法，老年代用 mark-compact 分代收集算法-根据每个内存块的特性分配不同的收集算法（新生代死亡多，老年代存活多）\",\"4.什么时候会发生full gc\",\"1.调用System.gc() 只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。\",\"2. 未指定老年代和新生代大小，堆伸缩时会产生fullgc,所以一定要配置-Xmx、-Xms\",\"3.老年代空间不足\",\"5.full gc对程序的影响\",\"会导致应用程序的暂停\",\"消耗较大的系统资源，包括CPU和内存 降低应用程序的执行效率\",\"6.怎么解决full gc\",\"堆内存调整\",\"尽量减少无用的对象创建和引用 检查内存泄漏（Threadlocal）\",\"对象生命周期管理：合理管理对象的生命周期，尽量让对象能够在新生代中被回收，减少进入老年代的对象数量。通过调整新生代的大小、Survivor区的比例等参数，可以控制对象在各个内存区域的流动，避免频繁触发Full GC。\",\"分析和调优工具\"]},\"390\":{\"h\":\"# 场景题\"},\"391\":{\"h\":\"OOM常见原因：\",\"t\":[\"内存资源耗尽未释放（死循环、ThreadLocal？）\",\"本身资源不够 \",\"Linux 用 jmap -heap 分析\",\"Windows 用 jvisualvm 图形化分析\"]},\"392\":{\"h\":\"排查\",\"t\":[\"linux 的话通过设置参数设置 dump 文件输出到磁盘\",\"dump 文件放到 win 的 jvisualvm\",\"分析 GCroot 的堆栈信息定位业务代码 \",\"at UserService.getUsers（UserService.java：17） Local Variable:java.util.ArrayList#18\",\"image-20240326115638077\"]},\"393\":{\"h\":\"MyBatis\",\"t\":[\"2022/1/13 自己很久以前学了这一套但学的不系统，现在花3-4天重新过一遍，并归纳总结为笔记。 from: XD\",\"MyBatis 框架： MyBatis 本是 apache 的一个开源项目 iBatis, 2010 年这个项目由 apache software foundation 迁移到了 google code，并且改名为 MyBatis 。2013 年 11 月迁移到 Github。\",\"XD MyBatis本身并不提供连接池功能，它主要关注于SQL映射和数据库操作的框架。连接池是与数据库交互的一部分，但并不是MyBatis默认的方式。\",\"在使用MyBatis时，你可以选择使用第三方的连接池库来管理数据库连接。常见的连接池库包括：\",\"Apache Commons DBCP HikariCP C3P0 Druid\"]},\"394\":{\"h\":\"1. 搭建环境\",\"t\":[\"有什么问题优先看官网 MyBatis中文网\"]},\"395\":{\"h\":\"1.1. 搭建数据库MySQL\",\"t\":[\"略\"]},\"396\":{\"h\":\"1.2. idea 环境\"},\"397\":{\"h\":\"1.2.1. Maven\",\"t\":[\"<!-- https://mvnrepository.com/artifact/log4j/log4j --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> </dependency> <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.4.6</version> </dependency> <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.47</version> </dependency> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.11</version> <scope>test</scope> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.22</version> </dependency> <!--因为我是把StudentMapper.xml放在java目录下的，需配置。如果是放resources则不用配这个--> <build> <resources> <resource> <directory>src/main/java</directory> <includes> <include>**/*.xml</include> </includes> </resource> </resources> </build> \"]},\"398\":{\"h\":\"1.2.2. jdbc.properties\",\"t\":[\"driver=com.mysql.jdbc.Driver #注意这个useSSL=false，一开始我用的true报错 [解决](https://blog.csdn.net/a704397849/article/details/93797529) url=jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8 username=root password=123456 \"]},\"399\":{\"h\":\"1.2.3. log4j.properties\",\"t\":[\"#如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手！！！ #这里的配置暂时不深究 log4j.rootLogger=DEBUG, Console #Console log4j.appender.Console=org.apache.log4j.ConsoleAppender log4j.appender.Console.layout=org.apache.log4j.PatternLayout log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n log4j.logger.java.sql.ResultSet=INFO log4j.logger.org.apache=INFO log4j.logger.java.sql.Connection=DEBUG log4j.logger.java.sql.Statement=DEBUG log4j.logger.java.sql.PreparedStatement=DEBUG \"]},\"400\":{\"h\":\"1.2.4. mybatis-config.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- <!ELEMENT configuration 标签需按照下面这个顺序来 (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)> --> <!-- properties: 引入外部properties文件 必须放在最前面,否则会报错 resource: 类路径下 url: 磁盘路径或网络路径 --> <properties resource=\\\"jdbc.properties\\\"/> <!-- 设置日志输出, 方便观察sql语句和参数 --> <settings> <setting name=\\\"logImpl\\\" value=\\\"LOG4J\\\"/> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> <!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题 --> <setting name=\\\"lazyLoadingEnabled\\\" value=\\\"true\\\"/> <setting name=\\\"aggressiveLazyLoading\\\" value=\\\"false\\\"/> </settings> <!-- 注意这些标签有先后顺序的，下面这个必须放settings后面！！ --> <typeAliases> <package name=\\\"org.example.bean\\\"/> </typeAliases> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> </environment> </environments> <mappers> <mapper resource=\\\"org/example/mapper/xml/StudentMapper.xml\\\"/> </mappers> </configuration> \",\"ps:\",\"<!--我的这里如果这么配不会生效，因为需要映射文件名字要和接口文件相同,还需要放在同一个包下--> <mappers> <package name=\\\"org.example.mapper\\\"/> </mappers> \"]},\"401\":{\"h\":\"2. 编写代码\"},\"402\":{\"h\":\"2.1. MyBatisUtil 工具类\",\"t\":[\"package org.example.util; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.InputStream; /** * 因为每次测试类都需要写很多重复代理，这里给个工具类稍微封装一下 */ public class MybatisUtils { private static SqlSessionFactory sqlSessionFactory; static{ try { String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); } catch (IOException e) { e.printStackTrace(); } } public static SqlSession getSqlSession(){ return sqlSessionFactory.openSession(); } } \"]},\"403\":{\"h\":\"2.2. 增删改查\",\"t\":[\"具体的一些写法看官网，这里只贴出一个简单的测试。\",\"@Test public void test01(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); Student student = new Student(null,\\\"张三\\\",\\\"547061946\\\",18); /** * 方法一： */ //int insert = sqlSession.insert(\\\"org.example.mapper.StudentMapper.addStudent\\\", student); /** * 方法二： */ StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); mapper.addStudent(student); System.out.println(student.getId()); sqlSession.commit(); sqlSession.close(); //System.out.println(\\\"插入\\\"+(insert!=1?\\\"失败\\\":\\\"成功\\\")); } \",\"image-20220112112209272\"]},\"404\":{\"h\":\"1. 获取自增主键的值\",\"t\":[\" <!-- useGeneratedKeys=\\\"true\\\": 开启获取自增主键的策略 keyColumn: 指定数据库主键的列名 keyProperty: 指定对应的主键属性, ps(获取到主键值后, 将这个值封装给javaBean的哪个属性) --> <insert id=\\\"addStudent\\\" parameterType=\\\"org.example.bean.Student\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\"> insert student(name,email,age) values(#{name},#{email},#{age}) </insert> \"]},\"405\":{\"h\":\"2. 参数处理\"},\"406\":{\"h\":\"2.1. 单个参数\",\"t\":[\"#{arg}: 直接取出参数值；只有一个参数时可以随便写\"]},\"407\":{\"h\":\"2.2. 多个参数\",\"t\":[\"MyBatis会做特殊处理，多个参数会被封装成一个 Map，参数可以使用 #{arg0} 或 #{param1}这种形式取出\"]},\"408\":{\"h\":\"2.3. 命名参数\",\"t\":[\"使用注解 @Param 指定参数的 key\",\"注解：\",\"// 命名参数 User getAnnoParam(@Param(\\\"name\\\") String name,String pwd); \",\"获取：\",\"<select id=\\\"getAnnoParam\\\" resultType=\\\"org.hong.pojo.User\\\"> select * from user where name = #{name} and pwd = #{param2} </select> \"]},\"409\":{\"h\":\"2.4. POJO\",\"t\":[\"多个参数正好是业务逻辑的数据模型(实体类),直接传入pojo(对象)\"]},\"410\":{\"h\":\"2.4. TO\",\"t\":[\"多个参数不是业务模型中的数据, 但经常要使用, 推荐编写TO(Transfer Object)数据传输对象, 就是再专门写个类\"]},\"411\":{\"h\":\"3. #{} 和 ${} 的区别\",\"t\":[\"#{}是占位符，${}是拼接符。\",\"$是先拼接后编译 #是先编译后拼接 这才是主要区别\",\"原生jdbc不支持占位符的地方我们就可以使用${}进行取值，例如分表、排序：\",\"select * from ${year}_salary where xxx; select * from tbl_employee order by ${f_name} ${order} \",\"特点：\",\"#{}是预编译处理，${}是字符串替换。 Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的set 方法来赋值。 Mybatis 在处理$ {}时，就是把${}替换成变量的值。 使用#{}可以有效的防止 SQL 注入，提高系统安全性。 \"]},\"412\":{\"h\":\"4. 返回List和Map\"},\"413\":{\"h\":\"4.1. List\",\"t\":[\"正常写~ 只不过返回值是List，resultType还是javaBean\"]},\"414\":{\"h\":\"4.2. Map\"},\"415\":{\"h\":\"4.2.1. key -> 列名 value -> 列值\",\"t\":[\"StudentMapper接口：\",\"//map 封装一条记录 Map<String, Object> getStudentByIdReturnMap(Integer id); \",\"StudentMapper.Xml:\",\"<!-- Map<String, Object> getStudentByIdReturnMap(Integer id);--> <select id=\\\"getStudentByIdReturnMap\\\" resultType=\\\"map\\\"> select * from student where id = #{id} </select> \",\"测试:\",\" @Test public void test02(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); Map<String, Object> returnMap = mapper.getStudentByIdReturnMap(7); //returnMap.forEach((k,v) -> System.out.println(\\\"k \\\"+k+\\\" v \\\"+v)); //原来可以直接sout这个map，大意了，我还以为会输出地址!!!! /** * 因为AbstractMap重写了toString() */ System.out.println(returnMap.toString()); sqlSession.close(); } \"]},\"416\":{\"h\":\"4.2.1. key -> 主键 value -> 实体对象\",\"t\":[\"StudentMapper接口：\",\"// 返回Map集合, key -> 主键值、value -> 对应的实体对象 @MapKey(\\\"id\\\") Map<Integer, Student> getMapPrimaryToEntity(); \",\"StudentMapper.Xml:\",\"<!-- Map<Integer, Student> getMapPrimaryToEntity(); 注意这个resultType可不是map，而是实体类 --> <select id=\\\"getMapPrimaryToEntity\\\" resultType=\\\"student\\\"> select * from student </select> \"]},\"417\":{\"h\":\"5. resultType属性\",\"t\":[\"具体看官网~\",\"对于引用数据类型，都是将大写字母转小写，比如 HashMap 对应的别名是 'hashmap'\",\"基本数据类型考虑到重复的问题，会在其前面加上\\\"_\\\"\"]},\"418\":{\"h\":\"6. resultMap（自定义结果集映射）\"},\"419\":{\"h\":\"6.1. 简单使用\",\"t\":[\"resultMap的更大作用应该是在于其内部的association标签和collection标签,这两个标签主要用于多表联合查询,以及discriminator鉴别器\",\"如果javaBen属性名和列名不一致, 不应该再使用resultType配置返回值类型，而是使用resultMap引用自定义的结果集映射规则。\",\"mapper.xml：\",\" <resultMap type=\\\"com.atguigu.mybatis.bean.Employee\\\" id=\\\"MySimpleEmp\\\"> <!--指定主键列的封装规则 当然主键也可以用column，但id定义主键会底层有优化； column：指定哪一列 property：指定对应的javaBean属性 --> <id column=\\\"id\\\" property=\\\"id\\\"/> <!-- 定义普通列封装规则 --> <result column=\\\"last_name\\\" property=\\\"lastName\\\"/> <!-- 其他列可以不指定，不指定的列会自动封装，但是推荐只要指定resultMap就把全部的映射规则都写上 --> <result column=\\\"email\\\" property=\\\"email\\\"/> <result column=\\\"gender\\\" property=\\\"gender\\\"/> </resultMap> <!-- resultMap:自定义结果集映射规则； --> <!-- public Employee getEmpById(Integer id); --> <select id=\\\"getEmpById\\\" resultMap=\\\"MySimpleEmp\\\"> select * from tbl_employee where id=#{id} </select> \",\"Test：\",\" @Test public void test04(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class); Employee empById = mapper.getEmpById(1); System.out.println(empById); sqlSession.close(); } \"]},\"420\":{\"h\":\"6.2. association（一对一）\"},\"421\":{\"h\":\"6.2.1. 级联属性封装结果集：\",\"t\":[\"<!-- 场景一： 查询Employee的同时查询员工对应的部门 Employee===Department 一个员工有与之对应的部门信息； id last_name gender d_id did dept_name (private Department dept;) --> <!-- 联合查询：级联属性封装结果集 --> <resultMap id=\\\"_getEmpAndDept\\\" type=\\\"employee\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <!-- 级联属性，我下面这两个属性爆红，但是不影响--> <result column=\\\"d_id\\\" property=\\\"dept.id\\\"/> <result column=\\\"dept_name\\\" property=\\\"dept.departmentName\\\"/> </resultMap> <select id=\\\"getEmpAndDept\\\" resultMap=\\\"_getEmpAndDept\\\"> select * from tbl_employee e join tbl_dept d on e.id = d.id where d.id = 1 </select> \"]},\"422\":{\"h\":\"6.2.2. 使用association定义关联的单个对象的封装规则：\",\"t\":[\" <!-- 使用association定义关联的单个对象的封装规则； 我使用了association后所有的属性都要映射，就算属性和查询后起的别名一样也不行。 --> <resultMap id=\\\"_getEmpAndDept2\\\" type=\\\"employee\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <!--发现下面这些不写的话，不会自动封装了--> <result column=\\\"last_name\\\" property=\\\"lastName\\\"/> <result column=\\\"gender\\\" property=\\\"gender\\\"/> <result column=\\\"email\\\" property=\\\"email\\\"/> <!-- association可以指定联合的javaBean对象 property=\\\"dept\\\"：指定哪个属性是联合的对象 javaType:指定这个属性对象的类型[不能省略] --> <association property=\\\"dept\\\" javaType=\\\"department\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"dept_name\\\" property=\\\"departmentName\\\"/> </association> </resultMap> \",\"补充\",\" <!--注意：因为字段名是dept_name，而bean类中属性名是departmentName，所以用select * 这样这个字段就封装不上，得像下面这样写--> <select id=\\\"getDeptById\\\" resultType=\\\"department\\\"> select id,dept_name departmentName from tbl_dept where id=#{id} </select> \"]},\"423\":{\"h\":\"6.2.3. 分步查询\",\"t\":[\"此时产生两条查询语句\",\" <!-- 使用association进行分步查询： 1、先按照员工id查询员工信息 2、根据查询员工信息中的d_id值去部门表查出部门信息 3、部门设置到员工中； --> <resultMap id=\\\"_getEmpByIdStep\\\" type=\\\"employee\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <!--其他属性不写也自动封装上了，但建议只要指定resultMap就把全部的映射规则都写上--> <!-- association定义关联对象的封装规则 select:表明当前属性是调用select指定的方法查出的结果 column:指定将哪一列的值传给这个方法 流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性 --> <association property=\\\"dept\\\" select=\\\"org.example.mapper.DepartmentMapper.getDeptById\\\" column=\\\"id\\\"/> </resultMap> <select id=\\\"getEmpByIdStep\\\" resultMap=\\\"_getEmpByIdStep\\\"> select * from tbl_employee where id=#{id} </select> \"]},\"424\":{\"h\":\"6.2.4. 延迟加载\",\"t\":[\"在分布查询的基础上，我们通过配置文件开启懒加载，只查其中一个表的某个字段就会发现只会产生一次查询！\",\" <!-- 可以使用延迟加载（懒加载）；(按需加载) Employee==>Dept： 我们每次查询Employee对象的时候，都将一起查询出来。 部门信息在我们使用的时候再去查询； 分段查询的基础之上加上两个配置： --> <!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题 --> <setting name=\\\"lazyLoadingEnabled\\\" value=\\\"true\\\"/> <setting name=\\\"aggressiveLazyLoading\\\" value=\\\"false\\\"/> \",\"按需加载：\",\"xxx\"]},\"425\":{\"h\":\"6.3. collection（一对多）\"},\"426\":{\"h\":\"6.3.1. 封装List<Employee> emps;\",\"t\":[\"注意 collection 里是用的 ofType 不要用 javaType 以后还是写resultMap还是写全，尤其是遇到association和collection\",\"<!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则 --> <resultMap id=\\\"_getDeptByIdPlus\\\" type=\\\"department\\\"> <id column=\\\"did\\\" property=\\\"id\\\"/> <result column=\\\"dept_name\\\" property=\\\"departmentName\\\"/> <!-- collection定义关联集合类型的属性的封装规则 ofType:指定集合里面元素的类型 --> <collection property=\\\"emps\\\" ofType=\\\"employee\\\"> <id column=\\\"eid\\\" property=\\\"id\\\"/> <id column=\\\"eid\\\" property=\\\"id\\\"/> <result column=\\\"last_name\\\" property=\\\"lastName\\\"/> <result column=\\\"email\\\" property=\\\"email\\\"/> <result column=\\\"gender\\\" property=\\\"gender\\\"/> </collection> </resultMap> <select id=\\\"getDeptByIdPlus\\\" resultMap=\\\"_getDeptByIdPlus\\\"> SELECT d.id did,d.dept_name dept_name, e.id eid,e.last_name last_name,e.email email,e.gender gender FROM tbl_dept d LEFT JOIN tbl_employee e ON d.id=e.d_id WHERE d.id=#{id} </select> \"]},\"427\":{\"h\":\"6.3.2. 分步查询\",\"t\":[\"和association是一样的效果，也是按需加载、懒加载\",\"具体步骤：\",\"DepartmentMapper.xml：\",\" <!-- collection：分段查询 --> <resultMap id=\\\"MyDeptStep\\\" type=\\\"department\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <id column=\\\"dept_name\\\" property=\\\"departmentName\\\"/> <collection property=\\\"emps\\\" select=\\\"org.example.mapper.EmployeeMapperPlus.getEmpsByDeptId\\\" column=\\\"{deptId=id}\\\" fetchType=\\\"lazy\\\"></collection> </resultMap> <!-- public Department getDeptByIdStep(Integer id); --> <select id=\\\"getDeptByIdStep\\\" resultMap=\\\"MyDeptStep\\\"> select id,dept_name from tbl_dept where id=#{id} </select> \",\"EmployeeMapperPlus.xml：\",\"<!-- public List<Employee> getEmpsByDeptId(Integer deptId); --> <select id=\\\"getEmpsByDeptId\\\" resultType=\\\"org.example.bean.Employee\\\"> select * from tbl_employee where d_id=#{deptId} </select> \",\"Test\",\" /** * collection分步查询 */ @Test public void test09(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); DepartmentMapper mapper = sqlSession.getMapper(DepartmentMapper.class); Department deptByIdStep = mapper.getDeptByIdStep(1); System.out.println(deptByIdStep.getDepartmentName()); System.out.println(deptByIdStep.getEmps()); sqlSession.close(); } \"]},\"428\":{\"h\":\"6.4. 扩展\",\"t\":[\"例： <collection property=\\\"emps\\\" select=\\\"org.example.mapper.EmployeeMapperPlus.getEmpsByDeptId\\\" column=\\\"{deptId=id}\\\" fetchType=\\\"lazy\\\"></collection> <!-- 扩展：多列的值传递过去： 将多列的值封装map传递； column=\\\"{key1=column1,key2=column2}\\\" fetchType=\\\"lazy\\\"：表示使用延迟加载； - lazy：延迟 - eager：立即 --> \"]},\"429\":{\"h\":\"6.5. 鉴别器\",\"t\":[\"EmployeeMapperPlus.xml：\",\"<!-- =======================鉴别器============================ --> <!-- <discriminator javaType=\\\"\\\"></discriminator> 鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为 封装Employee： 如果查出的是女生：就把部门信息查询出来，否则不查询； 如果是男生，把last_name这一列的值赋值给email; --> <resultMap id=\\\"MyEmpDis\\\" type=\\\"employee\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"last_name\\\" property=\\\"lastName\\\"/> <result column=\\\"email\\\" property=\\\"email\\\"/> <result column=\\\"gender\\\" property=\\\"gender\\\"/> <!-- column：指定判定的列名 javaType：列值对应的java类型 MyBatis已经对所有java类型起好名了具体看官方文档 --> <discriminator javaType=\\\"string\\\" column=\\\"gender\\\"> <!--女生 resultType:指定封装的结果类型；不能缺少。/resultMap--> <case value=\\\"0\\\" resultType=\\\"org.example.bean.Employee\\\"> <association property=\\\"dept\\\" select=\\\"org.example.mapper.DepartmentMapper.getDeptById\\\" column=\\\"{id=d_id}\\\"> </association> </case> <!--男生 ;如果是男生，把last_name这一列的值赋值给email; --> <case value=\\\"1\\\" resultType=\\\"org.example.bean.Employee\\\"> <id column=\\\"id\\\" property=\\\"id\\\"/> <result column=\\\"last_name\\\" property=\\\"lastName\\\"/> <result column=\\\"last_name\\\" property=\\\"email\\\"/> <result column=\\\"gender\\\" property=\\\"gender\\\"/> </case> </discriminator> </resultMap> <select id=\\\"getEmpByIdStep\\\" resultMap=\\\"MyEmpDis\\\"> select * from tbl_employee where id=#{id} </select> \",\"EmployeeMapperPlus.xml：\",\" <select id=\\\"getDeptById\\\" resultType=\\\"department\\\"> select id,dept_name departmentName from tbl_dept where id=#{id} </select> \",\"Test：\",\" /** * 使用association进行分步查询 * + 鉴别器 */ @Test public void test07(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class); Employee empByIdStep = mapper.getEmpByIdStep(2); System.out.println(empByIdStep); sqlSession.close(); } \",\"场景：只想根据传过来的javaBean对象有值的参数作为条件\"]},\"430\":{\"h\":\"1. if\",\"t\":[\"在 MyBatis 中，<if> 标签用于在 SQL 映射文件中进行条件判断。test 属性指定了一个表达式\",\"<if test=\\\"expression\\\"> <!-- SQL 语句片段 --> </if> \",\"xml:\",\" <!-- • if:判断 • choose (when, otherwise):分支选择；带了break的swtich-case 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 • trim 字符串截取(where(封装查询条件), set(封装修改条件)) • foreach 遍历集合 --> <!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 --> <select id=\\\"getEmpsTestInnerParameter\\\" resultType=\\\"org.example.bean.Employee\\\"> select * from tbl_employee where <!-- test：判断表达式（OGNL） OGNL参照PPT或者官方文档。 c:if test 从参数中取值进行判断 遇见特殊符号应该去写转义字符： &&： --> <if test=\\\"id != null\\\"> id = #{id} </if> <if test=\\\"lastName != null and lastName != ''\\\"> and last_name like #{lastName} </if> <if test=\\\"email!=null and email.trim()!=&quot;&quot;\\\"> and email=#{email} </if> <!-- ognl会进行字符串与数字的转换判断 \\\"0\\\"==0 --> <if test=\\\"gender==0 or gender==1\\\"> and gender=#{gender} </if> </select> \",\"Test:\",\" @Test public void test01(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class); Employee employee = new Employee(2, \\\"%o%\\\", \\\"11\\\", null); List<Employee> list = mapper.getEmpsTestInnerParameter(employee); System.out.println(list); sqlSession.close(); } \",\"控制台：\",\"Preparing: select * from tbl_employee where id = ? and last_name like ? and email=? \"]},\"431\":{\"h\":\"2. where\",\"t\":[\"基于上面发现问题：假如id赋值为null就会出问题 Preparing: select * from tbl_employee where and last_name like ? and email=? \",\"/** 查询的时候如果某些条件没带可能sql拼装会有问题 1. 给where后面加上1=1，以后的条件都and xxx.（不推荐, 会导致数据库性能损失） 2. mybaits使用where标签来将所有的查询条件包括在内。 where只会去掉第一个多出来的and或者or */ \"]},\"432\":{\"h\":\"3. trim\",\"t\":[\"基于where不能去掉后面多出来的and或者or的问题\",\"<select id=\\\"getEmpsByConditionTrim\\\" resultType=\\\"com.atguigu.mybatis.bean.Employee\\\"> select * from tbl_employee <!-- 后面多出的and或者or where标签不能解决 prefix=\\\"\\\":前缀：trim标签体中是整个字符串拼串 后的结果。 prefix给拼串后的整个字符串加一个前缀 prefixOverrides=\\\"\\\": 前缀覆盖： 去掉整个字符串前面多余的字符 suffix=\\\"\\\":后缀 suffix给拼串后的整个字符串加一个后缀 suffixOverrides=\\\"\\\" 后缀覆盖：去掉整个字符串后面多余的字符 --> <!-- 自定义字符串的截取规则 --> <trim prefix=\\\"where\\\" suffixOverrides=\\\"and\\\"> <if test=\\\"id!=null\\\"> id=#{id} and </if> <if test=\\\"lastName!=null &amp;&amp; lastName!=&quot;&quot;\\\"> last_name like #{lastName} and </if> <if test=\\\"email!=null and email.trim()!=&quot;&quot;\\\"> email=#{email} and </if> <!-- ognl会进行字符串与数字的转换判断 \\\"0\\\"==0 --> <if test=\\\"gender==0 or gender==1\\\"> gender=#{gender} </if> </trim> </select> \"]},\"433\":{\"h\":\"4. choose\",\"t\":[\"choose (when, otherwise):分支选择；带了break的swtich-case 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个\",\"<select id=\\\"getEmpsByConditionChoose\\\" resultType=\\\"com.atguigu.mybatis.bean.Employee\\\"> select * from tbl_employee <where> <!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 --> <choose> <when test=\\\"id!=null\\\"> id=#{id} </when> <when test=\\\"lastName!=null\\\"> last_name like #{lastName} </when> <when test=\\\"email!=null\\\"> email = #{email} </when> <otherwise> gender = 0 </otherwise> </choose> </where> </select> \"]},\"434\":{\"h\":\"5. set\",\"t\":[\"场景：只想根据传过来的javaBean对象有值的参数进行修改。null的不改。\",\"问题：存在拼接问题。所以需要<set>标签解决，也可以使用<trim>标签解决去掉后面多余的逗号\",\"<update id=\\\"updateEmp\\\"> <!-- Set标签的使用 --> update tbl_employee <set> <if test=\\\"lastName!=null\\\"> last_name=#{lastName}, </if> <if test=\\\"email!=null\\\"> email=#{email}, </if> <if test=\\\"gender!=null\\\"> gender=#{gender} </if> </set> where id=#{id} <!-- Trim：更新拼串 update tbl_employee <trim prefix=\\\"set\\\" suffixOverrides=\\\",\\\"> <if test=\\\"lastName!=null\\\"> last_name=#{lastName}, </if> <if test=\\\"email!=null\\\"> email=#{email}, </if> <if test=\\\"gender!=null\\\"> gender=#{gender} </if> </trim> where id=#{id} --> </update> \"]},\"435\":{\"h\":\"6. foreach\"},\"436\":{\"h\":\"6.1 用法一：\",\"t\":[\"注意：这里的collection只能填list或者是map，如果想填ids，需要在参数上加@Param注解\",\" <select id=\\\"getEmpsByConditionForeach\\\" resultType=\\\"org.example.bean.Employee\\\"> select * from tbl_employee <!-- collection：指定要遍历的集合： list类型的参数会特殊处理封装在map中，map的key就叫list item：将当前遍历出的元素赋值给指定的变量 separator:每个元素之间的分隔符 open：遍历出所有结果拼接一个开始的字符 close:遍历出所有结果拼接一个结束的字符 index:索引。遍历list的时候是index就是索引，item就是当前值 遍历map的时候index表示的就是map的key，item就是map的值 #{变量名}就能取出变量的值也就是当前遍历出的元素 --> <foreach collection=\\\"ids\\\" item=\\\"item_id\\\" separator=\\\",\\\" open=\\\"where id in(\\\" close=\\\")\\\"> #{item_id} </foreach> </select> \",\"Test\",\"@Test public void test02(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class); List<Employee> list = mapper.getEmpsByConditionForeach(Arrays.asList(1, 2, 3)); System.out.println(list); sqlSession.close(); } \"]},\"437\":{\"h\":\"6.2 用法二：\",\"t\":[\"注意：需要到数据库连接属性后面加上allowMultiQueries=true；\",\"<!-- 批量保存 --> <!--public void addEmps(@Param(\\\"emps\\\")List<Employee> emps); --> <!--MySQL下批量保存：可以foreach遍历 mysql支持values(),(),()语法--> <insert id=\\\"addEmps\\\"> insert into tbl_employee( <include refid=\\\"insertColumn\\\"></include> ) values <foreach collection=\\\"emps\\\" item=\\\"emp\\\" separator=\\\",\\\"> (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id}) </foreach> </insert><!-- --> <!-- 这种方式需要数据库连接属性allowMultiQueries=true； 这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --> <!-- <insert id=\\\"addEmps\\\"> <foreach collection=\\\"emps\\\" item=\\\"emp\\\" separator=\\\";\\\"> insert into tbl_employee(last_name,email,gender,d_id) values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id}) </foreach> </insert> --> \"]},\"438\":{\"h\":\"7. 两个内置参数\",\"t\":[\"场景：\",\"_databaseId就是代表当前数据库的别名。假如我有两套数据库mysql、oracle，我写一个select方法还得写两套。现在有这个内置参数后可以只写一套在里面做个判断当前数据库是哪一个就好。\",\"_parameter:代表整个参数。假如我的参数Emloyee为空我where条件又要用这个参数，那这个SQL就没意义。\",\"<!-- 两个内置参数： 不只是方法传递过来的参数可以被用来判断，取值。。。 mybatis默认还有两个内置参数： _parameter:代表整个参数 单个参数：_parameter就是这个参数 多个参数：参数会被封装为一个map；_parameter就是代表这个map _databaseId:如果配置了databaseIdProvider标签。 _databaseId就是代表当前数据库的别名oracle --> <!--public List<Employee> getEmpsTestInnerParameter(Employee employee); --> <select id=\\\"getEmpsTestInnerParameter\\\" resultType=\\\"com.atguigu.mybatis.bean.Employee\\\"> <!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 --> <bind name=\\\"_lastName\\\" value=\\\"'%'+lastName+'%'\\\"/> <if test=\\\"_databaseId=='mysql'\\\"> select * from tbl_employee <if test=\\\"_parameter!=null\\\"> where last_name like #{lastName} </if> </if> <if test=\\\"_databaseId=='oracle'\\\"> select * from employees <if test=\\\"_parameter!=null\\\"> where last_name like #{_parameter.lastName} </if> </if> </select> \"]},\"439\":{\"h\":\"8. bind\",\"t\":[\"场景：模糊查询 like ’%e%‘ 。假如我在传值的时候只想传e就可以用bind。像是创造一个变量，给下面用。具体见上面代码\"]},\"440\":{\"h\":\"9. sql\",\"t\":[\" insert into employees( <!-- 引用外部定义的sql --> <include refid=\\\"insertColumn\\\"> <property name=\\\"testColomn\\\" value=\\\"abc\\\"/> </include> ) <!-- 抽取可重用的sql片段。方便后面引用 1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用 2、include来引用已经抽取的sql： 3、include还可以自定义一些property，sql标签内部就能使用自定义的属性 include-property：取值的正确方式${prop}, #{不能使用这种方式} --> <sql id=\\\"insertColumn\\\"> <if test=\\\"_databaseId=='oracle'\\\"> employee_id,last_name,email </if> <if test=\\\"_databaseId=='mysql'\\\"> last_name,email,gender,d_id </if> </sql> \"]},\"441\":{\"h\":\"1. 简介\",\"t\":[\"其实现在更多的用Redis或者其它的做缓存，mybatis留了Cache接口\",\"什么是缓存 [ Cache ] ?\",\"存在内存中的临时数据\",\"将用户经常查询的数据放在缓存（内存）中，用户查询数据就不用从数据库中查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。\",\"为什么使用缓存\",\"减少和数据库的交互次数，减少系统开销，提高系统效率\",\"什么样的数据能使用缓存？\",\"经常查询并且不经常改变的数据\"]},\"442\":{\"h\":\"2. 一级缓存（本地缓存）\"},\"443\":{\"h\":\"2.1. 特点\",\"t\":[\"sqlSession级别的缓存。一级缓存是一直开启的；SqlSession级别的一个Map\",\"与数据库同一次会话期间查询到的数据会放在本地缓存中。\",\"以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库；\",\"@Test public void test04(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class); Employee empById = mapper.getEmpById(1); System.out.println(empById); //一些业务代码 Employee empById1 = mapper.getEmpById(1); System.out.println(empById1); System.out.println(empById == empById1); sqlSession.close(); } \",\"image-20220113092935272\"]},\"444\":{\"h\":\"2.2. 一级缓存失效情况\",\"t\":[\"没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询：\",\"sqlSession不同。\",\"sqlSession相同，查询条件不同.(当前一级缓存中还没有这个数据)\",\"sqlSession相同，两次查询之间执行了增删改操作(这次增删改可能对当前数据有影响)\",\"sqlSession相同，手动清除了一级缓存 openSession.clearCache()（缓存清空）\"]},\"445\":{\"h\":\"3. 二级缓存\",\"t\":[\"基于namespace级别的缓存：一个namespace对应一个二级缓存：\"]},\"446\":{\"h\":\"3.1. 工作机制：\",\"t\":[\"一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中；\",\"如果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容；\",\"sqlSession=EmployeeMapper>Employee\",\"sqlSession=DepartmentMapper=>Department\",\"不同namespace查出的数据会放在自己对应的缓存中（map）\"]},\"447\":{\"h\":\"3.2. 效果：\",\"t\":[\"数据会从二级缓存中获取\",\"查出的数据都会被默认先放在一级缓存中。\",\"只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中\",\" @Test public void test04(){ SqlSession sqlSession = MybatisUtils.getSqlSession(); SqlSession sqlSession1 = MybatisUtils.getSqlSession(); EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class); EmployeeMapperPlus mapper1 = sqlSession1.getMapper(EmployeeMapperPlus.class); Employee empById = mapper.getEmpById(1); sqlSession.close(); //放这个位置，下面这条语句才能命中缓存 Employee empById1 = mapper1.getEmpById(1); // sqlSession.close(); //放这个位置，就只会在这个位置才放入二级缓存，意思就是上面这条语句还是得跑SQL sqlSession1.close(); } \"]},\"448\":{\"h\":\"3.3. 使用：\",\"t\":[\"开启全局二级缓存配置：<setting name=\\\"cacheEnabled\\\" value=\\\"true\\\"/>\",\"去mapper.xml中配置使用二级缓存：<cache></cache>\",\" <cache type=\\\"org.mybatis.caches.ehcache.EhcacheCache\\\"></cache> <!-- <cache eviction=\\\"FIFO\\\" flushInterval=\\\"60000\\\" readOnly=\\\"false\\\" size=\\\"1024\\\"></cache> --> <!-- eviction:缓存的回收策略： • LRU – 最近最少使用的：移除最长时间不被使用的对象。 • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。 • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 • 默认的是 LRU。 flushInterval：缓存刷新间隔 缓存多长时间清空一次，默认不清空，设置一个毫秒值 readOnly:是否只读： true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快 false：非只读：mybatis觉得获取的数据可能会被修改。 mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢 size：缓存存放多少元素； type=\\\"\\\"：指定自定义缓存的全类名； 实现Cache接口即可； --> \",\"我们的POJO需要实现序列化接口\"]},\"449\":{\"h\":\"4. 和缓存有关的设置/属性：\",\"t\":[\"cacheEnabled=true：false：关闭缓存（二级缓存关闭）(一级缓存一直可用的)\",\"每个select标签都有useCache=\\\"true\\\"：\",\"false：不使用缓存（一级缓存依然使用，二级缓存不使用）\",\"每个增删改标签的：flushCache=\\\"true\\\"：（一级二级都会清除，默认是true）\",\"增删改执行完成后就会清除缓存；\",\"测试：flushCache=\\\"true\\\"：一级缓存就清空了；二级也会被清除；\",\"查询标签：flushCache=\\\"false\\\"：\",\"如果flushCache=true;每次查询之后都会清空缓存；缓存是没有被使用的；\",\"sqlSession.clearCache();只是清除当前session的一级缓存；\",\"localCacheScope：本地缓存作用域：（一级缓存SESSION）；当前会话的所有数据保存在会话缓存中；\",\"STATEMENT：可以禁用一级缓存；\"]},\"450\":{\"h\":\"5. 缓存原理图\",\"t\":[\"image-20220113172652692\"]},\"451\":{\"h\":\"6. 第三方缓存整合\",\"t\":[\"思路：导入相关jar包技术后只要自己写一个cache的实现，保存数据的时候拿第三方来实现。\",\"但还得写实现挺麻烦的，可以去mybaits的项目地址，它都帮你考虑好了，与其他技术的整合都在这个顶级项目地址中，里面也有相关文档地址：其实就是导入相关适配包(整合包)，配置一些xml环境。\",\"image-20220113112304859\",\"具体流程：\",\"导入第三方缓存包即可；\",\"导入与第三方缓存整合的适配包；官方有；\",\"mapper.xml中使用自定义缓存 <cache type=\\\"org.mybatis.caches.ehcache.EhcacheCache\\\"></cache>\",\"配置地狱，经历过这个阶段后，就会发现SpringBoot真的舒服\"]},\"452\":{\"h\":\"1. 前言\"},\"453\":{\"h\":\"1.1. 好处\",\"t\":[\"以前光用mybatis时，包扫描xml文件和mapper类得在一个目录下，现在整合spring后可以不用一个目录了。\",\"@Autowired:自动注入mapper； 这样就避免了每要用一个mapper得先SqlSessionFactory还要openSession()这样的一堆操作\"]},\"454\":{\"h\":\"1.2. 我的问题\",\"t\":[\"classpath 和 classpath* 区别：\",\"问题提出： <!-- 指定MyBatis Mapper文件的位置 --> <!-- 我就是这里配错了找了半天！！！注意加上 /*.xml --> <!-- 提出问题：在引入资源文件时，classpath 什么时候用，什么时候不用？ 以前这个错误我踩过两次坑，找了很久！！！ --> <!--猜测：引用包时不加，引用具体文件时候加？--> 目前的答案： classpath：只会到你的class路径中查找找文件; classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找 ---- 够深入的吧 classpath路径是来引用文件的，在编译生成的项目下的bulid/classes/ 下具有的文件都是classpath 路径下的文件，都可以通过classpath：方法获取。 如何获取项目类编译后的路径 **String path = 类名.class.getClassLoader().getResource(\\\"\\\").getPath();** \\\"**/\\\" 表示的是任意目录； \\\"**/applicationContext-*.xml\\\" 表示任意目录下的以\\\"applicationContext-\\\"开头的XML文件。 \"]},\"455\":{\"h\":\"2. 整合流程\"},\"456\":{\"h\":\"2.1 踩坑\",\"t\":[\"注意加上web模块，配上tomcat：\",\"image-20220113160558639\",\"因为maven项目中的jar是保存在本地仓库中的，而不在你自己的项目中所以把jar包导进去，这样tomcat才跑得起：\",\"image-20220113160927268\"]},\"457\":{\"h\":\"2.2. 代码\"},\"458\":{\"h\":\"2.2.1. maven\",\"t\":[\"<dependencies> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13</version> <scope>test</scope> </dependency> <!-- servlet --> <dependency> <groupId>javax.servlet</groupId> <artifactId>servlet-api</artifactId> <version>2.5</version> </dependency> <!-- jsp --> <dependency> <groupId>javax.servlet.jsp</groupId> <artifactId>jsp-api</artifactId> <version>2.2</version> </dependency> <!-- jstl --> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> <!-- spring-webmvc --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.4.RELEASE</version> </dependency> <!-- spring-jdbc --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.2.4.RELEASE</version> </dependency> <!-- spring-aop是基于aspect, 因此导入aspectjweaver --> <dependency> <groupId>org.apache.geronimo.bundles</groupId> <artifactId>aspectjweaver</artifactId> <version>1.6.8_2</version> </dependency> <!-- lombok --> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.10</version> </dependency> <!-- mysql驱动 --> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.46</version> </dependency> <!-- druid --> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.4</version> </dependency> <!-- mybatis --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.3</version> </dependency> <!-- 日志 --> <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> <version>1.2.17</version> </dependency> <!-- mybatis-spring, mybatis整合spring的jar包 --> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>2.0.3</version> </dependency> <!-- MBG --> <dependency> <groupId>org.mybatis.generator</groupId> <artifactId>mybatis-generator-core</artifactId> <version>1.4.0</version> </dependency> </dependencies> \"]},\"459\":{\"h\":\"2.2.2. web.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app xmlns=\\\"http://xmlns.jcp.org/xml/ns/javaee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\\\" version=\\\"4.0\\\"> <!-- 1.启动Spring容器 --> <context-param> <!-- 配置Spring配置文件的位置 --> <param-name>contextConfigLocation</param-name> <param-value>classpath:applicationContext.xml</param-value> </context-param> <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> </listener> <!-- 2.SpringMVC的前端控制器, 拦截所有请求 --> <servlet> <servlet-name>dispatcherServlet</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> <init-param> <!-- 配置SpringMVC配置文件的位置 --> <param-name>contextConfigLocation</param-name> <param-value>classpath:spring-mvc.xml</param-value> </init-param> <!-- 设置启动级别 --> <load-on-startup>1</load-on-startup> </servlet> <servlet-mapping> <servlet-name>dispatcherServlet</servlet-name> <url-pattern>/</url-pattern> </servlet-mapping> <!-- 3.字符编码过滤器, 一定放在所有过滤器的前面 --> <filter> <filter-name>characterEncodingFilter</filter-name> <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <init-param> <!-- 设置字符集 --> <param-name>encoding</param-name> <param-value>UTF-8</param-value> </init-param> <init-param> <!-- 是否需要字符编码过滤器设置请求编码, 设置的字符集为encoding --> <param-name>forceRequestEncoding</param-name> <param-value>true</param-value> </init-param> <init-param> <!-- 是否需要字符编码过滤器设置响应编码, 设置的字符集为encoding --> <param-name>forceResponseEncoding</param-name> <param-value>true</param-value> </init-param> </filter> <filter-mapping> <filter-name>characterEncodingFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> <!-- 4.REST风格的URI --> <filter> <filter-name>hiddenHttpMethodFilter</filter-name> <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class> </filter> <filter-mapping> <filter-name>hiddenHttpMethodFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> </web-app> \"]},\"460\":{\"h\":\"2.2.3. spring-mvc.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:mvc=\\\"http://www.springframework.org/schema/mvc\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\\\"> <!-- SpringMVC配置文件只是控制网站跳转逻辑 --> <context:component-scan base-package=\\\"org.example\\\" use-default-filters=\\\"false\\\"> <!-- 只扫描控制器 --> <context:include-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> </context:component-scan> <!-- 配置视图解析器, 方便页面返回 --> <bean class=\\\"org.springframework.web.servlet.view.InternalResourceViewResolver\\\"> <property name=\\\"prefix\\\" value=\\\"/WEB-INF/views/\\\"/> <property name=\\\"suffix\\\" value=\\\".jsp\\\"/> </bean> <!-- 两个标准配置 --> <!-- 将SpringMVC不能处理的请求交给Tomcat --> <mvc:default-servlet-handler></mvc:default-servlet-handler> <!-- 能支持SpringMVC更高级的一些功能, JSR303校验, 快捷的ajax...映射动态请求 --> <mvc:annotation-driven></mvc:annotation-driven> </beans> \"]},\"461\":{\"h\":\"2.2.3. dbconfig.properties\",\"t\":[\"jdbc.driverClassName=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8 jdbc.username=root jdbc.password=123456 \"]},\"462\":{\"h\":\"2.2.4. applicationContext.xml【重头戏】\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:context=\\\"http://www.springframework.org/schema/context\\\" xmlns:aop=\\\"http://www.springframework.org/schema/aop\\\" xmlns:tx=\\\"http://www.springframework.org/schema/tx\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\\\"> <!-- Spring配置文件, 这里主要配置和业务逻辑有关的 --> <context:component-scan base-package=\\\"org.example\\\"> <context:exclude-filter type=\\\"annotation\\\" expression=\\\"org.springframework.stereotype.Controller\\\"/> </context:component-scan> <!-- 引入数据库的配置文件 --> <context:property-placeholder location=\\\"classpath:dbconfig.properties\\\"></context:property-placeholder> <!-- 数据源 --> <bean id=\\\"dataSource\\\" class=\\\"com.alibaba.druid.pool.DruidDataSource\\\"> <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driverClassName}\\\"/> <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/> <property name=\\\"username\\\" value=\\\"${jdbc.username}\\\"/> <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/> </bean> <!-- 整合mybatis 目的：1、spring管理所有组件。mapper的实现类。 service==>Dao @Autowired:自动注入mapper； 这样就避免了每要用一个mapper得先SqlSessionFactory还要openSession()这样的一堆操作 2、spring用来管理事务，spring声明式事务 --> <bean id=\\\"sessionFactory\\\" class=\\\"org.mybatis.spring.SqlSessionFactoryBean\\\"> <!-- 指定MyBatis全局配置文件的位置 --> <property name=\\\"configLocation\\\" value=\\\"classpath:mybatis-config.xml\\\"/> <!-- 指定数据源 --> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> <!-- 指定MyBatis Mapper文件的位置 --> <!-- 我就是这里配错了找了半天！！！注意加上 /*.xml --> <!-- 提出问题：在引入资源文件时，classpath 什么时候用，什么时候不用？ 以前这个错误我踩过两次坑，找了很久！！！ --> <!-- 猜测：引用包时不加，引用具体文件时候加？--> <property name=\\\"mapperLocations\\\" value=\\\"classpath:org/example/mapper/xml/*.xml\\\"/> </bean> <!-- 配置扫描器, 将Mapper接口生成代理注入到Spring --> <bean id=\\\"mapperScannerConfigurer\\\" class=\\\"org.mybatis.spring.mapper.MapperScannerConfigurer\\\"> <!-- 指定mapper接口所在包 --> <property name=\\\"basePackage\\\" value=\\\"org.example.mapper\\\"/> <!-- 指定sqlSessionFactoryBean配置在Spring中的id值 --> <property name=\\\"sqlSessionFactoryBeanName\\\" value=\\\"sessionFactory\\\"/> </bean> <!-- 配置一个专门用来进行Batch操作的sqlSession --> <bean id=\\\"sessionTemplate\\\" class=\\\"org.mybatis.spring.SqlSessionTemplate\\\"> <!-- 指定sqlSessionFactory --> <constructor-arg name=\\\"sqlSessionFactory\\\" ref=\\\"sessionFactory\\\"/> <!-- 设置执行类型为Batch --> <constructor-arg name=\\\"executorType\\\" value=\\\"BATCH\\\"/> </bean> <!-- 事务控制 --> <bean id=\\\"transactionManager\\\" class=\\\"org.springframework.jdbc.datasource.DataSourceTransactionManager\\\"> <!-- 控制主数据源 --> <property name=\\\"dataSource\\\" ref=\\\"dataSource\\\"/> </bean> <!-- 使用xml配置形式的事务(重要的都是使用xml) --> <aop:config> <!-- 配置切入点表达式 --> <aop:pointcut id=\\\"txPoint\\\" expression=\\\"execution(* org.example.service..*(..))\\\"/> <!-- 配置事务增强 --> <aop:advisor advice-ref=\\\"txAdvice\\\" pointcut-ref=\\\"txPoint\\\"></aop:advisor> </aop:config> <!-- 配置事务增强, 事务如何切入; 并指定事务管理器, 事务管理器名称默认就是transactionManager --> <tx:advice id=\\\"txAdvice\\\" transaction-manager=\\\"transactionManager\\\"> <tx:attributes> <!-- 所有方法都是事务方法 --> <tx:method name=\\\"*\\\"/> <!-- 以get开始的方法设置只读事务, 底层有优化 --> <tx:method name=\\\"get*\\\" read-only=\\\"true\\\"/> </tx:attributes> </tx:advice> </beans> \"]},\"463\":{\"h\":\"2.2.5. log4j.properties\",\"t\":[\"log4j.rootLogger=DEBUG, Console #Console log4j.appender.Console=org.apache.log4j.ConsoleAppender log4j.appender.Console.layout=org.apache.log4j.PatternLayout log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n log4j.logger.java.sql.ResultSet=INFO log4j.logger.org.apache=INFO log4j.logger.java.sql.Connection=DEBUG log4j.logger.java.sql.Statement=DEBUG log4j.logger.java.sql.PreparedStatement=DEBUG \"]},\"464\":{\"h\":\"2.2.6. mybatis-config.xml\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <!-- configuration: 核心配置文件 --> <configuration> <settings> <!-- 开启驼峰命名法 --> <setting name=\\\"mapUnderscoreToCamelCase\\\" value=\\\"true\\\"/> <!-- 日志 --> <setting name=\\\"logImpl\\\" value=\\\"LOG4J\\\"/> </settings> <!-- 批量起别名 --> <typeAliases> <package name=\\\"org.example.bean\\\"/> </typeAliases> </configuration> \"]},\"465\":{\"h\":\"2.3. 项目结构\",\"t\":[\"image-20220113161851133\",\"ps：其他的java类和测试就不贴了，就简单的测了一下。\",\"MyBatis Generator 简称 MBG ，是一个专门为 MyBatis 框架使用者定制的代码生成器，可以快速的根据表生成对应的映射文件，接口，以及 bean 类。支持基本的增删改查，以及 QBC 风格的条件查询。但是表连接、存储过程等这些复杂 sql 的定义需要我们手工编写\",\"自己用过MyBatis-Plus的，这里就不测了。有需要就去读文档就好。\",\"获取sqlSessionFactory对象\",\"解析文件的每一个信息保存在Configuration中，返回包含Configuration的DefaultSqlSession；\",\"注意：【MappedStatement】：代表一个增删改查的详细信息\",\"获取sqlSession对象\",\" 返回一个DefaultSQlSession对象，包含Executor和Configuration; \",\" 这一步会创建Executor对象； \",\"获取接口的代理对象（MapperProxy）\",\" getMapper，使用MapperProxyFactory创建一个MapperProxy的代理对象 \",\" 代理对象里面包含了，DefaultSqlSession（Executor） \",\"执行增删改查方法\",\"总结：\",\"根据配置文件（全局，sql映射）初始化出Configuration对象\",\"创建一个DefaultSqlSession对象，他里面包含Configuration以及Executor（根据全局配置文件中的defaultExecutorType创建出对应的Executor）\",\"DefaultSqlSession.getMapper（）：拿到Mapper接口对应的MapperProxy；\",\"MapperProxy里面有（DefaultSqlSession）；\",\"执行增删改查方法：\",\"调用DefaultSqlSession的增删改查（Executor）；\",\"会创建一个StatementHandler对象。（同时也会创建出ParameterHandler和ResultSetHandler）\",\"调用StatementHandler预编译参数以及设置参数值;\",\"使用ParameterHandler来给sql设置参数\",\"调用StatementHandler的增删改查方法；\",\"ResultSetHandler封装结果\",\"注意：四大对象每个创建的时候都有一个interceptorChain.pluginAll(parameterHandler);\",\"image-20220113172923721\",\"image-20220113173017201\",\"image-20220113173036443\",\"image-20220113173101595\",\"在四大对象创建的时候\",\"每个创建出来的对象不是直接返回的，而是interceptorChain.pluginAll(parameterHandler);\",\"获取到所有的Interceptor（拦截器）（插件需要实现的接口）；\",\"​ 调用interceptor.plugin(target);返回target包装后的对象\",\"插件机制，我们可以使用插件为目标对象创建一个代理对象；AOP（面向切面）\",\"​ 我们的插件可以为四大对象创建出代理对象；\",\"​ 代理对象就可以拦截到四大对象的每一个执行；\",\"public Object pluginAll(Object target) { for (Interceptor interceptor : interceptors) { target = interceptor.plugin(target); } return target; } \",\"插件编写：\",\"编写Interceptor的实现类\",\"使用@Intercepts注解完成插件签名\",\"将写好的插件注册到全局配置文件中\",\"需要知道这四大对象的作用：\",\"image-20220113173124592\",\"image-20220113173140474\",\"image-20220113173157681\",\"插件基于拦截器\",\"应该就是配置拦截器，拦截SQL语句，然后根据分页对象配置的要分几页每页多少条，给予封装。\",\"具体看github官网\"]},\"466\":{\"h\":\"SpringBoot2\",\"t\":[\"三刷总算想起做点笔记，这点很重要 语雀官方笔记 重点看源码讲解的视频、Web开发这一章\",\"每导入一个 starter 改写哪些配置直接看官网！！！有些什么配置一目了然！\",\"还有自动化配置文档，这个倒idea双shift找properties也行\",\"看到了P25，由于求职形势逼迫。搁浅... 做项目快速上手能干，往后再回头了\",\"补充面试常问：SpringBoot：\",\"自动装载\",\"怎么实现starter （看我SpringBoot代码的Demo，要知道流程）\",\"bean的生命周期\",\"上面图片的所有基础原生开发，都有另一套方案用响应式替代。支持两种模式开发 @ConditionalOnWebApplication(type = Type.SERVLET) Spring5 除现在用的原生Servlet外多了一套解决方案：响应式开发！！于是SpringBoot出2跟着整 第一季就是掌握整个Sevlet技术栈\",\"第二季响应式还没出，坐等，底层依赖reactor、Netty-reactor 异步非阻塞的方式占用少量资源处理大量并发SpringBoot 2.0 基于 Spring 5 最大的变化就是引入了 React（响应式编程）-> Web Flux（可以非常容易的创建出高性能、高并发的 Web 应用）\",\"例如：Gateway 的跨域 Filter 网关，CorsWebFilter 它是属于 Webflux\"]},\"467\":{\"h\":\"1.Spring能做什么\"},\"468\":{\"h\":\"1.1.Spring的能力\",\"t\":[\"Spring 生态很庞大：细数自己用过的。微观是Spring框架 宏观是一套解决方案生态圈！\",\"Spring Boot\",\"Spring Cloud (Spring Cloud Alibaba)\",\"Spring Framework (Features:Integration->Caching)\",\"Spring Data (JDBC、JPA、Redis implementation for Spring 3.1 cache abstraction)\",\"Spring Session (Data Redis)\",\"Spring AMQP (RabbitMQ)\"]},\"469\":{\"h\":\"1.2.Spring5重大升级\"},\"470\":{\"h\":\"1.2.1.响应式编程\"},\"471\":{\"h\":\"1.2.2.内部源码设计\",\"t\":[\"由于Spring5重大升级 内部源码设计基于Java8的一些新特性，如：接口默认实现。重新设计源码架构！\",\"Spring5基于jdk8，jdk8特性多了接口的默认实现。带来的变化： 问题场景：要是以前底层还需搞个适配器模式（适配器实现接口，实现类继承适配器重写 -> 避免必须实现一些不需要的方法） 处理：接口都统一给一个默认实现，就不需要适配器类了！！！\"]},\"472\":{\"h\":\"2.为什么用SpringBoot\",\"t\":[\"举例如要组装成一台电脑集合上面的技术 配置地狱，而这就是SpringBoot的存在意义它是一个高层框架底层是Spring为了整合Spring整个技术栈 专心于业务逻辑（框架的框架），免于那么多繁琐的配置。不用自己手动组装电脑了，直接买个品牌机！无需掌握各种组装技术！！！\"]},\"473\":{\"h\":\"\",\"t\":[\"以下摘自官网，Title Link 可入 ~ 可以细看心里解读解读\",\"Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \\\"just run\\\". 能快速创建出生产级别的Spring应用\",\"Create stand-alone Spring applications\",\"创建独立Spring应用\",\"Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\",\"内嵌web服务器\",\"Provide opinionated 'starter' dependencies to simplify your build configuration\",\"自动starter依赖，简化构建配置**（防止各jar包冲突）**\",\"Automatically configure Spring and 3rd party libraries whenever possible\",\"自动配置Spring以及第三方功能**（激动人心的特性，对于固定化配置全给你配好 例如mysql redis只要告诉地址之类的而不需要再告诉它什么东西怎么做例如配置数据源。）**\",\"Provide production-ready features such as metrics, health checks, and externalized configuration\",\"提供生产级别的监控、健康检查及外部化配置**（针对运维来说巴适，例如写个配置文件无需回头改代码再发布）**\",\"Absolutely no code generation and no requirement for XML configuration\",\"无代码生成、无需编写XML**（自动配置）**\",\"SpringBoot是整合Spring技术栈的一站式框架\",\"SpringBoot是简化Spring技术栈的快速开发脚手架\"]},\"474\":{\"h\":\"2.2.时代背景\",\"t\":[\"陌生的两个东西：听视频老师讲讲\",\"Spring Cloud Data Flow（那张经典图三板斧中的，连接一切）\",\"云原生（同运维有很大关系！） Serverless（区别直接买一台几核几G的服务造成浪费，这个可以做到用多少占多少。虽然现在不理解但是先码上）\",\"两大优秀特性：依赖管理、自动配置\"]},\"475\":{\"h\":\"1.依赖管理\"},\"476\":{\"h\":\"1.1.版本仲裁\",\"t\":[\"1）依赖管理 <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.3.4.RELEASE</version> </parent> 2）他的父项目：几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制 <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.3.4.RELEASE</version> </parent> ------------------------------------------------------- 1、引入依赖默认都可以不写版本 2、引入非版本仲裁的jar，要写版本号。 ------------------------------------------------------- 3）舍弃父依赖的版本控制，自定义版本 查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。 在当前项目里面重写配置 <properties> <mysql.version>5.1.43</mysql.version> </properties> \"]},\"477\":{\"h\":\"1.2.starter场景启动器\",\"t\":[\"重点第五点，这个starter又会带出 spring-boot-autoconfigure 具体看自动配置\",\"1、见到很多 spring-boot-starter-* ： *就某种场景 All official starters follow a similar naming pattern; 2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入 3、SpringBoot所有支持的场景 https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter 4、见到的 *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。 5、所有场景启动器最底层的依赖 每个 official starts 下的第一个 dependency 就是下面这个 ↓ <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter</artifactId> <version>2.3.4.RELEASE</version> <scope>compile</scope> </dependency> \"]},\"478\":{\"h\":\"\",\"t\":[\"@SpringBootApplication 等同于 @SpringBootConfiguration #配置类 @EnableAutoConfiguration #按需自动配置 **核心** 1）@AutoConfigurationPackage @Import(AutoConfigurationPackages.Registrar.class) //扫描的是配置类，区分@ComponentScan 2）@Import(AutoConfigurationImportSelector.class) //META-INF/spring.factories @ComponentScan(\\\"com.atguigu.boot\\\") #扫描主启动类下所有组件 \"]},\"479\":{\"h\":\"2.1.效果体现\"},\"480\":{\"h\":\"2.1.1.What（效果）\",\"t\":[\"自动配置好了一切，包括SpringMVC常用组件（功能） 搜一下以前的帖子，Spring整合SpringMVC的帖子发现xml会配一大堆东西！！！这些组件springBoot启动的时候会把组件都装配到容器中，不用配。\",\"前端控制器DispatcherServlet：拦截所有的前端的请求；\",\"字符编码characterEncodingFilter：解决返回中文字符串乱码问题；\",\"视图解析器viewResolver：对返回的视图进行渲染呈现；\",\"文件上传解析器multipatResolver：文件上传；\",\"代码验证：打印所有启动时候装载的 Beans\",\"//返回一个IOC容器 ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args); String[] names = run.getBeanDefinitionNames(); Arrays.stream(names).forEach(System.out::println); \"]},\"481\":{\"h\":\"\",\"t\":[\"这个jar里有几乎SpringBoot所需要全场景，有很多爆红的类其实导入相应的dependency就不会爆红了\",\"spring-boot-starter-web -> spring-boot-starter -> spring-boot-autoconfigure\",\"For example：以MySQL 配置数据源为例：DataSourceProperties\"]},\"482\":{\"h\":\"2.2.@AutoConfigurationPackage🌟\",\"t\":[\"ChatGPT：转念一想，这两个注解都如字面意思 这样就很好区分异同\",\"springboot @ComponentScan和@AutoConfigurationPackage的区别\",\"@ComponentScan 和 @AutoConfigurationPackage 都是 Spring Boot 中用来扫描组件和自动配置的注解，它们的区别在于：\",\"@ComponentScan：这个注解是用来指定 Spring 扫描组件的位置，会扫描指定的包及其子包中的所有类，找到标记为 @Component、@Service、@Repository 等注解的类，并将其注册为 Spring 的 Bean。\",\"@AutoConfigurationPackage：这个注解是用来指定自动配置所在的包，它会扫描指定的包及其子包中的所有类，找到标记为 @Configuration 的类，并将其注册为 Spring 的 Bean。\",\"简而言之，@ComponentScan 和 @AutoConfigurationPackage 都是用来扫描组件的注解，区别在于 @ComponentScan 扫描的是标记了特定注解的组件类，而 @AutoConfigurationPackage 扫描的是配置类。在 Spring Boot 应用中，通常会在启动类上使用 @SpringBootApplication 注解，该注解中已经包含了 @ComponentScan 和 @AutoConfigurationPackage，因此一般不需要单独使用这两个注解。\"]},\"483\":{\"h\":\"2.3.@Import(AutoConfigurationImportSelector.class)🌟\",\"t\":[\"1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件 2、调用List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类 3、利用工厂加载 Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件 4、从META-INF/spring.factories位置来加载一个文件。 默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件 spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有 META-INF/spring.factories\",\"作用：文件里面写死了spring-boot一启动就要给容器中加载的所有配置类，并不是所有都生效@Condition 例如AOP、Batch就需导入相关包才生效\",\"学习：可以找找各个第三方jar包里面的 xxxxxAutoConfiguration 分析是否生效装配进来了\",\"总结：\",\"用户配的优先 @ConditionalOnMissingBean\",\"如果用户配的bean名字不符合规范，就给你纠正过来，如下给容器中加入了文件上传解析器：\",\" @Bean @ConditionalOnBean(MultipartResolver.class) //容器中有这个类型组件 @ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) //容器中没有这个名字 multipartResolver 的组件 public MultipartResolver multipartResolver(MultipartResolver resolver) { //给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。 //SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范 // Detect if the user has created a MultipartResolver but named it incorrectly return resolver; } \",\"一般这些自动配置类都绑了xxxxProperties里面拿。xxxProperties和配置文件进行了绑定\",\"判断场景自动配置那些生效那些没生效：\",\"自己分析，引入场景对应的自动配置一般都生效了\",\"配置文件中debug=true开启自动配置报告。Negative（不生效）\\\\Positive（生效）【方便分析源码】\",\"自定义器 XXXXXCustomizer；【不熟】\"]},\"484\":{\"h\":\"3.自动配置-实践\",\"t\":[\"想不起配置文件怎么配 SQL 于是有了下文\"]},\"485\":{\"h\":\"以MySQL 配置数据源为例：DataSourceProperties\",\"t\":[\"DataSourceAutoConfiguration -> 组件 -> DataSourceProperties -> application.properties \",\"总结：\",\"SpringBoot先加载所有的自动配置类 xxxxxAutoConfiguration\",\"每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定\",\"生效的配置类就会给容器中装配很多组件\",\"只要容器中有这些组件，相当于这些功能就有了\",\"定制化配置\",\"用户直接自己@Bean替换底层的组件\",\"用户去看这个组件是获取的配置文件什么值就去修改。\",\"xxxxxAutoConfiguration ---> 组件 --->xxxxProperties里面拿值 ----> application.properties\",\"image-20220901180324251\",\"image-20220901213237083\",\"image-20230217115759420\",\"image-20220901220507136\"]},\"486\":{\"h\":\"1.Spring提供的IOC容器实现的两种方式（两个接口）\",\"t\":[\"ApplicationContext context = new ClassPathXmlApplicationContext(\\\"beans.xml\\\");\",\"a）BeanFactory接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）\",\"b）ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！\",\"ps：容器的话主要有两个，BeanFactory和ApplicationContext，他们简单区别就是：BeanFactory是低级容器，延迟加载bean，编程时方式创建；ApplicationContext是 BeanFactory 的子接口，是高级容器，一次性加载bean，以声明式方式创建\",\"//upupor TrueSend trueSend = SpringContextUtils.getBean(TrueSend.class); @Component public class SpringContextUtils implements ApplicationContextAware { //UNKNOWN 这里不用注入吗 XD 因为实现了 ApplicationContextAware 此接口重写方法拿到了 private static ApplicationContext applicationContext; @Override public void setApplicationContext(ApplicationContext applicationContext) { SpringContextUtils.applicationContext = applicationContext; } ....... \"]},\"487\":{\"h\":\"2.IOC操作Bean管理\",\"t\":[\"a）Bean管理就是两个操作：（1）Spring创建对象；（2）Spring注入属性\",\"基于（2）现在理解了：\",\"a）set方式注入\",\"//（1）传统方式： 创建类，定义属性和对应的set方法 public class Book { //创建属性 private String bname; //创建属性对应的set方法 public void setBname(String bname) { this.bname = bname; } } \",\"<!--（2）spring方式： set方法注入属性--> <bean id=\\\"book\\\" class=\\\"com.atguigu.spring5.Book\\\"> <!--使用property完成属性注入 name：类里面属性名称 value：向属性注入的值 --> <property name=\\\"bname\\\" value=\\\"Hello\\\"></property> <property name=\\\"bauthor\\\" value=\\\"World\\\"></property> </bean> \",\"b）有参构造函数注入\"]},\"488\":{\"h\":\"补充：构造参数注入 setter注入\",\"t\":[\"以前一直不懂 构造参数注入\",\"@RequiredArgsConstructor //XD lombook @RequestMapping(\\\"member\\\") public class MemberController { private final MemberOperateService memberBusinessService; //XD final \",\"setter 注入估计就是 @Autowired 好像不是\",\"Q&A 因为有三种注入方式：\",\"1.set方法注入 2.构造方法注入 3.@autowire自动注入\",\"总结起来：\",\"@RequiredArgsConstructor与private final一起使用是一种构造函数注入的方式。\",\"@Autowired注解可以用于字段、setter方法或构造函数，用于实现自动装配（autowiring），可以通过setter注入或构造函数注入的方式来注入依赖项。\",\"@Resource默认通过名称注入，如名称无法找到则通过类型注入； @Autowired默认通过类型注入，如存在多个类型则通过名称注入，也可以配合@Qualifier注解，在@Qualifier中指定bean的名字来注入你想要的那个bean\",\"其实lombok有个@RequiredArgsConstructor注解，可以帮你用构造器注入\"]},\"489\":{\"h\":\"3.Bean生命周期\",\"t\":[\"bean 的后置处理器，bean 生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）\",\"实例化\",\"属性赋值 （构造参数注入，setter注入等）\",\"初始化 （检查aware接口，前置处理，后置处理等，这个过程中可能自定义了一些初始化之前的操作和之后的操作）\",\"使用\",\"销毁 （销毁前可能自己配置了一些销毁之前的方法)\",\"第一步：Construction 构造Bean对象\",\"第二步：set Bean 属性值\",\"（1）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization\",\"第三步：init调用自定义的初始化方法 //这前三步在 new ClassPathXmlApplicationContext(\\\"beans-test.xml\\\"); 就搞完\",\"（2）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization\",\"第四步：获取实例化后的 Bean 可以开始使用 Bean org.example.bean.BeanLife@649bec2e\",\"第五步：destroy调用自定义销毁的方法 //手动让 bean 实例销毁 context.close(); //ClassPathXmlApplicationContext\",\"​\",\" <bean id=\\\"beanLife\\\" class=\\\"org.example.bean.BeanLife\\\" init-method=\\\"init\\\" destroy-method=\\\"destroy\\\"> <property name=\\\"properties\\\" value=\\\"属性XD\\\"/> </bean> <!--配置后置处理器--> <bean id=\\\"myBeanPost\\\" class=\\\"org.example.config.MyBeanPost\\\"/> \",\"public class MyBeanPost implements BeanPostProcessor //创建后置处理器实现类，对应（1）（2）\"]},\"490\":{\"h\":\"4.AOP\",\"t\":[\"RuoYi、upupor 自定义注解全是和 AOP 相关\",\"除了有个注解是配合SpringSecurity实现注解地方放行访问 （RUOYI）\"]},\"491\":{\"h\":\"学习手册.pdf 补充：\",\"t\":[\"多个切面的情况下，可以通过 @Order 指定先后顺序，数字越小，优先级越高。\"]},\"492\":{\"h\":\"说说你平时有用到AOP吗？ （例子很好，要知行合一）\",\"t\":[\"PS：这道题老三的同事面试候选人的时候问到了，候选人说了一堆AOP原理，同事 就势来一句，你能现场写一下AOP的应用吗？结果——场面一度很尴尬。虽然我对面 试写这种百度就能出来的东西持保留意见，但是还是加上了这一问，毕竟招人最后 都是要撸代码的。\",\"这里给出一个小例子，SpringBoot项目中，利用AOP打印接口的入参和出参日志，以 及执行时间，还是比较快捷的。\",\"引入依赖：引入AOP依赖\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-aop</artifactId> </dependency> \",\"自定义注解：自定义一个注解作为切点\",\"@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD}) @Documented public @interface WebLog { } \",\"配置AOP切面：\",\"@Aspect：标识切面\",\"@Pointcut：设置切点，这里以自定义注解为切点，定义切点有很多其它种方 式，自定义注解是比较常用的一种。\",\"@Before：在切点之前织入，打印了一些入参信息\",\"@Around：环绕切点，打印返回参数和接口执行时间\",\"@Aspect @Component public class WebLogAspect { private final static Logger logger = LoggerFactory.getLogger(WebLogAspect.class); /** * 以自定义 @WebLog 注解为切点 **/ @Pointcut(\\\"@annotation(cn.fighter3.spring.aop_demo.WebLog)\\\") public void webLog() {} /** * 在切点之前织入 */ @Before(\\\"webLog()\\\") public void doBefore(JoinPoint joinPoint) throws Throwable { // 开始打印请求日志 ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes(); HttpServletRequest request = attributes.getRequest(); // 打印请求相关参数 logger.info(\\\"============ Start==========================================\\\"); // 打印请求 url logger.info(\\\"URL : {}\\\", request.getRequestURL().toString()); // 打印 Http method logger.info(\\\"HTTP Method : {}\\\", request.getMethod()); // 打印调用 controller 的全路径以及执行方法 logger.info(\\\"Class Method : {}.{}\\\", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName()); // 打印请求的 IP logger.info(\\\"IP : {}\\\", request.getRemoteAddr()); // 打印请求入参 logger.info(\\\"Request Args : {}\\\",new ObjectMapper().writeValueAsString(joinPoint.getArgs())); } /** * 在切点之后织入 */ @After(\\\"webLog()\\\") public void doAfter() throws Throwable { // 结束后打个分隔线，方便查看 logger.info(\\\"================== End===========================================\\\"); } /** * 环绕 */ @Around(\\\"webLog()\\\") public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { //开始时间 long startTime = System.currentTimeMillis(); Object result = proceedingJoinPoint.proceed(); // 打印出参 logger.info(\\\"Response Args : {}\\\", new ObjectMapper().writeValueAsString(result)); // 执行耗时 logger.info(\\\"Time-Consuming : {} ms\\\", System.currentTimeMillis() - startTime); return result; } } \",\"使用：只需要在接口上加上自定义注解\",\"@GetMapping(\\\"/hello\\\") @WebLog(desc = \\\"这是一个欢迎接口\\\") public String hello(String name){ return \\\"Hello \\\"+name; } \"]},\"493\":{\"h\":\"静态代理为什么是静态代理？\",\"t\":[\"aop就是用的代理实现，代理分为静态代理和动态代理\",\"静态代理比如 AspectJ，AOP框架会在编译阶段生成AOP代理类，属于编译时的增强\",\"动态代理比如 jdk动态代理 和 CGLIB ，AOP框架不会去修改字节码，而是每次运行时在内存临时为方法生成一个AOP对象，AOP对象包含了目标对象的全部方法，在特定切点做了增强处理，并回调原对象的方法。\",\"当时的回答：spring使用的就是动态代理，动态代理有两个：jdk自带的和Cglib，jdk的代理效率会高一些，Cglib是动态代码生成库\",\"Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作\"]},\"494\":{\"h\":\"补充：Spring AOP 和 AspectJ AOP 有什么区别？\",\"t\":[\"Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。 Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。\",\"Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，\",\"如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。\",\"著作权归所有 原文链接：https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html\"]},\"495\":{\"h\":\"RuoYi 补充 AOP 实操\",\"t\":[\"1.@Before 使用场景：限流处理\",\"@Aspect //切面声明？ @Component public class RateLimiterAspect{ @Before(\\\"@annotation(rateLimiter)\\\") public void doBefore(JoinPoint point, RateLimiter rateLimiter) \",\"Redis Key： rate_limit:com.ruoyi.web.controller.system.SysUserController-list\",\"JoinPoint point 这个类可以获取 AOP 前置通知（Before Advice）注解标注的类名及其方法名【反射】\",\"2.@AfterReturning 使用场景：日志记录 增删改\",\"处理完请求后执行\"]},\"496\":{\"h\":\"Upupor 补充 AOP 实操\",\"t\":[\"@Around 使用场景：博客下面统计记录 响应时间 （spring的 StopWatch 类 + @Around 实现！！！）\",\"@Around(\\\"controllerLog()\\\") public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { // 调用业务方法 result = proceedingJoinPoint.proceed(); //XD 这里调用目标方法，这之前的代码都是【前置逻辑】 下面的代码都是【后置逻辑】 \"]},\"497\":{\"h\":\"5.Spring 事务\",\"t\":[\"问：项目中什么地方用到了 AOP 在 Spring 中进行事务管理中就用到了！！！\",\"声明式事务：就是用注解的方式/xml开启事务底层使用的是 AOP，相对的手动写代码开事务关事务\"]},\"498\":{\"h\":\"6.设计模式\",\"t\":[\"至少前5种答出来\",\"IOC 工厂模式 : Spring 容器本质是一个大工厂，使用工厂模式通过 BeanFactory、 ApplicationContext 创建 bean 对象。\",\"AOP 代理模式 : Spring AOP 功能就是通过代理模式来实现的，分为动态代理和静 态代理。\",\"IOC 单例模式 : Spring 中的 Bean 默认都是单例的，这样有利于容器对Bean的管理。\",\"模板模式 : Spring 中 JdbcTemplate、RestTemplate 等以 Template结尾的对数据 库、网络等等进行操作的模板类，就使用到了模板模式。\",\"观察者模式: Spring 事件驱动模型就是观察者模式很经典的一个应用。 \",\"可以将观察者模式看作是发布订阅模式的一个特例\",\"在Spring框架中，事件驱动的编程模型是基于发布订阅模式的。\",\"适配器模式 :Spring AOP 的增强或通知 (Advice) 使用到了适配器模式、Spring MVC 中也是用到了适配器模式适配 Controller。\",\"策略模式：Spring中有一个Resource接口，它的不同实现类，会根据不同的策略 去访问资源。\"]},\"499\":{\"h\":\"7.哪些模块组成\",\"t\":[\"https://juejin.cn/post/6997930907227127838\",\"四个核心模块\",\"image-20210818214831566\",\"根据 Spring 源码模块中的 gradle 依赖，可以整理出这么一张依赖关系图\",\"image-20210818222259022\",\"搞个时间重新排个版！知识待完善\",\"第一季：SpringBoot2核心技术-基础入门\",\"Spring注解驱动\"]},\"500\":{\"h\":\"@Retention(RetentionPolicy.RUNTIME)\",\"t\":[\"用于使注解在运行时可以通过反射来访问和处理。这对于某些需要在运行时动态处理注解的场景非常有用\",\"RuoYi 运行时候动态获取注解信息，比如\"]},\"501\":{\"h\":\"@PostConstruct\",\"t\":[\"@PostConstruct 是一个在 Spring 框架中常用的注解，它用于指定在对象创建完成后需要立即执行的方法。当使用 @PostConstruct 注解标记一个方法时，Spring 在实例化该对象并完成依赖注入后，会自动调用该方法。\",\"RuoYi 中用来开启 quartz\"]},\"502\":{\"h\":\"@RquestBody\",\"t\":[\"获取请求体，必须发送POST请求。SpringMVC自动将请求体的数据**（json），转为对应Java对象**（+形参Entity上）\",\"//以较简单的User对象接收前端传过来的ison数据(SpringMVC会智能的将符合要求的数据装配进该User对象中) public String test(@RequestBody User user){} \"]},\"503\":{\"h\":\"@ResponseBody\",\"t\":[\"例如，异步获取json数据，加上@Responsebody注解后，就会直接返回json数据。\",\"@RestController = @Controller + @ResponseBody\",\" @ExceptionHandler(Exception.class) @ResponseBody //返回json数据 public Result error(Exception e){ e.printStackTrace(); return Result.fail(); //本来这里返回 Result 对象，但是加上上面注解。会返回 JSON（@ResponseBody） } \"]},\"504\":{\"h\":\"@Scope\",\"t\":[\"配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\",\"//@Scope(\\\"prototype\\\") // 现在还不是多例，还需要指定代理模式 //* 原生 Spring JDK代理 * 现在 SpringBoot 2.X 之后都是CGlib，这里用 CGlib @Scope(value = \\\"prototype\\\", proxyMode = ScopedProxyMode.TARGET_CLASS) \"]},\"505\":{\"h\":\"@Value\",\"t\":[\"1）必须把当前类加入spring的容器管理@Component，注意要在主启动类下，测试类的话用SpringBoot的测试注解，这个也分4/5注意。（容易忽略，不加 [貌似] 得到的为 null）\",\"2）变量不能用static修饰！！！\",\"如果想要注入静态 spring @value 注入static 注入静态变量方法\",\"**先说明冒号的作用 ：可以设置默认值 **@Value(\\\"${prop.url:'http://myurl.com'}\\\")\"]},\"506\":{\"h\":\"@SpringBootApplication( )\",\"t\":[\"适用场景：pom 引入的 Common 有数据源，但是本 Demo 不需要。启动报错要求配\",\"后话：个人觉得pom exclude 应该也行\"]},\"507\":{\"h\":\"\",\"t\":[\"说白了 @ConfigurationProperties 相当于把使用 @ConfigurationProperties 的类进行了一次注入 因为这个类没有@Conponent，用这种方法放到 IOC 容器中才能用 只有容器中的组件才能有SpringBoot提供的强大的功能\",\"场景：如果@ConfigurationProperties是在第三方包中，那么@component是不能注入到容器的。只有@EnableConfigurationProperties才可以注入到容器。 RedisCacheConfiguration配置kv的序列化的时候需要把其它配置也给拿上就需要CacheProperties放入容器使用\"]},\"508\":{\"h\":\"@ConfigurationProperties\",\"t\":[\"解决：以前得IO流拿properties里的k v\",\"​\"]},\"509\":{\"h\":\"@Import & @ComponentScan\",\"t\":[\"我使用的场景：配置类放在 common 模块，其它模块都来用这个配置类\",\"导入组件默认组件名字是 com.example.boot.bean.Cat 全类名\",\"也可以导入dependence jar里的class\"]},\"510\":{\"h\":\"@PostConstruct\",\"t\":[\"场景：MyRabbitConfig对象创建完成以后，执行这个方法rabbitTemplate.setConfirmCallback用于设置确认回调 ConfirmCallback\"]},\"511\":{\"h\":\"@PathVariable(\\\"page\\\")\",\"t\":[\"@GetMapping(value = \\\"/{page}.html\\\") public String listPage(@PathVariable(\\\"page\\\") String page) { return page; } \",\"使用@RequestParam时，URL是这样的：http://host:port/path?参数名=参数值\",\"使用@PathVariable时，URL是这样的：http://host:port/path/参数值\"]},\"512\":{\"h\":\"@PathParam 发现post请求的话只能用这个来拿参数 注意参数过长拿不到需要用request类拿\",\"t\":[\"My：应该是Get URL有大小限制？ 也不对request不是拿到了吗\",\"@PathParam(\\\"imegse\\\") String imageBase64 //@PostMapping(\\\"/photo\\\") 拿不到参数 String channel = request.getParameter(\\\"imegse\\\"); //能拿到 \"]},\"513\":{\"h\":\"@Builder\",\"t\":[\"Lombok annotation为你的类生成相对略微复杂的构建器API，放随意参数的构造器 链式调用就行\",\"User.builder() .userName(\\\"hh\\\") .passWord(\\\"123\\\"); \"]},\"514\":{\"h\":\"@Bean\",\"t\":[\"// @Autowired // CacheProperties cacheProperties; //因为下面是 @Bean 直接放参数用就行！ @Bean //原来@Bean注解想容器注入对象的时候，会自动将容器中已经有的对象传入到@Bean注解的方法参数中 public RedisCacheConfiguration redisCacheConfiguration(CacheProperties cacheProperties) { //这个参数能拿值？ 这个方法就是给容器放东西，方法传的所有参数所有参数都会从容器中进行确定 所以会自动去IOC中拿 \"]},\"515\":{\"h\":\"@GetMapping\",\"t\":[\"//场景：return String 内容是支付宝付款页面 @ResponseBody @GetMapping(value = \\\"/aliPayOrder\\\",produces = \\\"text/html\\\") \"]},\"516\":{\"h\":\"@ComponentScan(\\\"com.example\\\") -> @SpringBootApplication(scanBasePackages = \\\"com.example\\\")\"},\"517\":{\"h\":\"@Configuration(proxyBeanMethods = false)//默认是true //告诉SpringBoot这是一个配置类 == 配置文件\",\"t\":[\"底层会有非常多这样的写法，为的就是加速容器启动过程，减少判断（前提：类组件之间无依赖关系）\",\"MyConfig bean = run.getBean(MyConfig.class); System.out.println(bean); //`com.example.boot.config.MyConfig$$EnhancerBySpringCGLIB$$1@38fc34fd` 默认是Full模式，每一次都从容器中拿 相对的还有Lite即false模式，为什么这么叫因为这样不用去容器中对照来一个返回一个！ 最佳实战：别人不依赖这些组件（Person里面拿Pet）就给调成false System.out.println(bean.ss() == bean.ss()); //true \",\"最佳实战：\",\"配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断\",\"配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式\",\"Mark！！！Bean的加载顺序 在spring ioc的过程中，\",\"1）优先解析@Component，@Service，@Controller...注解的类。\",\"2）其次解析配置类，也就是@Configuration标注的类\",\"3）最后开始解析配置类中定义的bean。\",\"但是tomXXX的条件注解依赖的是user01，user01是被定义的配置类中的， 所以此时配置类的解析无法保证先后顺序，就会出现不生效的情况。 me：所以才会有condition这些？\"]},\"518\":{\"h\":\"@ImportResource(\\\"classpath:beans.xml\\\")\",\"t\":[\"这里之所以要classpath，个人理解：resources不是相对路径\",\"总有些老jar包或公司老配置需要的\"]},\"519\":{\"h\":\"@ControllerAdvice\",\"t\":[\"基于 AOP 实现，不改变源代码增加原功能\"]},\"520\":{\"h\":\"@RestControllerAdvice\",\"t\":[\"@RestControllerAdvice是@ControllerAdvice的衍生注解，专门用于处理RESTful风格的控制器。与@ControllerAdvice类似， 使用@RestControllerAdvice的好处是，它不仅会处理异常，还会以RESTful风格返回响应，而不仅仅是视图。这对于构建RESTful API非常方便。\",\"@RestControllerAdvice 是 Spring MVC 提供的一个注解，用于统一处理所有 Controller 层抛出的异常。当 Controller 层抛出异常时，可以使用 @RestControllerAdvice 注解的类来捕获并处理异常，从而对异常进行统一处理。\",\"@RestControllerAdvice 注解的类通常会包含多个 @ExceptionHandler 注解的方法，每个 @ExceptionHandler 注解的方法用于处理不同类型的异常。例如，以下代码演示了如何使用 @RestControllerAdvice 注解处理 RuntimeException 类型的异常\",\"@RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(RuntimeException.class) public ResponseEntity<String> handleRuntimeException(RuntimeException ex) { return ResponseEntity .status(HttpStatus.INTERNAL_SERVER_ERROR) .body(\\\"Internal Server Error\\\"); } } \",\"**总结：**通过 @RestControllerAdvice 注解，我们可以将所有 Controller 层抛出的异常集中处理，避免代码重复，提高代码复用性和可维护性。同时，由于 @RestControllerAdvice 注解是基于 AOP 实现的，因此可以很方便地添加全局异常处理逻辑，例如日志记录、邮件通知等。\"]},\"521\":{\"h\":\"@ServletComponentScan\",\"t\":[\"Servlet（控制器）、Filter（过滤器）、Listener（监听器）可以直接通过@WebServlet、@WebFilter、@WebListener注解自动注册到Spring容器中，无需其他代码。\"]},\"522\":{\"h\":\"1）一些小点\",\"t\":[\"我 download 了upupor的开源项目发现项目里的数据库敏感信息都是 ${} 方式给的！！！\",\"在 Spring Boot 项目的 YAML 配置文件中，${} 是用于引用外部属性或配置的占位符。你可以为这些占位符提供具体的值，以替换配置文件中的 ${} 表达式。\",\"有几种方式可以给 ${} 占位符提供值：\",\"application.properties/application.yml 文件：在 Spring Boot 项目的 src/main/resources 目录下，你可以创建一个 application.properties 文件（或 application.yml，根据你的选择）来提供属性的具体值。例如，如果你在配置文件中有 ${my.property} 占位符，那么你可以在 application.properties 文件中添加以下内容：\",\"my.property=具体的值 \",\"命令行参数：你可以在启动项目时通过命令行参数来传递属性值。例如，使用以下命令启动 Spring Boot 项目，并为 ${my.property} 提供具体值： 【idea Environment variables 里面给也行！！！】\",\"java -jar myproject.jar --my.property=具体的值 \",\"环境变量：你可以将属性值设置为环境变量，并在项目启动时读取这些环境变量。例如，将 ${my.property} 设置为环境变量 MY_PROPERTY，然后在项目启动时，它将自动读取该环境变量的值。\",\"这些是最常用的给 ${} 占位符提供值的方法。你可以根据实际需求选择适合的方式来提供属性的具体值。\",\"需要注意的是，如果你在 application.properties 文件中定义了属性的默认值，那么当没有其他方式提供属性值时，将使用该默认值。例如：\",\"my.property=默认值 \",\"如果没有其他方式提供 ${my.property} 的具体值，它将默认使用 \\\"默认值\\\"。\",\"希望这可以帮助你给 Spring Boot 项目的 YAML 文件中的 ${} 占位符提供具体的值。如有进一步的疑问，请随时提问。\"]},\"523\":{\"h\":\"的依赖即可.\",\"t\":[\"注意IDEA 2020.3以及之后的版本内置了lombok插件\",\"在 Spring Boot 中，您可以使用 logging.level 属性来配置不同包或类的日志级别。\",\"通过配置 Spring Boot 的日志级别，您可以同时控制 MyBatis-Plus 和 MyBatis 的日志输出。\",\"logging: level: com.zzq.gulimall: DEBUG —————————————————————— logging: level: com.example.distributedlock.dao: debug #一定要加这一行指定目录，不然报错 \"]},\"524\":{\"h\":\"”黑卡丽“，光的意思很快 日本人发明。区分Druid连接池为监控而生扩展点多..\"},\"525\":{\"h\":\"\",\"t\":[\"如果用了 Nacos 会依赖导入 fastjson（雷神用了这个）\"]},\"526\":{\"h\":\"快速定位报错原因\",\"t\":[\"image-20221017164745509\"]},\"527\":{\"h\":\"3）Test 测试类：\"},\"528\":{\"h\":\"\",\"t\":[\"现在需要知道！主要是 spring boot 2.2之前使用的是 Junit4 之后是 Junit5，还需知道他们两个有什么区别看网站！ \",\"都要 public\",\"@RunWith\"]},\"529\":{\"h\":\"\",\"t\":[\"SpringBoot 测试类 需要从容器中获取实例是需要加上该注解，否则空指针，管你是啥IDE。貌似是Junit4用的注解\",\"//不加@RunWith(SpringRunner.class)就取不到容器中的 Bean @Autowired private RestHighLevelClient client; @Test public void contextLoads() { System.out.println(client); //null } \"]},\"530\":{\"h\":\"单元测试类中，初始化方法\",\"t\":[\"//单元测试类中，初始化方法 alt+insert SetUpMethod //视频中是测 Jedis 用这个方法连 Redis @BeforeEach void setUp() \"]},\"531\":{\"h\":\"\",\"t\":[\"我们新建 SpringBoot 程序发现 src 包和 test 包路径一开始初始化就是一样的！\",\"因为测试类包名得和主启动类一致才能跑测试类\",\"如果不想修改包名，那么需要在注解上加上@SpringBootTest(classes = xxx.class) \",\"但这里会产生额外的问题，因为此时springboot已经把该类当成一个独立的测试类了，这意味着这个测试类对应独立的IOC容器，所以此时我们无法注入到main包中的组件，案例如下,main包下的路径是com.sobot.demo7,而同理，test包下com.sobot.demo7路径下测试类，可以正常装配userMapper组件com.sobot.demo8路径下测试类，则根本无法找到userMapper这个组件 \",\"在这里插入图片描述\"]},\"532\":{\"h\":\"\",\"t\":[\"：）以前竟然不知道\",\"// @Autowired // CacheProperties cacheProperties; //因为下面是 @Bean 直接放参数用就行！ @Bean //原来@Bean注解想容器注入对象的时候，会自动将容器中已经有的对象传入到@Bean注解的方法参数中 public RedisCacheConfiguration redisCacheConfiguration(CacheProperties cacheProperties) { //这个参数能拿值？ 这个方法就是给容器放东西，方法传的所有参数所有参数都会从容器中进行确定 所以会自动去IOC中拿 \"]},\"533\":{\"h\":\"5）数据校验\",\"t\":[\"分布式高级\"]},\"534\":{\"h\":\"6）拦截器\",\"t\":[\"实现步骤:\",\"com.zzq.gulimall.cart.intercept.CartIntercept #编写拦截器 public class CartIntercept implements HandlerInterceptor com.zzq.gulimall.cart.config.GulimallWebConfig #注册拦截器 @Configuration public class GulimallWebConfig implements WebMvcConfigurer \",\"为什么InterceptorRegistry不需要调用addPathPatterns(\\\"/**\\\")也可以拦截所有请求 我在源码看到的是 private final List<String> includePatterns = new ArrayList(); 不能理解为什么会默认拦截所有请求\",\"InterceptorRegistry 是 Spring 框架中用于管理拦截器的注册表，其本身并不具备拦截请求的能力。实际上，InterceptorRegistry 中的拦截器在拦截请求时，是由 HandlerMapping 所管理的 HandlerExecutionChain 中的拦截器链来调用的。而 HandlerMapping 中的拦截器链的触发是由 RequestMappingHandlerMapping 实现的。\",\"在 Spring MVC 中，所有请求都会被 RequestMappingHandlerMapping 处理，而 RequestMappingHandlerMapping 会在初始化时自动注册一个拦截器 HandlerInterceptorAdapter，用于拦截所有请求。所以，即使我们没有在拦截器中调用 addPathPatterns(\\\"/**\\\") 方法来设置拦截路径，也能默认拦截所有请求。\",\"在实际开发中，如果我们需要自定义拦截器，并且只拦截部分请求，可以使用 addPathPatterns 方法来指定拦截路径。如果需要拦截所有请求，则无需设置拦截路径，InterceptorRegistry 会默认将拦截器添加到拦截器链中。\"]},\"535\":{\"h\":\"7）Controller方法常用参数\"},\"536\":{\"h\":\"7.1.Model / RedirectAttributes\",\"t\":[\"可以往 Thymeleaf 携带参数，模拟的 HttpSession\",\"Model 数据是在请求域中的！ vs RedirectAttributes 重定向视图（addFlashAttribute方法代表只需要取一次！跳转取到后刷新页面就没了 | addAttribute():将数据放在url后面）\",\"重定向携带数据,利用session原理.将数据放在session中.\",\"只要跳到下一个页面取出这个数据以后,session里面的数据就会删掉\",\"问题：但是他是利用的session原理，所以后期我们需要解决分布式的session问题\"]},\"537\":{\"h\":\"8）idea设置程序根目录\",\"t\":[\"在 IntelliJ IDEA 中，你可以设置程序的根目录（Working Directory）来影响程序运行时的默认路径。这个设置决定了程序在启动时的默认工作目录。\",\"以下是在 IntelliJ IDEA 中设置程序根目录的步骤：\",\"打开 IntelliJ IDEA，并打开你的项目。\",\"在顶部菜单栏中，选择 \\\"Run\\\"（运行）菜单，然后选择 \\\"Edit Configurations\\\"（编辑配置）。\",\"在弹出的窗口中，选择你要修改的运行配置（例如，一个 Java Application 或一个 Spring Boot Application）。\",\"在右侧面板中，找到 \\\"Configuration\\\" 选项卡。\",\"在 \\\"Working directory\\\"（工作目录）部分，选择 \\\"Specified\\\"（指定）选项。\",\"点击 \\\"...\\\" 按钮，选择你想要设置为程序根目录的目录。\",\"确认设置后，点击 \\\"OK\\\" 保存修改。\",\"现在，当你运行这个配置时，程序将使用你指定的目录作为根目录。在程序中使用相对路径时，它们将以这个根目录为基准。\",\"请注意，这个设置仅影响程序在 IntelliJ IDEA 中运行时的默认工作目录，并不会改变程序在实际部署或运行环境中的行为。在实际部署时，程序的根目录可能由部署环境或命令行参数决定。\"]},\"538\":{\"h\":\"8) 实现ApplicationContextAware接口的作用\",\"t\":[\"实现 ApplicationContextAware 接口的作用是允许一个类获取对 Spring 应用程序上下文（ApplicationContext）的访问权限。通过实现该接口，类可以获得对应用程序上下文的引用，从而能够进行更高级别的操作，例如获取和管理 Spring Bean、发布应用程序事件等。\",\"具体来说，当一个类实现了 ApplicationContextAware 接口，它必须实现接口中的 setApplicationContext() 方法。Spring 在初始化该类的实例时，会自动调用 setApplicationContext() 方法，并将应用程序上下文作为参数传递给该方法。通过该方法，类可以将传递的应用程序上下文存储为一个成员变量，以便在需要时进行访问。\",\"下面是一个示例：\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; public class MyBean implements ApplicationContextAware { private ApplicationContext applicationContext; @Override public void setApplicationContext(ApplicationContext applicationContext) { this.applicationContext = applicationContext; } public static <T> T getBean(Class<T> clazz) throws BeansException { return applicationContext.getBean(clazz); } } -----------------即可在 CcEmailUtils.class 等没有被Spring管理的工具类中使用Spring对象 TrueSend trueSend = SpringContextUtils.getBean(TrueSend.class); \",\"通过实现 ApplicationContextAware 接口，类可以直接访问应用程序上下文，从而获得更多的灵活性和功能。例如，可以根据需要获取其他 Bean 的引用、发布应用程序事件、访问配置属性等。\"]},\"539\":{\"h\":\"9）Spring-静态资源启用版本控制\",\"t\":[\"upupor blog Spring版本控制yaml+MinIO+Thymeleaf\",\"犹记毕业第一年时，公司每次发布完成后，都会在一个群里通知【版本更新，各部门清理缓存，有问题及时反馈】之类的话。归根结底就是资源缓存的问题，浏览器会将请求到的静态资源，如JS、CSS等文件缓存到用户本地，当用户再次访问时就不需要再次请求这些资源了，以此也是提升了用户体验。但是也正是因为这些资源缓存，导致客户端的静态文件往往不是当前最新版本。后来有同事增加了时间戳、随机数等，确实这也解决了客户端缓存的问题，但是却又带来了新的麻烦，导致每次访问都要请求服务器，无形中增加了服务器的压力。\",\"https://www.cnblogs.com/laoyeye/p/10034617.html\",\"Q&A\",\"Thymeleaf这里@{}会导致 .css 之前会拼接一串-99e54d8e467b26ef66ff560393a00091 为什么？\",\"Thymeleaf中的@{}语法用于生成URL，并在URL中附加上下文路径。在你提供的示例中，.css之前附加的-99e54d8e467b26ef66ff560393a00091是一个哈希值，可能是由于你的应用程序或Thymeleaf的资源管理策略而生成的。\",\"这种哈希值的添加通常是为了解决浏览器缓存的问题。当静态资源（如CSS文件）发生更改时，为了确保浏览器加载最新的版本而不使用缓存，可以通过在URL中添加哈希值来创建一个唯一的URL。当资源发生更改时，哈希值也会随之变化，从而强制浏览器重新加载资源。\",\"在你的示例中，${ossStatic}是一个变量，可能包含了资源的基本URL路径。而@{/semantic-ui/semantic.min.css}则使用了Thymeleaf的URL表达式生成相对于当前请求上下文的CSS文件URL。结合起来，生成的URL将是${ossStatic}的值加上/semantic-ui/semantic.min.css，并附加上哈希值。\",\"如果你想去除哈希值的附加，可以检查你的应用程序或Thymeleaf的资源管理配置，看是否有相关配置项控制哈希值的添加。具体配置方式可能因你所使用的框架或工具而异。\",\"是由Spring配置控制的： 使用MD5生成版本号进行管理 资源名-md5 方式\",\"spring: # 静态资源启用版本控制 resources: chain: strategy: #MD5实现 content: enabled: true paths: /** 注：第二种、版本号实现 spring: resources: chain: strategy: fixed: enabled: true paths: /mods/admin/*.js version: 20181128 <script src=\\\"/20181128/mods/admin/login.js\\\"></script> \",\"ps: MD5（Message Digest Algorithm 5）是一种哈希函数，用于将任意长度的数据映射为固定长度的哈希值。因此，可以说MD5是通过哈希实现的。\",\"注 实现该功能的是ResourceUrlEncodingFilter，它在模板运行期会重写资源链接，Thymeleaf，Velocity和FreeMarker会自动配置该filter，JSP需要手动配置。其他模板引擎还没自动支持，不过你可以使用ResourceUrlProvider自定义模块宏或帮助类。\"]},\"540\":{\"h\":\"9.1.MinIO处理\",\"t\":[\"upupor博主处理方式为 py 改名用CLI上传文件\",\"我这里就简单粗暴的把 MinIO 的文件全部改名 GPT：递归地处理当前文件夹及其所有子文件夹中的文件，并更改它们的文件名（在文件名的后缀名前附加\\\"-<文件的MD5值>\\\"）\",\"import os import hashlib def calculate_md5(filename): md5_hash = hashlib.md5() with open(filename, 'rb') as f: for chunk in iter(lambda: f.read(4096), b''): md5_hash.update(chunk) return md5_hash.hexdigest() def rename_files_with_md5(folder_path): # 定义要处理的后缀名列表 allowed_extensions = ['.svg', '.webp', '.js', '.css', '.png', '.jpeg', '.jpg', '.ico'] for root, dirs, files in os.walk(folder_path): for filename in files: file_path = os.path.join(root, filename) file_name, file_ext = os.path.splitext(filename) # 检查文件后缀名是否在允许的列表中 if file_ext.lower() in allowed_extensions: md5_value = calculate_md5(file_path) new_filename = f\\\"{file_name}-{md5_value}{file_ext}\\\" new_file_path = os.path.join(root, new_filename) os.rename(file_path, new_file_path) # 获取当前文件夹路径 current_folder = os.getcwd() # 调用函数递归处理文件夹中的文件 rename_files_with_md5(current_folder) \"]},\"541\":{\"h\":\"\"},\"542\":{\"h\":\"1. 加载位置与顺序\",\"t\":[\"file:./config/ file:./ classpath:/config/ classpath:/ \",\"file: 指当前项目根目录\",\"classpath: 指当前项目的resources目录\"]},\"543\":{\"h\":\"2. Q&A\",\"t\":[\"Q: springboot项目同时有application.properties和application-default.properties配置文件，启动应用两个都会生效吗\",\"A: 是的，Spring Boot应用程序同时拥有application.properties和application-default.properties配置文件时，启动应用程序时会同时生效。\",\"先后顺序如下：\",\"application.properties application-{active}.properties（例如，application-dev.properties、application-prod.properties） application-default.properties\",\"详细：\",\"综上，本地及Nacos配置中心共同加载顺序为：\",\"bootstrap.yaml\",\"bootstrap.properties\",\"bootstrap-{profile}.yaml\",\"bootstrap-{profile}.properties\",\"application.yaml\",\"application.properties\",\"application-{profile}.yaml\",\"application-{profile}.properties\",\"nacos配置中心共享配置（通过spring.cloud.nacos.config.shared-configs指定）\",\"Nacos配置中心该服务配置（通过spring.cloud.nacos.config.prefix和spring.cloud.nacos.config.file-extension指定）\",\"Nacos配置中心该服务-{profile}配置（通过spring.cloud.nacos.config.prefix和spring.cloud.nacos.config.file-extension、以及spring.profiles.active指定）\",\"因此，配置生效覆盖关系：\",\"对于key名相同，后加载会覆盖掉前加载，故而最终为后加载的配置项生效！\",\"对于key名不同，则直接生效（会加载，但不会被覆盖）；\",\"注意：不能理解为文件级整体覆盖，而仅是同名key会被后加载的键值覆盖。\",\"实测 application-default.properties 覆盖 application.properties\",\"ps:\",\"也就是说如果没有指定 {active} & 如果有 default 那么它就会生效\",\"如果你在 application.properties 中设置了 spring.profiles.active=dev，那么 application-default.properties 的属性值将不会生效，而是会根据当前活动的配置文件来加载对应的属性。\",\"因此，application.properties文件的优先级高于application-default.properties文件。在同一个包下，如果存在同名的属性，则后者会覆盖前者（没有active的话两者都是会生效的）\",\"PS：其实正确答案是开发人员做好设计，别让Bean循环依赖，但是没办法，面 试官不想听这个。\",\"我们都知道，单例Bean初始化完成，要经历三步：实例化、属性赋值、初始化 使用、销毁\",\"注入就发生在第二步，属性赋值，结合这个过程，Spring 通过三级缓存解决了循环依赖： 采用了**“提前暴露”**的策略\",\"一级缓存 : Map singletonObjects，单例池，用于保存实例化、属 性赋值（注入）、初始化完成的 bean 实例\",\"二级缓存 : Map earlySingletonObjects，早期曝光对象，用于保存实例化完成的 bean 实例\",\"三级缓存 : Map> singletonFactories，早期曝光对象工厂，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象。\",\"是什么：\",\"在 Spring 应用程序中，一个 Bean 可以依赖于另一个 Bean。当一个 Bean 依赖于另一个 Bean 时，Spring 会在容器中查找并注入该 Bean，以满足当前 Bean 的需求。这种依赖关系可以是单向的，也可以是循环的。循环依赖指的是两个或多个 Bean 之间相互依赖的情况。\",\"举个例子，假设我们有两个 Bean：Bean A 和 Bean B。Bean A 依赖于 Bean B，而 Bean B 也依赖于 Bean A。这种情况下，Spring 容器会在实例化 Bean A 和 Bean B 时发现循环依赖，因为它们相互依赖，无法先创建一个 Bean，然后注入另一个 Bean。\",\"为了解决这个问题，Spring 提供了一个机制，称为“循环依赖解析”。在循环依赖解析期间，Spring 容器会创建一个 Bean 的“早期实例”，然后注入它所依赖的 Bean 的引用。然后，Spring 会继续创建依赖于当前 Bean 的其他 Bean，直到创建完整个 Bean 图，然后将这些 Bean 实例化并注入它们所依赖的 Bean。\",\"总的来说，Spring 的循环依赖解析机制可以帮助开发人员处理循环依赖的情况，但是需要注意的是，过多的循环依赖可能会导致性能问题，并且在解析过程中也可能出现一些不可预测的问题。因此，在设计 Spring 应用程序时，应该尽可能减少循环依赖的使用，并合理设计 Bean 之间的依赖关系。\",\"循环依赖解析是指 Spring 框架中解决循环依赖问题的过程。循环依赖指的是两个或多个 Bean 之间相互依赖的情况，这会导致在 Bean 实例化时出现无限递归的问题，从而导致应用程序启动失败。\",\"在 Spring 容器中，Bean 的创建分为两个阶段：实例化和初始化。在实例化阶段，Spring 会为 Bean 创建一个空对象；在初始化阶段，Spring 会调用 Bean 的构造函数、Setter 方法和其他初始化方法，将 Bean 实例化并初始化。\",\"在解决循环依赖问题时，Spring 采用了“提前暴露”的策略。具体来说，当 Spring 容器在实例化一个 Bean 时，如果发现该 Bean 依赖于另一个还未创建的 Bean，那么 Spring 会先为依赖的 Bean 创建一个“早期暴露的半成品实例”，然后将其注入到当前 Bean 中。这个“早期暴露的半成品实例”是一个未完成初始化的 Bean 实例，它只包含当前 Bean 的依赖项，还没有完成初始化。当所有 Bean 实例都创建完成后，Spring 容器会按照依赖关系将这些“半成品实例”逐个进行初始化，从而完成 Bean 实例化和初始化的过程。\",\"需要注意的是，循环依赖解析的过程中可能会出现死循环的情况，因此 Spring 容器会设置一个默认值为 50 的解析深度限制，防止无限循环。如果超过了这个限制，Spring 会抛出异常，提示存在循环依赖的问题。\",\"笔记：https://www.cnblogs.com/dafengdeai/articles/17073114.html\",\"视频：https://www.bilibili.com/video/BV1Cd4y1q7Vm/?spm_id_from=333.337.search-card.all.click&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\",\"更好的视频：https://www.bilibili.com/video/BV1Wa4y1477d?p=3&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\",\"Spring、SpringBoot常用扩展特性之事件驱动 看代码demo Spring Boot 2 项目\",\"一般搭配以下两个注解一起使用： @EventListener @Async\",\"@0rder指定执行顺序在同步的情况下生效 看视频也可以搭配这个注解，加个权重 假如多个Listener消费谁先\",\"@Async 异步执行需要 @EnableAsync 开启异步\",\"事件驱动:即跟随当前时间点上出现的事件,调动可用资源,执行相关任务,使不断出现的问题得以解决,防止事务堆积. 如:注册账户时会收到短信验证码,火车发车前收到提醒,预定酒店后收到短信通知等.如:浏宽器中点击按钮请求后台,鼠标点击变化内容,键盘输入显示数据,服务接收请求后分发请求等.在解决上述问题时,应用程序是由\\\"事件驱动运行的,这类程序在编写时往往可以采用相同的模型实现,我们可以将这种编程模型称为事件驱动模型. (PS:事件驱动模型其实是一种抽象模型,用于对由外部事件驱动系统业务逻辑这类应用程序进行建模.)\",\"debug走到一步，不懂\",\"@Resource private ApplicationEventPublisher eventPublisher; //UNKNOWN @FunctionalInterface这里的作用是什么 @EventListener注解！！！！！？？？？ eventPublisher.publishEvent(sendEmailEvent); --------后来懂了，上面是发布事件了 有相对于的方法监听消费这个事件：-------- @EventListener @Async public void sendEmail(EmailEvent emailEvent) PS：方法参数需要和发布 sendEmailEvent 类型对应， 这样才是一一对应消费 \",\"重点就是这三个类，搞清就行！！！可以看自己写的代码 注意：ApplicationEvent 可以不实现所以重心其实就两个类\",\"Spring事件驱动最基本的使用 ApplicationEventPublisher,ApplicationEvent,ApplicationListener （Spring抽象出了这基本的三个。 事件生产方、事件、事件消费方）\",\"ApplicotionEventPublisher 子类 ApplicationContext （在启动类中这个常用一些applicationContext.publishEvent(new ApplicationEvent(this){})）\",\"事件源、监听器需要被spring管理\",\"监听器需要实现ApplicationListener<ApplicotionEvent> xd: 可注解！\",\"可体现事件源和监听器之间的松耦合仅依赖spring、ApplicationEvent（发布、监听两个类中都没有另一个的引用！）\",\"XD：\",\"publisher-生产者， Listener（注解到方法）-消费者 publishEvent几次，listener就会消费几次\",\"ApplicationEvent 可以不实现，看顶层的这个接口源码其实也转成了 Object，但是按规范注释来说希望所有的事件类都最好实现 ApplicationEvent\",\"ApplicationEventPublisher.class default void publishEvent(ApplicationEvent event) { publishEvent((Object) event); } //所以事件类没有extends ApplicationEvent也行其实走的是这里 void publishEvent(Object event); \",\"用户发起请求，请求先被 Servlet 拦截转发给 Spring MVC 框架\",\"Spring MVC 里面的 DispatcherSerlvet 核心控制器，会接收到请求并转发给HandlerMapping\",\"HandlerMapping 负责解析请求，根据请求信息和配置信息找到匹配的 Controller类，不过这里如果有配置拦截器，就会按照顺序执行拦截器里面的 preHandle方法\",\"找到匹配的 Controller 以后，把请求参数传递给 Controller 里面的方法\",\"Controller 中的方法执行完以后，会返回一个 ModeAndView，这里面会包括视图名称和需要传递给视图的模型数据\",\"视图解析器根据名称找到视图，然后把数据模型填充到视图里面再渲染成 Html 内容返回给客户端\",\"1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策\",\"其实，准确的来说，跨域机制是阻止了数据的跨域获取，不是阻止请求发送。\"]},\"544\":{\"h\":\"目的：解决springboot跨域请求的问题\"},\"545\":{\"h\":\"第一种 （CorsConfig ）\",\"t\":[\"配置 @Bean CorsFilter.class 实现全局跨域,自定义可以访问的地址\"]},\"546\":{\"h\":\"第二种：注解方式\",\"t\":[\"@CrossOrigin\",\"配置文件热部署：因为这个Bean是启动时加载的，并不是运行时候实时拿\",\"#spring cache cache: type: redis redis: time-to-live: 100000 #这里我想热部署，搞一下午 jrebel+devtools 都不行还得重启项目 \",\"静态资源访问不到，因为加了上下文路径\",\"#会导致问题 server: servlet: context-path: /yigo #暂时用的是这个解决 spring: mvc: static-path-pattern: /static/** \",\"未解决：父 Module有\",\"网上还有个解决方法不理解但可行!<path> 看下面会出其它问题\",\"父有这个按道理子引入父应该也有 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> </dependency> 但是子必须自己导入并加个 optional 才可以 <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> \",\"@import公共模块的实体类导致lombok的注解失效 Gulimall未解决不做了，是做到限流突然就这个问题不做了\",\"image-20230211140746713\",\"今天重新导入这个项目时，看到 idea 的这个报错突然醒悟！！！看上面笔记当时为什么用它的场景\",\"<!-- 有这个注解会导致 lombok 注解不能正常编译！！！要么加进来要么去掉这个注解！--> <!-- <annotationProcessorPaths>--> <!-- <path>--> <!-- <groupId>org.springframework.boot</groupId>--> <!-- <artifactId>spring-boot-configuration-processor</artifactId>--> <!-- <version>2.1.8.RELEASE</version>--> <!-- </path>--> <!-- </annotationProcessorPaths>--> \",\"多配置激活问题：active profiles 只要写application后面的名字就行，写全了反而失效！！！ https://segmentfault.com/q/1010000042312154 也可 --spring.profiles.active=app-bpdev (等同于在idea中配置 如下图位置)\",\"image-20230802085814446\",\"进 title link 看课程目录、课程介绍\",\"平板问题：\",\"springboot datasource自动装配mysql数据源。。h2为什么不用配数据源\",\"项目需要有自己的parel如何处置springboot的parent\",\"spring-boot-dependencies 放到 <denpendencyManagement>\",\"CommandLineRunner 接口的作用\",\"CommandLineRunner 接口是 Spring Boot 中的一个接口，用于在应用启动后执行一些特定的任务。该接口只有一个方法 run()，当 Spring Boot 应用启动完成后，会自动执行 run() 方法。CommandLineRunner 接口常用于执行一些初始化任务，例如读取配置文件、初始化数据等。与之类似的还有另一个接口 ApplicationRunner，不同之处在于它的 run() 方法接收的参数是一个 ApplicationArguments 对象，该对象封装了命令行参数的信息。通常情况下，我们可以通过实现 CommandLineRunner 或 ApplicationRunner 接口，在 Spring Boot 应用启动后自动执行一些初始化任务。\",\"XD: 其实一样的，可能就是ApplicationArguments这个对象封装了更好操作 程序参数（Program arguments）而已。。。args.getSourceArgs()而 String... args其实一样可以拿参数！！！\",\"java -jar your-project.jar --param1=value1 --param2=value2 通过在 java -jar 命令后添加参数，-- 开头的这些参数被认为是程序参数（Program arguments）。 区分（Environment variables）\",\"以下几种方式都可以被@Value读取到:\"]},\"547\":{\"h\":\"1、VM options\",\"t\":[\"java -jar -Dserver.port=8888 -Xms1024m demo.jar 这种方式增加的参数是被设置到应用的系统属性中，可以使用System.getProperty(“server.port”)获取（可以在idea的idea VM options中配置，以空格分隔）\",\"VM options其实就是我们在程序中需要的运行时环境变量，它需要以-D或-X或-XX开头，每个参数使用空格分隔 使用最多的就是-Dkey=value设定系统属性值，比如-Dspring.profiles.active=dev3 -D（defintion）表示自定义参数\"]},\"548\":{\"h\":\"2、Program arguments\",\"t\":[\"java -jar demo.jar --server.port=8888 这种方式增加的参数是属于命令行参数，即会从springboot启动时的main方法的String[] args中作为参数传入（可以在idea的program arguments中配置，以空格分隔）\",\"Program arguments为我们传入main方法的字符串数组args[]，它通常以--开头，如--spring.profiles.active=dev3\",\"等价于-Dspring.profiles.active=dev3如果同时存在，以Program arguments配置优先\"]},\"549\":{\"h\":\"3、Environment variables\",\"t\":[\"从操作系统的环境变量中读取 这种方式的参数即属于操作系统方面的，比如安装jdk时设置的环境变量，定义JAVA_HOME，也可以通过System.getenv(“JAVA_HOME”)获取，（可以在idea的VM Environment variables中配置，以;分隔）\",\"Environment variables没有前缀，优先级低于VM options，即如果VM options有一个变量和Environment variable中的变量的key相同，则以VM options中为准。\"]},\"550\":{\"h\":\"4、通过项目中配置文件bootstrap/application文件载入\",\"t\":[\"这种方式是在项目中配置的方式，比较常见\",\"h2数据库为什么不需要配置\",\"嵌入式数据库：H2数据库是一款嵌入式数据库，也就是说它可以被嵌入到Java应用程序中，作为Java程序的一个库。因此，H2数据库不需要独立的服务器进程，不需要额外的配置和管理，只需要在Java应用程序中进行简单的配置即可使用。\"]},\"551\":{\"h\":\"配置多数据源\",\"t\":[\"图片很清楚了\",\"我理解：重写三个bean 每加一个数据源就重写一遍放到 Spring Bean\",\"DataSourceProperties 这样即可在configuration配置我的数据源，区分开其他的加前缀\",\"DataSource 通过上者的 API Create 数据源，大致就是initializeDataSourceBuilder方法通过 ClassLoader 拿 driverClassName 创建\",\"PlatformTransactionManager    每个数据库都要设好自己对应的事务管理器\"]},\"552\":{\"h\":\"SpringCloud\",\"t\":[\"尚硅谷周阳老师 2022/5/23 详细笔记看脑图 和 别人的笔记 和 别人的代码，这里只记录于自己而言是重点的内容\",\"标题 新旧交替学习\",\"14种组件技术的学习，30多个Model。需要多动手！不要一听就会一动手就废。 知行合一\",\"不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。\",\"3W法—what，why，how的运用\",\"以后碰到什么问题先查 官网文档，再去Google ChartGPT ！\"]},\"553\":{\"h\":\"\",\"t\":[\"SpringCloud -> 分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶\",\"直接看提出者的 Blog ！！！ Click the title acquire\",\"分布式 (部署方式) vs 微服务 (架构风格)\",\"生产环境下的微服务肯定是分布式部署的\",\"但是分布式部署的应用不一定是微服务架构的，比如集群部署，它是把相同应用复制到不同服务器上，但是逻辑功能上还是单体应用。\",\"微服务理解：可以粗鄙的理解为 SpringBoot 开发的一个个模块单元\",\"架构模式，把单一应用程序划分成一组小的服务，服务之间相互协调、相互配合。\",\"每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制相互写作（通常是基于HTTP协议的RESTful API）\",\"image-20220523154541922\",\"强就强在它是一个整体，像苹果生态。 不然我手机苹果电脑华为平板小米直接协调的话就会麻烦。\",\"搂一眼京东的：\",\"image-20220523161504577\",\"需要学习：注意有一些会有变更，新的老的都学！\",\"image-20220523162302969\"]},\"554\":{\"h\":\"\",\"t\":[\"直接看提出者的 Blog ！！！ Click the title acquire\",\"微服务是一种架构风格\",\"一个应用拆分为一组小型服务\",\"每个服务运行在自己的进程内，也就是可独立部署和升级\",\"服务之间使用轻量级HTTP交互\",\"服务围绕业务功能拆分\",\"可以由全自动部署机制独立部署\",\"去中心化，服务自治。服务可以使用不同的语言、不同的存储技术\",\"GA：General Availability，正式发布的版本，官方开始推荐广泛使用，国外有的用GA来表示release版本。\",\"RELEASE：正式发布版，官方推荐使用的版本，有的用GA来表示。比如spring。\",\"了解：\",\"Spring Cloud 采用了英国伦敦地铁站的名称来命名，并由地铁站名称字母 A-Z 以此类推的形式来发布迭代版本。\",\"具体版本选择可以看 Spring Cloud 官网 overview 下面有说明。Spring Cloud 对应的 Spring Boot 版本：\",\"image-20220523170052524\",\"具体看更详细的依赖 https://start.spring.io/actuator/info\",\"总结：Ali 的 Nacos 很厉害\",\"把图片放大看！\",\"image-20220523172626378\",\"约定 > 配置 > 编码\",\"idea的配置 + 父工程的配置, 具体看项目体现\"]},\"555\":{\"h\":\"1. IDEA 新建 父工程\"},\"556\":{\"h\":\"1.1 dependencyManagement 标签\",\"t\":[\"通常会在一个组织或者项目的最顶层的 父POM 中看到dependencyManagement元素。\",\"子工程会向上找 dependencyManagement 然后用 其 (父工程) 引入的 jar 包的版本号\",\"注意: 父工程这里只是起一个定义作用 -> dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。\",\"强力推荐看这篇 <dependencyManagement> 针对的是儿子模块（父子），不是自己本身的模块\",\"<!-- 子模块继承之后，提供作用： 锁定版本+子modlue不用写groupId和version --> <dependencyManagement> <dependencies> <dependency> <groupId>mysq1</groupId> <artifactId>mysql-connector-java</artifactId> <version>5.1.2</version> </dependency> <!--spring boot 2.2.2, 子模块整个 spring boot 相关的都是2.2.2.RELEASE--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>2.2.2.RELEASE</version> <type>pom</type> <scope>import</scope> </dependency> <dependencies> </dependencyManagement> 父 ############# 子 <dependencies> <dependency> <groupId>mysq1</groupId> <artifactId>mysql-connector-java</artifactId> </dependency> </dependencies> <!-- 这样做的好处就是：如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本，只需要声明version就可。--> \",\"测试了一下：发现子 Model 继承了父的所有包括 <build> 只要注意写 artifactId 就好 !\"]},\"557\":{\"h\":\"1.2 maven 跳过单元测试\",\"t\":[\"节约时间\",\"image-20220523210748358\"]},\"558\":{\"h\":\"2. Rest 微服务工程构建\",\"t\":[\"创建微服务模块套路：\",\"建Module\",\"改POM\",\"写YML\",\"主启动\",\"业务类\",\"热部署其实就是热重启，真正的热部署只部署改动的 官方文档说了需要付费。注意：因为其采用的虚拟机机制，该项重启是很快的\"]},\"559\":{\"h\":\"2.1 Springboot maven plugin插件原理及作用【扩展】\",\"t\":[\"可能我还是不理解 spring-boot-maven-plugin插件作用，它的作用仅仅是为了重新打包生成一个*.original文件吗\",\"一般的maven项目的打包命令，不会把依赖的jar包也打包进去的，只是会放在jar包的同目录下，能够引用就可以了，但是spring-boot-maven-plugin插件，会将依赖的jar包全部打包进去。\",\"https://www.jb51.net/article/197968.htm\",\"在没有使用spring-boot-maven-plugin插件时，打包的目录只有两个，META-INF和我自己的项目代码的目录。\",\"只会生成一个 .jar 文件\",\"image-20220525204018181\",\"在使用spring-boot-maven-plugin插件时，打包后的目录包括三个\",\"多一个 *.original 文件\",\"image-20220525204651902\",\"BOOT-INF\",\"META-INF\",\"org.springframework.boot.loader，在lib目录里包含了我自己的项目的代码目录；\"]},\"560\":{\"h\":\"2.2\",\"t\":[\"在没有讲 Ribbon 之前都先用这个！\",\"JDBCTemplate、RedisTemplate\",\"两个服务间的调用：\",\"原始的 web 阶段 -> httpClient\",\"现在进化了以后 restTemplate，相当于给httpClient 做了一次封装，实现了两个服务的横向调用\"]},\"561\":{\"h\":\"3. 工程重构\",\"t\":[\"每一个模块都有一样的 包 包里的类也一模一样，考虑重构提取出来 install成jar包供外面用\",\"install(安装至本地仓库)(在本地Repository中安装jar)\",\"入门篇已讲完，开始基础篇的学习\",\"老的 Eureka包含两个组件:Eureka Server和Eureka Client\",\"这个东西相当于 物业公司，而组件就是 入驻企业\"]},\"562\":{\"h\":\"概述\",\"t\":[\"上面的服务项目实例中，服务提供方对外提供服务，需要对外暴露自己的地址，而服务调用者需要记录服务提供者的地址，将来地址出现变动时，需要及时更新。\",\"当服务数量比较少时，这些不会造成困扰，一旦服务数量增多，管理上就非常麻烦。这就需要服务注册中心来统一管理。\"]},\"563\":{\"h\":\"1.1 什么是服务治理\",\"t\":[\"Spring Cloud封装了Netflix 公司开发的Eureka模块来实现服务治理\",\"在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。\"]},\"564\":{\"h\":\"1.2 什么是服务注册与发现\",\"t\":[\"Eureka采用了CS的设计架构，Eureka Sever作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到 Eureka Server并维持 心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。\",\"在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何RPC远程框架中，都会有一个注册中心存放服务地址相关信息(接口地址)\"]},\"565\":{\"h\":\"1.3 Eureka 集群\",\"t\":[\"Eureka Server 互相指向对方 【有向图】\",\"题外话：rpc 是一种思想 一种概念\",\"题外话：多台服务器 Session 怎么共享：Redis\",\"看这个图 Eureka 和 Provider 都是多个集群，为了达到高可用\",\"image-20220527162304318\",\"解决办法：搭建 Eureka 注册中心集群，实现负载均衡 + 故障容错\"]},\"566\":{\"h\":\"1.4 Service Provider 集群\",\"t\":[\"注意 80 的消费者不能把 Service Provider 的域名写死，要写成注册进 Eureka 的服务别名\",\"记得带上 http:// 这个前缀\",\"http://localhost:8001 <---换成---> http://CLOUD-PAYMENT-SERVICE\",\"使用@LoadBalanced注解赋予RestTemplate负载均衡的能力\",\"不然会报错\",\"@Bean @LoadBalanced//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力 public RestTemplate getRestTemplate(){ return new RestTemplate(); } \"]},\"567\":{\"h\":\"actuator 微服务信息完善\",\"t\":[\"使用 spring-boot-starter-actuator 可以用于检测系统的健康情况、当前的Beans、系统的缓存等，具体可检测的内容参考下面的链接： https://docs.spring.io/spring-boot/docs/2.6.1/reference/htmlsingle/#actuator.endpoints.exposing\"]},\"568\":{\"h\":\"1.5 服务发现 Discovery\",\"t\":[\"@EnableDiscoveryClient 很重要\",\"以后 @EnableEurekaClient 被 zookeeper、nacos 代替，但是上面这个注解不会\",\"相当于网站上的关于我，可以看到各个注册服务的信息\",\"对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息\",\"注意是这个包下面的 cloud 的，就如我第二句说的，这个注解会常用，不是 Eureka 的：import org.springframework.cloud.client.discovery.DiscoveryClient;\"]},\"569\":{\"h\":\"1.6 Eureka自我保护理论知识\",\"t\":[\"通俗来讲：绝情版 ，就是改配置 禁止自我保护\",\"原先：\",\"一句话：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存。\",\"为了EurekaClient可以正常运行，防止与EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除\"]},\"570\":{\"h\":\"因为需要 虚拟机 暂时搁置，这一节自己还没有实践！！！\",\"t\":[\"相对 Eureka 不同是这个是上面提到的 无情版，有就是有没有就是没有，是临时节点 ，没有Eureka那含情脉脉。\",\"需要在 linux 上操作 zookeeper\",\"Q：需要明白为什么和 Eureka 不一样这个需要 linux？？？\",\"A：eureka要建个springboot，而ZK在服务器上部署就开了做注册中心了\",\"zookeeper可以用，但是用的少。如果没有 alibaba 的 Nacos，那这个基本就是 Eureka 的接班人\"]},\"571\":{\"h\":\"\",\"t\":[\"CAP 理论和 BASE 理论是分布式领域非常非常重要的两个理论。不夸张地说，只要问到分布式相关的内容，面试官几乎是必定会问这两个分布式相关的理论。\",\"不论是你面试也好，工作也罢，都非常有必要将这两个理论搞懂，并且能够用自己的理解给别人讲出来。\",\"我这里就不多提这两个理论了，不了解的小伙伴，可以看我前段时间写过的一篇相关的文章：《CAP 和 BASE 理论了解么？可以结合实际案例说下不？》 。\",\"C：Consistency (强一致性)：\",\"该特性是指所有节点在相同时刻的数据完全一致（忽略网络延迟，理想的同时刻数据一致性无法实现）。 一致性可以根据一致的程度划分为强一致性，弱一致性，最终一致性。\",\"My：A好实现，C要怎么实现保持同步呢？-> 一些一致性算法 例如 raft 算法、paxos\",\"A：Availability (可用性)：\",\"该特性是指系统为用户提供的服务可一直使用（非宕机节点），不会出现用户操作不允许等用户体验不好的情况。\",\"My：这个好理解，其它节点都是同步好的数据8 但有个节点还没同步好是7 别人访问了就访问了。这个好实现\",\"BASE 理论 是对 CAP 理论的延伸（更具体地说，是对 CAP 中 AP 方案的一个补充），思想是即使无法做到强一致性（CAP 的一致性就是强一致性），但可以采用适当的采取弱一致性，即最终一致性。\",\"P：Partition tolerance （分区容错性)：\",\"分布式系统在遇到网络故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障。\",\"我可以理解为：CAP是一种理论，具体落地实现是raft算法是C理论的解决方案，BASE是A的解决方案吗 Right！\",\"后来补充：混淆点\",\"什么是网络分区？\",\"分布式系统中，多个节点之前的网络本来是连通的，但是因为某些故障（比如部分节点网络出了问题）某些节点之间不连通了，整个网络就分成了几块区域，这就叫网络分区。\",\"图片\",\"Question：既然网络都分区了为什么还能保持CP\",\"Anser：如果一个分布式系统在发生网络分区时选择保持一致性（CP），那么在分区期间，系统将拒绝对处于分区中的节点的读写请求，以确保数据的一致性。这意味着分区中的节点将无法提供服务，因为它们无法达到一致的状态。系统会等待分区解决后，再继续提供服务，以确保数据的一致性。\"]},\"572\":{\"h\":\"不是所谓的“3 选 2”\",\"t\":[\"在系统发生“分区”的情况下，CAP 理论只能满足 CP 或者 AP。要注意的是，这里的前提是系统发生了“分区”\",\"如果系统没有发生“分区”的话，节点间的网络连接通信正常的话，也就不存在 P 了。这个时候，我们就可以同时保证 C 和 A 了。\",\"因此，AP 方案只是在系统发生分区的时候放弃一致性，而不是永远放弃一致性。在分区故障恢复后，系统应该达到最终一致性。这一点其实就是 BASE 理论延伸的地方。\",\"raft算法：raft是一种协议\",\"任何节点有3状态，leader（领导），follower（跟随），candidate（候选）\",\"领导选举：必须选出一个唯一的leader，不然要一直投票\",\"日志复制：在心跳时间的时候发送\",\"BASE：\",\"基本可用（Basically Available） \",\"基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、功能上的可用性），允许损失部分可用性。需要注意的是，基本可用绝不等价于系统不可用。 \",\"响应时间上的损失：正常情况下搜索引擎需要在 0.5 秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了 1~2 秒。\",\"功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，部分消费者可能会被引导到一个降级页面。\",\"软状态（Soft State） \",\"软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据会有多个副本，允许不同副本同步的延时就是软状态的体现。mysql replication 的异步复制也是一种体现。\",\"最终一致性（Eventual Consistency） \",\"假如Gulimall订单服务掉其它业务都回滚了，但订单却创建了（本来不该有）。后面可以利用一些手段校验它不该存在并删了它\",\"分布式事务几种方案\",\"CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求。\",\"Q: 为什么不能同时满足3个\",\"A: + 如果不支持P，那么就无分布式概念了。 + 用户向节点1写入一个值，节点2由于分区无法更新该值，那么数据就不一致。\",\"这一点简而言之：系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。\",\"Q: 没有发生网络分区时候，系统应该选择什么特性？ A: + 其实正常情况下都不会发生网络分区，那么系统设计的时候需要考虑到满足CA特性，只有当系统发生分区时候，根据场景特性选择CP或者AP\",\"Q: 关于 P 的理解\",\"A: 现实情况下我们面对的是一个不可靠的网络 - > 网络丢包、有一定概率宕机的设备 - > 节点宕机，这两个因素都会导致Partition，因而分布式系统实现中 P 是一个必须项，而不是可选项（现实生活中我们没办法保证网络不中断网线不会断，除非单台机器CA自己本地访问自己localhost但不可能）\",\"遇到某个节点或网络分区故障的时候，集群下仍然有节点能够持续提供服务（服务：服务只能在一致性和可用性之间取舍）\",\"因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类:\",\"img\",\"AP架构（Eureka）\",\"img\",\"CP架构（ZooKeeper/Consul）\",\"img\"]},\"573\":{\"h\":\"1. 前言\",\"t\":[\"Spring Cloud Ribbon是基于Netflix Ribbon实现的一套 客户端负载均衡的工具。\",\"负载均衡 + RestTemplate调用\",\"主要功能是提供 客户端的软件负载均衡算法和服务调用。\",\"Ribbon目前也进入维护模式。\",\"Ribbon未来可能被Spring Cloud LoadBalacer替代。\",\"Ribbon本地负载均衡客户端VS Nginx服务端负载均衡区别\",\"Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。 Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到 JVM 本地，从而在本地实现RPC远程服务调用技术。\"]},\"574\":{\"h\":\"2. Ribbon的负载均衡和Rest调用\",\"t\":[\"spring-cloud-starter-netflix-eureka-server spring-cloud-starter-netflix-ribbon 先前工程项目没有引入spring-cloud-starter-ribbon也可以使用ribbon。 这是因为spring-cloud-starter-netflix-eureka-client自带了spring-cloud-starter-ribbon引用。 \",\"前面测试的时候，8001、8002 默认的是 轮询 负载访问，有 7 大负载算法\"]},\"575\":{\"h\":\"3. Ribbon负载规则替换\",\"t\":[\"1.修改cloud-consumer-order80\",\"2.注意配置细节\",\"官方文档明确给出了警告:\",\"这个自定义配置类不能放在@ComponentScan所扫描的当前包下以及子包下，\",\"否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。\",\"也就是说不要和启动类一个包路径\",\"我这里\",\"@RibbonClient(name = \\\"cloud-payment-service\\\", configuration = MySelfRule.class) name 我是小写才生效 ！！！ \",\"手写轮询算法，自己境界没到 先欠着！\",\"到时候估计得还债\"]},\"576\":{\"h\":\"1. OpenFeign服务调用\",\"t\":[\"TODO：就算配了超时时间 第一次跑也老是超时，后面就不会了 这是由于在调用其他微服务接口前，会去请求该微服务的相关信息(地址、端口等)，并做一些初始化操作，由于默认的懒加载特性，导致了在第一次调用时，出现超时的情况 解决：Ribbon配置饥饿加载（最佳）\",\"注意: Feign 是整合进了 Ribbon 的，天生带着他 Feign是基于HTTP客户端的声明式Web服务客户端\",\"以前是: Ribbon+RestTemplate 一套模版化的调用方法\",\"现在用 OpenFeign 定义一个 @FeignClient(\\\"服务名\\\") 到接口就行，像 @Mapper 的感觉一样 -> 接口 + 注解\",\"以前要搞一个配置类@LoadBalanced返回一个RestTemplate的Bean 然后Controller再用这个restTemplate Bean\",\"现在 Service 接口定义一个 @FeignClient 注解 指向服务提供者payment 就可以直接在本80调用8001的（也就是指向服务提供者的东西）\",\"总结：想要远程调用别的服务\",\"1）、引入open-feign\",\"2）、编写一个接口，告诉 SpringCloud 这个接口需要调用远程服务\",\"​ 1、声明接口的每一个方法都是调用哪个远程服务的哪个请求\",\"3）、开启远程调用功能，在主启动类加 @EnableFeignClients\",\"/** * 这是一个声明式的远程调用 */ @FeignClient(\\\"gulimall-coupon\\\") public interface CouponFeignService { //从 gulimall-coupon 中找 /coupon/coupon/member/list 这个方法 @RequestMapping(\\\"/coupon/coupon/member/list\\\") public R memberCoupons(); } //主启动类 @EnableFeignClients(\\\"com.zzq.gulimall.member.feign\\\") ===============================自己这边的 Model 业务调用处理 @Autowired CouponFeignService couponFeignService; /** * DIY */ @RequestMapping(\\\"/coupons\\\") public R RPCTest(){ MemberEntity memberEntity = new MemberEntity(); memberEntity.setNickname(\\\"张三\\\"); // Here R r = couponFeignService.memberCoupons(); return R.ok().put(\\\"member\\\",memberEntity).put(\\\"coupons\\\",r.get(\\\"coupons\\\")); } \"]},\"577\":{\"h\":\"2. OpenFeign超时控制\",\"t\":[\"OpenFeign默认等待1秒钟，超过后报错\",\"客户端只等1秒钟，服务端超过了1秒钟\",\"场景：故意把服务的提供者 8001 端业务设成耗费3秒钟，证明上面问题，这时客户端就会报错！\",\"java.net.SocketTimeoutException: Read timed out \",\"YML文件里需要开启OpenFeign客户端超时控制\",\"注意：直接用就行,这只是idea不给提示,不影响效果\",\"#设置feign客户端超时时间(OpenFeign默认支持ribbon)(单位：毫秒) ribbon: #指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间 ReadTimeout: 60000 #指的是建立连接后从服务器读取到可用资源所用的时间 ConnectTimeout: 60000 \"]},\"578\":{\"h\":\"3. OpenFeign日志增强\",\"t\":[\"config 中注册一个 Bean（Logger.Level）\",\"yaml 中配置feign日志以什么级别监控哪个接口\"]},\"579\":{\"h\":\"4.补充：GuliMall\"},\"580\":{\"h\":\"4.1.源码\",\"t\":[\"构造请求数据，将对象转为json； RequestTemplate template = buildTemplateFromArgs,create（argv）；\",\"发送请求进行执行（执行成功会解码响应数据）： executeAndDecode（template）；\",\"执行请求会有重试机制\",\"while(true) { try { return this.executeAndDecode(template); }catch (RetryableException var8) { xxx retryer.continueOrPropagate(e); } continue; } \"]},\"581\":{\"h\":\"4.2.问题\",\"t\":[\"Feign远程调用丢失请求头：订单模块的 Feign 源码会自动创 Request 导致丢失 Cookie。而底层自创的时候用到拦截器增强（即DIY 个拦截器把原Requset Cookie放新Request） 解决重点：Spring类 RequestContextHolder\",\"补充我的问题：\",\"openfeign会有丢失请求头的情况是因为它是基于http请求，而http请求又是无状态协议的原因吗\",\"OpenFeign是一个基于HTTP协议的Java HTTP客户端，用于简化HTTP API的调用。它不会导致丢失请求头的情况，因为HTTP请求头是在每个请求中明确发送的，无论是使用OpenFeign还是其他HTTP客户端库。\",\"HTTP协议本身是无状态的，这意味着每个请求都是独立的，服务器不会保留任何关于客户端的状态信息。但是，HTTP协议允许在请求头中发送状态信息，以便服务器可以了解客户端的状态。这些状态信息可以包括认证令牌、会话ID、请求参数等。\",\"OpenFeign可以通过设置请求头来发送这些状态信息，以便服务器可以了解客户端的状态。如果请求头在OpenFeign中丢失，可能是由于OpenFeign配置不正确或由于网络问题导致的。但这并不是HTTP协议本身的限制，而是客户端的实现问题。\",\"豪猪哥出道即巅峰，后面那些都有抄它的借鉴它的理念。官网推荐用 resilience4j 但这里是中国，言外之意就是没有用这个，都会向Alibaba靠拢！\",\"学习理念设计和思想，Alibaba sentinel后面都是一些细节和配置（天下文章一堆抄）\",\"服务雪崩\",\"多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.\",\"Hystrix是什么\",\"类似熔断保险丝\"]},\"582\":{\"h\":\"1. 重要概念\",\"t\":[\"服务降级\",\"例如打10086人工，坐席忙继续等待请按1无需等待请挂机\",\"在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者简单处理【抛异常、返回NULL、调用 Mock 数据、调用 Fallback 处理逻辑】。\",\"服务熔断\",\"保险丝，上面服务降级可没停\",\"设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据\",\"服务限流\",\"秒杀高并发，让大家排队\",\"哪些情况会出发降级\",\"程序运行导常\",\"超时\",\"服务熔断触发服务降级\",\"线程池/信号量打满也会导致服务降级\",\"注意：SpringBoot 默认继承的是 Tomcat ，tomcat的默认的工作线程数\"]},\"583\":{\"h\":\"2. 服务降级\",\"t\":[\"先 8001 先从自身找问题 分两步走:\",\"@Service 中对方法配置 @HystrixCommand 里面的参数 fallbackMethod 指定兜底的方法\",\"主启动类激活 添加新注解@EnableCircuitBreaker\",\"80 可以根据 8001 的一样的依葫芦画瓢\"]},\"584\":{\"h\":\"2.1 解决代码膨胀问题\",\"t\":[\"目前问题1 每个业务方法对应一个兜底的方法，代码膨胀\",\"解决方法：搞个 Global 的方法，默认都用这个\",\"1:1每个方法配置一个服务降级方法，技术上可以，但是不聪明\",\"1:N除了个别重要核心业务有专属，其它普通的可以通过@DefaultProperties(defaultFallback = “”)统一跳转到统一处理结果页面\",\"通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量\"]},\"585\":{\"h\":\"2.2 Hystrix之通配服务降级FeignFallback\",\"t\":[\"问题：服务提供者 8001 宕机【服务降级，客户端去调用服务端，碰上服务端宕机或关闭】\",\"解决：80 实现服务降级 @FeignClient fallback属性 + 提供一个 Service 的实现类【本次案例服务降级处理是在客户端80实现完成的，与服务端8001没有关系，只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦】\"]},\"586\":{\"h\":\"3. 服务熔断\",\"t\":[\"一定要区分 服务降级 vs 服务熔断\",\"@HystrixCommand(fallbackMethod = \\\"paymentCircuitBreaker_fallback\\\",commandProperties = { @HystrixProperty(name = \\\"circuitBreaker.enabled\\\",value = \\\"true\\\"),// 是否开启断路器 @HystrixProperty(name = \\\"circuitBreaker.requestVolumeThreshold\\\",value = \\\"10\\\"),// 请求次数 @HystrixProperty(name = \\\"circuitBreaker.sleepWindowInMilliseconds\\\",value = \\\"10000\\\"), // 时间窗口期 @HystrixProperty(name = \\\"circuitBreaker.errorThresholdPercentage\\\",value = \\\"60\\\"),// 失败率达到多少后跳闸 }) \",\"服务熔断的实现效果：服务降级后兜底方法执行了很多次占比请求超过默认10秒内超过50%的请求失败，这个时候就算请求正确的也会到兜底的错误方法上即开启断路器（过一下会恢复）\"]},\"587\":{\"h\":\"断路器开启或者关闭的条件\",\"t\":[\"到达以下阀值，断路器将会开启：\",\"当满足一定的阀值的时候（默认10秒内超过20个请求次数) 当失败率达到一定的时候（默认10秒内超过50%的请求失败) 当开启的时候，所有请求都不会进行转发\",\"一段时间之后（默认是5秒)，这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。\",\"Hutool国产工具类 好像蛮给力\",\"For Example:\",\"//生成的UUID是带-的字符串，类似于：a5c8a5e8-df2b-4706-bea4-08d0939410e3 String uuid = IdUtil.randomUUID(); //生成的是不带-的字符串，类似于：b17f24ff026d40949c85a24f4f375d42 String simpleUUID = IdUtil.simpleUUID(); \"]},\"588\":{\"h\":\"\",\"t\":[\"后面高级篇讲解alibaba的Sentinel说明\",\"Alibaba sentinel\"]},\"589\":{\"h\":\"5. Hystrix图形化Dashboard搭建\",\"t\":[\"需要自己搭建一个监控平台 即 新建一个 Model 项目 和 Eureka 一样，但 Zookeeper 就不用 ！\",\"这里其实后面的 Sentinel 也不用再搭同Zookeeper\",\"看日志不方便，越来越偏向仪表盘（图形化的监控，数据报表的展现）\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId> </dependency> \",\"技术选型：一般不会用 zuul 了，都用 Gateway\"]},\"590\":{\"h\":\"1. 前言\",\"t\":[\"zuul 是 Netflix 公司出的，Spring 公司等不及了就自己出了 Gateway，Gateway是原 zuul1.x版的替代\",\"Cloud 全家桶中有个很重要的组件就是网关！\",\"Nginx针对用户和前端，gateway针对前端和后台服务\",\"传统的Web框架，比如说: Struts2，SpringMVC等都是基于Servlet APl与Servlet容器基础之上运行的。\",\"但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架\",\"微服务架构中网关的位置\",\"场景：1号机器的7000端口挂掉了，我不可能手动的去代码改成能用的2号机器的7000端口吧\",\"第一个需求：10几台及其一起上线，经过网关动态的路由到能用的各个服务，也能从注册中心中实时地感知某个服务上线还是下线。\",\"第二个需求：网关这一层可以权限校验，限流控制\",\"img\",\"三大核心概念\",\"Route(路由) - 路由是构建网关的基本模块,它由ID,目标URI,一系列的断言和过滤器组成,如断言为true则匹配该路由；\",\"Predicate(断言) - 参考的是Java8的java.util.function.Predicate，开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),如果请求与断言相匹配则进行路由；\",\"Filter(过滤) - 指的是Spring框架中GatewayFilter的实例,使用过滤器,可以在请求被路由前或者之后对请求进行修改。\",\"一句话总结：请求到达网关，先 Predicate 是否符合某个路由规则，符合就 Route 到指定地方，但需要经过一系列 Filter 进行过滤\",\"我们目前不想暴露8001端口，希望在8001外面套一层9527，这样有人攻击有一层挡着\",\"添加网关前 - http://localhost:8001/payment/get/1\",\"添加网关后 - http://localhost:9527/payment/get/1\",\"两者访问成功，返回相同结果\"]},\"591\":{\"h\":\"名实现动态路由\",\"t\":[\"默认情况下Gateway会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能。\",\"1、修改9527的yml\",\"①需要注意的是uri的协议为lb（load-balancing），表示启用Gateway的负载均衡功能。 ②lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri（负载均衡到指定服务）\",\"server: port: 9527 spring: application: name: cloud-gateway cloud: gateway: discovery: locator: enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由 routes: - id: payment_routh #路由的ID，没有固定规则但要求唯一，建议配合服务名 #uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service predicates: - Path=/payment/get/** #断言,路径相匹配的进行路由 - id: payment_routh2 #uri: http://localhost:8001 #匹配后提供服务的路由地址 uri: lb://cloud-payment-service predicates: - Path=/payment/lb/** #断言,路径相匹配的进行路由 eureka: instance: hostname: cloud-gateway-service client: service-url: register-with-eureka: true fetch-registry: true defaultZone: http://eureka7001.com:7001/eureka \",\"2、测试 ①启动一个eureka7001+两个服务提供者8001/8002 ②访问http://localhost:9527/payment/lb\",\"会发现8001和8002交替出现\",\"**要经过三关才能过来：**这章其实就学这三个的配置 主yaml\",\"image-20220630144816418\",\"路由 Route\",\"# 两种配置方式，1）java代码@Configuration 和 2）yaml配置 # 地址分 1）静态路由 和 2）动态路由的功能（不写死一个地址） # 踩坑，记住路由的先后顺序，下面这样，第二条就不会执行！！！需要调整路由顺序 predicates: - Path=/api/** # 别忘了 ** predicates: - Path=/api/product/** \",\"断言 Predicate\",\"# 该命令相当于发get请求，且没带cookie curl http://localhost:9527/payment/lb # 带cookie的 curl http://localhost:9527/payment/lb --cookie \\\"chocolate=chip\\\" \",\"过滤器 Filter\",\"# 对于 的请求路径/red/blue，这会将路径设置为/blue在发出下游请求之前。请注意，由于 YAML 规范，$应将其替换为。$\\\\ filters: - RewritePath=/red/?(?<segment>.*), /$\\\\{segment} # 注意这个例子 - id: product_route uri: lb://gulimall-product predicates: - Path=/api/product/** filters: - RewritePath=/api/?(?<segment>.*), /$\\\\{segment} ## 前端项目，/api ### http://localhost:88/api/product/category/list/tree http://localhost:10000/product/category/list/tree # 一般是 自定义全局GlobalFilter \",\"三套：\",\"Config + Bus\",\"Alibaba Nacos\",\"携程的apollo，上海有名些\",\"每一个Model都有一个 yaml，改的太痛苦。于是有了 服务配置 技术\",\"3344 就是配置总控中心连 Git 获取它上面的 yaml\",\"3355 可以通过 3344 拿到 Git 上的 yaml\",\"image-20220701143051906\",\"怎么玩\",\"SpringCloud Config分为服务端和客户端两部分。\",\"服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口。\",\"客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。\"]},\"592\":{\"h\":\"1. Config配置总控中心搭建\",\"t\":[\"服务端作用：配置好后能拿到Git中yaml的内容\"]},\"593\":{\"h\":\"2. Config客户端配置与测试\",\"t\":[\"bootstrap.yml【已踩坑，没有改名字】\",\"applicaiton.yml是用户级的资源配置项\",\"bootstrap.yml是系统级的，优先级更加高\",\"Spring Cloud会创建一个Bootstrap Context，作为Spring应用的Application Context的父上下文。\",\"初始化的时候，BootstrapContext负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。\",\"Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。Bootstrap context和Application Context有着不同的约定，所以新增了一个bootstrap.yml文件，保证Bootstrap Context和Application Context配置的分离。\",\"要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的，因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml。\",\"**两个图标都不一样：**3355不改成 bootstrap.yaml 的话 @Value(\\\"${config.info}\\\") 会报错！\",\"因为本地 application.yaml 没有，bootstrap.yaml -> 配置中心地址 -> Git 上有！config.info\",\"image-20220701151424183\"]},\"594\":{\"h\":\"3. Config动态刷新之手动版\",\"t\":[\"问题：Gitee 上修改 yaml，3344配置中心刷新是修改的，但是3355客户端是没有修改需要重启才生效\",\"解决：三步 1）加actuator 2）一个注解 3）运维多用一个bash命令\",\"curl -X POST \\\"http://localhost:3355/actuator/refresh\\\" \",\"对 Config 的一个加强，可以实现自动版的一个动态刷新 Config + Bus\",\"注意：Spring cloud Bus目前支持RabbitMQ和Kafka。\",\"消息总线：可以想象成微信订阅号\",\"由于没学 RabbitMQ 就略过这节...\",\"注意：目前仅支持RabbitMQ、 Kafka。想用RocketMQ 就后面学Alibaba\",\"有没有一种新的技术诞生，让我们不再关注具体MQ的细节，我们只需要用一种适配绑定的方式，自动的给我们在各种MQ内切换。（类似于Hibernate）\",\"Cloud Stream是什么？屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型。\",\"个人感觉：像一个适配器 JDBC 屏蔽了各不同数据库的差异\",\"image-20220701165550123\",\"通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。\",\"由于没学MQ略。。。\",\"sleuth监控、zipkin展现\",\"大致就需要监控的加pom 改yaml 例如服务提供者和服务消费者(调用方)都这么干\",\"pom:\",\"<!--包含了sleuth+zipkin--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-zipkin</artifactId> </dependency> \",\"yaml:\",\"spring: application: name: cloud-payment-service zipkin: #<-------------------------------------关键 base-url: http://localhost:9411 sleuth: #<-------------------------------------关键 sampler: #采样率值介于 0 到 1 之间，1 则表示全部采集 probability: 1 \",\"然后调用后进入监控网站可以看到哪个服务调的哪个服务，耗时多少毫秒\",\"感觉简单就没有实操了！\",\"简介：\",\"为什么会出现SpringCloud alibaba\",\"Spring Cloud Netflix项目进入维护模式\",\"https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now\",\"什么是维护模式？\",\"将模块置于维护模式，意味着Spring Cloud团队将不会再向模块添加新功能。\",\"能干嘛：\",\"服务限流降级：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。\",\"服务注册与发现：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。\",\"分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新。\",\"消息驱动能力：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。\",\"分布式事务：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。\",\"阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。\",\"分布式任务调度：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。\",\"阿里云短信服务：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。\",\"怎么玩：\",\"Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性\",\"Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\",\"RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。\",\"Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。\",\"Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。\",\"Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。\",\"Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。\",\"Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。\",\"Spring Cloud Alibaba学习资料获取：\",\"官网\",\"https://spring.io/projects/spring-cloud-alibaba#overview\",\"英文\",\"https://github.com/alibaba/spring-cloud-alibaba\",\"https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html\",\"中文\",\"https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md\",\"Nacos = Eureka + Config + Bus Nacos致力于帮助您发现、配置和管理微服务。\",\"服务注册中心 + 服务配置 + 服务总线\",\"为什么叫Nacos\",\"前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。\",\"怎么用\",\"不用像 Eureka 还要整个项目跑起来，这个像 zookeeper\",\"解压安装包，直接运行bin目录下的startup.cmd，但是实测会报错。需在命令行加条件跑这个cmd\",\"startup.cmd -m standalone \",\"为了下一章节演示nacos的负载均衡，参照9001新建9002\",\"这里取巧不想新建重复体力劳动，可以利用IDEA功能，直接拷贝虚拟端口映射\",\"image-20220706152115283\",\"K8S服务和DNS服务则适用于CP模式\",\"Nacos 是 AP + CP 可以切换\",\"切换命令：\",\"curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&value=CP \",\"注意：新的nacos已经没有整合ribbon了，所以要么在maven添加Loadbalancer代替\"]},\"595\":{\"h\":\"1. 注册中心：代替 Eureka\",\"t\":[\"就是启动项目换下配置，cmd启动完后项目一般就是三步： \",\"配置 Nacos server-addr 的地址\",\"配置自己的 application name（注意：每一个应用都应该有名字，这样才能注册上去。）\",\"主启动类加 @EnableDiscoveryClient 开启服务的注册与发现功能（容易忘）\"]},\"596\":{\"h\":\"2. 配置中心：代替 Bus\",\"t\":[\"Bus需要在 Git 上建配置，Nacos直接可以在网站中配置\",\"常规操作，一样建 Model 一系列\"]},\"597\":{\"h\":\"配置文件详解\",\"t\":[\"Nacos中的dataid（即网站配置文件的名字）需符合：\",\"img\",\"${prefix}-${spring-profile.active}.${file-extension} 即 ${spring.application.name)}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} \",\"测试了一下，如果配置文件中没有配config 默认是 gulimall-coupon.properties 项目名.properties\",\"测试：discovery config 要配置到 bootstrap.yaml 才生效。就是搞改上面这个.properties 到application不生效到bootstrap生效 自我建议把 nacos 相关的配 bootstrap\",\"小技巧：应用启动的时候第一行日志会告诉你 Nacos 配置中心的文件名是什么\"]},\"598\":{\"h\":\"common.yaml\",\"t\":[\"我们还可以通过shared-configs配置公用的的配置，比如注册中心大家都用同一个，redis的也可能是多个服务用同一个配置：\",\"shared-dataids: common.yaml\",\"醉了：写这个Data ID一定要加后缀。整了很久才发现这个问题\",\"image-20230106154116757\",\"bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。 application.yml 可以用来定义应用级别的。\",\"自带动态刷新\",\"需要在使用了 @Value 的 Controller 类中加 @RefreshScope //支持Nacos的动态刷新功能。 才能动态刷新\",\"修改下Nacos中的yaml配置文件，再次调用查看配置的接口，就会发现配置已经刷新。\",\"仅仅是以上功能还不行，还有 Bus 没有的好功能：\",\"切换dev test配置文件环境，分组..很方便，看图：配置文件-->命名空间-->组\",\"自我建议：NameSpace（微服务）、Group（开发环境）\",\"最终方案：每个微服务创建自己的命名空间，然后使用配置分组区分环境（dev/test/prod）\",\"img\",\"默认情况：Namespace=public，Group=DEFAULT_GROUP，默认Cluster是DEFAULT\",\"Nacos默认的Namespace是public，Namespace主要用来实现配置隔离。\",\"基于环境进行隔离：比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的。\",\"基于微服务进行隔离：也可以比如给不同的model创建它自己的命名空间\",\"写法spring.cloud.nacos.config.namespace=e53d5e82-a1f3-42b9-a1d2-1cbbd8103d69\",\"Group默认是DEFAULT_GROUP，Group可以把不同的微服务划分到同一个分组里面去\",\"例如双十一用这组，618用另外一组\",\"也可区分开发环境 dev pro\",\"Service就是微服务:一个Service可以包含多个Cluster (集群)，Nacos默认Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分。\",\"比方说为了容灾，将Service微服务分别部署在了杭州机房和广州机房，这时就可以给杭州机房的Service微服务起一个集群名称(HZ) ，给广州机房的Service微服务起一个集群名称(GZ)，还可以尽量让同一个机房的微服务互相调用，以提升性能。\",\"最后是Instance，就是微服务的实例。\",\"加载多配置集\",\"其实我们的微服务只需保留一个 bootstrap.yaml\",\"我们要把原来application.yml里的内容都分文件抽离出去。我们在nacos里创建好 后，在coupons里指定要导入的配置即可。\",\"image-20220805173159065\",\"重点： spring.cloud.nacos.config.ext-config[0]\",\"spring.cloud.nacos.config.namespace=ed042b3b-b7f3-4734-bdcb-0c516cb357d7 # 可以选择对应的命名空间 ，即写上对应环境的命名空间ID spring.cloud.nacos.config.group=dev # 配置文件所在的组 spring.cloud.nacos.config.ext-config[0].data-id=datasource.yml spring.cloud.nacos.config.ext-config[0].group=dev spring.cloud.nacos.config.ext-config[0].refresh=true spring.cloud.nacos.config.ext-config[1].data-id=mybatis.yml spring.cloud.nacos.config.ext-config[1].group=dev spring.cloud.nacos.config.ext-config[1].refresh=true spring.cloud.nacos.config.ext-config[2].data-id=other.yml spring.cloud.nacos.config.ext-config[2].group=dev spring.cloud.nacos.config.ext-config[2].refresh=true \",\"其实以上这些都是小儿科，自己看看文档容易知道。\"]},\"599\":{\"h\":\"3. Nacos集群和持久化配置（重要）\",\"t\":[\"集群：至少三台\",\"持久化\",\"官方文档\",\"VIP：不是 very important person，而是 virtualIP\",\"img\",\"上图官网翻译，真实情况\",\"img\",\"默认Nacos使用嵌入式数据库实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos采用了集中式存储的方式来支持集群化部署，目前只支持MySQL的存储。\",\"通俗的说：集群有三个的话，每一个Nacos都有自己嵌入式数据库就会数据不一致。而都用外面一个MySQL就不会有这种问题。\",\"默认数据库derby切换到MySQL具体看官方文档就行。\",\"Linux 配置\",\"img\",\"Sentinel是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。\",\"Hystrix与Sentinel比较：\",\"Hystrix\",\"需要我们程序员自己手工搭建监控平台\",\"没有一套web界面可以给我们进行更加细粒度化得配置流控、速率控制、服务熔断、服务降级\",\"Sentinel\",\"单独一个组件，可以独立出来。\",\"直接界面化的细粒度统一配置。\",\"约定 > 配置 > 编码\",\"都可以写在代码里面，但是我们本次还是大规模的学习使用配置和注解的方式，尽量少写代码\"]},\"600\":{\"h\":\"1. 流控\",\"t\":[\"直接web界面dashboard 可以设置每秒只准访问一次，否则 Blocked by Sentinel (flow limiting)可以通过WebCallbackManager.setUrlBlockHandler()修改这一句\",\"流控设置保存在内存中，重启失效\",\"每一个微服务都导入actuator（就会有统计信息）;并配合management.endpoints.web.exposure.include=*\"]},\"601\":{\"h\":\"1.1 Sentinel流控-关联\",\"t\":[\"就像一个出水口一个入水口，我这边的支付接口挂了你那边下单的订单接口就不要那么猛了\",\"不要花精力在这些工具上面，够用就行了。把精力放到主要矛盾上面，用 postman、jmeter 都可以\"]},\"602\":{\"h\":\"1.2 Sentinel流控-预热\",\"t\":[\"具体看别人笔记\",\"应用场景\",\"如：秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是把为了保护系统，可慢慢的把流量放进来,慢慢的把阀值增长到设置的阀值。\"]},\"603\":{\"h\":\"2. 熔断/降级\",\"t\":[\"RT：Round trip 往返、来回，Round trip Time 往返时间，即响应时间\",\"往下部分略过，建议看文档。官方文档\",\"熔断：保证服务不受级联影响。例如请求调用链路 a->b->c c是不可用的过3s才执行到业务的错误点返回给b不可用，后面的无数个a b以及调用a的大量堆积 熔断的话直接快速响应失败就不会堆积了长时间的卡死\",\"降级：于流量高峰期，对非核心业务停止服务或所有的调用直接返回降级数据 服务降级指的是当服务器压力剧增的情况下,根据当前业务情况及流量对一些服务和页面有策略的降级,以此释放服务器资源以保证核心任务的正常运行.降级的核心思想就是丢车保帅,优先保证核心业务. 常见的服务降级策略有以下几种：\",\"降级页面：当服务不可用时，显示一个简化的页面或者错误信息，代替原本的功能页面，向用户传达服务不可用的信息。\",\"异步处理：将原本同步的服务调用改为异步调用，通过消息队列或者异步任务来处理请求，避免因服务不可用而阻塞整个系统。\",\"相同点：\",\"为了保证集群大部分服务的可用性和可靠性，防止崩溃，牺牲小我\",\"用户最终都是体验到某个功能不可用\",\"不同点：\",\"熔断是被调用方故障，触发的系统主动规则\",\"降级是基于全局考虑，停止一些正常服务，释放资源\"]},\"604\":{\"h\":\"3. SentinelResource配置\",\"t\":[\"兜底方法，分为系统默认和客户自定义，两种\",\"之前的case，限流出问题后，都是用sentinel系统默认的提示: Blocked by Sentinel (flow limiting)\",\"我们能不能自定？类似hystrix，某个方法出问题了，就找对应的兜底降级方法?\",\"结论 从HystrixCommand到@SentinelResource\",\"Sentinel 没有学下去，暂时跳过后期用的时候再来学！\"]},\"605\":{\"h\":\"\",\"t\":[\"Gulimall 补充\",\"资源 是 Sentinel 中的核心概念之一\",\"我们说的资源，可以是任何东西，服务，服务里的方法，甚至是一段代码。使用 Sentinel 来进行资源保护，主要分为几个步骤:\",\"定义资源\",\"定义规则\",\"检验规则是否生效\",\"复习Gulimall的本地事务对照着笔记来学习！\",\"看标题的官网链接！！！中文的通俗易懂 下面自己码的也可以看看抄过来的图带点自己好理解的逻辑去理解 @GlobalTransactional\",\"2PC（Seata是这个的一个变形） 这里具体看 PDF！注意方案是方案框架是框架（落地实现这个方案）\"]},\"606\":{\"h\":\"1.概念\",\"t\":[\"分布式架构肯定是多数据库、多数据源！（买家库，卖家库）甚至在不同的机房。单个就搞笑了\",\"单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用,分别使用三个独立的数据源，业务操作需要调用三三 个服务来完成。此时每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证。\",\"img\",\"一句话：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题。\",\"**一带三：**分布式事务处理过程的一ID+三组件模型\",\"Transaction ID XID 全局唯一的事务ID\",\"三组件概念 \",\"TC (Transaction Coordinator) - 事务协调者：维护 全局和分支事务的状态，驱动全局事务提交或回滚。\",\"TM (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。\",\"RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\",\"处理过程：\",\"TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；\",\"XID在微服务调用链路的上下文中传播；\",\"RM向TC注册分支事务，将其纳入XID对应全局事务的管辖；\",\"TM向TC发起针对XID的全局提交或回滚决议；\",\"TC调度XID下管辖的全部分支事务完成提交或回滚请求。\",\"img\",\"My Understand：看图说话 我这里好理解\",\"Seata 分 TC、TM 和 RM 三个角色，TC（Server 端）为单独服务端部署，TM 和 RM（Client 端）由业务系统集成。\",\"TC 协调TM全局事务中的各个分支事务，这个全局调控的人就是Seata服务器（官网下下来运行）\",\"TM 全局事务看成订单模块 其它小事务RM看成feign调用的\",\"Q：AT 模式（自动） 假如 Account 失败了，但是Stock & Order成功了 那么怎么回滚？？？\",\"A：UNDO_LOG Table（回滚日志表） 假如提交的是 +2 那就 -2 给补回来回复以前的状态。因为前面事务提交了没办法回滚了（魔改数据库）\"]},\"607\":{\"h\":\"\",\"t\":[\"官方文档很清楚了！！！Git也有很多场景示例。Seata支持很多模式.. AT 模式：两阶段提交协议的演变\",\"本地@Transactional Spring的注解\",\"全局@GlobalTransactional SpringCloud的注解（控制分布式事务）：代表这个订单服务是一个全局事务，分支事务用@Transactional就行了\",\"ps：做项目订单这个全局事务需要把这两个注解都写\",\"这里具体看 PDF！注意方案是方案框架是框架（落地实现这个方案） ✔是高并发优先考虑的，用MQ 订单用异步确保型/商品保存可2PC\",\"2PC（Seata是这个的一个变形）还有3PC 注意和MySQL写日志的两阶段提交区分，是不一样的东西。Seata AT是第一阶段提交+2第二阶段看要不要补偿-2 只适合一般的分布式事务不合适高并发\",\"柔性事务-TCC 事务补偿型方案：相当于3PC的手动版 商城项目用的很多，也有很多框架给你去用。把正常的业务代码按照框架要求拆成z和三部分就行 Try+2/add Cancel-2/delete\",\"柔性事务-最大努力通知型方案（弹幕有公司是这个）✔ 支付宝告诉你有没有支付成功，MQ 一会发个消息告诉你成了 一会发个消息告诉你成了\",\"柔性事务-可靠消息+最终一致性方案（异步确保型，视频是这个）✔ 也是借助 MQ 总结一句：异步下单，提高并发，提升响应，提升购物体验。\"]},\"608\":{\"h\":\"举例 AT 模式（自动）：\",\"t\":[\"只适用一般的分布式事务控制（例如保存商品会有几次feign优惠券之类的这里不要求高并发），不适合高并发。下单其实不适合（用MQ）\",\"需要数据库加一个回滚表（哪个微服务需要回滚的就得加上）\",\"解压并启动seata-server（TC 事务协调器）\",\"导入依赖spring-cloud-starter-alibaba-seata 会自动带上 seata-all-0.7.1\",\"注意下载的Seata服务器版本要和 seata-all-0.7.1 对应！！\",\"registry.conf：服务注册/注册中心配置/事务日志存储位置（global_table&branch_table&lock_table） 修改 registrytype=nacos 或使用本地文件 file.conf 配置\",\"所有想要用到分布式事务的微服务使用seataDataSourceProxy代理自己的数据源\",\"1.4.1版不用配置数据源，在yaml中开启自动代理数据源，默认是开启的\",\"每个微服务,都必须导入 registry.conf file.conf 配置服务名\",\"问题一：no available server to connect解决（Application要配置seata： spring.cloud.alibaba.seata.tx-service-group: my_test_tx_group）\",\"问题二：同一无法连接\",\"1.4.2直接注册到nacos上 现在的没这么麻烦了吧 可能只需要一个registry.conf了\",\"给分布式大事务的入口标注@GLobalTransactional 每一个远程的小事务用@Transactional\",\"​ P290避个坑，staea0.7不支持批量保存，我是遍历插入的，体验要stata的效果就好了，不使用高版本的stata也可以\",\"特别注意：Seata 为用户提供了 AT、TCC、SAGA 和 XA 事务模式\"]},\"609\":{\"h\":\"》补充：\",\"t\":[\"简单总结一下 2PC 两阶段中比较重要的一些点：\",\"准备阶段 的主要目的是测试 RM 能否执行 本地数据库事务 操作（!!!注意：这一步并不会提交事务）。\",\"提交阶段 中 TM 会根据 准备阶段 中 RM 的消息来决定是执行事务提交还是回滚操作。\",\"提交阶段 之后一定会结束当前的分布式事务\",\"2PC 的优点：\",\"实现起来非常简单，各大主流数据库比如 MySQL、Oracle 都有自己实现。\",\"针对的是数据强一致性。不过，仍然可能存在数据不一致的情况。\",\"2PC 存在的问题：\",\"同步阻塞 ：事务参与者会在正式提交事务之前会一直占用相关的资源。比如用户小明转账给小红，那其他事务也要操作用户小明或小红的话，就会阻塞。(XD：所以谷粒商城高并发的接口没用Seata，用的是MQ柔性事务)\",\"数据不一致 ：由于网络问题或者TM宕机都有可能会造成数据不一致的情况。比如在第2阶段（提交阶段），部分网络出现问题导致部分参与者收不到 Commit/Rollback 消息的话，就会导致数据不一致。\",\"单点问题 ：TM在其中也是一个很重要的角色，如果TM在准备(Prepare)阶段完成之后挂掉的话，事务参与者就会一直卡在提交(Commit)阶段。\"]},\"610\":{\"h\":\"一、spring boot多服务项目不显示service窗口\",\"t\":[\"打开这个文件.idea > workspace.xml 中搜索 RunDashboard，如下图所示\",\" <component name=\\\"RunDashboard\\\"> <option name=\\\"configurationTypes\\\"> <set> <option value=\\\"SpringBootApplicationConfigurationType\\\" /> </set> </option> <option name=\\\"ruleStates\\\"> <list> <RuleState> <option name=\\\"name\\\" value=\\\"ConfigurationTypeDashboardGroupingRule\\\" /> </RuleState> <RuleState> <option name=\\\"name\\\" value=\\\"StatusDashboardGroupingRule\\\" /> </RuleState> </list> </option> </component> \"]},\"611\":{\"h\":\"SpringIntegration\",\"t\":[\"视频讲的特好 应用集成模式与概念 两个系统，独立开发 独立运行的 系统集成\"]},\"612\":{\"h\":\"常见集成模式：\",\"t\":[\"通过文件传输的形式（保障平台 - ERP通过xml）File Transfer <FTP>\",\"通过接口远程方法调用怕【WMS常用 -return json POJO到对方系统去保存Yigo】 <HTTP>\",\"共享公共数据库方式，同1的文件传输类似通过外部【WMS也用 -保存到Yigo2-】 <JDBC-API>\",\"通过Event到消息总线，相互发消息\",\"ps: 最推崇的 = Messaging（和Spring事件驱动，消息中间件松耦合的概念十分相似）\",\"ABC相互之间可以完全不知道对方的，只需要去Message Bus消费自己需要的Event就行\"]},\"613\":{\"h\":\"两个系统之间架设通道大致流程：\",\"t\":[\"Endpoint 可以是FTP从FTP服务器拿文件塞进Interation，也可以是HTTP 【封装成一个个的 Message 格式】进入到下方的消息管道\",\"Channel(消息通道) -> Filter(管道过滤器对传递消息处理，使符合接收方要求)还有些特别的Filter（Translator/Router）\",\"与上面ERP概念模型小区别是，输入输出的头尾两端的Message Endpoint是算Filters\",\"是轻量级的消息传递机制\",\"adapters（适配器）\",\"remoting\",\"messaging（=header + payload）\",\"public interface Message<T> { T getPayload(); MessageHeaders getHeaders(); } \",\"scheduling\",\"message - message channel\",\"Message Transformer\"]},\"614\":{\"h\":\"SpringSecurity\",\"t\":[\"6 h SpringSecurity + JWT 核心：认证 & 授权\",\"别人笔记\",\"题外话：ali 的 SpringBoot 启动模板真不错，还带测试Controller+html https://start.aliyun.com/\"]},\"615\":{\"h\":\"1.介绍\",\"t\":[\"springsecurity是安全框架，准确来说是安全管理框架。相比与另外一个安全框架Shiro，springsecurity提供了更丰富的功能，社区资源也比Shiro丰富\",\"springsecurity框架用于Web应用的需要进行认证和授权\",\"认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户\",\"授权：经过认证后判断当前用户是否有权限进行某个操作。认证和授权也是SpringSecurity作为安全框架的核心功能\",\"认证和授权也是SpringSecurity作为安全框架的核心功能\"]},\"616\":{\"h\":\"2.项目流程\",\"t\":[\"搭SpringBoot项目（aliyun 模板好用）\",\"引入 SpringSecurity 依赖\",\"这时进入 localhost:8080 会跳到这个框架会自带一个登陆静态页面！ 会拦截你所有 /* 请求，需要登陆后才能访问到\",\"username：user，password：idea控制台有 登陆了才能访问到\",\"ps: 除了拦截所有请求到登陆页面，也有 https://localhost:8080/logout 登出 API\"]},\"617\":{\"h\":\"3.流程图\",\"t\":[\"springsecurity的权限管理，是先授权后认证，所以我们先学习认证这一部分\",\"流程图如下，注意下图的jwt指的是 json web token，jwt是登录校验的时候用的技术，可以根据指定的算法进行信息的加密和解密\",\"img\"]},\"618\":{\"h\":\"需要调整的点：默认帮我们实现很多东西，我们需要定制改\",\"t\":[\"登陆界面得换成系统的，肯定不能用 SpringSecutiry 默认的了\",\"账号密码不能用默认的，得和真实 user 表关联\",\"前后端不分离好像用的是后端的 Session 存的Tonken，分离的话肯定不能这样。\"]},\"619\":{\"h\":\"4.springsecurity原理\",\"t\":[\"SpringSecurity的原理其实就是一个过滤器链(10+)，内部包含了提供各种功能的过滤器。例如快速入门案例里面使用到的三种过滤器，如下图\",\"监听器 -> 过滤器链 -> dispatcherservlet(前置拦截器 -> mapperHandle -> 后置拦截器 -> 最终拦截器)\",\"img\",\"一、UsernamePasswordAuthenticationFilter: 负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责\",\"二、ExceptionTranslationFilter：处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException\",\"三、FilterSecurityInterceptor：负责权限校验的过滤器\",\"注意上图，橙色部分表示认证，黄色部分表示异常处理，红色部分表示授权\",\"需要结合上面的 流程图 & 原理 部分看\"]},\"620\":{\"h\":\"1.认证流程图（橙色部分）\",\"t\":[\"UsernamePasswordAuthenticationFilterUserDetailsService\",\"我们来详细学一下上面 '1. springsecurity原理' 的橙色部分，也就是认证那部分的知识\",\"Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息\",\"AuthenticationManager接口：定义了认证Authentication的方法\",\"UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法\",\"UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中\",\"img\",\"ps: 第 10 步好像是通过 ThreadLocal 存给红色授权过滤器拿信息\"]},\"621\":{\"h\":\"2.思路分析\",\"t\":[\"第一步和第四步换成自己的代码：\",\"「4」对应流程图调整点 2，需要重写该类从数据库去对比认证\",\"「1」对应流程图调整点 1、3，第 10 步校验通过反 Token。用户提交账号密码时候提交到我们自己的 Controller，后续流程依旧是掉系统的【重点】\",\"引入 Redis、JWT 依赖（不用对 JWT 有太过深入的了解，基本调用工具类就可以了！！！）\"]},\"622\":{\"h\":\"- 后端：\",\"t\":[\"image-20231222154855650\"]},\"623\":{\"h\":\"- 前端：\",\"t\":[\"image-20231222155309514\"]},\"624\":{\"h\":\"3.认证实现-UserDetailsService\",\"t\":[\"重写流程图-第四个类 认证登陆接口的账号、密码的后台默认实现改为落库查询\",\"被security拦截业务接口，出现登录页面之后，我们需要通过输入数据库里的用户和密码来登录，而不是使用security默认的用户和密码进行登录\",\"思路: 只需要新建一个实现类，在这个实现类里面实现Security官方的UserDetailsService接口，然后重写里面的loadUserByUsername方法\",\"注意: 重写好loadUserByUsername方法之后，我们需要把拿到 '数据库与用户输入的数据' 进行比对的结果，也就是user对象这个结果封装成能被 'Security官方的UserDetailsService接口' 接收的类型。所以可以自定义的 JavaBean 类去继承官方的 UserDetails 类对象\",\"@Service public class UserDetailsServiceImpl implements UserDetailsService { @Autowired UserMapper userMapper; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { LambdaQueryWrapper<User> wrapper = new LambdaQueryWrapper<>(); wrapper.eq(User::getUserName,username); User user = userMapper.selectOne(wrapper); if (Objects.isNull(user)) { throw new RuntimeException(\\\"用户名密码错误！\\\"); } //TODO 根据用户查询权限信息 添加到Loginuser中 return new LoginUser(user); } } ---------------------------- public class LoginUser implements UserDetails{ private User xxuser; @Override //用于获取用户密码。由于使用的实体类是User，所以获取的是数据库的用户密码 public String getPassword() { return xxuser.getPassword(); } ... } \"]},\"625\":{\"h\":\"3.1.密码加密校验问题\",\"t\":[\"注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加｛noop｝。 Username：Admin，Password：{noop}123456\",\"不然 Error: There is no PasswordEncoder mapped for the id \\\"null\\\"\",\"具体为什么会这样，看流程图 7.\",\"^^^\",\"实际项目中我们不会把密码明文存储在数据库中。\",\"默认使用的PasswordEncoder要求数据库中的密码格式为：｛id};password。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替換PasswordEncoder。\",\"我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。\",\"我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。\",\"默认密码加密器是一个工厂方法创建的，包含了多个加密类型，所以需要用{加密类型id}区分，自己创建bean就不需要了\",\"疑问：1）必须实现Security提供的WebSecurityConfigurerAdapter类，2）并提供一个PasswordEncoder.class类型Bean到Spring容器才能修改SpringSecurity的默认密码规则吗\",\"为什么需要实现WebSecurityConfigurerAdapter才能替换PasswordEncoder Bean，我直接提供一个PasswordEncoder Bean到Spring容器不行吗\",\"A: 实际上，你可以直接提供一个 PasswordEncoder Bean 到 Spring 容器中，而无需实现 WebSecurityConfigurerAdapter 类。\",\"在 Spring Security 中，WebSecurityConfigurerAdapter 是一个方便的基类，用于配置和自定义安全相关的设置。但它不是必需的，特别是当你只想替换 PasswordEncoder Bean 时。\",\"@Configuration public class SecurityConfig { @Bean public PasswordEncoder passwordEncoder() { // 返回自定义的 PasswordEncoder Bean return new MyPasswordEncoder(); } // 其他配置... } \",\"ps:\",\"1）这个 Title 只需这一处代码即可解决，此时登陆校验数据库密码就会根据指定的 PasswordEncoder 去解密校验\",\"2）BCryptPasswordEncoder 使用\",\"img\"]},\"626\":{\"h\":\"4.登陆接口-xxx（JWT）\",\"t\":[\"重写流程图-第一个类，自定义登录接口实现这个功能需要使用到jwt 用到上面 3.认证 后台实现落库查Form\",\"jwt不叫加密，是编码和摘要\",\"jwt里面会有一个特有的秘钥 这个秘钥是用户自己设定的 会保存到token里面 校验时会根据这个秘钥校验（jwtUtil 两个方法一个create 一个parse 创建的时候有过期时间的，parse时候会解析这个 token String是否过期！）\",\"XD：\",\"SecurityConfig 放开 /user/login 的访问，自己去写登陆接口\",\"authenticationManager.authenticate(UsernamePasswordAuthenticationToken.class); 来校验当前 Form 表单用户信息\",\"成功给 Token。。。存 Redis\"]},\"627\":{\"h\":\"5.校验其他接口-定义jwt认证过滤器\",\"t\":[\"配置只放开了登录接口，其他接口全到这个过滤器来。有 Token 遍走 Redis 拿用户信息放 SecurityContextHolder 里即可！\",\"个人对这里jwt作用理解： 区分概念 登陆接口 vs 其他接口 先登陆有了 Token 其他接口携带此 Token 进行访问是否 403\",\"TTL（jwt Token字符串解析会判断有无过期，不关注原理只要只要jwt能做就行）\",\"有 Token 代表用户已经登陆过 解析 Token 得到 id 通过 id 去 Redis 拿用户信息比如 username 设置SpringSecurity的UsernamePasswordAuthenticationToken\",\"ps：相当于登陆接口只会一次查库，其他接口都是走的 Token\",\"对4.登陆实现的延续\",\"SpringSecurity过滤器链-图 结合这个图，这个过滤器应该放在第一个粉色的块（即 UsernamePasswordAuthenticationFilter 前面！）\",\"//把token校验过滤器添加到过滤器链中 //第一个参数是上面注入的我们在filter目录写好的类，第二个参数表示你想添加到哪个过滤器之前 http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class); \",\"SecurityContextHolder.getContext().setAuthentication(authenticationToken); 图片过滤链会用这个取上下文登陆信息, 即访问其他接口会判断你这里存的用户信息有没有\",\"上面我们实现登录接口的时，当某个用户登录之后，该用户就会有一个token值，我们可以通过认证过滤器，由于有token值，并且token值认证通过，也就是证明是这个用户的token值，那么该用户访问我们的业务接口时，就不会被Security拦截。简单理解作用就是登录过的用户可以访问我们的业务接口，拿到对应的资源\",\"获取token\",\"解析token获取其中的userid\",\"从redis中获取用户信息\",\"存入SecurityContextHolder\",\"我的理解是jwt不可能放全量的用户信息，要么查数据库，要么查缓存\",\"Q: 为什么之前视频里UsernamePasswordAuthenticationToken存的是username和password，而这里存的是loginUser和null？\",\"一个是登录，一个是验证两个场景，不要混在一起看 因为这里封装的是已经认证过的了。这里应该是只要验证这个用户有无 Token 有 Token 肯定就是验证过密码的可以直接放行的只关心 id\",\"Q：那为什么不只放 ID\",\"我也只放了 ID 也行\"]},\"628\":{\"h\":\"6.退出登录\",\"t\":[\"XD: 感觉 Token 也只是为了拿 ID，然后数据有无还得看 Redis，例如下面注销登录就是删 Redis 就行了\",\"我们怎么退出登录呢，也就是让某个用户的登录状态消失，也就是让token失效 ?\",\"实现起来也比较简单，只需要定义一个登陆接口，然后获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可\",\"相当于只是在认证的基础上，jwt认证过滤器上 set 上权限的 List\"]},\"629\":{\"h\":\"1.实现\",\"t\":[\"在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限\",\"img\",\"所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication，然后设置我们的资源所需要的权限即可\",\"使用：\",\"启动类 @EnableGlobalMethodSecurity(prePostEnabled = true)\",\"Controller URL_API Method @RequestMapping(\\\"/hello\\\")@PreAuthorize(\\\"hasAnyAuthority('test')\\\") //有test权限才能访问指定接口\",\"实现：\",\"查库的时候 User JavaBean 权限属性 set 进去\",\"认证过滤器 set 到 SecurityContextHolder\"]},\"630\":{\"h\":\"2.RBAC权限模型\",\"t\":[\"RBAC权限模型 (Role-Based Access Control) ，是权限系统用到的经典模型，基于角色的权限控制。该模型由以下五个主要组成部分构成:\",\"一、用户: 在系统中代表具体个体的实体，可以是人员、程序或其他实体。用户需要访问系统资源\",\"二、角色: 角色是权限的集合，用于定义一组相似权限的集合。角色可以被赋予给用户，从而授予用户相应的权限\",\"三、权限: 权限表示系统中具体的操作或功能，例如读取、写入、执行等。每个权限定义了对系统资源的访问规则\",\"四、用户-角色映射: 用户-角色映射用于表示用户与角色之间的关系。通过为用户分配适当的角色，用户可以获得与角色相关联的权限\",\"五、角色-权限映射: 角色-权限映射表示角色与权限之间的关系。每个角色都被分配了一组权限，这些权限决定了角色可执行的操作\",\"上面的我们学习了 '认证' 和 '授权'，实现了基本的权限管理，然后也学习了从数据库获取授权的 '授权-RBAC权限模型'，实现了从数据库获取用户具备的权限字符串。到此，我们完整地实现了权限管理的功能。\",\"但是，当认证或授权出现报错时，我们希望响应回来的json数据有实体类的code、msg、data这三个字段，怎么实现呢\",\"我们需要学习Spring Security的异常处理机制，就可以在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理\",\"img\",\"在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到，如上图。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常，其中有如下两种情况\",\"一、如果是认证过程中出现的异常会被封装成AuthenticationException然后调用AuthenticationEntryPoint对象的方法去进行异常处理。\",\"二、如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用AccessDeniedHandler对象的方法去进行异常处理。\",\"总结: 如果我们需要自定义异常处理，我们只需要创建AuthenticationEntryPoint和AccessDeniedHandler的实现类对象，然后配置给SpringSecurity即可\"]},\"631\":{\"h\":\"1.一些其他的过滤器\",\"t\":[\"'登录成功的处理器' AuthenticationSuccessHandler\",\"failureHandler表示 '登录认证失败的处理器'\",\"LogoutSuccessHandlerr '登出成功的处理器'\",\"这三个处理器，然后在config再一配就行\"]},\"632\":{\"h\":\"2.以前没这么用过，postman测\",\"t\":[\"由于 HttpServletRequest 和 HttpServletResponse 对象是局部对象，它们的作用域仅限于当前请求的处理过程中。一旦请求处理完成，这些对象将被销毁。\",\"需要注意的是，虽然 HttpServletRequest 和 HttpServletResponse 对象是局部的，但您可以在Servlet中将它们传递给其他方法或对象，以便在请求处理过程中共享和操作它们的内容。\",\" //WebUtils是我们在utils目录写好的类 WebUtils.renderString(response,json); ---------------------- public static String renderString(HttpServletResponse response, String string) { try{ response.setStatus(200); response.setContentType(\\\"application/json\\\"); response.setCharacterEncoding(\\\"utf-8\\\"); response.getWriter().print(string); } catch (IOException e){ e.printStackTrace(); } return null; } \"]},\"633\":{\"h\":\"Interview\",\"t\":[\"从你接触 Java 开发到现在，你对 Java 最直观的印象是什么呢？是它宣传的 “Write once, run anywhere”，还是目前看已经有些过于形式主义的语法呢？你对于 Java 平台到底了解到什么程度？请你先停下来总结思考一下。\",\"今天我要问你的问题是，谈谈你对 Java 平台的理解？“Java 是解释执行”，这句话正确吗？\"]},\"634\":{\"h\":\"典型回答\",\"t\":[\"Java 本身是一种面向对象的语言，最显著的特性有两个方面，一是所谓的“书写一次，到处运行”（Write once, run anywhere），能够非常容易地获得跨平台能力；另外就是垃圾收集（GC, Garbage Collection），Java 通过垃圾收集器（Garbage Collector）回收分配内存，大部分情况下，程序员不需要自己操心内存的分配和回收。\",\"对于“Java 是解释执行”这句话，这个说法不太准确。我们开发的 Java 的源代码，首先通过 Javac 编译成为字节码（bytecode），然后，在运行时，通过 Java 虚拟机（JVM）内嵌的解释器将字节码转换成为最终的机器码。但是常见的 JVM，比如我们大多数情况使用的 Oracle JDK 提供的 Hotspot JVM，都提供了 JIT（Just-In-Time）编译器，也就是通常所说的动态编译器，JIT 能够在运行时将热点代码编译成机器码，这种情况下部分热点代码就属于编译执行，而不是解释执行了。\"]},\"635\":{\"h\":\"知识扩展\",\"t\":[\"编译 Java 源码生成“.class”文件里面实际是字节码，而不是可以直接执行的机器码\",\"在运行时，JVM 会通过类加载器（Class-Loader）加载字节码，解释或者编译执行。就像我前面提到的，主流 Java 版本中，如 JDK 8 实际是解释和编译混合的一种模式，即所谓的混合模式（-Xmixed）。\",\"Java 虚拟机启动时，可以指定不同的参数对运行模式进行选择。 比如，指定“-Xint”，就是告诉 JVM 只进行解释执行，不对代码进行编译，这种模式抛弃了 JIT 可能带来的性能优势。毕竟解释器（interpreter）是逐条读入，逐条解释运行的。与其相对应的，还有一个“-Xcomp”参数，这是告诉 JVM 关闭解释器，不要进行解释执行，或者叫作最大优化级别。那你可能会问这种模式是不是最高效啊？简单说，还真未必。“-Xcomp”会导致 JVM 启动变慢非常多，同时有些 JIT 编译器优化方式，比如分支预测，如果不进行 profiling，往往并不能进行有效优化。\",\"在 Java 语言中，除了原始数据类型的变量，其他所有都是所谓的引用类型，指向各种不同的对象，理解引用对于掌握 Java 对象生命周期和 JVM 内部相关机制非常有帮助。\",\"今天我要问你的问题是，强引用、软引用、弱引用、幻象引用有什么区别？具体使用场景是什么？\"]},\"636\":{\"h\":\"典型回答\",\"t\":[\"不同的引用类型，主要体现的是对象不同的可达性（reachable）状态和对垃圾收集的影响。\",\"所谓强引用（“Strong” Reference），就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略。\",\"软引用（SoftReference），是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。\",\"弱引用（WeakReference）并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系，比如，维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重现实例化。它同样是很多缓存实现的选择。\",\"对于幻象引用，有时候也翻译成虚引用，你不能通过它访问对象。幻象引用仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制，我在专栏上一讲中介绍的 Java 平台自身 Cleaner 机制等，也有人利用幻象引用监控对象的创建和销毁。\"]},\"637\":{\"h\":\"考点分析\",\"t\":[\"这道面试题，属于既偏门又非常高频的一道题目。说它偏门，是因为在大多数应用开发中，很少直接操作各种不同引用，虽然我们使用的类库、框架可能利用了其机制。它被频繁问到，是因为这是一个综合性的题目，既考察了我们对基础概念的理解，也考察了对底层对象生命周期、垃圾收集机制等的掌握。\",\"充分理解这些引用，对于我们设计可靠的缓存等框架，或者诊断应用 OOM 等问题，会很有帮助。比如，诊断 MySQL connector-j 驱动在特定模式下（useCompression=true）的内存泄漏问题，就需要我们理解怎么排查幻象引用的堆积问题。\",\"编程语言通常有各种不同的分类角度，动态类型和静态类型就是其中一种分类角度，简单区分就是语言类型信息是在运行时检查，还是编译期检查。\",\"与其近似的还有一个对比，就是所谓强类型和弱类型，就是不同类型变量赋值时，是否需要显式地（强制）进行类型转换。\",\"那么，如何分类Java语言呢？通常认为，Java是静态的强类型语言，但是因为提供了类似反射等机制，也具备了部分动态类型语言的能力。\",\"言归正传，今天我要问你的问题是，谈谈Java反射机制，动态代理是基于什么原理？\"]},\"638\":{\"h\":\"典型回答\",\"t\":[\"反射机制是Java语言提供的一种基础功能，赋予程序在运行时自省（introspect，官方用语）的能力。通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类声明的属性和方法，调用方法或者构造对象，甚至可以运行时修改类定义。\",\"动态代理是一种方便运行时动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做到的，比如用来包装RPC调用、面向切面的编程（AOP）。\",\"实现动态代理的方式很多，比如JDK自身提供的动态代理，就是主要利用了上面提到的反射机制。还有其他的实现方式，比如利用传说中更高性能的字节码操作机制，类似ASM、cglib（基于ASM）、Javassist等。\"]},\"639\":{\"h\":\"考点分析\",\"t\":[\"这个题目给我的第一印象是稍微有点诱导的嫌疑，可能会下意识地以为动态代理就是利用反射机制实现的，这么说也不算错但稍微有些不全面。功能才是目的，实现的方法有很多。总的来说，这道题目考察的是Java语言的另外一种基础机制： 反射，它就像是一种魔法，引入运行时自省能力，赋予了Java语言令人意外的活力，通过运行时操作元数据或对象，Java可以灵活地操作运行时才能确定的信息。而动态代理，则是延伸出来的一种广泛应用于产品开发中的技术，很多繁琐的重复编程，都可以被动态代理机制优雅地解决。\",\"从考察知识点的角度，这道题涉及的知识点比较庞杂，所以面试官能够扩展或者深挖的内容非常多，比如：\",\"考察你对反射机制的了解和掌握程度。\",\"动态代理解决了什么问题，在你业务系统中的应用场景是什么？\",\"JDK动态代理在设计和实现上与cglib等方式有什么不同，进而如何取舍？\",\"这些考点似乎不是短短一篇文章能够囊括的，我会在知识扩展部分尽量梳理一下。\",\"XD：JavaGuide 泛型擦除中，就是用动态代理验证的！\"]},\"640\":{\"h\":\"知识扩展\",\"t\":[\"动态代理\",\"前面的问题问到了动态代理，我们一起看看，它到底是解决什么问题？\",\"首先，它是一个代理机制。如果熟悉设计模式中的代理模式，我们会知道，代理可以看作是对调用目标的一个包装，这样我们对目标代码的调用不是直接发生的，而是通过代理完成。其实很多动态代理场景，我认为也可以看作是装饰器（Decorator）模式的应用，我会在后面的专栏设计模式主题予以补充。\",\"通过代理可以让调用者与实现者之间解耦。比如进行RPC调用，框架内部的寻址、序列化、反序列化等，对于调用者往往是没有太大意义的，通过代理，可以提供更加友善的界面。\",\"我在之前两讲介绍了Java集合框架的典型容器类，它们绝大部分都不是线程安全的，仅有的线程安全实现，比如Vector、Stack，在性能方面也远不尽如人意。幸好Java语言提供了并发包（java.util.concurrent），为高度并发需求提供了更加全面的工具支持。\",\"今天我要问你的问题是，如何保证容器是线程安全的？ConcurrentHashMap如何实现高效地线程安全？\"]},\"641\":{\"h\":\"典型回答\",\"t\":[\"Java提供了不同层面的线程安全支持。在传统集合框架内部，除了Hashtable等同步容器，还提供了所谓的同步包装器（Synchronized Wrapper），我们可以调用Collections工具类提供的包装方法，来获取一个同步的包装容器（如Collections.synchronizedMap），但是它们都是利用非常粗粒度的同步方式，在高并发情况下，性能比较低下。\",\"另外，更加普遍的选择是利用并发包提供的线程安全容器类，它提供了：\",\"各种并发容器，比如ConcurrentHashMap、CopyOnWriteArrayList。\",\"各种线程安全队列（Queue/Deque），如ArrayBlockingQueue、SynchronousQueue。\",\"各种有序容器的线程安全版本等。\",\"具体保证线程安全的方式，包括有从简单的synchronize方式，到基于更加精细化的，比如基于分离锁实现的ConcurrentHashMap等并发实现等。具体选择要看开发的场景需求，总体来说，并发包内提供的容器通用场景，远优于早期的简单同步实现。\"]},\"642\":{\"h\":\"javaSE\",\"t\":[\"建议再优化目录，把自己总结的 / 康师傅的 分起\",\"TOC--MD内容表\",\"Table Of Contents (目录)\",\"Java 集合框架概览\",\"Java 集合框架概览\",\"ArrayDeque 双端队列是后出的API，LeetCode常用当模拟栈、队列\"]},\"643\":{\"h\":\"* for (int j = 0; j < 100_0000; j++) 其中100_0000是什么\",\"t\":[\"for (int j = 0; j < 100_0000; j++) 可以等同于 for (int j = 0; j < 1000000; j++)，都表示循环从0到999999的范围。\",\"下划线的存在只是为了提高代码的可读性，使数字更易于理解和识别。\"]},\"644\":{\"h\":\"* i++ 字节码三步，不是原子性\",\"t\":[\"iload iadd istore\",\"联想单例的实例变量+volitile 原因，也是因为原子性才加！\"]},\"645\":{\"h\":\"* ArrayList可以在循环时删除里面的数据吗😡TODO\",\"t\":[\"for删会有问题，要用迭代器删 为什么？？？\",\"在使用 ArrayList 进行循环时，如果尝试在循环过程中直接删除其中的元素，可能会导致出现问题。\",\"当你使用 ArrayList 的 remove() 方法删除元素时，会改变列表的大小。这会影响到后续的循环迭代，可能导致一些元素被跳过或重复处理。这是因为在删除元素后，后续元素的索引会向前移动，但循环变量可能不会相应地更新。\"]},\"646\":{\"h\":\"\",\"t\":[\"才发现成员变量不能 Ait + Enter 生成（必须从左到右写好），局部变量可以。\",\"image-20220901002801554\",\"原因：\",\"Unexpected token的问题在于，在Java中的class下只能进行方法，以及变量等\",\"1.定义方法\",\"2.定义变量\",\"3.在定义变量的同时对变量赋值（同一行）\",\"注意：\",\"class下不能进行逻辑语句的书写，也不能对已经定义的变量进行赋值操作\",\"public class People { int m = 10,n; //应该把这些代码定义在一个方法里面 n = 200; //Unexpected token if(){} //Unexpected token } \"]},\"647\":{\"h\":\"* Long 类型比较\",\"t\":[\"如果 == 比较就必须要是 -128 到 127 才相等，有个 private static class LongCache 内部类，其它包装类型也一样\",\"Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，Character 创建了数值在 [0,127] 范围的缓存数据，Boolean 直接返回 True or False。\",\"Long a = 153434L, b =153434L; System.out.println(a==b); //false \"]},\"648\":{\"h\":\"\",\"t\":[\"1）在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。此外，补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路。\",\"反码解决 减法\",\"1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0\",\"补码解决 +-0 【0用[0000 0000]表示，-0即[1000 0000]表示-128】\",\"1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原\",\"2）对于两个 int 类型的数相加，如果它们的和超过了 int 类型的最大值，则会发生精度溢出。如果最后的结果还要 /2 可以使用无符号右移解决 我的理解：想象一下两个二进制位相加，溢出也是顶多溢出最高位符号位一位bit。此时 >>> 刚好能解决！ 【XD： 妙啊！数学的思想】\",\"int mid = (left + right) / 2;（精度溢出）\",\"int mid = left + (right - left) / 2;（✔）\",\"int mid = (low + high) >>> 1;（✔）\",\"3）一个字节129存不下的，底层是有符号的二进制数来存储的，它是一个环，所以129前面应该是-128，-128前面是，-127。所以答案就是-127。或者算出补码也可得到解\",\"！！！呼应题目，除了0特殊外。关注负数为补码形式!!!\",\"byte b = (byte)129; //-127 //byte range：-128 ~ 127 //127：0111 1111 //128：1000 0000 （-128） //129：1000 0001 =》（即二进制的10000001在补码表示中解释为-127） \"]},\"649\":{\"h\":\"* return 碰上 finally\",\"t\":[\"一旦在finally块中使用了return或throw语句，将会导致try块，catch块中的return，throw语句失效\",\"摘自《疯狂Java 讲义》（第三版）P366\"]},\"650\":{\"h\":\"* join & yield\",\"t\":[\"在 Java 中，yield() 方法不会显式释放锁资源。它只会让当前线程从运行状态转变为就绪状态，并让出 CPU 时间片给其他线程。但是，线程在就绪状态时仍然持有其所拥有的锁资源。\",\"join() 方法也不会显式释放锁资源。它只会让当前线程等待被调用的线程执行完毕，但是不会释放当前线程持有的锁资源。 thread.Join把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。比如在线程B中调用了线程A的Join()方法，直到线程A执行完毕后，才会继续执行线程B。\",\"public static void main(String[] args) throws InterruptedException { Thread thread1 = new MyThread(\\\"Thread 1\\\"); Thread thread2 = new MyThread(\\\"Thread 2\\\"); thread1.start(); thread2.start(); // 使用 yield() 方法暂停当前线程，让其他线程有机会执行 Thread.yield(); // 使用 join() 方法等待 thread1 和 thread2 执行完毕 thread1.join(); thread2.join(); System.out.println(\\\"All threads have finished execution.\\\"); } \"]},\"651\":{\"h\":\"* Map接口和Collection接口是同一等级的\"},\"652\":{\"h\":\"* 重载只看参数列表\",\"t\":[\"重载是在同一个类中，有多个方法名相同，参数列表不同(参数个数不同，参数类型不同),与方法的返回值无关，与权限修饰符无关\"]},\"653\":{\"h\":\"* 赋值运算有返回值\",\"t\":[\"Java跟C的区别，C中赋值后会与0进行比较，如果大于0，就认为是true；而Java不会与0比较，而是直接把赋值后的结果放入括号。\",\"int a; System.out.println(a=1); //1 \"]},\"654\":{\"h\":\"* is-a &&\"},\"655\":{\"h\":\"\",\"t\":[\"**是a：A Is B：A是B（继承关系，继承）。**假设你确定两件对象之间是is-a的关系，那么此时你应该使用继承。比方菱形、圆形和方形都是形状的一种。那么他们都应该从形状类继承。\"]},\"656\":{\"h\":\"\",\"t\":[\"**有a：A has B：A有B（从属关系，聚合）。**假设你确定两件对象之间是has-a的关系，那么此时你应该使用聚合。比方电脑是由显示器、CPU、硬盘等组成的。那么你应该把显示器、CPU、硬盘这些类聚合成电脑类。\"]},\"657\":{\"h\":\"\",\"t\":[\"**像a：A like B：A像B（组合关系，接口）。**假设你确定两件对象之间是like-a的关系，那么此时你应该使用组合。比方空调继承于制冷机，但它同一时候有加热功能。那么你应该把让空调继承制冷机类，并实现加热接\",\"抽象类与其派生类是一种“is-a”关系，即父类和派生子类在概念上的本质是相同的（父子关系，血缘联系，很亲密）。\",\"接口与其实现类是一种“like-a”关系，即接口与实现类的关系只是实现了定义的行为，并无本质上的联系（契约关系，很淡漠的利益关系）。\",\"举个例子：比如说一个动物抽象类，定义了跑的方法、叫的方法，但如果一个汽车类可以实现跑、可以实现叫，它就可以继承动物抽象类吗？！这太不合理了，汽车不是动物呀！而如果通过接口定义跑的方法、叫的方法，汽车类作为实现类实现跑和叫，完全OK很合理，就因为没有继承关系的约束。\"]},\"658\":{\"h\":\"* &\",\"t\":[\"public class B { public static B t1 = new B(); //1 public static B t2 = new B(); //2 { System.out.println(\\\"构造块\\\"); } static { System.out.println(\\\"静态块\\\"); //3 } public static void main(String[] args) { B t = new B(); //4 } } \",\"之前我一直有一个误区!就是认为静态块一定是最先初始化的!但是,阿里爸爸今天又用一记重拳猛击我的脸,额,好疼....当时的情况是这样的:\",\"我在牛客网找虐中,碰到了这样的一道题,心中充满了鄙夷,心想\\\"这tm还用看吗,肯定先是静态块,再接着三个构造块,弱鸡题\\\",但是 = = ,答案却是\\\"构造块 构造块 静态块 构造块\\\".\",\"......[黑线|||||||||]\",\"于是总结了一下,以警后世 - -\",\"正确的理解是这样的:\",\"并不是静态块最先初始化,而是静态域.(BM：啊!多么痛的领悟!)\",\"而静态域中包含静态变量、静态块和静态方法,其中需要初始化的是静态变量和静态块.而他们两个的初始化顺序是靠他们俩的位置决定的!\",\"So！\",\"初始化顺序是 t1 t2 静态块\",\"再来一道：\",\"public class Test { public static Test t1 = new Test(); //1 { System.out.println(\\\"blockA\\\"); } static { System.out.println(\\\"blockB\\\"); //2 } public static void main(String[] args) { Test t2 = new Test(); //3 } } \",\"blockAblockBblockA\",\"总结：\",\"(1) 父类静态对象和静态代码块\",\"(2) 子类静态对象和静态代码块\",\"(3) 父类非静态对象和非静态代码块 【例如下面的Father.class先（3）再（2）】\",\"(4) 父类构造函数（声明肯定都先于构造器，XD：才能拿变量名赋值）\",\"① 默认初始化\",\"② 显式初始化 / 代码块\",\"③ 构造器中初始化\",\"(5) 子类 非静态对象和非静态代码块\",\"(6) 子类构造函数\",\"终结版练习：\",\"字节码 <clinit> <init> 方法 CL 代表 class 有几个构造器就有几个<init>方法\",\"super 写或者不写都有 （注：代码块里的变量、形参都是局部变量）\",\"/** * 父类初始化<clinit> * 1、j = method() * 2、 父类的静态代码块 * * 父类实例化方法: * 1、super()（最前） * 2、i = test() (9) * 3、子类的非静态代码块 (3) * 4、子类的无参构造（最后）(2) * * * 非静态方法前面其实有一个默认的对象this * this在构造器或<init> 他表示的是正在创建的对象，因为咱们这里是正在创建Son对象，所以 * test()执行的就是子类重写的代码(面向对象多态) * * 这里i=test() 执行的就是子类重写的test()方法 */ public class Father { private int i = test(); private static int j = method(); static{ System.out.println(\\\"(1)\\\"); } Father() { System.out.println(\\\"(2)\\\"); } { System.out.println(\\\"(3)\\\"); //我主要被这个代码块卡住，其实这块和上面的 int i 同等地位。<inti>() 会执行 } public int test(){ System.out.println(\\\"(4)\\\"); return 1; } public static int method() { System.out.println(\\\"(5)\\\"); return 1; } } ----------------------------------------- /** * 子类的初始化<clinit> * 1、j = method() * 2、子类的静态代码块 * * 先初始化父类 (5)(1) * 初始化子类 (10) (6) * * 子类实例化方法: * 1、super()（最前 * 2、i = test() (9) * 3、子类的非静态代码块 (8) * 4、子类的无参构造（最后）(7) */ public class Son extends Father { private int i = test(); private static int j = method(); static { System.out.println(\\\"(6)\\\"); } Son() { super(); System.out.println(\\\"(7)\\\"); } { System.out.println(\\\"(8)\\\"); } public int test(){ System.out.println(\\\"(9)\\\"); return 1; } public static int method() { System.out.println(\\\"(10)\\\"); return 1; } public static void main(String[] args) { Son son = new Son(); System.out.println(); Son son1 = new Son(); } } \",\"答案：\",\" (5) (1) (10) (6) (9) (3) (2) (9) (8) (7) \\\\n (9) (3) (2) (9) (8) (7) \"]},\"659\":{\"h\":\"* 接口与其实现类\",\"t\":[\"实际上这道题考查的是两同两小一大原则：\",\"方法名相同，参数类型相同\",\"子类返回类型小于等于父类方法返回类型， 子类抛出异常小于等于父类方法抛出异常， 子类访问权限大于等于父类方法访问权限。\"]},\"660\":{\"h\":\"* 四种引用类型\",\"t\":[\"被GCroot强引用=Gcroot对象来说，只要有强引用的存在，它就会一直存在于内存中 如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存 一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的空间 \",\"发现这道题完全没头绪，就去查了一下，感觉说的比较清楚了。\",\"JDK1.2 之前，一个对象只有“已被引用”和\\\"未被引用\\\"两种状态，这将无法描述某些特殊情况下的对象，比如，当内存充足时需要保留，而内存紧张时才需要被抛弃的一类对象。\",\"所以在 JDK.1.2 之后，Java 对引用的概念进行了扩充，将引用分为了：强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4 种，这 4 种引用的强度依次减弱。\",\"一，强引用\",\"Object obj = new Object(); //只要obj还指向Object对象，Object对象就不会被回收 obj = null; //手动置null\",\"只要强引用存在，垃圾回收器将永远不会回收被引用的对象，哪怕内存不足时，JVM也会直接抛出OutOfMemoryError，不会去回收。如果想中断强引用与对象之间的联系，可以显示的将强引用赋值为null，这样一来，JVM就可以适时的回收对象了\",\"二，软引用\",\"软引用是用来描述一些非必需但仍有用的对象。在内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。这种特性常常被用来实现缓存技术，比如网页缓存，图片缓存等。\",\"在 JDK1.2 之后，用java.lang.ref.SoftReference类来表示软引用。\",\"三，弱引用\",\"弱引用的引用强度比软引用要更弱一些，无论内存是否足够，只要 JVM 开始进行垃圾回收，那些被弱引用关联的对象都会被回收。在 JDK1.2 之后，用 java.lang.ref.WeakReference 来表示弱引用。\",\"四，虚引用\",\"虚引用是最弱的一种引用关系，如果一个对象仅持有虚引用，那么它就和没有任何引用一样，它随时可能会被回收，在 JDK1.2 之后，用 PhantomReference 类来表示，通过查看这个类的源码，发现它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 ReferenceQueue 引用队列一起使用。\"]},\"661\":{\"h\":\"* 构造方法\",\"t\":[\"构造方法就是：public 类名， 没有方法修饰符（PS：可以是其它权限修饰符）\",\"public class MyClass { long var; public void MyClass(long param) { var = param; }//(1) 因为用了修饰方法的 void 所以它是一个普通方法！ \"]},\"662\":{\"h\":\"* final 变量\",\"t\":[\"被final修饰的变量是常量，这里的b6=b4+b5可以看成是b6=10；在编译时就已经变为b6=10了\",\"final byte b4=4,b5=6; b6=b4+b5; //在编译时就已经变为b6=10了，编译通过 \",\"D选项，final修饰的变量，变量的引用（地址）是不可变得，但是引用的内容是可变的 梅开二度！\",\"链接：https://www.nowcoder.com/questionTerminal/47ffaf4670384e34a925e294fcd686c0 来源：牛客网 final Student t = new Student(); t.setStuName(\\\"11\\\"); t.setStuNo(1); //不报错 因此final修饰的可以改变属性 再看我们把Teacher类继承Student: final Student t = new Student(); t = new Teacher(); //t编译错误,因此不可以再指向其他对象 \"]},\"663\":{\"h\":\"* 静态变量只能在类主体中定义，不能在方法中定义\"},\"664\":{\"h\":\"* pc寄存器 就是 程序计数器\",\"t\":[\"程序计数器是计算机 处理器 中的 寄存器 ，它包含当前正在执行的指令的地址（位置）。\",\"中文名: 程序计数器\",\"外文名: Program Counter\",\"外语简称: PC\"]},\"665\":{\"h\":\"* 导包\",\"t\":[\"导包只可以导到当前层，不可以再导入包里面的包中的类\",\"java.awt.*是导入java\\\\awt包下所有的类，并不包括其子包下的类。\",\"java.awt.event.*才能导入java\\\\awt\\\\event包下的类。\"]},\"666\":{\"h\":\"* 二维数组命名\",\"t\":[\"二维数组中第一个中括号中必须要有值，它代表的是在该二维数组中有多少个一维数组。\",\"img\",\"注意： float []f[] = new float[6][6]; //这个变量声明方式是对的！\"]},\"667\":{\"h\":\"* 实例对象也可以调用静态方法。(可以通过编译，但是不建议这样用)\",\"t\":[\"static表示类方法，在类加载的时候就完成了，而那时对象还没创建完成，就不能用this\"]},\"668\":{\"h\":\"* 类指外部类的访问修饰符\",\"t\":[\"修饰符有public(表示该类在项目所有类中可以被导入）\",\"default(该类只能在同一个package中使用）\",\"abstract\",\"final\",\"总结：\",\"外部类：public 默认Java外部类不能用private和protected修饰\",\"成员内部类：内部类理解成类的成员，成员有4种访问权限吧，内部类也是\"]},\"669\":{\"h\":\"* interface 修饰符\",\"t\":[\"写酱紫的源代码 ，使用反编译软件可以看到这个源代码编译之后的结果，我们知道，我们不写的修饰符，都会在编译阶段被加上，所以 default 和 abstract 可以修饰接口\"]},\"670\":{\"h\":\"* 值传递 i= i ++;\",\"t\":[\"int i = 0; i= i ++; System.out.println(i); //0 \",\"梅开二度：\",\"链接：https://www.nowcoder.com/questionTerminal/5ce602538d784f51a531bf9760592773 来源：牛客网\",\"for循环外面count=0,循环里面的count=count++;(count的值都等于count值，而后面count自加不影响count结果，因此这个式子无意义);循环count都为0（因count++是先返回count的本身值再自加1的）！而加1的这个temp又没有赋值给别人所以没用上！\",\"count0=count1++的执行步骤： tmp=count1； count1++； count0=tmp； \",\"若是改为count=++count;（先自加，再返回自加后的值），结果就是5050101=510050了！\",\"改为count++;结果就是5050*101=510050了！\"]},\"671\":{\"h\":\"* switch语句中的参数\",\"t\":[\"链接：https://www.nowcoder.com/questionTerminal/70bab9b529ec42ebafd850cd5877dcdd 来源：牛客网\",\"以java8为准，switch支持10种类型\",\"基本类型：byte char short int\",\"对于包装类 ：Byte,Short,Character,Integer String enum\",\"2、实际只支持int类型 Java实际只能支持int类型的switch语句，那其他的类型时如何支持的\",\"a、基本类型byte char short \",\"原因：这些基本数字类型可自动向上转为int, 实际还是用的int。\",\"b、基本类型包装类Byte,Short,Character,Integer\",\"原因：java的自动拆箱机制 可看这些对象自动转为基本类型\",\"c、String 类型 \",\"原因：实际switch比较的string.hashCode值，它是一个int类型 如何实现的，网上例子很多。此处不表。\",\"d、enum类型 \",\"原因 ：实际比较的是enum的ordinal值（表示枚举值的顺序），它也是一个int类型 所以也可以说 switch语句只支持int类型\"]},\"672\":{\"h\":\"* 二分\",\"t\":[\"Java 中的 Arrays 类提供了一个 binarySearch 方法，用于在已排序的数组中进行二分查找。\"]},\"673\":{\"h\":\"* Map 通过匿名内部类方式初始化会有内存泄漏问题\"},\"674\":{\"h\":\"* ConcurrentHashMap 1.7 vs 1.8\",\"t\":[\"jdk1.7 数组+链表，分段锁内部类 class Segment<K,V> extends ReentrantLock\",\"锁粒度包含多个节点 HashEntry\",\"jdk1.8 数组+链表+红黑树，CAS+Synchronized\",\"锁粒度锁单节点 Node\",\"使用内選锁 Synchronized 代替重入锁 ReentrantLock, Synchronized 是官方一直在不断优化的，现在\",\"性能已经比较可观，也是官方推荐使用的加锁方式。\"]},\"675\":{\"h\":\"* 并发和并行有什么区别？\",\"t\":[\"并发：两个或多个事件在同一时间间隔发生。\",\"并行：两个或者多个事件在同一时刻发生。\",\"并行是真正意义上，同一时刻做多件事情，而并发在同一时刻只会做一件事件，只是可以将时间切碎，交替做多件事情。\",\"网上有个例子挺形象的：\",\"你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。\",\"你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。\",\"你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。\"]},\"676\":{\"h\":\"* 线程状态\",\"t\":[\"41DA09DA-D781-4531-A6AF-6CA0B218112D_1_101_o\"]},\"677\":{\"h\":\"\",\"t\":[\"java中ArrayDeque和Stack类哪个用来实现栈方便一些\",\"ArrayDeque更加方便实现栈，它具有更好的性能、更多的功能和更好的代码风格。因此，在实际开发中，推荐使用ArrayDeque来实现栈的功能。 Stack是较早版本的类\",\"https://oss.javaguide.cn/github/javaguide/java/collection/java-collection-hierarchy.png\"]},\"678\":{\"h\":\"* 谈一谈你对面向对象的理解\",\"t\":[\"面向过程让计算机有步骤地顺序做一件事，是过程化思维，使用面向过程语言开发大型项目，软件复用和维护存在很大问题，模块之间耦合严重。\",\"面向对象相对面向过程更适合解决规模较大的问题，可以拆解问题复杂度，对现实事物进行抽象并映射为开发对象，更接近人的思维。\",\"例如开门这个动作，面向过程是 open（Door door），动宾结构，door 作为操作对象的参数传入方法，方法内定义开门的具体步骤。面向对象的方式首先会定义一个类 Door，抽象出门的属性（如尺寸、颜色）和行为（如open 和 close），主谓结构。\",\"面向过程代码松散，强调流程化解决问题。面向对象代码强调高内聚、低耦合，先抽象模型定义共性行为，再解决实际问题\"]},\"679\":{\"h\":\"* 类加载具体过程？\",\"t\":[\"类加载是Java虚拟机（JVM）将类的字节码加载到内存中并转换为可执行的Java类的过程。类加载过程包括以下几个步骤：\",\"加载（Loading）：通过类的全限定名（Fully Qualified Name），获取类的字节码数据。字节码可以来自文件、网络、数据库等各种来源。\",\"验证（Verification）：对字节码进行验证，确保其符合Java虚拟机规范。验证过程包括文件格式验证、元数据验证、字节码验证、符号引用验证等。\",\"准备（Preparation）：为类的静态变量分配内存空间，并设置默认初始值。不包括实例变量，实例变量的准备是在对象实例化时进行的。\",\"解析（Resolution）：将类、接口、字段和方法的符号引用转换为直接引用。符号引用包括类或接口的全限定名、字段或方法的名称和描述符等。 \",\"换句话说，符号引用是一种符号化的表示方式，用于描述类、接口、字段或方法的名称和类型等信息，而直接引用是一种具体的内存地址，用于直接访问类、接口、字段或方法在内存中的实际数据。\",\"将字节码文件转换为机器码是在Java虚拟机执行类加载过程中的解析和执行阶段进行的。具体来说，这一步骤是在解析阶段进行的\",\"初始化（Initialization）：执行类的初始化代码，包括静态变量的赋值和静态代码块的执行。在这个阶段，会执行类中的静态初始化器（Static Initializer）。\",\"使用（Usage）：类加载完成后，可以通过创建对象、调用方法等方式使用该类。\",\"需要注意的是，类的加载是按需进行的，即在使用到类时才会进行加载。另外，类加载过程是由Java虚拟机的类加载器（ClassLoader）负责执行的。Java虚拟机提供了三种内建的类加载器：启动类加载器（Bootstrap Class Loader）、扩展类加载器（Extension Class Loader）和应用程序类加载器（Application Class Loader）\",\"类加载器具体看 JVM.md\"]},\"680\":{\"h\":\"#重载和重写\",\"t\":[\"首先他们都是实现多态的方式\",\"然后说一下他们基本的概念\",\"不同点：\",\"重载是编译时多态性，重写是运行时多态性\",\"重载发生在一个类中，重写发生在子类和父类之间\",\"重载不要求返回类型，重写要求返回类型相同\",\"注意点：重写的返回类型不要求完全一样 - 返回类型使用父类的子类\",\"已下这两个不构成重载：\",\"public void getSum(int i,int j)\",\"public int getSum(int i,int j)\"]},\"681\":{\"h\":\"#讲一下 HashMap 的哈希函数怎么实现\",\"t\":[\"（h = key.hashCode()）^ (h >>> 16)，首先调用 hashCode() 方法对 key 求 hash值，然后将hash值的低 16 位bit和高 16 位 bit 做异或运算获得 新的 hash 值，然后 (n - 1) & hash 获得下标 （n 指数组的长度）\",\"为什么要和高16位进行 ^ 运算？\",\"哈希桶的选择是通过对哈希码进行进一步的运算转换得到的。HashMap使用哈希码的高位和低位进行异或运算，以获得一个更均匀的分布。\",\"运算的目的是将哈希码的高位和低位的信息结合起来，使得哈希码的分布更加均匀，减少哈希冲突的概率，并提高查找的效率。\",\"为什么 & 位必须是（length - 1）？\",\"长度是2的幂次，length -1 的所有二进制都是1，相当于 取余数，但是比 % 运算更快， table[i = （n -1）& hash]; XD: 这个可以看Chrome书签 因为 2^n 满足 & 条件\",\"为什么用 ^ 而不是用 & 或 |\",\"因为 & 和 | 都会使结果偏向 0 或者 1,并不是均匀的概念，所以用 ^\"]},\"682\":{\"h\":\"#然后讲一下 hashmap 线程并发安全问题\",\"t\":[\"多个线程同时 put ， 当 put 的 key 一样造成一个线程 put 的数据被覆盖\",\"多个线程同时检测到元素个数超过数组大小 * loadFactor, 同时对Node 数组 进行扩容，都重新计算元素位置和复制数据，最终只有一个线程扩容后的数据会复制成功，其他线程丢失，并且 put 的数据也丢失。\",\"链表和红黑树转换的时候会抛出类型转化异常：两个线程同时将红黑树转换成链表，一个线程转换成功，红黑树变成链表了，另一个线程开始转换就会发现红黑树变成了链表，就会抛出类型转化异常。\"]},\"683\":{\"h\":\"#说一下java对象中的对象拷贝？\",\"t\":[\"浅拷贝：拷贝对象时，对基本数据类型进行拷贝，而引用数据类型只进行了引用地址的传递，没有创建新对象\",\"深拷贝：引用数据类型拷贝创建了新的对象，并复制其内的成员变量\",\"ps: clone() 是浅拷贝\",\"如何进行深拷贝：\",\"方法一：\",\"对应的引用类型class也实现了cloneable接口\",\"对当前对象 clone（），对其内部的引用类型再一次clone（）\",\"public class User implements Cloneable { private String name; private Address address; // constructors, getters and setters @Override public User clone() throws CloneNotSupportedException { User user = (User) super.clone(); user.setAddress(this.address.clone()); return user; } } //name 不可变性所以没关系，original的改变不会影响deepCopy \",\"方法二：\",\"序列化这个对象，再反序列化回来就是一个新对象\"]},\"684\":{\"h\":\"Java基本语法\"},\"685\":{\"h\":\"一、基础类型\",\"t\":[\"容量小->容量大: byte、short、char、< int < long < float < double 难点： 1. float表示的范围比long大原因是，float与long在内存中的存储方式不一样。 2. 至于为什么 Java 中 char无论中英文数字都占用2字节，是因为 Java 中使用 Unicode 字符，所有字符均以2个字节存储。 而如果需要识别字符是否为中文，可以使用正则匹配式。 3. char c = ''; //编译不通过 4. char + int = int \",\"3.之所以不通过：String底层char[]数组长度为0个，而这里是1个char 所以必须指定内容\",\"String可以和boolean拼接\",\"注意：char对应一个ASCII码两个char相加就是ASCII码相加\",\"short s = 5; s = s-2;//不能通过编译，因为2是int，所以要用int接收\",\"计算机底层都以补码的方式来存储数据，运算的（关注负数就行，因为正数补码是本身）！\",\"原码才可以对应为正常的整数，补码只有转换为原码才能被正常人类识别。（~...）\",\"公式-n=n+1可推出n=-n-1\",\" int a = 12,b = 5; double c = a / b; double d = a / (b+0.0); System.out.println(c+\\\"\\\\t\\\"+d); //2.0 2.4 注意这个2.0！！！ \",\" short s1 = 10; s1 ++;//自增1不会改变本身变量的数据类型 \",\"&|这两个符号既可以是逻辑运算符又可以是位运算符，取决于它的运算类型\",\"【面试题】 你能否写出最高效的2 * 8的实现方式？ 答案： 2<<3或8<<1\",\"注意：位运算符操作的都是整型的数据\",\"强转要带括号：(char)(ans01-10+'A') 前面这个char要用括号包起来\",\" 题目: 如何求一个0-255范围内的整数的十六进制值，例如60 //要求手动实现 十六进制表示形式3C. //分析：0-255 8位所以只关注后面8位就行，且按规则每4位组一个数 //15的二进制数是1111 所以取这个数的后四位就是&15 这是关键***** 【每个十六进制位对应4个二进制位】 int n = 60; int ans01 = n & 15; String s1 = ans01 > 9 ? (char)(ans01-10+'A')+\\\"\\\" : ans01+\\\"\\\"; ans01= n >>> 4 & 15; String s2 = ans01 > 9 ? (char)(ans01-10+'A')+\\\"\\\" : ans01+\\\"\\\"; System.out.println(s2+s1);//3C \",\"需掌握两个排序：\",\"冒泡 O(n^2) 简单\",\"快排 O(nlogn) 用的多\",\"​\"]},\"686\":{\"h\":\"面向对象\",\"t\":[\"以下是我不熟的知识点：\",\"变量分为属性（成员变量） vs 局部变量\",\"属性可以用权限修饰符，局部变量不能！\",\"局部变量要先赋值再用，成员变量有默认的属性值\",\"默认初始化值的情况：\",\"​ 属性：类的属性，根据其类型，都有默认初始化值。\",\"整型（byte、short、int、long）：0 浮点型（float、double）：0.0 字符型（char）：0 （或'\\\\u0000'） 布尔型（boolean）：false 引用数据类型（类、数组、接口）：null \",\"​ 局部变量：没有默认初始化值。\",\"意味着，我们在调用局部变量之前，一定要显式赋值。 特别地：形参在调用时，我们赋值即可。 \",\"属性的赋值顺序：\",\" 1. 默认初始化 2. 显示初始化/代码块 3. 构造器 4. 对象.属性 对象.方法 \",\"在内存中加载的位置：\",\" 属性：加载到堆空间中 （非static） 局部变量：加载到栈空间 \",\"要能手写单例模式（饿汉（线程安全）、懒汉（线程不安全））\",\"抽象、接口（自己的理解）：\",\"共同点：1）不能实例化 2）可包含抽象方法 3）都可以由默认实现 default\",\"不同点：\",\"​ 语法方面 1）单继承多实现 2）接口成员变量只能 public static final\",\"​ 设计方面 1）接口用于对类的行为进行约束，抽象类用于代码复用强调所属关系【接口是“有没有”，集成是“是不是”】 ​ 2）接口是一种行为规范，辐射式设计，有没有，是一种自顶向下的设计。抽象类是一种模板式设计，是自底向上的。\",\" 抽象和接口用到多态，因为它们不能实例化（new）。 例如：Employee x = new Manager(); 既然不能new的话就通过多态，如上Employee这个抽象类就可以用属于自己的属性和方法。 一般多态体现在方法的形参上。一般形参申明为父类，实际传子类对象，这样父类和子类都可以穿。 注意抽象类是能继承非抽象类的（默认继承Object） 接口是多继承的！ 接口不能定义构造器！抽象类可以！ 接口属性默认：public static final 方法默认：public abstract 接口默认为public abstract，所以接口的修饰符可以为abstract //XD 2023/12/13 接口中可以有static default方法 jdk8接口除了可以定义全局常量和抽象方法外，还可以定义静态方法和默认方法（这两个有方法体），如下： 注意默认还是public！！！ static void a() { //接口中的静态方法只能接口来调，实现类是掉不了这个a方法的。 【不要想复杂了，就和平时一样静态方法属于类 这里属于接口】 //有点像工具类靠，换句话说接口越来越像类了例如Collection } default void b() { } ！！！ 有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。 \",\"jdk1.8，接口是否可以实现default的方法 \",\"这块只记得可以，然后面试官讲了一下为什么可以，主要是为了在后续的开发中如果扩展接口的功能，同时还可以兼容以前的实现类。\",\"XD 2023/12/26 补充：接口的default方法作用：\",\"在 Java 8 之前，一旦一个接口被定义并被实现类实现，就无法在接口中添加新的方法，因为这将导致所有实现类都需要修改以实现新的方法。这对于已经发布并广泛使用的接口来说是一个严重的限制，因为它违背了面向对象设计中的开闭原则（Open-Closed Principle），即对扩展开放，对修改关闭。\",\"通过引入接口的默认方法，可以在接口中添加新的方法并提供默认实现，这样现有的实现类可以继续使用默认实现，而不需要对它们进行修改。如果实现类需要覆盖默认方法，它们可以选择重写默认方法以提供自定义的实现。这种方式保证了现有的实现类与新版本的接口兼容，同时还允许实现类选择性地适应新的接口功能。\",\"匿名对象（自己的理解）：\",\" 目的：图省事，只用一次。可以lambda \",\"开闭原则（对扩展开放，对修改封闭）\",\"因为Integer作为常量时，对于-128到127之间的数，会进行缓存，也就是说int a1 = 127时,在范围之内，这个时候就存放在缓存中，当再创建a2时，java发现缓存中存在127这个数了，就直接取出来赋值给a2，所以a1 == a2的。当超过范围就是new Integer()来new一个对象了，所以a、b都是new Integer(128)出来的变量，所以它们不等。 首先这是JDK在1.5版本中添加的一项新特性，把-128~127的数字缓存起来了，用于提升性能和节省内存。所以这个范围内的自动装箱（相当于调用valueOf(int i)方法）的数字都会从缓存中获取，返回同一个数字，所以现在你理解为什么了吧。同时这也会给我们开发带来预想不到的陷阱，直得注意！！ 后来： * Integer i = 10 等价于 Integer i = Integer.value0f(10) ###装箱 * int n = i 等价于 int n = i.intValue(); ###拆箱 基本数据类型不能拥有面向对象的好处，包装类可以。。。 1）基本数据类型都有默认值，而包装类可以是 null 更加符合业务！！！ 2）包装类型可用于泛型，而基本类型不可以 对Integer的缓存，我们在日常开发时，对于小的整型值应该充分利用Integer的缓存对象省去过多的对象创建，回收的操作，这样会极大的提高程序性能 \",\"笔试题\",\" interface A { int x = 0; } class B { int x = 1; } class C { public static void main(String[] args) { System.out.println(super(x)); System.out.println(A.x);//要记得接口的属性默认为：public static final } } ------------------------以上error------------------------- //下面才是正确的写法，注意super！！！（super是指向父类的引用） interface A { int x = 0; } class B { int x = 1; } class Solution extends B implements A { public void pX() { System.out.println(super.x); System.out.println(A.x); } public static void main(String[] args) { new Solution().pX(); } } \",\"内部类：\",\" person中有brain（大脑）如果我放外面那就和person平级了别的地方又用不到，但是brain用String这种又差点意思，所有有了内部类。 内部类：成员内部类 vs 局部内部类 一般看源码会出现，实际开发少。 \",\"异常：\",\"补充：IOException 是 Java 中的一个受检异常（checked exception），这意味着在编译时编译器会强制要求对其进行处理或声明。 XD: 后来补充-SQLException也是（checked exception）\",\"搞清楚 checked exception 是必须要 try-catch 的不然报错不准运行！\",\" 要写出常见的异常 try/catch try抛出 发现这条语句有异常，跳对应的catch中处理，那条有异常的语句后面的代码就不会再执行了！！！ catch处理完后继续往下运行。 注意catch一般都是细致的异常写前面，大的写后面（Exception） 编译时的异常用try/catch包起来就不会爆红了，但运行时依旧是错的，相当于把编译时的可能出现的异常，延迟到运行时出现。 为什么需要finally：因为像数据库连接，IO流，socket网络编程等资源JVM是无法自动回收的，我们需要手动进行资源释放，所以要放finally（finally是无论是否发生异常代码总会执行的！） 自己后面补充(不知道对不对) ---> 关闭资源为什么不写到catch里面：因为catch里如果又发生异常了又会产生一样的场景 一般try/catch/finally是针对编译时异常使用。 要保证资源的关闭，所以不能用throws 在每一个可能返回(return)的地方，以及每一个可能出现异常而导致程序跳转的地方，程序员不得不考虑如何释放资源，导致复杂和冗余。所以，需要finally语句。把资源释放或状态还原的代码放到finally块中，可以保证在try和catch语句执行完后，一定会执行finally语句块，而不用考虑各种复杂的跳转情况。 //代码1 public static void test() throws Exception { throw new Exception(\\\"参数越界\\\"); System.out.println(\\\"异常后\\\"); //编译错误，「无法访问的语句，不可达代码」 } //代码2 try{ throw new Exception(\\\"参数越界\\\"); }catch(Exception e) { e.printStackTrace(); } System.out.println(\\\"异常后\\\");//可以执行 //代码3 if(true) { throw new Exception(\\\"参数越界\\\"); } System.out.println(\\\"异常后\\\"); //抛出异常，不会执行 可以自定义异常类：三步，模仿API的异常类 1、继承Exception/RuntimeException 2、序列化 3、调构造方法super() \",\"一些小点：\",\"位运算 是公认的 高效运算，在高频计算中，可以使用位运算替换一般简单的乘除法来提升系统性能。 位运算比直接的乘除法 在效率上 提升了 不止一个数量级，这是非常可观的。 \"]},\"687\":{\"h\":\"Java高级部分\",\"t\":[\"多线程\",\"自己的理解： 程序：一段静态代码 进程：程序放内存中跑起来运行了 线程：比如360可以杀毒，清理垃圾等同时进行 一个java程序跑起来至少有3个线程：1. main 主线程 2. GC垃圾回收线程 3. 异常处理线程 跑一个线程有4步：1. 写一个类继承Thread 2. 重写Thread的run方法（放自己的业务代码） 3. new出自己写的那个类（Thread类的子类对象） 4. 调这个对象的start()方法：注意不是run() 如果线程只用一次可以考虑用Thread类的匿名子类的方式： new Thread( ()-> System.out.print(); ).start(); 关于同步方法的总结：1. 不需要显示声明同步监视器 2. 非静态同步方法，同步监视器是--->this 3. 静态同步方法，同步监视器是--->当前类本身 yield() join()：在线程a中调用线程b的join()，此时线程a就会进入阻塞状态，直到线程a等线程b全部执行完，结束阻塞状态。 线程的优先级：默认是5，最大是10，最小是1 ------> 概率 创造多线程的方式二: 实现Runnable接口 ------> 具体看api文档，有模板 ------> 开发时优先选择 1. 没有类的单继承局限 2. 更适合处理多个线程有共享数据的情况 wait() notify() notifyAll() 是定义在java.lang.Object类中 sleep()和wait()的异同： 1. sleep()在Thread类中，wait()在Object中 2. sleep()不会释放同步监视器(锁)，wait()会释放同步监视器。 3. wait()必须在同步代码块中使用，sleep()可以在任何场景。 实现线程有四种方式： jdk 5.0加了一个实现callable接口，相对于Runnable的优势： 1. 相比run()方法，可以有返回值 2. 方法可以抛出异常（run()只能try catch） 3. 支持泛型的返回值 4. 需要借助FutureTask类 还有一种线程池 \",\"ps:多线程只是草率的过了一遍，大概了解了里面的东西，但是没有跟着敲代码，对多线程的很多点理解的并不深刻。\",\"java常用类\",\" String 1. final,不可被继承，不可变性！（这个在值传递问题考的多！） 2. 实现了serializable接口，表示字符串是支持序列化的（IO流部分） 3. 实现了comparable接口，表示String可以比较大小。 注意：People p1 = new People(\\\"Tom\\\",1); People p2 = new People(\\\"Tom\\\",2); p1.name == p2.name; //true //因为上面都是以字面量的形式赋值Tom，所以都是指向字符串常量池中的Tom \",\"面试题：String s1 = new String(\\\"abc\\\"); 在内存中创建了几个对象？答：两个：一个堆空间new的，一个char[]对应的常量池中对应的数据\\\"abc\\\"\",\"有空多看看源码\",\" String对象的创建： String s1 = new String(); //本质上 this.value = new char[0]; 1. 常量和常量拼接结果在常量池，且常量池不会存在相同内容的常量。 2. 只要有一个是变量，结果就在堆中（实际内容再从常量池中引） 3. 如果拼接的结果调用intern()方法，返回值就在常量池中 String s1 = \\\"javaEEhadoop\\\"; String s2 = \\\"javaEE\\\"; String s3 = s2 + \\\"hadoop\\\"; //false final String s4 = \\\"javaEE\\\"; String s5 = s4 + \\\"hadoop\\\"; //true utf-8一个字符3个字节，gbk一个汉字2个字节。 byte[] bytes = str.getBytes();//使用默认的字符集进行编码 new String(bytes);//使用默认字符集进行解码 开发中推荐用StringBuffer(容量) //如果知道容量就给，避免反复扩容影响效率 //通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。 String s1 = \\\"javaEE\\\"; String s2 = \\\"javaEE\\\"; //通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。 String s3 = new String(\\\"javaEE\\\"); String s4 = new String(\\\"javaEE\\\"); //一道面试题 ------> String的不可变性 public class StringTest { String str = new String(\\\"good\\\"); char[] ch = { 't', 'e', 's', 't' }; public void change(String str, char ch[]) { str = \\\"test ok\\\"; ch[0] = 'b'; } public static void main(String[] args) { StringTest ex = new StringTest(); ex.change(ex.str, ex.ch); System.out.println(ex.str);//good System.out.println(ex.ch);//best } } \",\"日期类型自己看api学，枚举注解也自己看博客学\"]},\"688\":{\"h\":\"注解\",\"t\":[\"学 RuoYi 补充\",\"我们一般知道，注解是给程序看的，给机器看的，当然也是给程序员看的。注解如果没有注解解析器（注解处理器，注解解释器），那么注解就没有什么作用。所以@Anonyous一定是在某个地方被干嘛干嘛了！\",\"RuoYi 中注解一般头上加了 @Retention(RetentionPolicy.RUNTIME) 方便反射动态拿，然后再做一系列逻辑！\",\"比如：@Log @Anonymous @RateLimiter 都是RuoYi自己写的然后再Services层再反射拿做一系列相应业务\",\"对象比较器\",\" comparable comparator 接口 首先实现comparable的类必须实现comparaTo(),然后就可以通过Arrays.sort或者Collectoins.sort进行自动排序 \",\"集合\",\" for(String a : arr) { a = \\\"hh\\\"; } 注意：这里再重新遍历这个arr数组发现还是没变。 List 1.2 : 有序、可重复 ArrayList 1.2 ------> 线程不安全，效率高 避免扩容，在知道长度的情况下尽量调有参构造器把容量确定好 1.8的源码是在调用add()时才把数组创建好，不然一开始只是一个常量{}。。。这样的好处是延迟了数组的创建，节省内存。类似于单例的懒汉式。 1.7类似单例的饿汉式，一开始声明的时候就给你开辟一个大小为10的空间。 注意remove()有两个，一个是根据下表，一个是根据值 LinkedList 1.2 ------> 双向链表，适合频繁的插入、删除操作 Vector 1.0 ------> 出现的比上面的都早！和List作比较：线程安全，效率低 这个基本不用了，因为ArrayList可以通过工具类Collections的SynchronizedList转成一个线程安全的！！！ set : 无序、不可重复 如需像set添加数据，所在的类需要重写hashCode() equals()方法，不然都默认用的是Object类中的方法。。。注意重写这两个方法时要保证一致性。 HashSet（数组+链表） ------> 线程不安全 无序：不等同于随机性，在底层数组中并不是按照数组索引依次添加，而是按照数 据hash值决定的 不可重复（重要用的多）：根据equals()判断 ps：假如自己设计一个set该如何设计，要保证不能重复就每添加一个元素就和数组里已有的元素equals，假如数组里有1000个元素，你加第1001个的时候就需要equals1000下这样显然效率太低了。所以有通过hash来实现这样的操作。先根据hashcode的某种算法找在数组的位置，如果该位置没有元素就直接添加到这，如果有元素了就equals比较true就证明一样，添加失败，全比完全false就证明没有一样的就可以添加，就加在链表的最后 LinkedHashSet ------> 可以按照添加的顺序遍历 在添加数据时还维护了两个引用，记录前一个数据和后一个数据。好处：对于频繁的遍历操作，效率要高于HashSet TreeSet ------> 可以按照添加的对象的指定属性进行排序，底层是红黑树 要求添加的数据都是相同类的对象，如果加int就所有元素都得是int 比较两个对象是否相同的标准：ComparaTo返回0 不再是 equals Map: 存的是Map.Entry<K,V> Map源码看着还是很痛苦，有时间再回过头看视频 HashMap ------> 1. 线程不安全 2. key,vlue可以存null值 3. 1.7: 数组+链表 1.8: 数组+链表+红黑树 4. 所有的key用set存 key所在的类要重写hashCode() equals() 5. Entry也是用set存 6. jdk7 的底层实现和HashSet有点像，先得到key的hashCode()再通过某种算法得到在Entry数组中的存放位置，再和这个位置上的元素比（见HashSet）区别就是比完发现key有一样的此时把现在这个key的value替换数组里以前的这个key对应的value 7. jdk8实现与7的区别：1. 底层数组是Node[] 而不是 Entry[]，其实本质还是Entry 2. new的时候没有创建长度为16的数组，调用put()的时候才创建（和ArrayList一样） 3. 核心！！！当数组长度 > 64 且某一个索引位置以链表形式存在的数据个数 > 8时，此时索引位置上的所有数据改为使用红黑树存 LinkedHashMap ------> 对于频繁遍历操作，效率比hashMap高。可以按照添加顺序遍历 TreeMap ------> 对key进行排序(自然排序/定制排序) 底层红黑树 Hashtable ------> 古老 key/value不能存null Properties ------> 常用来处理配置文件，框架！key/value都是String类型 哈希桶（数组的每个位置称为一个桶） \",\"补充：\",\"LinkedHashMap:需要记录访问顺序或插入顺序\",\"TreeMap：需要自定义排序\",\"泛型\",\"泛型的 <T> 必须是对象吗，基本数据类型可以吗\",\"在Java中，泛型类型参数<T>必须是一个引用类型，而不是基本数据类型。也就是说，泛型类型参数必须是一个类或接口类型，或者是一个数组类型。\",\" 泛型常见的表示可以是<E> <T> <K,V> 也可以是自给随便给<E1,E2,E3,A,B,C>都行 T[] arr = new T[10]; // 编译不通过 因为T只是类型，不是类！ T[] arr = (T[]) new Object[10]; //编译通过 泛型方法：在方法中出现了泛型结构，泛型参数与类的泛型参数没有任何关系比如类是<E> 泛型方法是<T> 换句话说，泛型方法所属的类是不是泛型类都没有关系 public <E> List<E> copyFromArrayToList(E[] arr) //注意public后面的<E> 不加会编译报错，会看成是不是有个类叫E。。。。。所以要表示一下前面加<E> 通配符： List<String> a 不能赋值给 List<Object> b 解决途径：通配符 ？ List<?> c c = a; //ok c = b //ok 但对于c就不能向里添加数据了，除了添加null之外（因为所有类类型都可以赋值为null） 总结：类A是类B的父类，G<A>和G<B>是没有任何关系的，二者共同的父类是：G<?> 有限制条件的通配符使用： List<? extends Person> l1 = null; //extends ---> <= List<Person> List<student> 可以赋值给l1 List<Object>不行 List<? super Person> l1 = null; //super ---> >= List<Person> List<Object> 可以赋值给l1 List<student>不行 可以这样理解：?（-∞，+∞） extends ---> （-∞，A] super ---> [A，+∞） 写数据时注意，对于l1来说，不能把add(new Student) //因为不清楚是不是还有比Student小的类，拿上面数学的方式理解，因为负无穷大，假如有比Student小的子类，我不能把Student赋给这个子类。（向下强转，向上自然转） \",\"IO流\",\" File类的一个对象：代表一个文件或文件目录 注意路径：windows是'\\\\' linux和url是'/' 输入流 vs 输出流 : 注意看站位：我站位内存的位置，就是进内存的为输入，出内存的为输出 字符流 vs 字节流 : 字符流处理文本，其他像图片、视频什么的都是字节流 节点流 vs 处理流 ：节点流是直接怼到数据的(可以理解为最原始的那根管道)，处理流是作用在已有流的基础之上的(相当于管道外面再包一层) 关流：先关外层的再关内层的，关外层流时，内层流会自动关闭，所以关于内层流的关闭可以省略。 题目 : 实现图片加密操作(提示：异或) a^b^b = a a^5^5 = a 统计文本中每个字符出现的次数 处理流之二 : 转换流(属于字符流)，提供字符流和字节流之间的转换 字符集：见视频p602，ANSI是平台默认编码，例如中文操作系统编码是GBK，英文操作系统是ISO-8859-1 对象流： 序列化：把对象存到数据源 ---> 允许把内存中的java对象转换成与平台无关的二进制流，允许把这种二进制流存到磁盘中，或通过网络传输 反序列化：把对象从数据源拿到内存 ---> 当其他程序获取到这种二进制流，可以把它恢复成原来的java对象 前台后台如果想传对象，就得要求这个对象是可序列化的 序列化需要加常量id，不加会有以下情况，假如person类，我序列化完成后再回过头会把person类给改动了，多加了一个id属性。这时我再反序列化是会报错的。 注意：可序列化类中所有属性要是可序列化的(基本数据类型和String默认是可序列化的) static/transient修饰的属性不能序列化，也就是说序列化的时候明明给值了比如String我给了值但是在反序列化的时候没值是null（序列化保存的是对象的状态，静态变量属于类的状态，因此，序列化并不保存静态变量。） 不过一般序列化传值很少传Person这种，一般都是json(字符串格式，默认是可序列化的) 序列化保存的是对象的状态，静态变量属于类的状态，因此，序列化并不保存静态变量。 \",\"1\",\"编码问题看尚硅谷p602\",\"网络编程\",\" ip和端口号 and 网络通信协议 ip 定位到主机 端口号 定位正在运行的进程(程序) 网络协议太复杂 ---> 分层 OSI参考模型(7层，理想化)实施有困难，落地：TCP/IP参考模型(4层) 两台机器数据的传输 就相当于一台经过这4层一层层数据封装，拿数据的那一台就一层层的数据拆封 本地回环地址指的是以127开头的地址（127.0.0.1 - 127.255.255.254），通常用127.0.0.1来表示。 内网IP一般是私有IP通常有一下3种： 10.x.x.x 172.16.x.x---172.31.x.x 192.168.x.x 假如回到十几年前就别买房子了太贵了，买域名 InetAddress类 Socket = ip + 端口号 网络通信通常也叫Socket编程 UDP适合播放视频，丢几帧无所谓，但别给我卡在那 更好的生活例子：TCP(1.可靠，2.可大数据量传输，3.需释放已建立的连接，效率低)：打电话 TCP三次握手四次挥手 UDP(1.不需要建立连接，2.每个数据包大小限制在64K内，3.无需释放资源，开销小，速度快)：发短信，发电报 TCP ---> 客户端：Socket 服务端：ServerSocket 注意一个类：ByteArrayInputStream包含一个内部缓冲区，其中包含可以从流中读取的字节 ---> 好处：假如取的时候原先传过来的时候有中文一个中文3个字节，可能有乱码。而这个类会把取到的缓存起来最后再一次性拿出来。就不会有一个中文劈成两半的情况。 需先启动服务器端，等待客户端访问 如先启动客户端握手会报错，连接失败 而UDP只管发，先启动谁都不会报错 UDP ---> 以数据报形式发送 发送端： 接收端： TCP/IP参考模型 ---> 应用层(HTTP,FTP,Telent,DNS...) 传输层(TCP,UDP...) 网络层(IP,ICMP,ARP...) 物理+数据链路层(Link) \",\"java反射机制\",\"ps: 有难度，但又比较重要。要求代码先要会写，反射机制被视为动态语言的关键。\",\"动态语言：在运行时代码可以根据某些条件改变自身结构。 java不是动态语言，但java可以称为准动态语言\",\"重点：1.获取Class实例 2.创造运行时类对象（newInstance()） 3.调用运行时类的指定结构（指定结构中重中之重是方法）\",\" 特征：动态性 某种意义上 框架 = 反射 + 注解 + 设计模式 Class类是用来描述class类的类 具体看java.lang中的Class类和java.lang.reflect 反射的应用场景：编译时确定不下来造哪个对象 程序在服务器中已经运行起来了，如用户想注册（register)/登录（login）。这时通过反射服务器中运行的代码就会通过判断动态的创造相应的对象 关于java.lang.Class类的理解 1.类的加载过程： 程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。 接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件 加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此 运行时类，就作为Class的一个实例。 2.换句话说，Class的实例就对应着一个运行时类。 3.加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式 来获取此运行时类。 1）获取Class实例： //方式一：调用运行时类的属性：.class 编译时就写死了，没有体现动态性 //通过 类名.class 获取到字节码文件对象（任意数据类型都具备一个class静态属性） Class clazz1 = Person.class; //Class clazz = hello.class; //如果我没创hello会报这样的错：hello 无法解析为类型(hello不是类、接口、枚举、注解、数组、基本数据类型、void) System.out.println(clazz1); //方式二：通过运行时类的对象,调用getClass() Person p1 = new Person(); Class clazz2 = p1.getClass(); System.out.println(clazz2); //方式三：调用Class的静态方法：forName(String classPath) //用的最多，也更好体现运行时的动态性，像第一种定死了，这种里面是个String只有运行时才会去判断有没有错找不不找得到 Class clazz3 = Class.forName(\\\"com.atguigu.java.Person\\\"); // clazz3 = Class.forName(\\\"java.lang.String\\\"); System.out.println(clazz3); //方式四:ClassLoader 了解 类加载器的作用就是把类(cllas)装载进内存中 具体到JVM学类加载器，有三个 2）创建对象（基于上一步） //方式一：直接Class对象API newInstance() // 获取Class对象 Class<?> clazz = MyClass.class; // 创建对象 Object obj = clazz.newInstance(); //方式二：通过Class对象获取构造对象，调用构造对象同名方法 newInstance() // 获取Class对象 Class<?> clazz = MyClass.class; // 获取构造函数 Constructor<?> constructor = clazz.getConstructor(String.class, int.class); // 创建对象 Object obj = constructor.newInstance(\\\"example\\\", 123); 需要学习JVM // m = 0 m = 300 finally:m = 100 class A { static { m = 300; } static int m = 100; } // m = 300 class A { static int m = 100; static { m = 300; } } 在javabean中要求提供一个public的空参构造器。原因： 1.便于通过反射，创建运行时类的对象 2.便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器 有些东西封装好了直接用就好了，像api像后面导入的第三方开源jar包。就像以后自己有孩子了不可能学语言让他从甲骨文开始，人的精力有限，不要过于深究。知道这个干这个用的就好。 \",\"学习的思维方式：\",\"“大处着眼，小处着手的意思是比喻既要从全局和长远的观点出发去考虑问题，也要在具体事情上一件件地做好，意为从大的目标去观察，从小的地方去动手。\",\"逆向思维、反证法\",\"透过问题看本质\",\"两句话：\",\"小不忍则乱大谋\",\"识时务者为俊杰\",\"反射的应用：动态代理\",\"动态代理的优点是它可以在运行时创建代理对象，而不需要在编译时指定代理类\",\" Spring: IOC容器(依赖注入) AOP(动态代理) 懂反射更好的理解框架的地层实现 代理模式 代理模式的作用是：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。 代理模式一般涉及到的角色有： 抽象角色：声明真实对象和代理对象的共同接口； 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。 多敲代码才能理解 静态代理例子： class MyThread implements Runnable{} //被代理类 class Thread implements Runnable{} //代理类 main() { MyThread t = new MyThread(); Thread thread = new Thread(t); thread.start(); //启动线程，调用线程的run() } \",\"java bin jjs.exe可以执行js文件，也就是说可以在jvm上运行js\",\"Lambda表达式\",\"ps: 具体看Lambda表达式.md文件\",\" * java内置的4大核心函数式接口 * * 消费型接口 Consumer<T> void accept(T t) * 供给型接口 Supplier<T> T get() * 函数型接口 Function<T,R> R apply(T t) * 断定型接口 Predicate<T> boolean test(T t) 方法引用： Consumer中的void accept(T t) PrintStream中的void println(T t) 发现这两个刚好匹配上了(返回值，形参个数类型都一样) 又 System.out的类型为PrintStream (PrintStream ps = System.out;) 则可以 System.out::println \",\"Stream API\",\"ps: java8两个重要的改变，一个是Lambda另一个就是Stream API\"]},\"689\":{\"h\":\"stream流和for的区别？\",\"t\":[\"stream流可以看作是for循环的一个语法糖；\",\"stream有并发流，在超过百万级数据量时，使用stream流效率更高；\",\" Stream API可以对集合数据进行操作，就类似SQL执行数据库查询 像mysql这种关系型数据库，一些过滤操作之类的都可以用sql语句实现，实现完后给java。 但是MongDB，Radis等，这种NoSQL的数据就需要到java层面处理过滤，这时用Stream API Collection关注的是数据的存储，跟内存打交道 Stream关注的数据的运算，跟CPU打交道 方式一： 针对集合 Collection中两个default方法: stream() 顺序流 parallelStream() 并行流：并行操作 方式二： 针对数组需要用Arrays有静态方法 方式三： Stream of() 方式四：创建无限流（了解） //迭代 // public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) //遍历前10个偶数 Stream.iterate(0, t -> t + 2).limit(10).forEach(System.out::println); //生成 // public static<T> Stream<T> generate(Supplier<T> s) Stream.generate(Math::random).limit(10).forEach(System.out::println); map()映射就像hashMap根据K,V映射，这个方法可以根据你给定的规则映射 Reduce()规约例如把映射的信息做一个sum，计算1-10的自然数的和可以用这个 Optional类可以避免空指针异 \",\"Junit是自动化的测试，手动的输出会导致一直阻塞，也就是说junit不支持手动输入，否则会导致当前线程一直阻塞，转圈圈，所以test类不要用scanner那种控制台手动输入数据的方式，把数据直接写成形参，测试的时候直接写成参数测试吧；\",\"JUnit总是为每个@Test方法创建一个测试类实例，所以必须要声明成public，也就是公共的，才能让junit给你创建，否则权限不够的.\"]},\"690\":{\"h\":\"为什么重写 equals() 时必须重写 hashCode() 方法？\",\"t\":[\"在 Java 中，重写 equals() 和 hashCode() 方法是因为它们在使用集合类（如 HashMap、HashSet、Hashtable 等）进行元素比较和存储时起着重要的作用。\"]},\"691\":{\"h\":\"集合Set添加某元素时，先调用hashCode()方法，定位到此元素实际存储位置，如果这个位置没有元素，说明是第一次存储；若此位置有对象存在，调用equals()进行比较，相等就舍弃此元素不存，不等则散列到其他地址。\",\"t\":[\"上面的示例也说明了为什么equals()相等，则hashCode()必须相等，进而当重写了equals方法，也要对hashCode()方法进行重写。 https://blog.csdn.net/wo541075754/article/details/114994906\",\"java从1.5开始改名5.0\",\"class People { People(String s) { } } public class StudyTest extends People { //此时这个类会报错 //没有为缺省构造函数定义隐式超构造函数 People（）。必须定义显式构造函数 //必须加以下 StudyTest(String s) { super(s); } } 以下是默认情况： class People { } public class StudyTest extends People { } 会默认的在StudyTest默认的构造函数中，默认调super() \",\"我这里char会搞错\",\" package com.example.spring_boot; /** * @author XD * 2020/8/10 23:06 **/ public class Example { String str = \\\"good\\\"; char[] ch = {'a', 'b', 'c'}; int a = 1; String b = \\\"a\\\"; public static void main(String[] args) { Example ex = new Example(); ex.change(ex.str, ex.ch); //good and abc System.out.println(ex.str + \\\"and\\\"); System.out.println(ex.ch); ex.change2(); System.out.println(ex.a + \\\" \\\" + ex.b); //2,b } private void change2() { a = 2; b = \\\"b\\\"; } private void change(String str, char[] ch) { str = \\\"test ok\\\"; ch = new char[]{'g'}; // ch[0] = 'g'; } } 看下面这个简单的例子：答案是1 public static void main(String[] args) { int[] ary = new int[] {1,2,3,4,5}; change(ary); System.out.println(ary[0]); } public static void change(int[] i) { i = new int[] {6}; } \"]},\"692\":{\"h\":\"进阶：源码\"},\"693\":{\"h\":\"一、JDK7的HashMap头插法循环的问题\",\"t\":[\"问题出现在：多线程情况下的扩容，单线程是没有问题的\",\"自己能理解的：：：：：：) 模拟出错：两个线程，A 要扩容的时候阻塞了，等 B 扩完后。A 醒了要扩的那个状态还保留在没扩之前的状态\",\"XD：插入一个元素分两步 1）放值 newTable[i]=e; 2）改指针 e=next; 【看下图，先放头部再迁移改指针】\",\"B（线程1 插入 B阻塞）A -> B（线程1 插入 A）B（线程2插入 B 后醒来继续改指针，此时发现head指针在 A 前面 B -> A -> B）\",\"image-20230605154613437\"]},\"694\":{\"h\":\"\",\"t\":[\"2024 再回顾彻底搞清：\",\"核心：扩容完顺序会逆过来，一直没get到这个核心点。导致迷迷糊糊怎么也搞不明白\",\"两个线程扩容传递的是两个新的table，原来是ABC，t扩容完成变成了CBA，此时t2接着迁移对象遍历原来ABC，遍历到C的时候发现C的next节点是B，这样一直循环，这才叫死循环\",\"头插法的锅，因为头插法打乱了链表的顺序，导致两个线程的数据结构不一致导致了bug。如果使用尾插法就没有这个bug。\",\"PS：JDK提供的HashMap从来就不是给多线程用的，现在非要内卷到研究把一个线程不安全的类放在多线程下会有什么问题，就好比ArrayList也是线程不安全的，我非要问你在多线程下使用ArrayList（没有别的同步保障）会有什么问题。如果是从研究源码的角度来说勉强说得过去，如果要说 ArrayList有问题，那是不是撑得？而且1.8的HashMap也是线程不安全的，所以才推荐用 ConcurrentHashMap。\",\"在多线程环境下，链表成环的场景通常是由于链表的插入、删除等操作没有进行同步处理导致的。以下是一种可能的场景：\",\"假设有两个线程 A 和 B，它们同时在对同一个桶的链表进行操作。\",\"初始状态下，链表为空。\",\"线程 A 插入一个键值对到链表的头部，此时链表中只有一个元素。\",\"线程 B 也插入一个键值对到链表的头部，此时链表中有两个元素，且线程 B 插入的元素成为链表的头部。\",\"线程 A 继续执行，在没有进行同步的情况下，它会将链表的头部指针指向自己插入的元素，即将线程 B 插入的元素剔除出链表，此时链表中只有一个元素，并且它的下一个指针指向它自己，形成了一个环。\",\"这种情况可能会导致链表的遍历进入死循环，从而导致程序出现异常或崩溃。因此，在多线程环境下，对链表的操作一定要进行同步处理，避免出现数据竞争的问题。\",\"但是更新链表头指针时，由于它不知道链表头指针已经被线程A更新了，所以它会将链表头指针指向X节点，而不是新元素\",\"XD：线程 A 没有感知到 B，所以 A 把 head 指向了自己的 1 号元素，此时 B 继续做 add 操作\",\"初始状态：链表为空 -------------------- | v +---+ | | +---+ 线程 A 插入元素 1 -------------------- | v +---+ +---+ | 1 | -> | | +---+ +---+ 线程 B 插入元素 2 -------------------- | v +---+ +---+ | 2 | -> | 1 | +---+ +---+ 线程 A 将头部指针指向元素 1 -------------------- | v +---+ | 1 | ----> 环 +---+ | ^ | | | | | v +---+ | 2 | +---+ \",\"看着一段终于明白了：1）重点多线程没同步 2）head指针的覆盖！！！\",\"因为线程 B 在线程 A 之后向链表头部插入了元素 B，所以链表中的第一个元素是 B，它的下一个指针指向元素 A，即 B->A。而线程 A 在链表头部插入元素 A 时，因为链表头部指针 head 被线程 B 覆盖了，所以它并不知道链表头部已经有一个元素 B 存在。因此，线程 A 会将它自己插入的元素 A 的下一个指针指向原来的第一个元素 X，即 A->X，而元素 X 的下一个指针又指向元素 B，即 X->B。这样，就形成了一个链表 A->X->B->A，其中元素 A 的下一个指针指向了元素 B，使得链表成环。\",\"在线程 B 向链表头部插入元素 B 之后，元素 B 成为了链表中的第一个元素，它的下一个指针指向元素 A，即 B->A。 而此时链表头部指针 head 已经被线程 B 修改为指向元素 B，所以线程 A 在插入元素 A 时，会将它的下一个指针指向原来的第一个元素 X，即 A->X。而元素 X 在此时就是链表中的第二个元素，它的下一个指针指向元素 B，即 X->B。因此，链表变为了 A->X->B。而由于元素 B 的下一个指针指向元素 A，而元素 A 的下一个指针又指向元素 X，最终形成了一个闭环的链表 A->X->B->A。\"]},\"695\":{\"h\":\"《JVM规范》\",\"t\":[\"虚拟机栈，即为平时提到的栈结构。我们将局部变量存储在栈结构中 堆，我们将new出来的结构（比如：数组、对象）加载在对空间中。补充：对象的属性（非static的）加载在堆空间中。 方法区：类的加载信息、常量池、静态域\",\"image-20230317095440667\"]},\"696\":{\"h\":\"！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！2-3 顺序\",\"t\":[\"总结：属性赋值的先后顺序\",\"① 默认初始化\",\"② 显式初始化 / 代码块\",\"③ 构造器中初始化\",\"④ 通过\\\"对象.方法\\\" 或 \\\"对象.属性\\\"的方式，赋值\",\"以上操作的先后顺序：① - ② - ③ - ④\",\"成员变量（static为界的实例变量和静态变量【类变量】）如果没有显式指定初始值，则会进行默认赋值； 也就是 static 的成员变量也会被默认赋值\",\"链接：https://www.nowcoder.com/questionTerminal/c2bfb1512dfa4a7eab773a5871a52402 来源：牛客网\"]},\"697\":{\"h\":\"1.首先，需要明白类的加载顺序。 构造方法的优先级一般比代码块低。\",\"t\":[\"(1) 父类静态代码块(包括静态初始化块，静态属性，但不包括静态方法) (2) 子类静态代码块(包括静态初始化块，静态属性，但不包括静态方法 ) (3) 父类非静态代码块( 包括非静态初始化块，非静态属性 ) (4) 父类构造函数 (5) 子类非静态代码块 ( 包括非静态初始化块，非静态属性 ) (6) 子类构造函数 其中：类中静态块按照声明顺序执行，并且(1)和(2)不需要调用new类实例的时候就执行了(意思就是在类加载到方法区的时候执行的) 2.其次，需要理解子类覆盖父类方法的问题，也就是方法重写实现多态问题。 Base b = new Sub();它为多态的一种表现形式，声明是Base,实现是Sub类， 理解为 b 编译时表现为Base类特性，运行时表现为Sub类特性。 当子类覆盖了父类的方法后，意思是父类的方法已经被重写，题中 父类初始化调用的方法为子类实现的方法，子类实现的方法中调用的baseName为子类中的私有属性。 由1.可知，此时只执行到步骤4.,子类非静态代码块和初始化步骤还没有到，子类中的baseName还没有被初始化。所以此时 baseName为空。 所以为null。\"]},\"698\":{\"h\":\"不会初始化子类的几种\",\"t\":[\"调用的是父类的static方法或者字段\",\"调用的是父类的final方法或者字段\",\"通过数组来引用\"]},\"699\":{\"h\":\"有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。\",\"t\":[\"总结：编译，看左边；运行，看右边。\"]},\"700\":{\"h\":\"重点懒汉式和饿汉式手写！！！\",\"t\":[\"自己的区分：饿汉式 一上来就给你new好， instance = new xxx(); 懒汉式 是你想要我再给你new，判断当前有没有没有就new，所以有线程安全问题\",\"我们都知道，饿汉式单例是线程安全的，也就是不会初始化的时候创建出两个对象来，但是为什么呢？ 首先定义一个饿汉式单例如下：\",\"public class Singleton { // 私有化构造方法，以防止外界使用该构造方法创建新的实例 private Singleton(){} // 默认是public，访问可以直接通过Singleton.instance来访问 static Singleton instance = new Singleton(); \",\"之所以是线程安全的，是因为JVM在类加载的过程，保证了不会初始化多个static对象。\"]},\"701\":{\"h\":\"一个Java应用程序java.exe，其实至少三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。\"},\"702\":{\"h\":\"自动类型转换(只涉及7种基本数据类型）\",\"t\":[\"结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。 byte 、char 、short --> int --> long --> float --> double 特别的：当byte、char、short三种类型的变量做运算时，结果为int型 说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量\"]},\"703\":{\"h\":\"HashMap\",\"t\":[\"当数组的某一个索引位置上的元素以链表形式存在的数据个数 >= 8 且当前数组的长度 > 64时，此时此索引位置上的所数据改为使用红黑树存储。当红黑树的节点小于或等于 6 个以后，又会恢复为链表形态。\",\"DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16 DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75 threshold：扩容的临界值，=容量*填充因子：16 * 0.75 => 12 TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8 MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64\",\"注：自己的理解，上面的0.75可能是通过统计学的泊松分布算出来的0.7-0.75 然后选的0.75\",\"在put()时初始化Node[]数组，长度为16，当数组中放了12个元素(扩容的临界值)了就要考虑扩容。放第13个的时候先看要放的位置是不是空的能不能放进去，能的话就放，不能的话就考虑扩容。\"]},\"704\":{\"h\":\"一定要区分：实例变量 vs 类变量\",\"t\":[\"image-20230317101128183\",\"实例变量指的是类中定义的变量，即成员变量 注意：两者如果没有初始化，都会有默认值。\"]},\"705\":{\"h\":\"检查异常（编译器要求必须处置的异常）\",\"t\":[\"除了Error，RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。\",\"非运行时异常 总是在我们写的时候就会出错 提醒我们try catch 或throw (一般是 File、SQL 相关)\",\"但是运行时异常检查不出来，只有运行时才会出错，所以也不需try catch (注意 ClassCastException)\"]},\"706\":{\"h\":\"* 本地访问 / Tomcat访问\",\"t\":[\"Tomcat 包裹http+css+js静态包里面的其他文件 解决跨域问题不能访问\",\"一个是 HTTP 协议，一个是 file 文件协议 【http:// file:///】\",\"场景：为什么本地访问.js / .css文件却可以，唯独.json文件会报错\",\"在本地访问.js和.css文件而不报错的原因是因为这些文件通常被浏览器解释为纯文本文件或脚本文件，并且不需要通过特定的解析器来处理。\",\"而.json文件是一种特殊的文件类型，被解释为 JSON（JavaScript Object Notation）格式的数据。JSON 是一种用于存储和交换数据的文本格式，它具有特定的语法和结构。当浏览器遇到.json文件时，会尝试将其解析为有效的 JSON 数据。\",\"由于安全和隐私的考虑，现代浏览器不允许直接从本地文件系统加载 JSON 文件，即使该文件位于你的计算机上。这是浏览器的安全策略之一，旨在防止网站通过访问本地文件系统来获取敏感信息。\",\"当你通过 HTTP 协议从服务器加载.json文件时，浏览器会遵循同源策略，并允许从同一个源加载该资源。这是因为浏览器认为服务器上的资源是安全的，且不会对用户的本地文件系统造成潜在的风险。\",\"为了在本地访问.json文件而不报错，你可以将文件部署到一个本地服务器上，并通过 HTTP 协议进行访问，就像我之前提到的在本地运行时使用 Python 简单的 HTTP 服务器一样。这样可以避免浏览器的安全限制，并正常加载和解析 JSON 数据。\",\"请注意，在实际的生产环境中，你应该将 JSON 文件部署到一个正式的 Web 服务器上，并通过合适的 URL 来访问，而不是依赖本地文件系统路径。\",\"换句话说本地只支持html+css+js，其他文件类型都访问不到吗\",\"在本地环境中，浏览器通常支持加载和渲染多种文件类型，包括 HTML、CSS、JavaScript、图像文件（如JPEG、PNG）、字体文件（如TTF、WOFF）、音频文件（如MP3、WAV）、视频文件（如MP4、WebM）等。\",\"对于大多数文件类型，浏览器在本地运行时都可以正常加载和呈现，无论是直接通过文件路径访问还是通过本地服务器进行访问。\",\"然而，对于某些文件类型，浏览器在本地环境中可能会施加一些安全限制。例如，对于包含敏感数据的.json文件，浏览器会限制直接从本地文件系统加载，以防止潜在的安全风险。\",\"这些安全限制在本地环境中是为了保护用户的安全和隐私而存在的。当你需要在本地加载特定文件类型时，可以考虑使用本地服务器来提供这些文件，或者调整浏览器的安全设置以允许加载特定文件类型。\",\"需要注意的是，在实际的生产环境中，文件的加载和访问通常通过一个正式的 Web 服务器来进行，而不是依赖本地文件系统路径。这样可以确保文件的可靠性、安全性和可访问性，并遵循浏览器的安全策略和同源策略。\",\".txt支持吗\",\"是的，大多数浏览器在本地环境中支持加载和显示文本文件（.txt）。文本文件是一种纯文本格式，可以包含普通文本、代码、配置信息等。\",\"Success：\",\"Error：\",\"image-20231013163533698\",\"image-20231013163547099\",\"其实像大屏那样处理就行，把 JSON 不要搞文件夹。直接粗暴放 JS 就行！！！\",\"PS: 这样也可以显示地图，但是一般不这样写\",\"image-20231013171058244\",\"Tomcat CORS 解决，不用自己写类\",\"<filter> <filter-name>CorsFilter</filter-name> <filter-class>org.apache.catalina.filters.CorsFilter</filter-class> <init-param> <param-name>cors.allowed.origins</param-name> <param-value>*</param-value> </init-param> </filter> <filter-mapping> <filter-name>CorsFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> \",\"^ 相同为0，不同为1\",\"异或是无进位加法！\",\"任何数异或0都等于它本身\",\"任何数异或本身都为0\",\"1异或任何数都为任何数取反\",\"&\",\"&运算代替%，例如a&15 15后四位二进制为1前面全为0，得出来的数不会超过15\",\"0&1=0   1&1=1 通常拿最后一个数&1取这一位的数\"]},\"707\":{\"h\":\"JavaGuide\",\"t\":[\"《Java面试指北》\",\"先放到这一个文件，再去和自己的笔记合并。。。按模块汇总到自己的里面\"]},\"708\":{\"h\":\"* 如何解决大文件上传问题?\",\"t\":[\"如果你的项目涉及到文件上传的话,面试官很可能会问你这个问题.\",\"我们先看第一个场景:大文件上传中途,突然失败 试想一个,你想上传一个5g的视频,上传进度到99%的时候,特么的,突然网络断了,这个时候,你发现自己竟然需要重新上传.我就问你抓狂不? 有没有解决办法呢?\",\"答案就是:分片上传! 什么是分片上传呢\",\"简单来说,我们只需要先将文件切分成多个文件分片,然后再上传这些小的文件分片.\",\"前端发送了所有文件分片之后,服务端再将这些文件分片进行合并即可.\",\"前端可以通过Blob.slice()方法来对文件进行切割(File 对象是继承Blob对象的,因此File对象也有slice()方法). 后端可以RandomAccessFile类帮助我们合并文件分片\"]},\"709\":{\"h\":\"* JavaIO模型常见面试题总结\",\"t\":[\"根据冯.诺依曼结构,计算机结构分为5大部分:运算器、控制器、存储器、输入设备、输出设备.\",\"输入设备(比如键盘)和输出设备(比如显示屏)都属于外部设备. 网卡、硬盘这种既可以属于输入设备,也可以属于输出设备. 输入设备向计算机输入数据,输出设备接收计算机输出的数据.\",\"从计算机结构的视角来看的话， I/O 描述了计算机系统与外部设备之间通信的过程。\",\"我们再先从应用程序的角度来解读一下 I/O。\",\"根据大学里学到的操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 用户空间（User space） 和 内核 空间（Kernel space）\",\"像我们平常运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如如文件管理、进程通信、内存管理等等。也就是说，我们想要进行 IO 操作，一定是要依赖内核空间的能力。 并且，用户空间的程序不能直接访问内核空间。\",\"当想要执行 IO 操作时，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。 因此，用户进程想要执行 IO 操作的话，必须通过 系统调用 来间接访问内核空间\",\"我们在平常开发过程中接触最多的就是 磁盘 IO（读写文件） 和 网络 IO（网络请求和响应）\",\"从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就 是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。\",\"我们电脑上跑着的应用程序，其实是需要经过操作系统，才能做一些特殊操作，如磁盘文件读写、内存的读写等等。因为这些都是比较危险的操作，不可以由应用程序乱来，只能交给底层操作系统来。\",\"当应用程序发起 I/O 调用后，会经历两个步骤：\",\"内核等待 I/O 设备准备好数据\",\"内核将数据从内核空间拷贝到用户空间。\"]},\"710\":{\"h\":\"Java 中 3 种常见 IO 模型\"},\"711\":{\"h\":\"BIO (Blocking I/O)\",\"t\":[\"BIO 属于同步阻塞 IO 模型\",\"同步阻塞 IO 模型中，应用程序发起 read 调用后，会一直阻塞，直到在内核把数据拷贝到用户空间。\",\"image-20230905102522350\",\"在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要 一种更高效的 I/O 处理模型来应对更高的并发量。\"]},\"712\":{\"h\":\"NIO (Non-blocking/New I/O)\",\"t\":[\"Java 中的 NIO 于 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector ， Buffer 等抽象。NIO 中的 N 可以理解为 Nonblocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 对于高负载、高并发的（网络）应用，应使用 NIO 。\",\"Java 中的 NIO 可以看作是 I/O 多路复用模型。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。 跟着我的思路往下看看，相信你会得到答案！ 我们先来看看 同步非阻塞 IO 模型。\",\"image-20230905132212180\",\"同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内 核把数据拷贝到用户空间。\",\"相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。通过轮询操作，避免了一直阻塞。\",\"但是，这种 IO 模型同样存在问题：应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。 这个时候，I/O 多路复用模型 就上场了。\",\"（XD：感觉像CAS Unsafe自旋）\",\"image-20230905132406455\",\"IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调 用的过程（数据从内核空间->用户空间）还是阻塞的。\",\"目前支持 IO 多路复用的系统调用，有 select，epoll 等等。select 系统调用，是目前几乎在所有的操作系统上都有支持\",\"select 调用 ：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。\",\"epoll 调用 ：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。\",\"IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。\",\"Java 中的 NIO ，有一个非常重要的选择器 ( Selector ) 的概念，也可以被称为 多路复用器。通过它，只需要一个线程便可以管理多个客户端 连接。当客户端数据到了之后，才会为其服务。\",\"image-20230905132922223\",\"Java NIO（New I/O）在设计上综合了两种模型的特性：I/O 多路复用和同步非阻塞 I/O。\",\"I/O 多路复用模型：NIO 使用选择器（Selector）来实现 I/O 多路复用。选择器允许一个线程同时监听多个通道的事件，例如读就绪或写就绪。这种机制允许一个线程同时处理多个连接，而不需要为每个连接创建一个线程。这是 I/O 多路复用模型的特点。\",\"同步非阻塞 I/O 模型：NIO 提供了非阻塞的 I/O 操作方式，这意味着当一个通道没有数据可读取时，读取操作不会阻塞线程，而会立即返回。类似地，当一个通道不能立即写入数据时，写入操作也不会阻塞线程。这种机制使得线程可以在等待 I/O 操作完成的同时继续执行其他任务，而不会被阻塞。这是同步非阻塞 I/O 模型的特点。\",\"因此，Java NIO 结合了 I/O 多路复用和同步非阻塞 I/O 模型的特性。通过选择器进行 I/O 多路复用，以及使用非阻塞的方式进行读写操作，Java NIO 提供了高效、可扩展的 I/O 处理方式。\",\"NIO 中的关键组件是 Selector（选择器），它使用了 I/O 多路复用的机制，可以同时监控多个通道的状态。当一个或多个通道就绪时，Selector 会通知应用程序进行相应的处理。这种机制可以提高系统的并发性能，但它并不是 NIO 的核心特性，而是在 NIO 的基础上实现的。\",\"所以IO多路复用设计目的其实不是为了快，而是为了解决线程/进程数量过多对服务器开销造成的压力 ，但它通过减少线程或进程的数量和上下文切换的开销，间接地提高了系统的性能和吞吐量。\"]},\"713\":{\"h\":\"AIO (Asynchronous I/O)\",\"t\":[\"AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型。\",\"异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进 行后续的操作。\",\"image-20230905133105910\",\"目前来说 AIO 的应用还不是很广泛。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。\",\"最后，来一张图，简单总结一下 Java 中的 BIO、NIO、AIO。\",\"image-20230905133151070\",\"补充：Netty\",\"很多小伙伴搞不清楚为啥要学习 Netty ，正式今天这篇文章开始之前，简单说一下自己的看法：\",\"Netty 基于 NIO （NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO），使用 Netty 可以极大地简化 TCP 和 UDP 套接字服务器等网络编程，并且性能以及安全性等很多方面都非常优秀。\",\"我们平常经常接触的 Dubbo、RocketMQ、Elasticsearch、gRPC、Spark 等等热门开源项目都用到了 Netty。\",\"大部分微服务框架底层涉及到网络通信的部分都是基于 Netty 来做的，比如说 Spring Cloud 生态系统中的网关 Spring Cloud Gateway。\",\"好的！那我就简单用 3 点来概括一下 Netty 吧！\",\"Netty 是一个 基于 NIO 的 client-server(客户端服务器)框架，使用它可以快速简单地开发网络应用程序。\",\"它极大地简化并优化了 TCP 和 UDP 套接字服务器等网络编程,并且性能以及安全性等很多方面甚至都要更好。\",\"支持多种协议 如 FTP，SMTP，HTTP 以及各种二进制和基于文本的传统协议。\",\"用官方的总结就是：Netty 成功地找到了一种在不妥协可维护性和性能的情况下实现易于开发，性能，稳定性和灵活性的方法。\",\"网络编程我愿意称中 Netty 为王 。\",\"不用 NIO 主要是因为 NIO 的编程模型复杂而且存在一些 BUG，并且对编程功底要求比较高。下图就是一个典型的使用 NIO 进行编程的案例：\",\"因为 Netty 具有下面这些优点，并且相比于直接使用 JDK 自带的 NIO 相关的 API 来说更加易用\",\"凭借自己的了解，简单说一下吧！理论上来说，NIO 可以做的事情 ，使用 Netty 都可以做并且更好。Netty 主要用来做网络通信\",\"作为 RPC 框架的网络通信工具 ： 我们在分布式系统中，不同服务节点之间经常需要相互调用，这个时候就需要 RPC 框架了。不同服务节点的通信是如何做的呢？可以使用 Netty 来做。比如我调用另外一个节点的方法的话，至少是要让对方知道我调用的是哪个类中的哪个方法以及相关参数吧！\",\"实现一个自己的 HTTP 服务器 ：通过 Netty 我们可以自己实现一个简单的 HTTP 服务器，这个大家应该不陌生。说到 HTTP 服务器的话，作为 Java 后端开发，我们一般使用 Tomcat 比较多。一个最基本的 HTTP 服务器可要以处理常见的 HTTP Method 的请求，比如 POST 请求、GET 请求等等。\",\"实现一个即时通讯系统 ： 使用 Netty 我们可以实现一个可以聊天类似微信的即时通讯系统，这方面的开源项目还蛮多的，可以自行去 Github 找一找。\",\"实现消息推送系统 ：市面上有很多消息推送系统都是基于 Netty 来做的。\"]},\"714\":{\"h\":\"* 泛型\"},\"715\":{\"h\":\"* 什么是泛型擦除机制？为什么要擦除?\",\"t\":[\"Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。\",\"编译器会在编译期间会动态地将泛型 T 擦除为 Object 或将 T extends xxx 擦除为其限定类型 xxx 。\",\"因此，泛型本质上其实还是编译器的行为，为了保证引入泛型机制但不创建新的类型，减少虚拟机的运行开销，编译器通过擦除将泛型类转化 为一般类。（这句话的意思是在编译期而不是运行期进行泛型擦除，可以减少虚拟机在运行期间的代价。并不是说泛型擦除这件事情本身能够有这个效果。）\",\"这里说的可能有点抽象，我举个例子：\",\"List<Integer> list = new ArrayList<>(); list.add(12); //1.编译期间直接添加会报错 list.add(\\\"a\\\"); Class<? extends List> clazz = list.getClass(); Method add = clazz.getDeclaredMethod(\\\"add\\\", Object.class); //2.运行期间通过反射添加，是可以的 add.invoke(list, \\\"kl\\\"); System.out.println(list) \",\"再来举一个例子 : 由于泛型擦除的问题，下面的方法重载会报错。\",\"public void print(List<String> list) { } public void print(List<Integer> list) { } //原因也很简单，泛型擦除之后， List<String> 与 List<Integer> 在编译以后都变成了 List 。 \",\"既然编译器要把泛型擦除，那为什么还要用泛型呢？用 Object 代替不行吗？\",\"这个问题其实在变相考察泛型的作用：\",\"使用泛型可在编译期间进行类型检测\",\"使用 Object 类型需要手动添加强制类型转换，降低代码可读性，提高出错概率。\",\"泛型可以使用自限定类型如 T extends Comparable 。\",\"评论补充：\",\"1、对于泛型类，有：\",\"public class Generic<T> { T elem; // ... } // 擦除后相当于 public class Generic { Object elem; // ... } \",\"2、对于泛型方法，有：\",\"<T> T method(T a, T b); // 擦除后 Object method(Object a, Object b); <T extends Number> T method(T a, T b); // 擦除后 Number method(Number a, Number b); \"]},\"716\":{\"h\":\"* 什么是桥方法？(呈上)\",\"t\":[\"桥方法(Bridge Method) 用于继承泛型类时保证多态。\",\"class Node<T> { public T data; public Node(T data) { this.data = data; } public void setData(T data) { System.out.println(\\\"Node.setData\\\"); this.data = data; } } class MyNode extends Node<Integer> { public MyNode(Integer data) { super(data); } // Node<T> 泛型擦除后为 setData(Object data)，而子类 MyNode 中并没有重写该方法，所以编译器会加入该桥方法保证多态 public void setData(Object data) { setData((Integer) data); } public void setData(Integer data) { System.out.println(\\\"MyNode.setData\\\"); super.setData(data); } } \",\"⚠️注意 ：桥方法为编译器自动生成，非手写。\"]},\"717\":{\"h\":\"* 泛型有哪些限制？为什么？\",\"t\":[\"泛型的限制一般是由泛型擦除机制导致的。擦除为 Object 后无法进行类型判断\",\"只能声明不能实例化 T 类型变量。\",\"泛型参数不能是基本类型。因为基本类型不是 Object 子类，应该用基本类型对应的引用类型代替。\",\"不能实例化泛型参数的数组。擦除后为 Object 后无法进行类型判断。\",\"不能实例化泛型数组。 \",\"《Thinking in java》一书中指出，由于泛型具有擦除机制，在运行时的类型参数会被擦除，Java只知道存储的对象是一个Object而已，而对于Java的数组来说，他必须知道它持有的所有对象的具体类型，而泛型的这种运行时擦除机制违反了数组安全检查的原则。\",\"泛型无法使用 Instance of 和 getClass() 进行类型判断。\",\"不能实现两个不同泛型参数的同一接口，擦除后多个父类的桥方法将冲突\",\"不能使用 static 修饰泛型变量 \",\"在java中泛型只是一个占位符，必须在传递类型后才能使用就泛型而言，类实例化时才能真正的传递类型参数，由于静态方法的加载先于类的实例化，也就是说类中的泛型还没有传递真正的类型参数静态的方法就已经加载完成了\",\"......\"]},\"718\":{\"h\":\"以下代码是否能编译，为什么？\",\"t\":[\"public final class Algorithm { public static <T> T max(T x, T y) { return x > y ? x : y; } } \",\"无法编译，因为 x 和 y 都会被擦除为 Object 类型， Object 无法使用 > 进行比较\",\"public class Singleton<T> { public static T getInstance() { if (instance == null) instance = new Singleton<T>(); return instance; } private static T instance = null; } \",\"无法编译，因为不能使用 static 修饰泛型 T 。\"]},\"719\":{\"h\":\"* String 类常见面试题总结\"},\"720\":{\"h\":\"第 1 题，奇怪的 nullnull\",\"t\":[\"下面这段代码最终会打印什么？\",\"public class Test1 { private static String s1; private static String s2; public static void main(String[] args) { String s= s1+s2; System.out.println(s); } } \",\"运行之后，你会发现打印了nullnull：\",\"在分析这个结果之前，先扯点别的，说一下为空null的字符串的打印原理。查看一下PrintStream类的源码，print方法在打印null前进行了处理：\",\"public void print(String s) { if (s == null) { s = \\\"null\\\"; } write(s); } \",\"因此，一个为null的字符串就可以被打印在我们的控制台上了。\",\"再回头看上面这道题，s1和s2没有经过初始化所以都是空对象null，需要注意这里不是字符串的\\\"null\\\"，打印结果的产生我们可以看一下字节码文件：\",\"image-20230906155942752\",\"编译器会对String字符串相加的操作进行优化，会把这一过程转化为StringBuilder的append方法。那么，让我们再看看append方法的源码：\",\"public AbstractStringBuilder append(String str) { if (str == null) return appendNull(); //... } \",\"如果append方法的参数字符串为null，那么这里会调用其父类AbstractStringBuilder的appendNull方法：\",\"private AbstractStringBuilder appendNull() { int c = count; ensureCapacityInternal(c + 4); final char[] value = this.value; value[c++] = 'n'; value[c++] = 'u'; value[c++] = 'l'; value[c++] = 'l'; count = c; return this; } \",\"这里的value就是底层用来存储字符的char类型数组，到这里我们就可以明白了，其实StringBuilder也对null的字符串进行了特殊处理，在append的过程中如果碰到是null的字符串，那么就会以\\\"null\\\"的形式被添加进字符数组，这也就导致了两个为空null的字符串相加后会打印为\\\"nullnull\\\"。\"]},\"721\":{\"h\":\"第 2 题，改变 String 的值\",\"t\":[\"如何改变一个 String 字符串的值，这道题可能看上去有点太简单了，像下面这样直接赋值不就可以了吗？\",\"String s=\\\"Hydra\\\"; s=\\\"Trunks\\\"; \",\"恭喜你，成功掉进了坑里！在回答这道题之前，我们需要知道 String 是不可变的，打开 String 的源码在开头就可以看到：\",\"private final char value[];\",\"可以看到，String 的本质其实是一个char类型的数组，然后我们再看两个关键字。先看final，我们知道final在修饰引用数据类型时，就像这里的数组时，能够保证指向该数组地址的引用不能修改，但是数组本身内的值可以被修改。\",\"是不是有点晕，没关系，我们看一个例子：\",\"final char[] one={'a','b','c'}; char[] two={'d','e','f'}; one=two; \",\"如果你这样写，那么编译器是会报错提示 Cannot assign a value to final variable 'one'，说明被final修饰的数组的引用地址是不可改变的。但是下面这段代码却能够正常的运行：\",\"final char[] one={'a','b','c'}; one[1]='z'; \",\"也就是说，即使被final修饰，但是我直接操作数组里的元素还是可以的，所以这里还加了另一个关键字private，防止从外部进行修改。此外，String 类本身也被添加了final关键字修饰，防止被继承后对属性进行修改。\",\"...\",\"那么，回到上面的问题，如果我想要改变一个 String 的值，而又不想把它重新指向其他对象的话，应该怎么办呢？答案是利用反射修改char数组的值：\",\"public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException { String s=\\\"Hydra\\\"; System.out.println(s+\\\": \\\"+s.hashCode()); Field field = String.class.getDeclaredField(\\\"value\\\"); field.setAccessible(true); field.set(s,new char[]{'T','r','u','n','k','s'}); System.out.println(s+\\\": \\\"+s.hashCode()); } \",\"再对比一下hashCode，修改后和之前一样，对象没有发生任何变化：\",\"最后，再啰嗦说一点题外话，这里看的是jdk8中 String 的源码，到这为止还是使用的char类型数组来存储字符，但是在jdk9中这个char数组已经被替换成了byte数组，能够使 String 对象占用的内存减少。\"]},\"722\":{\"h\":\"第 3 题，创建了几个对象？\",\"t\":[\"相信不少小伙伴在面试中都遇到过这道经典面试题，下面这段代码中到底创建了几个对象？\",\"String s = new String(\\\"Hydra\\\"); \",\"其实真正想要回答好这个问题，要铺垫的知识点还真是不少。首先，我们需要了解 3 个关于常量池的概念，下面还是基于jdk8版本进行说明：\",\"class 文件常量池：在 class 文件中保存了一份常量池（Constant Pool），主要存储编译时确定的数据，包括代码中的字面量(literal)和符号引用\",\"运行时常量池：位于方法区中，全局共享，class 文件常量池中的内容会在类加载后存放到方法区的运行时常量池中。除此之外，在运行期间可以将新的变量放入运行时常量池中，相对 class 文件常量池而言运行时常量池更具备动态性\",\"字符串常量池：位于堆中，全局共享，这里可以先粗略的认为它存储的是 String 对象的直接引用，而不是直接存放的对象，具体的实例对象是在堆中存放\",\"补充：\",\"当虚拟机要使用一个类时，它需要读取并解析 Class 文件获取相关信息，再将信息存入到方法区。方法区会存储已被虚拟机加载的 类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\",\"method-area-jdk1.7\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/jvm/memory-area.html\",\"可以用一张图来描述它们各自所处的位置：\",\"image-20230906170526190\",\"接下来，我们来细说一下字符串常量池的结构，其实在 Hotspot JVM 中，字符串常量池StringTable的本质是一张HashTable，那么当我们说将一个字符串放入字符串常量池的时候，实际上放进去的是什么呢？\",\"以字面量的方式创建 String 对象为例，字符串常量池以及堆栈的结构如下图所示（忽略了 jvm 中的各种OopDesc实例）：\",\"image-20230906170643575\",\"实际上字符串常量池 HashTable 采用的是数组加链表的结构，链表中的节点是一个个的 HashTableEntry，而 HashTableEntry 中的 value 则存储了堆上 String 对象的引用。 XD: HashMap 和 Hashtable 在内部都使用了数组加链表（或红黑树）的形式来存储键值对【自己对hashtable太生疏了】\",\"那么，下一个问题来了，这个字符串对象的引用是什么时候被放到字符串常量池中的？具体可为两种情况：\",\"使用字面量声明 String 对象时，也就是被双引号包围的字符串，在堆上创建对象，并驻留到字符串常量池中（注意这个用词）\",\"调用intern()方法，当字符串常量池没有相等的字符串时，会保存该字符串的引用\",\"注意！我们在上面用到了一个词驻留，这里对它进行一下规范。当我们说驻留一个字符串到字符串常量池时，指的是创 HashTableEntry，再使它的value指向堆上的 String 实例，并把 HashTableEntry 放入字符串常量池，而不是直接把 String 对象放入字符串常量池中。简单来说，可以理解为将 String 对象的引用保存在字符串常量池中。\",\"我们把intern()方法放在后面细说，先主要看第一种情况，这里直接整理引用 R 大的结论：\",\"在类加载阶段，JVM 会在堆中创建对应这些 class 文件常量池中的字符串对象实例，并在字符串常量池中驻留其引用。\",\"这一过程具体是在 resolve 阶段(个人理解就是 resolution 解析阶段)执行，但是并不是立即就创建对象并驻留了引用，因为在 JVM 规范里指明了 resolve 阶段可以是 lazy 的。CONSTANT_String 会在第一次引用该项的 ldc 指令被第一次执行到的时候才会 resolve。\",\"就 HotSpot VM 的实现来说，加载类时字符串字面量会进入到运行时常量池，不会进入全局的字符串常量池，即在 StringTable 中并没有相应的引用，在堆中也没有对应的对象产生。\",\"...\",\"到这里，我们可以看到一共创建了两个String 对象，并且两个都是在堆上创建的，且字面量方式创建的 String 对象的引用被驻留到了字符串常量池中。而栈里的s只是一个变量，并不是实际意义上的对象，我们不把它包括在内。\",\"最后再看一下下面的这种情况，当字符串常量池已经驻留过某个字符串引用，再使用构造方法创建 String 时，创建了几个对象？\",\"public static void main(String[] args) { String s = \\\"Hydra\\\"; String s2 = new String(\\\"Hydra\\\"); } \",\"答案是只创建一个对象，对于这种重复字面量的字符串\"]},\"723\":{\"h\":\"第 4 题，烧脑的 intern\",\"t\":[\"上面我们在研究字符串对象的引用如何驻留到字符串常量池中时，还留下了调用intern方法的方式，下面我们来具体分析。\",\"从字面上理解intern这个单词，作为动词时它有禁闭、关押的意思，通过前面的介绍，与其说是将字符串关押到字符串常量池StringTable中，可能将它理解为缓存它的引用会更加贴切。\",\"String 的intern()是一个本地方法，可以强制将 String 驻留进入字符串常量池，可以分为两种情况：\",\"如果字符串常量池中已经驻留了一个等于此 String 对象内容的字符串引用，则返回此字符串在常量池中的引用\",\"否则，在常量池中创建一个引用指向这个 String 对象，然后返回常量池中的这个引用\",\"好了，我们下面看一下这段代码，它的运行结果应该是什么？ XD：我答错了\",\"public static void main(String[] args) { String s1 = new String(\\\"Hydra\\\"); String s2 = s1.intern(); System.out.println(s1 == s2); System.out.println(s1 == \\\"Hydra\\\"); System.out.println(s2 == \\\"Hydra\\\"); } \",\"答案： false false true \",\"img\",\"其实有了第三题的基础，了解这个结构已经很简单了：\",\"在创建s1的时候，其实堆里已经创建了两个字符串对象StringObject1和StringObject2，并且在字符串常量池中驻留了StringObject2\",\"当执行s1.intern()方法时，字符串常量池中已经存在内容等于\\\"Hydra\\\"的字符串StringObject2，直接返回这个引用并赋值给s2\",\"s1和s2指向的是两个不同的 String 对象，因此返回 false\",\"s2指向的就是驻留在字符串常量池的StringObject2，因此s2==\\\"Hydra\\\"为 true，而s1指向的不是常量池中的对象引用所以返回 false\",\"XD：我这题要理解成**只要是 字面量 就是对应字符串常量池中的变量！（也得指向堆中一个变量，这样变量才能引用）**vs 只要是new的就是在堆中 才想得通 查资料，new String 到底几个对象 这时候字符串常量池会不会有！！！！看这个文章迷惑了 应该是 2 个对象，具体可以看下 GoodNotes\",\"当调用 s1.intern() 方法时，如果字符串常量池中已经存在与 s1 相同内容的字符串对象，那么 s2 将引用该已存在的对象。这意味着 s2 和 s1 引用的是同一个字符串常量对象，而不是堆空间中的 s1 对象。\",\"需要注意的是，字符串常量池是全局共享的，而堆空间中的对象是独立的。通过 s1.intern() 方法获取的对象是在字符串常量池中的对象，与堆空间中的对象没有直接关联。\",\"看以下好理解：字面量不止在字符串常量池中有，堆中也得有才能给变量拿去用！！！ 看上图，可理解为第一步new的时候就有 堆中 现在能看到的所有东西了！！！！！！\",\"// 在堆中创建字符串对象”ab“ // 将字符串对象”ab“的引用保存在字符串常量池中 String aa = \\\"ab\\\"; // 直接返回字符串常量池中字符串对象”ab“的引用 String bb = \\\"ab\\\"; \"]},\"724\":{\"h\":\"String s1 = new String(\\\"abc\\\");这句话创建了几个字符串对象？\",\"t\":[\"会创建 1 或 2 个字符串对象。\",\"1、如果字符串常量池中不存在字符串对象“abc”的引用，那么它将首先在字符串常量池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/basis/java-basic-questions-02.html\",\"上面是常量池中已存在内容相等的字符串驻留的情况，下面再看看常量池中不存在的情况，看下面的例子：\",\"String s1 = new String(\\\"Hy\\\") + new String(\\\"dra\\\"); s1.intern(); //这里注释掉，结果就会相反 String s2 = \\\"Hydra\\\"; System.out.println(s1 == s2); \",\"答案： true \",\"简单分析一下这个过程，第一步会在堆上创建\\\"Hy\\\"和\\\"dra\\\"的字符串对象。第二部驻留到字符串常量池中。\",\"接下来，完成字符串的拼接操作，前面我们说过，实际上 jvm 会把拼接优化成StringBuilder的append方法，并最终调用toString方法返回一个 String 对象。在完成字符串的拼接后，字符串常量池中并没有驻留一个内容等于\\\"Hydra\\\"的字符串。\",\"所以，执行s1.intern()时，会在字符串常量池创建一个引用，指向前面StringBuilder创建的那个字符串，也就是变量s1所指向的字符串对象。在《深入理解 Java 虚拟机》这本书中，作者对这进行了解释，因为从 jdk7 开始，字符串常量池就已经移到了堆中，那么这里就只需要在字符串常量池中记录一下首次出现的实例引用即可。\",\"image-20230906204837682\",\"最后，当执行String s2 = \\\"Hydra\\\"时，发现字符串常量池中已经驻留这个字符串，直接返回对象的引用，因此s1和s2指向的是相同的对象。\",\"image-20230906204951575\"]},\"725\":{\"h\":\"第 5 题，还是创建了几个对象？\",\"t\":[\"解决了前面数 String 对象个数的问题，那么我们接着加点难度，看看下面这段代码，创建了几个对象？\",\"String s=\\\"a\\\"+\\\"b\\\"+\\\"c\\\";\",\"先揭晓答案，只创建了一个对象！ 可以直观的对比一下源代码和反编译后的字节码文件：\",\"image-20230906212720611\",\"如果使用前面提到过的 debug 小技巧，也可以直观的看到语句执行完后，只增加了一个 String 对象，以及一个 char 数组对象。并且这个字符串就是驻留在字符串常量池中的那一个，如果后面再使用字面量\\\"abc\\\"的方式声明一个字符串，指向的仍是这一个，堆中 String 对象的数量不会发生变化。\",\"至于为什么源代码中字符串拼接的操作，在编译完成后会消失，直接呈现为一个拼接后的完整字符串，是因为在编译期间，应用了编译器优化中一种被称为常量折叠(Constant Folding)的技术。\",\"常量折叠会将编译期常量的加减乘除的运算过程在编译过程中折叠。编译器通过语法分析，会将常量表达式计算求值，并用求出的值来替换表达式，而不必等到运行期间再进行运算处理，从而在运行期间节省处理器资源。\",\"而上边提到的编译期常量的特点就是它的值在编译期就可以确定，并且需要完整满足下面的要求，才可能是一个编译期常量：\",\"被声明为final\",\"基本类型或者字符串类型\",\"声明时就已经初始化\",\"使用常量表达式进行初始化\",\"下面我们通过几段代码加深对它的理解： XD-看我图片文件夹String，只要字符串拼接带变量的都是在堆中 不是字符串常量池\",\"public static void main(String[] args) { final String h1 = \\\"hello\\\"; String h2 = \\\"hello\\\"; String s1 = h1 + \\\"Hydra\\\"; String s2 = h2 + \\\"Hydra\\\"; System.out.println((s1 == \\\"helloHydra\\\")); System.out.println((s2 == \\\"helloHydra\\\")); } \",\"答案： true false \",\"代码中字符串h1和h2都使用常量赋值，区别在于是否使用了final进行修饰，对比编译后的代码，s1进行了折叠而s2没有，可以印证上面的理论，final修饰的字符串变量才有可能是编译期常量。\",\"image-20230906213034838\",\"再看一段代码，执行下面的程序，结果会返回什么呢？\",\"public static void main(String[] args) { String h =\\\"hello\\\"; final String h2 = h; String s = h2 + \\\"Hydra\\\"; System.out.println(s==\\\"helloHydra\\\"); } \",\"答案是false，因为虽然这里字符串h2被final修饰，但是初始化时没有使用常量表达式，因此它也不是编译期常量。那么，有的小伙伴就要问了，到底什么才是常量表达式呢？\",\"在Oracle官网的文档中，列举了很多种情况，下面对常见的情况进行列举（除了下面这些之外官方文档上还列举了不少情况，如果有兴趣的话，可以自己查看）：\",\"基本类型和 String 类型的字面量\",\"基本类型和 String 类型的强制类型转换\",\"使用+或-或!等一元运算符（不包括++和--）进行计算\",\"使用加减运算符+、-，乘除运算符*、 / 、% 进行计算\",\"使用移位运算符 >>、 <<、 >>>进行位移操作\",\"……\",\"至于我们从文章一开始就提到的字面量（literals），是用于表达源代码中一个固定值的表示法，在 Java 中创建一个对象时需要使用new关键字，但是给一个基本类型变量赋值时不需要使用new关键字，这种方式就可以被称为字面量。\",\"再说点题外话，和编译期常量相对的，另一种类型的常量是运行时常量，看一下下面这段代码：\",\"final String s1=\\\"hello \\\"+\\\"Hydra\\\"; final String s2=UUID.randomUUID().toString()+\\\"Hydra\\\"; \",\"编译器能够在编译期就得到s1的值是hello Hydra，不需要等到程序的运行期间，因此s1属于编译期常量。而对s2来说，虽然也被声明为final类型，并且在声明时就已经初始化，但使用的不是常量表达式，因此不属于编译期常量，这一类型的常量被称为运行时常量。\",\"我只挑重点记录\"]},\"726\":{\"h\":\"* 简单介绍一下 Spring?有啥缺点?\",\"t\":[\"虽然 Spring 的组件代码是轻量级的，但它的配置却是重量级的（需要大量 XML 配置）\",\"为此，Spring 2.5 引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式 XML 配置。Spring 3.0 引入了基于 Java 的配置，这是一种类型安全的可重构配置方式，可以代替 XML。\",\"尽管如此，我们依旧没能逃脱配置的魔爪。开启某些 Spring 特性时，比如事务管理和 Spring MVC，还是需要用 XML 或 Java 进行显式配置。启用第三方库时也需要显式配置，比如基于 Thymeleaf 的 Web 视图。配置 Servlet 和过滤器（比如 Spring 的DispatcherServlet）同样需要在 web.xml 或 Servlet 初始化代码里进行显式配置。组件扫描减少了配置量，Java 配置让它看上去简洁不少，但 Spring 还是需要不少配置。\",\"光配置这些 XML 文件都够我们头疼的了，占用了我们大部分时间和精力。除此之外，相关库的依赖非常让人头疼，不同库之间的版本冲突也非常常见。\"]},\"727\":{\"h\":\"* 什么是 Spring Boot Starters?\",\"t\":[\"Spring Boot Starters 是一系列依赖关系的集合，因为它的存在，项目的依赖之间的关系对我们来说变的更加简单了。\",\"举个例子：在没有 Spring Boot Starters 之前，我们开发 REST 服务或 Web 应用程序时; 我们需要使用像 Spring MVC，Tomcat 和 Jackson 这样的库，这些依赖我们需要手动一个一个添加。但是，有了 Spring Boot Starters 我们只需要一个只需添加一个spring-boot-starter-web一个依赖就可以了，这个依赖包含的子依赖中包含了我们开发 REST 服务需要的所有依赖。\"]},\"728\":{\"h\":\"* Spring&SpringBoot常用注解总结\",\"t\":[\"https://javaguide.cn/system-design/framework/spring/spring-common-annotations.html\"]},\"729\":{\"h\":\"* 如何使用 Spring Boot 实现全局异常处理？\",\"t\":[\"可以使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常。\",\"更多内容请参考我的原创 ：Spring Boot 异常处理在实际项目中的应用\"]},\"730\":{\"h\":\"*Spring Boot 中如何实现定时任务 ?\",\"t\":[\"我们使用 @Scheduled 注解就能很方便地创建一个定时任务。\",\"@Component public class ScheduledTasks { private static final Logger log = LoggerFactory.getLogger(ScheduledTasks.class); private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\\\"HH:mm:ss\\\"); /** * fixedRate：固定速率执行。每5秒执行一次。 */ @Scheduled(fixedRate = 5000) public void reportCurrentTimeWithFixedRate() { log.info(\\\"Current Thread : {}\\\", Thread.currentThread().getName()); log.info(\\\"Fixed Rate Task : The time is now {}\\\", dateFormat.format(new Date())); } } \",\"单纯依靠 @Scheduled 注解 还不行，我们还需要在 SpringBoot 中我们只需要在启动类上加上@EnableScheduling 注解，这样才可以启动定时任务。@EnableScheduling 注解的作用是发现注解 @Scheduled 的任务并在后台执行该任务。\"]},\"731\":{\"h\":\"* SpringBoot自动配置原理\",\"t\":[\"guiqp2022-04-10 17:38\",\"SpringBoot自动配置原理，我的理解是这样的：\",\"引入Starter组件\",\"SpringBoot基于约定去Starter组件的路径下（META-INF/spring.factories）去找配置类\",\"SpringBoot使用ImportSelector去导入这些配置类，并根据@Conditional动态加载配置类里面的Bean到容器\",\"有类似问题的小伙伴可以看看我写的这篇文章，写的比较详细：https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.htm\",\"简单来说就是自动去把第三方组件的Bean装载到IOC容器中，不需要开发人员再去写Bean相关的配置，在springboot应用里面只需要在启动类上去加上@SpringBootApplication注解，就可以去实现自动装配，它是一个复合注解真正去实现自动装配的注解是@EnableAutoConfiguration这样一个注解，自动装配的实现呢，主要依靠三个核心的关键技术。\",\"第一个，引入starter启动依赖组件的时候，这个组件里面必须包含有一个@Configuration配置类，而在这个配置类里面，我们需要通过@Bean这个注解去声明需要装配到IOC容器里面的Bean对象。\",\"第二个，第三方jar包里面的配置类全路径都将放在classpath:/META-INF/spring.factories文件里面，这样的话springboot就可以知道第三方jar包里面这个配置类的位置。这个步骤主要是用到了spring里面的SpringFactoriesLoader来完成的。\",\"第三个，springboot拿到所有第三方jar包里面声明的配置类以后，再通过Spring提供的ImportSelector这样一个接口（@Import注解功能），来实现对这些配置类的动态加载，从而去完成自动装配的动作。\",\"image-20230906220544568\"]},\"732\":{\"h\":\"* 分布式事务\",\"t\":[\"我已经部分集成到自己的笔记\"]},\"733\":{\"h\":\"* 分布式下日志收集\"},\"734\":{\"h\":\"痛点：\",\"t\":[\"没有日志系统之前，我们的日志可能分布在多台服务器上。每次需要查看日志，我们都需要登录每台机器。然后，使用 grep、wc 等 Linux 命令来对日志进行搜索。这个过程是非常麻烦并且耗时的！并且，日志量不大的时候，这个速度还能忍受。当日志量比较多的时候，整个过程就是非常慢。\"]},\"735\":{\"h\":\"ELK 了解么？\",\"t\":[\"ELK 是目前使用的比较多的一个开源的日志系统解决方案，背靠是 Elastic 这家专注搜索的公司。\"]},\"736\":{\"h\":\"ELK 老三件套\",\"t\":[\"最原始的时候，ELK 是由 3 个开源项目的首字母构成，分别是 Elasticsearch 、Logstash、Kibana。\",\"下图是一个最简单的 ELK 日志系统架构 ：\",\"image-20230907214851056\",\"我们分别来介绍一下这些开源项目以及它们在这个日志系统中起到的作用：\",\"Logstash ：Logstash 主要用于日志的搜集、分析和过滤，支持对多种日志类型进行处理。在 ELK 日志系统中，Logstash 负责日志的收集和清洗。\",\"Elasticsearch ：ElasticSearch 一款使用 Java 语言开发的搜索引擎，基于 Lucence 。可以解决使用数据库进行模糊搜索时存在的性能问题，提供海量数据近实时的检索体验。在 ELK 日志系统中，Elasticsearch 负责日志的搜素。\",\"Kibana ：Kibana 是专门设计用来与 Elasticsearch 协作的，可以自定义多种表格、柱状图、饼状图、折线图对存储在 Elasticsearch 中的数据进行深入挖掘分析与可视化。 ELK 日志系统中，Logstash 主要负责对从 Elasticsearch 中搜索出来的日志进行可视化展示。\"]},\"737\":{\"h\":\"* 什么是 Tomcat?\",\"t\":[\"简单来说，Tomcat 就是一个“HTTP 服务器 + Servlet 容器”，我们通常也称呼 Tomcat 为 Web 容器。\",\"HTTP 服务器 ：处理 HTTP 请求并响应结果。\",\"Servlet 容器 ：HTTP 服务器将请求交给 Servlet 容器处理，Servlet 容器会将请求转发到具体的 Servlet（Servlet 容器用来加载和管理业务类）。\"]},\"738\":{\"h\":\"* 什么是 Servlet?有什么作用？\",\"t\":[\"Servlet 指的是任何实现了 Servlet 接口的类。Servlet 主要用于处理客户端传来的 HTTP 请求，并返回一个响应。\",\"Servlet 容器会根据 web.xml 文件中的映射关系，调用相应的 Servlet，Servlet 将处理的结果返回给 Servlet 容器，并通过 HTTP 服务器将响应传输给客户端。\",\"几乎所有的 Java Web 框架（比如 Spring）都是基于 Servlet 的封装。\",\"待吸收美团的过来，系统化的搞定这块\"]},\"739\":{\"h\":\"HashMap 的长度为什么是 2 的幂次方 ⭐⭐⭐\",\"t\":[\"💡 提示：提高运算效率。\",\"在Java中，常见的哈希函数（如hashCode()方法）通常返回一个32位的整数作为哈希值。这是因为Java中的int类型是32位有符号整数，因此哈希值的范围是-231（-2147483648）到231-1（2147483647）之间的所有整数。\",\"当HashMap的长度为2的幂次方时，通过与运算（&）就可以将哈希码映射到数组的索引上。假设HashMap的长度为N，那么对哈希码进行与运算的结果将是0到N-1之间的整数，恰好对应数组的有效索引范围。\",\"XD: 我可以理解为从位运算角度 32个bit位（2^n）\",\"为了能让 HashMap 存取高效，尽量较少碰撞，也就是要尽量把数据分配均匀。我们上面也讲到了过了，Hash 值的范围值-2147483648 到 2147483647，前后加起来大概 40 亿的映射空间，只要哈希函数映射得比较均匀松散，一般应用是很难出现碰撞的。但问题是一个 40 亿长度的数组，内存是放不下的。所以这个散列值是不能直接拿来用的。用之前还要先做对数组的长度取模运算，得到的余数才能用来要存放的位置也就是对应的数组下标。这个数组下标的计算方法是“ (n - 1) & hash”。（n 代表数组长度）。这也就解释了 HashMap 的长度为什么是 2 的幂次方。\",\"这个算法应该如何设计呢？ XD: 这就是我之前LeetCode 学的一个点。。。好使\",\"我们首先可能会想到采用%取余的操作来实现。但是，重点来了：“取余(%)操作中如果除数是 2 的幂次则等价于与其除数减一的与(&)操作（也就是说 hash%length==hash&(length-1)的前提是 length 是 2 的 n 次方；）。” 并且 采用二进制位操作 &，相对于%能够提高运算效率，这就解释了 HashMap 的长度为什么是 2 的幂次方。\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/collection/java-collection-questions-02.html\"]},\"740\":{\"h\":\"JDK 1.7 和 JDK 1.8 的 ConcurrentHashMap 实现有什么不同？\",\"t\":[\"线程安全实现方式：JDK 1.7 采用 Segment 分段锁来保证安全， Segment 是继承自 ReentrantLock。JDK1.8 放弃了 Segment 分段锁的设计，采用 Node + CAS + synchronized 保证线程安全，锁粒度更细，synchronized 只锁定当前链表或红黑二叉树的首节点。\",\"Hash 碰撞解决方法 : JDK 1.7 采用拉链法，JDK1.8 采用拉链法结合红黑树（链表长度超过一定阈值时，将链表转换为红黑树）。 \",\"JDK1.8 之前 ： 数组和链表 JDK1.8 之后 ： 多了红黑树\",\"API vs SPI（Service Provider Interface）机制\",\"XD: 可以理解为 API 接口在被调用方，SPI 接口在调用方\",\"在面向对象的设计原则中，一般推荐模块之间基于接口编程，通常情况下调用方模块是不会感知到被调用方模块的内部具体实现。一旦代码里面涉及具体实现类，就违反了开闭原则。如果需要替换一种实现，就需要修改代码。\",\"为了实现在模块装配的时候不用在程序里面动态指明，这就需要一种服务发现机制。Java SPI 就是提供了这样一个机制：**为某个接口寻找服务实现的机制。这有点类似 IoC 的思想，将装配的控制权移交到了程序之外。\",\"当接口存在于调用方这边时，就是 SPI（看JavaGuide的图） ，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。\",\"举个通俗易懂的例子：公司 H 是一家科技公司，新设计了一款芯片，然后现在需要量产了，而市面上有好几家芯片制造业公司，这个时候，只要 H 公司指定好了这芯片生产的标准（定义好了接口标准），那么这些合作的芯片公司（服务提供者）就按照标准交付自家特色的芯片（提供不同方案的实现，但是给出来的结果是一样的）。\",\"SLF4J （Simple Logging Facade for Java）是 Java 的一个日志门面（接口），其具体实现有几种，比如：Logback、Log4j、Log4j2 等等，而且还可以切换，在切换日志具体实现的时候我们是不需要更改项目代码的，只需要在 Maven 依赖里面修改一些 pom 依赖就好了。\",\"img\",\"这就是依赖 SPI 机制实现的\",\"XD：想象一下除了这个日志接口把标准提供给调用方去实现，还有JDBC感觉也是SPI机制\",\"JDBC的各类实现（如驱动程序、连接池等）可以通过SPI（Service Provider Interface）机制来实现。\",\"JDBC作为Java平台中用于与数据库进行交互的API，定义了一组标准的接口和类。具体的数据库厂商或第三方开发者可以通过实现这些接口来提供特定数据库的支持。\",\"SPI机制允许开发者在类路径下的特定位置提供自定义的实现类，并通过SPI机制自动加载和注册这些实现类。在JDBC中，这些实现类可以是数据库驱动程序（JDBC Driver）、连接池实现、事务管理器等。\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/basis/spi.html\",\"能解答一切的答案\",\"开头提醒： 打开自己本地任意一个SpringBoot项目，复制代码到test包下跟着敲。 后面几篇文章不再提醒，希望大家养成习惯。看10篇文章，不如自己动手做一次。 我们不执着于一天看多少篇，但求把每一篇都搞懂，慢就是快。\",\"有些人可能觉得：管这么多干嘛，用就好了啊。\",\"这种人，一般做不到举一反三，只能有一学一。即使能熟练使用，等他遇到SpringBoot时，又会把它当做新的框架来学。而在我看来：\",\"SpringBoot = Spring注解 + 自动配置\",\"SpringBoot就是一个花架子，如果你已经熟练掌握Spring，SpringBoot上手是非常容易的。\"]},\"741\":{\"h\":\"Lambda\",\"t\":[\"自己买了一本小书很不错 《Java 8函数式编程》\",\"Lambda vs Stream\",\"Lambda表达式是一种简洁而强大的语法特性，它允许我们以更紧凑的方式编写匿名函数。Lambda表达式可以作为参数传递给方法或函数式接口，并且可以更方便地处理集合数据\",\"stream流可以看作是for循环的一个语法糖； stream有并发流，在超过百万级数据量时，使用stream流效率更高；\"]},\"742\":{\"h\":\"Zero、XD\"},\"743\":{\"h\":\"MP 框架API(Get It)\",\"t\":[\"MP中有Lambda的Wrapper（为了避免了字段硬编码和拼写错误的问题，即使用普通QueryWrapper的缺陷）\",\"对于 QueryWrapper 类的 like 方法，它不支持使用 Lambda 表达式作为参数。只有 LambdaQueryWrapper 类支持使用 Lambda 表达式。\",\"在 LambdaQueryWrapper 中，我们可以使用 Role::getRoleName 来指定查询条件的字段。而在 QueryWrapper 中，我们需要使用字符串 \\\"role_name\\\" 来指定数据库表中的字段名。\",\"TODO 搞不懂这里的第一个参数的Lambda为什么拿的是@TableField(\\\"role_name\\\")的值\",\"//创建条件构造器对象 LambdaQueryWrapper<Role> wrapper = new LambdaQueryWrapper<>(); //TODO 搞不懂这里的第一个参数的Lambda为什么拿的是@TableField(\\\"role_name\\\")的值 private String roleName; wrapper.like(Role::getRoleName,roleName); \",\"😡TODO：这两个类的like 方法是通过继承父类 AbstractWrapper 来获得，具体在这两个类中也没看到重写，不清楚怎么弄的？？？ ctrl+p方法签名里面有AnnotationFunction，但是实际点击源码看没看到（ctrl+左键看不到！）\",\"既然这两个类都是通过继承父类AbstractWrapper获得的like方法，那么父类怎么区分这两个类分别给他们各自的like实现\",\"这种差异是因为 LambdaQueryWrapper 类在设计时针对 Lambda 表达式进行了特殊处理，以提供更加便捷的语法。而 QueryWrapper 类则是基于传统的字符串字段名的方式。\",\"image-20230902215155311\"]},\"744\":{\"h\":\"一、Lambda表达式简介\"},\"745\":{\"h\":\"什么是Lambda？\",\"t\":[\"Lambda是JAVA 8添加的新特性，说白了，Lambda是一个匿名函数\"]},\"746\":{\"h\":\"为什么使用Lambda\",\"t\":[\"使用Lambda表达式可以对一个接口的方法进行非常简洁的实现\"]},\"747\":{\"h\":\"Lambda对接口的要求\",\"t\":[\"虽然可以使用Lambda表达式对某些接口进行简单的实现，但是并不是所有的接口都可以用Lambda表达式来实现，要求接口中定义的必须要实现的抽象方法只能是一个\",\"在JAVA8中 ，对接口加了一个新特性：default 可以使用default对接口方法进行修饰，被修饰的方法在接口中可以默认实现 \"]},\"748\":{\"h\":\"@FunctionalInterface\",\"t\":[\"修饰函数式接口的，接口中的抽象方法只有一个\",\"问了ChatGPT：常用的\",\"Supplier<T>：该接口不接受任何参数，返回一个值。它可以用来创建和返回对象，类似于工厂方法。\",\"Consumer<T>：该接口接受一个参数，但不返回任何值。它可以用来对数据进行消费，例如打印或写入文件等操作。\",\"Function<T, R>：该接口接受一个参数，并返回一个结果。它可以用来对数据进行转换，例如将一个字符串转换成一个整数。\",\"BiFunction<T, U, R>：两个参数，一个结果\",\"Predicate<T>：该接口接受一个参数，返回一个布尔值。它可以用来进行条件判断，例如判断一个数是否大于某个阈值。\"]},\"749\":{\"h\":\"二、Lambda的基础语法\"},\"750\":{\"h\":\"1.语法\",\"t\":[\"// 1.Lambda表达式的基础语法 // Lambda是一个匿名函数 一般关注的是以下两个重点 // 参数列表 方法体 /** * （）：用来描述参数列表 * {}：用来描述方法体 有时可以省略 * ->: Lambda运算符 读作goes to * 例 Test t=()->{System.out.println(\\\"hello word\\\")}; 大括号可省略 */ \"]},\"751\":{\"h\":\"2.创建多个接口\",\"t\":[\"/** * 无参数无返回值接口 * @author Alan * @version 1.0 * @date 2020-05-27 10:24 */ @FunctionalInterface public interface LambdaNoneReturnNoneParmeter { void test(); } /** * 无返回值有单个参数 * @author Alan * @version 1.0 * @date 2020-05-27 10:26 */ @FunctionalInterface public interface LambdaNoneReturnSingleParmeter { void test(int n); } /** * 无返回值 多个参数的接口 * @author Alan * @version 1.0 * @date 2020-05-27 10:27 */ @FunctionalInterface public interface LambdaNoneReturnMutipleParmeter { void test(int a,int b); } /** * 有返回值 无参数接口 * @author Alan * @version 1.0 * @date 2020-05-27 10:28 */ @FunctionalInterface public interface LambdaSingleReturnNoneParmeter { int test(); } /** * 有返回值 有单个参数的接口 * @author Alan * @version 1.0 * @date 2020-05-27 10:29 */ @FunctionalInterface public interface LambdaSingleReturnSingleParmeter { int test(int n); } /** * 有返回值 有多个参数的接口 * @author Alan * @version 1.0 * @date 2020-05-27 10:30 */ @FunctionalInterface public interface LambdaSingleReturnMutipleParmeter { int test(int a,int b); } \"]},\"752\":{\"h\":\"3.创建测试类\",\"t\":[\"package com.alan.learn.syntax; import com.alan.learn.interfaces.*; /** * @author Alan * @version 1.0 * @date 2020-05-27 10:33 */ public class Syntax1 { public static void main(String[] args) { // 1.Lambda表达式的基础语法 // Lambda是一个匿名函数 一般关注的是以下两个重点 // 参数列表 方法体 /** * （）：用来描述参数列表 * {}：用来描述方法体 * ->: Lambda运算符 读作goes to */ // 无参无返回 LambdaNoneReturnNoneParmeter lambda1=()->{ System.out.println(\\\"hello word\\\"); }; lambda1.test(); // 无返回值 单个参数 LambdaNoneReturnSingleParmeter lambda2=(int n)->{ System.out.println(\\\"参数是：\\\"+n); }; lambda2.test(10); // 无返回值 多个参数 LambdaNoneReturnMutipleParmeter lambda3=(int a,int b)->{ System.out.println(\\\"参数和是：\\\"+(a+b)); }; lambda3.test(10,12); // 有返回值 无参数 LambdaSingleReturnNoneParmeter lambda4=()->{ System.out.println(\\\"lambda4：\\\"); return 100; }; int ret=lambda4.test(); System.out.println(\\\"返回值是：\\\"+ret); // 有返回值 单个参数 LambdaSingleReturnSingleParmeter lambda5=(int a)->{ return a*2; }; int ret2= lambda5.test(3); System.out.println(\\\"单个参数，lambda5返回值是:\\\"+ret2); //有返回值 多个参数 LambdaSingleReturnMutipleParmeter lambda6=(int a,int b)->{ return a+b; }; int ret3=lambda6.test(12,14); System.out.println(\\\"多个参数，lambda6返回值是：\\\"+ret3); } } 输出结果： hello word 参数是：10 参数和是：22 lambda4： 返回值是：100 单个参数，lambda5返回值是:6 多个参数，lambda6返回值是：26 \"]},\"753\":{\"h\":\"三、语法精简\",\"t\":[\"针对上述基础语法的精简\"]},\"754\":{\"h\":\"1.参数类型精简\",\"t\":[\"/** * 语法精简 * 1.参数类型 * 由于在接口的抽象方法中，已经定义了参数的数量类型 所以在Lambda表达式中参数的类型可以省略 * 备注：如果需要省略类型，则每一个参数的类型都要省略，千万不要一个省略一个不省略 */ LambdaNoneReturnMutipleParmeter lambda1=(int a,int b)-> { System.out.println(\\\"hello world\\\"); }; 可以精简为: LambdaNoneReturnMutipleParmeter lambda1=(a,b)-> { System.out.println(\\\"hello world\\\"); }; \"]},\"755\":{\"h\":\"2.参数小括号精简\",\"t\":[\"/** * 2.参数小括号 * 如果参数列表中，参数的数量只有一个 此时小括号可以省略 */ LambdaNoneReturnSingleParmeter lambda2=(a)->{ System.out.println(\\\"hello world\\\"); }; 可以精简为: LambdaNoneReturnSingleParmeter lambda2= a->{ System.out.println(\\\"hello world\\\"); }; \"]},\"756\":{\"h\":\"3.方法大括号精简\",\"t\":[\"/** * 3.方法大括号 * 如果方法体中只有一条语句，此时大括号可以省略 */ LambdaNoneReturnSingleParmeter lambda3=a->{ System.out.println(\\\"hello world\\\"); }; 可以精简为: LambdaNoneReturnSingleParmeter lambda3=a->System.out.println(\\\"hello world\\\"); \"]},\"757\":{\"h\":\"4.\",\"t\":[\"/** * 4.如果方法体中唯一的一条语句是一个返回语句 * 贼省略大括号的同时 也必须省略return */ LambdaSingleReturnNoneParmeter lambda4=()->{ return 10; }; 可以精简为: LambdaSingleReturnNoneParmeter lambda4=()->10; \"]},\"758\":{\"h\":\"5.多参数，有返回值 精简\",\"t\":[\"LambdaSingleReturnNoneParmeter lambda4=(a,b)->{ return a+b; }; 可以精简为: LambdaSingleReturnMutipleParmeter lambda5=(a,b)->a+b; \"]},\"759\":{\"h\":\"四、Lambda语法进阶\"},\"760\":{\"h\":\"1.方法引用(普通方法与静态方法)\",\"t\":[\"在实际应用过程中，一个接口在很多地方都会调用同一个实现，例如：\",\"LambdaSingleReturnMutipleParmeter lambda1=(a,b)->a+b; LambdaSingleReturnMutipleParmeter lambda2=(a,b)->a+b; \",\"这样一来每次都要写上具体的实现方法 a+b，如果需求变更，则每一处实现都需要更改，基于这种情况，可以将后续的是实现更改为已定义的 方法，需要时直接调用就行\"]},\"761\":{\"h\":\"语法：\",\"t\":[\"/** *方法引用： * 可以快速的将一个Lambda表达式的实现指向一个已经实现的方法 * 方法的隶属者 如果是静态方法 隶属的就是一个类 其他的话就是隶属对象 * 语法：方法的隶属者::方法名 (Classname::methodName) * 注意： * 1.引用的方法中，参数数量和类型一定要和接口中定义的方法一致 * 2.返回值的类型也一定要和接口中的方法一致 */ \",\"image\",\"第一个参数是作为下面的方法调用者出现\"]},\"762\":{\"h\":\"例：\",\"t\":[\"package com.alan.learn.syntax; import com.alan.learn.interfaces.LambdaSingleReturnSingleParmeter; /** * @author Alan * @version 1.0 * @date 2020-05-27 11:48 */ public class Syntax3 { public static void main(String[] args) { LambdaSingleReturnSingleParmeter lambda1=a->a*2; LambdaSingleReturnSingleParmeter lambda2=a->a*2; LambdaSingleReturnSingleParmeter lambda3=a->a*2; //简化 LambdaSingleReturnSingleParmeter lambda4=a->change(a); //方法引用 LambdaSingleReturnSingleParmeter lambda5=Syntax3::change; } /** * 自定义的实现方法 */ private static int change(int a){ return a*2; } } \"]},\"763\":{\"h\":\"2.方法引用(构造方法)\",\"t\":[\"目前有一个实体类\",\"public class Person { public String name; public int age; public Person() { System.out.println(\\\"Person的无参构造方法执行\\\"); } public Person(String name, int age) { this.name = name; this.age = age; System.out.println(\\\"Person的有参构造方法执行\\\"); } } \",\"需求\",\"两个接口，各有一个方法，一个接口的方法需要引用Person的无参构造，一个接口的方法需要引用Person的有参构造 用于返回两个Person对象，例：\",\"interface PersonCreater{ //通过Person的无参构造实现 Person getPerson(); } interface PersonCreater2{ //通过Person的有参构造实现 Person getPerson(String name,int age); } \",\"那么可以写作：\",\"public class Syntax4 { public static void main(String[] args) { PersonCreater creater=()->new Person(); //引用的是Person的无参构造 //PersonCreater接口的方法指向的是Person的方法 PersonCreater creater1=Person::new; //等价于上面的()->new Person() //实际调用的是Person的无参构造 相当于把接口里的getPerson()重写成new Person()。 Person a=creater1.getPerson(); //引用的是Person的有参构造 PersonCreater2 creater2=Person::new; Person b=creater2.getPerson(\\\"张三\\\",18); } } \",\"注意：是引用无参构造还是引用有参构造 在于接口定义的方法参数\"]},\"764\":{\"h\":\"五、综合练习\"},\"765\":{\"h\":\"1.集合排序案例\",\"t\":[\"package com.alan.exercise; import com.alan.learn.data.Person; import java.util.ArrayList; /** * 集合排序案例 * @author Alan * @version 1.0 * @date 2020-05-27 15:08 */ public class Exercise1 { public static void main(String[] args) { //需求：已知在一个ArrayList中有若干各Person对象，将这些Person对象按照年龄进行降序排列 ArrayList<Person> list=new ArrayList<>(); list.add(new Person(\\\"张三\\\",10)); list.add(new Person(\\\"李四\\\",12)); list.add(new Person(\\\"王五\\\",13)); list.add(new Person(\\\"赵六\\\",14)); list.add(new Person(\\\"李雷\\\",11)); list.add(new Person(\\\"韩梅梅\\\",8)); list.add(new Person(\\\"jack\\\",10)); System.out.println(\\\"排序前：\\\"+list); //将排列的依据传入 具体的方法指向的是 内部元素的age相减 sort会依据结果的正负进行降序排列 //sort 使用提供的 Comparator对此列表进行排序以比较元素。 list.sort((o1, o2) -> o2.age-o1.age); System.out.println(\\\"排序后：\\\"+list); } } \"]},\"766\":{\"h\":\"2.Treeset排序案例\",\"t\":[\"package com.alan.exercise; import com.alan.learn.data.Person; import java.util.TreeSet; /** * @author Alan * @version 1.0 * @date 2020-05-27 15:37 */ public class Exercise2 { public static void main(String[] args) { /**Treeset 自带排序 * 但是现在不知道Person谁大谁小无法排序 * 解决方法： * 使用Lambda表达式实现Comparator接口，并实例化一个TreeSet对象 * 注意：在TreeSet中如果Comparator返回值是 0 会判断这是两个元素是相同的 会进行去重 * TreeSet<Person> set=new TreeSet<>((o1, o2) -> o2.age-o1.age); * 这个获取的对象打印会少一个Person * 此时我们将方法修改 */ TreeSet<Person> set=new TreeSet<>((o1, o2) ->{ if(o1.age>=o2.age){ return -1; }else { return 1; } }); set.add(new Person(\\\"张三\\\",10)); set.add(new Person(\\\"李四\\\",12)); set.add(new Person(\\\"王五\\\",13)); set.add(new Person(\\\"赵六\\\",14)); set.add(new Person(\\\"李雷\\\",11)); set.add(new Person(\\\"韩梅梅\\\",8)); set.add(new Person(\\\"jack\\\",10)); System.out.println(set); } } \"]},\"767\":{\"h\":\"3.集合的遍历\",\"t\":[\"package com.alan.exercise; import java.util.ArrayList; import java.util.Collections; /** * 集合的遍历 * @author Alan * @version 1.0 * @date 2020-05-27 15:52 */ public class Exercise3 { public static void main(String[] args) { ArrayList<Integer> list=new ArrayList<>(); Collections.addAll(list,1,2,3,4,5,6,7,8,9); /** * list.forEach(Consumer<? super E> action) * api文档解释： 对 集合中的每个元素执行给定的操作，直到所有元素都被处理或动作引发异常。 * 将集合中的每一个元素都带入到接口Consumer的方法accept中 然后方法accept指向我们的引用 * 输出集合中的所有元素 * list.forEach(System.out::println); */ //输出集合中所有的偶数 list.forEach(ele->{ if(ele%2==0){ System.out.println(ele); } }); } } \"]},\"768\":{\"h\":\"4.删除集合中满足条件的元素\",\"t\":[\"package com.alan.exercise; import com.alan.learn.data.Person; import java.util.ArrayList; /** * 删除集合中满足条件的元素 * @author Alan * @version 1.0 * @date 2020-05-27 16:05 */ public class Exercise4 { public static void main(String[] args) { ArrayList<Person> list=new ArrayList<>(); list.add(new Person(\\\"张三\\\",10)); list.add(new Person(\\\"李四\\\",12)); list.add(new Person(\\\"王五\\\",13)); list.add(new Person(\\\"赵六\\\",14)); list.add(new Person(\\\"李雷\\\",11)); list.add(new Person(\\\"韩梅梅\\\",8)); list.add(new Person(\\\"jack\\\",10)); //删除集合中年龄大于12的元素 /** * 之前迭代器的做法 * ListIterator<Person> it = list.listIterator(); * while (it.hasNext()){ * Person ele=it.next(); * if(ele.age>12){ * it.remove(); * } * } */ /** * lambda实现 * 逻辑 * 将集合中的每一个元素都带入到接口Predicate的test方法中， * 如果返回值是true，则删除这个元素 */ list.removeIf(ele->ele.age>10); System.out.println(list); } } \"]},\"769\":{\"h\":\"5.开辟一条线程 做一个数字的输出\",\"t\":[\"package com.alan.exercise; /** * 需求： * 开辟一条线程 做一个数字的输出 * @author Alan * @version 1.0 * @date 2020-05-27 16:17 */ public class Exercise5 { public static void main(String[] args) { /** * 通过Runnable 来实例化线程 */ Thread t=new Thread(()->{ for(int i=0;i<100;i++){ System.out.println(i); } }); t.start(); } } \"]},\"770\":{\"h\":\"六、系统内置的函数式接口\",\"t\":[\"package com.alan.functional; import java.util.function.*; /** * 系统内置的一些函数式接口 * @author Alan * @version 1.0 * @date 2020-05-27 16:23 */ public class FunctionalInterface { public static void main(String[] args) { // Predicate<T> ： 参数是T 返回值boolean // 在后续如果一个接口需要指定类型的参数，返回boolean时可以指向 Predicate // IntPredicate int -> boolean // LongPredicate long -> boolean // DoublePredicate double -> boolean // Consumer<T> : 参数是T 无返回值(void) // IntConsumer int ->void // LongConsumer long ->void // DoubleConsumer double ->void // Function<T,R> : 参数类型T 返回值R // IntFunction<R> int -> R // LongFunction<R> long -> R // DoubleFunction<R> double -> R // IntToLongFunction int -> long // IntToDoubleFunction int -> double // LongToIntFunction long -> int // LongToDoubleFunction long -> double // DoubleToLongFunction double -> long // DoubleToIntFunction double -> int // Supplier<T> : 参数 无 返回值T // UnaryOperator<T> :参数T 返回值 T // BiFunction<T,U,R> : 参数 T、U 返回值 R // BinaryOperator<T> ：参数 T、T 返回值 T // BiPredicate<T,U> : 参数T、U 返回值 boolean // BiConsumer<T,U> : 参数T、U 无返回值 /** * 常用的 函数式接口 * Predicate<T>、Consumer<T>、Function<T,R>、Supplier<T> */ } } \"]},\"771\":{\"h\":\"七、Lambda闭包\",\"t\":[\"package com.alan.closure; import java.util.function.Supplier; /** * @author Alan * @version 1.0 * @date 2020-05-27 16:59 */ public class ClosureDemo { public static void main(String[] args) { /** * lambda的闭包会提升包围变量的生命周期 * 所以局部变量 num在getNumber()方法内被 get()引用 不会在getNumber()方法执行后销毁 * 这种方法可以在外部获取到某一个方法的局部变量 */ int n=getNumber().get(); System.out.println(n); } private static Supplier<Integer> getNumber(){ int num=10; /** * Supplier supplier=()->num; * return supplier; */ return ()->{ return num; }; } } ************************************************************************* package com.alan.closure; import java.util.function.Consumer; /** * @author Alan * @version 1.0 * @date 2020-05-27 17:20 */ public class ClosureDemo2 { public static void main(String[] args) { int a=10; Consumer<Integer> c=ele->{ System.out.println(a+1); //System.out.println(ele); //System.out.println(a++); 会报错 //在lambda中引用局部变量 这个变量必须是一个常量 }; //a++; 这样也会导致内部报错 //如果在内部已经引用局部变量 参数传递后 打印的还是 10 c.accept(1); } } \"]},\"772\":{\"h\":\"stream流可以收集多次吗？\",\"t\":[\"stream属于管道流，只能消费一次，当第一个stream流调用完毕方法,数据就会流转到下一个Stream上\",\"而这时第一个stream流已经使用完毕，就会关闭了，所以第一个Stream流就不能再调用方法\"]},\"773\":{\"h\":\"stream().map()时，stream是否已经被操作了？\",\"t\":[\"不是，stream流属于惰式执行。stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。\",\"作者：raxcl\\n链接：https://www.nowcoder.com/discuss/465219671411773440?sourceSSR=users\\n来源：牛客网\"]},\"774\":{\"h\":\"Stream\"},\"775\":{\"h\":\"* flatMap()\",\"t\":[\"在 Java 中，flatMap() 是 Stream API 中的一个方法，它用于将流中的每个元素映射为一个流，然后将这些流合并为单个流。它的作用是将多个流扁平化为一个流，常用于处理嵌套集合或映射的情况。\",\"List<List<Integer>> nestedList = Arrays.asList( Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9) ); List<Integer> flattenedList = nestedList.stream() .flatMap(List::stream) .collect(Collectors.toList()); System.out.println(flattenedList); \"]},\"776\":{\"h\":\"* forEach()\",\"t\":[\"list.stream().forEach(System.out::println); \",\"取两个集合的某个字段的并集\",\"husbands.stream().flatMap( husbands1 -> wives.stream() .filter(wives1 -> husbands1.getFamilyId().equals(wives1.getFamilyId())) //不理解这里husbands1怎么就绑上了wives1，而不是按照husbands1 list 取 .map(wives1 -> husbands1.getUserName()+\\\"-\\\"+wives1.getUserName())) .collect(Collectors.toList()).forEach(System.out::println); \"]},\"777\":{\"h\":\"InterviewMV\",\"t\":[\"Title 为评论区别人的笔记，很详细\",\"这一季基础的东西，每一集一道面试题。我全是错的，没对过一道 230920\"]},\"778\":{\"h\":\"\",\"t\":[\"栈帧（Stack Frame）： \",\"栈帧是用于支持方法调用和方法执行的数据结构，也称为方法帧或活动记录。\",\"每个方法在运行时都会创建一个对应的栈帧，用于存储局部变量、操作数栈、动态链接、方法返回地址等信息。\",\"栈帧以后进先出（LIFO）的方式组织在线程的虚拟机栈中，每个线程都有自己的虚拟机栈。\",\"当一个方法被调用时，会创建一个新的栈帧并压入虚拟机栈顶，当方法执行结束后，对应的栈帧会被弹出。\",\"程序计数器（PC）：XD 可以理解为行号指示器\",\"i++ => i=i+1 i = i++ => i=1 题目： int i = 1; i = i++; int j = i++; int k = i + ++i * i++; System.out.println(\\\"i=\\\" + i); System.out.println(\\\"j=\\\" + j); System.out.println(\\\"k=\\\" + k); \",\"i = i++;\",\"XD: i++也是一个表达式，是有返回值的，返回值就是i自增前的值。因此执行i = i++后，虽然i自增为2，但是又被i++的返回值给重新赋值了\",\" 2: iload_1 3: iinc 1, 1 6: istore_1 \",\"image-20230915223439680\"]},\"779\":{\"h\":\"* Singleton单例模式\",\"t\":[\"饿汉式: 在类初始化时直接创建实例对象,不管你是否需要这个对象都会创建 饿汉式: 直接创建对象,不存在线程安全问题\",\"如果是饿汉式,枚举形式最简单如果是懒汉式,静态内部类形式最简单\",\"直接实例化饿汉式(简洁直观)\",\"public class Singleton1 { public static final Singleton1 INSTANCE = new Singleton1(); private Singleton1() {} } \",\"枚举式(最简洁) => 同上是一样的\",\"/** * 枚举类型:表示该类型的对象是有限的几个 * 我们可以限定为一个,就成了单例 */ public enum Singleton2 { INSTANCE } \",\"静态代码块饿汉式(适合复杂实例化)\",\"/** * 可能想初始化一些变量，不要构造参数给值(这样要改代码不灵活)。。。是配置文件给值 * 文件的位置在src下的才能用类加载器加载 */ public class Singleton3 { public static final Singleton3 INSTANCE; private String info; static { try { Properties pro = new Properties(); pro.load(Singleton3.class.getClassLoader().getResourceAsStream(\\\"single.properties\\\")); INSTANCE = new Singleton3(pro.getProperty(\\\"info\\\")); } catch (IOException e) { throw new RuntimeException(e); } } private Singleton3(String info){ this.info = info; } } \",\"PS：注意，以上三个的属性都是 final 修饰！！！但是懒汉不是\",\"懒汉式:延迟创建对象\",\"线程不安全(适用于单线程) 需要学习多线程使用!!!\",\"public class Singleton4 { static Singleton4 instance; private Singleton4() {} public static Singleton4 getInstance() { if (instance == null) { instance = new Singleton4(); } return instance; } } \",\"线程安全(适用于多线程)\",\"TODO XD: 2024/01/12 貌似有问题，具体看 JUC 笔记中的 volatile（不加会有指令重排问题！！！）\",\"uniqueInstance 采用 volatile 关键字修饰也是很有必要的， uniqueInstance = new Singleton(); 这段代码其实是分为三步执行：\",\"为 uniqueInstance 分配内存空间\",\"初始化 uniqueInstance\",\"将 uniqueInstance 指向分配的内存地址\",\"但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1->3->2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。\",\"著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html\",\"public class Singleton5 { /** * 说白了，就是在上面的基础上加 synchronized * XD: synchronized 下面的这个 if 干什么用的？ 【双重检查锁（Double-Checked Locking）】 * 因为多个线程可以突破第一个 if 是所以下面也要 if */ static Singleton5 instance; private Singleton5() {} public static Singleton5 getInstance() { if (instance == null) { synchronized (Singleton5.class) { if (instance == null) { instance = new Singleton5(); } return instance; } } return instance; } } \",\"静态内部类形式(适用于多线程)\",\"/** * 推荐静态内部类方式，既能懒加载，又保证了线程安全 */ public class Singleton6 { /** * 1、内部类被加载和初始化时，才创建INSTANCE实例对象 * 2、静态内部类不会自动创建,随着外部类的加载初始化而初始化，他是要单独去加载和实例化的 * 3、因为是在内部类加载和初始化时，创建的，因此线程安全 */ private Singleton6(){} public static class Inner{ private static final Singleton6 INSTANCE = new Singleton6(); } public static Singleton6 getInstance() { return Inner.INSTANCE; } } \"]},\"780\":{\"h\":\"* 方法参数传递机制\",\"t\":[\"String的不可变性我又没理解！！！ 已经无数次 只对了数组，我真废物阿\",\"String、包装类等对象的不可变性（本来像对象这种都会跟着变，但这两者是会产生新对象所以。。） XD：可以参考下构造 this.a=a 之所以要这一步可能就是因为这样 方法一执行完，形参都没的情况 所以要赋值出去\",\"public class Exam4 { public static void main(String[] args) { int i = 1; String str = \\\"hello\\\"; Integer num = 200; int[] arr = {1,2,3,4,5}; MyData my = new MyData(); change(i,str,num,arr,my); System.out.println(\\\"i= \\\" + i); System.out.println(\\\"str= \\\" + str); System.out.println(\\\"num= \\\" + num); System.out.println(\\\"arr= \\\" + Arrays.toString(arr)); System.out.println(\\\"my.a= \\\" + my.a); } public static void change(int j, String s, Integer n, int[] a, MyData m) { j += 1; s += \\\"world\\\"; n += 1; a[0] += 1; m.a += 1; } } class MyData { int a = 10; } \",\"答案：\",\"arr my变了 i= 1 str= hello num= 200 arr= [2, 2, 3, 4, 5] my.a= 11 \",\"变量初始化 以及运算时 栈堆内存的变化\"]},\"781\":{\"h\":\"LinuxRef\"},\"782\":{\"h\":\"Shell CLI\",\"t\":[\"https://wangchujiang.com/linux-command/ 搜 Linux 命令解释好使！！！\",\"创建并写入内容 echo \\\"test\\\" > file1.txt\",\"⭐️ echo \\\"547061946\\\" | sudo -S <command>\",\"在这个命令中，<command> 是你要以超级用户身份运行的实际命令。\",\"将密码作为输入通过管道传递给 sudo 命令，并使用 -S 选项我猜是 Standard 读取密码。\",\"export vs set export 类似 win 的 set MY_VARIABLE=value，设置一个当前窗口会话的临时变量\",\"注意：export https_proxy=http://127.0.0.1:7890 。。。只在当前 cmd 中生效，一开始不知道！！！\",\"⭐️ export -p 显示所有环境变量\",\"⭐️ $ 符号通常用于引用环境变量的值，echo $HOME 有一个HOME的环境变量\",\"⭐️ 在macOS终端中，可以使用以下命令来查看当前使用的shell：bash\",\"⭐️ linux 自带任务轮询 crontab -e\",\"crond 是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似\",\"nohup java -jar myblog-1.jar --server.port=80 &\",\"tail -f nohup.out\",\"就可以实时看到这个 jar 的输出运行日志！！！（\\\"f\\\"代表\\\"follow\\\"）\",\"df -h 可以查linux内存占用，一般看类似 /dev/vda1 ‘/’开头的路径的容量就行！！！\",\"内存不足会导致的场景-XD均已实践以下两点：\",\"xftp软件上传文件不到云服务器\",\"mysql 无法创建数据库\",\"free -h\",\"which nginx\",\"如果您不确定 Nginx 的可执行文件在哪个目录下，可以通过在终端中输入 which nginx 命令来查找。该命令会返回 Nginx 可执行文件的完整路径。 Nginx 的可执行文件通常位于 /usr/sbin/nginx 目录下 注意不是/usr/bin/nginx\",\"whereis 找文件\",\"find / -type d -name \\\"*redis*\\\"找文件夹\",\"⭐️ pkill = 进程名 //pkill nginx #杀死所有的nginx\",\"kill -9 进程ID（PID）\",\"⭐️ lsof -i:8080 //查看8080端口占用\",\"ps -e|grep java\",\"netstat -nlp |grep :80 # 看指定端口 pid，方便后面 kill\",\"cat access.log |grep 'payed'\",\"vim\",\"/ 关键字，回车即可。此为从文档当前位置向下查找关键字，按n键查找关键字下一个位置；\",\"？关键字，回车即可。此为从文档挡圈位置向上查找关键字，按n键向上查找关键字；\"]},\"783\":{\"h\":\"Tips\"},\"784\":{\"h\":\"一般写日志输出 sh test.sh > log.txt 其实 > 就等同于 1>\",\"t\":[\"首先了解下1和2在Linux中代表什么 在Linux系统中0 1 2是一个文件描述符\",\"名称 代码 操作符 Java中表示 Linux 下文件描述符（Debian 为例)\",\"名称\",\"代码\",\"操作符\",\"Java中表示\",\"Linux 下文件描述符（Debian 为例)\",\"标准输入(stdin)\",\"0\",\"< 或 <<\",\"System.in\",\"/dev/stdin -> /proc/self/fd/0 -> /dev/pts/0\",\"标准输出(stdout)\",\"1\",\">, >>, 1> 或 1>>\",\"System.out\",\"/dev/stdout -> /proc/self/fd/1 -> /dev/pts/0\",\"标准错误输出(stderr)\",\"2\",\"2> 或 2>>\",\"System.err\",\"/dev/stderr -> /proc/self/fd/2 -> /dev/pts/0\",\"运行文件，应当前面带上目录。。。不然就是从环境变量找了\",\"image-20230531110912384\"]},\"785\":{\"h\":\"Linux是多用户操作系统\",\"t\":[\"操作系统按用户数量可以分为单用户系统和多用户系统。比如Windows就是典型的单用户系统，Linux就是典型的多用户系统。\",\"有人可能会问，我的windows下有两个用户，怎么是单用户系统？Windows系统可以存在多个用户，但是多用户不可以同时在线操作（你见过一个pc两个屏幕，分别登录两个用户么？）。Linux的多用户是指可多用户同时在线，每打开一个终端就可以用一个新的用户登录。\",\"我明白你想了解哪些操作系统允许多个用户同时在线。\",\"在常见的桌面操作系统中，以下操作系统通常允许多个用户同时在线：\",\"Windows Server 版本：Windows Server 版本（如 Windows Server 2019）通常支持多个远程用户同时登录和操作系统。这使得多个用户可以通过远程桌面服务 (Remote Desktop Services) 或其他远程连接方式访问服务器，并在同一时间内使用服务器的资源。\",\"Linux：Linux 是一个多用户操作系统，支持多个用户同时登录和操作。用户可以通过 SSH (Secure Shell) 或其他远程登录方式访问 Linux 服务器，并在同一时间内使用服务器的资源。\",\"macOS：macOS 也是一个多用户操作系统，允许多个用户同时登录和操作。每个用户可以通过登录到其自己的用户账户，并在同一时间内使用计算机的资源。\",\"需要注意的是，对于桌面操作系统（如 Windows 10、macOS），它们通常限制了同时登录的用户数。默认情况下，Windows 10 通常只允许一个用户登录，而 macOS 也有类似的限制。但是，可以通过特定的配置或第三方工具来扩展这些限制，以支持多个用户同时登录。\",\"综上所述，Windows Server 版本和许多 Linux 发行版通常支持多个用户同时在线操作。对于桌面操作系统，虽然它们也支持多用户，但通常有登录限制，除非进行特定的配置或使用第三方工具。\"]},\"786\":{\"h\":\"权限\",\"t\":[\"Linux 文件基本属性：看完就知道文件属性了，重点看里面的两幅图！\",\"img\",\"文件的权限字符为： -rwxrwxrwx ， 这九个权限是三个三个一组的！\",\"其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：\",\"r:4\",\"w:2\",\"x:1\",\"每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： -rwxrwx--- 分数则是：\",\"owner = rwx = 4+2+1 = 7\",\"group = rwx = 4+2+1 = 7\",\"others= --- = 0+0+0 = 0\",\"所以等一下我们设定权限的变更时，该文件的权限数字就是 770。变更权限的指令 chmod 的语法是这样的：\",\"chmod [-R] xyz 文件或目录 chmod -R 770 /mydata/elasticsearch/ \",\"常用：\",\"# 批量改文件夹权限 chmod -R 777 /mydata/elasticsearch/ \"]},\"787\":{\"h\":\"Scene\",\"t\":[\"备份数据库：#介绍了有问题的原因\",\"d=`date +%Y%m%d%H%M` docker exec mysql mysqldump -uroot -pa59964360 --single-transaction --databases upupor > /home/minio/data/blog/SQLBackup/upupor${d}.sql #此处再接命令会导致上面命令upupor${d}.sql文件名多换行 echo hh gzip -c /home/minio/data/blog/SQLBackup/upupor${d}.sql > /home/minio/data/blog/SQLBackup/upupor${d}.sql.gz rm -rf \\\"/home/minio/data/blog/SQLBackup/upupor${d}.sql\\\" \",\"为什么单独运行java -cp ./:../app/ com.bokesoft.yes.dev.DevSuite会报以下错误zsh: no matches found: ./:../app/ 但是把这行单独放到一个.sh文件运行就又可以\",\"这个错误是由于在单独运行java -cp ./*:../app/* com.bokesoft.yes.dev.DevSuite命令时，所使用的shell（比如zsh）会对通配符（*）进行扩展，但是在当前目录下没有匹配的文件时，会报错。\",\"在单独执行命令时，如果当前目录下没有符合./*和../app/*通配符模式的文件或目录，shell会报错并显示\\\"zsh: no matches found\\\"。\",\"然而，当你将这行命令放入一个.sh文件中并执行该文件时，shell会将整个命令作为字符串传递给解释器，并且不会对通配符进行扩展。因此，在脚本文件中执行时，通配符不会引发错误。\",\"如果你想在命令行中单独运行这个命令而不报错，你可以使用引号将通配符模式括起来，以阻止shell扩展通配符。例如：\",\"java -cp './*:../app/*' com.bokesoft.yes.dev.DevSuite //:号应该是分隔符，系统可能都不一样 这里后的app好像没用就用bat文件里的就行 \",\"这样，通配符将被视为字符串的一部分，而不会被shell进行扩展。\"]},\"788\":{\"h\":\"Linux Docker\",\"t\":[\"以前碰过 Redis 没设密码被挖矿，现在设成简单密码依旧。。。\"]},\"789\":{\"h\":\"\",\"t\":[\"实测用idea操作Docker比用 xshell 舒服太多了！！！\",\"理解成 Linux 和 Docker容器（可以理解为一个完整的Linux【容器的 bin/bash 里没有 wget，外面 linux有】）是隔离的，所以需要端口映射、目录挂载！！！\",\"一个镜像可以创建多个容器\",\"容器可 --restart=always\",\"当你在Docker容器中进行文件挂载时，宿主机必须存在这个文件 实测目录不用会自己新建\",\"curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\",\"systemctl start docker\",\"docker search jdk\",\"为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。\",\"{ \\\"registry-mirrors\\\": [\\\"https://registry.docker-cn.com\\\",\\\"https://pee6w651.mirror.aliyuncs.com\\\"] } \",\"修改保存后重启 Docker 以使配置生效。\",\"systemctl restart docker\"]},\"790\":{\"h\":\"1.2.JAVA\",\"t\":[\"拉取指定的版本 docker pull java:8\",\"运行上面拉去的镜像成容器 docker run -d -it --name java java:8 【必须加 -it 否则STATUS为Exited】\",\"-d：（daemon） 守护进程【后台运行】 \",\"如果不加-d选项，表示在前台（foreground）模式下运行容器。这意味着容器的输出将直接显示在当前终端上，并且您将无法继续在该终端中执行其他命令，直到容器停止。【前台运行】\",\"-it：表示分配一个伪终端（pseudo-TTY），并将其与容器的标准输入（stdin）关联起来，以便可以与容器进行交互。 \",\"-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。\",\"这意味着你可以在启动的Java 8容器中进行交互式操作\",\"xd 实测如果我不加这个容器run完状态是 exit\",\"interactive + tty（Linux 终端(TTY). TTY 是Teletype 或Teletypewriter 的缩写） 我这里理解为Terminal更好记 \",\"shell 交互命令的接口 所以最后还可以给 bash | /bin/bash\",\"--name java：表示为容器指定一个名称，这里命名为\\\"java\\\"。\",\"java:8：表示使用名为\\\"java\\\"的Docker镜像的版本8。\",\"docker exec -it java bash\"]},\"791\":{\"h\":\"1.3.MySQL\",\"t\":[\"docker pull mysql:5.7\",\"docker run -p 3306:3306 --name mysql \\\\ -v /root/mysql/log:/var/log/mysql \\\\ -v /root/mysql/data:/var/lib/mysql \\\\ -v /root/mysql/conf:/etc/mysql \\\\ -e MYSQL_ROOT_PASSWORD=123456 \\\\ -d mysql:5.7 \",\"docker exec -it mysql bash\"]},\"792\":{\"h\":\"修改密码\",\"t\":[\"修改默认密码 ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password'; 其中‘new password’替换成你要设置的密码，注意:密码设置必须要大小写字母数字和特殊符号（,/';:等）,不然不能配置成功\",\"MySQL版本5.7.6版本以前用户可以使用如下命令：实测有用：场景提示密码过期需修改\",\"mysql> SET PASSWORD = PASSWORD('123456'); \"]},\"793\":{\"h\":\"开启mysql的远程访问-Navicat\",\"t\":[\"执行以下命令开启远程访问限制（注意：下面命令开启的IP是 所有的，如要开启192.168.0.1，用IP代替%）：grant all privileges on *.* to 'root'@'%' identified by 'password' with grant option;\",\"刷新权限表 flush privileges; \",\"按Ctrl+D退出数据库后输入 service mysqld restart 重启mysql服务\"]},\"794\":{\"h\":\"1.4.Redis\",\"t\":[\"如果要通过配置文件启动 Redis 就需要先创好文件！\",\"docker pull redis\",\"docker run -p 6379:6379 --name redis \\\\ -v /root/redis/data:/data \\\\ -v /root/redis/conf:/etc/redis \\\\ --requirepass 'Redis密码' \\\\ -d redis \",\"docker exec -it redis bash\",\"Redis 从cli中设置密码 config set requirepass xxx\"]},\"795\":{\"h\":\"1.5.Nginx\",\"t\":[\"注意 nginx.conf 是个文件不是文件夹 touch ~/nginx/conf/nginx.conf\",\"再把这个文件填上网上的内容了就可以了，但是挂载的这些其他目录还是空的改没东西还是没东西\",\"/roc/docker/nginx -- 自己的根目录 ├── nginx.conf -- 主配置文件 ├── html └── index.html -- 存放 nginx 默认 index.html ├── conf.d └── default.conf -- 默认的子配置文件 └── log -- nginx 日志存放目录 └── xxx.log \",\"docker pull nginx\",\"自己宿主机新建一个对应的文件并从网上给上默认内容 touch ~/nginx/conf/nginx.conf\",\"docker run -d -p 443:443 -p 80:80 \\\\ --name nginx \\\\ -v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\\ -v ~/nginx/conf/conf.d:/etc/nginx/conf.d \\\\ -v ~/nginx/log:/var/log/nginx \\\\ -v ~/nginx/html:/usr/share/nginx/html \\\\ -v ~/nginx/conf/ssl:/etc/nginx/ssl \\\\ -d nginx \",\"html 也可以自己随便给个index.html文件 【非必须】\"]},\"796\":{\"h\":\"1.6.MinIO\",\"t\":[\"9090是web网页后台，9000是url请求地址\",\"Buckets-Access Policy 记得改 public\",\"docker pull minio/minio\",\"mkdir -p ~/minio/config mkdir -p ~/minio/data\",\"docker run -p 9000:9000 -p 9090:9090 \\\\ --net=host \\\\ --name minio \\\\ -d --restart=always \\\\ -e \\\"MINIO_ACCESS_KEY=minioadmin\\\" \\\\ -e \\\"MINIO_SECRET_KEY=minioadmin\\\" \\\\ -v ~/minio/data:/data \\\\ -v ~/minio/config:/root/.minio \\\\ minio/minio server \\\\ /data --console-address \\\":9090\\\" -address \\\":9000\\\" \",\"--net=host: 使用主机网络模式，将容器与主机共享网络命名空间，使得容器可以通过主机的IP地址访问网络。\",\"minio/minio server: 使用minio/minio镜像来运行MinIO服务器。\",\"/data --console-address \\\":9090\\\" -address \\\":9000\\\": 指定MinIO服务器的数据存储路径为/data，Web控制台的访问地址为\\\":9090\\\"，MinIO服务器的访问地址为\\\":9000\\\"。\",\"http://101.34.55.204:9090/\",\"Navicat连接，新建空数据库\",\"推荐直接 idea 连接服务器的 Docker 省时省力！！！ 直接idea运行Dockerfile\",\"使用 Dockerfile 定制镜像\",\"vim Dockerfile\",\"FROM java:8 ADD upupor-web-1.0.0.jar /blog/upupor-web-1.0.0.jar EXPOSE 2020 ENTRYPOINT [\\\"java\\\",\\\"-jar\\\",\\\"/blog/upupor-web-1.0.0.jar\\\"] \",\"docker build -t blog .\",\"即可看到 docker imagse\",\"需要用到Env variment相当于普通 java -jar之前的export步骤**（注意docker run jar的话，像mysql、redis的ip地址不能为localhost必须为服务器ip！！！）**\",\"vim .docker_blog_env\",\"docker run -d --name=upupor -p 2020:2020 blog\",\"如果配置文件没用敏感信息就 --env-file ~/blog/.docker_blog_env blog\",\"我这里直接用了 application.properties 里面写好了敏感信息所以上述这部省略\"]},\"797\":{\"h\":\"\",\"t\":[\"云服务器的 Git 我捣鼓了好久~ 由于云服务器网络、地区CN http协议去连 Github 有点抽风，固我第一次尝试了 ssh 协议！！！ 好使\",\"生成ssh key ssh-keygen -t rsa -C \\\"xxx@xxx.com\\\"\",\"获取ssh key公钥内容（id_rsa.pub） cat ~/.ssh/id_rsa.pub\",\"把 cat 到的公钥内容放入 Github SSH配置里\",\"验证是否设置成功 ssh -T git@github.com\"]},\"798\":{\"h\":\"通俗解释！！\",\"t\":[\"重点来了：一定要知道ssh key的配置是针对每台主机的！，比如我在某台主机上操作git和我的远程仓库，想要push时不输入账号密码，走ssh协议，就需要配置ssh key，放上去的key是当前主机的ssh公钥。那么如果我换了一台其他主机，想要实现无密登录，也就需要重新配置。\",\"下面解释开头提出的问题： （1）为什么要配？ 配了才能实现push代码的时候不需要反复输入自己的github账号密码，更方便 （2）每使用一台主机都要配？ 是的，每使用一台新主机进行git远程操作，想要实现无密，都需要配置。并不是说每个账号配一次就够了，而是每一台主机都需要配。 （3）配了为啥就不用密码了？ 因为配置的时候是把当前主机的公钥放到了你的github账号下，相当于当前主机和你的账号做了一个关联，你在这台主机上已经登录了你的账号，此时此刻github认为是该账号主人在操作这台主机，在配置ssh后就信任该主机了。所以下次在使用git的时候即使没有登录github，也能直接从本地push代码到远程了。当然这里不要混淆了，你不能随意push你的代码到任何仓库，你只能push到你自己的仓库或者其他你有权限的仓库！\"]},\"799\":{\"h\":\"2.备份 MinIO\",\"t\":[\"场景：备份 MinIO 的文件到 Git\",\"使用 crontab -e\",\"一分钟执行一次 * * * * * /home/minio/data/blog/test.sh >> /home/minio/data/test.log 2>&1\",\"问题：我需要保证我的shell脚本的git命令 auth 这一步\",\"​ 手动一行行命令的时候用 http 可以：git remote set-url origin http://github.com/zzq8/MinIO-upupor.git\",\"​ 但是shell中批量总是报错！！！auth问题，网上冲浪发现用ssh好使 1）需要云服务器加私钥 2）把公钥加到Git ​ git remote set-url origin git@github.com:zzq8/MinIO-upupor.git\",\"test.sh:\",\"cd /home/minio/data/blog git pull origin master git add . git commit -m 'backup upupor static resource' git push \"]},\"800\":{\"h\":\"3.备份 sql\",\"t\":[\"d=`date +%Y%m%d%H%M` # 因为upupor的mysql数据库服务部署在docker容器中,所以`mysqldump`在容器中执行,然后将备份好的文件写到宿主主机地址 > 后的目录需要提前建好 docker exec mysql mysqldump -uroot -pxxx --single-transaction --databases upupor > /home/minio/data/blog/SQLBackup/upupor${d}.sql gzip -c /home/minio/data/blog/SQLBackup/upupor${d}.sql > /home/minio/data/blog/SQLBackup/upupor${d}.sql.gz rm -rf /home/minio/data/blog/SQLBackup/upupor${d}.sql \",\"00 03 * * * /home/minio/data/blog/SQLBackup/sqlbackup.sh >> /home/minio/data/sqlbackup.log 2>&1\",\"起因: 使用了一下云服务器的Redis开了6379端口写了点SpringBoot整合Redis的测试代码，结果用着用着突然连接断了，且腾讯云发来警告CPU和带宽被跑满。Redis没设密码结合百度发现中招了(可能被肉鸡了)，花了挺多时间不想再搞了就直接重装系统了，正好花点时间写一篇环境的部署的总结。\",\"后话：今天学了用Docker，不过自己写的这篇很多东西还可以借鉴\",\"Oracle 下个JDK还需要登录，下载超慢... 所以用国内的镜像源。\",\"国内下载镜像地址\",\"解压 tar -zxvf xxx\",\"环境变量配置：vi /etc/profile\",\"export JRE_HOME=/home/environment/jdk8u312-b07-jre export CLASSPATH=$JRE_HOME/lib/rt.jar:$JRE_HOME/lib/ext export PATH=$PATH:$JRE_HOME/bin \",\"添加完后执行 ：source /etc/profile （重置环境变量，使得修改生效）\",\"查看是否成功\",\"image-20220101201225905\",\"附录：\",\"Oracle JDK与OpenJDK的区别\",\"Linux /etc/profile文件详解\",\"linux source命令\"]},\"801\":{\"h\":\"1. 安装\",\"t\":[\"下载并安装MySQL官方的 Yum Repository\",\"wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\",\"使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装\",\"yum -y install mysql57-community-release-el7-10.noarch.rpm\",\"之后就开始安装MySQL服务器\",\"yum -y install mysql-community-server\"]},\"802\":{\"h\":\"2. 设置\",\"t\":[\"首先启动MySQL systemctl start mysqld.service，查看MySQL运行状态 systemctl status mysqld.service\",\"image-20220101204701233\",\"此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：grep \\\"password\\\" /var/log/mysqld.log\",\"image-20220101204949194\",\"通过默认密码进入数据库，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库\",\"修改默认密码 ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password'; 其中‘new password’替换成你要设置的密码，注意:密码设置必须要大小写字母数字和特殊符号（,/';:等）,不然不能配置成功\",\"MySQL版本5.7.6版本以前用户可以使用如下命令：实测有用：场景提示密码过期需修改\",\"mysql> SET PASSWORD = PASSWORD('123456'); \",\"ps: 当然想设简单一点的密码也可以\",\"解决办法：\",\"查看 mysql 初始的密码策略，SHOW VARIABLES LIKE 'validate_password%';\",\"image-20220101205730050\",\"关于 mysql 密码策略相关参数； 1）、validate_password_length 固定密码的总长度； 2）、validate_password_dictionary_file 指定密码验证的文件路径； 3）、validate_password_mixed_case_count 整个密码中至少要包含大/小写字母的总个数； 4）、validate_password_number_count 整个密码中至少要包含阿拉伯数字的个数； 5）、validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM； 关于 validate_password_policy 的取值： 0/LOW：只验证长度； 1/MEDIUM：验证长度、数字、大小写、特殊字符； 2/STRONG：验证长度、数字、大小写、特殊字符、字典文件； 6）、validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；\",\"例如：\",\"set global validate_password_policy=LOW; 只验证长度\",\"set global validate_password_length=6; 固定密码长度只要6位\",\"ALTER USER 'root'@'localhost' IDENTIFIED BY '123456'; 修改密码\"]},\"803\":{\"h\":\"3. 开启mysql的远程访问\",\"t\":[\"执行以下命令开启远程访问限制（注意：下面命令开启的IP是 所有的，如要开启192.168.0.1，用IP代替%）：grant all privileges on *.* to 'root'@'%' identified by 'password' with grant option;\",\"刷新权限表 flush privileges; \",\"按Ctrl+D退出数据库后输入 service mysqld restart 重启mysql服务\"]},\"804\":{\"h\":\"4. 为firewalld添加开放端口\",\"t\":[\"预备知识\",\"systemctl status firewalld #查看firewalld状态 systemctl start firewalld #开启防火墙 systemctl stop firewalld #关闭防火墙 \",\"添加mysql端口3306和Tomcat端口8080\",\"firewall-cmd --zone=public --add-port=3306/tcp --permanent firewall-cmd --zone=public --add-port=8080/tcp --permanent firewall-cmd --reload #重新载入 \"]},\"805\":{\"h\":\"5. 更改mysql的语言\",\"t\":[\"首先重新登录mysql，然后输入status，可以看到，红色框框处不是utf-8\",\"img\",\"因此我们先退出mysql，然后再到etc目录下的my.cnf文件下修改一下文件内容 vim /etc/my.cnf\",\"img\",\"#开头处 [client] default-character-set=utf8mb4 #结尾处 character-set-server=utf8mb4 collation-server=utf8mb4_general_ci \",\"保存更改后的my.cnf文件后，重启下mysql service mysqld restart，然后进入mysql输入status再次查看，你就会发现变化啦\",\"img\",\"ps: 可以到Windows下用cmd命令启动mysql啦，个人喜欢用Navicat\"]},\"806\":{\"h\":\"6. Linux-Mysql导入sql文件\",\"t\":[\"创建空数据库 create database xx\",\"use xx\",\"导入sql文件 source /home/xx.sql;注意：在 Windows 下路径也要变成左斜杠\"]},\"807\":{\"h\":\"\",\"t\":[\"70分钟 vs 2分钟\"]},\"808\":{\"h\":\"附录\",\"t\":[\"wget 是一个下载文件的工具\",\"rpm是一个包管理器，用于生成、安装、查询、核实、更新以及卸载单个软件包。\",\"Linux grep 命令\",\"mysql使用utf8mb4经验吐血总结\",\"CentOS7安装MySQL（完整版）\",\"MySQL 5.7 解压版 安装教程(图文详细)【Windows】\"]},\"809\":{\"h\":\"1. 前言\",\"t\":[\"目的：使用NGINX反向代理，将80端口转发到8080端口，反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。具体看图。\",\"正向代理（代理客户端）：\",\"场景：科学上网，客户端请求到香港的一台服务器，由这台服务器再请求到美国等其它被墙地区的服务器。\",\"正向代理\",\"反向代理（代理服务器端）：\",\"场景：例如百度的服务器肯定不止一台，你会先访问到代理服务器再给你决定具体让你到哪一台服务器拿数据。\",\"反向代理\"]},\"810\":{\"h\":\"2. 具体操作\",\"t\":[\"下载安装Nginx yum install nginx\",\"加入开机启动 systemctl enable nginx\",\"使用命令 find / -name \\\"nginx.conf\\\" 进行查找nginx配置文件，进行配置 vim /etc/nginx/nginx.conf\",\"批量注释服务配置如图（vim命令看附录），因为一个服务器一般会有很多个服务要跑，如果直接在服务配置修改的话就不方便拓展，这里将server注释，也就是不用这个server，而是在include另外添加配置文件。咱们可以理解为nginx.conf是一个总配置文件，include所包含的是子配置文件，如果要添加一个服务，就可以再/etc/nginx/conf.d/目录下去添加一个子配置文件，这里也是用的这种方式。\",\"image-20220102103441091\",\"在/etc/nginx/conf.d/目录下创建*.conf文件，我这里命名为myblog.conf vim /etc/nginx/conf.d/myblog.conf 填入以下数据：\",\"server { listen 80; #监听80端口 server_name 1024zzq.com; #转发到哪个地址 location / { proxy_pass http://101.34.55.204:8080; #代理到哪个地址 index index.html index.htm; proxy_set_header Host $host; proxy_set_header X-Real-Ip $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; } # access_log /logs/1024.zzq.com.access.log; #表示记录日志信息 } \",\"启动Nginx systemctl start nginx\",\"什么是YUM\",\"YUM(Yellowdog Updater Modified)是Fedora、CentOS、RedHat中的软件包管理器。基于 RPM 包管理，YUM通过分析RPM header数据，自动处理依赖关系，从指定服务器自动下载安装所有依赖的软件包。\",\"YUM其他介绍\",\"linux中yum与rpm区别（重点）\",\"usr 是 unix system resources 的缩写\"]},\"811\":{\"h\":\"RabbitMQ\",\"t\":[\"MessageQueue，MQ\",\"借鉴 JavaGuide\"]},\"812\":{\"h\":\"1.三大作用\",\"t\":[\"联想订票系统，订票业务和短信业务\"]},\"813\":{\"h\":\"1.1 异步与解耦\",\"t\":[\"主要就是为了 异步 用\",\"解耦：有了消息队列，我们只需要关心消息是否送达了队列，至于谁希望订阅，接下来收到消息如何处理，是下游的事情，无疑极大地减少了开发和联调的工作量\",\"图中第一个是开三个线程处理，第二个直接给MQ发个通知就不管了那三个自己通过订阅拿消息慢慢处理（不关心这三个接口怎么写的，因为无需调用）\",\"image-20220712110324017\"]},\"814\":{\"h\":\"1.2 流量削峰\",\"t\":[\"场景：大量用户请求购票整个系统会变成什么样？\",\"如果，此时有一万的请求进入购票系统，我们知道运行我们主业务的服务器配置一般会比较好，所以这里我们假设购票系统能承受这一万的用户请求，那么也就意味着我们同时也会出现一万调用发短信服务的请求。而对于短信系统来说并不是我们的主要业务，所以我们配备的硬件资源并不会太高，那么你觉得现在这个短信系统能承受这一万的峰值么，且不说能不能承受，系统会不会 直接崩溃 了？\",\"短信业务又不是我们的主业务，我们能不能 折中处理 呢？如果我们把购买完成的信息发送到消息队列中，而短信系统 尽自己所能地去消息队列中取消息和消费消息 ，即使处理速度慢一点也无所谓，只要我们的系统没有崩溃就行了。\",\"留得江山在，还怕没柴烧？你敢说每次发送验证码的时候是一发你就收到了的么？\",\"image-20220712111100552\"]},\"815\":{\"h\":\"1.3 没有哪一门技术是“银弹”，消息队列也有它的副作用\",\"t\":[\"比如，本来好好的两个系统之间的调用，我中间加了个消息队列，如果消息队列挂了怎么办呢？是不是 降低了系统的可用性 ？\",\"那这样是不是要保证HA(高可用)？是不是要搞集群？那么我 整个系统的复杂度是不是上升了 ？\",\"抛开上面的问题不讲，万一我发送方发送失败了，然后执行重试，这样就可能产生重复的消息。\",\"或者我消费端处理失败了，请求重发，这样也会产生重复的消息。\",\"对于一些微服务来说，消费重复消息会带来更大的麻烦，比如增加积分，这个时候我加了多次是不是对其他用户不公平？\"]},\"816\":{\"h\":\"2.两大概念\",\"t\":[\"消息服务中两个重要概念： 消息代理（message broker）、目的地（destination）\",\"当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。\"]},\"817\":{\"h\":\"2.1 两种消息模型（JMS提供为例）\",\"t\":[\"消息队列主要有两种形式的目的地：\",\"队列（queue）：点对点消息通信（point-to-point）1v1 \",\"消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列\",\"点对点：可以很多个接收者，谁先抢到就谁\",\"主题（topic）：发布（publish）/订阅（subscribe）消息通信 1vn \",\"发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息\"]},\"818\":{\"h\":\"2.2 两大规范/协议\",\"t\":[\"RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现\",\"JMS（Java Message Service） AMQP（Advanced Message QueuingProtocol）\",\"JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式\",\"JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。 \",\"如果全平台都是Java写的那就 JMS 如果订单Java写、购物车PHP写两者得交互发消息那就用 AMQP\",\"JMS规定了两种消息模式；而AMQP的消息模式更加丰富 \",\"其实就是第一种对应上面第一个点对点其它四种对应发布订阅，只不过封装了\",\"ps：RabbitMQ 有很多复杂概念，这个打通其它MQ不是问题 因为其它MQ根本没这个那么多复杂概念\"]},\"819\":{\"h\":\"2.3 Java 落地\"},\"820\":{\"h\":\"Spring支持\",\"t\":[\"spring-jms提供了对JMS的支持\",\"spring-rabbit提供了对AMQP的支持\",\"需要ConnectionFactory的实现来连接消息代理\",\"提供JmsTemplate、RabbitTemplate来发送消息\",\"@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息代理发布的消息\",\"@EnableJms、@EnableRabbit开启支持\"]},\"821\":{\"h\":\"Spring Boot自动配置\",\"t\":[\"JmsAutoConfiguration\",\"RabbitAutoConfiguration\"]},\"822\":{\"h\":\"2.核心概念\"},\"823\":{\"h\":\"1）\",\"t\":[\"微服务如有一起用 Java、PHP 那么如果 Java 挂了可能就会影响 PHP 的服务，而 虚拟主机 每个一套环境的感觉\",\"image-20230112172607355\",\"Message 消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。\",\"Publisher 消息的生产者，也是一个向交换器发布消息的客户端应用程序。\",\"**Exchange 交换器，**用来接收生产者发送的消息并将这些消息路由给服务器中的队列。Exchange有4种类型：direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别。 可以绑定（Binding）队列并指定它们之间的路由键（rouoting-key）\",\"direct 点对点-精确匹配\",\"fanout 发布订阅-广播（不分路由键消息交给所有和它绑定的队列）\",\"topic 发布订阅-部分广播（会根据路由键匹配的来找）\",\"Queue 消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。\",\"名字命名有讲究，以单词为单位不是字母 #匹配0-n个单词，*匹配1-n个 例如：auguigu.# *.news\",\"Binding 绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。 Exchange 和Queue的绑定可以是多对多的关系。\",\"Connection 网络连接，比如一个TCP连接。\",\"Channel 信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁TCP都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。\",\"Consumer 消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。\",\"Virtual Host 虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。 场景：我可以生产环境一套开发环境一套，每个虚拟主机的配置是不一样的\",\"Broker 表示消息队列服务器实体\",\"ps：可以到web管理后台发一发消息，用一用Exchange -> Binding via Routing Key -> Queue Exchange和Queue都有自己的名字通过Routing Key建立关联\",\"Channel、Message在Java中都有对应的类，可以直接用。例如通过Channel拿Message\"]},\"824\":{\"h\":\"2）RocketMQ 时候笔记\",\"t\":[\"NameServer：类似中介，跟eureka差不多服务的注册与发现\",\"Broker：消息队列服务器\",\"但是，我们上文提到过 Broker 是需要保证高可用的，如果整个系统仅仅靠着一个 Broker 来维持的话，那么这个 Broker 的压力会不会很大？所以我们需要使用多个 Broker 来保证 负载均衡 。\",\"在上面的技术架构介绍中，我们已经知道了 RocketMQ 在主题上是无序的、它只有在队列层面才是保证有序 的。\"]},\"825\":{\"h\":\"1.安装 RabbitMQ\",\"t\":[\"#docker images 本地没有rabbitmq:management这个镜像执行这个命令会连网自动去下 docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management #自动启动 docker update rabbitmq --restart=always \",\"4369, 25672 (Erlang发现&集群端口)\",\"5672, 5671 (AMQP端口)\",\"15672 (web管理后台端口)\",\"61613, 61614 (STOMP协议端口)\",\"1883, 8883 (MQTT协议端口)\",\"https://www.rabbitmq.com/networking.html\"]},\"826\":{\"h\":\"2.Spring Boot整合RabbitMQ\"},\"827\":{\"h\":\"2.1 简介\",\"t\":[\"在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。\",\"一般在开发过程中：\",\"生产者工程：\",\"application.yml文件配置RabbitMQ相关信息；\",\"在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定\",\"注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机\",\"消费者工程：\",\"application.yml文件配置RabbitMQ相关信息\",\"创建消息处理类，用于接收队列中的消息并进行处理\"]},\"828\":{\"h\":\"2.2 配置\",\"t\":[\"pom.xml：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-amqp</artifactId> </dependency> \",\"主类+ @EnableRabbit\",\"引入amqp场景;RabbitAutoConfiguration就会自动生效（org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration）\",\"给容器中自动配置了\",\"RabbitTemplate、AmqpAdmin、CachingConnectionFactory、RabbitMessagingTemplate\",\"ps：AmqpAdmin 可以用来创造 Exchange、Queue和两者之间的Binding RabbitTemplate 可以给MQ收发消息\",\"使用这两个类的API操作基本感觉就和 web 界面使用的操作是一样的，该给哪些参数之间有些什么关系！所以点点 web 操作操作还是有必要的！\",\"消息如想放对象，写个config类给容器中放 MessageConverter \",\"视频中直接看源码真棒，比那些直接配置的舒服多了。知道来龙去脉 这就是会看源码的好处啊\"]},\"829\":{\"h\":\"2.3 使用\",\"t\":[\"上面配置完，下面使用按视频就是\",\"Exchange、Queue、Binding写单元测试（最好拿出来放Controller/web图形化配好？）其实这些可以直接用注解配放Config包！！通过@Bean @Bean Binding,Queue,Exchange 容器中的Binding,Queue,Exchange都会自动创建(RabbitMQ没有的情况) 注意：1）RabbitMQ只要有@Bean声明属性发生变化也不会覆盖 2）@Bean启动时不会马上创建，需要有监听方法才会创建\",\"// @RabbitListener(queues = \\\"stock.release.stock.queue\\\") // public void handle() { // // } \",\"但发送消息（rabbitTemplate.convertAndSend）还是得Service用\",\"监听器拿消息写Services用两个注解，只要项目在运行就会实时监听消费！\"]},\"830\":{\"h\":\"@RabbitListener:类+方法上（监听哪些队列即可）\",\"t\":[\" /** * queues:声明需要监听的所有队列 * 三个参数会自动注入： * 1）org.springframework.amqp.core.Message * 2）T<发送的消息的类型> OrderReturnReasonEntity 就不用我们手动转换（JSONToObject），Spring会帮我们自动转换 * 3）Channel:当前传输数据的通道 * * Queue: 可以很多人都来监听.只要收到消息,队列删除消息,而且只能有一个收到此消息场景: * 1)、订单服务启动多个;同一个消息,只能有一个客户端收到 * 2)、只有一个消息完全处理完,方法运行结束,我们就可以接收到下一个消息 */ @RabbitListener(queues = {\\\"hello-java-queue\\\"}) //这个注解也可放类上 public void receiveMessage(Message message, OrderReturnReasonEntity content, Channel channel) \"]},\"831\":{\"h\":\"@RabbitHandLer:标在方法上（重载区分不同类型的消息）\",\"t\":[\"单元测试发两个不同的实体对象\",\"两个注解搭配使用，相当于重载拿不同的实体对象\",\"@RabbitListener(queues = {\\\"hello-java-queue\\\"}) //会不停监听这个队列中的消息进行消费 @Service(\\\"orderItemService\\\") public class OrderItemServiceImpl{ @RabbitHandler public void receiveMessage(Entity01 xx){} @RabbitHandler public void receiveMessage(Entity02 xx){} } \",\"注意：模拟发了10个消息，启动了2个服务。但是此时单元测试也拿了3个消息。 因为启动单元测试就相当于是启动了springboot 多个服务应该是轮询拿\"]},\"832\":{\"h\":\"\",\"t\":[\"可靠抵达：发送端确认+消费端确认\",\"# 开启发送端消息抵达Broker确认 spring.rabbitmq.publisher-confirms=true # 开启发送端消息抵达Queue确认 spring.rabbitmq.publisher-returns=true # 只要消息抵达Queue，就会异步发送优先回调returnfirm spring.rabbitmq.template.mandatory=true # 手动ack消息，不使用默认的消费端确认 spring.rabbitmq.listener.simple.acknowledge-mode=manual \"]},\"833\":{\"h\":\"2.4.1 发送端确认\",\"t\":[\"弹幕：真实工作中根本不会这么用，都是让类去实现对应回调接口\",\"场景：可以把这些消息状态放到数据库，知道哪些消息没有可靠抵达就再重新发一次\"]},\"834\":{\"h\":\"\",\"t\":[\"1.生产者发送消息到Queue会经过两个过程【确认机制看做一种协议】 1）消息从publisher到达Broker（到达后会回调confirmCallback，消费者被告知消息是否抵达服务器）【My 成功回调】 2）消息从Exchange投递到Queue（失败后会回调returnCallback，消费者被告知消息是否抵达Queue）【My 失败回调】 \"]},\"835\":{\"h\":\"打开确认模式\",\"t\":[\"# 1）Publisher/Producer -> Broker(Excange) spring.rabbitmq.publisher-confirms=true # 2）Exchange -> Quenen（一般下面这两个配置一起写） spring.rabbitmq.publisher-returns=true # 消息在没有被队列接收时是否强行退回 spring.rabbitmq.template.mandatory=true \"]},\"836\":{\"h\":\"设置回调 -> 定制RabbitTemplate\",\"t\":[\"@PostConstruct // (MyRabbitConfig对象创建完成以后，执行这个方法) public void initRabbitTemplate() { /** * 成功回调 发送消息触发confirmCallback回调 * @param correlationData：当前消息的唯一关联数据（如果发送消息时未指定此值，则回调时返回null） * @param ack：消息是否成功收到（ack=true，消息抵达Broker） * @param cause：失败的原因 */ rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -> { System.out.println(\\\"发送消息触发confirmCallback回调\\\" + \\\"\\\\ncorrelationData ===> \\\" + correlationData + \\\"\\\\nack ===> \\\" + ack + \\\"\\\" + \\\"\\\\ncause ===> \\\" + cause); }); /** * 消息未到达队列触发returnCallback回调 -> 例如路由键不对没有投递成功 * 只要消息没有投递给指定的队列，就触发这个失败回调 * @param message：投递失败的消息详细信息 * @param replyCode：回复的状态码 * @param replyText：回复的文本内容 * @param exchange：接收消息的交换机 * @param routingKey：接收消息的路由键 */ rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -> { // 需要修改数据库 消息的状态【后期定期重发消息】 System.out.println(\\\"消息未到达队列触发returnCallback回调\\\" + \\\"\\\\nmessage ===> \\\" + message + \\\"\\\\nreplyCode ===> \\\" + replyCode + \\\"\\\\nreplyText ===> \\\" + replyText + \\\"\\\\nexchange ===> \\\" + exchange + \\\"\\\\nroutingKey ===> \\\" + routingKey); }); } \"]},\"837\":{\"h\":\"2.4.2\",\"t\":[\"场景：如果不定制化，默认情况下消息抵达客户端后自动确认，服务端消息自动删除 默认的自动确认会有问题 问题：如一次5个消息到方法进行处理但只处理完1个就宕机。但web一看5个却都ack置为0了，实际上其它4个消息被默认ack但实际上还没处理！\",\"解决：手动确认 保证每个消息都被正确消费，此时才可以broker删除这个消息 不手动确认，一旦宕机或闪断就消息丢失\",\"体现：Message 会由 Unacked->Ready 等待下一次消费并不会消失，即使consumer宕机消息也不会丢失\",\"一般用 RabbitMQ 都会启动手动 ACK -> 只要解锁库存的消息失败，一定要告诉服务解锁失败。开启手动确认，不要删除消息，当前解锁失败需要重复解锁 手动模式需要 Channel\",\"注意视频中终止 Debug 模式，仍然把剩下的消息给消费了的问题\",\"因为这不是真正的宕机，这只是终止了程序，中终止程序前idea默认把这个方法执行完再中断。验证的话可以有用杀死进程的方式\",\"在消费的方法中：像货物一样可以签收/拒收\",\"// 手动确认，消息会从unacked中删除，total数量减1 // boolean multiple：是否批量签收 我理解：一般都是一条消息一条消息处理，不会把整个channel中所有消息给一棒子打死 channel.basicAck(deliveryTag, false); // 手动拒签 // boolean multiple：是否批量拒签 // boolean requeue：当前拒签消息是否发回服务器重新入队 channel.basicNack(deliveryTag, false, true); \",\"示例：\",\"# 手动ack消息，不使用默认的消费端确认 spring.rabbitmq.listener.simple.acknowledge-mode=manual \",\"try { // 解锁库存 wareSkuService.unLockStock(locked); // 解锁成功，手动确认 channel.basicAck(message.getMessageProperties().getDeliveryTag(), false); } catch (Exception e) { // 解锁失败，消息入队 channel.basicReject(message.getMessageProperties().getDeliveryTag(), true); } \"]},\"838\":{\"h\":\"\",\"t\":[\"为了高并发不用 Seata 控制，用MQ保证最终一致性\"]},\"839\":{\"h\":\"3.1.为什么用延时队列不用定时任务\",\"t\":[\"解锁表如果用定时任务很麻烦！这里用延时队列 延迟一段时间再给解锁库存的服务发消息补偿回来 定时任务有时效性问题：一个30分钟过期的下单可能得59分钟后才被定时任务扫到\",\"而延时队列，下订单的时候 -> 消息队列（30M）-> 关闭订单 没有时效性问题！\"]},\"840\":{\"h\":\"3.2.延时队列实现\",\"t\":[\"TTL+死信 超过指定TTL还没被消费就称这个消息为死信 -> 死信会丢给死信交换机（DLX死信路由） -> 死信交换机再丢给指定队列\"]},\"841\":{\"h\":\"3.2.1.队列过期（推荐）\",\"t\":[\"image-20230131105835211\"]},\"842\":{\"h\":\"3.2.2.消息过期\",\"t\":[\"设置消息过期时间实现延时队列\",\"因为MQ是惰性，发送3个消息，过期时间分别为5min，1min，1s，服务器得等第一个5min的过期并扔给死信路由才会检查第二个。\"]},\"843\":{\"h\":\"3.3.MQ 架构\",\"t\":[\"一个交换机即可，路由到不同的队列 延时队列（TTL到了就放死信） & 死信队列（给消费者删，例如解锁库存）\",\"image-20230131111753174\"]},\"844\":{\"h\":\"3.4.解锁库存\",\"t\":[\"很多解锁细节，看着有些繁琐，直接 CV ，没有去捋了 后面大致捋了下\",\"场景： 1.下订单成功，用户手动取消 || 订单过期未支付 2.其他业务调用失败，订单回滚，但库存锁定成功（最终一致性，需要解锁库存）\",\"实现： 监听死信队列，拿到库存锁定工作单解锁库存（解锁时判断是否允许解锁）\",\"这里我有点一头雾水！！！视频中再想去找没看到\",\"我可能知道原因了：因为正常逻辑订单延时队列先到\",\"Queue order.delay.queue TTL：1M\",\"Queue stock.delay.queue TTL：2M\",\"order module: confirm... correlationData=>null ack => true 收到过期的订单信息，准备关闭订单202302011429244921620670634357006338 confirm... correlationData=>null ack => true stock module: ******收到订单关闭，准备解锁库存的信息****** ******收到解锁库存的信息****** \",\"bug： 订单解锁晚于库存解锁执行导致库存永远不会被解锁\",\"bug重现： 机器卡顿，订单解锁的消息延迟抵达，造成订单解锁晚于库存解锁执行，此时库存解锁失败，因为订单还处于未支付状态，导致库存未解锁，并且消息已经确认\",\"解决方案： 方案一： 库存解锁消息重新入队（不建议，因为无法判断消息延迟的具体时间，造成消息空转浪费资源） 方案二： 消费订单解锁消息时，往库存解锁的死信队列丢一条消息（同时是消费者和生产者）\",\"bug业务场景： 1.订单过期未支付\",\"实现： 生成订单时创建消息放入延时队列 解锁订单方法监听死信队列 解锁订单时为了防止订单解锁晚于库存解锁的BUG，此时主动往解锁库存的死信队列发送一条消息（看标题的图链接）\"]},\"845\":{\"h\":\"3.5.可靠消息\",\"t\":[\"柔性事务-可靠消息+最终一致性方案（异步确保型，视频是这个）✔ 也是借助 MQ 总结一句：异步下单，提高并发，提升响应，提升购物体验。\",\"其实 MQ 这一块完全可以单独抽取成一个 Module，封装处理好这些细节\",\"看 [#2.4 消息确认机制-可靠抵达](#2.4 消息确认机制-可靠抵达)\"]},\"846\":{\"h\":\"3.5.1.消息丢失\",\"t\":[\"情况1：网络连接失败，消息未抵达Broker \",\"解决：发送消息时同时将消息持久化到MQ中并插入DB（DB消息状态为已抵达） 当出现异常时在catch处修改消息状态为错误抵达\",\"情况2：消息抵达Broker，但为抵达queue，消息会丢失（只有抵达了queue消息才会持久化） \",\"解决：开启生产者确认机制，将触发returnCallback.returnedMessage的消息DB状态修改为错误抵达\",\"情况3：消费者未ack时宕机，导致消息丢失 \",\"解决：开启消费者手动ack\",\"简而言之：注意try catch、保障消息确认机制-可靠抵达\",\"try { //TODO 确保每个消息发送成功，给每个消息做好日志记录，(给数据库保存每一个详细信息)保存每个消息的详细信息 rabbitTemplate.convertAndSend(\\\"order-event-exchange\\\", \\\"order.release.other\\\", orderTo); } catch (Exception e) { //TODO 定期扫描数据库，重新发送失败的消息 //while 不太好，如网络故障一时半会也好不了。最好就是上述的日志 } \"]},\"847\":{\"h\":\"3.5.2.消息重复\",\"t\":[\"情况1：业务逻辑已经执行，但是ack时宕机，消息由unack变为ready，消息重新入队 \",\"解决：将接口设计成幂等性，例如库存解锁时判断工作单的状态，已解锁则无操作\",\"解决2：防重表\"]},\"848\":{\"h\":\"3.5.3.消息积压\",\"t\":[\"情况1：生产者流量太大 \",\"解决：减慢发送消息速率（验证码、防刷、重定向、削峰）\",\"情况2：消费者能力不足或宕机 \",\"解决1：上线更多消费者\",\"解决2：上线专门的队列消费服务，批量取出消息入库，离线处理业务慢慢处理\"]},\"849\":{\"h\":\"Redis\",\"t\":[\"Redis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来 说，性能是MySQL的⼏⼗倍。\",\"Q: Redis的lO性能比数据库高的原因是什么？\",\"基于内存，sql基于磁盘 - 所以少了一步磁盘IO\",\"单线程模型 - 少了上下文切换开销\",\"非阻塞IO - 6.0往后出现网络IO多路复用 TODO？ 允许一个线程同时监听和处理多个网络连接的 I/O 操作\",\"数据结构简单重设计 - SDS？压= TODO？Sds（Simple Dynamic String，简单动态字符串）是Redis 底层所使用的字符串表示 C 是char 不足（以空字符'\\\\0'结尾） 总的来说，Redis 的 SDS 结构在原本字符数组之上，增加了三个元数据：len、alloc、flags，用来解决 C 语言字符串的缺陷 ----C语⾔实现，优化过的数据结构，基于⼏种基础的数据结构，redis做了⼤量的优 化，性能极⾼\",\"Q: 能说一下I/O多路复用吗？\",\"引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个 学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择：\",\"第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间 如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理 socket，根本不具有并发能力。 （XD 排队一个个检查）\",\"第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。 这种 类似于为每一个用户创建一个进程或者- 线程处理连接。\",\"第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答 问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又 举手，然后去处理E和A。 （XD 举手到坐检查）\",\"第一种就是阻塞IO模型，第三种就是I/O复用模型。 IO多路复用通过使用特定的系统调用（如 select、poll、epoll等）来解决这些问题。这些系统调用允许我们同时监视多个I/O流，并在有 I/O事件准备好时进行通知。\",\"Redis 可以用来做限流(MQ)、分布式锁、缓存 发布订阅（publish、subscribe）\",\"个人定制化总结，详细信息看课件！\",\"狂神说Redis笔记\",\"是的，Redis可以用于限流、分布式锁和缓存等功能。\",\"限流：通过利用Redis的数据结构和操作，如有序集合(sorted sets)、带有过期时间的键(keys with expiration)和原子操作(atomic operations)，可以实现限制请求处理速率的功能。\",\"分布式锁：Redis可以用于实现分布式锁，通过使用**SETNX（如果不存在则设置）**命令来确保在分布式环境下的互斥访问。通过获取锁的客户端可以执行临界区代码，其他客户端则需要等待或执行其他逻辑。\",\"缓存：Redis的主要功能之一是作为缓存存储，它提供了快速的读写操作和灵活的键值操作。通过将数据存储在Redis中，可以减少对后端存储系统（如数据库）的访问，从而提高系统的响应速度和性能。\",\"需要注意的是，以上功能在Redis中是通过使用不同的数据结构和命令来实现的。因此，在具体实现时，需要根据业务需求和场景选择合适的Redis数据结构和操作。\",\"当涉及到使用Redis在Java中实现限流、分布式锁和缓存时，以下是一些示例代码：\"]},\"850\":{\"h\":\"限流：\",\"t\":[\"import redis.clients.jedis.Jedis; public class RateLimiter { private Jedis jedis; private String key; public RateLimiter(String host, int port, String key) { jedis = new Jedis(host, port); this.key = key; } public boolean allowRequest() { long currentTimestamp = System.currentTimeMillis(); long windowStartTimestamp = currentTimestamp - 1000; // 1秒的时间窗口 long count = jedis.zcount(key, windowStartTimestamp, currentTimestamp); if (count < 10) { // 每秒限制10个请求 jedis.zadd(key, currentTimestamp, String.valueOf(currentTimestamp)); return true; } return false; } } \"]},\"851\":{\"h\":\"分布式锁：\",\"t\":[\"import redis.clients.jedis.Jedis; public class DistributedLock { private Jedis jedis; private String lockKey; private int lockTimeout = 30000; // 锁的超时时间，默认30秒 public DistributedLock(String host, int port, String lockKey) { jedis = new Jedis(host, port); this.lockKey = lockKey; } public boolean acquireLock() { long startTimestamp = System.currentTimeMillis(); while ((System.currentTimeMillis() - startTimestamp) < lockTimeout) { String result = jedis.set(lockKey, \\\"LOCKED\\\", \\\"NX\\\", \\\"PX\\\", lockTimeout); if (\\\"OK\\\".equals(result)) { return true; } try { Thread.sleep(100); // 等待一段时间后重试获取锁 } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } return false; } public void releaseLock() { jedis.del(lockKey); } } \"]},\"852\":{\"h\":\"缓存：\",\"t\":[\"import redis.clients.jedis.Jedis; public class Cache { private Jedis jedis; public Cache(String host, int port) { jedis = new Jedis(host, port); } public void set(String key, String value) { jedis.set(key, value); } public String get(String key) { return jedis.get(key); } public void expire(String key, int seconds) { jedis.expire(key, seconds); } } \",\"这些示例代码提供了基本的使用方法，但在实际应用中可能需要根据具体需求进行适当的调整和扩展。同时，请确保在使用完Redis资源后进行适当的资源释放和异常处理。\"]},\"853\":{\"h\":\"1. 前置条件 - 改配置\",\"t\":[\"不改就只能本机连接Redis\",\"bind 127.0.0.1 # 绑定的ip 需要注掉\",\"protected-mode yes # 保护模式 改成no\",\"如果还连不上, 可以看下防火墙\"]},\"854\":{\"h\":\"2. 模拟业务场景: 手机验证码\",\"t\":[\"image-20220410204001304\",\"具体代码看文件\",\"多个事务是串起来的，也就是说不允许插队和并行, 序列化按顺序执行\",\"Multi (命令/组队阶段): 开启事务, 把命令放队列中, 类似MySQL的 start transaction\",\"Exec (执行队列)\",\"discard (命令): 类似回滚事务\",\"image-20220413201848353\",\"组队的时候有任何一个命令失败, 就都不会成功\",\"image-20220413203729944\",\"组队成功, 提交有成功有失败情况 也就是说:\",\"Redis单条命令式保存原子性的，但是事务不保证原子性！\",\"image-20220413205107400\"]},\"855\":{\"h\":\"事务的冲突问题\",\"t\":[\"解决方法: 悲观锁 / 乐观锁(默认) Redis事务没有没有隔离级别的概念！\",\"可以好好看下 乐观锁: 适用于多读的应用类型, 这样可以提高吞吐量. 更新的时候会判断你的版本号是否一致\",\"乐观锁典型例子: 抢票 可以很多人抢, 但只能一个人支付成功\",\"image-20220413211028112\",\"乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的。\"]},\"856\":{\"h\":\"Watch 操作\",\"t\":[\"Redis测监视测试\",\"测试多线程修改值 , 使用watch 可以当做redis的乐观锁操作！\",\"image-20220413213359161\"]},\"857\":{\"h\":\"Redis 秒杀案例\",\"t\":[\"image-20210619095633057\",\"Redis ab压测安装\",\"yum install httpd-tools ab -n 1000 -c 200 -p ~/postfile -T application/x-www-form-urlencoded http://192.168.1.107:8080/doseckill \",\"问题：超卖 & 超时\",\"Read timed out 解决：连接池\",\"超卖：事务 + 乐观锁（Watch）\",\"如果不加watch (结合上面的Watch学习):\",\"秒杀已经结束了 秒杀成功了..\"]},\"858\":{\"h\":\"LUA脚本解决库存遗留问题\",\"t\":[\"已经秒光，可是还有库存。原因，就是乐观锁导致很多请求都失败。先点的没秒到，后点的可能秒到了。\",\"我在执行过程中别人不能对我的操作进行插队和干预\",\"后来补充：Gulimall 好像是Redission的信号量\"]},\"859\":{\"h\":\"RDB\",\"t\":[\"Redis 会单独fork一个子进程来进行持久化：\",\"首先将数据写入到一个临时文件中，等所有持久化过程全部结束了，再用临时文件替换上次持久化好的文件。（理解的不是很透彻）\",\"但是最后一次持久化后的数据可能丢失（好理解）\"]},\"860\":{\"h\":\"AOF（Append Only File）\",\"t\":[\"以日志的形式来记录每个写操作，只许追加文件但不可以改写文件\",\"AOF 默认不开启\",\"如果RDB 和 AOF都开启了，默认是听AOF的\",\"场景:\",\"我config刚打开AOF的yes\",\"kill掉进程重启\",\"ll命令发现多了AOF文件大小为0字节\",\"这个时候keys * 会发现数据库为 空 的\",\"正常一台linux一个Redis，这里通过端口号模拟\"]},\"861\":{\"h\":\"1. 搭建一主多从\",\"t\":[\"整个文件夹搞三个配置文件\",\"include ./redis.conf pidfile ./redis_6379.pid port 6379 dbfilename dump6379.rdb masterauth 547061946 # 别忘记这一步，如果有密码的话！ \",\"分别启动，通过命令 slaveof ip port 搞两台从机 注意：如果主机Redis有密码则从机的配置文件还要加一句 masterauth xxx\",\"配置完后，只能主机写操作，从机只能读操作\"]},\"862\":{\"h\":\"2. 复制原理\",\"t\":[\"这里只介绍表象，具体原理看课件\",\"在Redis命令中shutdown 就相当于这台服务器挂掉了，对应的看ps命令这个端口的进程也没了\",\"从服务器挂掉了：\",\"搞台从机shutdown\",\"主机存几个值\",\"恢复从机发现之前挂掉时，主机存的值自己这里没有（A: 因为重启后自己变成了主服务器，需要再转成从服务器才能看到值）\",\"主服务器挂掉了： 从服务器还是从服务器，且主服务器恢复后仍是主服务器（和上面不同）\"]},\"863\":{\"h\":\"3. 薪火相传\",\"t\":[\"贴个图意思就是一条线串起来，压力就没那么大了\",\"image-20220510145507853\",\"区分：一主二仆\",\"image-20220510145619913\"]},\"864\":{\"h\":\"4. 反客为主\",\"t\":[\"主服务器 shutdown ，从服务器 slaveof no one，就会变成主服务器 【缺点：但是是手动完成的】 且之前挂掉的主服务器重连还是主服务器，就2主一从了 进阶：想让上面的自动完成且优化 -> 哨兵模式\"]},\"865\":{\"h\":\"5. 哨兵模式\",\"t\":[\"反客为主的自动版 能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库\",\"折腾半天：redis 哨兵模式启动没有检测到从机 看图，我没配密码\",\"sentinel monitor mymaster 127.0.0.1 6379 1 sentinel auth-pass mymaster 547061946 # 别忘记这一步，如果有密码的话！ \",\"https://blog.csdn.net/qq_45950109/article/details/115014763 投票是根据这个参数来的 ：replica-priority 100，注意是 -> 谁小投谁\",\"完成后的现象：主机挂了，从机投票出一台当主机，主机重连后变成从机\",\"扩容 / 并发写 可用集群，具体看课件\",\"一个集群至少要有三个主节点\",\"好处：实现扩容，分摊压力（插槽）、无中心配置相对简单 缺点：多建操作mset这种不被支持 etc. 无中心化集群，可以贴一下图\",\"注意旧版本还得装ruby环境 有没有这个环境可以看下src目录有没有redis-trib.rb\",\"集群搭建好后，cli连接要用集群的方式连接 -c redis -cli -c -p 6379 这里用任何一个端口都是可以的6379、6380、6381。因为是无中心化集群，任何一台都可以作为集群的一个入口\",\"贴一个插槽的图，每set一个值会有算法计算对应的插槽值【不是随机是跟hash一样固定的】 插槽作用：从6379中set一个值，发现计算后插槽范围在6380中，就会切换到6380做这个set操作 mset操作set多个值是会报错的，因为没法计算插槽范围。如想完成mset操作就需要用到组的方式给这一组set数据一个组名，计算插槽时按这个组名来\",\"缓存穿透/击穿 可以封装成工具类，给后面复用。 例如heima的视频，就活用泛型+lambda写这个工具类\"]},\"866\":{\"h\":\"1. 缓存\",\"t\":[\"空结果缓存||布隆过滤器：解决缓存穿透\",\"现在明了了，原来是这么回事，看例子！\",\"一般是黑客恶意攻击：访问数据库中压根就不存在的数据 例如blog/30 后面30对应的是我java那篇文章，而我31是没有文章的404，黑客明知道但就是一直访问这个不存在的资源，导致数据库查询不存在数据\",\"解决方案看课件 1）可对数据库中不存在的数据做缓存，对空值缓存 例如 31：null 设置个短的过期时间，这种方式只是个简单的应急方案\",\"2）看网上说限制 ip 访问次数感觉也不错（XD：nginx 根据access.log写一段脚本）\",\"3）布隆过滤器：说这个元素不在这个集合中就一定不在 存在有极小概率存在误判可能（XD 有点搞混 不在就一定不在 判断在可能是hash冲突到了） 原理：在Client with Redis 之间又加一层 把数据经过某种hash算法，hash值再转变成二进制位放到布隆过滤器里 （除非特别大的业务，实际生产不会用到的！！！）\",\"布隆过滤器的底层数据结构可以理解为bitmap,bitmap也可以简单理解为是一个数组，元素只存储0和1，所以它占用的空间相对较小\",\"布隆过滤器是可以以较低的空间占用来判断元素是否存在进而用于去重，但是它也有对应的缺点 只要使用哈希算法离不开「哈希冲突」，导致有存在「误判」的情况\",\"实际解决办法就是先报警，网警\"]},\"867\":{\"h\":\"2. 缓存\",\"t\":[\"加锁：解决缓存击穿 //其它两个好解决，这个代码层面加锁如果加不好又会产生很多问题 加锁是一种解决方案把其它挡外面\",\"看课件 key 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时 候，需要考虑一个问题：缓存被“击穿”的问题。\",\"1）预热（后台改改热点数据的ttl）\",\"2）互斥锁（Mutex）或分布式锁（Distributed Lock）【setnx / Redisson】\",\"3）逻辑过期（并不会真的设置TTL，加了个时间字段记录过期时间 -> Bean[data,expireTime] 可理解为数据库的逻辑删除字段）判断如已过期会缓存重建\"]},\"868\":{\"h\":\"3. 缓存雪崩\",\"t\":[\"设置过期时间（加随机值）：解决缓存雪崩\",\"好理解的解决方案：将缓存失效时间分散开 第一个缓存5分01秒，第二个缓存5分07秒搞个随机数分散开 降级限流、多级缓存\",\"就是给集群中某一台服务器加一把锁，其他的服务器也能看到这把锁。共享锁\",\"分布式锁主流的实现方案：\",\"基于数据库实现分布式锁\",\"基于缓存（Redis等）\",\"基于Zookeeper\",\"每一种分布式锁解决方案都有各自的优缺点：\",\"性能：redis最高\",\"可靠性：zookeeper最高\",\"这里，我们就基于redis实现分布式锁。\",\"具体操作：\",\"上锁，设置过期时间。两条命令【Redis单条命令式保存原子性的，但是事务不保证原子性！】所以会有问题，可能上完锁服务器宕机就没设置过期时间，会导致这把锁一直不会释放。\",\"正确做法：一条命令解决上锁同时设置过期时间\",\"Q：锁误释放问题\",\"A：优化之UUID防误删\",\"Lua 脚本原子性，在执行的时候别人不能打断\",\"java 这个方法接下来都是要操作指定key的crud。有一个api bound\",\"https://www.yuque.com/snailclimb/mf2z3k/hbsnl8?pwd=cnk4\",\"Redis 有序集合 Zset(sorted set)\",\"总结\",\"上面我一共提到了两种设计排行榜的方法：\",\"1MySQL 的 ORDER BY 关键字 2Redis 的 sorted set\",\"其实，这两种没有孰好孰坏，还是要看具体的业务场景。如果说你的项目需要排序数据量比较小并且业务场景不复杂的话（比如你对你博客的所有文章按照阅读量来排序），我觉得直接使用 MySQL 的 ORDER BY 关键字就可以了，没必要为了排行榜引入一个 Redis。\",\"另外，在没有分页并且数据量不大的情况下，直接在前端拿到所有需要用到的数据之后再进行排序也是可以的。\"]},\"869\":{\"h\":\"黑马点评\",\"t\":[\"一个专门学习 Redis 而生的项目，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video\",\"set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地理位置\"]},\"870\":{\"h\":\"1.课程内容\",\"t\":[\"实战篇性价比高，高级篇偏运维一点（高级、原理面试前整）\",\"image-20230304151001878\"]},\"871\":{\"h\":\"2.Redis的JAVA客户端\",\"t\":[\"单单使用 Jedis 的话记得配 JedisPool 使用Spring Data Redis的话默认实现的 lettuce，如想用 Jedis 需要单独引一下\",\"需要注意的是，如果你需要对连接池进行更高级的配置，或者使用其他的连接池实现，可能需要手动引入 commons-pool2 依赖，并进行相应的配置。但通常情况下，使用 spring-boot-starter-data-redis 默认提供的配置已经足够满足大部分需求了。 实测：还是需要引入commons-pool2，因为data-redis里面这个依赖是optional true 总之，使用 <optional> 标签可以控制依赖的传递性，避免不必要的依赖冲突和版本冲突，但是需要注意，它的传递性也会被取消，需要手动处理相关的依赖。 之所以有这个问题，是因为springboot版本低了的原因，导致有这个optional。后面高版本没有这个optional了！\",\"image-20230304152602369\"]},\"872\":{\"h\":\"2.1.RedisTemplate\",\"t\":[\"RedisTemplate 记得设置一下序列化对象，直接看这个类源码有四个属性要设 可以看这个四个属性的类型 RedisSerializer 接口有哪些实现类！一般key用RedisSerializer.string、value用json对象，但有下面问题！\",\"优势：自动处理序列化问题，不用自己代码层面转来转去了\",\"弊端：如下，占用额外内控空间去记录该反序列化的那个类的全路径类名\"]},\"873\":{\"h\":\"2.2.反序列化问题-StringRedisTemplate\",\"t\":[\"使用上述配置序列化时，反序列化有浪费内存的问题。\"]},\"874\":{\"h\":\"1）问题：\",\"t\":[\"image-20230304171121214\"]},\"875\":{\"h\":\"2）解决\",\"t\":[\"为了节省内存空间,我们并不会使用JSON序列化器来处理value,而是统一使用String序列化器,要求只能存储String类型的key和value.当需要存储java对象时,手动完成对象的序列化和反序列化. 代码复杂了点多了两个手动序列化操作，但是空间省了\",\"StringRedisTemplate：Spring默认提供了一个StringRedisTemplate类,它的key和value的序列化方式默认就是String方式.省去了我们自定义RedisTemplate的过程\",\"image-20230306095441886\"]},\"876\":{\"h\":\"1.1.这里使用Hash保存用户信息\",\"t\":[\"JSON串的格式，引号冒号还需保存，如果想加一个还得把整个串干掉\",\"所以从优化的角度，推荐使用hash\",\"注意 Hash 结构跟 String 结构区分，这里有Redis的一个 key 而 value（K、V）才是真正的 Hash 结构\",\"StringRedisTemplate 对象可以创建 Hash！！！ stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);【HASH，KV】\",\"Note：一般存 key 会加上业务前缀做区分\",\"image-20230307161729539\",\"image-20230307162022703\",\"场景：想着自己使用spring cache技术整合Redis，用注解简化\",\"问题：反序列化报错：我的解决 -> return list / map / String Could not read JSON: Cannot construct instance of java.time.LocalDateTime\",\"XX：衍生出的问题：缓存每次都不会命中\",\"之前以为控制台输出了sql就是没有命中缓存，自己方法里加了log来甄别方法到底执行没。发现还是按照预期来了的 \",\"自己 Gulimall 笔记\",\"三种问题场景笔记 Redis\",\"亮点：缓存穿透/击穿 可以封装成工具类，给后面复用。 例如heima的视频，就活用泛型+lambda写这个工具类\",\"public <R,ID> R queryWithPassThrough( String keyPrefix, ID id, Class<R> type, Function<ID, R> dbFallback, Long time, TimeUnit unit){ //因为查询数据库是一段函数！！！这里就可以配合lambda这么用 有一个参数一个返回值 R r = dbFallback.apply(id); \",\"到这里我暂时中断了，因为我发现自己并没有那么想学！\",\"感觉不想学还是不要强行学这一块了，就学自己想学感兴趣的时间片小的东西吧。例如尝试融入leetcode拿成就感的这种。。。\",\"复制Bean的属性，好像同Spring有个工具类一样 BeanUtil.copyProperties\",\"将User对象转为HashMap存储到Redis BeanUtil.beanToMap org.springframework.beans的是 BeanUtils\",\"//由于UserDTO类有属性是Long的，而StringRedisTemplate<String, String>，所以这里用hutools构造函数定制化全给String //也可笨方法new map自己转成String Map<String, Object> userMap = BeanUtil.beanToMap(userDTO, new HashMap<>(), CopyOptions.create() .setIgnoreNullValue(true) .setFieldValueEditor((fieldName, fieldValue) -> fieldValue.toString())); \",\"弹幕: 就这个错误，我在谷粒商城的springsession的序列化器转换异常搞了半天，也是Long类型的！！！！！！\",\"有个问题 BeanUtil.copyProperties的ignoreNullValue不生效\",\"setFieldValueEditor优先级要高于ignoreNullValue导致前者首先被触发，因此出现空指针问题。你在setFieldValueEditor中也需要判空。\",\"这么设计的原因主要是，如果原值确实是null，但是你想给一个默认值，在此前过滤掉就不合理了，而你的值编辑后转换为null，后置的判断就会过滤掉。\",\"和上面反着来，JSONUtil.toBean(shopJson,Shop.class);\",\"将Redis拿到的Hash填充到Bean BeanUtil.fitlBeanWithMap\",\"JSONUtil.toJsonStr\",\"判断字符串是否为null及size小于0 StrUtil.isNotBlank(shopJson)\",\"BooleanUtil.isTrue(flag)\",\"Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, \\\"1\\\", 10, TimeUnit.SECONDS); //因为这里自动拆箱有可能null，所以用hutools return BooleanUtil.isTrue(flag); \"]},\"877\":{\"h\":\"RuoYi-Vue\",\"t\":[\"该项目没用 MP，整完这个可以再整 RuoYi-Cloud\",\"基于SpringBoot、Spring Security、Jwt、Vue的前后端分离的后台管理系统 【权限管理系统】\",\"楠哥的太浅了，粗略过了一遍 现在在过 王清江 的 约等于 26 h 26/3=9 哪些点想看就可以看他公众号的讲义\",\"本来想重写 Controller 了解验证码 IO 流的形式的～\",\"验证码生成使用了google kaptcha的验证码组件，没有重复造轮子\",\"@Resource(name = \\\"captchaProducerMath\\\") private Producer captchaProducerMath; // 核心方法 --> 返回一个数学表达式类似于： 5-1=?@4 // 这里的验证码生成使用了google kaptcha的验证码组件，没有重复造轮子，具体的生成逻辑作者重写了 // 这里生成表达式的方法（重写）在 com.ruoyi.framework.config包下的KaptchaTextCreator验证码文本生成器类 String capText = captchaProducerMath.createText(); ----------------------------- Producer 接口下就两个方法 * BufferedImage createImage(String var1); //9-8=?@1 * String createText(); //BufferedImage.class 一张图！ \"]},\"878\":{\"h\":\"1.1.Redis 处理\",\"t\":[\"Redis 写入两个内容：\",\"sys_config:sys.account.captchaEnabled\",\"configService.selectCaptchaEnabled(); // XD：这里是否开启状态也会写入 Redis\",\"<select id=\\\"selectConfig\\\" parameterType=\\\"SysConfig\\\" resultMap=\\\"SysConfigResult\\\"> -- XD: 学到一招，相当于字符串拼接 fragment <include refid=\\\"selectConfigVo\\\"/> <include refid=\\\"sqlwhereSearch\\\"/> </select> \",\"captcha_codes:e67884e45c464d418284441ab707b7b6\",\"验证码 1+1=?@2 答案 2 会写入 Redis， 1+1=? 会以流的形式转成图片给前端 【问题：登录的时候怎么把答案的key再带回给后端？ 获取验证码的时候顺便把uuid也给了前端 前端Vue data部分直接给值！看 1.2.前端 代码块】 这个点谷粒商城雷神好像是直接用个隐藏的input实现的，这里直接就 vue data() 部分有个 uuid 直接赋值\"]},\"879\":{\"h\":\"1.2.前端\",\"t\":[\"一套流程都是从前端发起，不搞懂前端运转就会 不明不白\",\"拿验证码请求举例：login.vue（getCodeImg方法封装到login.js） -> login.js(request同理) -> request.js 之所以这样跳，是因为封装了\",\"data() { return { codeUrl: \\\"\\\", loginForm: { username: \\\"admin\\\", password: \\\"admin123\\\", rememberMe: false, code: \\\"\\\", uuid: \\\"\\\" }, loginRules: { username: [ { required: true, trigger: \\\"blur\\\", message: \\\"请输入您的账号\\\" } ], ...... }; }, getCode() { getCodeImg().then(res => { this.captchaEnabled = res.captchaEnabled === undefined ? true : res.captchaEnabled; if (this.captchaEnabled) { this.codeUrl = \\\"data:image/gif;base64,\\\" + res.img; this.loginForm.uuid = res.uuid; //存在Vue的data里面的 } }); } \"]},\"880\":{\"h\":\"1.2.1.Vue baseURL\",\"t\":[\"// 创建axios实例 const service = axios.create({ // axios中请求配置有baseURL选项，表示请求URL公共部分 【XD:这个很重要，所有URL Request前面加的一层的公共前缀】 baseURL: process.env.VUE_APP_BASE_API, // 超时 timeout: 10000 }) \",\".env.production 文件：VUE_APP_BASE_API = '/dev-api'\",\"导致所有请求都会带上 http://localhost**/dev-api**/captchaImage\"]},\"881\":{\"h\":\"问题一：.env.development\",\"t\":[\"Q: 为什么用的是 .env.development 文件的配置呢？\",\"A: 您使用npm run dev命令启动开发服务器时，Vue.js会自动加载.env.development文件的配置，并将其中定义的环境变量应用于开发环境。您无需手动判断使用哪个配置文件，Vue.js会自动处理这些细节。\"]},\"882\":{\"h\":\"问题二：vue.config.js -> proxy\",\"t\":[\"标准的：配置反向代理服务器\",\"Q: http://localhost/dev-api/captchaImage 前端80，后端8080 这里没看到端口，Vue获取图片是请求的前端还是后端？\",\"URL 请求前端，通过反向代理映射到后端 为什么呢？ -> 巧妙解决跨域问题，这里没用 Nginx\",\"当然解决跨域也可以在后端处理，这不过这里前端处理掉了\"]},\"883\":{\"h\":\"仍然疑惑：\",\"t\":[\"那前端逻辑处理还不是要走 8080 要跨域，为什么F12调试地址栏不出来 这里不就又跨域了吗？ 还不是从80到8080请求\",\"proxy: { // detail: https://cli.vuejs.org/config/#devserver-proxy [process.env.VUE_APP_BASE_API]: { target: `http://localhost:8080`, changeOrigin: true, pathRewrite: { ['^' + process.env.VUE_APP_BASE_API]: '' } } }, \",\"配置 proxy 理解相当于平替了一下 Nginx 充当了一会代理服务器。但是真实环境更推荐使用 Nginx（专业）\",\"Q: 这段代码能够处理跨域问题是因为它通过配置代理将请求转发到指定的目标URL。\",\"在开发环境中，默认情况下，前端应用运行在一个开发服务器上，而后端 API 通常运行在另一个服务器上，两者的域名或端口不同，因此会涉及到跨域请求。\",\"通过配置代理，将前端应用发送的请求转发到目标URL，就可以绕过浏览器的同源策略，实现跨域请求\",\"Q: 所以vue配置了proxy相当于部分替代了nginx的功能？相当于一个代理帮你去请求了8080的后端服务\",\"是的，配置Vue的代理相当于在开发环境下使用一个轻量级的代理服务器，帮助前端应用将请求转发到后端服务。这种代理功能可以部分替代Nginx等反向代理服务器的功能。\",\"通过Vue的代理配置，前端应用可以直接发送请求到代理服务器（一般默认为开发服务器的端口，比如80端口），然后代理服务器会将这些请求转发到后端服务（比如8080端口）上。\",\"代理服务器会处理跨域请求，并在转发请求时修改请求头等信息，确保请求能够成功到达后端服务，并将后端服务的响应返回给前端应用。\",\"这种代理配置的好处是，在开发环境下，前端开发人员可以直接通过代理服务器与后端服务进行交互，无需担心跨域问题，简化了开发过程。\",\"然而，需要注意的是，Vue的代理只在开发环境下起作用，用于方便地进行开发和调试。在生产环境中，应该使用真正的反向代理服务器（如Nginx）来处理前后端的请求转发和跨域问题。\",\"【因为：然而，在生产环境中，Vue的代理配置不会生效。在生产环境中，前端应用通常会经过打包构建，生成静态文件，然后部署到一个独立的Web服务器（如Nginx、Apache等）上。这时候，前端应用和后端API处于不同的域名或端口，需要使用真正的反向代理服务器来处理请求转发和跨域问题。】 所以：感觉还是能用的只要在一台服务器上还是保持这种情况\",\"Q: vue生产环境我也想配置proxy解决代理可以吗\",\"XD: 应该是行的，只是不推荐\",\"在Vue的生产环境中，配置代理（proxy）并不是一个常见或推荐的做法。Vue的代理配置主要是为了在开发环境下方便调试和解决跨域问题。\",\"在生产环境中，建议使用适当的反向代理服务器（如Nginx）来处理前端应用和后端服务之间的请求转发和代理。反向代理服务器可以提供更强大和灵活的功能，同时具有更高的性能和稳定性。\",\"后端逻辑三步：\",\"校验验证码\",\"校验密码\",\"生成 Token 给前端（TODO 作用）\",\"使用异步任务管理器，结合线程池，实现了异步的操作日志记录，和业务逻辑实现异步解耦合。 XD: ScheduledThreadPoolExecutor\",\"三个 XHR：\",\"http://localhost:1024/dev-api/login\",\"getInfo (前端每一个页面跳转都要执行，在全局路由实现) \",\"获取当前用户的角色和权限信息，存储到 Vuex 中 \",\"vuex：Vue提供的状态管理工具，用于统一管理我们项目中各种数据的交互和重用，存储我们需要用到数据对象。\",\"getRouters \",\"菜单 Entry 信息\",\"recursionFn 递归实现，parentID 控制父子关系形成好树状结构\"]},\"884\":{\"h\":\"日志\",\"t\":[\"AsyncFactory.class 发现使用 API 方式获取 Bean\",\"/** * XD：这里是因为本类只是个工具类，没有加 @Component 托管到 Spring 所以用这种 API 方式获取 Bean * 使用 SpringUtils.getBean(ISysLogininforService.class) 可以在任何地方手动获取 Bean 对象，不受 Spring 容器的控制。 * 而 @Autowired 注解需要在受 Spring 管理的类中使用，由 Spring 容器负责注入依赖。 */ // 插入数据 SpringUtils.getBean(ISysLogininforService.class).insertLogininfor(logininfor); \",\"菜单栏的东西大体都一样的，分析了这一个其他都差不多 这里system/user 有 list & tree 两个数据要获取\",\"http://localhost:1024/dev-api/system/user/list?pageNum=1&pageSize=10\"]},\"885\":{\"h\":\"3.1.List-centerPanel\",\"t\":[\"这里的 pageNum & pageSize 是通过工具类 ServletUtils 原生方式获取的：\",\"getRequestAttributes().getRequest().getParameter(name); ------ pageDomain.setPageNum(Convert.toInt(ServletUtils.getParameter(PAGE_NUM), 1)); pageDomain.setPageSize(Convert.toInt(ServletUtils.getParameter(PAGE_SIZE), 10)); \"]},\"886\":{\"h\":\"3.2.Tree-LeftPanel\",\"t\":[\"同路由菜单一样 recursionFn 递归\"]},\"887\":{\"h\":\"PS：PageHelper\",\"t\":[\"分页数据使用的是：Mybatis + PageHelper\",\"PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);\",\"setReasonable 修正参数的作用：\",\"PageHelper 中的 reasonable 对参数进行逻辑处理，保证参数的正确性，\",\"pageNum = 0/-1, 就修正为 pageNum = 1\",\"CURD-URD 略。。\",\"在 Boke 有些系统也有这个功能，这里也有感兴趣学一下\",\"删 Redis 用户信息根据token key删（简单删除就行）\",\"每个请求会经过过滤器进行权限校验 token\",\"分为 全局限流 vs ip限流\",\"RateLimiterAspect.class RateLimiter\",\"用的 Redis 记录次数以及 TTL 底层使用的是 AOP 明面是一个注解加到置顶 API 限流\",\"service：lua 对redis 执行 incr，自增到注解指定的 100 时候就不自增直接 return\",\"限流部分代码：\",\"@Aspect @Component public class RateLimiterAspect{ @Before(\\\"@annotation(rateLimiter)\\\") public void doBefore(JoinPoint point, RateLimiter rateLimiter) \",\"JoinPoint point 这个类可以获取 AOP 前置通知（Before Advice）注解标注的类名及其方法名当Redis的key\",\"Redis Key： rate_limit:com.ruoyi.web.controller.system.SysUserController-list\",\"MethodSignature signature = (MethodSignature) point.getSignature(); Method method = signature.getMethod(); Class<?> targetClass = method.getDeclaringClass(); stringBuffer.append(targetClass.getName()).append(\\\"-\\\").append(method.getName()); return stringBuffer.toString(); \",\"主要迷惑前端页面配置好到数据库，后端quartz具体怎么执行的\",\"项目启动的时候就会执行数据库已有的：通过 @PostConstruct 注解 轮询库然后 createScheduleJob\",\"新增则 ScheduleUtils.createScheduleJob(scheduler, job);\"]},\"888\":{\"h\":\"前端：\",\"t\":[\"前端可以针对同一个按钮进行拦截，在 request.js 中有 request拦截器 （如果请求数据和请求URL和最近一次请求一致，并且请求间隔小于1000ms，就进行请求拦截，直接拒绝当前请求。）\"]},\"889\":{\"h\":\"后端：\",\"t\":[\"从我上面的描述，发现了一个bug，总有手快的人，喜欢点A按钮，然后立刻点B按钮，然后又立刻点A按钮。那么对于A按钮是重复提交了，但是又不满足前端判断重复请求的条件，于是重复请求进入了后端，这时候就需要后端再次校验，是不是重复请求。\",\"防止重复提交拦截器, 获取注解类不为空即判断（看下）\",\"判断请求url和数据是否和上一次相同， 借助 Redis 存 「唯一标识（指定key + url + 消息头『${token.header}』）:values」 compareParams(nowDataMap, preDataMap) && compareTime(nowDataMap, preDataMap, annotation.interval())\",\"经过debug发现后端判断重复逻辑和前端其实差不多。难点在于如何确定同一个人的同一个请求，ry使用的url+token的方式，确定同一个人同一个请求。\",\"自定义注解，配合SpringSecurity实现注解地方放行访问 .antMatchers(\\\"/actuator/*\\\").permitAll() “?”里是注解过的地方\",\"PermitAllUrlProperties.class 注解解释器项目启动的时候遍历所有 URL 方法和对应类有没有加这个注解，整成一个 List 暴露到@Configuration容器\",\"SecurityConfig 配置类中遍历上面类暴露到 List 迭代允许 permitAllUrl.getUrls().forEach(url -> registry.antMatchers(url).permitAll());\"]},\"890\":{\"h\":\"Tips:注解\",\"t\":[\"我们一般知道，注解是给程序看的，给机器看的，当然也是给程序员看的。注解如果没有注解解析器（注解处理器，注解解释器），那么注解就没有什么作用。所以@Anonyous一定是在某个地方被干嘛干嘛了！\",\"上三个都是有注解的搭配着注解解析器实现相应功能，限流、定时任务、防重\",\"杭州面试问到这个，全是针对项目的技术栈在问！！！\",\"若依是支持token续期的，具体续期的代码在TokenService类下的verifyToken()方法中，默认是不到20分钟就进行续期，但是必须发生请求才行，可以通过\",\"更改MILLIS_MINUTE_TEN修改续期判断的剩余时间。按理说只要一直都在发生请求的话是不会出现token过期的情况的。\",\"在Ruoyi开源项目中，对于令牌续期（Token Renewal）问题的处理通常如下：\",\"刷新令牌（Refresh Token）：Ruoyi使用JWT（JSON Web Token）进行身份验证和授权。JWT令牌包含了用户的身份信息和权限，并设置了一个有效期。当令牌即将过期时，可以使用刷新令牌来获取新的访问令牌，而无需重新进行用户身份验证。\",\"拦截器处理：Ruoyi使用拦截器（Interceptor）来对请求进行拦截和处理。在拦截器中，会检查JWT令牌的有效性和过期时间。如果令牌即将过期，拦截器会执行刷新令牌的逻辑，获取新的令牌并将其返回给客户端。客户端可以使用新的令牌继续进行后续请求。\",\"过期错误处理：如果令牌已经过期，拦截器会捕获到过期错误，并返回相应的错误响应给客户端。客户端可以根据错误响应中的提示信息，重新进行用户身份验证或刷新令牌操作。\",\"刷新令牌接口：Ruoyi通常会提供一个刷新令牌的接口，用于客户端发送刷新令牌的请求。该接口会根据刷新令牌的有效性，颁发一个新的访问令牌，并返回给客户端。客户端可以使用新的访问令牌继续进行后续请求。\",\"刷新令牌的拦截器通常是通过Spring Security框架的拦截器实现的 GPT:\",\"public class JwtTokenRefreshFilter extends OncePerRequestFilter { @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { // 检查请求中是否携带有效的JWT令牌 // 验证JWT令牌的有效性和过期时间 // 如果令牌即将过期，执行刷新令牌的操作 // 将新的令牌添加到响应头中 // 继续执行过滤器链，处理后续请求 } } \"]},\"891\":{\"h\":\"MySQL实战45讲\",\"t\":[\"取自极客时间专栏，用于自己复习！详细评论看官方的 作者：林晓斌，网名“丁奇”，前阿里资深技术专家\",\"原理先行，再实践验证。切记不要不懂装懂！\"]},\"892\":{\"h\":\"1.MySQL 查询拆解\",\"t\":[\"一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。\",\"看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。\",\"大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。\",\"Server 层\",\"包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。\",\"存储引擎层\",\"负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。\",\"也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同，在后面的文章中，我们会讨论到引擎的选择。\",\"从图中不难看出，不同的存储引擎共用一个 Server 层，也就是从连接器到执行器的部分。你可以先对每个组件的名字有个印象，接下来我会结合开头提到的那条 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。\",\"事务（并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。）、\",\"索引、行锁...都是在这层实现！\"]},\"893\":{\"h\":\"2.连接器\",\"t\":[\"第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：\",\"mysql -h$ip -P$port -u$user -p \",\"输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。\",\"连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。\",\"如果用户名或密码不对，你就会收到一个\\\"Access denied for user\\\"的错误，然后客户端程序结束执行。\",\"如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。\",\"这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。\",\"连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。\",\"扩展：show processlist 显示的信息都是来自MySQL系统库 information_schema 中的 processlist 表。所以使用下面的查询语句可以获得相同的结果：\",\"select * from information_schema.processlist #实测能查用公司MySQL服务器的人！ \",\"img\",\"客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\",\"如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。\",\"数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。\",\"建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。\",\"但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。\",\"怎么解决这个问题呢？你可以考虑以下两种方案。\",\"定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。\",\"如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。\"]},\"894\":{\"h\":\"3.查询缓存\",\"t\":[\"连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。\",\"MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。\",\"如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。\",\"但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。\",\"查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。\",\"好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND（还有 ON、OFF），这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：\",\"mysql> select SQL_CACHE * from T where ID=10； show variables like '%query_cache%' # variables 可以看查询缓存参数 query_cache_type \",\"需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。（语句一更新就没命中率低，废时间）\"]},\"895\":{\"h\":\"4.分析器\",\"t\":[\"做什么：词法分析 -> 语法分析\",\"如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。\",\"分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。\",\"MySQL 从你输入的\\\"select\\\"这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。\",\"做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。\",\"如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。\",\"mysql> elect * from t where ID=1; ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from t where ID=1' at line 1 \",\"一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。\"]},\"896\":{\"h\":\"5.优化器\",\"t\":[\"怎么做\",\"经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。\",\"优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：\",\"mysql> select * from t1 join t2 using(ID) where t1.c=10 and t2.d=20; \",\"既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。\",\"也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。\",\"这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。\",\"优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。\"]},\"897\":{\"h\":\"6.执行器\",\"t\":[\"MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。\",\"开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。\",\"mysql> select * from T where ID=10; ERROR 1142 (42000): SELECT command denied to user 'b'@'localhost' for table 'T' \",\"如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。\",\"比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：\",\"调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；\",\"调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。\",\"执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。\",\"至此，这个语句就执行完成了。\",\"对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。\",\"你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。\",\"在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此**引擎扫描行数跟 rows_examined 并不是完全相同的。**我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。\",\"#注意在交互界面进行的设置，如果数据库进行重启，这些设置都会失效。如果要永久生效，需要修改配置文件： show variables like 'slow_query_log%' # 慢查询是否开启，保存路径 show variables like 'long_query_time' # Unit s \",\"补充：我们通过慢查询日志，可以定位到是哪一条语句查询比较慢，找到这条语句之后，如何去分析它慢的原因呢?最简单的方法，可以通过explain解析，执行命令：explain (sql语句)\",\"需要重点关注possible_keys、key、rows这几个属性值。\",\"possible_keys表示该语句可能会用到的索引。\",\"key表示该语句实际用到的索引。\",\"rows表示该语句扫描的行数。\",\"通过这些属性，我们可以大致的分析一下，第一条语句没有走索引，它扫描了9万多行数据，所以查询速度比较慢，而第二条语句走了主键索引，仅仅扫描了一条语句，所以它的执行速度比较快。这样我们就可以快速定位到问题，然后针对性的去解决。\",\"Personal Question：有个问题不太明白，为什么对权限的检查不在优化器之前做？\",\"作者回复: 有些时候，SQL语句要操作的表不只是SQL字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的\",\"Question：\",\"我给你留一个问题吧，如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？\",\"Answer：\",\"我猜是 分析器阶段 Bingo\"]},\"898\":{\"h\":\"1.前言\",\"t\":[\"一条更新语句的执行流程又是怎样的呢？\",\"之前你可能经常听 DBA 同事说，MySQL 可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免会好奇，这是怎样做到的呢？\",\"我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 ID 和一个整型字段 c：\",\"mysql> create table T(ID int primary key, c int); \",\"如果要将 ID=2 这一行的值加 1，SQL 语句就会这么写：\",\"mysql> update T set c=c+1 where ID=2; \",\"前面我有跟你介绍过 SQL 语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。\",\"你执行语句前要先连接数据库，这是连接器的工作。\",\"前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。\",\"接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。\",\"与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。\"]},\"899\":{\"h\":\"2.redo log\",\"t\":[\"redo log 是 InnoDB 引擎特有的日志。\",\"一个固定大小，**“循环写”**的日志文件，记录的是物理日志——“在某个数据页上做了某个修改”（页的概念看小结）。\",\"一直费解的，这个日志存在的必要性：\",\"想要恢复未刷盘但已经写入 redo log 和 binlog 的数据到内存时，binlog 是无法恢复的。虽然 binlog 拥有全量的日志，但没有一个标志让 innoDB 判断哪些数据已经刷盘，哪些数据还没有。\",\"但 redo log 不一样，只要刷入磁盘的数据，都会从 redo log 中抹掉，数据库重启后，直接把 redo log 中的数据都恢复至内存就可以了。这就是为什么 redo log 具有 crash-safe 的能力，而 binlog 不具备。\",\"不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。\",\"如果有人要赊账或者还账的话，掌柜一般有两种做法：\",\"一种做法是直接把账本翻出来，把这次赊的账加上去或者扣除掉；\",\"另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算。\",\"在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。\",\"这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的帮助，每次记账都得翻账本，效率是不是低得让人难以忍受？\",\"同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。\",\"而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。\",\"Question：写redo日志也是写io（我理解也是外部存储）。同样耗费性能。怎么能做到优化呢\",\"Answer：写redo log是顺序写（固定的位置循环写入），不用去“找位置”，而更新数据需要找位置\",\"具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。\",\"如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。\",\"与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。\",\"write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。\",\"write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。\",\"有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。\",\"Question：为什么 redo log 具有 crash-safe 的能力，而 binlog 没有？\",\"Answer：虽然 binlog 拥有全量的日志，但没有一个标志让 innoDB 判断哪些数据已经刷盘，哪些数据还没有。\",\"但 redo log 不一样，只要刷入磁盘的数据，都会从 redo log 中抹掉，数据库重启后，直接把 redo log 中的数据都恢复至内存就可以了。\",\"要理解 crash-safe 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。\"]},\"900\":{\"h\":\"3.binlog\",\"t\":[\"你一般看到 binlog 就要想到主从复制。当然，除了主从复制之外，binlog 还能帮助我们实现数据恢复。\",\"有两种模式，statement 格式的话是记sql语句， row 格式会记录行的内容，记两条，更新前和更新后都有。\",\"一个无限大小，**“追加写”**的日志文件，记录的是逻辑日志——“给 ID=2 这一行的 c 字段加1”。\",\"前面我们讲过，MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。\",\"我想你肯定会问，为什么会有两份日志呢？\",\"因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。\",\"这两种日志有以下三点不同：\",\"redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。\",\"redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。\",\"redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\",\"有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。\",\"执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。\",\"执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。\",\"引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。\",\"执行器生成这个操作的 binlog，并把 binlog 写入磁盘。\",\"执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。\",\"这里我给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。\",\"你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是\\\"两阶段提交\\\"。\"]},\"901\":{\"h\":\"4.两阶段提交\",\"t\":[\"为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得从文章开头的那个问题说起：怎样让数据库恢复到半个月内任意一秒的状态？\",\"前面我们说过了，binlog 会记录所有的逻辑操作，并且是采用“追加写”的形式。**如果你的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。**这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。\",\"当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：\",\"首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；\",\"然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。\",\"这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。\",\"好了，说完了数据恢复过程，我们回来说说，为什么日志需要“两阶段提交”。这里不妨用反证法来进行解释。\",\"由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。\",\"仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出现什么情况呢？\",\"先写 redo log 后写 binlog。假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。 但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。 然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。\",\"先写 binlog 后写 redo log。如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。\",\"可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。\",\"你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀？\",\"其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。\",\"简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。\"]},\"902\":{\"h\":\"5.小结\",\"t\":[\"今天，我介绍了 MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。\",\"补充：在事务中语句更新会生成 undo log（回滚日志）吗？ 衍生出 多版本和 row trx_id 的概念08丨事务到底是隔离的还是不隔离的？ 对于 MySQL 数据库来说，不仅事务的更新操作会记录在 Binlog 中，非事务的 UPDATE 语句也会被记录在 Binlog 中。 Undo Log：记录了事务执行前的数据，用于回滚事务 和 实现MVCC功能\",\"redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。\",\"sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。\",\"show variables like 'innodb_flush_log_at_trx_commit' #我查默认是 1 show variables like 'sync_binlog' #我查默认是 1 \",\"我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。\",\"Q：文章的最后，我给你留一个思考题吧。前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？\"]},\"903\":{\"h\":\"补充\",\"t\":[\"数据页：InnoDB 将存储的数据划分为若干个「页」，以页作为磁盘和内存交互的基本单位，一个页的大小默认为 16KB\",\"show status like 'innodb_page_size'; \",\"也就是说，即便我们只查询一条记录，InnoDB 也会把至少 16KB 的内容从磁盘读到内存中。\",\"可以把「页」理解为一个容器，这个容器是用来存储「记录」的。\"]},\"904\":{\"h\":\"1.前言\",\"t\":[\"提到事务，你肯定不陌生，和数据库打交道的时候，我们总是会用到事务。最经典的例子就是转账，你要给朋友小王转 100 块钱，而此时你的银行卡只有 100 块钱。\",\"转账过程具体到程序里会有一系列的操作，比如查询余额、做加减法、更新余额等，这些操作必须保证是一体的，不然等程序查完之后，还没做减法之前，你这 100 块钱，完全可以借着这个时间差再查一次，然后再给另外一个朋友转账，如果银行这么整，不就乱了么？这时就要用到“事务”这个概念了。\",\"简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。\",\"今天的文章里，我将会以 InnoDB 为例，剖析 MySQL 在事务支持方面的特定实现，并基于原理给出相应的实践建议，希望这些案例能加深你对 MySQL 事务原理的理解。\"]},\"905\":{\"h\":\"2.隔离性与隔离级别\",\"t\":[\"提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中 I，也就是“隔离性”。\",\"当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题【统称一致性问题】，为了解决这些问题，就有了“隔离级别”的概念。\",\"在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。下面我逐一为你解释：\",\"增加对应解决哪个问题 加上英文后续\",\"Read Uncommitted 读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。（脏读（Dirty Read）及 不可重复读、幻读）\",\"Read Uncommitted是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）。\",\"Read Committed 读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。（不可重复读（Non Repeatable Read）及 幻读）\",\"不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。\",\"Oracle 和 SQL Server 的默认隔离级别。\",\"Repeatable Read 可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。（幻读（Phantom Read））\",\"幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。\",\"REPEATABLE-READ 隔离级别是基于 MVCC 实现的\",\"MySQL 的默认隔离级别。\",\"Serializable 串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\",\"XD：\",\"1）以commit为界，读未提交是commit之前的修改都可见\",\"2）读已提交是commit之后可见\",\"3）可重复读就是以事务启动那个时间点的数据为准，就是那个点开个视图\",\"其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。\",\"mysql> create table T(c int) engine=InnoDB; insert into T(c) values(1); \",\"我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、V3 的返回值分别是什么。\",\"若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。\",\"若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。\",\"若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。\",\"若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。\",\"在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁的方式来避免并行访问。\",\"我们可以看到在不同的隔离级别下，数据库行为是有所不同的。Oracle 数据库的默认隔离级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL 的应用，为保证数据库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”。\",\"配置的方式是，将启动参数 transaction-isolation 的值设置成 READ-COMMITTED。你可以用 show variables 来查看当前的值。如果使用InnoDB，默认的隔离级别是Repeatable Read。\",\"mysql> show variables like 'transaction_isolation'; +-----------------------+----------------+ | Variable_name | Value | +-----------------------+----------------+ | transaction_isolation | READ-COMMITTED | +-----------------------+----------------+ \",\"总结来说，存在即合理，哪个隔离级别都有它自己的使用场景，你要根据自己的业务情况来定。我想你可能会问那什么时候需要“可重复读”的场景呢？我们来看一个数据校对逻辑的案例。\",\"假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。\",\"这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。\"]},\"906\":{\"h\":\"3.事务隔离的实现\",\"t\":[\"理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。(MySQL default isolation level)\",\"在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。\",\"假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志 undo log 里面就会有类似下面的记录。\",\"当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC)。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。 MVCC 可以看作是行级锁的一个升级，所以 MyISAM 不支持 MVCC，而 InnoDB 支持\",\"补充：多版本并发控制（MVCC）是一种用来解决读-写冲突的无锁并发控制\",\"读-读：不存在任何问题，也不需要并发控制\",\"读-写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读\",\"写-写：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失\",\"所以在数据库中，因为有了 MVCC，所以我们可以形成两个组合：\",\"补充：\",\"MVCC（多版本并发控制）是一种数据库事务控制技术，它可以解决读写冲突的问题，其基本思想是在数据库中维护多个版本的数据，以便在并发读写操作时，每个事务都可以读取到自己所需要的数据版本，从而避免了数据读写冲突的问题。\",\"悲观锁SQL落地：具体来说，SELECT ... FOR UPDATE 语句会对查询到的行加上排它锁（Exclusive Lock），这意味着其他事务不能同时对这些行进行修改。在多个事务同时查询同一组数据时，如果其中一个事务使用了 FOR UPDATE，则其他事务必须等待该事务释放锁之后才能进行修改操作。\",\"行级锁都是基于索引的，如果一条 SQL 语句用不到索引是不会使用行级锁的，而会使用表级锁把整张表锁住，这点需要咱们格外的注意\",\"当 SELECT... FOR UPDATE 查询条件明确指定主键时，为行锁。\",\"当 SELECT... FOR UPDATE 查询条件明确指定索引时，为行锁，所有满足此条件的行都会被加锁。\",\"当 SELECT... FOR UPDATE 查询条件所指定主键为一个范围时，为行锁，所有满足此条件的行都会被加锁。\",\"当 SELECT... FOR UPDATE 查询条件无主键、无索引时，为表锁。\",\"当 SELECT... FOR UPDATE 查询条件明确指定索引或主键时，但查询无结果时，不会加行锁，更不会加表锁\",\"以下是一个使用悲观锁解决写写冲突的实例语句： START TRANSACTION; SELECT * FROM my_table WHERE id = 1 FOR UPDATE; -- 对 id 为 1 的数据行加悲观锁 UPDATE my_table SET column1 = 'new value' WHERE id = 1; COMMIT; -- 事务结束，释放锁 在这个例子中，事务首先使用 SELECT ... FOR UPDATE 语句对 id 为 1 的数据行进行加锁。这将导致其他事务在尝试修改相同数据行时被阻塞，直到该事务释放锁。然后，事务执行更新操作并提交事务，释放锁。 \",\"MVCC + 悲观锁：select * from xxxx where id = 1 for update; MVCC 解决读写冲突，悲观锁解决写写冲突\",\"MVCC + 乐观锁：update t_goods set count = count -1 , version = version + 1 where good_id=2 and version = 1 MVCC 解决读写冲突，乐观锁解决写写冲突\",\"同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。（XD：MVCC 解决读写冲突。我在自己视图改自己的，你们读取你们自己视图的互不冲突）\",\"你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。\",\"什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的 read-view 的时候。\",\"基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。\",\"长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。\",\"在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。\",\"除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候展开。\"]},\"907\":{\"h\":\"4.事务的启动方式\",\"t\":[\"如前面所述，长事务有这些潜在风险，我当然是建议你尽量避免。其实很多时候业务开发同学并不是有意使用长事务，通常是由于误用所致。MySQL 的事务启动方式有以下几种：\",\"显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。\",\"set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。\",\"有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令。这就导致接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。\",\"因此，我会建议你总是使用 set autocommit=1, 通过显式语句的方式来启动事务。\",\"但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。如果你也有这个顾虑，我建议你使用 commit work and chain 语法。\",\"在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。\",\"你可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。\",\"select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))>60 \"]},\"908\":{\"h\":\"5.小结\",\"t\":[\"补充面试题：说一下mysql中事务的实现原理\",\"mysql是由mvcc实现的事务控制\",\"MVCC的实现依赖于：隐藏字段、ReadView、undolog\",\"ReadView 数据的可见性和事务的隔离级别有关\",\"PS: 隐藏字段\",\"DB_TRX_ID(事务ID)\",\"DB_ROLL_PTR(指向该行的 undo log)\",\"DB_ROW_ID（如果没有主键则会自动生成这个当主键）\",\"这篇文章里面，我介绍了 MySQL 的事务隔离级别的现象和实现，根据实现原理分析了长事务存在的风险，以及如何用正确的方式避免长事务。希望我举的例子能够帮助你理解事务，并更好地使用 MySQL 的事务特性。\",\"Q：如何避免长事务对业务的影响？\",\"首先，从应用开发端来看：\",\"确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。\",\"确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中。这种只读事务可以去掉。\",\"业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。（为什么会意外？在后续的文章中会提到这类案例）\",\"其次，从数据库端来看：\",\"监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；\",\"Percona 的 pt-kill 这个工具不错，推荐使用；\",\"在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；\",\"如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。\"]},\"909\":{\"h\":\"1.前言\",\"t\":[\"提到数据库索引，我想你并不陌生，在日常工作中会经常接触到。比如某一个 SQL 查询比较慢，分析完原因之后，你可能就会说“给某个字段加个索引吧”之类的解决方案。但到底什么是索引，索引又是如何工作的呢？今天就让我们一起来聊聊这个话题吧。\",\"数据库索引的内容比较多，我分成了上下两篇文章。索引是数据库系统里面最重要的概念之一，所以我希望你能够耐心看完。在后面的实战文章中，我也会经常引用这两篇文章中提到的知识点，加深你对数据库索引的理解。\",\"一句话简单来说，索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。\"]},\"910\":{\"h\":\"补充：索引的优缺点\"},\"911\":{\"h\":\"优点:\",\"t\":[\"使用索引可以大大加快 数据的检索速度（大大减少检索的数据量）, 这也是创建索引的最主要的原因。\",\"通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\",\"缺点:\",\" * 创建索引和维护索引需要耗费许多时间。**当对表中的数据进行==增删改==的时候，如果数据有索引，那么索引也需要动态的修改，会降低 SQL 执行效率。** * 索引需要使用物理文件存储，也会耗费一定空间。 \",\"但是，使用索引一定能提高查询性能吗?\",\"大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。\",\"原文链接\"]},\"912\":{\"h\":\"面试题-百万级别以上的数据如何删除？\",\"t\":[\"看下文 title\"]},\"913\":{\"h\":\"2.索引的常见模型\",\"t\":[\"索引就是数据结构!!一种为了提升检索效率的数据结构。在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作为索引结构\",\"哈希表这种结构适用于只有等值查询的场景 有序数组索引只适用于静态存储引擎 搜索树\",\"索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。\",\"下面我主要从使用的角度，为你简单分析一下这三种模型的区别。\"]},\"914\":{\"h\":\"2.1.哈希表\",\"t\":[\"哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的值即 key，就可以找到其对应的值即 Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。\",\"不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。\",\"假设，你现在维护着一个身份证信息和姓名的表，需要根据身份证号查找对应的名字，这时对应的哈希索引的示意图如下所示：\",\"图中，User2 和 User4 根据身份证号算出来的值都是 N，但没关系，后面还跟了一个链表。假设，这时候你要查 ID_card_n2 对应的名字是什么，处理步骤就是：首先，将 ID_card_n2 通过哈希函数算出 N；然后，按顺序遍历，找到 User2。\",\"需要注意的是，图中四个 ID_card_n 的值并不是递增的，这样做的好处是增加新的 User 时速度会很快，只需要往后追加。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度是很慢的。\",\"你可以设想下，如果你现在要找身份证号在 [ID_card_X, ID_card_Y] 这个区间的所有用户，就必须全部扫描一遍了。\",\"所以，哈希表这种结构适用于只有等值查询的场景，比如 Memcached 及其他一些 NoSQL 引擎。\"]},\"915\":{\"h\":\"2.2.有序数组\",\"t\":[\"而有序数组在等值查询（二分）和范围查询场景中的性能就都非常优秀。还是上面这个根据身份证号查名字的例子，如果我们使用有序数组来实现的话，示意图如下所示：\",\"这里我们假设身份证号没有重复，这个数组就是按照身份证号递增的顺序保存的。这时候如果你要查 ID_card_n2 对应的名字，用二分法就可以快速得到，这个时间复杂度是 O(log(N))。\",\"同时很显然，这个索引结构支持范围查询。你要查身份证号在 [ID_card_X, ID_card_Y] 区间的 User，可以先用二分法找到 ID_card_X（如果不存在 ID_card_X，就找到大于 ID_card_X 的第一个 User），然后向右遍历，直到查到第一个大于 ID_card_Y 的身份证号，退出循环。\",\"如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。\",\"所以，有序数组索引只适用于静态存储引擎，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。\"]},\"916\":{\"h\":\"2.3.\",\"t\":[\"二叉搜索树也是课本里的经典数据结构了。还是上面根据身份证号查名字的例子，如果我们用二叉搜索树来实现的话，示意图如下所示：\",\"二叉搜索树的特点是：每个节点的左儿子小于父节点，父节点又小于右儿子。这样如果你要查 ID_card_n2 的话，按照图中的搜索顺序就是按照 UserA -> UserC -> UserF -> User2 这个路径得到。这个时间复杂度是 O(log(N))。\",\"当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是 O(log(N))。\",\"补充：二叉查找树由于存在退化成链表的可能性，会使得查询操作的时间复杂度从 O(logn)降低为 O(n)。为了解决二叉查找树会在极端情况下退化成链表的问题，后面就有人提出平衡二叉查找树（AVL 树）。\",\"树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。\",\"你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。\",\"补充：\",\"1）由于树是存储在磁盘中的，访问每个节点，都对应一次磁盘 I/O 操作（假设一个节点的大小「小于」操作系统的最小读写单位块的大小），也就是说树的高度就等于每次查询数据时磁盘 IO 操作的次数，所以树的高度越高，就会影响查询性能。\",\"2）这里有点不理解，为什么树高20就是20个数据块？\",\"每个叶子结点就是一个块，每个块包含两个数据，块之间通过链式方式链接。树高20的话，就要遍历20个块\",\"B+树的非叶子节点不保存数据，只进行数据索引（关键字记录的指针）\",\"B+树叶子节点保存了父节点的所有关键字记录的指针，所有数据地址必须要到叶子节点才能获取到。所以每次数据查询的次数都一样；\",\"**补充：**数据库存储大多不适用二叉树，因为树高过高，会适用N叉树。 这里 N 叉树没很理解，B+树难道是 N 叉？\",\"答：是的。B树和平衡二叉树不同，B树属于多叉树又名平衡多路查找树（查找路径不只两个）\",\"B+Tree这种多叉树，更加矮宽，更适合存储在磁盘中\",\"为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。\",\"以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。\",\"N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。\",\"不管是哈希还是有序数组，或者 N 叉树，它们都是不断迭代、不断优化的产物或者解决方案。数据库技术发展到今天，跳表、LSM 树等数据结构也被用于引擎设计中，这里我就不再一一展开了。\",\"你心里要有个概念，数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。\",\"截止到这里，我用了半篇文章的篇幅和你介绍了不同的数据结构，以及它们的适用场景，你可能会觉得有些枯燥。但是，我建议你还是要多花一些时间来理解这部分内容，毕竟这是数据库处理数据的核心概念之一，在分析问题的时候会经常用到。当你理解了索引的模型后，就会发现在分析问题的时候会有一个更清晰的视角，体会到引擎设计的精妙之处。\",\"现在，我们一起进入相对偏实战的内容吧。\",\"在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。由于 InnoDB 存储引擎在 MySQL 数据库中使用最为广泛，所以下面我就以 InnoDB 为例，和你分析一下其中的索引模型。\"]},\"917\":{\"h\":\"3.InnoDB 的索引模型\",\"t\":[\"在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。\",\"每一个索引在 InnoDB 里面对应一棵 B+ 树。\",\"假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。\",\"这个表的建表语句是：\",\"mysql> create table T( id int primary key, k int not null, name varchar(16), index (k))engine=InnoDB; \",\"表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下。\",\"从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。\",\"主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。\",\"非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。\",\"根据上面的索引结构说明，我们来讨论一个问题：基于主键索引和普通索引的查询有什么区别？\",\"如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；\",\"如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。\",\"也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。\"]},\"918\":{\"h\":\"4.索引维护\",\"t\":[\"B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。\",\"而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。\",\"除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。\",\"当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。\",\"基于上面的索引维护过程说明，我们来讨论一个案例：\",\"你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。当然事无绝对，我们来分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。\",\"自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： NOT NULL PRIMARY KEY AUTO_INCREMENT。\",\"插入新记录的时候可以不指定 ID 的值，系统会获取当前 ID 最大值加 1 作为下一条记录的 ID 值。\",\"也就是说，自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。\",\"而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。\",\"除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？\",\"由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整型（bigint）则是 8 个字节。\",\"补充：身份证号因为有 char 'x' 17+3=20\",\"显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。\",\"所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。\",\"有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：\",\"只有一个索引；\",\"该索引必须是唯一索引。\",\"你一定看出来了，这就是典型的 KV 场景。\",\"由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。\",\"这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。\"]},\"919\":{\"h\":\"5.小结\",\"t\":[\"今天，我跟你分析了数据库引擎可用的数据结构，介绍了 InnoDB 采用的 B+ 树结构，以及为什么 InnoDB 要这么选择。B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数。\",\"由于 InnoDB 是索引组织表，一般情况下我会建议你创建一个自增主键，这样非主键索引占用的空间最小。但事无绝对，我也跟你讨论了使用业务逻辑字段做主键的应用场景。\",\"Q：\",\"最后，我给你留下一个问题吧。对于上面例子中的 InnoDB 表 T，如果你要重建索引 k，你的两个 SQL 语句可以这么写：\",\"alter table T drop index k; alter table T add index(k); \",\"如果你要重建主键索引，也可以这么写：\",\"alter table T drop primary key; alter table T add primary key(id); \",\"我的问题是，对于上面这两个重建索引的作法，说出你的理解。如果有不合适的，为什么，更好的方法是什么？\",\"A：\",\"在评论区，有同学问到为什么要重建索引。我们文章里面有提到，索引可能因为删除，或者页分裂等原因，导致数据页有空洞，重建索引的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。\",\"这道题目，我给你的“参考答案”是：\",\"重建索引 k 的做法是合理的，可以达到省空间的目的。但是，重建主键的过程不合理。不论是删除主键还是创建主键，都会将整个表重建。所以连着执行这两个语句的话，第一个语句就白做了。这两个语句，你可以用这个语句代替 ： alter table T engine=InnoDB。在专栏的第 12 篇文章《为什么表数据删掉一半，表文件大小不变？》中，我会和你分析这条语句的执行流程。\"]},\"920\":{\"h\":\"\",\"t\":[\"他们都是 4 个字节。\",\"我们以 int(11) 为例来说，11 代表该数据类型指定的显示宽度，指定能够显示的数值中数字的个数。 该声明指明，在 id 字段中的数据一般只显示 11 位数字的宽度。\",\"显示宽度只用于显示，并不能限制取值范围和占用空间，如：int(3) 会占用 4 个字节的存储空间，并且允许的最大值也不会是 999，而是 int 整型所允许的最大值。\"]},\"921\":{\"h\":\"1.前言\",\"t\":[\"在上一篇文章中，我和你介绍了 InnoDB 索引的数据结构模型，今天我们再继续聊聊跟 MySQL 索引有关的概念。\",\"在开始这篇文章之前，我们先来看一下这个问题：\",\"在下面这个表 T 中，如果我执行 select * from T where k between 3 and 5，需要执行几次树的搜索操作，会扫描多少行？\",\"下面是这个表的初始化语句。\",\"mysql> create table T ( ID int primary key, k int NOT NULL DEFAULT 0, s varchar(16) NOT NULL DEFAULT '', index k(k)) engine=InnoDB; insert into T values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg'); \",\"现在，我们一起来看看这条 SQL 查询语句的执行流程：\",\"在 k 索引树上找到 k=3 的记录，取得 ID = 300；\",\"再到 ID 索引树查到 ID=300 对应的 R3；\",\"在 k 索引树取下一个值 k=5，取得 ID=500；\",\"再回到 ID 索引树查到 ID=500 对应的 R4；\",\"在 k 索引树取下一个值 k=6，不满足条件，循环结束。\",\"在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。\",\"在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？\"]},\"922\":{\"h\":\"2.覆盖索引\",\"t\":[\"如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。\",\"由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。\",\"需要注意的是，在引擎内部使用覆盖索引在索引 k 上其实读了三个记录，R3~R5（对应的索引 k 上的记录项），但是对于 MySQL 的 Server 层来说，它就是找引擎拿到了两条记录，因此 MySQL 认为扫描行数是 2。\",\"备注：关于如何查看扫描行数的问题，我将会在第 16 文章《如何正确地显示随机消息？》中，和你详细讨论。\",\"基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？\",\"假设这个市民表的定义是这样的：\",\"CREATE TABLE `tuser` ( `id` int(11) NOT NULL, `id_card` varchar(32) DEFAULT NULL, `name` varchar(32) DEFAULT NULL, `age` int(11) DEFAULT NULL, `ismale` tinyint(1) DEFAULT NULL, PRIMARY KEY (`id`), KEY `id_card` (`id_card`), KEY `name_age` (`name`,`age`) ) ENGINE=InnoDB \",\"我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？\",\"如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，这个联合索引就有意义了。它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。\",\"当然，索引字段的维护总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这正是业务 DBA，或者称为业务数据架构师的工作。\"]},\"923\":{\"h\":\"3.最左前缀原则\",\"t\":[\"顾名思义，就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。 联合索引：根据创建联合索引的顺序，以最左原则进行where检索，比如（age，name）以age=1 或 age= 1 and name=‘张三’可以使用索引，单以name=‘张三’ 不会使用索引，考虑到存储空间的问题，还请根据业务需求，将查找频繁的数据进行靠左创建索引。\",\"问题：where age,name 使用索引吗？使用！ mysql查询优化器会判断纠正这条sql语句该以什么样的顺序执行效率最高，最后才生成真正的执行计划\",\"补充：最左前缀原则：顾名思义是最左优先，以最左边的为起点任何连续的索引都能匹配上。\",\"（1）如果第一个字段是范围查询需要单独建一个索引；\",\"（2）在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边；\",\"当创建index(a,b,c)复合索引时，想要索引生效的话，只能使用 a和ab、ac和abc三种组合！（其中 ac 只用到a）\",\"实例：以下是常见的几个查询：\",\"mysql>SELECT `a`,`b`,`c` FROM A WHERE `a`='a1' ; //索引生效 mysql>SELECT `a`,`b`,`c` FROM A WHERE `b`='b2' AND `c`='c2'; //索引失效 mysql>SELECT `a`,`b`,`c` FROM A WHERE `a`='a3' AND `c`='c3'; //索引生效，实际上只使用了索引a +++++ where a=3 and b>4 and c=5 //只用到了a、b 因为c不能在范围之后 --- 几个不支持索引的特别的点 1）where a<>1会使用到索引吗 对于条件 a<>1，数据库优化器可能不会选择使用复合索引 (a, b, c)。这是因为在不等于条件下，查询需要返回不等于指定值的所有记录，而复合索 引是按照索引的顺序来存储数据的。因此，优化器可能会认为全表扫描（Table Scan）比使用复合索引更高效。 2）where a is null and b is not null isnull支持索引但是isnotnull不支持 3）where abs(a)=3 函数不支持 XD: 联合索引给(a,b,c)添加，如果where a,c,b 索引会生效吗？（生效，优化器会优化） \",\"详细点的Table：假设index(a,b,c)\",\"Where语句\",\"素引是否被使用\",\"where a = 3\",\"Y,使用到a\",\"where a = 3 and b = 5\",\"Y,使用到a，b\",\"where a = 3 and b = 5 and c = 4\",\"Y,使用到a,b,c\",\"where b = 3 或者 where b = 3 and c = 4 或者 where c = 4\",\"N\",\"where a = 3 and c = 5\",\"使用到a， 但是c不可以，b中间断了\",\"where a = 3 and b > 4 and c = 5\",\"使用到a和b， c不能用在范围之后，b断了\",\"where a is null and b is not null\",\"is null 支持索引 但是is not null 不支持,所以 a 可以使用索引,但是 b不一定能用上索引（8.0）\",\"where a <> 3\",\"不能使用索引\",\"where abs(a) =3\",\"不能使用 索引\",\"where a = 3 and b like ‘kk%’ and c = 4\",\"Y,使用到a,b,c\",\"where a = 3 and b like ‘%kk’ and c = 4\",\"Y,只用到a\",\"where a = 3 and b like ‘%kk%’ and c = 4\",\"Y,只用到a\",\"where a = 3 and b like ‘k%kk%’ and c = 4\",\"Y,使用到a,b,c\",\"补充：\",\"无过滤不索引\",\"语句没有where 只有 order by不会用索引explain的type为all，所以要加上where才会走索引\",\"order by非最左 filesort（也需和where的一样遵循最左匹配原则） \",\"在MySQL的EXPLAIN语句中，当查询执行使用了Using filesort时，表示MySQL需要进行排序操作，但无法使用索引来完成排序，而是需要通过临时文件进行排序\",\"看到这里你一定有一个疑问，如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。应该怎么做呢？\",\"这里，我先和你说结论吧。B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。\",\"为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。\",\"可以看到，索引项是按照索引定义里面出现的字段顺序排序的（对应这期的问题）。\",\"当你的逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。\",\"如果你要查的是所有名字第一个字是“张”的人，你的 SQL 语句的条件是\\\"where name like ‘张 %’\\\"。这时，你也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。\",\"可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。\",\"基于上面对最左前缀索引的说明，我们来讨论一个问题：在建立联合索引的时候，如何安排索引内的字段顺序。\",\"这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。\",\"所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。\",\"那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，也就是说你需要同时维护 (a,b)、(b) 这两个索引。\",\"这时候，我们要考虑的原则就是空间了。比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。\"]},\"924\":{\"h\":\"4.索引下推\",\"t\":[\"上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？\",\"我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：\",\"mysql> select * from tuser where name like '张 %' and age=10 and ismale=1; \",\"你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。当然，这还不错，总比全表扫描要好。\",\"然后呢？\",\"当然是判断其他条件是否满足。\",\"在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。\",\"而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。\",\"图 3 和图 4，是这两个过程的执行流程图。\",\"在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。\",\"图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。\",\"图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取数据判断，就只需要回表 2 次。\"]},\"925\":{\"h\":\"5.小结\",\"t\":[\"今天这篇文章，我和你继续讨论了数据库索引的概念，包括了覆盖索引、前缀索引、索引下推。你可以看到，在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标。\",\"Question：\",\"实际上主键索引也是可以使用多个字段的。DBA 小吕在入职新公司的时候，就发现自己接手维护的库里面，有这么一个表，表结构定义类似这样的：\",\"CREATE TABLE `geek` ( `a` int(11) NOT NULL, `b` int(11) NOT NULL, `c` int(11) NOT NULL, `d` int(11) NOT NULL, PRIMARY KEY (`a`,`b`), KEY `c` (`c`), KEY `ca` (`c`,`a`), KEY `cb` (`c`,`b`) ) ENGINE=InnoDB; \",\"公司的同事告诉他说，由于历史原因，这个表需要 a、b 做联合主键，这个小吕理解了。\",\"但是，学过本章内容的小吕又纳闷了，既然主键包含了 a、b 这两个字段，那意味着单独在字段 c 上创建一个索引，就已经包含了三个字段了呀，为什么要创建“ca”“cb”这两个索引？\",\"同事告诉他，是因为他们的业务里面有这样的两种语句：\",\"select * from geek where c=N order by a limit 1; select * from geek where c=N order by b limit 1; \",\"我给你的问题是，这位同事的解释对吗，为了这两个查询模式，这两个索引是否都是必须的？为什么呢？\",\"Answer: 未理解 分开声明的两个 key 在 where 后一起用两个 key 都会走吗？\",\"上期的问题是关于对联合主键索引和 InnoDB 索引组织表的理解。\",\"我直接贴 @老杨同志 的回复略作修改如下（我修改的部分用橙色标出）：\",\"表记录 –a--|–b--|–c--|–d-- 1 2 3 d 1 3 2 d 1 4 3 d 2 1 3 d 2 2 2 d 2 3 4 d 主键 a，b 的聚簇索引组织顺序相当于 order by a,b ，也就是先按 a 排序，再按 b 排序，c 无序。\",\"索引 ca 的组织是先按 c 排序，再按 a 排序，同时记录主键 –c--|–a--|–主键部分b-- （注意，这里不是 ab，而是只有 b） 2 1 3 2 2 2 3 1 2 3 1 4 3 2 1 4 2 3 这个跟索引 c 的数据是一模一样的。\",\"索引 cb 的组织是先按 c 排序，在按 b 排序，同时记录主键 –c--|–b--|–主键部分a-- （同上） 2 2 2 2 3 1 3 1 2 3 2 1 3 4 1 4 3 2\",\"所以，结论是 ca 可以去掉，cb 需要保留。\",\"这一章没怎么懂 FTWRL、MDL\"]},\"926\":{\"h\":\"1.前言\",\"t\":[\"今天我要跟你聊聊 MySQL 的锁。数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。\",\"根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。今天这篇文章，我会和你分享全局锁和表级锁。而关于行锁的内容，我会留着在下一篇文章中再和你详细介绍。\",\"这里需要说明的是，锁的设计比较复杂，这两篇文章不会涉及锁的具体实现细节，主要介绍的是碰到锁时的现象和其背后的原理。\"]},\"927\":{\"h\":\"2.全局锁\",\"t\":[\"顾名思义，全局锁就是对整个数据库实例加锁。MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。\",\"**全局锁的典型使用场景是，做全库逻辑备份。**也就是把整库每个表都 select 出来存成文本。\",\"以前有一种做法，是通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。注意，在备份过程中整个库完全处于只读状态。\",\"但是让整库都只读，听上去就很危险：\",\"如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；\",\"如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。\",\"看来加全局锁不太好。但是细想一下，备份为什么要加锁呢？我们来看一下不加锁会有什么问题。\",\"假设你现在要维护“极客时间”的购买系统，关注的是用户账户余额表和用户课程表。\",\"现在发起一个逻辑备份。假设备份期间，有一个用户，他购买了一门课程，业务逻辑里就要扣掉他的余额，然后往已购课程里面加上一门课。\",\"如果时间顺序上是先备份账户余额表 (u_account)，然后用户购买，然后备份用户课程表 (u_course)，会怎么样呢？你可以看一下这个图：\",\"可以看到，这个备份结果里，用户 A 的数据状态是“账户余额没扣，但是用户课程表里面已经多了一门课”。如果后面用这个备份来恢复数据的话，用户 A 就发现，自己赚了。\",\"作为用户可别觉得这样可真好啊，你可以试想一下：如果备份表的顺序反过来，先备份用户课程表再备份账户余额表，又可能会出现什么结果？\",\"也就是说，不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。\",\"说到视图你肯定想起来了，我们在前面讲事务隔离的时候，其实是有一个方法能够拿到一致性视图的，对吧？\",\"是的，就是在可重复读隔离级别下开启一个事务。\",\"备注：如果你对事务隔离级别的概念不是很清晰的话，可以再回顾一下第 3 篇文章《事务隔离：为什么你改了我还看不见？》中的相关内容。\",\"官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持，这个过程中数据是可以正常更新的。\",\"你一定在疑惑，有了这个功能，为什么还需要 FTWRL 呢？**一致性读是好，但前提是引擎要支持这个隔离级别。**比如，对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL 命令了。\",\"所以，**single-transaction 方法只适用于所有的表使用事务引擎的库。**如果有的表使用了不支持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。\",\"你也许会问，既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要有两个原因：\",\"一是，在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。\",\"二是，在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。\",\"业务的更新不只是增删改数据（DML)，还有可能是加字段等修改表结构的操作（DDL）。不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。\",\"但是，即使没有被全局锁住，加字段也不是就能一帆风顺的，因为你还会碰到接下来我们要介绍的表级锁。\"]},\"928\":{\"h\":\"3.表级锁\",\"t\":[\"MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。\",\"**表锁的语法是 lock tables … read/write。**与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。\",\"举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。\",\"在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。\",\"**另一类表级的锁是 MDL（metadata lock)。**MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。\",\"因此，在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。\",\"读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。\",\"读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。\",\"虽然 MDL 锁是系统默认会加的，但却是你不能忽略的一个机制。比如下面这个例子，我经常看到有人掉到这个坑里：给一个小表加个字段，导致整个库挂了。\",\"你肯定知道，给一个表加字段，或者修改字段，或者加索引，需要扫描全表的数据。在对大表操作的时候，你肯定会特别小心，以免对线上服务造成影响。而实际上，即使是小表，操作不慎也会出问题。我们来看一下下面的操作序列，假设表 t 是一个小表。\",\"备注：这里的实验环境是 MySQL 5.6。\",\"我们可以看到 session A 先启动，这时候会对表 t 加一个 MDL 读锁。由于 session B 需要的也是 MDL 读锁，因此可以正常执行。\",\"之后 session C 会被 blocked，是因为 session A 的 MDL 读锁还没有释放，而 session C 需要 MDL 写锁，因此只能被阻塞。\",\"如果只有 session C 自己被阻塞还没什么关系，但是之后所有要在表 t 上新申请 MDL 读锁的请求也会被 session C 阻塞。前面我们说了，所有对表的增删改查操作都需要先申请 MDL 读锁，就都被锁住，等于这个表现在完全不可读写了。\",\"如果某个表上的查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。\",\"你现在应该知道了，事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。\",\"基于上面的分析，我们来讨论一个问题，如何安全地给小表加字段？\",\"首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。\",\"但考虑一下这个场景。如果你要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而你不得不加个字段，你该怎么做呢？\",\"这时候 kill 可能未必管用，因为新的请求马上就来了。比较理想的机制是，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。\",\"MariaDB 已经合并了 AliSQL 的这个功能，所以这两个开源分支目前都支持 DDL NOWAIT/WAIT n 这个语法。\",\"ALTER TABLE tbl_name NOWAIT add column ... ALTER TABLE tbl_name WAIT N add column ... \"]},\"929\":{\"h\":\"4.小结\",\"t\":[\"今天，我跟你介绍了 MySQL 的全局锁和表级锁。\",\"全局锁主要用在逻辑备份过程中。对于全部是 InnoDB 引擎的库，我建议你选择使用–single-transaction 参数，对应用会更友好。\",\"表锁一般是在数据库引擎不支持行锁的时候才会被用到的。如果你发现你的应用程序里有 lock tables 这样的语句，你需要追查一下，比较可能的情况是：\",\"要么是你的系统现在还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎；\",\"要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，最后业务开发就是把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。\",\"MDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和更新。\",\"Answer:\",\"最后，我给你留一个问题吧。备份一般都会在备库上执行，你在用–single-transaction 方法做逻辑备份的过程中，如果主库上的一个小表做了一个 DDL，比如给一个表上加了一列。这时候，从备库上会看到什么现象呢？\",\"Qeustion:\",\"假设这个 DDL 是针对表 t1 的， 这里我把备份过程中几个关键的语句列出来：\",\"Q1:SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ; Q2:START TRANSACTION WITH CONSISTENT SNAPSHOT； /* other tables */ Q3:SAVEPOINT sp; /* 时刻 1 */ Q4:show create table `t1`; /* 时刻 2 */ Q5:SELECT * FROM `t1`; /* 时刻 3 */ Q6:ROLLBACK TO SAVEPOINT sp; /* 时刻 4 */ /* other tables */ \",\"在备份开始的时候，为了确保 RR（可重复读）隔离级别，再设置一次 RR 隔离级别 (Q1);\",\"启动事务，这里用 WITH CONSISTENT SNAPSHOT 确保这个语句执行完就可以得到一个一致性视图（Q2)；\",\"设置一个保存点，这个很重要（Q3）；\",\"show create 是为了拿到表结构 (Q4)，然后正式导数据 （Q5），回滚到 SAVEPOINT sp，在这里的作用是释放 t1 的 MDL 锁 （Q6）。当然这部分属于“超纲”，上文正文里面都没提到。\",\"DDL 从主库传过来的时间按照效果不同，我打了四个时刻。题目设定为小表，我们假定到达后，如果开始执行，则很快能够执行完成。\",\"参考答案如下：\",\"如果在 Q4 语句执行之前到达，现象：没有影响，备份拿到的是 DDL 后的表结构。\",\"如果在“时刻 2”到达，则表结构被改过，Q5 执行的时候，报 Table definition has changed, please retry transaction，现象：mysqldump 终止；\",\"如果在“时刻 2”和“时刻 3”之间到达，mysqldump 占着 t1 的 MDL 读锁，binlog 被阻塞，现象：主从延迟，直到 Q6 执行完成。\",\"从“时刻 4”开始，mysqldump 释放了 MDL 读锁，现象：没有影响，备份拿到的是 DDL 前的表结构。\",\"重要：死锁和死锁检测\"]},\"930\":{\"h\":\"1.前言\",\"t\":[\"在上一篇文章中，我跟你介绍了 MySQL 的全局锁和表级锁，今天我们就来讲讲 MySQL 的行锁。\",\"MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。\",\"我们今天就主要来聊聊 InnoDB 的行锁，以及如何通过减少锁冲突来提升业务并发度。\",\"顾名思义，行锁就是针对数据表中行记录的锁。这很好理解，比如事务 A 更新了一行，而这时候事务 B 也要更新同一行，则必须等事务 A 的操作完成后才能进行更新。\",\"当然，数据库中还有一些没那么一目了然的概念和设计，这些概念如果理解和使用不当，容易导致程序出现非预期行为，比如两阶段锁。\"]},\"931\":{\"h\":\"2.从两阶段锁说起\",\"t\":[\"需要锁多个行，就把最可能造成锁冲突放后面。这样执行完就立马 commit 了\",\"我先给你举个例子。在下面的操作序列中，事务 B 的 update 语句执行时会是什么现象呢？假设字段 id 是表 t 的主键。这个问题的结论取决于事务 A 在执行完两条 update 语句后，持有哪些锁，以及在什么时候释放。你可以验证一下：实际上事务 B 的 update 语句会被阻塞，直到事务 A 执行 commit 之后，事务 B 才能继续执行。\",\"知道了这个答案，你一定知道了事务 A 持有的两个记录的行锁，都是在 commit 的时候才释放的。\",\"也就是说，在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。\",\"知道了这个设定，对我们使用事务有什么帮助呢？那就是，==如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。==我给你举个例子。\",\"假设你负责实现一个电影票在线交易业务，顾客 A 要在影院 B 购买电影票。我们简化一点，这个业务需要涉及到以下操作：\",\"从顾客 A 账户余额中扣除电影票价；\",\"给影院 B 的账户余额增加这张电影票价；\",\"记录一条交易日志。\",\"也就是说，要完成这个交易，我们需要 update 两条记录，并 insert 一条记录。当然，为了保证交易的原子性，我们要把这三个操作放在一个事务中。那么，你会怎样安排这三个语句在事务中的顺序呢？\",\"试想如果同时有另外一个顾客 C 要在影院 B 买票，那么这两个事务冲突的部分就是语句 2 了。因为它们要更新同一个影院账户的余额，需要修改同一行数据。\",\"根据两阶段锁协议，不论你怎样安排语句顺序，所有的操作需要的行锁都是在事务提交的时候才释放的。所以，如果你把语句 2 安排在最后，比如按照 3、1、2 这样的顺序，那么影院账户余额这一行的锁时间就最少。这就最大程度地减少了事务之间的锁等待，提升了并发度。\",\"好了，现在由于你的正确设计，影院余额这一行的行锁在一个事务中不会停留很长时间。但是，这并没有完全解决你的困扰。\",\"如果这个影院做活动，可以低价预售一年内所有的电影票，而且这个活动只做一天。于是在活动时间开始的时候，你的 MySQL 就挂了。你登上服务器一看，CPU 消耗接近 100%，但整个数据库每秒就执行不到 100 个事务。这是什么原因呢？\",\"这里，我就要说到死锁和死锁检测了。\"]},\"932\":{\"h\":\"3.死锁和死锁检测\",\"t\":[\"自己理解：避免死锁的方案\",\"数据库层面：\",\"1）首先数据库有两个变量默认开启来避免了，但是因为死锁检测是默认开启的有额外负担,所以我们要做的是 控制并发\",\"2）从数据库设计上优化，你可以考虑通过将一行改成逻辑上的多行来减少锁冲突。还是以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。\",\"Java层面：\",\"3）在开发时一般都是按照顺序加锁来避免死锁。比如都是按照先拿t1,再拿t2（避免下图）\",\"即加锁顺序：要求线程在加锁时，必须按照相同的顺序来加锁。这样可以避免出现互相等待对方释放锁的情况。\",\"场景：WMS 举例 A Thread(库存、货架) B(货架、库存) 死锁通常与事务和并发操作有关\",\"当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里我用数据库中的行锁举个例子。\",\"这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：（XD：两者可同时存在，不是二选一)\",\"一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。（默认值是50秒）\",\"另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。（默认值是ON）\",\"在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。\",\"show variables like 'innodb_lock_wait_timeout' #50s\",\"但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。\",\"所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测，而且 innodb_deadlock_detect 的默认值本身就是 on。主动死锁检测在发生死锁的时候，是能够快速发现并进行处理的，但是它也是有额外负担的。\",\"show variables like 'innodb_deadlock_detect' #on 如果他要加锁访问的行上有锁，他才要检测\",\"你可以想象一下这个过程：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。\",\"那如果是我们上面说到的所有事务都要更新同一行的场景呢？\",\"每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务。\",\"根据上面的分析，我们来讨论一下，**怎么解决由这种热点行更新导致的性能问题呢？**问题的症结在于，死锁检测要耗费大量的 CPU 资源。\",\"**一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。**但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。\",\"**另一个思路是控制并发度。**根据上面的分析，你会发现如果并发能够控制住，比如同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程，汇总到数据库服务端以后，峰值并发数也可能要达到 3000。\",\"因此，这个并发控制要做在数据库服务端。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。\",\"可能你会问，如果团队里暂时没有数据库方面的专家，不能实现这样的方案，能不能从设计上优化这个问题呢？\",\"你可以考虑通过将一行改成逻辑上的多行来减少锁冲突。还是以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成原来的 1/10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗。\",\"这个方案看上去是无损的，但其实这类方案需要根据业务逻辑做详细设计。如果账户余额可能会减少，比如退票逻辑，那么这时候就需要考虑当一部分行记录变成 0 的时候，代码要有特殊处理。\"]},\"933\":{\"h\":\"4.小结\",\"t\":[\"今天，我和你介绍了 MySQL 的行锁，涉及了两阶段锁协议、死锁和死锁检测这两大部分内容。\",\"其中，我以两阶段协议为起点，和你一起讨论了在开发的时候如何安排正确的事务语句。这里的原则 / 我给你的建议是：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁的申请时机尽量往后放。\",\"但是，调整语句顺序并不能完全避免死锁。所以我们引入了死锁和死锁检测的概念，以及提供了三个方案，来减少死锁对数据库的影响。减少死锁的主要方向，就是控制访问相同资源的并发事务量。\",\"Question:\",\"如果你要删除一个表里面的前 10000 行数据，有以下三种方法可以做到：\",\"第一种，直接执行 delete from T limit 10000;\",\"第二种，在一个连接中循环执行 20 次 delete from T limit 500;\",\"第三种，在 20 个连接中同时执行 delete from T limit 500。\",\"你会选择哪一种方法呢？为什么呢？\",\"Answer:\",\"我在上一篇文章最后，留给你的问题是：怎么删除表的前 10000 行。比较多的留言都选择了第二种方式，即：在一个连接中循环执行 20 次 delete from T limit 500。\",\"确实是这样的，第二种方式是相对较好的。\",\"第一种方式（即：直接执行 delete from T limit 10000）里面，单个语句占用时间长，锁的时间也比较长；而且大事务还会导致主从延迟。\",\"第三种方式（即：在 20 个连接中同时执行 delete from T limit 500），会人为造成锁冲突。\",\"在开发时一般都是按照顺序加锁来避免死锁。比如都是按照先拿t1,再拿t2.\",\"作者回复: 是个好的实践经验👍🏿\",\"当涉及多个资源的并发访问时，我将用一个简单的例子来说明按顺序加锁如何避免死锁。\",\"假设有两个资源 A 和 B，以及两个线程 T1 和 T2。这两个线程分别需要同时访问资源 A 和资源 B。\",\"如果没有按照顺序加锁的机制，线程 T1 和 T2 可能会以不同的顺序获取资源的锁，导致死锁的发生。\",\"示例1：不按顺序加锁的情况\",\"T1：获取 A 的锁\",\"T2：获取 B 的锁\",\"T1：等待 B 的锁\",\"T2：等待 A 的锁\",\"在这个例子中，T1 先获取了资源 A 的锁，而 T2 先获取了资源 B 的锁。接下来，T1 等待资源 B 的锁，而 T2 等待资源 A 的锁。由于两个线程都在等待对方所持有的资源，形成了死锁。\",\"现在，让我们看看按顺序加锁的情况。\",\"示例2：按顺序加锁的情况\",\"T1：获取 A 的锁\",\"T1：获取 B 的锁\",\"T2：获取 A 的锁\",\"T2：获取 B 的锁\",\"在这个例子中，无论是 T1 还是 T2 都按照相同的顺序获取锁，即先获取 A 的锁，然后获取 B 的锁。这样，即使两个线程同时竞争资源，它们仍然会按照相同的顺序获取锁，避免了循环依赖和死锁的发生。\",\"通过上述示例，可以看出按顺序加锁可以避免不正确的资源竞争和循环依赖，从而减少死锁的风险。然而，实际场景可能更加复杂，需要根据具体情况设计和选择合适的加锁策略，并综合考虑其他死锁预防和处理机制来确保系统的稳定性。\"]},\"934\":{\"h\":\"1.前言\",\"t\":[\"我在第 3 篇文章和你讲事务隔离级别的时候提到过，如果是可重复读隔离级别，事务 T 启动的时候会创建一个视图 read-view，之后事务 T 执行期间，即使有其他事务修改了数据，事务 T 看到的仍然跟在启动时看到的一样。也就是说，一个在可重复读隔离级别下执行的事务，好像与世无争，不受外界影响。\",\"但是，我在上一篇文章中，和你分享行锁的时候又提到，一个事务要更新一行，如果刚好有另外一个事务拥有这一行的行锁，它又不能这么超然了，会被锁住，进入等待状态。问题是，既然进入了等待状态，那么等到这个事务自己获取到行锁要更新数据的时候，它读到的值又是什么呢？\",\"我给你举一个例子吧。下面是一个只有两行的表的初始化语句。\",\"mysql> CREATE TABLE `t` ( `id` int(11) NOT NULL, `k` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB; insert into t(id, k) values(1,1),(2,2); \",\"这里，我们需要注意的是事务的启动时机。\",\"begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。\",\"第一种启动方式，一致性视图是在第执行第一个快照读语句时创建的； 第二种启动方式，一致性视图是在执行 start transaction with consistent snapshot 时创建的。\",\"还需要注意的是，在整个专栏里面，我们的例子中如果没有特别说明，都是默认 autocommit=1。\",\"在这个例子中，事务 C 没有显式地使用 begin/commit，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交。事务 B 在更新了行之后查询 ; 事务 A 在一个只读事务中查询，并且时间顺序上是在事务 B 的查询之后。\",\"这时，如果我告诉你事务 B 查到的 k 的值是 3，而事务 A 查到的 k 的值是 1，你是不是感觉有点晕呢？\",\"所以，今天这篇文章，我其实就是想和你说明白这个问题，希望借由把这个疑惑解开的过程，能够帮助你对 InnoDB 的事务和锁有更进一步的理解。\",\"在 MySQL 里，有两个“视图”的概念：\",\"一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。\",\"另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。\",\"它没有物理结构，作用是事务执行期间用来定义“我能看到什么数据”。\",\"在第 3 篇文章《事务隔离：为什么你改了我还看不见？》中，我跟你解释过一遍 MVCC 的实现逻辑。今天为了说明查询和更新的区别，我换一个方式来说明，把 read view 拆开。你可以结合这两篇文章的说明来更深一步地理解 MVCC。\"]},\"935\":{\"h\":\"2.“快照”在 MVCC 里是怎么工作的？\",\"t\":[\"我的理解：row trx_id + undo log 所以这个事务的快照，就是“静态”的了 就能秒级\",\"在可重复读隔离级别下，事务在启动的时候就“拍了个快照”。注意，这个快照是基于整库的。\",\"这时，你会说这看上去不太现实啊。如果一个库有 100G，那么我启动一个事务，MySQL 就要拷贝 100G 的数据出来，这个过程得多慢啊。可是，我平时的事务执行起来很快啊。\",\"实际上，我们并不需要拷贝出这 100G 的数据。我们先来看看这个快照是怎么实现的。\",\"InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。\",\"而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把 transaction id 赋值给这个数据版本的事务 ID，记为 row trx_id。同时，旧的数据版本要保留，并且在新的数据版本中，能够有信息可以直接拿到它。\",\"也就是说，数据表中的一行记录，其实可能有多个版本 (row)，每个版本有自己的 row trx_id。\",\"如图 2 所示，就是一个记录被多个事务连续更新后的状态。\",\"图中虚线框里是同一行数据的 4 个版本，当前最新版本是 V4，k 的值是 22，它是被 transaction id 为 25 的事务更新的，因此它的 row trx_id 也是 25。\",\"你可能会问，前面的文章不是说，语句更新会生成 undo log（回滚日志）吗？那么，undo log 在哪呢？\",\"实际上，图 2 中的三个虚线箭头，就是 undo log；而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 的时候，就是通过 V4 依次执行 U3、U2 算出来。\",\"明白了多版本和 row trx_id 的概念后，我们再来想一下，InnoDB 是怎么定义那个“100G”的快照的。\",\"按照可重复读的定义，一个事务启动的时候，能够看到所有已经提交的事务结果。但是之后，这个事务执行期间，其他事务的更新对它不可见。\",\"因此，一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本”。\",\"当然，如果“上一个版本”也不可见，那就得继续往前找。还有，如果是这个事务自己更新的数据，它自己还是要认的。\",\"在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在“活跃”的所有事务 ID。“活跃”指的就是，启动了但还没提交。\",\"数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加 1 记为高水位。\",\"这个视图数组和高水位，就组成了当前事务的一致性视图（read-view）。\",\"而数据版本的可见性规则，就是基于数据的 row trx_id 和这个一致性视图的对比结果得到的。\",\"这个视图数组把所有的 row trx_id 分成了几种不同的情况。\",\"这样，对于当前事务的启动瞬间来说，一个数据版本的 row trx_id，有以下几种可能：\",\"如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；\",\"如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；\",\"如果落在黄色部分，那就包括两种情况 a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见； b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。\",\"比如，对于图 2 中的数据来说，如果有一个事务，它的低水位是 18，那么当它访问这一行数据时，就会从 V4 通过 U3 计算出 V3，所以在它看来，这一行的值是 11。\",\"你看，有了这个声明后，系统里面随后发生的更新，是不是就跟这个事务看到的内容无关了呢？因为之后的更新，生成的版本一定属于上面的 2 或者 3(a) 的情况，而对它来说，这些新的数据版本是不存在的，所以这个事务的快照，就是“静态”的了。\",\"所以你现在知道了，InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。\"]},\"936\":{\"h\":\"MySQL索引\",\"t\":[\"该文档得重新索引归类，不然太乱了。。。不好检索\",\"索引(Index)是帮助MySQL高效获取数据的数据结构。 0.5s 0.000001s\",\"索引是数据结构\",\"使用select…for update给数据加锁的时候，咱们需要注意锁的级别，MySQL InnoDB 默认行级锁。\",\"行级锁都是基于索引的，如果一条 SQL 语句用不到索引是不会使用行级锁的，而会使用表级锁把整张表锁住，这点需要咱们格外的注意\",\"要使用行级锁：查询或者更新条件必须是索引字段\",\"主键索引（PRIMERY KEY)\",\"唯一索引（UNIQUE KEY） \",\"避免重复列\",\"常规索引（KEY/INDEX） \",\"用index，key关键字来设置\",\"全文索引（FullText） \",\"只有在特定的数据库引擎中才有\",\"加了索引之后的效果：\",\"img\",\"注：索引在小数据量的时候用处不大，但是在大数据的时候，区别十分明显。\",\"索引不是越多越好\",\"不要对经常变动的数据加索引\",\"小数据量的表不需要加索引\",\"索引一般加在常用来查询的字段上\",\"索引的数据结构\",\"Hash 类型的索引\",\"Btree：InnoDB的默认数据结构\"]},\"937\":{\"h\":\"注意自连接\",\"t\":[\"交叉连接（CROSS JOIN）一般用来返回连接表的笛卡尔积。\",\"本节的末尾介绍了笛卡尔积，不了解笛卡尔积的读者可以先阅读文章末尾部分，然后再继续学习交叉连接。\",\"交叉连接的语法格式如下：\",\"SELECT <字段名> FROM <表1> CROSS JOIN <表2> [WHERE子句]\",\"或\",\"SELECT <字段名> FROM <表1>, <表2> [WHERE子句]\",\"BUT：要用 cross join 才能用 on，实测用 ，不行！！！\",\"cross join weather w2 on datediff(w1.recordDate,w2.recordDate) = 1\",\"总结，using() 只是join中指定连接条件的简写，在简单的连接中常用。在列名称不同时或连接条件复杂时就无法用了，使用 a left join b on ... 是更常见的做法。\"]},\"938\":{\"h\":\"注意 update 没有 from\",\"t\":[\"DELETE FROM 表名 UPDATE 表名 SET 字段名=新值 \",\"2024/2/1 再扩展： update mysql vs Sqlserver这部分语法有区别\",\"原因：\",\"update t2 set t2.StorageNum=1 from InventoryAdjustDetail t1 join wm_quant t2 on t1.wm_quantID=t2.oid 报错： 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from InventoryAdjustDetail t1 join wm_quant t2 on t1.wm_quantID=t2.oid' at line 2 \",\"需要：\",\"UPDATE InventoryAdjustDetail t1 JOIN wm_quant t2 ON t1.wm_quantID = t2.oid SET t2.StorageNum = 1; \",\"如果是sqlserver数据库上述语法有问题吗： 在SQL Server中，可以使用FROM子句来指定要进行连接的表，并在SET子句中更新目标表的列。\"]},\"939\":{\"h\":\"可以把 null 字段过滤成 0 或者用 if\",\"t\":[\"select e1.employee_id, IFNULL(e2.salary ,0) bonus from employees e1 left join \"]},\"940\":{\"h\":\"IF 表达式 IF( expr1 , expr2 , expr3 ) expr1 的值为 TRUE，则返回值为 expr2 expr1 的值为FALSE，则返回值为 expr3\",\"t\":[\"update salary set sex = if(sex = 'm','f','m') \"]},\"941\":{\"h\":\"mysql 中调用下面的语句提示该错误\",\"t\":[\"In MySQL, you can’t modify the same table which you use in the SELECT part.\",\"delete from Person where id in ( select t1.id from Person t1, Person t2 where t1.email = t2.email and t1.id > t2.id ); \",\"解决方法: 建立一张临时的中间表\",\"delete from Person where id in ( select id from( select t1.id as id from Person t1, Person t2 where t1.email = t2.email and t1.id > t2.id ) as tmp ); \"]},\"942\":{\"h\":\"如果表名用了别名，要将别名放在delete和from之间\",\"t\":[\"把重复的用Delete 删除就好了 delete u from Person u , Person v where v.id < u.id and u.email = v.email \"]},\"943\":{\"h\":\"\",\"t\":[\"DELETE from Person Where Id not in ( Select Id From( Select MIN(Id) as id From Person Group by Email ) t ) \"]},\"944\":{\"h\":\"：自连接：自己和自己做笛卡尔积\"},\"945\":{\"h\":\"名字首字母大写，后面小写\",\"t\":[\"JavaGuide 中都搜不到 upper lower 这两个函数\",\"concat(upper(left(name,1)),lower(substring(name,2))) name # substr 好像也可以 \"]},\"946\":{\"h\":\"group_concat([distinct] 字段名 [order by 排序字段 asc/desc] [separator '分隔符'])\",\"t\":[\"group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接 group_concat(distinct product order by product separator ',') as products \"]},\"947\":{\"h\":\"列转行用union all：一开始我没那么理解\",\"t\":[\"XD再学习：同一个表不同列放一列\",\"#'store1' store 值store1在store这个字段名（别名）下！ select product_id, 'store1' store, store1 price from products where store1 is not null union select product_id, 'store2' store, store2 price from products where store2 is not null union select product_id, 'store3' store, store3 price from products where store3 is not null \",\"补充：UNION去重且排序 UNION ALL不去重不排序\",\"尽量用 UNION ALL 代替 UNION\",\"UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作，更耗时，更消耗 CPU 资源。\",\"UNION ALL 不会再对结果集进行去重操作，获取到的数据包含重复的项。\",\"不过，如果实际业务场景中不允许产生重复数据的话，还是可以使用 UNION。\",\"union语句注意事项：没答出来\",\" 1.通过union连接的SQL它们分别单独取出的列数必须相同； 2.不要求合并的表列名称相同时，以第一个sql 表列名为准； 3.使用union 时，完全相等的行，将会被合并，由于合并比较耗时，一般不直接使用 union 进行合并，而是通常采用union all 进行合并；(因为数据库资源要比应用服务器资源更加珍贵,去重工作可交给后台) 4.被union 连接的sql 子句，单个子句中不用写order by ，因为不会有排序的效果。但可以对最终的结果集进行排序； \",\"union会自动将完全重复的数据去除掉，union all会保留那些重复的数据；\"]},\"948\":{\"h\":\"case的使用\",\"t\":[\"case when xx then xx when xx then xx ... else xx end \",\"任何与null值的对比都将返回null. 因此返回结果为否,这点可以用代码 select if(1 = null, 'true', 'false')证实.\",\"我在这里犯了两个错误。第一个是常见的not in 和null之间的错误，任何与null值的比对都会返回null，因此判断语句就无法生效。\",\"select 3 not in (null,2) \"]},\"949\":{\"h\":\"\",\"t\":[\"select (select distinct salary from Employee order by salary desc limit 1,1) as SecondHighestSalary \"]},\"950\":{\"h\":\"DATEDIFF() 函数返回两个日期之间的天数。\",\"t\":[\"& 具体所有 Date 相关函数 建议看这个\"]},\"951\":{\"h\":\"Date 时间格式的处理函数：取date类型字段为 2021年8月 的数据\",\"t\":[\"# 1 SELECT DATEDIFF('2008-12-30','2008-12-29') AS DiffDate # -1 SELECT DATEDIFF('2008-12-29','2008-12-30') AS DiffDate #Date学习 简单点：Date可以当 String处理 date between '2021-08-01'and '2021-08-31' #日期也可以between，注意：得带引号不然就错了！！！ year(date)=2021 and month(date)=08 date like '2021-08%' date regexp '2021-08' substring(date,1,7) = '2021-08' #在mysql中可以使用MONTH()函数来获取月份，它会从指定日期值中获取月份值。MONTH()函数需要接受date参数，语法格式为“MONTH(date);”，返回指定date对应的月份，范围为“1～12”。 year(date); MONTH(date); day(date); \"]},\"952\":{\"h\":\"要创建1天间隔，请使用以下表达式：\",\"t\":[\"interval 1 day # 场景：查询近30天活跃用户数 where activity_date > date_sub('2019-07-27', interval 30 day) DATE_ADD() # 其实有更简单的：注意会有负数要 and where datediff('2019-07-27', activity_date) < 30 AND activity_date <= '2019-07-27' \"]},\"953\":{\"h\":\"\",\"t\":[\"GROUP BY Subject, Semester select day(date) hhh from xx group by hhh \"]},\"954\":{\"h\":\"year(time_stamp) = 2020\",\"t\":[\"SELECT user_id, max(time_stamp) last_stamp FROM Logins WHERE year(time_stamp) = 2020 GROUP BY user_id # me where time_stamp >= '2020-01-01 00:00:00' and time_stamp <= '2020-12-31 23:59:59' \"]},\"955\":{\"h\":\"\",\"t\":[\"select stock_name, sum(case when operation='buy' then -price else price end ) as 'capital_gain_loss' from Stocks group by stock_name \"]},\"956\":{\"h\":\"\",\"t\":[\"如果表没有主键，那么count(1)比count(*)快。\",\"如果有主键，那么count(key value，union key value)比count(*)快。\",\"如果表只有一个字段，count(*)最快。\",\"1、COUNT(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为 null 的记录。\",\"2、COUNT(*) 则不同，它执行时返回检索到的行数的计数，不管这些行是否包含null值\",\"3、COUNT(1)跟COUNT(*)类似，不将任何列是否null列入统计标准，仅用1代表代码行，所以在统计结果的时候，不会忽略列值为NULL的行\"]},\"957\":{\"h\":\"between '2019-01-01' and '2019-03-31'\"},\"958\":{\"h\":\"发现函数的下标都是从 1 开始的\"},\"959\":{\"h\":\"字符串匹配指定字串\",\"t\":[\"# 180cm,75kg,27,male select substring_index(profile,',',-1) #SUBSTRING_INDEX(str ,substr ,n)：返回字符substr在str中第n次出现位置之前的字符串; select regexp_substr(profile,\\\"male|female\\\") \",\"left join\",\"Q: t1一条t2两条两表的tm字段一样left join on tm会select出几条\",\"根据您的描述，表 t1 中有一条数据，表 t2 中有两条数据，并且这两个表中的 \\\"tm\\\" 字段的值相同。如果您执行了一个左连接（LEFT JOIN）并且连接条件是 \\\"tm\\\" 字段相等，那么根据左连接的定义，结果中将包括满足连接条件的所有 t1 行以及与之匹配的 t2 行。\",\"在这种情况下，由于 t1 中只有一条数据，而 t2 中有两条数据与之匹配，左连接的结果将包括 t1 行的复制，并且每个 t1 行都将与每个匹配的 t2 行组合，从而产生 2 条结果记录。\",\"因此，使用左连接（LEFT JOIN）并且连接条件是 \\\"tm\\\" 字段相等时，将会选择出 2 条记录。\",\"like的用法\",\"LIKE '%_1' 为什么能匹配到24061 因为下划线 _ 是另一个通配符，表示匹配任意单个字符。\",\"LIKE '%[_]1'\",\"在这个查询中，我们使用了方括号 [ ] 来将下划线 _ 视为普通字符而不是通配符。这样，查询将只匹配以 \\\"_1\\\" 结尾的字符串，而不会将 \\\"24061\\\" 匹配进来。\",\"当使用 LIKE 运算符进行字符串匹配时，可以使用通配符来指定模式。在 SQL 中，通配符用于匹配字符串中的特定字符或字符序列。\",\"以下是通配符的一些常见用法：\",\"百分号 %：用于匹配任意字符（包括零个字符）。 \",\"例如，LIKE '%abc%' 将匹配包含 \\\"abc\\\" 子串的任意字符串，如 \\\"xyzabc\\\", \\\"123abc456\\\" 等。\",\"下划线 _：用于匹配任意单个字符。 \",\"例如，LIKE 'a_c' 将匹配 \\\"abc\\\"、\\\"axc\\\"、\\\"ayc\\\" 等。\",\"方括号 []：用于指定字符集合中的任意一个字符。 \",\"例如，LIKE '[abc]' 将匹配 \\\"a\\\"、\\\"b\\\" 或 \\\"c\\\" 中的任意一个字符。\",\"反向方括号 [^]：用于指定字符集合之外的任意一个字符。 \",\"例如，LIKE '[^abc]' 将匹配除了 \\\"a\\\"、\\\"b\\\" 和 \\\"c\\\" 之外的任意一个字符。\",\"项目上SqlServer死锁，接口日志是把其中一个当成死锁的牺牲品解决。。。SSMS 有个活动监视器（联想任务管理器就知道是微软的东西）进程那里可以看死锁的语句\",\"网上另外的补充：\",\"update join会导致锁表。\",\"拆解为单个sql去修改，去掉inner join update。\",\"有如下Table：\",\"414902/P-41 NaN ATE/GQK/19A01210 ATE/GQK/19A01210 赤道几内亚\",\"对于如下两行两列的表，我想根据第一列的字段去重，保留第二行两个字段都有值。sqlserver怎么做 也会有其它数据第二列是空的情况我也需要，只不过当第一列一样第二列既有空的又有值的我想保留有值的一行\",\"答：上述查询使用了GROUP BY子句将数据按照第一列进行分组，然后使用MAX函数获取每个组中第二列和第三列的最大值。通过这种方式，如果第一列重复的记录中有至少一行的第二列有值，那么MAX函数将返回有值的行，否则将返回空值。\",\"请注意，上述查询假设第二列和第三列的数据类型是可比较的，例如字符串或数字类型。如果第二列和第三列的数据类型不同，您可能需要相应地调整查询以适应实际情况。\",\"SELECT Column1, MAX(Column2) AS Column2, MAX(Column3) AS Column3 FROM YourTable GROUP BY Column1 \",\"Sum 去除null值，发现只有最外层包有用 因为Select 语句是无记录，0Row导致其它公式为null（1、4）\",\"它不是null，而是整行没有N/A\",\"SELECT SUM (isnull(RL_RECV_QTY, 0)) a, --null isnull(SUM (RL_RECV_QTY), 0), --0 SUM (RL_RECV_QTY), --null SUM (COALESCE(RL_RECV_QTY,0)) --null \",\"WITH、COALESCE学习！！！想把两个列数一样的查询 例如\",\"1）A、B 2）A、C\",\"组成一个查询变成 A、B、C\",\"Union 是叠加行，这个有点叠加列的意思！\",\"当涉及复杂的查询或需要多次使用相同的子查询结果时，使用 WITH 子句（也称为公共表表达式或 CTE）可以更清晰地组织和重用查询逻辑。WITH 子句用于定义一个临时的命名查询，它可以在后续的查询中像表一样引用。\",\"以下是 WITH 子句的基本语法：\",\"公共表达式（Common Table Expressions，CTE）：使用\\\"WITH\\\"关键字来定义一个CTE，即一个可以在查询中被引用的临时结果集。使用CTE可以简化复杂查询的编写，并提高可读性。\",\"考虑使用临时表或公共表达式（CTE）：如果查询中的子查询使用频繁，可以将其结果存储在临时表或使用 CTE，以避免多次执行相同的子查询。\",\"WITH cte_name (column1, column2, ..., columnN) AS ( -- 查询定义 SELECT ... FROM ... WHERE ... ) -- 后续查询 SELECT ... FROM cte_name WHERE ... ------------------------------- 实测：不要漏了 as 会报错 WITH SalesCTE AS ( SELECT ProductID, SUM(Quantity) AS TotalSales FROM Sales GROUP BY ProductID ) SELECT * FROM SalesCTE WHERE TotalSales > 100 \",\"在上述语法中，cte_name 是公共表表达式的名称，可以在后续的查询中使用。括号中的列名列表是可选的，用于指定公共表表达式的列名。\",\"COALESCE 函数用于处理 NULL 值。它接受多个参数，并返回第一个非 NULL 参数的值。如果所有参数都为 NULL，则返回 NULL。\",\"以下是 COALESCE 函数的示例用法：\",\"SELECT COALESCE(column1, column2, ..., columnN) AS result FROM table_name; \",\"在上述示例中，COALESCE 函数将逐个检查列 column1、column2、...、columnN，并返回第一个非 NULL 的列值作为结果。\",\"实际语句:\",\"WITH UsedTrays AS ( SELECT CASE trayllx WHEN '1' THEN '小托盘' WHEN '2' THEN '中托盘' WHEN '3' THEN '大托盘' WHEN '托盘' THEN '收货托盘' WHEN '仓库' THEN '保税仓库' END AS trayType, COUNT(d2.oid) AS used FROM TrayRow d1 JOIN Dict_Pallet d2 ON (RIGHT(d2.Name, 2) = d1.Name or d2.Name= d1.Name) AND d2.Enable = 1 WHERE EXISTS ( SELECT 1 FROM wm_quant q WHERE q.QT_PALLET = d2.oid AND (q.QT_ONHAND_QTY > 0 OR q.DVERID > 0) ) GROUP BY trayllx ), NotUsedTrays AS ( SELECT CASE trayllx WHEN '1' THEN '小托盘' WHEN '2' THEN '中托盘' WHEN '3' THEN '大托盘' WHEN '托盘' THEN '收货托盘' WHEN '仓库' THEN '保税仓库' END AS trayType, COUNT(d2.oid) AS notUsed FROM TrayRow d1 JOIN Dict_Pallet d2 ON (RIGHT(d2.Name, 2) = d1.Name or d2.Name= d1.Name) AND d2.Enable = 1 WHERE NOT EXISTS ( SELECT 1 FROM wm_quant q WHERE q.QT_PALLET = d2.oid AND (q.QT_ONHAND_QTY > 0 OR q.DVERID > 0) ) GROUP BY trayllx ) SELECT COALESCE(UsedTrays.trayType, NotUsedTrays.trayType) AS trayType, COALESCE(UsedTrays.used, 0) AS used, COALESCE(NotUsedTrays.notUsed, 0) AS notUsed FROM UsedTrays FULL JOIN NotUsedTrays ON UsedTrays.trayType = NotUsedTrays.trayType; \",\"优化慢查询，原本要20s。 优化后毫秒级 整个查询3k row 子查询 6k row\",\"工作的这处优化我猜测：可能是结果集太大了，不适合 not in 要 join 效率高\",\"复合索引和组合索引是同一个概念，都是指对多个列同时创建一个索引。在不同的数据库管理系统中，可能会使用不同的术语来描述同样的概念。例如，在MySQL中，通常使用“复合索引”（Composite Index）来描述这个概念；而在Oracle数据库中，则更常用“组合索引”（Composite Index）这个词汇来描述这个概念。\",\"联合索引（Compound Index）：也称为复合索引（Composite Index）\",\"SQLServer 拼接null就是null 当NULL值与任何其他值进行拼接时，结果都将为NULL。这是因为NULL表示缺失或未知的值，它与任何具体的值进行拼接都无法确定其结果。\",\"select '1'+null+'2' //null \",\"exists 和 not exists 条件\",\"如果子查询返回数据，则返回1或0。常用于判断条件。\",\"select * FROM GYSFHHZ d WHERE NOT EXISTS ( SELECT 1 FROM GYSWM_Shiphead h WHERE h.oid = d.soid ); \",\"SQLServer if else\",\"select case when 1=1 then 1 else 2 end\",\"工作中犯的错误 BigInt不要用 ‘’ 包起来 where / set\",\"这是SQL Server中MERGE语句的语法形式，用于合并（更新或插入）源表中的数据到目标表中。具体语法如下：\",\"MERGE INTO 目标表名称 AS 目标表别名 USING 源表表达式 AS 源表别名 ON 目标表列 = 源表列 WHEN MATCHED THEN UPDATE SET 目标表列 = 源表列 WHEN NOT MATCHED THEN INSERT (列1, 列2, ...) VALUES (值1, 值2, ...) \",\"MySQL 的版本：\",\"如果在 user_records 表中已经存在 user_id 为 123，且 record_date 为 '2023-05-16' 的记录，那么该 SQL 语句将更新 record_value 的值为 100。否则，将插入一条新的记录，其中 user_id 为 123，record_date 为 '2023-05-16'，record_value 为 100。\",\"INSERT INTO user_records (user_id, record_date, record_value) VALUES (123, '2023-05-16', 100) ON DUPLICATE KEY UPDATE record_value = 100; \",\"Group by 作用\",\"select 后可以用 聚合函数\",\"另外，还可以使用 GROUP BY 语句进行数据去重，以避免结果集中出现重复的行\",\"做题时候发现：使用group by开头的 select 必须明确写清列名不能 *\",\"select * from student s join score c on s.id=c.studentid group by s.id -- Error select s.id, s.name from student s join score c on s.id=c.studentid group by s.id -- success \",\"SELECT 语句中使用了 *，表示查询所有列。在 GROUP BY 语句中分组的列应该是 SELECT 语句中列名的子集，否则会导致查询结果不准确或错误。因此，建议明确指定 SELECT 语句中需要查询的列，以免出现不必要的问题。\",\"在 GROUP BY 语句中，只按学生 ID 进行分组，而未对其他列进行聚合函数处理（如 COUNT、SUM、AVG 等）。这意味着，如果一个学生的成绩表中有多条记录，则查询结果将随机返回一个记录，而不是计算该学生的总分或平均分等聚合值。\",\"子查询 + Group by 实践\",\"-- 要求:查询平均成绩大于等于68分的同学的信息并按总分从高到低排序。显示字段: 学生基本信息，总分， -- 平均分 语文成绩，数学成绩，英语成绩\",\"SELECT s.id, s. NAME, sum(c.score) sum, round(avg(c.score)) avg, (select score from score where studentid=s.id and course='语文') '语文', -- 可以复用上面的结果！！ (select score from score where studentid=s.id and course='数学') '数学', (select score from score where studentid=s.id and course='英语') '英语' FROM student s JOIN score c ON s.id = c.studentid GROUP BY s.id HAVING avg >= 68 ORDER BY sum DESC \",\"[1）Union 和 Union All --> 具体看上面](#列转行用union all：一开始我没那么理解)\",\"2）数据库很多请求打过来自己有什么优化方法，除了分表\",\"https://blog.csdn.net/qq_21993785/article/details/81017671\",\"慢查询：查询时间超过了我们设定的时间的语句\",\"*SQL查询语句优化*\",\"*主从复制，读写分离，负载均衡*\",\"*数据库分表、分区、分库*\",\"3）分表、分区、分库 这篇文章挺好！！！\",\"基于上面的补充，浅问了ChartGPT\"]},\"960\":{\"h\":\"概念\",\"t\":[\"MySQL分库分表是一种数据库技术，目的是把大量的数据分散到多个数据库或数据表中，以提高数据库的可扩展性和稳定性。这样做的好处是：\",\"减少单个数据库的负载：分散数据能够缓解单个数据库的压力，防止数据库因为负载过大而瘫痪。\",\"提高可扩展性：通过分散数据到多个数据库或数据表中，可以方便地添加更多的数据库和数据表，以适应增长的数据量。\",\"提高数据的安全性：数据分散到多个数据库或数据表中，每个数据库或数据表的数据量都比较小，如果有一个数据库出现问题，不会影响其他的数据库。\",\"分库分表的方法有很多种，如基于哈希，范围，时间等，具体选择哪种方法取决于实际需求。通常使用中间件（例如Sharding-JDBC）来实现分库分表，使得实现和维护更加简便。\",\"常见的两种分库分表的方式:\",\"1）mycat是一个中间件的第三方应用，sharding-jdbc是一个jar包 (这就是为什么我在Pom.xml里看过配这个的原因)\",\"2）使用mycat时不需要改代码，而使用sharding-jdbc时需要修改代码\",\"分库：分库是根据业务不同把相关的表切分到不同的数据库中，比如web、bbs、blog等库\",\"分表：通过分表可以提高表的访问效率。有两种拆分方法：\",\"垂直切分，即将表按照功能模块、关系密切程度划分出来，部署到不同的库上。例如，我们会建立定义数据库workDB、商品数据库payDB、用户数据库userDB等，分别用于存储项目数据定义表、商品定义表、用户数据表等。\",\"水平切分,当一个表中的数据量过大时,我们可以把该表的数据按照某种规则,例如userID散列,进行划分,然后存储到多个结构相同的表,和不同的库上.例如,我们的userDB中的用户数据表中,每一个表的数据量都很大,就可以把userDB切分为结构相同的多个userDB:partoDB、part1DB等,再将userDB上的用户数据表userTable,切分为很多userTable:userTableO、userTable1等,然后将这些表按照一定的规则存储到多个userDB上. 水平拆分的实现，具体可以看下面的笔记！\",\"垂直拆分的关注点在于 业务相关性\",\"水平拆分指的是将单一数据表按照某一种规则拆分到多个数据库和多个数据表中，关注点在 数据的特点。\",\"分库分表实际上是分布式存储中一种数据分片的解决方案\"]},\"961\":{\"h\":\"水平拆分实现\",\"t\":[\"分库分表的方法有很多种，其中常用的有： 可以看titile那篇文章！\",\"基于哈希：将数据按照一定的算法（例如哈希算法）划分到多个数据库或多个数据表中，这种方法适用于数据分布均匀的情况。 \",\"这种拆分规则比较适用于实体表，比如说用户表，内容表，我们一般按照这些实体表的 ID 字段来拆分。比如说我们想把用户表拆分成 16 个库，64 张表，那么可以先对用户 ID 做哈希，哈希的目的是将 ID 尽量打散，然后再对 16 取余，这样就得到了分库后的索引值；对 64 取余，就得到了分表后的索引值。【分库分表-拆分成 16 个库和 64 张表，那么一次数据的查询会变成 16*64=1024 所以需要分区键，以及那些个与分区键映射表从而达到先拿分区键再拿完整数据的目的。。。避免1024次查询】\",\"基于范围：将数据按照给定的范围分配到多个数据库或多个数据表中，这种方法适用于数据量较大且有规律的情况。\",\"基于位置：将数据按照数据所在的位置（例如国家、省份）分配到多个数据库或多个数据表中，这种方法适用于对数据位置敏感的情况。\",\"基于时间：将数据按照数据的创建时间或更新时间分配到多个数据库或多个数据表中，这种方法适用于对时间敏感的情况。\",\"不同的应用场景对应不同的分库分表方法，在选择分库分表方法时，需要根据实际情况考虑应用场景、数据量、数据分布情况等因素。\",\"注意：分库分表最难解决的问题是统计，还有跨表的连接（比如这个表的订单在另外一张表），解决这个的方法就是使用中间件，比如大名鼎鼎的MyCat，用它来做路由，管理整个分库分表，乃至跨库跨表的连接\",\"分库解决的是数据库端 并发量的问题。分库和分表并不一定两个都要上，比如数据量很大，但是访问的用户很少，我们就可以只使用分表不使用分库。如果数据量只有1万，而访问用户有一千，那就只使用分库。\",\"总的来说，在面对数据库容量瓶颈和写并发量大的问题时，你可以采用垂直拆分和水平拆分来解决，不过你要注意，这两种方式虽然能够解决问题，但是也会引入诸如查询数据必须带上分区键，列表总数需要单独冗余存储等问题。\",\"而且，你需要了解的是在实现分库分表过程中，数据从单库单表迁移多库多表是一件即繁杂又容易出错的事情，而且如果我们初期没有规划得当，后面要继续增加数据库数或者表数时，我们还要经历这个迁移的过程。所以，从我的经验出发，对于分库分表的原则主要有以下几点：\",\"如果在性能上没有瓶颈点那么就尽量不做分库分表；\",\"如果要做，就尽量一次到位，比如说 16 库 64 表就基本能够满足为了几年内你的业务的需求。\",\"很多的 NoSQL 数据库，例如 Hbase，MongoDB 都提供 auto sharding 的特性，如果你的团队内部对于这些组件比较熟悉，有较强的运维能力，那么也可以考虑使用这些 NoSQL 数据库替代传统的关系型数据库。\",\"其实，在我看来，有很多人并没有真正从根本上搞懂为什么要拆分，拆分后会带来哪些问题，只是一味地学习大厂现有的拆分方法，从而导致问题频出。 所以，你在使用一个方案解决一个问题的时候一定要弄清楚原理，搞清楚这个方案会带来什么问题，要如何来解决，要知其然也知其所以然，这样才能在解决问题的同时避免踩坑。\",\"分库需了解：\",\"ID 问题：了解 1 最简单的设置步长\",\"还是自增，只不过自增步长设置一下。比如现在有三张表，步长设置为3，三张 表 ID 初始值分别是1、2、3。 这样第一张表的 ID 增长是 1、4、7。第二张表是 2、5、8。第三张表是3、6、9，这样就不会重复了。\",\"UUID，这种最简单，但是不连续的主键插入会导致严重的页分裂，性能比较差。\",\"分布式 ID，比较出名的就是 Twitter 开源的 sonwlake 雪花算法\",\"常翻的一张图，SQL JOINS\",\"假如 T1(a,b) T2(a,a) 两表 join / left join / right join 都会有两行，因为交集部分 a 有两个！ 因为按道理 on 的时候得是唯一键 但是此时(a,a)并不是唯一键 2023-12-13 Record, Because i Don't understand\",\"img\"]},\"962\":{\"h\":\"ACID\",\"t\":[\"原子性（Atomicity） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\",\"一致性（Consistency）： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；\",\"隔离性（Isolation）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\",\"持久性（Durability）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\",\"🌈 这里要额外补充一点：只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！ 想必大家也和我一样，被 ACID 这个概念被误导了很久! 我也是看周志明老师的公开课《周志明的软件架构课》才搞清楚的（多看好书！！！）。\",\"image-20230907171603497\"]},\"963\":{\"h\":\"\",\"t\":[\"对于VARCHAR类型，MySQL会根据存储的实际数据长度来动态分配存储空间，因此VARCHAR类型的存储空间是根据实际存储的数据长度来动态分配的，并不会浪费存储空间。\",\"然而，在创建表时，如果没有明确指定VARCHAR类型的长度，MySQL将使用默认长度来定义该字段。在MySQL中，VARCHAR类型的默认长度为1，这意味着如果没有明确指定VARCHAR类型的长度，MySQL将为该字段分配一个字节的存储空间，这显然不足以存储实际数据。\",\"因此，在创建表时，如果没有明确指定VARCHAR类型的长度，可能会导致存储空间的浪费。例如，在VARCHAR类型的字段中存储了10个字符，如果没有指定长度，则MySQL将使用默认长度1来定义该字段，这将导致MySQL为该字段分配11个字节的存储空间，其中1个字节用于存储长度信息，10个字节用于存储实际数据，因此将浪费1个字节的存储空间。\",\"因此，为了避免存储空间的浪费，建议在创建表时明确指定VARCHAR类型的长度，以确保MySQL为该字段分配足够的存储空间来存储实际数据。\",\"在 MySQL 中，SQL 语句的执行顺序如下：\",\"FROM 子句：指定要查询的表\",\"JOIN 子句：使用 JOIN 连接表\",\"WHERE 子句：筛选满足条件的行\",\"GROUP BY 子句：将数据按照指定的列分组\",\"HAVING 子句：筛选满足条件的分组\",\"SELECT 子句：选择要查询的列以及进行计算和聚合的函数\",\"DISTINCT 关键字：去重\",\"ORDER BY 子句：按照指定的列排序\",\"LIMIT 关键字：限制查询结果的数量\",\"mysql limit 0,10 第一个参数是0开始\",\"小技巧-对于深分页：\",\"limit 100000,30; -> where id>10000 limit 30;\"]},\"964\":{\"h\":\"全连接是外连接吗\",\"t\":[\"是的，全连接是一种外连接（outer join），它包括左外连接（left outer join）和右外连接（right outer join）的结果。\",\"SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column; \"]},\"965\":{\"h\":\"mysql中创建表时候必须指定主键吗\",\"t\":[\"在MySQL中，创建表时并不一定必须指定主键，但是建议为每个表指定一个主键。如果表中没有主键，那么它就是一个无主键表（unkeyed table），也称为堆表（heap table）。在无主键表中，MySQL会为每一行隐式地分配一个ROWID（或HEAPID），作为行的唯一标识符，但是这种行标识符并不是真正的主键。\"]},\"966\":{\"h\":\"mysql没有索引查行数据怎么查\",\"t\":[\"如果MySQL表没有索引，可以使用全表扫描的方式来查找行数据。全表扫描是指MySQL会扫描整个表的每一行数据，然后逐行进行比较，找到符合条件的行数据。\"]},\"967\":{\"h\":\"全表扫码顺序有主键就根据主键扫，没有主键就是根据rowid来的是吗 Yes\",\"t\":[\"在MySQL中，如果表没有主键，那么MySQL会使用隐藏的ROWID（也称为物理地址或行指针）作为默认的聚簇索引，用于支持数据的物理存储和访问，因此在进行全表扫描时，MySQL会按照ROWID的顺序进行扫描。\",\"需要注意的是，ROWID是MySQL系统自动分配的，用于唯一标识表中每一行数据的物理地址，每次数据插入或删除都可能会导致ROWID的变化，因此ROWID的值不是稳定的，不应该依赖于ROWID进行数据访问和操作。\",\"如果表定义了主键，则MySQL会使用主键作为聚簇索引进行数据的物理存储和访问，因此在进行全表扫描时，MySQL会按照主键的顺序进行扫描。主键可以是单个列或多个列的组合，主键值必须唯一，不允许为空。\",\"在实际应用中，为了提高查询效率，建议在表中定义主键或者合适的索引来支持查询操作。如果表没有主键或者合适的索引，可能会导致查询效率低下，甚至出现全表扫描的情况。\"]},\"968\":{\"h\":\"高性能：有哪些常见的 SQL 优化手段？\"},\"969\":{\"h\":\"* 避免使用 SELECT *\",\"t\":[\"SELECT * 会消耗更多的 CPU （数据传输量增加：SELECT * 会返回表中的所有列，包括不需要的列）\",\"SELECT * 无用字段增加网络带宽资源消耗，增加数据传输时间，尤其是大字段（如 varchar、blob、text）。\",\"SELECT * 无法使用 MySQL 优化器覆盖索引的优化（基于 MySQL 优化器的“覆盖索引”策略又是速度极快，效率极高，业界极为推荐的查询优化方式） \",\"MySQL优化器覆盖索引是指查询可以直接使用索引来满足查询需求，而无需访问实际的数据行。也就是不需要“回表”操作了\",\"SELECT <字段列表> 可减少表结构变更带来的影响\"]},\"970\":{\"h\":\"* 尽量避免多表做 join\",\"t\":[\"阿里巴巴《Java 开发手册》中有这样一段描述：\",\"【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致;多表关联查询时，保证被关联 的字段需要有索引。\",\"image-20230908141221249\",\"join 的效率比较低，主要原因是因为其使用嵌套循环（Nested Loop）来实现关联查询，三种不同的实现效率都不是很高：\",\"实际业务场景避免多表 join 常见的做法有两种：\",\"单表查询后在内存中自己做关联 ：对数据库做单表查询，再根据查询结果进行二次查询，以此类推，最后再进行关联。\",\"数据冗余，把一些重要的数据在表中做冗余，尽可能地避免关联查询。很笨的一种做法，表结构比较稳定的情况下才会考虑这种做法。进行冗余设计之前，思考一下自己的表结构设计的是否有问题。\",\"更加推荐第一种，这种在实际项目中的使用率比较高，除了性能不错之外，还有如下优势：\",\"拆分后的单表查询代码可复用性更高 ：join 联表 SQL 基本不太可能被复用。\",\"单表查询更利于后续的维护 ：不论是后续修改表结构还是进行分库分表，单表查询维护起来都更容易。\",\"不过，如果系统要求的并发量不大的话，我觉得多表 join 也是没问题的。很多公司内部复杂的系统，要求的并发量不高，很多数据必须 join 5 张以上的表才能查出来。\",\"知乎上也有关于这个问题的讨论：MySQL 多表关联查询效率高点还是多次单表查询效率高，为什么？，感兴趣的可以看看。\",\"摘取知乎这篇一部分：但是确实大多数业务都会考虑把这种合并操作放到service层，我觉得有几方面考虑：\",\"第一：单机数据库计算资源很贵，数据库同时要服务写和读，都需要消耗CPU，为了能让数据库的吞吐变得更高，而业务又不在乎那几百微妙到毫秒级的延时差距，业务会把更多计算放到service层做，毕竟计算资源很好水平扩展，数据库很难啊，所以大多数业务会把纯计算操作放到service层做，而将数据库当成一种带事务能力的kv系统来使用，这是一种重业务，轻DB的架构思路\"]},\"971\":{\"h\":\"建议不要使用外键与级联\",\"t\":[\"阿里巴巴《Java 开发手册》中有这样一段描述：\",\"不得使用外键与级联，一切外键概念必须在应用层解决。\",\"image-20230908145317711\",\"网络上已经有非常多分析外键与级联缺陷的文章了，个人认为不建议使用外键主要是因为对分库分表不友好，性能方面的影响其实是比较小的。\"]},\"972\":{\"h\":\"尽量使用自增 id 作为主键。\",\"t\":[\"如果主键为自增 id 的话，每次都会将数据加在 B+树尾部（本质是双向链表），时间复杂度为 O(1)。在写满一个数据页的时候，直接申请另一个新数据页接着写就可以了。\",\"如果主键是非自增 id 的话，为了让新加入数据后 B+树的叶子节点还能保持有序，它就需要往叶子结点的中间找，查找过程的时间复杂度是 O(lgn)。如果这个也被写满的话，就需要进行页分裂。页分裂操作需要加悲观锁，性能非常低。\",\"不过， 像分库分表这类场景就不建议使用自增 id 作为主键，应该使用分布式 ID 比如 uuid 。\",\"相关阅读：数据库主键一定要自增吗？有哪些场景不建议自增？。\",\"看起来确实是没有主键的样子。然而实际上，mysql的innodb引擎内部会帮你生成一个名为ROW_ID列，它是个6字节的隐藏列，你平时也看不到它，但实际上，它也是自增的。有了这层兜底机制保证，数据表肯定会有主键和主键索引。\",\"跟ROW_ID被隐藏的列还有trx_id字段，用于记录当前这一行数据行是被哪个事务修改的，和一个roll_pointer字段，这个字段是用来指向当前这个数据行的上一个版本，通过这个字段，可以为这行数据形成一条版本链，从而实现多版本并发控制（MVCC）。有没有很眼熟，这个在之前写的文章里出现过。\",\"对照MySQL45讲？？？TODO\"]},\"973\":{\"h\":\"批量操作\",\"t\":[\"对于数据库中的数据更新，如果能使用批量操作就要尽量使用，减少请求数据库的次数，提高性能。\",\"# 反例 INSERT INTO `cus_order` (`id`, `score`, `name`) VALUES (1, 426547, 'user1'); INSERT INTO `cus_order` (`id`, `score`, `name`) VALUES (1, 33, 'user2'); INSERT INTO `cus_order` (`id`, `score`, `name`) VALUES (1, 293854, 'user3'); # 正例 INSERT into `cus_order` (`id`, `score`, `name`) values(1, 426547, 'user1'),(1, 33, 'user2'),(1, 293854, 'user3'); \"]},\"974\":{\"h\":\"删除长期未使用的索引\",\"t\":[\"删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗 MySQL 5.7 可以通过查询 sys 库的 schema_unused_indexes 视图来查询哪些索引从未被使用\"]},\"975\":{\"h\":\"面试题-百万级别以上的数据如何删除？\",\"t\":[\"索引只对查询有好处？批量删大量数据不好\",\"关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当 我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额 外的IO,会降低增/改/删的执行效率。 （XD：想象树图也要落入磁盘）\",\"所以，在我们删除数据库百万级别数据的时候，查询MySQL官方手册得知删除数据的速度和创建的索引数量是成正比的\",\"所以我们想要删除百万数据的时候可以先删除索引\",\"然后删除其中无用数据\",\"删除完成后重新创建索引创建索引也非常快\"]},\"976\":{\"h\":\"面试题-百万千万级大表如何添加字段？\",\"t\":[\"当线上的数据库数据量到达几百万、上千万的时候，加一个字段就没那么简单，因 为可能会长时间锁表\",\"通过中间表转换过去（先了解这一个）\",\"创建一个临时的新表，把旧表的结构完全复制过去，添加字段，再把旧表数据复 制过去，删除旧表，新表命名为旧表的名称，这种方式可能回丢掉一些数据\",\"用pt-online-schema-change\",\"​ pt-online-schema-change 是percona公司开发的一个工具，它可以在线修改表结 构，它的原理也是通过中间表。\",\"先在从库添加 再进行主从切换\",\"​ 如果一张表数据量大且是热表（读写特别频繁），则可以考虑先在从库添加，再 进行主从切换，切换后再将其他几个节点上添加字段。\"]},\"977\":{\"h\":\"面试mai题-MySQL 数据库 cpu 飙升的话，要怎么处理呢？\",\"t\":[\"排查过程：\",\"（1）使用 top 命令观察，确定是 mysqld 导致还是其他原因。\",\"（2）如果是 mysqld 导致的，show processlist，查看 session 情况，确定是不是有 消耗资源的 sql 在运行。\",\"（3）找出消耗高的 sql，看看执行计划是否准确， 索引是否缺失，数据量是否太 大。\",\"处理：\",\"（1）kill 掉这些线程 (同时观察 cpu 使用率是否下降)，\",\"（2）进行相应的调整 (比如说加索引、改 sql、改内存参数)\",\"（3）重新跑这些 SQL。\",\"其他情况： 也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调 整，比如说限制连接数等\"]},\"978\":{\"h\":\"聚簇索引一个表为什么只能有一个？\",\"t\":[\"由于聚簇索引是将索引和数据放在一起的，有多个的话会出现数据冗余。\",\"隐藏点：通常主键索引就是聚簇索引，但也可以指定为非聚簇索引，这样就可以建立其他聚簇索引\"]},\"979\":{\"h\":\"5-AM\"},\"980\":{\"h\":\"https://www.youtube.com/watch?v=4zXTyc2ZjXM\",\"t\":[\"xd: 5.起床适用于有工作的人，没工作的好像并无必要\",\"早起与成功\",\"意志力不行❌ 长立志、立长志☑️\",\"一、早起奥义1\",\"关注的点在早起要做的事，而非早起本身\",\"二、奥义2:早起是和时间进行“田忌赛马”\",\"1.每天的生活像抱着一个空罐子赛跑，而每天都要冲刺一百米，那么从早晨的空罐子到晚上的空罐子，渐渐装满，然后从第二天又重新开始。其实下班后的时间都是垃圾时间，因为已经消耗人的精力了，现代人会无限延长垃圾时间。\",\"2.如果执行空罐子，那么就可以把我们个人不被打扰的时间从早上5～8点都属于自己的时间，会更高效，然后随着时间的推移我们的时间就会被自己以外的人所占据。\",\"3.如何执行5am：晚上9点到10点睡觉，因为本来下班到睡觉的时间都是被别人占据的时间。（垃圾时间）所以我们要结合部分垃圾时间用来睡觉，跟时间进行田忌赛马。\",\"三、3种5am 项目\",\"1️⃣你特别需要做的事情（迫切需要解决的事情）\",\"2️⃣你特别想要做的事情（看书、感兴趣的事情）\",\"3️⃣可以是一件特别不同的事情（从来没有想过要做的事情，例如做与工作不相关的事情）\",\"四、执行一段时间后，可以停一段时间，不必要强迫自己要5am项目。\",\"五、早起小妙招：设置手环闹钟。\",\"午睡不要超过一小时，或者早入睡提早半小时，逐渐调整到整点为止。\",\"摘自评论：\",\"这是唯一，这才是对早起时间最合理最实际的解释，没有空话，没有鸡汤，没有那些自以为是的说教。感谢您的付出。我的手机上终于有了一个属于自己的闹钟了\",\"妙啊，实在太妙了！与其把黄金时间留给公司，不如把黄金时间留给自己。博主一语道破早起真相，实在感谢分享！\"]},\"981\":{\"h\":\"Clash\",\"t\":[\"Clash的 config.yml 配置文件也可以直接导入到 Shadowrocket !\",\"场景：把 config.yml 导入到 Profiles 选中报错 (我想公司一份，全局一份好切换 个性配置)，这时候对这个文件里的所有点进行了检查\",\"机场默认给的是 base64 的订阅地址，proxy-providers 配置 url 的时候需要在订阅地址后加上 &flag=clash 换成文件\",\"如果报错那可能是订阅不新，拉不下来。。使用最新的订阅地址 默认拉下来会在 .config\\\\clash\\\\providers\\\\proxy 生成一个对应的文件 \",\"换完新的订阅，记得重启一下 Clash 不然老是报错 all DNS requests failed, first error: Post \\\"https://rubyfish.cn/dns-query\\\": tls: failed to verify certificate: x509: certificate is valid for cloudaemon.rubyfish.cn, dns.rubyfish.cn, not rubyfish.cn\"]},\"982\":{\"h\":\"Git-云服务器使用\"},\"983\":{\"h\":\"\",\"t\":[\"云服务器的 Git 我捣鼓了好久~ 由于云服务器网络、地区CN http协议去连 Github 有点抽风，固我第一次尝试了 ssh 协议！！！ 好使\",\"生成ssh key ssh-keygen -t rsa -C \\\"xxx@xxx.com\\\"\",\"获取ssh key公钥内容（id_rsa.pub） cat ~/.ssh/id_rsa.pub\",\"把 cat 到的公钥内容放入 Github SSH配置里\",\"验证是否设置成功 ssh -T git@github.com\"]},\"984\":{\"h\":\"通俗解释！！\",\"t\":[\"重点来了：一定要知道ssh key的配置是针对每台主机的！，比如我在某台主机上操作git和我的远程仓库，想要push时不输入账号密码，走ssh协议，就需要配置ssh key，放上去的key是当前主机的ssh公钥。那么如果我换了一台其他主机，想要实现无密登录，也就需要重新配置。\",\"下面解释开头提出的问题： （1）为什么要配？ 配了才能实现push代码的时候不需要反复输入自己的github账号密码，更方便 （2）每使用一台主机都要配？ 是的，每使用一台新主机进行git远程操作，想要实现无密，都需要配置。并不是说每个账号配一次就够了，而是每一台主机都需要配。 （3）配了为啥就不用密码了？ 因为配置的时候是把当前主机的公钥放到了你的github账号下，相当于当前主机和你的账号做了一个关联，你在这台主机上已经登录了你的账号，此时此刻github认为是该账号主人在操作这台主机，在配置ssh后就信任该主机了。所以下次在使用git的时候即使没有登录github，也能直接从本地push代码到远程了。当然这里不要混淆了，你不能随意push你的代码到任何仓库，你只能push到你自己的仓库或者其他你有权限的仓库！\"]},\"985\":{\"h\":\"1.备份 MinIO\",\"t\":[\"场景：备份 MinIO 的文件到 Git\",\"使用 crontab -e\",\"一分钟执行一次 * * * * * /home/minio/data/blog/test.sh >> /home/minio/data/test.log 2>&1\",\"问题：我需要保证我的shell脚本的git命令 auth 这一步\",\"​ 手动一行行命令的时候用 http 可以：git remote set-url origin http://github.com/zzq8/MinIO-upupor.git\",\"​ 但是shell中批量总是报错！！！auth问题，网上冲浪发现用ssh好使 1）需要云服务器加私钥 2）把公钥加到Git ​ git remote set-url origin git@github.com:zzq8/MinIO-upupor.git\",\"token 可以当密码auth的时候\",\"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\",\"不要小看这个，真的可以挖掘Github这个宝藏库\",\"in关键字限制搜索范围 ',' 是或的意思 xxx in:name,readme,description\",\"查找star大于1000，fork数在500到1000 xxx stars:>1000 forks:500..1000\",\"awesome系列，一般用来收集学习、工具、书籍类相关的项目 awesome xxx\",\"【陌生】搜出来第一条会有副红色眼镜 言下之意，你要学什么东西就用这个命令试试。 至少我搜了下SpringBoot还是蛮不错的\",\"高亮显示某行代码 一行：代码地址后面紧跟 #L10 多行：#Lx - #Ln\",\"项目内搜索 使用英文字母 t ,开启项目内搜索\",\"Git 学习游戏网站\",\"命令行还是可以会一下，后面其实都可以用 TortoiseGit 图形化操作了...\"]},\"986\":{\"h\":\"前置设置\",\"t\":[\"--- 非必要，可随便填方便在 Git 上看是谁提交过来的 --- # 配置用户名 git config --global user.name \\\"username\\\" //（名字） # 配置邮箱 git config --global user.email \\\"username@email.com\\\" //(注册账号时用的邮箱) --- 配置 ssh 免密登录 --- # https://gitee.com/help/articles/4181#article-header0 * 进入 git bash；使用：ssh-keygen -t rsa -C \\\"xxxxx@xxxxx.com\\\"命令。 连续三次回车。一般用户目录下会有两个文件 * 或者 cat ~/.ssh/id_rsa.pub * 登录进入 gitee，在设置里面找到 SSH KEY 将.pub 文件的内容粘贴进去使用 ssh -T git@gitee.com 测试是否成功即可 \"]},\"987\":{\"h\":\"推送流程\",\"t\":[\"git init\",\"git remote add origin https://gitee.com/codezzq/myblog 建立一个远程仓库（连接起来）\",\"git remote add[别名] [远程地址]\",\"git add .\",\"git commit -m \\\"test\\\"\",\"git push -u origin master\",\"git push[别名] [分支名]\",\"ps: 第2步在第五步之前实现都是可以的\",\"idea 如果想导入 SVN 项目的话，例如 Git 可以这样：git clone [远程地址]\",\"push的时候可以把 .gitignore放到项目里 和src平级，被ignore的文件在idea里显示的是金黄色的\",\"有时候你想push一个文件，\",\"报错：error: failed to push some refs to 'https://gitee.com/codezzq/myblog'\",\"原因：当前push的东西和仓库的东西不匹配，也就是说你仓库里可能是整个项目，而你push的却只是一个文件\",\"解决方案一：就直接强制push了。相当于清空仓库把本地的再给push上\",\"执行完代码代入上面的场景就是：仓库里的项目没有了，值剩下你push 的一个文件\",\"$ git push -u origin master -f \",\"合作项目的时候，还是建议不要用这种方法的好。 顺便搜索了下别的解决方案：\",\"push前先将远程repository修改pull下来：\",\"$ git pull origin master $ git push -u origin master \",\"若不想merge远程和本地修改，可以先创建新的分支：\",\"$ git branch [name] $ git push -u origin [name] \",\"https://www.jianshu.com/p/305723736c7c\",\"//查看所有分支列表，包括本地和远程 git branch -a //切换分支 git checkout [分支名] \",\"Git新建分支出现fatal: Not a valid object name: ‘master‘错误 :\",\"原因是没有提交一个对象，要先commit之后才会真正建立master分支，此时才可以建立其它分支。\"]},\"988\":{\"h\":\"无法获取远程分支\",\"t\":[\"//无法获取远程分支 //原因 git branch -a 这条命令并没有每一次都从远程更新仓库信息，我们可以手动更新一下 git fetch origin git branch -a \"]},\"989\":{\"h\":\"创建分支\",\"t\":[\"语法：git branch 分支名\"]},\"990\":{\"h\":\"创建并且切换到分支里\",\"t\":[\"git checkout -b 分支名\",\"状态查看操作（查看工作区、暂存区状态）\",\"git status\",\"添加操作（将工作区的“新建/修改”添加到暂存区（缓存区））\",\"git add[file name]\",\"提交操作（将暂存区的内容提交到本地库）\",\"git commit -m \\\"commit message\\\" [file name]\",\"超好用！！！\",\"git commit -av 是一个用于提交 Git 修改的命令。它结合了 -a 和 -v 两个选项，具有以下含义：\",\"-a（或 --all）选项表示自动将所有已修改的文件添加到暂存区（Git Index），包括已经被 Git 跟踪的文件的修改。这样，你无需手动使用 git add 命令来将修改的文件添加到暂存区，Git 会自动处理。\",\"-v（或 --verbose）选项表示在提交时显示更详细的信息，包括每个修改的文件的 diff 内容。这对于查看每个文件的具体修改内容和变化非常有用。\",\"因此，当你运行 git commit -av 命令时，Git 将自动添加所有已修改的文件到暂存区，并在提交时显示每个文件的 diff 内容。\",\"注意：进入这个命令后跟编辑 vim 流程一样，输入 message 后需要 :wq 即可提交\",\"img\",\"image-20221020101841706\",\"这还只是一部分！！有很多图标被版本控制的操作没显示出来 例如 stash\",\"我们有时会遇到这样的情况，正在dev分支开发新功能，做到一半时有人过来反馈一个bug，让马上解决，但是新功能做到了一半你又不想提交，这时就可以使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。\",\"场景：自己web页面新建了个分支，explorer fetch下就可以拿到分支checkout过去\",\"git fetch：这将更新git remote 中所有的远程仓库所包含分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中\",\"git pull : 首先，基于本地的FETCH_HEAD记录，比对本地的FETCH_HEAD记录与远程仓库的版本号，然后git fetch 获得当前指向的远程分支的后续版本的数据，然后再利用git merge将其与本地的当前分支合并。所以可以认为git pull是git fetch和git merge两个步骤的结合。（注意此时是分支，还需手动fetch主干的信息，才能拿到最新的分支checkout）\",\"因此，git fetch是从远程获取最新版本到本地，但不会自动merge。 而git pull则是会获取所有远程索引并合并到本地分支中来。效果相同时git pull将更为快捷。\",\"区分：pull 拉取/获取\",\"Git中的变基（rebase）和合并（merge）是两种不同的代码整合方式。\",\"合并（merge）是指将两个或多个不同的分支合并成一个新的分支，通常使用git merge命令。合并操作会创建一个新的提交，包括合并后的所有修改。\",\"变基（rebase）是一种将一个分支的修改应用到另一个分支上的操作，通常使用git rebase命令。变基操作会将一系列的提交按照顺序一个一个地应用到另一个分支上，使得目标分支中的提交线性排列，从而避免了合并产生的提交历史分支。\",\"两种方式的区别在于它们对代码历史记录的影响。合并会保留原来的分支历史记录，而变基会将原来的分支历史记录“重放”在目标分支上，因此会修改目标分支的提交历史记录。\",\"一般来说，合并适合于处理不同的功能或特性的分支，而变基适合于将一个分支的修改应用到另一个分支上，使得提交历史更加清晰和线性。但是，变基操作有可能会导致冲突，需要手动解决，因此使用时需要谨慎。\",\"Git的变基（Rebase）和合并（Merge）是两种常见的代码合并方式，它们之间的主要区别在于合并后代码库的提交历史记录以及合并冲突的处理方式。\",\"合并（Merge）\",\"合并是将两个或多个分支的修改合并为一个新的提交。合并会将多个分支的修改合并为一个新的提交，该提交会有多个父提交。合并会在提交历史记录中保留每个分支的修改记录，所以可以看到每个分支的修改历史。合并通常适用于多人同时在同一个分支上进行开发的情况，或者需要在分支之间保留历史记录的情况。\",\"合并通常使用以下命令：\",\"phpCopy code git merge <branch-name> \",\"变基（Rebase）\",\"变基是将当前分支的修改，以及指定分支的修改合并到一个新的基底分支上，然后将当前分支指向新的基底分支。变基会将当前分支的修改在提交历史记录中移动到指定分支的后面，并创建一个新的提交。变基的结果是，当前分支的修改历史记录与指定分支的修改历史记录合并为一个线性历史记录。\",\"变基通常使用以下命令：\",\"phpCopy code git rebase <branch-name> \",\"主要区别：\",\"合并会在提交历史记录中保留每个分支的修改记录，而变基会将修改历史记录移动到一个新的基底分支上，并创建一个新的提交，不保留原始分支的修改历史记录。\",\"合并通常用于合并多个分支的修改，而变基通常用于在一个分支上更新另一个分支的修改。\",\"合并通常会产生合并冲突，需要手动解决，而变基也可能会产生冲突，但是由于变基只改变当前分支的历史记录，因此解决冲突的方式也更加直观和简单。\",\"综上所述，变基和合并都是常见的代码合并方式，它们的选择取决于具体的需求和情况。在选择变基或合并时，需要考虑提交历史记录的重要性、合并冲突的处理复杂度以及其他因素。\"]},\"991\":{\"h\":\"1）三个板块\",\"t\":[\"左上（SVN版本库中）、右上（本地工作副本）、下面（合并这俩的文件后的显示窗口）\"]},\"992\":{\"h\":\"2）以行为单位 解决冲突\"},\"993\":{\"h\":\"3）\",\"t\":[\"亮黄（增加+）、橙黄（删除-）、红色（冲突行?，并把两个版本的以橙黄显示在上面对比）\",\"\\\"=\\\" 其实是两个 - ，意味着两边都删了这一行\",\"加深理解：注意最左侧有个 “-”提示，代表此行不会纳入合并文件中\",\"231008 Boke 再理解\",\"整库- TortoiseSVN右键有个ignore，给文件夹添加属性，然后commit可以把文件夹的属性提交【这个应该是适用于整个库的】\",\"如下写的可以从配置文件里设置 / setting -> Global ignore pattern: 设置也是一样的效果！！！【记得需要重新右键commit打开一个新的框才能看到效果 不然我老是觉得没有生效】\",\"commit 界面有个 no changelist 列表，这里面都是未被版本控制的文件\",\"突然想明白一个事，这里全局忽略文件写路径的时候， 脑袋里要有 Versioned / Non-Versioned 两种文件的概念 然后写Non-Versioned的文件的相对路径，不要写带Versioned的有关的路径了！\",\"可以通过svn的全局配置文件给忽略掉不显示\",\"### XD [miscellany] global-ignores = *.iml .idea *.class *.md5 *.log classes *.log.* localhost_access_log.*.txt *.so *.tmp generated-sources generated-test-sources maven-archiver MyTest.java \"]},\"994\":{\"h\":\"GitHub Actions\",\"t\":[\"100秒解释什么是DevOps CI/CD 中国DevOps社区\",\"【CICD】github新功能actions全方位讲解！！\",\"起因：LeetCode 自动打卡签到领积分 可见Actions可以拿来跑一些好用的脚本，例如定时签到类的 / 看视频感觉更多的是持续集成\",\"1）可以围绕自己的仓库做一些流程自动化\",\"2）CI/CD代表持续集成和持续交付 自动化构建部署 Continuous Integration/Continuous Deployment\",\"​ CI：新代码更新集成到现有的代码库中（GitHub Actions就是这个服务）\",\"CI/CD提供了如下两个主要的好处：它可以帮助你将原本必须由开发人员手动完成的事情自动化（应用交付给客户时候需要经过三个步骤：测试、构建、部署），从而提高你的速度；它也会在小问题发展成重大灾难之前及早地发现它们，从而提高代码质量。\",\"Devops的核心实践之一是持续集成：好像是有个CI服务器。就是为了避免下面的问题。 我理解：GitHub Actions不同的是 不需要CI服务器了，直接GitHub提供云中的Linux容器给你操作 1）get code 2）setup node 3）test/build/dploy\",\"My：持续集成的流水线，以前的问题 码农1写了个API 码农2也写了一个UI 但是合并时候发现不兼容 合并地狱就需要推翻。而CI/CD会持续集成，每天提交的都会Actions跑看有没有问题。Actions里面写了测试...有问题就会马上显示出来！\",\"https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\",\"一个简单的实例：actions GitHub的官方用户\",\"name:MYCI on: #GitHub Action on:schedule 到指定时间执行任务 / on:push 就是推送就执行 push: branches: - master paths: - src/* jobs: #任务名字可随意 jobl: #是个枚举一般用这个可以了 runs-on: ubuntu-latest steps: #拷贝代码 输出hello #这里可用 git clone xxx 将代码拷贝，但是还要cd到目录/代码私有麻烦。 GitHub考虑到了用下面的省事 #这里是复用GitHub的流程，其实它有个用户叫actions仓库叫checkout（看了确实是！） 封装了下载代码的流程 - uses: actions/checkout@vl #运行shell - run: echo hello \",\"LeetCode的示例：\",\"name: auto action runner run-name: ${{ github.actor }} is running on: schedule: - cron: '50 16 * * *' workflow_dispatch: jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 #理解了 user/repositoty/release version 下面三条就好理解都是装环境，能指定版本是因为ubuntu里全装了 - name: Node uses: actions/setup-node@v3 with: node-version: 16 - name: Install pnpm uses: pnpm/action-setup@v2 id: pnpm-install with: version: 7 run_install: false - name: Install dependencies run: pnpm install - name: run run: pnpm dev ${{ secrets.ACCOUNT }} ${{ secrets.PASSWORD }} \",\"敏感信息放setting里面有个secrets可以设置 ${{}} 引用\",\"可以放个 Docker 在它里面放node的iamge\",\"可以跑个 nginx run的时候curl localhost:8080 是可以证明跑成功的\"]},\"995\":{\"h\":\"MacOS\",\"t\":[\"由于第一次接触MacOS，花了三周的星期六（三天）来搭这台MacOS\"]},\"996\":{\"h\":\"Software\",\"t\":[\"Apr. 12th 2024\",\"Karabiner (win autohotkey)\",\"Alfred (Lib & Everything) \",\"in 关键词（可以搜文件里面的内容！）\",\"Stats\",\"Clash\",\"Easydict\",\"IINA\",\"Omi\",\"Lunar（两台电脑连一台显示器软件方式切信号源通过 CLI）\",\"iShot\",\"腾讯会议\",\"Dash\",\"Espanso\",\"Chrome\",\"iTerm\",\"Karabiner\",\"Office\",\"Parallels\",\"QuickShade\",\"Paste\",\"SoundSource\",\"Sublime\",\"Lemon\",\"Thor\",\"Tiles + WGestures\",\"Postman Navicat IDEA PS Sourcetree TinyRDM\",\"补充：\",\"Typora\",\"注意：在官网这里键位映射表 搜名字，要对应起来，Mac 设置到 App 快捷键\",\"SourceTree\",\"Q：M 系列芯片好多软件还不支持，TortoiseSVN、SQLServer这种。。头疼了很久 后补充：\",\"其实用 Shell 挺好用的\",\"而且其实 idea 自带的就很好\",\"后又发现 SourceTree 很好用，管理自己的 Git 蛮好\",\"XD: 240330, 发现一个不错的软件 看的从 0 到 Thor 图发现的， SourceTree 注意 - sourceTree push 的时候如无法 auth 明明密码账号正确！解决 - 设置换 git 内核用 mac 本地的！！！\"]},\"997\":{\"h\":\"ShortKey\",\"t\":[\"cmd+shift+h 用户目录\",\"cmd+shift+. 显示隐藏文件\",\"cmd+ctrl+f 全屏\",\"cmd+opt+v 剪切\",\"⭐️ Command-I 显示简介 \",\"我推测 \\\"I\\\" 可能代表 \\\"Info\\\"，因为 \\\"Info\\\" 是「信息」的简写。因此，Command-I 可以被理解为「显示简介」或「显示信息」\",\"Shift+【 可以输出 「\"]},\"998\":{\"h\":\"Tips\",\"t\":[\"😭 TODO 软链？ ln -s 表示软链， XD：删掉本来目录的 base.yml ，把自己目录做好的 base.yml 软链到本来目录！\",\"对某段文字 Click Double 会自动选取系统认为的词组 Click Three Times 就会 check 这一整行\",\"不显示隐藏文件 command+shift+. 可以临时切换显示隐藏文件。\",\"使用以下方法永久设置（似乎对浏览器出发的文件选择器未生效）\",\"defaults write com.apple.finder AppleShowAllFiles -bool true # 显示隐藏文件 defaults write com.apple.finder AppleShowAllFiles -bool false # 不显示隐藏文件 killall Finder # 重启 Finder \",\"shell windows scroll 我的替代方案：用CMD+上下滚动，不用鼠标滚轮\",\"开了2个chrome窗口 macos如何快捷键切换 (cmd+`) 【现在用的很频繁】\",\"macmini连接一台4k分辨率显示器，在设置中设置显示器的缩放分辨率只会影响UI字体并不会影响真实的4k分辨率是吗\",\"是的，当您连接一台4K分辨率的显示器到Mac mini上时，您可以在系统设置中调整显示器的缩放分辨率。这将影响显示器上的UI元素（如菜单栏、窗口和图标）的大小和清晰度，但不会实际改变显示器的物理分辨率。\",\"Mac mini会输出其默认的分辨率（通常是显示器的原生分辨率），而您在系统设置中进行的缩放只会调整UI元素的大小，以适应更高或更低的分辨率。这意味着物理像素的数量不会改变，只是它们在屏幕上的显示大小会发生变化。\",\"如果您想要实际更改显示器的分辨率，您可以在系统设置中选择显示器的原生分辨率或其他支持的分辨率选项。这将直接影响物理像素的数量，以获得更高的清晰度和细节。注意，更高的分辨率可能需要更强大的图形处理能力，并可能导致图形性能下降。\",\"昨天去了王府井apm苹果店，和工作人员交流了一下，这个不是降分辨率，就是和win10一样只是调大了系统的字体（但是也不是完全一样，win10只是调节了字体，而macos是调节了字体，icon和窗口的大小）。在调节后的屏幕上会显示一个更低的分辨率，那个的意思是说现在的字体大小和更低分辨率的缺省字体一样的，正是这个不好的ui或者说系统提醒的这句话让大家有了误解。建议苹果可以在新版本中修改这句让人误解的话。\",\"作者：Peterwen 链接：https://www.zhihu.com/question/443961913/answer/1726069699 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\",\"Q：MySQL 服务自启动\",\"sudo vim /Library/LaunchDaemons/com.mysql.startup.plist 【没成功，不知道是否该转战brew】\",\"启动时间：LaunchAgents 目录中的 Launch Agents 是在用户登录时自动启动的，而 LaunchDaemons 目录中的 Launch Daemons 是在系统启动时自动启动的，不依赖于用户登录。\",\"运行权限：LaunchAgents 目录中的 Launch Agents 是以当前登录用户的身份运行的，仅对该用户有效。而 LaunchDaemons 目录中的 Launch Daemons 是以系统的管理员权限（root 用户）运行的，并对所有用户有效。【所以在 LaunchDaemons 权限必须是 Root 否则无法启动！！！chown root:wheel jetbrains.vmoptions.plist】\",\"这个文件目录类似 Windows 的startup\",\"目的：从官方网站下载的 MySQL 版本，并希望将其设置为 macOS 的自启动服务\",\"像MySQL这种服务得放LaunchDaemons里，像激活idea这种得放 LaunchAgents 里。。。注意权限是否够（然后我说得 lemon 软件看是否启动！！！设置里看不到）\",\"为什么Vue项目总是在1024端口启动？\",\"我猜你是Mac 用户～\",\"在mac os中，非root用户是无法使用小于1024的常用端口的。 如果小于1024端口，会从1024开始。\"]},\"999\":{\"h\":\"Mac Knowledge\",\"t\":[\"关闭 SIP\",\"针对 M 系列芯片，长按开机键进入到恢复模式，Terminal csrutil disable\",\"好像网上下的 app 打不开的话可以执行一个命令就可以打开了\",\"您提供的命令 sudo xattr -d com.apple.quarantine /Applications/Tiny\\\\ RDM.app 用于删除 /Applications/Tiny RDM.app 应用程序的扩展属性中的 com.apple.quarantine 标记。这个标记通常由 macOS 用于标识从互联网或其他不可信来源下载的应用程序，以便在首次运行时显示安全警告。\",\"通过运行该命令，您可以移除 Tiny RDM 应用程序的下载标记，以便在下次运行时不再显示安全警告。请确保您已经正确指定应用程序的路径，并在终端中以管理员权限（sudo）运行该命令。\",\"请注意，在执行此命令之前，您应该确认已经从可信的来源下载了 Tiny RDM 应用程序，并且信任该应用程序。如果您不确定应用程序的来源或是否应该删除下载标记，请谨慎操作或咨询相关的安全建议。\"]},\"1000\":{\"h\":\"Other\"},\"1001\":{\"h\":\"SQLServer\",\"t\":[\"使用Docker 运行 mcr.microsoft.com/azure-sql-edge 来使用\",\"Docker: 必须复杂密码\",\"docker run -e \\\"ACCEPT_EULA=1\\\" -e \\\"MSSQL_SA_PASSWORD=Aa59964360\\\" -e \\\"MSSQL_PID=Developer\\\" -e \\\"MSSQL_USER=SA\\\" -p 1433:1433 \\\\ -v /Users/xd/Documents/SoftwareConfiguration/Docker/SQL:/SQL --name SQLServer -d mcr.microsoft.com/azure-sql-edge \",\"SQLServer: 可以先运行第一行确定好路径 /var/opt/mssql/data/ 及其 scm7 名字\",\"RESTORE DATABASE [ZS_SCM] FROM DISK='/home/ZC_SCM0426002.BAK' WITH MOVE 'scm7' TO '/var/opt/mssql/data/ZS_SCM.mdf', MOVE 'scm7_log' TO '/var/opt/mssql/data/ZS_SCM_log.ldf'; \",\"ChenCheng's Personal Site\",\"昨天新的 MBP 终于到了，要从 0 开始配置成趁手的还是需要一些时间的，我总共花了 4 小时左右。在此记录下，希望对大家有所帮助，这可以算是「装了啥」的详细版。如果我基于这篇文章再来一遍，应该可以减少到 2 小时以下。但是，应该不会再来一次了，自己的电脑走 TimeMachine 就好了。\"]},\"1002\":{\"h\":\"安装 ClashX，你懂的\",\"t\":[\"略。\"]},\"1003\":{\"h\":\"安装 App 和 Cli 工具\",\"t\":[\"1、安装 HomeBrew 并用他安装 App 和 Cli 工具。App 可以在 homebrew-cask — Homebrew Formulae 里找有没有，Cli 工具可以在 homebrew-core — Homebrew Formulae 找有没有。\",\"# 先开代理，不然会很慢（依赖第一步） export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 # 安装 HomeBrew /bin/bash -c \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\\\" # 用 HomeBrew 安装 App，以下是我可以用 HomeBrew 安装的 App 列表（以字母排序，方便你查找） brew install --cask \\\\ 115browser \\\\ 1password \\\\ alfred \\\\ battery-buddy \\\\ coteditor \\\\ docker \\\\ eagle \\\\ espanso \\\\ figma \\\\ google-chrome \\\\ gas-mask \\\\ handbrake \\\\ iina \\\\ iterm2 \\\\ karabiner-elements \\\\ keepingyouawake \\\\ keycastr \\\\ licecap \\\\ microsoft-remote-desktop \\\\ obs \\\\ obsidian \\\\ qq \\\\ setapp \\\\ shottr \\\\ sogouinput \\\\ sourcetree \\\\ telegram \\\\ thor \\\\ usr-sse2-rdm \\\\ videofusion \\\\ visual-studio-code \\\\ wechat \\\\ webstorm \\\\ zerotier-one # 安装 Cli 工具，以下是我的（以字母排序，方便你查找） brew install \\\\ autojump \\\\ bat \\\\ cmatrix \\\\ commitzen \\\\ deno \\\\ diff-so-fancy \\\\ fd \\\\ ffmpeg \\\\ fzf \\\\ gh \\\\ git \\\\ httpie \\\\ hub \\\\ hyperfine \\\\ imagemagick \\\\ jq \\\\ lazygit \\\\ mkcert \\\\ nvm \\\\ pnpm \\\\ the_silver_searcher \\\\ tig \\\\ tldr \\\\ tree \\\\ ugit \\\\ wget \",\"2、用 SetApp 安装额外 App。\",\"Bartender\",\"CleanMyMac X\",\"CleanShot X\",\"DevUtils\",\"Downie\",\"Focus\",\"Sip\",\"RapidAPI\",\"Paste\",\"Yoink\",\"3、用 Mac App Store 安装额外 App。\",\"Bob\",\"Tot\",\"RunCat\",\"Infuse\",\"4、通过其他渠道安装额外 App。\",\"Flomo x Pake\",\"Flux\",\"Reeder（国区没有）\",\"PDF Expert\",\"uPic\",\"ChatGPT x Tauri\",\"阿里钉\"]},\"1004\":{\"h\":\"准备本地目录\",\"t\":[\"我在 ~/Documents 下建了两个目录（新电脑还没施工完成，这里还会补充更多目录），Code 和 SoftwareConfiguration，长这样。Code 用于存代码；SoftwareConfiguration 用于保存各种软件配置，我把 Alfred、Eagle 和 Espanso 的配置放在这里。\"]},\"1005\":{\"h\":\"配置 App\",\"t\":[\"按这个顺序会比较好。\",\"1、Karabiner-Elements\",\"参考 Karabiner-Element 配置 F19 键 - HackMD 。在 Karabiner-Elements complex_modifications rules 搜「Change caps_lock key」，import 后只保留一条和 F19 相关的，然后在命令行里编辑「~/.config/karabiner/karabiner.json」，把刚才那条规则的「caps_lock」换成「right_command」（两处）。这样你就把基本不会用到的「右⌘」废物利用变成了「F19」键，然后你的快捷键组合会多很多。\",\"如果你仔细看配置，会发现「F19」是由四个键「⌘⇧⌃⌥」组成的，在一些 App 的快捷键配置里你会看到四个键，不要奇怪，这也是他。\",\"2、Alfred\",\"做几个配置。1）开启 Powerpack，2）修改快捷键为刚才配的「F19」，3）把老电脑的 Alfred 配置复制到 ~/Documents/SoftwareConfiguration/Alfred 下，然后在「Advanced」里修改配置目录指向他，你的 Workflow 就全回来了，4）「Features > Web Bookmarks」里记得把「Google Chrome Bookmarks」选上，这样就可以用 Alfred 模糊搜 Chrome 书签，用于快速打开网站。\",\"3、iTerm2 和 zsh\",\"先配置 iTerm2，这是效果图。1）Appearance 里，General 的 Theme 选「Minimal」，Pane 里不要「Show per-pane title bar with split panes」，Dimming 里选上第一和第三个，2）Profiles 里，Working Directory 里选「Reuse previous session's directory」。\",\"安装 zsh 和 starship，starship 是 rust 写的 prompt 工具，极快。\",\"sh -c \\\"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\\\" omz update source ~/.zshrc # starship 是 rust 写的 prompt 工具，极快 brew install starship echo 'eval \\\"$(starship init zsh)\\\"' >> ~/.zshrc \",\"安装 zsh 的插件，我个人用到了 zsh-autosuggestions、zsh-completions 和 fast-syntax-highlighting。\",\"git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting \",\"配置 ~/.zshrc，我的配置如下（略做删减）。这里有些 alias 是以 , 开头的，因为这样你敲 , 然后按「Tab」就可以看到所有自己定义的命令了。为啥有些没有加 , ？历史原因… 因为其他都用习惯了就不改了。\",\"# Disable brew auto update export HOMEBREW_NO_AUTO_UPDATE=1 export ZSH=\\\"$HOME/.oh-my-zsh\\\" plugins=( # 不会 git 插件，因为和我的 alias 设置冲突 # git zsh-completions zsh-autosuggestions fast-syntax-highlighting ) # Alias alias ,ms=\\\"%PATH/TO/MY/SCRIPT%\\\" alias ,ip=\\\"ipconfig getifaddr en0\\\" alias ,sshconfig=\\\"vim ~/.ssh/config\\\" alias ,gitconfig=\\\"vim ~/.gitconfig\\\" alias b=\\\",ms branch\\\" alias umi=\\\"/Users/%MY_USERNAME%/Documents/Code/github.com/umijs/umi/packages/umi/bin/umi.js\\\" # chore alias br=\\\"bun run\\\" alias c='code .' alias i='webstorm .' alias cdtmp='cd `mktemp -d /tmp/sorrycc-XXXXXX`' alias pi=\\\"echo 'Pinging Baidu' && ping www.baidu.com\\\" alias ip=\\\"ipconfig getifaddr en0 && ipconfig getifaddr en1\\\" alias cip=\\\"curl cip.cc\\\" alias qr='qrcode-terminal' alias ee=\\\"stree\\\" alias hosts=\\\"vi /etc/hosts\\\" ## system alias showFiles=\\\"defaults write com.apple.finder AppleShowAllFiles YES && killall Finder\\\" alias hideFiles=\\\"defaults write com.apple.finder AppleShowAllFiles NO && killall Finder\\\" # cd alias ..='cd ../' alias ...='cd ../../' alias ..l.='cd ../../ && ll' alias ....='cd ../../../' alias ~=\\\"cd ~\\\" alias -- -=\\\"cd -\\\" alias ll='ls -alhG' alias ls='ls -G' # git alias git=hub alias gp=\\\"git push\\\" alias gt=\\\"git status -sb\\\" alias ga=\\\"git add .\\\" alias gc=\\\"git commit -av\\\" alias gcr=\\\"git checkout master && git fetch && git rebase\\\" alias gclean=\\\"git reset --hard && git clean -df\\\" alias grebase=\\\"git fetch && git rebase -i\\\" ## timelapse ## ref: https://www.reddit.com/r/mac/comments/wshn4/another_way_to_timelapse_record_your_mac_screen/ function record() { cd ~/screencapture/jpg; RES_WIDTH=$(/usr/sbin/system_profiler SPDisplaysDataType | grep Resolution); RES_WIDTH=(${RES_WIDTH:22:4}); RES_WIDTH=$((RES_WIDTH/2)); while : NOW=$(date +\\\"%y%m%d%H%M%S\\\"); do screencapture -C -t jpg -x ~/screencapture/jpg/$NOW.jpg; sleep 7 & pid=$! NOW=$(date +\\\"%y%m%d%H%M%S\\\"); wait $pid done } function movie() { NOW=$(date +\\\"%y%m%d%H%M%S\\\"); cd ~/screencapture/jpg; cnt=0 rm -rf .DS_Store; for file in * do if [ -f \\\"$file\\\" ] ; then ext=${file##*.} printf -v pad \\\"%05d\\\" \\\"$cnt\\\" mv \\\"$file\\\" \\\"${pad}.${ext}\\\" cnt=$(( $cnt + 1 )) fi done; rm -rf 00000.jpg; for pic in *.jpg; do convert $pic -resize 50% $pic; done; ffmpeg -r 24 -i %05d.jpg -b 20000k ~/screencapture/mov/$USER-$NOW.mov; rm -rf ./*.jpg; } function pfd() { osascript 2> /dev/null <<EOF tell application \\\"Finder\\\" return POSIX path of (target of window 1 as alias) end tell EOF } function mcd { mkdir $1 && cd $1; } function cdf() { cd \\\"$(pfd)\\\" } function ,touch { mkdir -p \\\"$(dirname \\\"$1\\\")\\\" && touch \\\"$1\\\" } function ,take() { mkdir -p \\\"$(dirname \\\"$1\\\")\\\" && touch \\\"$1\\\" && take \\\"$(dirname \\\"$1\\\")\\\" } # load zsh-completions autoload -U compinit && compinit # use nvm source /opt/homebrew/opt/nvm/nvm.sh # autojump source /opt/homebrew/etc/profile.d/autojump.sh # use starship theme (needs to be at the end) eval \\\"$(starship init zsh)\\\" # 必须在 plugins 之后 source $ZSH/oh-my-zsh.sh # bun completions [ -s \\\"/Users/chencheng/.bun/_bun\\\" ] && source \\\"/Users/chencheng/.bun/_bun\\\" # bun export BUN_INSTALL=\\\"$HOME/.bun\\\" export PATH=\\\"$BUN_INSTALL/bin:$PATH\\\" # pnpm export PNPM_HOME=\\\"/Users/chencheng/Library/pnpm\\\" export PATH=\\\"$PNPM_HOME:$PATH\\\" \",\"4、SSH\",\"mkdir ~/.ssh # file name 用 github，passphrase 随意 ssh-keygen -t ed25519 -C \\\"github\\\" # 编辑配置，内容如下 touch ~/.ssh/config Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/github # 添加到系统 keychain ssh-add --apple-use-keychain ~/.ssh/github # 添加 public key 到 github gh auth login gh ssh-key add ~/.ssh/github.pub -t github \",\"5、额外的命令行工具：Bun 和 Projj\",\"安装 Bun。我主要是用他的 run 命令，极快，上面也有别名 br，比如执行比如 br dev 即 npm run dev。\",\"curl -fsSL https://bun.sh/install | bash \",\"安装 PROJJ，我用他来管理 Code 下的仓库，按「domain/group/repo」这样组织，找起来会比较容易。\",\"pnpm i projj projj-hooks -g projj init \",\"然后编辑 ~/.projj/config.json，我的配置如下（记得把 name 和邮箱改成自己的）。\",\"{ \\\"base\\\": [ \\\"/Users/%YOUR_USERNAME%/Documents/Code\\\" ], \\\"hooks\\\": { \\\"postadd\\\": \\\"projj_git_config_user\\\" }, \\\"postadd\\\": { \\\"github.com\\\": { \\\"name\\\": \\\"sorrycc\\\", \\\"email\\\": \\\"sorrycc@gmail.com\\\" } }, \\\"alias\\\": { \\\"github://\\\": \\\"https://github.com/\\\" } } \",\"然后就可以愉快地用 PROJJ 添加项目了，比如。\",\"projj add git@github.com:umijs/umi.git \",\"6、Espanso\",\"我在 ~/Documents/SoftwareConfiguration/Espanso 下建了个 base.yml，内容如下（已删除个人敏感信息），并软链到 Espanso 原来的配置文件夹里。\",\"matches: # misc - trigger: \\\";>>\\\" replace: ➡ - trigger: \\\";vv\\\" replace: ⬇ - trigger: \\\";^^\\\" replace: ⬆ - trigger: \\\";<<\\\" replace: ⬅ # life - trigger: \\\";mobi\\\" replace: 我的手机号 - trigger: \\\";mail\\\" replace: 我的邮箱 - trigger: \\\";addr\\\" replace: 我的家庭住址 - trigger: \\\";officeAddr\\\" replace: 公司地址 # faq - trigger: \\\";chongt\\\" replace: 冲突了，merge 下 master。 # code - trigger: \\\";log\\\" replace: console.log($|$) - trigger: \\\";delay\\\" replace: const delay = (ms) => new Promise((res) => setTimeout(res, ms)); # mac symbols - trigger: \\\":cmd\\\" replace: \\\"⌘\\\" - trigger: \\\":shift\\\" replace: \\\"⇧\\\" - trigger: \\\":ctrl\\\" replace: \\\"⌃\\\" - trigger: \\\":alt\\\" replace: \\\"⌥\\\" - trigger: \\\":opt\\\" replace: \\\"⌥\\\" - trigger: \\\":left\\\" replace: \\\"←\\\" - trigger: \\\":right\\\" replace: \\\"→\\\" - trigger: \\\":up\\\" replace: \\\"↑\\\" - trigger: \\\":down\\\" replace: \\\"↓\\\" - trigger: \\\":caps_lock\\\" replace: \\\"⇪\\\" - trigger: \\\":esc\\\" replace: \\\"⎋\\\" - trigger: \\\":eject\\\" replace: \\\"⏏\\\" - trigger: \\\":return\\\" replace: \\\"↵\\\" - trigger: \\\":enter\\\" replace: \\\"⌅\\\" - trigger: \\\":tab\\\" replace: \\\"⇥\\\" - trigger: \\\":backtab\\\" replace: \\\"⇤\\\" - trigger: \\\":pgup\\\" replace: \\\"⇞\\\" - trigger: \\\":pgdown\\\" replace: \\\"⇟\\\" - trigger: \\\":home\\\" replace: \\\"↖\\\" - trigger: \\\":end\\\" replace: \\\"↘\\\" - trigger: \\\":space\\\" replace: \\\"␣\\\" - trigger: \\\":del\\\" replace: \\\"⌫\\\" - trigger: \\\":fdel\\\" replace: \\\"⌦\\\" \",\"7、Thor\",\"让你可以一键启动、显示或隐藏某个 App，对我来说是效率神器。但有时太快也不好，会让你无意间地快速切过去，比如钉钉、Reeder 和 Telegram 我后来就把他们去掉了。\",\"我的配置见图，快捷键供参考。\",\"8、安装字体\",\"编程字体我用 Monolisa，之前还用过 Source Code Pro、Dank Mono 和 Operator Mono。此外我还安装了霞鹜文楷和阿里普惠体，霞鹜文楷我用在了语雀等文档站和 Obsidian 里。\",\"9、WebStorm\",\"简单几步配置即可。1）安装 Github Copilot 和 Inspection Lens 插件，2）配置 Color Schema 为「Intellij Light」，3）配置 Font 为 MonoLisa，同时 Size 为 20，大点对眼睛好，哈哈。\",\"10、VSCode\",\"辅助编辑器，施工中。\",\"目前包含的插件如下。\",\"dbaeumer.vscode-eslint esbenp.prettier-vscode GitHub.copilot isudox.vscode-jetbrains-keybindings kettanaito.nako styled-components.vscode-styled-components unifiedjs.vscode-mdx usernamehw.errorlens \",\"主题是 Nako - Visual Studio Marketplace。\",\"配置如下。\",\"。 \",\"11、Git\",\"先配 name 和 email。\",\"git config --global user.name \\\"Your Name\\\" git config --global user.email \\\"you@your-domain.com\\\" \",\"再执行这两条命令。\",\"git config --global --add push.default current git config --global --add push.autoSetupRemote true \",\"你会收获两个好处。1）不需要「git push origin xxx」，只要「git push」，2）再也不会遇到「no upstream branch」的报错，也不需要「git push --set-upstream origin test && git push」。因为我们执行 git push 的大部分场景都是 push 到同名的 remote branch。来源是 Auto setup remote branch and never again see an error about the missing upstream | pawelgrzybek.com。\",\"再修改 ~/.gitignore_global，加入和你 IDE 相关的 ignore 配置。我会把 .idea 加进去，这是和你相关的专有配置，如果给其他用 VSCode 的作者的项目提交时，都加上 .idea 的 .gitignore 配置，其实并不太礼貌。反之，VSCode 或其他编辑器工具的用户也要加上自己的。\",\"*~ .DS_Store .idea \",\"12、NVM 和 Node\",\"nvm install 18 node -v \",\"13、Eagle\",\"Eagle 的库我保存在 ~/Documents/SoftwareConfiguration/Eagle 下。\",\"14、Focus\",\"要稍微做下配置。1）添加 Block App，我加了钉钉、Reeder，2）Block Website 里我把内置的全删了，留了这些，3）Block App 的配置要选「强制退出」，「隐藏」的模式在 Mac 13.2 下有问题，不会生效或者表现奇怪。\",\"15、Bob。\",\"我的快捷键是「F19+A」划词翻译，「F19+S」截图翻译。插件装了 bob-plugin-deeplx 和 bobplugin-google-translate。文本翻译我加了 Deepl X、有道、阿里、金山词霸，文本识别我用腾讯 OCR。\",\"16、Rectangle。\",\"删了所有快捷键，只保留两个。「F19+C」居中，「F19+M」放最大。\",\"17、uPic\",\"用了自定义图床，略。\",\"18、Paste\",\"我的快捷键是「⌘⌥C」。配置里选上「Always paste as Plain Text」，去掉「Enable sound effects」。\",\"19、Reeder\",\"两个改动。在 Shortcuts 配置里，把「Mark All as Read…」的快捷键改成「⇧A」，然后去掉「Ask before marking all as read」。\",\"20、Google Chrome\",\"登录 Google 账号后所有东西就都同步过来了，除了 Tampermonkey 的自定义脚本。但简单 Google 后也找到了办法，我参考 extract_tampermonkey_script.py · GitHub 把 /Users/%YOUR_USERNAME%/Library/Application\\\\ Support/Google/Chrome/Default/Local\\\\ Extension\\\\ Settings/dhdgffkkebhmkfjojejmpbldmpobfkfo 这个文件夹下的内容复制到新电脑后就能用了。\",\"21、Telegram\",\"登录时死活登不上，开了代理才行。\",\"22、Obsidian\",\"我先试了用 Obsidian Sync 直接同步出本地文档库，但发现只包含文档，不包含插件。于是改成先用 git clone 完整仓库，再关联到 Obsidian Sync 的远程文档库。用 Git 做同步时有个要注意的是，.obsidian 目录下的 workspace 相关的 3 个文件不要提交，否则会很容易冲突。\",\"23、SourceTree\",\"配置中「Git」Tab 下选「Use System Git」，否则会报找不到 git 的错误。\",\"24、iA Writer\",\"把所有 Markdown 文件改成用 iA Writer 打开，因为 iA Writer 又轻又好看。然后我在「系统设置 > Keyboard > Keyboard Shortcuts > App Shortcuts」中增加了一些针对 IA Writer 的快捷键配置。\",\"Show Preview「⌘P」\",\"Hide Preview「⌘P」\",\"Move Line Up「⌘⇧↑」\",\"Move Line Down「⌘⇧↓」\",\"Strikethrough「⌘⇧R」\",\"25、Shottr\",\"快捷键里把所有都删了，只保留两个。Area screenshot 用「F19 + 7」，Scrolling screenshot 用「F19 + 8」。\",\"26、Sip\",\"Show Picker 的快捷键是「F19 + 2」。\",\"27、CleanShotX\",\"Capture Area 的快捷键是「F19 + 6」。\"]},\"1006\":{\"h\":\"系统设置\",\"t\":[\"1、General。1）Default Web Browser 用「Google Chrome」，2）Language & Region 里，把 First day of week 改成「Monday」，这样你的日历就会从周一开始了。\",\"2、Siri。直接禁掉。\",\"3、Trackpad。Scroll direction：Natural 去掉。\",\"4、Keyboard。1）Keyboard 里把 Key Repeat 调到「Fast」，把 Delay Util Repeat 调到「Short」，需要一点时间适应，适应后会感受到光标快速移动带来的效率提升，2）Text 里 use \\\" for double quotes，use ' for single quotes，然后把其他都禁掉，不需要系统帮忙改，基本都是帮倒忙的，3）Shortcuts 里，Mission Control 用「⌥A」,Application windows 用「⌥S」，Show Desktop 用「⌥D」，Input Sources 的 Select Previous 用 「⌘Space」，Screenshots 里 Save picture of selected area as a file 用「F19 + 3」，Copy picture of selected area to the clipboard 用「F19 + 4」，4）输入法删除默认的拼音改用搜狗拼音，登录后可以在不同电脑之间同步词库，搜狗输入法的皮肤我用的Matrix 矩阵。\",\"5、Spotlight。只开 Applications、Bookmarks & History、Documents、Folders、System Preferences。\",\"6、Mission Control。把 Hot Corners 里的全部关掉，不需要，因为有 Thor 了，可以更快切除应用。\",\"7、Sharing。只留「AirPlay Receiver」即可，同时可以改下 computer name。\",\"8、Security & Privacy。把「Use Apple Watch to unlock」打开。\",\"9、Notification。不必要的全关掉，我只开了 Calendar、Find By、Reminders 和 Wallet。\",\"10、Touch ID and Password。开启用 Apple Watch 解锁。\",\"11、执行 defaults write -g NSWindowShouldDragOnGesture -bool true，然后就可以按住「⌘+⌃」然后鼠标点击任意地方拖动窗口了。来源 Moving a macOS window by clicking anywhere on it (like on Linux) · mmazzarolo.com，但是在 MacOS 13 下似乎失效了。\"]},\"1007\":{\"h\":\"参考\",\"t\":[\"Mac Setup for Web Development 2023\",\"My 2021 New Mac Setup\",\"ChenCheng\"]},\"1008\":{\"h\":\"Maven\",\"t\":[\"鱼皮这篇讲的细：https://mp.weixin.qq.com/s/mOFjOVYrM_b9I2UlNgeGxg\"]},\"1009\":{\"h\":\"\",\"t\":[\"image-20221017102235784\",\"设定一个空值将始终从仓库中获取，不从本地路径获取，如<relativePath/> 看这句就很明了了！这里就是去本地../bokeerp路径去拿这个pom文件 Maven parent.relativePath 默认值为../pom.xml 查找顺序：relativePath元素中的地址–本地仓库–远程仓库 \",\"Maven 寻找父模块pom.xml 的顺序如下：\",\" (1) first in the reactor of currently building projects 这里一个maven概念 反应堆（reactor ）， 意思就是先从工程里面有依赖相关的模块中找你引入的 parent 的pom.xml， (2) then in this location on the filesystem 然后从 你定义的 <relativePath > 路径中找， 当然你如果只是 / 即空值，则跳过该步骤， 默认值 ../pom.xml 则是从上级目录中找啦。 (3) then the local repository 这个就不说了，如果 （1） （2） 步骤没有则从 本地仓库找啦。 (4) and lastly in the remote repo 这个还用说吗，上面都找不到了，最后只能从远程仓库找啦，再找不到就报错给你看 一般新建 Spring Boot 工程，默认是 <relativePath /> <!-- lookup parent from repository --> ，意思就是不会从上层目录寻找。会直接先从 local repository，如果没有则会从 remote repo 寻找，如果也没有，则报错。 \"]},\"1010\":{\"h\":\"\",\"t\":[\"场景：我发现引入了data-redis，也要引入commons-pool2 不然启动报错\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-pool2</artifactId> </dependency> \",\"原因：因为 spring-boot-starter-data-redis 下面的 lettuce-core\",\"<dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-pool2</artifactId> <version>2.8.1</version> <scope>compile</scope> <optional>true</optional> </dependency> \",\"chatgpt: 在 Maven 的 pom.xml 文件中，可以使用 <optional> 标签来指定一个依赖是否是可选的\",\"这样的设置意味着，当这个依赖被其他模块引用时，它不会自动传递给这些模块。也就是说，如果一个模块引用了这个依赖，但是没有显式声明它，那么这个依赖不会被自动包含在该模块的依赖列表中。\",\"使用 <optional> 标签可以有效地控制依赖的传递性，避免不必要的依赖冲突和版本冲突。例如，如果一个项目需要使用某个第三方库的某个功能，但是这个库又依赖于另外一个库，而这个库和项目中的其他依赖产生了冲突，就可以将这个库设置为可选依赖，只在需要时显式引入，避免不必要的冲突。\",\"另外，值得注意的是，当一个依赖被设置为可选依赖时，它的传递性也会被取消。这意味着，如果这个依赖还依赖了其他库，这些库也不会自动传递给项目中的其他模块。如果需要使用这些库，也需要显式引入它们。\",\"总之，使用 <optional> 标签可以控制依赖的传递性，避免不必要的依赖冲突和版本冲突，但是需要注意，它的传递性也会被取消，需要手动处理相关的依赖。\",\"Q: 2.3.12.RELEASE版本的springboot引入spring-boot-starter-data-redis为什么还需要显式的引入commons-pool2才能正常启动项目\",\"在 Spring Boot 2.3.12.RELEASE 版本中，spring-boot-starter-data-redis 依赖中的 lettuce-core 版本为 5.3.2.RELEASE，它自带了 commons-pool2 依赖。但是在这个版本的 Spring Boot 中，commons-pool2 的依赖是以 <optional>true</optional> 的方式声明的，这意味着在默认情况下不会被引入。\",\"如果你不显式地引入 commons-pool2 的依赖，而是只依赖于 spring-boot-starter-data-redis，那么在启动应用程序时，就会出现类似于“java.lang.NoClassDefFoundError: org/apache/commons/pool2/impl/GenericObjectPoolConfig”的错误，因为缺少了 commons-pool2 的依赖。\",\"为了解决这个问题，你需要在你的 pom.xml 文件中显式地引入 commons-pool2 的依赖，这样它才会被正确地加载。\",\"​\"]},\"1011\":{\"h\":\"打包jar指定名字\",\"t\":[\"<build> <finalName>webjava8</finalName> \"]},\"1012\":{\"h\":\"dependency scope\",\"t\":[\"XD: 我理解很多module的项目，其中一个module引入了mybatis-plus-boot-starter。那么其他module就算用到了它也只要引入的时候<scope>provided</scope>一下。避免Maven打包臃肿？\",\"Bingo：\",\"嗯，你的理解是正确的！在一个多模块项目中，如果只有一个模块需要使用mybatis-plus-boot-starter，而其他模块也需要使用它提供的功能，你可以通过在其他模块中将依赖的作用域设置为<scope>provided</scope>来避免Maven打包结果臃肿。\",\"通过将依赖的作用域设置为provided，Maven在编译和测试阶段会将依赖包含在类路径中，以便在编译代码和执行测试时使用。但在部署和运行阶段，Maven会将这些依赖排除在最终的构建结果中。\",\"这样做的好处是，避免了将重复的依赖打包到每个模块中，减小了最终构建结果的大小。同时，由于mybatis-plus-boot-starter依赖通常是由一个模块来提供运行时环境，其他模块可以依赖于该模块来获取mybatis-plus-boot-starter的功能，而不需要自己打包这些依赖。\",\"需要注意的是，这种使用方式需要确保在部署和运行时提供正确的运行时环境，以便其他模块能够正常使用mybatis-plus-boot-starter提供的功能。\",\"当把Maven中的<scope>provided</scope>应用于一个依赖时，它代表着你期望该依赖在运行时环境中被提供，比如Web容器或应用服务器。简而言之，它告诉Maven在编译和打包项目时不需要将这个依赖包含进来，因为它将在运行时环境中被提供。\",\"这种依赖通常是一些容器或框架提供的，比如Servlet API或Java EE容器的实现。它们已经存在于运行时环境中，不需要在你的应用程序中显式地包含它们。\",\"举个例子，如果你正在开发一个基于Java EE的Web应用程序，并且使用了Servlet API，你可以将Servlet API作为一个provided依赖。这样，Maven在编译和打包你的应用程序时不会包含Servlet API的jar文件，因为它将在Java EE容器中提供。\",\"Q: 构建和打包项目时为什么要排除MyBatis-Plus框架，但是项目代码又要用\",\"A: 哦，我明白你的疑惑了。在构建和打包项目时排除MyBatis-Plus框架，但又在项目代码中使用它，通常是出于以下几个原因：\",\"减小部署包的大小： MyBatis-Plus框架是一个较大的依赖，它包含了许多功能和类库。如果将MyBatis-Plus框架打包到部署包中，会增加部署包的大小。通过将其排除在构建和打包过程之外，可以减小最终部署包的大小，提高部署效率。\",\"运行时环境提供依赖： MyBatis-Plus框架通常是作为Java应用程序的依赖库使用的，而不是作为独立运行的应用程序。运行时环境（如Java EE容器）通常会提供MyBatis-Plus框架的依赖。因此，在构建和打包过程中排除MyBatis-Plus框架，可以依赖运行时环境提供的版本，避免冗余的依赖。\",\"版本一致性控制： 通过排除MyBatis-Plus框架的构建和打包过程，你可以更好地控制所使用的框架版本。这样，你可以根据项目需求选择特定的版本，并确保项目代码与该版本兼容。\",\"需要注意的是，在项目代码中使用MyBatis-Plus框架时，你需要确保项目的依赖管理正确配置，以便在编译和运行时引入MyBatis-Plus框架。你可以在项目的构建脚本（如Maven的pom.xml文件）中添加MyBatis-Plus框架的依赖，并确保它们在编译和运行时可用。\",\"Q: mybatis-plus-boot-starter为什么能使用，使打包不出问题\",\"嗯，mybatis-plus-boot-starter是一个用于集成MyBatis-Plus框架的Spring Boot Starter。它已经针对Spring Boot应用程序进行了特殊处理，使得在使用时可以正常打包和部署，而不会出现问题。\",\"这是因为mybatis-plus-boot-starter内部已经配置了Spring Boot的自动配置和依赖解析。它会自动检测和加载所需的依赖项，并在应用程序启动时进行适当的配置。这意味着，即使使用了排除了mybatis-plus-boot-starter的依赖，Spring Boot仍然能够正确地加载和使用MyBatis-Plus框架。\",\"在使用mybatis-plus-boot-starter时，你可以将应用于其他与运行时环境相关的依赖，例如Servlet API、JSP API等。这样，这些依赖将由运行时环境提供，并不会被打包到最终的构建结果中。\",\"需要注意的是，尽管mybatis-plus-boot-starter在使用时可以正常工作，但你仍然需要确保在部署和运行时，适当的运行时环境提供了MyBatis-Plus框架所\",\"公司Jar包 maven download source失败..判断依据：druid pom有以下两个标签，公司的没有\",\"检查依赖项的 POM 文件：在 Maven 项目中，每个依赖项都有一个对应的 POM（Project Object Model）文件。你可以查看该依赖项的 POM 文件，查找是否有指定源码的相关配置。具体来说，检查 <build> 部分或 <plugins> 部分是否有配置相关的插件或属性来下载源码。\"]},\"1013\":{\"h\":\"\",\"t\":[\"场景：\",\"POM File： <!-- 由于这里Maven Remote库用的是http方式，高版本的Maven好像只支持访问https 1.降低maven版本 现在的版本过高 2.将镜像仓库的地址改成https类型的; 3.如果以上两个都不合适可以更改maven中mirrors的配置 使它支持http的地址;--> <repository> <id>yigo</id> <url>http://dev.bokesoft.com:28089/nexus/content/groups/yigo-releases/</url> <snapshots> <enabled>false</enabled> </snapshots> </repository> \",\"解决： setting.xml 中加\",\"<mirror> <id>insecure-repo</id> <mirrorOf>external:http:*</mirrorOf> <url>http://ip:port/uri/</url> <blocked>false</blocked> </mirror> -----------即----------- <mirror> <id>insecure-repo</id> <mirrorOf>external:http:*</mirrorOf> <url>http://dev.bokesoft.com:28089/nexus/content/groups/yigo-releases/</url> <blocked>false</blocked> </mirror> \"]},\"1014\":{\"h\":\"maven项目pom文件 和 setting文件都有那个标签repository。是不是这两个文件作用一样\",\"t\":[\"不，POM文件和settings文件中的<repository>标签具有不同的作用。\",\"在Maven项目中，POM（Project Object Model）文件是项目的核心描述文件，它定义了项目的基本信息、依赖项、构建配置等。POM文件中的<repository>标签用于定义项目的仓库配置。仓库是Maven用于下载和管理项目依赖项的地方。通过在POM文件中定义<repository>标签，您可以指定要使用的仓库的位置、URL和其他相关信息。\",\"另一方面，settings文件是Maven的全局配置文件，它位于Maven安装目录下的conf文件夹中，或者位于用户的.m2文件夹中。settings文件中的<repository>标签用于配置全局的仓库设置，这些设置将应用于所有Maven项目。通过设置文件中的<repository>标签，您可以配置Maven使用的默认仓库、镜像仓库、身份验证等。\",\"因此，虽然POM文件和settings文件中的<repository>标签都涉及仓库配置，但它们的作用范围和使用方式不同。POM文件中的<repository>标签用于项目级别的仓库配置，而settings文件中的<repository>标签用于全局级别的仓库配置。\"]},\"1015\":{\"h\":\"Regular Expression\",\"t\":[\"正则很多地方都可以用，各类文本编辑器！处理文本等工作效率 up XD：受益匪浅，就在title网站去学！！！\"]},\"1016\":{\"h\":\"1.匹配空行\",\"t\":[\"^\\\\s*$ （* 指空格出现 0 次或多次）-> * 匹配0个或更多前面的标记。\",\"1）除了常使用 ^ 另外 $ 也可以熟练用起来\",\"2）正则匹配0次必须加星\"]},\"1017\":{\"h\":\"2.* / + 使用错误\",\"t\":[\"做 LeetCode 发现\",\"\\\"the sky is blue\\\".split(\\\"\\\\s*\\\"); //以 Char 为单位\",\"警告:表达式可以返回空匹配项，也可以匹配 在某些用例中是无限的。 有15个字符没有找到匹配项，包括14个空匹配项(*不显示)。 插入点:第0行，col 15，索引15\",\"\\\"the sky is blue\\\".split(\\\"\\\\s+\\\"); //以 Word 为单位\"]},\"1018\":{\"h\":\"> 非集\",\"t\":[\"匹配不在集合中的任何字符。\",\"场景：我匹每行开头不是 a 的 ^[^a]\"]},\"1019\":{\"h\":\"> capturing group\",\"t\":[\"场景：sublime中 我个人频繁用到，替换东西时候又得带上原先的。。。$1..$n 可以复用 find 里被()包裹的组\",\"把多个标记分在同一组并创建一个捕获分组，用来创建子串或引用。\",\"Target - hahahahaa hah!\",\"Find：(ha)+\",\"Replace：$1\",\"突然发现 Java 正则也可以用复用这个组的概念：\",\"public static void main(String[] args) { String input = \\\"#0:%洪都%;#1:%洪都%;#2:%洪都%;#3:0;#4:150;\\\"; // 定义正则表达式匹配模式 String regex = \\\"#\\\\\\\\d+:(.*?);\\\"; // 创建 Pattern 对象 Pattern pattern = Pattern.compile(regex); // 创建 Matcher 对象 Matcher matcher = pattern.matcher(input); // 创建集合存储提取的结果 List<String> partsList = new ArrayList<>(); // 迭代匹配结果并提取部分内容 while (matcher.find()) { String part = matcher.group(1); partsList.add(part); } // 打印提取的结果 for (String part : partsList) { System.out.println(\\\"提取的部分内容: \\\" + part); } } \"]},\"1020\":{\"h\":\"> lzay(?)\",\"t\":[\"场景：[\\\\s\\\\S]*? World xxxxxWorld，这样只会匹配到前面\",\"令前面的标记变慵懒，让其尽可能少地匹配字符。默认情况下，量词是贪婪的会尽可能多地匹配字符。\",\"b\\\\w+? \",\"b *be* *be*e *be*er *be*ers \"]},\"1021\":{\"h\":\"\",\"t\":[\"匹配主表达式后面的组而不将其包含在结果中。 (?=ABC)\",\"指定主表达式后无法匹配的组（如果匹配，则结果将被丢弃）。(?!ABC)\",\"2024 再次使用，目的 -> 匹配最小长度满足条件的值\",\"错误使用：<DataBinding[\\\\S\\\\s]*?ColumnKey=\\\"StartBusinessDate\\\"\",\"文本：\",\"<DataBinding asdasd <DataBinding TableKey=\\\"DepositCollectHead\\\" ColumnKey=\\\"StartBusinessDate\\\"/> \",\"需要改为：<DataBinding(?:(?!<\\\\/DataBinding>).)*?ColumnKey=\\\"StartBusinessDate\\\"\\\\/> //也是错的！不知道怎么处理\",\"----------------还未理解透彻\"]},\"1022\":{\"h\":\"自己再研究\",\"t\":[\"发现：<DataBinding(.*)ColumnKey=\\\"StartBusinessDate\\\"\\\\/> 就行\",\"其实就是区分 [\\\\S\\\\s]* 和 .* 的区分！！！！ 前者包括换行符，后者不包只匹一行\",\"如果需要匹配跨行文本或保留换行符，则使用 \\\"[\\\\S\\\\s]\\\" 可能更合适。而当只需匹配单行文本时，使用 \\\".\\\" 可能更简洁和直观。\",\"(?=ABC)\",\"\\\\d(?=px) \",\"1pt 2px 3em 4px\",\"(?!ABC)\",\"\\\\d(?!px) \",\"1pt 2px 3em 4px\"]},\"1023\":{\"h\":\"Other\",\"t\":[\"/：代表正则表达式的头和尾，所以很多时候需要转义再用\",\"其实就是区分 [\\\\S\\\\s]* 和 .* 的区分！！！！ 前者包括换行符，后者不包只匹一行 【看上面场景案例(?=ABC)】\",\"如果需要匹配跨行文本或保留换行符，则使用 \\\"[\\\\S\\\\s]\\\" 可能更合适。而当只需匹配单行文本时，使用 \\\".\\\" 可能更简洁和直观。\"]},\"1024\":{\"h\":\"WTG\",\"t\":[\"自己折腾 WTG 我觉得需要记录的\"]},\"1025\":{\"h\":\"* 隐藏系统磁盘\",\"t\":[\"看萝卜头博客，我放在ali了 有批处理解决\"]},\"1026\":{\"h\":\"* WTG装PE & PE重装系统\",\"t\":[\"这个踩坑严重。记住WTG里面装WEPE看 ali 也有问题（进不去WEPE好像）装的时候可能得取消一个勾选\"]},\"1027\":{\"h\":\"重装系统坑\",\"t\":[\"场景：使用常规方法，装载装不上（Windows 安装程序：我们无法创建新的分区，也找不到现有的分区。有关详细信息，请参阅安装日志文件。）\",\"解决：用WEPE自带安装器，在安装之前需要先分好区\"]},\"1028\":{\"h\":\"Windows\"},\"1029\":{\"h\":\"win+ppause 看电脑系统参数\"},\"1030\":{\"h\":\"Win+K 打开「连接」设备 快速连耳机 （暂时联想记忆为Link）\",\"t\":[\"recent\",\"regedit\"]},\"1031\":{\"h\":\"calc mspaint notepad\"},\"1032\":{\"h\":\"ctrl+D 删除文件\"},\"1033\":{\"h\":\"win+P设置屏幕投影功能\"},\"1034\":{\"h\":\"在文本输入过程中，键入Windows徽标键 + 。 (句点) . 将显示表情符号键盘。\"},\"1035\":{\"h\":\"Ctrl+Alt+Tab 打开切换界面，可以使用鼠标在打开的项目之间切换\"},\"1036\":{\"h\":\"Alt+Esc 其实类似 Alt + Tab ，不过它是让我们在没有最小化的窗口之间快速切换；按第一次打开的顺序切换【自我感觉少一步视图，更快】\",\"t\":[\"Alt+Esc键快速切换打开程序和Alt+Tab切换有两处不同，其他效果都是一样的。不同之一就是Alt+Esc没有缩略图预览，它是按照从右向左的顺序依次切换。\",\"当您只打开两个或三个窗口时， Alt+效果最好。Esc如果您打开的窗口超过三个，我们建议使用Alt+Tab或Windows key+Tab在打开的窗口之间切换。\"]},\"1037\":{\"h\":\"，它就会默认帮你截取当前窗口，而不是当前屏幕。这在一些媒体图片制作和屏幕截取中，非常方便。\",\"t\":[\"win+. / win+; emoji\",\"ctrl+esc 开始界面\",\"Win+1/2..会跳到下面任务栏指定的应用 偶然发现！！！\",\"ctrl + home 可以到头，而home只能到光标在这行行头\",\"ctrl+. 可以切换中英文标点\",\"Win+，：临时查看桌面\",\"快捷方式可以绑定快捷键！！！\",\"一些电脑自启动的东西，可以丢到一个目录\",\"C:\\\\Users\\\\Fighting\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\",\"AutoHotkey Script\",\"espanso Shortcut\",\"WGestures 2 Shortcut\",\"天若识字\",\"Shell和cmd都是命令行界面下的解释器，用于执行命令和脚本。它们的作用类似，但是它们是针对不同的操作系统而设计的。\",\"在macOS中，默认的shell是Bash（Bourne-Again SHell）直到macOS Catalina（版本10.15）中，Apple将默认的shell从Bash切换到了Zsh（Z Shell）。\",\"而在unix系统中，/表示目录。由于web遵循unix命名，所以在网址（URL）中，/表示目录。\"]},\"1038\":{\"h\":\"Tips\",\"t\":[\"⭐️ 当前行输错了：可以esc / ctrl c 到下一行重新键入\",\"@echo off 命令用于关闭命令提示符窗口中的命令回显，这样在执行命令时，命令行窗口将不会输出命令本身。\",\"在 Windows 命令行中，使用双冒号（::）可以添加注释\",\"set /p sourceDir=请输入源文件夹路径（例如：D:\\\\test）： 【录入用户键入！！】\",\"在Windows中，要设置环境变量，可以使用以下命令：\",\"使用 set 命令：可以使用 set 命令来设置临时环境变量，例如：\",\"set MY_VARIABLE=value \",\"这将在当前命令提示符会话中设置名为 MY_VARIABLE 的环境变量，并将其值设置为 value。但是，这种方式设置的环境变量只在当前会话中有效，关闭会话后会失效。\",\"使用系统属性窗口：你可以通过打开系统属性窗口来设置永久环境变量。你可以按下 Win + Pause/Break 键来打开系统属性窗口，然后选择 \\\"高级系统设置\\\"，在弹出的对话框中选择 \\\"环境变量\\\"。在环境变量对话框中，你可以添加、编辑或删除系统或用户级别的环境变量。\"]},\"1039\":{\"h\":\"Know\",\"t\":[\"windows 不区分大小写（所以文件夹大写小写都一样），Linux 区分\",\"windows 访问文件是 \\\"\\\\\\\\\\\" 反斜杠还得注意转义的问题，而linux是正斜杠 \\\"/\\\" 没有转义问题\",\"运行 sysdm.cpl 快速打开环境变量（system administrator . control panel）\"]},\"1040\":{\"h\":\"start www.baidu.com\"},\"1041\":{\"h\":\"explorer http://www.baidu.com\",\"t\":[\"# .url文件写入，文件名需英文 / win10 直接新建快捷方式就行！ [InternetShortcut] URL=http://www.baidu.com \",\"cd %~dp0\",\"%cd% 当前目录\",\"在Windows命令提示符下，\\\"%~dp0\\\"是一种特殊的参数变量，它表示当前批处理文件所在的目录的完整路径，包括盘符和路径。 \\\"d\\\"表示仅返回驱动器号和路径，\\\"p\\\"表示仅返回路径，\\\"0\\\"表示当前脚本的名称，即批处理文件的名称。\",\"右键标记即可复制cmd里面的文字\",\"查看外网 IP 地址，可以 curl 查ip的网站 实测curl ipinfo.io 可，ip.cn没内容\",\"也可以在 curl 后加别的网址，例如 http://ip.cn。另外，也可以直接把 http://ipinfo.io 复制到浏览器中访问。curl 是 Windows 10 系统新增的命令。\",\"通过 Ping DNS 来决定看用哪一个 DNS 比如我现在测试的 223.5.5.5 比 114.114.114.114 要快！\",\"Linux 命令终端的清屏命令/快捷键：Clear，Ctrl+L\",\"Windows CMD 或者 Navicat 命令窗口的清屏命令：Clear 或者 CLS \",\"实测 CMD 只能 cls\",\"修改环境变量不重启生效：set PATH=C:\",\"cd /d [对应目录] //可以跨盘cd\",\"Hosts 改完需要以下命令生效 ipconfig /flushdns\",\"端口被占\",\"#查看被占用端口对应的 PID netstat -aon|findstr \\\"9000\\\" #查看指定 PID 的进程 tasklist|findstr \\\"1\\\" #强制（/F参数）杀死 pid 为 9000 的所有进程包括子进程（/T参数）： taskkill /T /F /PID 9000 \",\"Everyone -> 勾选 替换子容器和对象的所有者（重点！容易忽略）\",\"要是还删不了了，就到资源监视器中搜索句柄搜这个文件夹名字，我这里是被Typora占用了，结束的就可以了\",\"新发现：可能并不是权限问题，就是单纯被占用了 句柄里查被谁占用关掉就行 例如typora、sublime\",\"新发现：直接到删不了的目录里面一层去删就行\",\"nssm相对sc有什么优势：类似linux环境下的守护进程\",\"想把 tomcat 整成服务！ sc 发现把tomcat9.exe变成服务启动不了 nssm 可以！ tomcat9.exe 是由 service.bat install 命令生成！！！\",\"发现：tomcat中，只有这个tomcat9.exe能做成服务，其它bat做不成（bat都是新open一个黑底白字的cmd） bokedee的bat就能直接做成服务\",\"做成服务的这两者sc做成的都不能跑！所以 nssm 还是牛的\",\"service.bat remove service.bat install \",\"NSSM（Non-Sucking Service Manager）和SC（Service Control）都是Windows系统中的服务管理工具。它们都可以用于创建、配置、启动、停止和删除Windows服务。\",\"以下是NSSM相对于SC的一些优势：\",\"更加稳定：NSSM比SC更加稳定，可以更好地处理Windows服务的异常情况，如服务崩溃、服务死锁等。\",\"更加灵活：NSSM提供了更多的选项和配置，可以对服务进行更加细粒度的控制，如服务启动类型、服务重启策略、服务优先级等。\",\"更加易用：NSSM提供了可视化的用户界面，可帮助用户更加轻松地创建和管理Windows服务。\",\"更加可靠：NSSM支持服务的自动重启，并提供了对服务的监控和报警机制，可帮助用户及时发现和解决服务问题。\",\"总之，NSSM相对于SC具有更加稳定、灵活、易用和可靠的优势，尤其适用于需要管理大量Windows服务的场景，如服务器集群、容器等。\"]},\"1042\":{\"h\":\"代码块： ctrl + shift + k [Mac Not same]\"},\"1043\":{\"h\":\"插入链接：ctrl + k\"},\"1044\":{\"h\":\"行 Entry，段 Shift+Entry（两者决定行间隙）\"},\"1045\":{\"h\":\"shortcut： 1）快速定位到修改过的地方的快捷键-好用 2）书签快捷键 3）还有github中python的批量保存关闭快捷键\",\"t\":[\"image-20240130182956675\"]},\"1046\":{\"h\":\"在 Sublime Text 4 中，当你尝试替换文本时，它默认会保持替换的文本与原始文本的大小写一致。这意味着，如果你选择替换为大写文本，但原始文本是小写的，替换后的文本也会保持小写。\",\"t\":[\"踩坑，ctrl h左下角有个选项 preserve case\"]},\"1047\":{\"h\":\"搜索可以用正则，正则中的表达式可以用()包到里面，替换的时候可以用 $1..n（代表第1..n个括号） 来复用匹配到的内容！！！真的好用\",\"t\":[\"正则组引用\"]},\"1048\":{\"h\":\"ctrl+shift+f 可以查（匹配）整个文件夹里的内容，高频使用\"},\"1049\":{\"h\":\"\"},\"1050\":{\"h\":\"ctrl+shift+p ---> install package control ---> 搜索 Insert Nums\"},\"1051\":{\"h\":\"列模式批量操作（以矩形的形式选取内容）\",\"t\":[\"－鼠标右键＋Shift\",\"－或者鼠标中键\",\"－增加选择：Ctrl，减少选择：Alt\",\"最佳列宽\",\"不能 ctrl A，需要左上角全选，再指针放列间隙中变成十字双击 即可！\",\"场景：我对比两行，设置重复值高亮的条件格式。发现有一列明明不一样还高亮！！！\",\"结果：发现这一列高亮的在其他列也有这个值，这个规则是把两行所有的汇总起来比 不是一列列比！\",\"image-20231103154714091\"]},\"1052\":{\"h\":\"idea\"},\"1053\":{\"h\":\"可以快速跳转到方法大括号的起止位置，配合方法分隔符使用，不怕找不到方法在哪儿分割了\"},\"1054\":{\"h\":\"Shift+alt+左键 可以和 sublime 一样多个光标\"},\"1055\":{\"h\":\"ctrl+m 滚动到光标所在行\"},\"1056\":{\"h\":\"\"},\"1057\":{\"h\":\"idea ctrl shift f 整理代码！！\"},\"1058\":{\"h\":\"ctrl+o查看类中所有的方法！！\"},\"1059\":{\"h\":\"先写输出语句括号里要输出的，再.sout试一下还有.if！！！\"},\"1060\":{\"h\":\"ctrl alt / 看有哪些有哪些构造方法！！！\"},\"1061\":{\"h\":\"alt向下移动该行/ ctrl+alt复制该行\"},\"1062\":{\"h\":\"快速生成for循环 选择fori会生成递加 选择forr会生成递减\"},\"1063\":{\"h\":\"ctrl 鼠标右键 可以高亮指定范围代码 还是 alt 鼠标右键也可以\"},\"1064\":{\"h\":\"shift shift 查类 再shift shift 选中从jar包找\"},\"1065\":{\"h\":\"alt + shift + m 可以把所选代码提取出来当方法\"},\"1066\":{\"h\":\"alt shift z 包代码例try catch\"},\"1067\":{\"h\":\"F4 / ctrl + H 看这个类结构，从哪里继承下来。。 ctrl + t 看这个接口有哪些实现类 ！\"},\"1068\":{\"h\":\"。注意，这个快捷键只支持0-9十个数字助记符书签的快速添加。 shift + F11 直接标记， shift + F11 查看书签 ctrl + 数字是跳转\"},\"1069\":{\"h\":\"ctrl + l 跳到指定行\"},\"1070\":{\"h\":\"用【Shift + Enter】，可以【IDEA新建一行,并且光标移到新行】\"},\"1071\":{\"h\":\"ctrl + o Ait + 7 可以看这个类有哪些属性\"},\"1072\":{\"h\":\"ctrl . 可以收或打开括号 同ctrl+ -/+ ，\"},\"1073\":{\"h\":\"上面的标签，按ctrl点击可以打开explorer\"},\"1074\":{\"h\":\"ctrl+d 对比选中的两个文件代码，可比较两个 Entity 属性等\",\"t\":[\"alt+left/right 跳到上次的光标位置\",\"ctrl+alt+left/right 跳上一个浏览过的文件\",\"ctrl+shift+a 输入maven就可用maven idea右侧工具栏没有显示maven的时候，或者要加maven项目的时候用！！\",\"image-20230223150958814\",\"键盘End键可以到浏览器页面最底部，有道云笔记有效\",\"问题就在于List有多个实现类，如 LinkedList或者Vector等等，现在你用的是ArrayList，也许哪一天你需要换成其它的实现类呢？，这时你只要改变这一行就行了：List list = new LinkedList(); 其它使用了list地方的代码根本不需要改动。假设你开始用 ArrayList alist = new ArrayList(), 这下你有的改了，特别是如果你使用了 ArrayList特有的方法和属性。 ,如果没有特别需求的话,最好使用List list = new LinkedList(); ,便于程序代码的重构. 这就是面向接口编程的好处\",\"变量.null：if(变量 == null)\",\"变量.nn：if(变量 != null)\",\"变量.notnull：if(变量 != null)\"]},\"1075\":{\"h\":\"Book\"},\"1076\":{\"h\":\"围城\",\"t\":[\"短片小说，2024/02 读完，读到结局意犹未尽感觉还有内容。。。故此翻书评\",\"感触深的是以下两处\",\"贫贱夫妻百事哀出自元稹的《遣悲怀》，是元稹怀念亡妻所作，原意是我们做贫贱夫妻的每一件事情都会让我特别悲哀。 现在则多指，我们做贫贱夫妻的每一件事情都会让我特别悲哀，理解为夫妻没有稳定的经济基础。\",\"赵辛楣的一句‘你不讨厌，可是全无用处’不知刺痛了多少人的心 \",\"翻看方鸿渐的求学履历、工作履历，方鸿渐给我的印象就是——无头苍蝇乱撞。方鸿渐总是被动地去接受，没有主动地去争取过什么，因为他压根儿就没有梦想，这样的人，总是选简单的路走，然后，路越走越窄。\",\"Other:\",\"我们这代人好像一直在爬坡，要买房，要买车，要供孩子上好学校，要体面的生活，要中产的头衔，好像从来没有静下来享受下生活，有哪些人是主动内卷，有的人是被家庭裹挟着内卷，其实按照我们很多人收入，欲望放低一点过的其实还是可以很安逸的\"]},\"1077\":{\"h\":\"心态\",\"t\":[\"“你们一定是秉持着‘努力就会有回报’的信念一路拼到今天的，但今后等待着你们那的会是一个‘努力也未必会有公平回报’的社会。而你所秉持的‘努力就会有回报’这个观念，请你记住，这不是你一个人努力的结果，环境也造就了你。你现在之所以会认为努力就会有回报，是因为你一直以来所处的环境，有人鼓励你、在背后推着你走、在前面提携你、肯定你的点滴进步。这世上还有努力也没有得到回报的人、想努力却无从努力的人、太努力而身心俱毁的人们。还有想要好好努力，但被‘反正轮不到你’、‘我这种人还是算了’打退堂鼓的人。所以，请你们不要把所有的努力都用于追逐个人的胜利，你们被优越的环境所塑造出来的能力优势，不是为了凌驾于没有享受过同等资源的人们之上，而应该发挥这些能力去帮助他们。然后，不要逞强，而是承认自己的脆弱，与他人互帮互助。”\"]},\"1078\":{\"h\":\"upuporStudy\",\"t\":[\"https://eco.upupor.com/upupor/\",\"可以看这个网址，记录作者对这个Blog的很多思路。。。。包括MinIO、mysql的备份，以及服务的部署！\",\"https://eco.upupor.com/assets/upupor-architecture.c16039e8.svg\",\"过启动时候 log 看触发哪些配置项\",\"一个个功能模块过\"]},\"1079\":{\"h\":\"1.flyway\",\"t\":[\"作用：数据迁移\",\"数据库会新产生一个 flyway_schema_history 的表\",\"这个表会记录每一个 sql 脚本文件的操作，以及是否执行成功\",\"作用：upupor使用了flyway,因此数据库SQL文件维护在upupor-web/src/main/resources/db/migration目录,只需要配置好DB然后启动程序,就会创建相应的表以及执行相应的SQL. 后续如果想新增表或者执行SQL可以直接在migration目录按照规则新建migration文件即可,程序启动时会自动执行. Flyway是一个开源的数据库版本控制工具，它用于管理和跟踪数据库结构的变化\",\"小技巧：用 IDEA 操作数据库新增列会产生语句，这个时候就可以复制这个语句了！\",\"SQL脚本文件有固定命名规则\",\"V开头\",\"__两个下划线连接描述信息\"]},\"1080\":{\"h\":\"2.环境变量\",\"t\":[\"XD：我觉得这是开源值得学习的一个点，所有隐私部分用${} 然后单独搞个 application.properties 不被版本控制就行！\",\"详细我记录在 SpringBoot 笔记中了，我这里用的是 application.properties(no version) + idea Environment variables 搭配一起用，目的是测了下这两者都生效了！！！\",\"针对一次会话的话 linux-export，windows-set\",\"好像写到 application.properties 里面也可以，这个文件不版本控制就行\",\"我这里选择用 idea 自带的 Environment variables 设置\"]},\"1081\":{\"h\":\"1.事件驱动-@EventListener\",\"t\":[\"笔记：https://www.cnblogs.com/dafengdeai/articles/17073114.html\",\"视频：https://www.bilibili.com/video/BV1Cd4y1q7Vm/?spm_id_from=333.337.search-card.all.click&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\",\"更好的视频：https://www.bilibili.com/video/BV1Wa4y1477d?p=3&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\",\"Spring、SpringBoot常用扩展特性之事件驱动 看代码demo Spring Boot 2 项目\",\"一般搭配以下两个注解一起使用： @EventListener @Async\",\"@0rder指定执行顺序在同步的情况下生效 看视频也可以搭配这个注解，加个权重 假如多个Listener消费谁先\",\"@Async 异步执行需要 @EnableAsync 开启异步\",\"事件驱动:即跟随当前时间点上出现的事件,调动可用资源,执行相关任务,使不断出现的问题得以解决,防止事务堆积. 如:注册账户时会收到短信验证码,火车发车前收到提醒,预定酒店后收到短信通知等.如:浏宽器中点击按钮请求后台,鼠标点击变化内容,键盘输入显示数据,服务接收请求后分发请求等.在解决上述问题时,应用程序是由\\\"事件驱动运行的,这类程序在编写时往往可以采用相同的模型实现,我们可以将这种编程模型称为事件驱动模型. (PS:事件驱动模型其实是一种抽象模型,用于对由外部事件驱动系统业务逻辑这类应用程序进行建模.)\",\"debug走到一步，不懂\",\"@Resource private ApplicationEventPublisher eventPublisher; //UNKNOWN @FunctionalInterface这里的作用是什么 @EventListener注解！！！！！？？？？ eventPublisher.publishEvent(sendEmailEvent); --------后来懂了，上面是发布事件了 有相对于的方法监听消费这个事件：-------- @EventListener @Async public void sendEmail(EmailEvent emailEvent) PS：方法参数需要和发布 sendEmailEvent 类型对应， 这样才是一一对应消费 \",\"重点就是这三个类，搞清就行！！！可以看自己写的代码 注意：ApplicationEvent 可以不实现所以重心其实就两个类\",\"Spring事件驱动最基本的使用 ApplicationEventPublisher,ApplicationEvent,ApplicationListener （Spring抽象出了这基本的三个。 事件生产方、事件、事件消费方）\",\"ApplicotionEventPublisher 子类 ApplicationContext （在启动类中这个常用一些applicationContext.publishEvent(new ApplicationEvent(this){})）\",\"事件源、监听器需要被spring管理\",\"监听器需要实现ApplicationListener<ApplicotionEvent> xd: 可注解！\",\"可体现事件源和监听器之间的松耦合仅依赖spring、ApplicationEvent（发布、监听两个类中都没有另一个的引用！）\",\"XD：\",\"publisher-生产者， Listener（注解到方法）-消费者 publishEvent几次，listener就会消费几次\",\"ApplicationEvent 可以不实现，看顶层的这个接口源码其实也转成了 Object，但是按规范注释来说希望所有的事件类都最好实现 ApplicationEvent\",\"ApplicationEventPublisher.class default void publishEvent(ApplicationEvent event) { publishEvent((Object) event); } //所以事件类没有extends ApplicationEvent也行其实走的是这里 void publishEvent(Object event); \",\"com.upupor.framework.utils.CcUtils#getUuId\",\"com.upupor.framework.utils.DeflaterUtils\",\"在 Java 中，Deflater 是一个用于数据压缩的类。它提供了一种在内存中压缩数据的方式，使得数据可以更有效地存储和传输。\",\"Deflater 类使用 DEFLATE 压缩算法，这是一种无损数据压缩算法，广泛应用于诸如 ZIP 文件、HTTP 压缩和其他数据传输场景中。\",\"使用 Deflater 类可以将数据压缩为压缩格式，然后可以将压缩后的数据存储到文件中、传输给其他系统或在内存中进行处理。\",\"Deflater 和 base64 是两种完全不同的概念和功能。\",\"Deflater 是用于数据压缩的类，它使用 DEFLATE 压缩算法将数据压缩为更小的形式。它通过消除数据中的冗余和重复信息来减小数据的大小，使得数据可以更有效地存储和传输。压缩后的数据可以在需要时进行解压缩以恢复原始数据。\",\"base64 是一种编码方式，用于将二进制数据转换为可打印的 ASCII 字符串。它并不进行数据压缩，而是将数据按照一定的规则进行编码，以便在传输或保存时能够处理二进制数据。base64 编码将每 3 个字节的二进制数据编码为 4 个可打印字符，编码后的字符串长度通常会比原始数据增加约 33%。\",\"Deflater 和 base64 通常用于不同的场景和目的：\",\"Deflater 适用于需要对数据进行压缩，以减小数据的大小，节省存储空间或在网络传输中降低带宽消耗的情况。\",\"base64 适用于需要将二进制数据转换为可打印的 ASCII 字符串，例如在传输二进制数据时，由于某些通信协议或数据传输的限制，只能传输可打印字符，而不能直接传输二进制数据。\",\"一开始我只想确认文章展示是不是需要 unzip 解压缩\",\"我现在都不知道入口在哪，头晕~ 一步步的太恐怖了 源码\",\"在 Spring 框架中，StopWatch 是一个用于测量代码执行时间的工具类。它提供了一种简单的方式来跟踪代码块的执行时间，并可以用于性能分析、调优和监控。\",\"博客底下的那个计时怎么实现 怎么前后的\",\"spring的 StopWatch 类 + @Around 实现！！！\",\"com.upupor.web.aspects.ControllerAspectAspect#doAround\",\"com.upupor.test.UpuporLimiterTest\",\"TODO 😡 还没花时间看\",\"RuoYi 也有，对比实现逻辑\",\"启动类给上静态变量！！！在 @Around(\\\"controllerLog()\\\") 里调用 bz，也就是说有xhr就会触发\",\"modelAndView.addObject(STATIC_SOURCE_VERSION, UpuporWebApplication.STATIC_SOURCE_VERSION); \",\"public class UpuporWebApplication implements CommandLineRunner { public static final String STATIC_SOURCE_VERSION; static { System.setProperty(\\\"druid.mysql.usePingMethod\\\", \\\"false\\\"); STATIC_SOURCE_VERSION = LocalDateTime.now(ZoneId.of(\\\"Asia/Shanghai\\\")).toString(); } \"]},\"1082\":{\"h\":\"1.实现ApplicationContextAware接口的作用\",\"t\":[\"场景：发现工具类中 SpringContextUtils.getBean(TrueSend.class); 好奇为什么不@Autowaird\",\"实现 ApplicationContextAware 接口的作用是允许一个类获取对 Spring 应用程序上下文（ApplicationContext）的访问权限。通过实现该接口，类可以获得对应用程序上下文的引用，从而能够进行更高级别的操作，例如获取和管理 Spring Bean、发布应用程序事件等。\",\"具体来说，当一个类实现了 ApplicationContextAware 接口，它必须实现接口中的 setApplicationContext() 方法。Spring 在初始化该类的实例时，会自动调用 setApplicationContext() 方法，并将应用程序上下文作为参数传递给该方法。通过该方法，类可以将传递的应用程序上下文存储为一个成员变量，以便在需要时进行访问。\",\"下面是一个示例：\",\"import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; public class MyBean implements ApplicationContextAware { private ApplicationContext applicationContext; @Override public void setApplicationContext(ApplicationContext applicationContext) { this.applicationContext = applicationContext; } public static <T> T getBean(Class<T> clazz) throws BeansException { return applicationContext.getBean(clazz); } } -----------------即可在 CcEmailUtils.class 等没有被Spring管理的工具类中使用Spring对象 TrueSend trueSend = SpringContextUtils.getBean(TrueSend.class); \",\"通过实现 ApplicationContextAware 接口，类可以直接访问应用程序上下文，从而获得更多的灵活性和功能。例如，可以根据需要获取其他 Bean 的引用、发布应用程序事件、访问配置属性等。\"]},\"1083\":{\"h\":\"\",\"t\":[\"记到了 SpringBoot.md 中，具体 link title\",\"犹记毕业第一年时，公司每次发布完成后，都会在一个群里通知【版本更新，各部门清理缓存，有问题及时反馈】之类的话。归根结底就是资源缓存的问题，浏览器会将请求到的静态资源，如JS、CSS等文件缓存到用户本地，当用户再次访问时就不需要再次请求这些资源了，以此也是提升了用户体验。但是也正是因为这些资源缓存，导致客户端的静态文件往往不是当前最新版本。后来有同事增加了时间戳、随机数等，确实这也解决了客户端缓存的问题，但是却又带来了新的麻烦，导致每次访问都要请求服务器，无形中增加了服务器的压力。\"]},\"1084\":{\"h\":\"3.Lucene\",\"t\":[\"Lucene和Elasticsearch之间存在密切的关联。实际上，Elasticsearch是建立在Lucene之上的分布式搜索和分析引擎，它提供了更高级的功能和易用性的接口，以便于构建和管理大规模的分布式搜索应用程序。\",\"Minio\",\"必须要手动上传不能资源管理器复制进去\",\"资源管理器上传的文件不是源文件，好像被它加密了\",\"配合Spring的版本 在上传到minio时计算下md5后再上传\",\"# 生产 targetDic = \\\"/upupor/apps/codes/upupor/upupor-web/src/main/resources/static\\\" targetPath = os.walk(targetDic) ossTargetDic = \\\"/upupor_static\\\" def getMd5(localFile): f = open(localFile,'rb') md5_obj = hashlib.md5() md5_obj.update(f.read()) hash_code = md5_obj.hexdigest() f.close() md5 = str(hash_code).lower() return md5 # client = Minio( endpoint=\\\"ip:port\\\", access_key=\\\"xxxx\\\", secret_key=\\\"xxxxxx\\\", secure=False, ) # client.trace_on(sys.stdout) for path,dir_list,file_list in targetPath: for file_name in file_list: if '.map' in file_name: continue if '.DS_Store' in file_name: continue # 本地文件 localFile = os.path.join(path, file_name) # 计算md5值 md5value = getMd5(localFile) # 将md5值添加到文件名上 local_file_md5_name = localFile.replace(targetDic,'').replace('\\\\\\\\','/')\\\\ .replace('.svg','-'+md5value+\\\".svg\\\")\\\\ .replace('.webp','-'+md5value+\\\".webp\\\")\\\\ .replace('.js','-'+md5value+\\\".js\\\")\\\\ .replace('.css','-'+md5value+\\\".css\\\")\\\\ .replace('.png','-'+md5value+\\\".png\\\")\\\\ .replace('.jpeg','-'+md5value+\\\".jpeg\\\")\\\\ .replace('.jpg','-'+md5value+\\\".jpg\\\")\\\\ .replace('.ico','-'+md5value+\\\".ico\\\") ossObjectName = ossTargetDic + local_file_md5_name # if exist == True: # print('已存在,无需上传------------'+ossObjectName) # continue # print('正在上传... ' + ossObjectName) in_get_content_type=\\\"application/octet-stream\\\"; md5FileName = local_file_md5_name.split('/',-1)[-1] suffix = md5FileName.split('.',-1)[-1]; if suffix == 'js': in_get_content_type='application/x-javascript' if suffix == 'css': in_get_content_type='text/css' if suffix == 'svg': in_get_content_type='image/svg+xml' #print(in_get_content_type) #print(suffix) client.fput_object(bucket_name=\\\"upupor-img\\\", object_name=ossObjectName, file_path=localFile,content_type=in_get_content_type) print(ossObjectName + ' 已上传') \",\"blog文章加密方式，为什么\",\"com.upupor.framework.utils.DeflaterUtils\",\"Deflater 类使用 DEFLATE 压缩算法，这是一种无损数据压缩算法，广泛应用于诸如 ZIP 文件、HTTP 压缩和其他数据传输场景中。\",\"使用 Deflater 类可以将数据压缩为压缩格式，然后可以将压缩后的数据存储到文件中、传输给其他系统或在内存中进行处理。\",\"草稿？是定时任务实现吗\",\"前端实现\",\"// 自动保存 10秒执行一次 autoSaveInterval = setInterval(function () { autoSave(); }, auto_save_timeout); \",\"站内信息\",\"一张 message 表\",\"LOG_PATH_IS_UNDEFINEDbackup 文件夹发现会压缩错误日志到里面！\",\"好像是 logback.xml 实现\",\"上传音频\",\"js 实现的blob 音频文件\"]},\"1085\":{\"h\":\"快排（分治思想）\",\"t\":[\"前言：二分查找 查找需要基于排序好的集合。排序算法是排序，查找是查找 勿混淆！\",\"https://www.acwing.com/solution/content/16777/\",\"【Java版本】常用代码模板1——基础算法 + 模板题参考实现\",\"快速排序（Quicksort）是对冒泡排序的一种改进，借用了分治的思想\",\"class Solution { public void moveZeroes(int[] nums) { //二分 quickSort(nums,0,nums.length-1); } void quickSort(int[] arr, int l, int r){ if(l >= r) return; int mid = arr[l+r >> 1]; int i = l-1, j = r+1; while(i < j){ // 等效于do while // 当数值小于分界值时持续遍历，直到找到第一个大于等于分界值的索引 // 如果是逆序则调整两个while循环 while(arr[++i] < mid); while(arr[--j] > mid); if (i < j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } quickSort(arr, l, j); quickSort(arr,j+1, r); return; } } \",\"index 0 作为中间点\",\"快速排序当我们把基准值设置在左边时，为什么要从右边先开始找？\",\"当基准值位于左边时，我们希望先从右边开始查找。这是因为我们需要找到一个比基准值小的元素，以便将其放到基准值左边的子数组中。如果我们从左边开始查找，可能会导致在找到比基准值小的元素之前，错过了一些比基准值大的元素，从而破坏了划分的准确性（XD: 想象要确保基准点左边都是小的 右边是大于的）\",\"也可以像下面这样，无所谓左边出发右边出发了应该！ 具体看acwing 实测while这里这么写不行：Time Limit Exceeded\",\"void quickSort(int q[], int l, int r){ if (l >= r) return; //l >= r 看个人习惯都是可以的 l == r 也行 int i = l, j = r, x = q[l + r >> 1]; //这里取中间点，避免了下面while多层判断 while (i < j){ while (q[i] < x) i++; while (q[j] > x) j--; if (i < j) swap(q,i, j); } quickSort(q, l, j); quickSort(q, j + 1, r); } void swap(int[] nums, int i, int mid){ nums[i] ^= nums[mid]; nums[mid] ^= nums[i]; nums[i] ^= nums[mid]; } \",\"必须修改成下面这样，为什么？？？ 这里 i j 先走谁都行\",\"int i=l-1,j=r+1, x = q[l + r >> 1]; //这里取中间点，避免了下面while多层判断 while (i < j){ do i++; while (q[i] < x); do j--; while (q[j] > x); if (i < j) swap(q,i, j); } \",\"TODO 未完成，无法聚焦思路捋顺\",\"代码一： int i = l, j = r, x = q[l + r >> 1]; //这里取中间点，避免了下面while多层判断 while (i < j){ while (q[i] < x) i++; while (q[j] > x) j--; if (i < j) swap(q,i, j); }\",\"代码二： int i = l - 1, j = r + 1, x = q[l + r >> 1]; while(i < j) { do i++; while(q[i] < x); do j--; while(q[j] > x); if(i < j) swap(q[i], q[j]); }\",\"他们的区别是什么，为什么代码一会超时 代码二不会。这代码是快速排序的部分代码\",\"300. 最长递增子序列\"]},\"1086\":{\"h\":\"问题建模（求解关键）\",\"t\":[\"定义状态-读题问什么 [最长递增子序列] （长度）\",\"状态转移 （if 怎么走，保证求解的过程形成一个逻辑上的有向无环图）\"]},\"1087\":{\"h\":\"计组原\"},\"1088\":{\"h\":\"1. 理论\"},\"1089\":{\"h\":\"1. 前言\",\"t\":[\"内存是计算机系统的主存储器 介绍上面两个存储单位后就介绍下内存了。 内存作为1个存储数据的存在， 有1个很重要的特性， 就是内存里的数据能被cpu直接访问。 cpu能不能直接访问硬盘的数据呢， 不能。 只能通过把硬盘的数据先放到内存里， 然后再从内存里访问硬盘的数据。我们平时玩游戏碰上读图loading 进度条的这个过程， 就是把数据从硬盘读到内存的过程啊。 读完条后地图的数据就在内存中了。 所以内存才是计算机系统的主存储器， 而硬盘是被分到跟光盘..u盘一类都是外部存储器\"]},\"1090\":{\"h\":\"2. 直接寻址技术\",\"t\":[\"当代计算机还实现了1个逆天的技术,就是直接寻址了. 什么意思呢, 还是用上面的例子说明, 假如你知道你要找的人住在那栋大楼的17楼 1702, 但是你还是需要从1楼走到17楼去找他, 这个过程还是需要时间成本的.\",\"但是如果你具有了直接寻址技术, 就能直接跳到17楼 1702门前, 如果你找的下1个人在2楼, 又能从17楼直接跳到2楼, 逆天啊. 而直接寻址技术已经成为当代计算机软硬件的标准技术之一了, 也就是说只要cpu知道要访问数据的内存地址, 就能直接到内存的对应位置去访问数据!\"]},\"1091\":{\"h\":\"3. 内存地址的表示方式\",\"t\":[\"跟门牌号一样, 其实内存地址也是由1个2进制数字来表示的. 每1个地址对应内存里的1个byte字节, 如果地址的值加1, 那么这个地址就对应下1个字节了.\",\"那么内存地址的长度是多少呢? 这个就是这篇文章标题所涉及的. 在32位操作系统中, 内存的地址就是32位的2进制数, 那么假如32位系统的某个内存地址是: 0000 1111 1111 0000 1111 0000 1111 0000 那么它可以用十六进制表示成: 0 F F 0 F 0 F 0 也就是 Ox0ff0f0f0 前面Ox代表十六进制, 所以你见到这种字母数字混合一次的地址方式,就是这样得来的了, 它实际上是1个二进制的数字啊. 不过计算机里面所有的东西都是二进制了..\"]},\"1092\":{\"h\":\"4.\",\"t\":[\"上面说了, 既然32位系统里内存地址长度是32位的. 所以32位的地址范围就是从 0000 0000 0000 0000 0000 0000 0000 0000 到 1111 1111 1111 1111 1111 1111 1111 1111 啦（Ox00000000 ~ OxFFFFFFFF)， 这里有几个地址呢？ 明显是有 2^32 个啦.\",\"那么2^32到底是多少个？ 2^32 = 4 * 1024(G) * 1024(M) * 1024(K) = 4294967296 , 就是4G 啊, 而每1个地址对应1个1个字节， 容量就是1byte， 所以2^32个地址就总共能对应应4GB 的内存容量啊， 这里的B指的是byte 字节啊。\",\"假如你给32位的系统配上了8GB的内存， 操作系统最多也只能给其中4GB 分配地址， 其余 4GB 是没有地址， 因为地址不够用啊， 所以32位系统最多支持4GB内存就是这样来的。\"]},\"1093\":{\"h\":\"补充评论（没有深入探究了、尽信书，不如无书）\",\"t\":[\"这个转载的文章误人子弟了。前面说的都对，后面就驴头不对马嘴了。32位操作系统，指的是寄存器是32位，一次内存数据流宽度是32位。但是不是说内存地址也必须32位。内存大小是由硬件和操作系统两个方面决定的。硬件是地址总线，地址总线如果是32个，那么就最多支持4G，但是地址总线一般大于等于数据总线，如果地址总线是36个，那么硬件支持内存就大于4G了。还有操作系统，那是虚拟地址了。就算地址总线有36个，操作系统支持的虚拟地址只有32位，那也仅仅支持4G内存。内存大小是由硬件和操作系统两方制约的（还有其他小的制约因素）。至于文中说的32位操作系统，指的是寄存器位数，和内存大小没多大关系。地址总线36位，如果寄存器位数32位，可以通过读取两次，完成内存地址定位。\"]},\"1094\":{\"h\":\"\"},\"1095\":{\"h\":\"1. 线程数和逻辑CPU个数，内核个数\",\"t\":[\"1 CPU 4 Core 8 Thread\",\"在任务管理器中，看到其实是4个内核，但是逻辑处理器是8个，有多少个逻辑处理器，就可以开多少个线程。 线程数=逻辑处理器个数\",\"一个物理内核可以作为1个或者2个逻辑CPU\",\"操作系统可以使用逻辑CPU来模拟真实CPU。 在没有多核处理器的时候，一个物理CPU只能有一个物理内核， 有了多核技术，一个物理CPU可以有多个物理内核，可以把一个CPU当作多个CPU使用，即逻辑CPU。 没有开启超线程时，逻辑CPU的个数就是总的CPU物理内核数。 开启超线程后，逻辑CPU的个数就是总的CPU物理内核数的两倍。\",\"实际能看到的2个物理CPU:\",\"from multiprocessing import cpu_count print(cpu_count()) > 8 \",\"在python中，使用上述代码可以获取当前系统的逻辑cpu个数，也就是支持并发的线程个数。\"]},\"1096\":{\"h\":\"尚上优选\",\"t\":[\"41h/3=14 2_week 尚上优选类似多多买菜、美团优选 230910 END+++ Fighting？\",\"依托社区和团长社交关系实现生鲜商品流通的新零售模式\"]},\"1097\":{\"h\":\"1.knife4j\",\"t\":[\"knife4j > swagger2 里面有它的jar是它的增强版\",\"@Bean return Docket.class 这样是为了分组 例如后台系统一个，用户前台一个\",\" //具体怎么配置Goolge就好 @Bean public Docket webApiConfig() @Bean public Docket adminApiConfig() \",\"访问Knife4j的文档地址：http://ip:port/doc.html即可查看文档\",\"初印象：好用 内容很详细。。重点还能调试模拟PostMan发请求！！！\"]},\"1098\":{\"h\":\"2.Module\",\"t\":[\"VO包下的类一般封装查询条件，比如JD想检索商品 即可把所有检索点放VO实体类\"]},\"1099\":{\"h\":\"3.Node.js\",\"t\":[\"Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。简单的说 Node.js 就是运行在服务端的 JavaScript\"]},\"1100\":{\"h\":\"4.VSCode\",\"t\":[\"vs新建工作区 -> 将当前保存为工作区会有一个xxx.code-workspace的文件。。。类似java的父目录，下面就可以新建各种 Module 项目是放在工作区中运行，可以一个正式项目 一个test项目\",\"权限\",\"整合 spring security 可以弄。但这里不整了就简单弄基础功能\"]},\"1101\":{\"h\":\"1.MP 框架API(Get It)\",\"t\":[\"这里已经挪到 lambda 笔记中\",\"MP中有Lambda的Wrapper（为了避免了字段硬编码和拼写错误的问题，即使用普通QueryWrapper的缺陷）\",\"对于 QueryWrapper 类的 like 方法，它不支持使用 Lambda 表达式作为参数。只有 LambdaQueryWrapper 类支持使用 Lambda 表达式。\",\"在 LambdaQueryWrapper 中，我们可以使用 Role::getRoleName 来指定查询条件的字段。而在 QueryWrapper 中，我们需要使用字符串 \\\"role_name\\\" 来指定数据库表中的字段名。\",\"TODO 搞不懂这里的第一个参数的Lambda为什么拿的是@TableField(\\\"role_name\\\")的值\",\"//创建条件构造器对象 LambdaQueryWrapper<Role> wrapper = new LambdaQueryWrapper<>(); //TODO 搞不懂这里的第一个参数的Lambda为什么拿的是@TableField(\\\"role_name\\\")的值 private String roleName; wrapper.like(Role::getRoleName,roleName); \",\"😡TODO：这两个类的like 方法是通过继承父类 AbstractWrapper 来获得，具体在这两个类中也没看到重写，不清楚怎么弄的？？？ ctrl+p方法签名里面有AnnotationFunction，但是实际点击源码看没看到（ctrl+左键看不到！）\",\"既然这两个类都是通过继承父类AbstractWrapper获得的like方法，那么父类怎么区分这两个类分别给他们各自的like实现\",\"这种差异是因为 LambdaQueryWrapper 类在设计时针对 Lambda 表达式进行了特殊处理，以提供更加便捷的语法。而 QueryWrapper 类则是基于传统的字符串字段名的方式。\",\"image-20230902215155311\"]},\"1102\":{\"h\":\"2020 程序员找工作指南\"},\"1103\":{\"h\":\"术语科普\",\"t\":[\"hc，headcount，人头数，表示计划招聘的人员的个数，例句\",\"今年的 hc 很充足。\",\"jd，job description，工作描述，例句\",\"发个 jd 给我看看吧。\",\"offer，录取意向，offer 分为口头 offer 和书面 offer，一般书面 offer 才算是正式 offer，例句\",\"他今年拿 offer 拿到手软。\",\"package，总包，可以认为是税前年薪总数，一般包括年薪 + 奖金 + 股票，技术大佬才会用到的词汇，例句\",\"package 100 万，你对这份工作有兴趣没\"]},\"1104\":{\"h\":\"话术解读\",\"t\":[\"「工资 6k 到 40k」——那工资就是 6k\",\"「工资上不封顶」——就是说说而已，没人会给程序员一个月一百万月薪的\",\"「美女如云」——我司没有福利，你们员工自己互相给福利吧\",\"「大牛云集」——有两个稍微有点经验的程序员\",\"「需要你有一定抗压能力」——需要你自愿加班\",\"「不强制加班」——需要你自愿加班\",\"「我们目前处于创业阶段」——一周上六天班\",\"「弹性工作时间」——上班不弹，下班弹，而且只往后半夜弹\",\"「有竞争力的薪酬」——我们给的工资跟其他公司差不多\",\"「工资面议」——不好意思写出来\",\"「期权激励拿到手软」——希望能弥补你看到基本工资后的脚软\",\"「有活力的技术团队」——团队平均工作经验小于1年\",\"「千亿市场的探索者」——目前尚没看清具体市场在哪\",\"「扁平化管理」——公司还没招到HR\",\"「典型欧美创业工作环境」——办公室现处于毛坯房状态\",\"「新技术+新方向+新团队」——嗯，目前这三样都没有\",\"「直进核心团队」——公司尚未设置非核心团队岗\",\"「全方位成长机会」——你有很大机会成为外卖超人\",\"「提供各种福利」——每样细说咱就伤感情了\",\"「提供住宿、班车及两餐」——每周提供数小时时间与家人团聚\",\"「加入我们，给你足够大的发展空间！」——目前公司规模小于10人\",\"「公司计划短期内上市」——您也知道计划一般赶不上变化\"]},\"1105\":{\"h\":\"找工作到底该看什么？\",\"t\":[\"地区\",\"月薪\",\"工资构成\",\"团队\",\"项目\",\"技术\",\"成长\",\"加班\",\"行业\"]},\"1106\":{\"h\":\"地区\",\"t\":[\"第一梯队：北、杭、上、广、深\",\"第二梯队：成都、武汉、南京、西安、重庆等\",\"第三梯队：苏州、厦门、天津、合肥、郑州等\",\"以上排序是以互联网岗位数量大略排序的，不代表城市综合实力。\",\"先去第一梯队积累两年，然后回第二三梯队当主程\",\"去第一梯队一直待着，赚钱买房\",\"程序员的顶级地区应该是美国湾区，当然还有一种取巧的办法是拿美国的工资，在中国生活，例如远程开发。\"]},\"1107\":{\"h\":\"月薪\",\"t\":[\"以国内前端、后端程序员为例\",\"第一梯队城市：初级 8 到 10k，中级 10 到 20k，高级 15 到 35k\",\"第二梯队城市：x 80%\",\"第三梯队城市：x 60%\",\"换句话说，如果一个公司工资给到 8k，那么它只能找到一个初级前端工程师\"]},\"1108\":{\"h\":\"工资构成\",\"t\":[\"工资在大部分时候是你找工作首要参考依据，但你需要对工资的构成有一个全面的了解。\",\"一年的工资 = 税前工资 - 税 - 五险 - 公积金 + 补贴 + 奖金 + 其他福利\",\"程序员可能有的补贴有餐补、房补、交通补贴、设备补贴、异地入职补贴、出差补贴等，其中有些补贴是一次性的，有些补贴则是每个月都有。\",\"奖金，每个公司不同，一般会有年终奖、项目奖等。\",\"其他福利有通勤班车、生日庆祝、团队旅游等。\"]},\"1109\":{\"h\":\"团队\",\"t\":[\"在你团队你，你最应该关注的是同事和直接上级。至于 AT 大牛，大部分时候你是接触不到的。\",\"大公司里的成熟团队\",\"小公司里生存了多年、稳定的团队\",\"离职率很高的团队\",\"新组建不久的团队\",\"一人团队（就你一个前端/后端）\"]},\"1110\":{\"h\":\"项目\",\"t\":[\"是自有项目还是外包项目，为什么不推荐去外包企业？去可以，但是不能待超过两年。\",\"十年以上的项目？五年？三年？今年？\"]},\"1111\":{\"h\":\"技术\",\"t\":[\"不一定用新技术就是好的，但用新技术有利于你下一次跳槽（面向简历编程）\",\"一个存在多年的公司，往往同时具有老技术和新技术，两个都有可能被分配给你\",\"我的态度是，不用追求一定要去用新技术的团队，靠别人不如靠自己，比如自己动手把老技术升级为新技术。\"]},\"1112\":{\"h\":\"成长\",\"t\":[\"大公司的成长体系比小公司健全很多，如阿里有 P5 到 P8，腾讯有 T1 到 T3，这意味着\",\"学习空间大\",\"涨薪空间大\",\"可以待很多年\"]},\"1113\":{\"h\":\"加班\",\"t\":[\"996 并不像传闻中那么普遍（至少我去过的团队都没有长期 996 过）。\",\"那些宣称自己 996 或者大小周的公司，只适合当跳板，不宜久留。\"]},\"1114\":{\"h\":\"行业\",\"t\":[\"虽然都是程序员，但是不同行业的程序员待遇和前途是不同的。常见的有\",\"互联网行业，工资高加班多提升空间大，技术发展快\",\"软件行业，工资略低，技术发展慢\",\"银行，技术求稳，Java 居多，程序员工资较低，但加班少\",\"传统行业，技术只是辅助，没什么上升空间\"]},\"1115\":{\"h\":\"为防止受骗，要看什么\",\"t\":[\"公司工商信息\",\"坊间传闻\",\"主要是为了防止自己去了一家面临倒闭或者拖欠工资的公司。\"]},\"1116\":{\"h\":\"公司工商信息\",\"t\":[\"天眼查、企查查都可以查看工商信息，比如我在企查查上找到乐视网的工商信息\",\"你可以看到该公司陷入了哪些官司、有哪些风险。不过这些信息仅供参考，实际情况可能只有当事人清楚。\"]},\"1117\":{\"h\":\"坊间传闻\",\"t\":[\"可以在知乎上搜索一下，但这种信息一般都是个例，存在以偏概全的地方，不可全信。\",\"你主要从这些传闻里看看加班强度、工资是否拖欠等信息即可。\"]},\"1118\":{\"h\":\"确定想要离职吗\",\"t\":[\"工资低？是行业性问题还是个人水平问题？\",\"对工作不感兴趣？是否到了厌恶的程度？\",\"加班太累？是行业性问题还是个人水平问题？\",\"没有提升空间？\",\"如果你确定了，就可以计划离职了。\"]},\"1119\":{\"h\":\"原则一：骑驴找马\",\"t\":[\"一般来说，不要先离职再找工作。找工作过程中你会频繁请假，其实就相当于告诉主管你要离职了，他如果不理你，就说明他默认你可以走。他如果找你谈话，你也不用承认你想离职（虽然他已经知道了）。\",\"有下家之后再提出离职。\"]},\"1120\":{\"h\":\"原则二：不要相信挽留\",\"t\":[\"就算给你加薪，也不要留下，这是经验之谈。\"]},\"1121\":{\"h\":\"原则三：离职原因一定要不可打回\",\"t\":[\"不能说：工资低、加班多、工作内容枯燥等真实原因。\",\"可以说：\",\"打算换城市（跟随男/女朋友）\",\"打算回老家结婚\",\"这类与公司无关的原因是最无法被公司打回的，公司总不可能给你安排新的结婚对象吧。\"]},\"1122\":{\"h\":\"离职时间\",\"t\":[\"最好是在拿到年终奖之后，但如果年终奖发得太晚，就算了吧。\",\"正式提出离职后，最多一个月你就可以离开公司了（这是法律规定）。\"]},\"1123\":{\"h\":\"面试官问离职原因\",\"t\":[\"一定不要说前公司不好，因为相同位置的人会自我带入。\",\"比较安全的离职原因是搬迁、健康、爱情、转行等。\"]},\"1124\":{\"h\":\"简历注意事项\"},\"1125\":{\"h\":\"原则\",\"t\":[\"站在 HR 和面试官角度撰写简历\",\"简明扼要，重要内容放在醒目位置，废话不要留在简历里\",\"内容详尽，工作经历、项目详情要描述清楚\",\"方便阅读，重点、关键词要用醒目样式\"]},\"1126\":{\"h\":\"格式\",\"t\":[\"文件名：方方-前端工程师-北京-2019.pdf\",\"文件格式：PDF 最佳，Word 勉强，Markdown 和在线链接不推荐，前端工程师最好用 PDF + 在线网页两种格式\",\"页数：两页为宜\",\"留白：越少越好\"]},\"1127\":{\"h\":\"内容\",\"t\":[\"必不可少的内容：个人信息、学历、项目、工作经历、技能描述\",\"不需要的内容：自我评价（不如他人评价，如获奖）、对公司的喜爱（过于谄媚）\",\"工程师可以加的内容：开源项目、看过的书、博客\",\"推荐案例：https://github.com/kylewh/Resume，他已进入今日头条工作。\"]},\"1128\":{\"h\":\"投递平台\",\"t\":[\"不用考虑这些途径：51job、智联招聘、大街网\",\"可以考虑这些途径：Boss 直聘、拉勾网、V2ex 招聘板块、Ruby China 招聘板块、CNode 招聘板块、知乎私信、微博私信等\"]},\"1129\":{\"h\":\"投递时间\",\"t\":[\"金三银四，金九银十，年底最差。\",\"一般找到一份工作需要 2 到 4 周的时间，前 1 周简历石沉大海是很正常的。\"]},\"1130\":{\"h\":\"HR 要工资条怎么办\",\"t\":[\"你以为 HR 报给你的工资没有虚报吗？所有工资都是有浮动范围的。\",\"12 个月工资和 16 个月工资能一样吗？\",\"有年终奖和没有年终奖能一样吗？\",\"5% 公积金和 12% 公积金能一样吗？\",\"有些福利并不是以金钱形式发放的，比如工作电脑\",\"有些福利并不是每个月发放的，比如项目奖金、搬迁补贴\",\"所以，工资条不能反映工资。\",\"要工资条你如果愿意给就给，工资条上的数字跟你报的数字差 5k 你都不用虚，原因在上面说过了。\",\"而且 HR 要工资条是侵犯个人隐私的，是双标的。HR 一方面要求本公司员工不要透露工资，另一方面又要你透露目前工资？这很双标。\",\"记住一些原则\",\"原则一：有些公司的 HR 会想尽办法压低工资，挑你的毛病只是为了压价，如工资条、经验、学历（这种公司一般都很穷）\",\"原则二：如果你通过了面试，你就对得起这个工资\",\"原则三：只要有一家公司给你开 8k，就会有第二家、第三家、第四家也愿意给你开这个工资\"]},\"1131\":{\"h\":\"HR 说只能按上一份工资涨薪 30%\",\"t\":[\"HR 说只能按上一份工资涨薪 30%，并说这是公司规定\",\"首先，并没有这样的公司规定。这只是原则一的借口而已。\",\"对于这种说法你要做的就是死咬自己的底价不放，如果你值这个价，她会想办法「向上面申请」的。\"]},\"1132\":{\"h\":\"HR 说你不值这个价\",\"t\":[\"记住原则二，你通过了面试，就值这个价。如果觉得我能力不行，可以再面一轮，或者指出我能力哪里有欠缺。\",\"不然面试的意义是什么？面试的意义不就是看这个人能不能胜任工作吗？而且不是还有试用期吗？\",\"HR 没有质疑你能力的资格，顶多质疑你的人品和价值观，所以只要你不说错话，HR 就没有资格否定你。（除了一些 HR 拥有一票否决权的公司，比如阿里巴巴）\"]},\"1133\":{\"h\":\"面试遇到不会的，心态如何把握\"},\"1134\":{\"h\":\"你需要尽量引导话题\",\"t\":[\"把面试官往你的项目、你会用的技术上面引导。\",\"面试官：你用过 VueRouter 没有？ 回答A：用过。 回答B：用过，我在我的项目 C 中用到了这个技术。\",\"回答A相当于你把方向交给了面试官，面试官就会按他的思路问你，很可能问到他熟但是你不熟的细节。\",\"回答B则会把面试官往你的项目上引导，面试官的下个问题很可能是你在项目C里是怎样用的；当然面试官可能依然按自己的思路问你，但你的引导依然是有必要的。\"]},\"1135\":{\"h\":\"如果遇到不会的，要大方承认，但是\",\"t\":[\"承认不会，程序员最讨厌不懂装懂。如果这个问题很基础，但是你不会，那就是你学艺不佳；如果这个问题比较细节，但是你不会，问题不大。\",\"请求面试官细化问题。一般面试官都会举例说明，或者将问题简化一下，当然也有耿直的面试官直接下一题。\",\"如果细化的问题你还是不会，就直接下一题，不要浪费时间，这里的分失去了，就在下一题中补回来。没有人要求你必须得满分，你只要比其他人答得好就行。\",\"阅读原文\"]},\"1136\":{\"h\":\"程序员如何高效学习（以 Java 为例）\"},\"1137\":{\"h\":\"文章的整体思路\",\"t\":[\"这篇文章大体上会从以下几个部分展开：\",\"认清自己。\",\"学习目的。\",\"时间管理。\",\"学习方法。 \",\"学习的步骤。\",\"获取知识的途径\",\"影响学习的几个因素 \",\"自己的心态。\",\"外物的影响。\",\"其他想说的 \",\"大学生的学习\",\"一些感悟\"]},\"1138\":{\"h\":\"一、认清自己\"},\"1139\":{\"h\":\"1.1\",\"t\":[\"认清自己最关键的一点是【要知道自己到底想要什么】。这是第一步，也是最重要的一步。因为这关系到你能够够选对学习方向，能否沉下心来去学习。\",\"我们都知道，做自己感兴趣的事情的时候，是可以事半功倍的，因为你愿意去做它，而不是出于某种原因不得不去做。\",\"经常会有人问我，现在前端找工作好找么？java 找工作好找么？我要不要学 android 呢？这些问题的答案其实大家心里都明白：只要你足够优秀，学什么都能够找到一份好的工作。\",\"所以说，不要因为某一个方向火，而盲目的去追；也不要因为某一个方向可能不容易找工作而不去学。\",\"记得我有一次这么回答一个朋友的时候，他和我说：很多时候，选择远比努力重要，我选一个我不喜欢但是火的方向也许比我选一个我喜欢但是不火的方向赚的更多。这种想法很多人应该都有，但是我觉得，选择远比努力重要的前提是你这个选择得正确，但是能够做出正确的选择的人，他本身就已经是一个优秀的人了。抛开这点不谈，在一个自己不喜欢的领域你能走的多深入呢？\",\"对一个搞技术的人来说，年龄的增长其实不是那么可怕，可怕的是你没有匹配自己年龄的技术深度。当你的工作换一个刚毕业的学生都能做的时候，你很快就会被淘汰了。所以，选方向一定要选自己感兴趣的方向，因为只有这样，你才有兴趣去往深入了学，你才不会在未来被年轻人挤下去。\"]},\"1140\":{\"h\":\"1.2\",\"t\":[\"认清自己的第二点是【认识到人外有人】。自满，自大，自欺欺人是影响自己进步的绊脚石。如果你觉得，你现在已经很了不起了，你能做到这个程度已经很不错了，你就会停滞不前，然后浪费大把的时间。\",\"这是我自己的亲身经历。我的学校是一个双非大学，计算机也不是学校很好的专业，消息也比较闭塞。在我的圈子里，我觉得自己已经很不错了，我之前也一直这样认为。但是，当我今年开始准备春招准备校招的时候，我发现我错了，和真正优秀的人比起来，我什么都不是。以前觉得自己会的东西，出去一看，大家其实都会；以前觉得很多知识等工作了再去学也不迟，出去一看，发现早就有人学会了。但是，现在认识到这些已经有点晚了，因为已经开始找工作了，没有时间再去让你从头开始学了。\",\"所以说，永远不要自满，要知道人外有人。如果有一天，你觉得周围没有人比你更厉害了，一定要记得，不是你走到巅峰了，而是你的圈子，应该扩大了。只有你的周围，有很多更厉害的人，你才能意识到自己的不足。这也是我常挂在嘴边的：你想变成什么样的人，你就要去认识什么样的人，你的周围是什么样的人，你就会变成什么样的人。要知道，人以群分。\"]},\"1141\":{\"h\":\"二、学习的目的\",\"t\":[\"为什么要学习呢？学习的目的，根本上是为了获取竞争优势，增加选择机会。你比别人懂得多，比别人学的深，你就更有竞争力。对于程序员来说，不懂得学习是没有办法在这个行业混下去的。技术的更新换代，技术的深入掌握都需要去不断的学习，如果你不学，很快就会被淘汰了。\",\"找工作的时候，有其他专业的朋友会羡慕的和我说：你这个专业真好，一毕业月薪就上万，我才3，4千。其实我想说的是，如果不好好学习技术，搞技术的也会失业。大部分的人都只看到一部分计算机的应届生工资很高很羡慕，却忽略了他们这四年是怎么度过的。天上是不会掉馅饼的，计算机专业的每天看剧打游戏，毕业一样找不到工作。希望以后你不会是那群天天打游戏看剧最后抱怨自己工资低的那群人中的一个。\"]},\"1142\":{\"h\":\"三、时间管理\",\"t\":[\"知道了自己的方向，知道了为什么要学，那么我们接下来谈一谈，怎么安排自己的时间，或者说，怎么制定一个计划。\",\"很多人应该都有过这样的经历：我现在很无聊，不知道做什么好，学习吧，不知道学什么，打开电脑也不知道做什么，打开手机也不知道做什么，然后只能选择看个直播，看个电视或者打个游戏来打发时间。当一天过去以后，突然后悔，觉得自己当时要是学习就好了。\",\"为什么会这样呢？是因为你自己没有一个计划，如果你每天都有一个按时间段安排的计划的话，你就不会迷茫了，你就会知道这个时间点自己应该做什么，而不是用看剧打游戏来打发时间。\",\"关于时间的管理。首先，要有一个大一点的计划，比如年计划，月计划，周计划。这一年大体上要打到什么目标，这个月要学习哪些知识。然后是精确到小时的日计划。每一天，哪个时间段做什么都详细的列出来。\",\"其次，不要太盲目自信。很多人其实从来没有完成过自己的计划。如果你真的能够完成你制定的每一个计划，那现在的你一定已经很了不起了。如果你几乎没有完成过自己的计划，那么你一开始制定日计划的时候，不要给自己太多的任务。因为如果你一旦完不成，就会影响自己的信心。最好的方式是，一开始制定一些简单的计划，然后每天很容易就能做到，然后慢慢的去增加自己每天的任务量。最后找到一个最适合自己的节奏。这个过程可能需要很长的时间，因为你要不断的去尝试，去改进。找到最适合自己的作息时间去休息，找到自己工作状态最好的时间去工作等等。\",\"关于时间管理以及计划的制定，每个人都应该有一套自己的计划，因为每个人的情况不同。\",\"最后，不要把你的计划当摆设。虽然我上面说过，很多人其实从来没有完成过自己的计划。但是我还是希望你能够认真的去对待它，因为受益的有且只有你自己。\"]},\"1143\":{\"h\":\"四、学习方法\",\"t\":[\"盲目的学习效果并不好。以前看书的时候，看完一遍再从头看，感觉就像是在看一本新书，完全没有印象。看似自己学了不少，其实真正掌握到的并不多。学习不是你看得书越多，读过的文章越多你就学的越好，而是看你究竟掌握了多了。那么，怎么才能有效的去学习一门新的技术呢？我总结了以下几个步骤。\"]},\"1144\":{\"h\":\"4.1 学习的步骤\",\"t\":[\"确认学习目标\",\"首先，你需要确认你要学什么，切记不要三心二意。学习最好一个时间段专一的去研究一个知识点，不要今天学 python 明天又想学 java 了。做什么事都有有一个目标，不然容易成为无头苍蝇。目标往大了说，可以是成为某一个领域的大牛，往小了说可以是今天的一个学习计划。\",\"hr 面的时候，一个常见的问题是：你的职业规划是什么。一个优秀的人，必然会有一个属于自己的职业规划，知道自己在什么时期要做什么，知道自己每个时期要完成什么样的目标。学习也一样，当你有了一个清晰的目标的时候，你才不会迷茫，才不会不知道做什么好。\",\"制定学习计划\",\"上面也提到了这点，计划可能赶不上变化，也许今天正好有别的事情导致今天的计划没有完成，但是至少大方向是有的，你不会不知所措，不知道最近应该做什么，这才是计划的根本价值。所以，不要担心计划完不成，这是给你自己学，一天的计划完不成又能怎样呢？\",\"自己找资料开始学习\",\"请记住，不要当一个彻头彻尾的伸手党。因为轻易得到的东西你是不会珍惜的。并且，你不要祈祷你这一辈子所有学习需要的资料都有人会提供给你，自己找资料本身就是自学能力的一部分。当然，我并不是说不让大家去群里问，毕竟能问到也是一种本事，但是你一定要有自己的资料来源，无论是博客还是书或者是官方资料。\",\"脑图与流程图\",\"学习从来都不是只看看书就能学会的，自己构建相关知识脑图和相关步骤的流程图是非常有必要并且非常有效果的。比如你要学习java，你可以先从网上找一找别人画的脑图，对java有一个大致的了解，每学一个小的知识点，就自己绘制一个该知识点的脑图，学完之后，自己再画一个整个java体系的脑图，这样你会对java非常的熟悉。比如你学GC，光看书或者博客是很难记住那些流程的，这个时候，你自己画一个流程图，我保证你对这个过程会很清晰。记住：就算是有现成的图，你也应该自己画一个，自己画和看别人的是完全不同的两个层次。\",\"编码\",\"上面的那些，都是掌握理论知识的步骤，是骡子是马还得拉出来溜溜。编码才是重中之重，就算你能把一个知识点吹得天花乱坠，但是一句代码不会写依然没有什么用。\",\"笔记\",\"好记性不如烂笔头，学完的知识，然后记录下来，自己总结一遍，收获有多大你们试试就知道了。\",\"回顾\",\"如果你学的东西，很久都没用，突然有一天你又要捡起它，你会发现，你之前做的努力，太特么值了，你有资料！有脑图！有流程图！还有笔记！分分钟就记起来了。\",\"自己写一个有实际应用的demo\",\"如果有必要，可以写一个有趣的应用，不是简单的范例。\",\"这个过程，其实是很耗时的，学生建议按照这个流程来，因为学生的时间大把大把的，时间很少的就根据自身情况取舍吧。脑图和流程图我觉得收益很高。\",\"上面说到，有的时候看完一本书再从头看，感觉像是在看一本新书。所以我后面看书的时候，也会做相应的笔记，看的时候会在书上勾勾画画，给一些重要的地方打上标记，看完之后，合上书，用记事本把自己刚刚学的的东西写一下（大纲就行），然后再和书上比对一下做一些修改。当我看完一本书以后，对应的，我还会有一个笔记，以后我甚至完全可以看自己的笔记而不需要再看书了。看 + 回忆 + 记录，可以让你充分的掌握一本书的核心。\",\"步骤大体上是这样，但是也千万别死板的都按照这个过程来，毕竟还是很耗时的。下面分享一些获取资料的途径。\"]},\"1145\":{\"h\":\"4.2 获取资料的途径和一些工具。\",\"t\":[\"找资料的途径\",\"百度/google：先看看他都能干嘛\",\"官网：官网的文档一般足够了\",\"相关书籍：京东和当当经常有活动的。\",\"社区：社区也会有人做教程的，还会有一些个人项目可以参考\",\"github：可以在github 看看某个知识点的 awesome。\",\"各大博客以及知名博主的个人博客：看看一些高质量博客也不错\",\"微信公众号：试着找一下相关的微信，当然，微信上的文章很多都来自于博客，但是微信的好处就是，你不用自己找，别人已经帮你找好了，缺点就是，量太少。\",\"知乎专栏：和博客差不多。\",\"一些视频或者 wiki 教程：现在有很多教学视频的网站，有收费的也有免费的。常见的比如慕课网，菜鸟教程，网易云课堂，极客学院，易百教程等。一些培训机构的视频有的也不错。\",\"一些工具\",\"teambition 。一个团队管理软件，当然，个人用也是蛮好的，有各个平台的客户端。我用它来安排自己的计划。\",\"百度脑图。在线脑图，免费无限容量。\",\"xmind。\",\"processon。也是在线的，可以画流程图和脑图。免费的容量有限。\",\"Visio。绘制各种图。\",\"番茄土豆。番茄工作法的管理工具。\",\"coding。代码管理网站，类似于github，是国内产品，速度会相对快一点。\",\"我觉得github可以当做一个个人品牌来经营，所以最好只放一些很好的项目，一些无关紧要的代码放在coding就好了，开源中国的码云也行。\",\"记笔记的一些工具\",\"gitbook : 可以直接生成电子书的一个开源工具，不知道的可以了解一下，我现在在用。\",\"简书：因为简书可以创建文集，就和文件夹似的，用来做笔记也不错。\",\"有道云笔记。也挺好的（我喜欢用markdown。有道云支持）\",\"印象笔记\",\"各大博客\",\"自己搭博客\",\"OneNote\",\"比较推荐用markdown来做笔记，markdown常用的语法也就五六个，很好记，也很好用。\"]},\"1146\":{\"h\":\"五、影响学习的几个因素\"},\"1147\":{\"h\":\"5.1 自己的心态\",\"t\":[\"心态其实是很关键的。我们的周围总会发生一些事情，有的时候这些事情会影响到自己的情绪和心情。这个时候如果你自己调节能力比较差的话，就可能会什么都不想做，不想工作，不想学习。然后颓废好几天。\",\"我想说的是，一个优秀的人一定得是一个乐观的人，不执着于得失，不轻易被影响，积极的去面对生活中所发生的一切。\"]},\"1148\":{\"h\":\"5.2 外物的影响\",\"t\":[\"我主要说的是手机。现在手机已经成为人生活中不可或缺的东西了，它带给我们方便，但是同时，它也占据了我们大量的时间。我不知道大家平时会不会时不时的打开手机，大部分情况下它和之前毫无变化，但是你还是忍不住的打开它瞅几眼；或者有几个群在不停的闲聊，然后你也忍不住的参与进去，不知不觉时间就溜走了。\",\"不要成为被手机支配的人，所以，当你工作或者学习的时候，把手机静音，放在一边，不去看它，这样你会节省出很多的时间。\",\"除了手机，另一个外物的影响周围的环境。如果你能在一个嘈杂的环境中学习，那就很棒了，如果不能，记得给自己找一个舒适的学习环境。\"]},\"1149\":{\"h\":\"六、其他想说的\"},\"1150\":{\"h\":\"6.1 关于大学生的学习\",\"t\":[\"我知道，预定了这次分享的大部分其实都是学生，还有一些刚刚入学的新生。我想说的是，玩可以，但是一定要记得，你来上学是为了学习知识的，千万不要本末倒置了。我现在最后悔的一件事就是大一的时候没有好好得去学习，不要变成下一个我，\",\"大学学计算机其实大部分时间还是得看你自己，老师上课讲的东西很重要，但是那些都是基础中的基础，凭借这些并不能够让你找到一份满意的工作，所以你还需要自己去学很多很多的东西。我简单的归纳了一下大学几年要做的事，你们可以参考一下（假设你以后的方向是 java ）。\",\"大一\",\"这个时候，刚刚接触计算机，你可能什么都不懂，听课也是一脸懵逼，什么for循环，if语句，恶心的不得了。这个时候你要做的不是抱怨，而是去努力的寻找乐趣。因为你已经入了这个坑了，除非你转专业，否则你是摆脱不了它的。\",\"怎么寻找乐趣呢？我觉得，编程最大的魅力，就是当你成功的时候的那种发自内心的成就感。不知道大家还记不记得第一次写 helloworld 的时候，各种出错——分号写成中文的了，大括号少了一个——但是最后终于成功的输出了结果的那种喜悦。\",\"对于一个刚刚接触编程的人，我觉得，写游戏是最容易获得成就感的。这里给大家推荐一个之乎专栏— 做游戏，学编程（C语言）。专栏的作者，通过让一些学生做游戏来学习c语言。我觉得这个一个很好的学习方式，即有挑战性，又可以培养出成就感。\",\"大学的入门语言差不多都是c或者c++吧。。如果不是，你也可以参考一下专栏里的小游戏，然后用你自己的语言试着写一下。\",\"但是，我要重点说的是。写游戏其实是一件很有挑战性的事。有的人也许会在一开始就陷入困境，不知道如何继续下去。这个时候，如果你能坚持下去，多问问老师，学长，百度，google，把问题解决，那你以后肯定会很优秀。如果你放弃了，不要灰心，因为并不是所有的人都适合通过游戏来培养兴趣，你也可以通过做一些acm的题来提高自己。每个学校应该都有相关的网站吧。如果没有的话，可以去浙大的看看。或者 leetcode 或者牛客网也可以 。做一些自己能力范围之内的题，也可以提高自己的兴趣。\",\"当然，这些只是针对一部分同学，毕竟很多人其实对代码无感。。根本耐不下性子去写代码。对于这部分同学，我建议去学习html 和 css。因为它们入门超级简单，是用来写网页的。没有 c 语音那么复杂的逻辑，几个标签，几个css就可以设计出一个精美的网页，我想这也会很有成就感吧。\",\"大一的这一年，是打基础，培养兴趣的一年。不需要你有多么大的成就，写出多么厉害的程序。只要你能够培养出兴趣，并且愿意在编程这条路上走下去，那么你的任务就算完成了。\",\"所以，这一年，你要做的，就是培养兴趣，让自己爱上编程（最基本的要求）。\",\"大二\",\"假设你现在已经喜欢上编程了。但是一般大一只会学一门语言（默认c/c++，不要问我为什么，因为我就是这么学的。。）。所以你可能只是写了几个小游戏，写了个小管理系统或者刷了一些题。你不满足于现状，你想做一些更有意思，更好的东西。同时，这个时候，学校应该也开了 java 课了。（假设你要学 java ）。\",\"写在前面：大二要做的，是拓宽你的广度！！！广度！！\",\"首先，你要好好学 java。可能学校的进度是一个学期。但是我建议大家用一个月的时间学完。因为有了 c 和 c++ 的基础，java 其实很容易就学会了（入门级学会）。更好的情况是，你在大一结束的那个暑假，就抽时间先搞定 java 基础。这样当开学的时候，别人还没接触 java，而你可以骄傲的和别人说，你都学完了。成就感满满的。\",\"那么，怎么学 java 基础呢？我的建议是视频为主，入门书为辅，自己跟着写代码。\",\"看书其实是一件很枯燥的事情，如果你初学 java，只是看书的话可能配置一个环境变量就要搞好久，这会打击你的自信心。不要小看配置环境变量这个过程。我记得当时两天配不好环境变量最后让我帮忙的人可不少。但是视频就好多了，因为老师会亲自演示给你看，你会少走很多弯路，并且也比书有趣多了。\",\"书为辅，是因为老师不可能记得所有的知识，总会有疏漏的地方或者讲得不太好的地方，这个时候 书就可以派上用场了。看完一节课的视频，然后关掉视频，自己写一遍相应的代码，出错了自己先试试能不能解决，是在不能的话，再看一遍视频，直到跑通。然后去看看书里对这部分知识的讲解，加深印象，查漏补缺。\",\"这里的重点是，一定要自己写一遍代码。你看的时候觉得自己会了，可是大部分时间，你一写全是错误。所以一定要自己写。并且，在你初学的时候，不要使用集成开发环境（eclipse idea NetBeans等），就使用notepad++ 这种类型的编辑器就可以。\",\"这套流程最大的缺点就是耗时比较久，但是效果是很好的。java 里有很多都和 c/c++ 一样的，比如一些语句什么的，如果你已经掌握的很好了，直接忽略掉这些也是可以的，这就看你自己的情况了。\",\"推荐一些学习资料。\",\"视频： 毕向东，马士兵，韩顺平的视频都挺好的。口碑也都不错，不信可以自己去百度一下。我看的毕向东的，讲的挺有趣的。但是每个人口味不一样，你可以多下载几套，都听一下，然后选一套自己喜欢的。\",\"书籍：入门推荐《head first java 》。head first 是一个系列，这系列书最大的特点是图文并茂和案例驱动，让读书的过程不那么的枯燥。《疯狂java讲义》据说也挺不错的，但是我没有看过，不做评价。\",\"编辑器推荐：notepad++ 免费，小巧。初学者够用了，直接百度下载就好。sublime , vs code, atom 也可以，挑一个自己喜欢的就好。\",\"一个月，干掉java基础！这是你大二首先要做的事。\",\"前面说过，这一年，你要做的是拓宽自己的广度。什么意思呢？就是说，你要尽可能的去多接触一些技术，多学一些知识，因为你以后很难再找到这么多你可以自由支配的时间了。\",\"java基础搞定。接下来，学习java web。\",\"你要知道，优秀的人永远都走在大部队的前面。不要学校安排什么你就学什么，学校不安排你就不学。事实上有的老师讲的不是很好，大学里真正有用的知识，都是自己学的。所以，接下来要做的是自学 java web。\",\"依旧是视频+书+写代码。\",\"java web更重要的是实践。我当时学的时候的书就是学校的教材。。我是基本没看书的。就跟着视频一步一步来，有问题就 google。在大二上学期结束的时候，完成 javaweb 的学习。\",\"因为需要和前台做一些交互，所以免不了要学一点前端的知识（html + css + js）。\",\"这个过程中，遇到的问题千奇百怪，我记得我当时一个小问题 google 了一天都没能解决，最后才知道是 jar 包版本的问题。。所以，遇到问题是很正常的，遇到很难解决的问题也是很正常的，只要你肯问，肯查总能解决。\",\"好了，你现在已经有了自己写一个小网站的能力了（丑点无所谓）。接下来去参加比赛！进实验室！做项目！没有什么比做一个项目更能提高水平了。\",\"所以，你大二下的任务就是尽可能的去做项目，依次来巩固你学的技术。可以参加一些比赛，或者加入实验室，或者寻求老师的帮助。总之，你要做项目！\",\"除此之外，你需要继续扩展你的视野。前端（不是你之前学的简单的html）,python,android,ios,cocos。。。只要是你感兴趣的，就去接触一下，不需要你学的多厉害，也不需要你完全掌握。只是为了让你的视野更加开阔，知道原来还有这么多技术，原来还可以这样。\",\"大二的一年，你需要学会 java 和 javaweb，并且至少做一个拿得出手的项目。同时，尽可能的提高你的视野。当你觉得你一无所知，你还是个菜鸟，这一年的任务就完成了。\",\"大三\",\"这是很关键的一年，因为这一年你将决定是否考研。考研的我就不管了。。接下来是针对准备一毕业就工作的同学的。\",\"写在前面：这一年，你要做的，是深度！\",\"通过大二一年的努力，你的广度已经足够了。并且在这个过程中，你应该也找到了自己最感兴趣的方向，如果没有，那就继续研究 java 吧，总比你不知道学什么好。无论怎样，这一年，你的重心都应该放在一条路上。以 java 为例。\",\"首先，巩固基础！\",\"这是最重要的。怎么做呢？进阶书籍+看博客+写总结+写开源项目。\",\"这个阶段的视频不是很多，也没有必要了。直接看书+看博客+开源项目，最后再总结就够了。我举个例子，比如，我现在要学设计模式，我买一本《head first 设计模式》然后一个模式一个模式的学，每学一个模式，看一遍书，然后 google 一下这个模式，看几篇高质量博客，结合书和博客自己写一个总结，甚至可以自己写一个博客专栏，让后来者也能享受到你的学习成果。同时，可以好好整理一下自己学习过程中的代码，放到github上，最好可以试着封装一下这个模式，让其他人更方便的使用这个模式。当你收获一个又一个的star时，你会非常有成就感的。\",\"上面是学习的大致方式。学完了，怎么检查自己有没有学好呢？给大家提供一个网站牛客网，你打开就知道怎么用了。\",\"基础都包括什么呢？\",\"面向对象的思想。\",\"java常用类。\",\"集合框架。\",\"io\",\"nio\",\"多线程并发\",\"设计模式\",\"算法\",\"jvm\",\"计算机网络\",\"spring\",\"orm框架\",\"。。。\",\"每个知识点，不只是要会用，更要能理解一下底层的原理，有必要的话可以看看 jdk 源码或者框架源码。\",\"一些书籍的推荐\",\"初级： \",\"《java从入门到精通》 没看过，但是买的人很多，有视频。\",\"《疯狂java讲义》 没看过，买的人也不少。\",\"《head first java》head first系列都蛮好的，看起来不乏味。\",\"中级： \",\"《java编程思想》java程序员必读书籍，厚厚的，让你有种看不完的感觉，但是认真学了收获会很大\",\"《java核心技术卷1 2》 推荐买第十版，最新的。也是讲基础的，虽然很啰嗦，但是正是因为厚，写得多，所以你才能理解的更透彻。\",\"《head first 设计模式》设计模式经典之一，有趣的案例驱动，看起来很有意思。\",\"《设计模式之禅》国内大牛力作，通俗易懂，某些设计模式的实现和《headfirst设计模式》有区别，可以两本一起看。\",\"《大话设计模式》没看过，也挺有名的，不做评价。\",\"《java并发编程实战》多线程好书，不光教你怎么用，还告诉你为什么要这么用。\",\"高级： \",\"《effevtive java》必看书籍。讲了70+如何写好java代码的例子。看了这些你会觉得以前写的代码都是问题。\",\"《重构 改善代码既有的设计》必看书籍。重构你之前的代码能让你有一个很高的进步。\",\"《深入理解java虚拟机》必看，不解释。\",\"《java8实战》java9都要出来了，你java8还不会说不过去的。。\",\"《java性能权威指南》学完虚拟机再看它，深奥的一比。\",\"你要知道，bat等大厂每年会有两次招聘，一次春招，在每年3-5月，一次秋招8-10月。春招是招实习生的，秋招是招正式员工。所以，如果你想进这些公司，就要提前做好准备。至少，上面的那些基础你是必须得都掌握的。\",\"大三这一年，要让你的深度足够，有能力的可以继续延伸自己的广度。这个阶段，最忌讳的是朝三暮四。早上看 python，下午发现 go 很有趣，看了一下午 go，晚上听说 R 很厉害，又去研究 R 了。千万不要这样！不要成为各个领域的杂牌军，你现在要做的，是在一个方向有一些建树。\",\"大四\",\"去实习。\",\"实习的话我能给的建议不多，虽然我的实习经历还蛮多的。但是毕竟不是混迹职场多年的人，就不乱说了。\",\"找工作，待遇，环境挺重要的。但是我觉得，这个公司的技术栈，行业背景也是很重要的。我实习的三家公司是三个不同的行业，所以我知道，不同的行业差距还是很大的。有的公司招聘的时候会要求你在这个行业有过经验啥的。所以，行业背景还是有必要注意一下的。同时，为了自己为了的前途，一定要问清楚公司的技术栈！\",\"当然：作为一个有抱负的人，毕业设计一定要向着优秀发展！并且依旧要不断提高自己的水平。这个时候，学什么可能得根据公司的需求来了，但是，永远不要停止学习！\",\"简而言之，这四年你应该这样过： 大一：培养兴趣 大二：横向发展，广度优先 大三：纵向发展，深度优先 大四：选好方向，不断提高自己\"]},\"1151\":{\"h\":\"6.2 一点感悟\",\"t\":[\"很多时候，一个好的老师或者是指导你的人会让你受益终身，尽可能多的去认识这样的人。\",\"谦虚和乐观是受用一生的财富。多去认识更优秀的人，而不是在自己的小圈子里沾沾自喜。\",\"真正优秀的人不是埋头苦读不问世事，他们也会打游戏，也会看剧，也会追番。但是，他们会合理的安排时间。\"]},\"1152\":{\"h\":\"七、结语\",\"t\":[\"文章写得很匆忙，很多东西其实是我以前写过的。我的学习经验也不是很丰富，工作经验也不是很多。所以难免有写得不对或者不到位的地方，一些细节也没有展开谈，希望大家多多包涵。\",\"如果看完这篇长篇大论对你有一点帮助，那么我的目的就达到了。如果没有什么帮助，我表示很遗憾，争取以后能够写出对你有帮助的文章。\",\"我举得很多例子都是针对大学生和 java 的。一方面是因为我自己还是个学生，方向是 java，对这个比较熟。一方面是我知道参与这次分享的很多人都是我的朋友，他们也是学生，也在学习 java。对与一部分人，可能要说一声抱歉了。\",\"不过，学习的方式是想通的，可以互相借鉴。\",\"阅读原文\"]},\"1153\":{\"h\":\"Chrome书签被劫持\",\"t\":[\"今天想到网上下一个软件，原本我以为自己把握的住结果还是着了它的道。下完之后浏览器一顿跳。我对此很敏感我知道我肯定中招了，果不其然我打开一看浏览器的url全被换了只要是有知名度的像bilibili百度都被换了，换成它的网站由它进行重定向。我试着打开它给的淘宝点进去给我重定向到了淘宝但是后面有pid。\"]},\"1154\":{\"h\":\"逼逼赖赖\",\"t\":[\"它劫持后给的域名统一是 piefeng.cn/\",\"我在这里下的软件 http://www.xue51.com/soft/6020.html\",\"我找了很多解决方案，甚至生硬的一个个重新添加回来。\",\"后面我最终的解决是把所有书签删了搭梯子重新同步一下，泪目.jpg   终于好了！！！再也不敢了。\"]},\"1155\":{\"h\":\"Kali 破解 WIFI\",\"t\":[\"经过实践可行 , 但成功与否取决于字典\",\"需要虚拟机+指定外接网卡(淘宝)\",\"IMG_2708(20220402-193141)\",\"Kali镜像: http://old.kali.org/kali-images/\",\"部分字典和教程: https://github.com/conwnet/wpa-dictionary\"]},\"1156\":{\"h\":\"ShareList挂载阿里云盘\",\"t\":[\"2022/2/21\",\"起因是看到别人博客搞了个文件系统很多文件且文件很大，兴趣就来了。经过了解发现是挂载了阿里云盘，用的ShareList技术。\",\"于是乎我也想整一个。昨天折腾了一下午换来了一个501，今天终于弄好了。\"]},\"1157\":{\"h\":\"一、操作\",\"t\":[\"找了很多篇文章，踩了很多坑。用了docker，用了宝塔，也自己试着二进制装跑bash。结果都没能达成目的。折腾了半天结果发现有大佬开发的一键脚本。\",\"真正让我成功的是这篇文章：\",\"https://media.cooluc.com/source/sharelist\",\"想看更详细点的就这篇：\",\"https://zhuanlan.zhihu.com/p/398231563?ivk_sa=1024320u\",\"其他的就不用看了，已经全部帮忙踩过一遍坑了。\"]},\"1158\":{\"h\":\"二、注意点\",\"t\":[\"唯一需要注意的是：\",\"目录加密\",\"在需加密目录内新建 .passwd 文件，type为验证方式，data为验证内容。 目前只支持用户名密码对加密（由auth.basic插件实现）。 例如：\",\"type: basic data: - user1:111111 - user2:aaaaaa \",\"user1用户可使用密码111111验证，user2用户可使用密码aaaaaa验证。和官方文档不一样。\"]},\"1159\":{\"h\":\"三、总结\",\"t\":[\"最后放一下ShareList官方地址（里面有文档）：https://github.com/reruin/sharelist\"]},\"1160\":{\"h\":\"Windows To Go U盘\",\"t\":[\"u盘买了很久了也不贵，感觉很物超所值。现在我就是在学校的实验楼写这篇文章，其实很早就想写了但一直没付出行动。我觉得自己U盘的使用频率还是蛮大的。真的会让我有一种很方便的感觉。\",\"因为自己是一个他律的人不想呆在寝室，需要借助学习氛围比较好的地方，去图书馆的话就还得背电脑很重，实验楼的话就离得近只要带上自己的U盘和耳机就行了。尤其是上个学期经常往学校的实验楼跑，实验楼电脑又比较好，但是由于电脑的使用习惯没到位就想到了Win To Go来弥补。事实证明我是对的。\",\"可以仔细看一下下面这张图，我的使用场景是三（随身携带工作环境）：\",\"img\",\"贴一张学校电脑的配置：\",\"img\",\"实验楼抢占计划：\",\"img\",\"贴一张U盘使用状况：\",\"img\",\"具体操作看 萝卜头IT论坛\",\"U 盘我个人觉得蛮好200出头，摸着也舒服金属质感有分量，而且颜值也高旋转盖帽，总之满意。\",\"需要注意的点：\",\"Q: 学校机房网络IP地址是固定的而自己坐的位置又不固定，总不能每次都要花时间手写网络IP吧?\",\"A: 我是用的52破解网里面一款名叫IP地址修改器的软件解决的\",\"img\",\"需要注意U盘冒白灯才是USB 3.2，个人使用感受就是爽。和正常用自己电脑没差，流畅的很！\",\"另外windows系统的一些好用的软件，例如禁止更新，激活等都在我的网盘里。把自己的一套使用环境搭起来也蛮快。\",\"欢迎下载：1024zzqの宝库\",\"Q：如果 BIOS 启动时候，发现不能 U 盘启动锁了，这时候其实也是有方法的！我在学校亲测成功！\",\"A：HP BIOS输入5次错误密码后会出提示码用提示码逆向算出密码 实测有效\",\"有了这技术其实去网吧都可以实现免费上网了，但肯定会被打而已hh~\",\"闲言：很多东西仔细去想并把他们连接起来其实是可以拓宽思路的。有很多有趣的东西等着我们去发现。\",\"补充：在公司用了2个月U盘的系统(因为嫌搭环境麻烦)，电脑从来没有关过机！质量真的没的说！\"]},\"1161\":{\"h\":\"docsify快速部署优美的在线文档\",\"t\":[\"推荐一个非常牛的文档网站生成器：docsify\",\"我通过这个工具，成功将码云上的个人学习笔记发布到GiteePages上，有兴趣的小伙伴可以戳一戳: https://codezzq.gitee.io/study-notes/#/\",\"主页README.md\",\"image-20220307141418733\",\"文章详情页\",\"image-20220307140259944\",\"咋样，默认风格绿色小清新，给我的体验非常nice。除此之外，它还提供许多非常强大的可定制的内容，最主要的是，你只需要敲几行命令就可以快速启动了！\",\"如果你也想拥有一个这样的文档网站，可以查看官方网站：https://docsify.js.org/#/zh-cn/quickstart，讲解十分详细，当然，本文也会做一定的记录。ok，让我们开始吧。\",\"为了演示，我们事先新建一个目录docsify用来存放待会要下载的内容。\",\"进入docsify目录，打开命令行全局安装 docsify-cli 工具，可以方便地创建及在本地预览生成的文档。\",\"$ npm i docsify-cli -g # 前提要安装好npm环境\",\"初始化项目，我们直接在当前目录下初始化。\",\"$ docsify init\",\"初始化成功后，我们可以看到docsify目录下多出三个文件：\",\"index.html 入口文件\",\"README.md 会做为主页内容渲染\",\".nojekyll 用于阻止 GitHub Pages 忽略掉下划线开头的文件\",\"运行如下命令启动本地服务器，实时预览文档效果。\",\"$ docsify serve # 默认启动当前目录，docsify serve docs表示启动当前目录下的docs目录\",\"ok，接着访问：localhost:3000/，成功出现内容。\",\"当然了，运行成功之后，你难免会想方设法去做一些适合自己的定制，比如代码高亮，链接，搜索，字数统计等等功能，你可以按照官网的文档，逐一添加自己喜欢的插件，在刚刚生成的index.html中定制。\",\"比如，假设我想让我的网站名显示，并且右上角标注github图标\",\"如果你想要统计字数并显示，你可以添加插件\",\"如果你想更换主题，你可以更改css引入\",\"具体看官方文档，或者直接把我的index页面download下来\",\"部署的方式很多，这里使用Gitee的GiteePages，没啥的，就是国内访问的速度更快一点。\",\"我们创建仓库并上传文件，点击服务，选择GiteePages\",\"image-20220307142217883\",\"强制使用HTTPS，选择部署目录，默认为整个仓库。接着访问生成的url即可\",\"注意，每次上传更新代码，服务不会自动更新，需要手动更新。\"]},\"1162\":{\"h\":\"天天都在用的软硬件\",\"t\":[\"推荐一下 WGestures 2 这一款手势软件，我从1开始用，用了很久很久了估摸着也有4-5年了。这款软件的自己的使用习惯配置文件也放在我的网盘里1024zzqの宝库。还是值得安利的。对我而言是可以大大提高我的办公学习效率让我觉得爽的一款软件的！\",\"让我觉得爽的另外一款软件：欧陆词典\",\"多端使用，笔记等支持同步。主要是我导入了一个朗文5的包真的巴适，这点也很重要。虽然我英语学的不怎么样但这些软件我是真的用的溜。我像有道云各种都有用过但是最后就留下了这个，三端都有使用。还有墨墨背单词手机端也留着同样值得推荐。\",\"导入朗文5时候碰到的问题：ios一台手机特别丑还不显示中文，但平板和另一台又好看又自动显示中文。\",\"解决办法：清除软件缓存\",\"但我还是有疑问：ios删除app后不是没有残留了吗，哪来的缓存\",\"总之：\",\"吹爆朗文5~ 搭配欧陆直接起飞。再来一手墨墨，从此爱上记单词。\",\"虽然学习整得不行，但工具还是整的明明白白的。\",\"前言：自己算半个苹果粉，想讲述一下自己怎么会爱上这种感觉。 有一种感觉，就是同一样东西在你手里只能用出它50%的功效，但在别人手里却能发挥出它80-90%的能效。就和一台电脑到你手里只能打游戏，但在别人手机却不仅仅只能打游戏还能挣钱写代码p图一样。\"]},\"1163\":{\"h\":\"IOS 15 & iPadOS 15\",\"t\":[\"最近更新了新系统，我今天用了一下我发现我是真的爱。\",\"我最喜欢的功能：\",\"图片OCR (赞！！！)\",\"三指捏合实现复制粘贴图片。\",\"备忘录和提醒事项分类\",\"iPad右下角拉出快速备忘录（这个配合看视频学习真的绝）\"]},\"1164\":{\"h\":\"使用日常\",\"t\":[\"ipad还得谢谢我妈妈和嫂嫂的资金支持，也可以说是机缘巧合入手的。\",\"我用的很多的：\",\"iCloud\",\"air pods 因为是在学校里，所以深度使用每天都会用，能和所有设备无缝衔接。\",\"分屏\",\"leetcode应用支持代码(以前我都是在网页上码) *提醒事项，备忘录，现在记性变差了越来越依赖于这两个。 *欧路词典(下了一个朗文5的词典是真好用) *notability(现在128篇笔记了(数学，代码模板，生词本)，我手机也会下一个有时看我的笔记。自己买了一盒pencil的笔头，因为我都是裸笔+类纸膜\",\"goodnotes(搞了一次四级，把四级pdf卷子放上加上欧陆词典简直不要太方便)\",\"margenote3(最开始的时候用了一段时间，可以上课不带书)\",\"注：gn作草稿和做四级卷子可以和欧路搭配收藏生词其他时候主力军还是nb 善用工具还是会给带来科技的快感和生产力的\",\"产品清单：\",\"iPhone\",\"ipad air3(我的是256G哔哩哔哩缓存了大量学习视频，因为学校有些地方没网，还是蛮方便的，学习利器)\",\"罗技k380(白色的好看好用又不贵，我现在码的这篇文章都是用的这个)\",\"罗技鹅暖石鼠标(用的比较少，但是如果要深度触控的话还是蛮好)\",\"air pods(天天都在用)\",\"注：真的当你有多件苹果设备后苹果生态带来的科技感便利感还是非常不错的，比如在手机复制个图片或者文字，我能在平板粘贴出来。再比如air pods无缝衔接。还有就是AirDrop也很方便，我发东西都是它，另外就是iCloud了同步很舒服。\"]},\"1165\":{\"h\":\"杂言\",\"t\":[\"以前不能理解那些每个月花钱订阅服务的人，现在懂了。我也开始订阅iCloud和apple music了\"]},\"1166\":{\"h\":\"玩转 Spring 全家桶\",\"t\":[\"进 title link 看课程目录、课程介绍\",\"平板问题：\",\"springboot datasource自动装配mysql数据源。。h2为什么不用配数据源\",\"项目需要有自己的parel如何处置springboot的parent\",\"spring-boot-dependencies 放到 <denpendencyManagement>\",\"CommandLineRunner 接口的作用\",\"CommandLineRunner 接口是 Spring Boot 中的一个接口，用于在应用启动后执行一些特定的任务。该接口只有一个方法 run()，当 Spring Boot 应用启动完成后，会自动执行 run() 方法。CommandLineRunner 接口常用于执行一些初始化任务，例如读取配置文件、初始化数据等。与之类似的还有另一个接口 ApplicationRunner，不同之处在于它的 run() 方法接收的参数是一个 ApplicationArguments 对象，该对象封装了命令行参数的信息。通常情况下，我们可以通过实现 CommandLineRunner 或 ApplicationRunner 接口，在 Spring Boot 应用启动后自动执行一些初始化任务。\",\"h2数据库为什么不需要配置\",\"嵌入式数据库：H2数据库是一款嵌入式数据库，也就是说它可以被嵌入到Java应用程序中，作为Java程序的一个库。因此，H2数据库不需要独立的服务器进程，不需要额外的配置和管理，只需要在Java应用程序中进行简单的配置即可使用。\",\"图片很清楚了\",\"我理解：重写三个bean\",\"DataSourceProperties 这样即可在configuration配置我的数据源，区分开其他的加前缀\",\"DataSource 通过上者的 API Create 数据源，大致就是initializeDataSourceBuilder方法通过 ClassLoader 拿 driverClassName 创建\",\"PlatformTransactionManager    每个数据库都要设好自己对应的事务管理器\"]},\"1167\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1168\":{\"h\":\"408 Network\"},\"1169\":{\"h\":\"Studynotes\"},\"1170\":{\"h\":\"Distributed Lock\"},\"1171\":{\"h\":\"Guli Mall\"},\"1172\":{\"h\":\"JUC\"},\"1173\":{\"h\":\"JVM\"},\"1174\":{\"h\":\"Java Framework\"},\"1175\":{\"h\":\"Java SE\"},\"1176\":{\"h\":\"Linux\"},\"1177\":{\"h\":\"MQ\"},\"1178\":{\"h\":\"No SQL\"},\"1179\":{\"h\":\"Ruo Yi\"},\"1180\":{\"h\":\"SQL\"},\"1181\":{\"h\":\"ZOther\"},\"1182\":{\"h\":\"Upupor\"},\"1183\":{\"h\":\"408\"},\"1184\":{\"h\":\"Abandon Project\"},\"1185\":{\"h\":\"他山之石可以攻玉\"},\"1186\":{\"h\":\"网上冲浪\"},\"1187\":{\"h\":\"Spring Geekbang\"}},\"dirtCount\":0,\"index\":[[\"玩转\",{\"0\":{\"1166\":1}}],[\"玩可以\",{\"1\":{\"1150\":1}}],[\"杂言\",{\"0\":{\"1165\":1}}],[\"罗技鹅暖石鼠标\",{\"1\":{\"1164\":1}}],[\"罗技k380\",{\"1\":{\"1164\":1}}],[\"白色的好看好用又不贵\",{\"1\":{\"1164\":1}}],[\"产品清单\",{\"1\":{\"1164\":1}}],[\"产生原因\",{\"1\":{\"107\":1}}],[\"欧路词典\",{\"1\":{\"1164\":1}}],[\"欧陆词典\",{\"1\":{\"1162\":1}}],[\"赞\",{\"1\":{\"1163\":1}}],[\"吹爆朗文5~\",{\"1\":{\"1162\":1}}],[\"咋样\",{\"1\":{\"1161\":1}}],[\"质量真的没的说\",{\"1\":{\"1160\":1}}],[\"闲言\",{\"1\":{\"1160\":1}}],[\"盘启动锁了\",{\"1\":{\"1160\":1}}],[\"盘我个人觉得蛮好200出头\",{\"1\":{\"1160\":1}}],[\"欢迎下载\",{\"1\":{\"1160\":1}}],[\"激活等都在我的网盘里\",{\"1\":{\"1160\":1}}],[\"激动人心的特性\",{\"1\":{\"473\":1}}],[\"摸着也舒服金属质感有分量\",{\"1\":{\"1160\":1}}],[\"萝卜头it论坛\",{\"1\":{\"1160\":1}}],[\"踩了很多坑\",{\"1\":{\"1157\":1}}],[\"踩坑\",{\"0\":{\"235\":1,\"258\":1,\"456\":1},\"1\":{\"223\":1,\"267\":1,\"591\":1,\"1046\":1}}],[\"踩坑很久发现我nacos配data\",{\"1\":{\"150\":1}}],[\"兴趣就来了\",{\"1\":{\"1156\":1}}],[\"淘宝\",{\"1\":{\"1155\":1}}],[\"破解\",{\"0\":{\"1155\":1}}],[\"破坏发生死锁的四个条件其中之一即可\",{\"1\":{\"377\":1}}],[\"泪目\",{\"1\":{\"1154\":1}}],[\"逼逼赖赖\",{\"0\":{\"1154\":1}}],[\"果不其然我打开一看浏览器的url全被换了只要是有知名度的像bilibili百度都被换了\",{\"1\":{\"1153\":1}}],[\"争取以后能够写出对你有帮助的文章\",{\"1\":{\"1152\":1}}],[\"争抢不是很激烈的情况下优先选择\",{\"1\":{\"83\":1}}],[\"谦虚和乐观是受用一生的财富\",{\"1\":{\"1151\":1}}],[\"纵向发展\",{\"1\":{\"1150\":1}}],[\"横向发展\",{\"1\":{\"1150\":1}}],[\"培养兴趣\",{\"1\":{\"1150\":1}}],[\"培养兴趣的一年\",{\"1\":{\"1150\":1}}],[\"晚上听说\",{\"1\":{\"1150\":1}}],[\"晚上9点到10点睡觉\",{\"1\":{\"980\":1}}],[\"秋招是招正式员工\",{\"1\":{\"1150\":1}}],[\"春招是招实习生的\",{\"1\":{\"1150\":1}}],[\"厚厚的\",{\"1\":{\"1150\":1}}],[\"巩固基础\",{\"1\":{\"1150\":1}}],[\"丑点无所谓\",{\"1\":{\"1150\":1}}],[\"肯查总能解决\",{\"1\":{\"1150\":1}}],[\"肯定你的点滴进步\",{\"1\":{\"1077\":1}}],[\"肯定是不行的\",{\"1\":{\"928\":1}}],[\"肯定是有的\",{\"1\":{\"312\":1}}],[\"肯定先是静态块\",{\"1\":{\"658\":1}}],[\"肯定就是验证过密码的可以直接放行的只关心\",{\"1\":{\"627\":1}}],[\"肯定不能用\",{\"1\":{\"618\":1}}],[\"肯定的拿到这个结构来能执行啊\",{\"1\":{\"372\":1}}],[\"肯定需要公网ip才能访问到你\",{\"1\":{\"194\":1}}],[\"挑一个自己喜欢的就好\",{\"1\":{\"1150\":1}}],[\"挑你的毛病只是为了压价\",{\"1\":{\"1130\":1}}],[\"据说也挺不错的\",{\"1\":{\"1150\":1}}],[\"据hash值决定的\",{\"1\":{\"688\":1}}],[\"口碑也都不错\",{\"1\":{\"1150\":1}}],[\"韩顺平的视频都挺好的\",{\"1\":{\"1150\":1}}],[\"韩梅梅\",{\"1\":{\"765\":1,\"766\":1,\"768\":1}}],[\"马士兵\",{\"1\":{\"1150\":1}}],[\"课了\",{\"1\":{\"1150\":1}}],[\"课程内容\",{\"0\":{\"870\":1}}],[\"课程介绍\",{\"1\":{\"546\":1,\"1166\":1}}],[\"恶心的不得了\",{\"1\":{\"1150\":1}}],[\"恶意的还是无意的都要防止一下\",{\"1\":{\"87\":1}}],[\"积极的去面对生活中所发生的一切\",{\"1\":{\"1147\":1}}],[\"印象笔记\",{\"1\":{\"1145\":1}}],[\"印象没有那么深刻\",{\"1\":{\"109\":1}}],[\"番茄工作法的管理工具\",{\"1\":{\"1145\":1}}],[\"番茄土豆\",{\"1\":{\"1145\":1}}],[\"绘制各种图\",{\"1\":{\"1145\":1}}],[\"易百教程等\",{\"1\":{\"1145\":1}}],[\"易用和可靠的优势\",{\"1\":{\"1041\":1}}],[\"教程\",{\"1\":{\"1145\":1}}],[\"教学视频脑图gitee\",{\"1\":{\"283\":1}}],[\"量太少\",{\"1\":{\"1145\":1}}],[\"量词是贪婪的会尽可能多地匹配字符\",{\"1\":{\"1020\":1}}],[\"盲目的学习效果并不好\",{\"1\":{\"1143\":1}}],[\"毕业设计一定要向着优秀发展\",{\"1\":{\"1150\":1}}],[\"毕业一样找不到工作\",{\"1\":{\"1141\":1}}],[\"毕向东\",{\"1\":{\"1150\":1}}],[\"毕竟很多人其实对代码无感\",{\"1\":{\"1150\":1}}],[\"毕竟还是很耗时的\",{\"1\":{\"1144\":1}}],[\"毕竟能问到也是一种本事\",{\"1\":{\"1144\":1}}],[\"毕竟计算资源很好水平扩展\",{\"1\":{\"970\":1}}],[\"毕竟出现死锁了\",{\"1\":{\"932\":1}}],[\"毕竟锁住整个表的影响面还是太大\",{\"1\":{\"928\":1}}],[\"毕竟这是数据库处理数据的核心概念之一\",{\"1\":{\"916\":1}}],[\"毕竟解释器\",{\"1\":{\"635\":1}}],[\"毕竟招人最后\",{\"1\":{\"492\":1}}],[\"却忽略了他们这四年是怎么度过的\",{\"1\":{\"1141\":1}}],[\"却能保证有序性\",{\"0\":{\"327\":1}}],[\"永远不要停止学习\",{\"1\":{\"1150\":1}}],[\"永远不要自满\",{\"1\":{\"1140\":1}}],[\"永久代被称为元空间\",{\"1\":{\"383\":1}}],[\"永久代\",{\"1\":{\"383\":1,\"385\":1}}],[\"影响学习的几个因素\",{\"0\":{\"1146\":1},\"1\":{\"1137\":1}}],[\"影院的账户总额等于这\",{\"1\":{\"932\":2}}],[\"影院余额这一行的行锁在一个事务中不会停留很长时间\",{\"1\":{\"931\":1}}],[\"阅读原文\",{\"1\":{\"1135\":1,\"1152\":1}}],[\"承认不会\",{\"1\":{\"1135\":1}}],[\"承诺说半个月内可以恢复\",{\"1\":{\"901\":1}}],[\"顶多质疑你的人品和价值观\",{\"1\":{\"1132\":1}}],[\"顶多是看上去更安全\",{\"1\":{\"65\":1}}],[\"她会想办法\",{\"1\":{\"1131\":1}}],[\"搬迁补贴\",{\"1\":{\"1130\":1}}],[\"金九银十\",{\"1\":{\"1129\":1}}],[\"金三银四\",{\"1\":{\"1129\":1}}],[\"金山词霸\",{\"1\":{\"1005\":1}}],[\"招聘板块\",{\"1\":{\"1128\":3}}],[\"勉强\",{\"1\":{\"1126\":1}}],[\"勉强可以工作\",{\"1\":{\"229\":1}}],[\"站在\",{\"1\":{\"1125\":1}}],[\"站内信息\",{\"1\":{\"1084\":1}}],[\"爱情\",{\"1\":{\"1123\":1}}],[\"女朋友\",{\"1\":{\"1121\":1}}],[\"女生\",{\"1\":{\"429\":1}}],[\"骑驴找马\",{\"0\":{\"1119\":1}}],[\"企查查都可以查看工商信息\",{\"1\":{\"1116\":1}}],[\"坊间传闻\",{\"0\":{\"1117\":1},\"1\":{\"1115\":1}}],[\"银行\",{\"1\":{\"1114\":1}}],[\"银弹\",{\"0\":{\"815\":1}}],[\"涨薪空间大\",{\"1\":{\"1112\":1}}],[\"腾讯有\",{\"1\":{\"1112\":1}}],[\"腾讯会议\",{\"1\":{\"996\":1}}],[\"十年以上的项目\",{\"1\":{\"1110\":1}}],[\"十六进制表示形式3c\",{\"1\":{\"685\":1}}],[\"稳定的团队\",{\"1\":{\"1109\":1}}],[\"稳定性和灵活性的方法\",{\"1\":{\"713\":1}}],[\"房补\",{\"1\":{\"1108\":1}}],[\"税\",{\"1\":{\"1108\":1}}],[\"税前工资\",{\"1\":{\"1108\":1}}],[\"赚钱买房\",{\"1\":{\"1106\":1}}],[\"郑州等\",{\"1\":{\"1106\":1}}],[\"厦门\",{\"1\":{\"1106\":1}}],[\"苏州\",{\"1\":{\"1106\":1}}],[\"西安\",{\"1\":{\"1106\":1}}],[\"西电我来了\",{\"1\":{\"220\":1}}],[\"西电必上岸\",{\"1\":{\"220\":1}}],[\"南京\",{\"1\":{\"1106\":1}}],[\"武汉\",{\"1\":{\"1106\":1}}],[\"杭\",{\"1\":{\"1106\":1}}],[\"杭州面试问到这个\",{\"1\":{\"890\":1}}],[\"北京\",{\"1\":{\"1126\":1}}],[\"北\",{\"1\":{\"1106\":1}}],[\"团队旅游等\",{\"1\":{\"1108\":1}}],[\"团队\",{\"0\":{\"1109\":1},\"1\":{\"1105\":1}}],[\"团队平均工作经验小于1年\",{\"1\":{\"1104\":1}}],[\"班车及两餐\",{\"1\":{\"1104\":1}}],[\"班长最后关门\",{\"1\":{\"334\":3,\"335\":1}}],[\"班长的主要职责就是在其它6个同学走了后\",{\"1\":{\"333\":1}}],[\"办公室现处于毛坯房状态\",{\"1\":{\"1104\":1}}],[\"典型欧美创业工作环境\",{\"1\":{\"1104\":1}}],[\"典型回答\",{\"0\":{\"634\":1,\"636\":1,\"638\":1,\"641\":1}}],[\"扁平化管理\",{\"1\":{\"1104\":1}}],[\"千万不要这样\",{\"1\":{\"1150\":1}}],[\"千万不要本末倒置了\",{\"1\":{\"1150\":1}}],[\"千万不要一个省略一个不省略\",{\"1\":{\"754\":1}}],[\"千亿市场的探索者\",{\"1\":{\"1104\":1}}],[\"期权激励拿到手软\",{\"1\":{\"1104\":1}}],[\"弹性工作时间\",{\"1\":{\"1104\":1}}],[\"弹幕\",{\"0\":{\"286\":1},\"1\":{\"833\":1,\"876\":1}}],[\"弹幕有公司是这个\",{\"1\":{\"183\":1,\"607\":1}}],[\"弹幕中很多人公司是这么做的\",{\"1\":{\"174\":1}}],[\"弹幕说执行太晚了面试官\",{\"1\":{\"156\":1}}],[\"美女如云\",{\"1\":{\"1104\":1}}],[\"美团优选\",{\"1\":{\"1096\":1}}],[\"话术解读\",{\"0\":{\"1104\":1}}],[\"股票\",{\"1\":{\"1103\":1}}],[\"奖金\",{\"1\":{\"1103\":1,\"1108\":2}}],[\"录取意向\",{\"1\":{\"1103\":1}}],[\"录入用户键入\",{\"1\":{\"1038\":1}}],[\"人以群分\",{\"1\":{\"1140\":1}}],[\"人头数\",{\"1\":{\"1103\":1}}],[\"人的精力有限\",{\"1\":{\"688\":1}}],[\"术语科普\",{\"0\":{\"1103\":1}}],[\"硬件是地址总线\",{\"1\":{\"1093\":1}}],[\"硬盘这种既可以属于输入设备\",{\"1\":{\"709\":1}}],[\"硬盘这些类聚合成电脑类\",{\"1\":{\"656\":1}}],[\"硬盘等组成的\",{\"1\":{\"656\":1}}],[\"硬盘\",{\"1\":{\"286\":1}}],[\"啦\",{\"1\":{\"1092\":1}}],[\"逆天啊\",{\"1\":{\"1090\":1}}],[\"逆向思维\",{\"1\":{\"688\":1}}],[\"错过了一些比基准值大的元素\",{\"1\":{\"1085\":1}}],[\"错误使用\",{\"1\":{\"1021\":1}}],[\"错误\",{\"1\":{\"987\":1}}],[\"错误码可以看尚硅谷的文档\",{\"1\":{\"240\":1}}],[\"错误码enum\",{\"1\":{\"240\":1}}],[\"错误日志记录或错误页面的返回\",{\"1\":{\"156\":1}}],[\"错误率\",{\"1\":{\"100\":1}}],[\"勿混淆\",{\"1\":{\"1085\":1}}],[\"草稿\",{\"1\":{\"1084\":1}}],[\"广度优先\",{\"1\":{\"1150\":1}}],[\"广度\",{\"1\":{\"1150\":1}}],[\"广\",{\"1\":{\"1106\":1}}],[\"广泛应用于诸如\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"广播\",{\"1\":{\"823\":1}}],[\"太特么值了\",{\"1\":{\"1144\":1}}],[\"太努力而身心俱毁的人们\",{\"1\":{\"1077\":1}}],[\"太细的话\",{\"1\":{\"156\":1}}],[\"努力也未必会有公平回报\",{\"1\":{\"1077\":1}}],[\"努力就会有回报\",{\"1\":{\"1077\":2}}],[\"欲望放低一点过的其实还是可以很安逸的\",{\"1\":{\"1076\":1}}],[\"赵辛楣的一句\",{\"1\":{\"1076\":1}}],[\"赵六\",{\"1\":{\"765\":1,\"766\":1,\"768\":1}}],[\"遣悲怀\",{\"1\":{\"1076\":1}}],[\"贫贱夫妻百事哀出自元稹的\",{\"1\":{\"1076\":1}}],[\"围城\",{\"0\":{\"1076\":1}}],[\"滚动到光标所在行\",{\"0\":{\"1055\":1}}],[\"鼠标右键也可以\",{\"0\":{\"1063\":1}}],[\"鼠标右键\",{\"0\":{\"1063\":1}}],[\"鼠标右键＋shift\",{\"1\":{\"1051\":1}}],[\"鼠标点击变化内容\",{\"1\":{\"543\":1,\"1081\":1}}],[\"段\",{\"0\":{\"1044\":1}}],[\"灵活\",{\"1\":{\"1041\":1}}],[\"停止和删除windows服务\",{\"1\":{\"1041\":1}}],[\"停止一些正常服务\",{\"1\":{\"603\":1}}],[\"句柄里查被谁占用关掉就行\",{\"1\":{\"1041\":1}}],[\"句点\",{\"0\":{\"1034\":1}}],[\"勾选\",{\"1\":{\"1041\":1}}],[\"勾中快速展示\",{\"1\":{\"244\":1}}],[\"杀死\",{\"1\":{\"1041\":1}}],[\"杀死所有的nginx\",{\"1\":{\"782\":1}}],[\"临时查看桌面\",{\"1\":{\"1037\":1}}],[\"临近过期又超过30分钟没操作\",{\"1\":{\"70\":1}}],[\"偶然发现\",{\"1\":{\"1037\":1}}],[\"令前面的标记变慵懒\",{\"1\":{\"1020\":1}}],[\"令牌删除要保证原子性\",{\"1\":{\"167\":1}}],[\"令牌匹配\",{\"1\":{\"167\":1}}],[\"洪都\",{\"1\":{\"1019\":3}}],[\"警告\",{\"1\":{\"1017\":1}}],[\"警告容器\",{\"1\":{\"14\":1}}],[\"受益匪浅\",{\"1\":{\"1015\":1}}],[\"身份验证等\",{\"1\":{\"1014\":1}}],[\"身份证号\",{\"1\":{\"922\":1,\"923\":2}}],[\"身份证号是市民的唯一标识\",{\"1\":{\"922\":1}}],[\"身份证号因为有\",{\"1\":{\"918\":1}}],[\"镜像仓库\",{\"1\":{\"1014\":1}}],[\"哦\",{\"1\":{\"1012\":1}}],[\"嗯\",{\"1\":{\"1012\":2,\"1104\":1}}],[\"寻找\",{\"1\":{\"1009\":1}}],[\"寻找父模块pom\",{\"1\":{\"1009\":1}}],[\"鱼皮这篇讲的细\",{\"1\":{\"1008\":1}}],[\"矩阵\",{\"1\":{\"1006\":1}}],[\"居多\",{\"1\":{\"1114\":1}}],[\"居中\",{\"1\":{\"1005\":1}}],[\"居然是三年前的\",{\"1\":{\"267\":1}}],[\"划词翻译\",{\"1\":{\"1005\":1}}],[\"划分到多个数据库或多个数据表中\",{\"1\":{\"961\":1}}],[\"划分\",{\"0\":{\"251\":1}}],[\"施工中\",{\"1\":{\"1005\":1}}],[\"辅助编辑器\",{\"1\":{\"1005\":1}}],[\"哈哈\",{\"1\":{\"1005\":1}}],[\"哈希的目的是将\",{\"1\":{\"961\":1}}],[\"哈希的思路很简单\",{\"1\":{\"914\":1}}],[\"哈希表是一种以键\",{\"1\":{\"914\":1}}],[\"哈希表\",{\"0\":{\"914\":1}}],[\"哈希表这种结构适用于只有等值查询的场景\",{\"1\":{\"913\":1,\"914\":1}}],[\"哈希冲突\",{\"1\":{\"866\":1}}],[\"哈希桶\",{\"1\":{\"688\":1}}],[\"哈希桶的选择是通过对哈希码进行进一步的运算转换得到的\",{\"1\":{\"681\":1}}],[\"哈希值也会随之变化\",{\"1\":{\"539\":1}}],[\"霞鹜文楷我用在了语雀等文档站和\",{\"1\":{\"1005\":1}}],[\"⌦\",{\"1\":{\"1005\":1}}],[\"⌫\",{\"1\":{\"1005\":1}}],[\"␣\",{\"1\":{\"1005\":1}}],[\"↘\",{\"1\":{\"1005\":1}}],[\"↖\",{\"1\":{\"1005\":1}}],[\"⇟\",{\"1\":{\"1005\":1}}],[\"⇞\",{\"1\":{\"1005\":1}}],[\"⇤\",{\"1\":{\"1005\":1}}],[\"⇥\",{\"1\":{\"1005\":1}}],[\"⌅\",{\"1\":{\"1005\":1}}],[\"↵\",{\"1\":{\"1005\":1}}],[\"⏏\",{\"1\":{\"1005\":1}}],[\"⎋\",{\"1\":{\"1005\":1}}],[\"⇪\",{\"1\":{\"1005\":1}}],[\"↑\",{\"1\":{\"1005\":1}}],[\"→\",{\"1\":{\"1005\":1}}],[\"←\",{\"1\":{\"1005\":1}}],[\"⌥d\",{\"1\":{\"1006\":1}}],[\"⌥s\",{\"1\":{\"1006\":1}}],[\"⌥a\",{\"1\":{\"1006\":1}}],[\"⌥\",{\"1\":{\"1005\":2}}],[\"⌃\",{\"1\":{\"1005\":1}}],[\"⇧a\",{\"1\":{\"1005\":1}}],[\"⇧\",{\"1\":{\"1005\":1}}],[\"⌘+⌃\",{\"1\":{\"1006\":1}}],[\"⌘space\",{\"1\":{\"1006\":1}}],[\"⌘⇧r\",{\"1\":{\"1005\":1}}],[\"⌘⇧↓\",{\"1\":{\"1005\":1}}],[\"⌘⇧↑\",{\"1\":{\"1005\":1}}],[\"⌘⇧⌃⌥\",{\"1\":{\"1005\":1}}],[\"⌘p\",{\"1\":{\"1005\":2}}],[\"⌘⌥c\",{\"1\":{\"1005\":1}}],[\"⌘\",{\"1\":{\"1005\":1}}],[\"冲突了\",{\"1\":{\"1005\":1}}],[\"冲突行\",{\"1\":{\"993\":1}}],[\"⬅\",{\"1\":{\"1005\":1}}],[\"⬆\",{\"1\":{\"1005\":1}}],[\"⬇\",{\"1\":{\"1005\":1}}],[\"➡\",{\"1\":{\"1005\":1}}],[\"历史原因\",{\"1\":{\"1005\":1}}],[\"历时半年艰难学完一把辛酸泪\",{\"1\":{\"261\":1}}],[\"极客学院\",{\"1\":{\"1145\":1}}],[\"极客时间\",{\"1\":{\"927\":1}}],[\"极快\",{\"1\":{\"1005\":3}}],[\"昨天折腾了一下午换来了一个501\",{\"1\":{\"1156\":1}}],[\"昨天新的\",{\"1\":{\"1001\":1}}],[\"昨天去了王府井apm苹果店\",{\"1\":{\"998\":1}}],[\"似乎对浏览器出发的文件选择器未生效\",{\"1\":{\"998\":1}}],[\"剪切\",{\"1\":{\"997\":1}}],[\"蛮好\",{\"1\":{\"996\":1}}],[\"挺好用的\",{\"1\":{\"996\":1}}],[\"系列芯片\",{\"1\":{\"999\":1}}],[\"系列芯片好多软件还不支持\",{\"1\":{\"996\":1}}],[\"系统新增的命令\",{\"1\":{\"1041\":1}}],[\"系统设置\",{\"0\":{\"1006\":1},\"1\":{\"1005\":1}}],[\"系统里面随后发生的更新\",{\"1\":{\"935\":1}}],[\"系统即使崩溃\",{\"1\":{\"901\":1}}],[\"系统可能都不一样\",{\"1\":{\"787\":1}}],[\"系统内置的一些函数式接口\",{\"1\":{\"770\":1}}],[\"系统内置的函数式接口\",{\"0\":{\"770\":1}}],[\"系统化的搞定这块\",{\"1\":{\"738\":1}}],[\"系统上的性能并没有多少提升\",{\"1\":{\"713\":1}}],[\"系统调用轮询数据是否已经准备好的过程是十分消耗\",{\"1\":{\"712\":1}}],[\"系统调用\",{\"1\":{\"709\":2,\"712\":1}}],[\"系统则会回收软引用对象\",{\"1\":{\"660\":1}}],[\"系统集成\",{\"1\":{\"611\":1}}],[\"系统自适应保护等多个维度来帮助您保障微服务的稳定性\",{\"1\":{\"599\":1}}],[\"系统负载保护等多个维度保护服务的稳定性\",{\"1\":{\"594\":1}}],[\"系统资源紧张\",{\"1\":{\"582\":1}}],[\"系统应该选择什么特性\",{\"1\":{\"572\":1}}],[\"系统应该达到最终一致性\",{\"1\":{\"572\":1}}],[\"系统中的某个节点在进行写操作\",{\"1\":{\"572\":1}}],[\"系统会获取当前\",{\"1\":{\"918\":1}}],[\"系统会判断\",{\"1\":{\"906\":1}}],[\"系统会不会\",{\"1\":{\"814\":1}}],[\"系统会等待分区解决后\",{\"1\":{\"571\":1}}],[\"系统会自动让线程释放对锁的占用\",{\"1\":{\"352\":1}}],[\"系统将拒绝对处于分区中的节点的读写请求\",{\"1\":{\"571\":1}}],[\"系统的缓存等\",{\"1\":{\"567\":1}}],[\"系统关注的问题\",{\"0\":{\"199\":1}}],[\"系统每秒处理查询次数\",{\"1\":{\"100\":1}}],[\"系统每秒处理交易数\",{\"1\":{\"100\":1}}],[\"敏感信息放setting里面有个secrets可以设置\",{\"1\":{\"994\":1}}],[\"拷贝代码\",{\"1\":{\"994\":1}}],[\"拷贝对象时\",{\"1\":{\"683\":1}}],[\"码农2也写了一个ui\",{\"1\":{\"994\":1}}],[\"码农1写了个api\",{\"1\":{\"994\":1}}],[\"界面有个\",{\"1\":{\"993\":1}}],[\"界面使用的操作是一样的\",{\"1\":{\"828\":1}}],[\"橙黄\",{\"1\":{\"993\":1}}],[\"橙色部分\",{\"0\":{\"620\":1}}],[\"橙色部分表示认证\",{\"1\":{\"619\":1}}],[\"亮黄\",{\"1\":{\"993\":1}}],[\"亮点\",{\"1\":{\"876\":1}}],[\"右边是大于的\",{\"1\":{\"1085\":1}}],[\"右边的为\",{\"1\":{\"220\":1}}],[\"右键标记即可复制cmd里面的文字\",{\"1\":{\"1041\":1}}],[\"右⌘\",{\"1\":{\"1005\":1}}],[\"右上\",{\"1\":{\"991\":1}}],[\"暂存区状态\",{\"1\":{\"990\":1}}],[\"暂时联想记忆为link\",{\"0\":{\"1030\":1}}],[\"暂时跳过后期用的时候再来学\",{\"1\":{\"604\":1}}],[\"暂时搁置\",{\"0\":{\"570\":1}}],[\"暂时用的是这个解决\",{\"1\":{\"546\":1}}],[\"暂时掠过待有需要回头再学\",{\"1\":{\"263\":1}}],[\"顺便搜索了下别的解决方案\",{\"1\":{\"987\":1}}],[\"顺序\",{\"0\":{\"696\":1}}],[\"顺序流\",{\"1\":{\"689\":1}}],[\"免费\",{\"1\":{\"1150\":1}}],[\"免费的容量有限\",{\"1\":{\"1145\":1}}],[\"免费无限容量\",{\"1\":{\"1145\":1}}],[\"免密登录\",{\"1\":{\"986\":1}}],[\"免于那么多繁琐的配置\",{\"1\":{\"472\":1}}],[\"书籍\",{\"1\":{\"1150\":1}}],[\"书籍类相关的项目\",{\"1\":{\"985\":1}}],[\"书就可以派上用场了\",{\"1\":{\"1150\":1}}],[\"书为辅\",{\"1\":{\"1150\":1}}],[\"书签快捷键\",{\"0\":{\"1045\":1}}],[\"书签\",{\"1\":{\"1005\":1}}],[\"书写一次\",{\"1\":{\"634\":1}}],[\"博客\",{\"1\":{\"1127\":1}}],[\"博客底下的那个计时怎么实现\",{\"1\":{\"1081\":1}}],[\"博客下面统计记录\",{\"1\":{\"496\":1}}],[\"博主一语道破早起真相\",{\"1\":{\"980\":1}}],[\"午睡不要超过一小时\",{\"1\":{\"980\":1}}],[\"午休和下班后也可访问\",{\"1\":{\"76\":1}}],[\"迫切需要解决的事情\",{\"1\":{\"980\":1}}],[\"渐渐装满\",{\"1\":{\"980\":1}}],[\"田忌赛马\",{\"1\":{\"980\":1}}],[\"奥义2\",{\"1\":{\"980\":1}}],[\"聚簇索引一个表为什么只能有一个\",{\"0\":{\"978\":1}}],[\"聚合函数\",{\"1\":{\"959\":1}}],[\"聚合\",{\"1\":{\"656\":1}}],[\"聚合报告\",{\"1\":{\"100\":1}}],[\"飙升\",{\"1\":{\"977\":1}}],[\"飙升的话\",{\"0\":{\"977\":1}}],[\"掉这些线程\",{\"1\":{\"977\":1}}],[\"掉这个长事务\",{\"1\":{\"928\":1}}],[\"制定学习计划\",{\"1\":{\"1144\":1}}],[\"制过去\",{\"1\":{\"976\":1}}],[\"制表符\",{\"1\":{\"61\":1}}],[\"摘取知乎这篇一部分\",{\"1\":{\"970\":1}}],[\"摘自评论\",{\"1\":{\"980\":1}}],[\"摘自\",{\"1\":{\"649\":1}}],[\"摘自弹幕\",{\"1\":{\"107\":1}}],[\"业界极为推荐的查询优化方式\",{\"1\":{\"969\":1}}],[\"业务会把更多计算放到service层做\",{\"1\":{\"970\":1}}],[\"业务相关性\",{\"1\":{\"960\":1}}],[\"业务的更新不只是增删改数据\",{\"1\":{\"927\":1}}],[\"业务逻辑里就要扣掉他的余额\",{\"1\":{\"927\":1}}],[\"业务逻辑已经执行\",{\"1\":{\"847\":1}}],[\"业务基本上就得停摆\",{\"1\":{\"927\":1}}],[\"业务连接数据库的时候\",{\"1\":{\"908\":1}}],[\"业务操作需要调用三三\",{\"1\":{\"606\":1}}],[\"业务调用处理\",{\"1\":{\"576\":1}}],[\"业务类\",{\"1\":{\"558\":1}}],[\"业务场景\",{\"1\":{\"372\":1,\"380\":1}}],[\"业务场景2+错误码3\",{\"1\":{\"240\":1}}],[\"业务不关心脏数据\",{\"1\":{\"118\":1}}],[\"业务处理3秒\",{\"1\":{\"115\":1}}],[\"业务还没处理完\",{\"1\":{\"111\":1}}],[\"业务还没处理完锁就过期\",{\"1\":{\"111\":1}}],[\"业务\",{\"1\":{\"102\":1}}],[\"限制查询结果的数量\",{\"1\":{\"963\":1}}],[\"限流部分代码\",{\"1\":{\"887\":1}}],[\"限流出问题后\",{\"1\":{\"604\":1}}],[\"限流降级功能的接入\",{\"1\":{\"594\":1}}],[\"限流控制\",{\"1\":{\"590\":1}}],[\"限流处理\",{\"1\":{\"495\":1}}],[\"限流\",{\"0\":{\"850\":1},\"1\":{\"202\":1,\"228\":1,\"849\":1,\"887\":1,\"890\":1}}],[\"筛选满足条件的分组\",{\"1\":{\"963\":1}}],[\"筛选满足条件的行\",{\"1\":{\"963\":1}}],[\"筛选请求的时候可以勾这个\",{\"1\":{\"49\":1}}],[\"🌈\",{\"1\":{\"962\":1}}],[\"🌟\",{\"0\":{\"483\":1}}],[\"🌟特征\",{\"1\":{\"87\":1}}],[\"雪花算法\",{\"1\":{\"961\":1}}],[\"雪崩效应\",{\"1\":{\"581\":1}}],[\"乃至跨库跨表的连接\",{\"1\":{\"961\":1}}],[\"垂直拆分的关注点在于\",{\"1\":{\"960\":1}}],[\"垂直切分\",{\"1\":{\"960\":1}}],[\"水平拆分实现\",{\"0\":{\"961\":1}}],[\"水平拆分指的是将单一数据表按照某一种规则拆分到多个数据库和多个数据表中\",{\"1\":{\"960\":1}}],[\"水平拆分的实现\",{\"1\":{\"960\":1}}],[\"水平切分\",{\"1\":{\"960\":1}}],[\"浅问了chartgpt\",{\"1\":{\"959\":1}}],[\"浅拷贝\",{\"1\":{\"683\":1}}],[\"英语\",{\"1\":{\"959\":2}}],[\"英语成绩\",{\"1\":{\"959\":1}}],[\"英文操作系统是iso\",{\"1\":{\"688\":1}}],[\"英文\",{\"1\":{\"594\":1}}],[\"英文全拼\",{\"1\":{\"210\":1}}],[\"英文标识也行\",{\"1\":{\"202\":1}}],[\"仓库是maven用于下载和管理项目依赖项的地方\",{\"1\":{\"1014\":1}}],[\"仓库里的项目没有了\",{\"1\":{\"987\":1}}],[\"仓库\",{\"1\":{\"959\":2}}],[\"托盘\",{\"1\":{\"959\":2}}],[\"托管到\",{\"1\":{\"884\":1}}],[\"括号中的列名列表是可选的\",{\"1\":{\"959\":1}}],[\"赤道几内亚\",{\"1\":{\"959\":1}}],[\"左上\",{\"1\":{\"991\":1}}],[\"左连接的结果将包括\",{\"1\":{\"959\":1}}],[\"左右的寻址时间\",{\"1\":{\"916\":1}}],[\"范围\",{\"1\":{\"960\":1}}],[\"范围为\",{\"1\":{\"951\":1}}],[\"范围的缓存数据\",{\"1\":{\"647\":1}}],[\"证实\",{\"1\":{\"948\":1}}],[\"证明上面问题\",{\"1\":{\"577\":1}}],[\"活跃\",{\"1\":{\"935\":2}}],[\"活着\",{\"1\":{\"636\":1}}],[\"明天又想学\",{\"1\":{\"1144\":1}}],[\"明显是有\",{\"1\":{\"1092\":1}}],[\"明明密码账号正确\",{\"1\":{\"996\":1}}],[\"明白了多版本和\",{\"1\":{\"935\":1}}],[\"明面是一个注解加到置顶\",{\"1\":{\"887\":1}}],[\"旧的数据版本要保留\",{\"1\":{\"935\":1}}],[\"叫作\",{\"1\":{\"935\":1}}],[\"叫的方法\",{\"1\":{\"657\":2}}],[\"拍了个快照\",{\"1\":{\"935\":1}}],[\"拆分后的单表查询代码可复用性更高\",{\"1\":{\"970\":1}}],[\"拆分后会带来哪些问题\",{\"1\":{\"961\":1}}],[\"拆分成\",{\"1\":{\"961\":1}}],[\"拆解为单个sql去修改\",{\"1\":{\"959\":1}}],[\"拆开\",{\"1\":{\"934\":1}}],[\"拆箱\",{\"1\":{\"686\":1}}],[\"留白\",{\"1\":{\"1126\":1}}],[\"留了这些\",{\"1\":{\"1005\":1}}],[\"留给你的问题是\",{\"1\":{\"933\":1}}],[\"留得江山在\",{\"1\":{\"814\":1}}],[\"峰值并发数也可能要达到\",{\"1\":{\"932\":1}}],[\"汇总到数据库服务端以后\",{\"1\":{\"932\":1}}],[\"汇总报告\",{\"1\":{\"100\":1}}],[\"货架\",{\"1\":{\"932\":2}}],[\"购买电影票\",{\"1\":{\"931\":1}}],[\"购物网站在购物高峰\",{\"1\":{\"572\":1}}],[\"购物车php写两者得交互发消息那就用\",{\"1\":{\"818\":1}}],[\"购物车数据都需用户数据这个threadlocal\",{\"1\":{\"157\":1}}],[\"购物车信息等\",{\"1\":{\"156\":1}}],[\"购物车排列有顺序\",{\"1\":{\"155\":1}}],[\"顾客\",{\"1\":{\"931\":1}}],[\"顾名思义是最左优先\",{\"1\":{\"923\":1}}],[\"顾名思义是对于同一行记录\",{\"1\":{\"905\":1}}],[\"顾名思义\",{\"1\":{\"923\":1,\"927\":1,\"930\":1}}],[\"持续集成的流水线\",{\"1\":{\"994\":1}}],[\"持有的两个记录的行锁\",{\"1\":{\"931\":1}}],[\"持有哪些锁\",{\"1\":{\"931\":1}}],[\"持久性\",{\"1\":{\"905\":1,\"962\":1}}],[\"持久化\",{\"1\":{\"599\":1}}],[\"报给你的工资没有虚报吗\",{\"1\":{\"1130\":1}}],[\"报\",{\"1\":{\"929\":1}}],[\"报错json变成\",{\"1\":{\"240\":1}}],[\"报错\",{\"1\":{\"125\":1,\"227\":1,\"938\":1,\"987\":1}}],[\"风险较高\",{\"1\":{\"927\":1}}],[\"风格的条件查询\",{\"1\":{\"465\":1}}],[\"岁的所有男孩\",{\"1\":{\"924\":1}}],[\"张以上的表才能查出来\",{\"1\":{\"970\":1}}],[\"张表\",{\"1\":{\"961\":2}}],[\"张\",{\"1\":{\"923\":2,\"924\":3}}],[\"张三\",{\"1\":{\"403\":1,\"576\":1,\"763\":1,\"765\":1,\"766\":1,\"768\":1,\"923\":3}}],[\"素引是否被使用\",{\"1\":{\"923\":1}}],[\"几个css就可以设计出一个精美的网页\",{\"1\":{\"1150\":1}}],[\"几个标签\",{\"1\":{\"1150\":1}}],[\"几个不支持索引的特别的点\",{\"1\":{\"923\":1}}],[\"几乎所有的\",{\"1\":{\"738\":1}}],[\"几乎所有的操作系统都支持\",{\"1\":{\"712\":1}}],[\"几乎声明了所有开发中常用的依赖的版本号\",{\"1\":{\"476\":1}}],[\"姓名\",{\"1\":{\"922\":1,\"923\":1}}],[\"条结果记录\",{\"1\":{\"959\":1}}],[\"条记录\",{\"1\":{\"921\":1,\"959\":1}}],[\"条件\",{\"1\":{\"681\":1,\"959\":1}}],[\"条件匹配\",{\"0\":{\"274\":1}}],[\"条件更进一步租一台至少4g内存的x86架构云服务器\",{\"1\":{\"261\":1}}],[\"条件进一步加个屏幕\",{\"1\":{\"261\":1}}],[\"篇文章和你讲事务隔离级别的时候提到过\",{\"1\":{\"934\":1}}],[\"篇文章\",{\"1\":{\"919\":1,\"927\":1,\"934\":1}}],[\"截图翻译\",{\"1\":{\"1005\":1}}],[\"截止到这里\",{\"1\":{\"916\":1}}],[\"截串取\",{\"1\":{\"134\":1}}],[\"差不多是\",{\"1\":{\"916\":1}}],[\"叉树\",{\"1\":{\"916\":1}}],[\"叉树由于在读写上的性能优点\",{\"1\":{\"916\":1}}],[\"叉树没很理解\",{\"1\":{\"916\":1}}],[\"叉\",{\"1\":{\"916\":3}}],[\"块之间通过链式方式链接\",{\"1\":{\"916\":1}}],[\"块钱\",{\"1\":{\"904\":3}}],[\"万\",{\"1\":{\"1103\":1}}],[\"万这个量级的\",{\"1\":{\"932\":1}}],[\"万行的表\",{\"1\":{\"916\":1}}],[\"万节点的平衡二叉树\",{\"1\":{\"916\":1}}],[\"万一我发送方发送失败了\",{\"1\":{\"815\":1}}],[\"万一别人知道这个请求路径用postman发一个假的数据让你改订单状态能篡改伪造\",{\"1\":{\"192\":1}}],[\"儿子之间的大小保证从左到右递增\",{\"1\":{\"916\":1}}],[\"树这种索引结构\",{\"1\":{\"923\":1}}],[\"树能够很好地配合磁盘的读写特性\",{\"1\":{\"919\":1}}],[\"树结构\",{\"1\":{\"919\":1}}],[\"树的算法\",{\"1\":{\"918\":1}}],[\"树的第二层也有很大概率在内存中\",{\"1\":{\"916\":1}}],[\"树为了维护索引有序性\",{\"1\":{\"918\":1}}],[\"树索引模型\",{\"1\":{\"917\":1}}],[\"树等数据结构也被用于引擎设计中\",{\"1\":{\"916\":1}}],[\"树中的\",{\"1\":{\"916\":1,\"917\":1}}],[\"树高20的话\",{\"1\":{\"916\":1}}],[\"树高\",{\"1\":{\"916\":1}}],[\"树可以有二叉\",{\"1\":{\"916\":1}}],[\"树\",{\"1\":{\"916\":2,\"917\":2}}],[\"示意图如下所示\",{\"1\":{\"915\":1,\"916\":1}}],[\"示例2\",{\"1\":{\"933\":1}}],[\"示例1\",{\"1\":{\"933\":1}}],[\"示例\",{\"1\":{\"837\":1}}],[\"百万千万级大表如何添加字段\",{\"0\":{\"976\":1}}],[\"百万级别以上的数据如何删除\",{\"0\":{\"912\":1,\"975\":1}}],[\"百分号\",{\"1\":{\"959\":1}}],[\"百度脑图\",{\"1\":{\"1145\":1}}],[\"百度网盘秒传功能\",{\"0\":{\"132\":1},\"1\":{\"172\":1}}],[\"百度\",{\"1\":{\"72\":1,\"1145\":1,\"1150\":1}}],[\"框起来\",{\"1\":{\"908\":1}}],[\"框架api\",{\"0\":{\"743\":1,\"1101\":1}}],[\"框架的网络通信工具\",{\"1\":{\"713\":1}}],[\"框架的框架\",{\"1\":{\"472\":1}}],[\"框架内部的寻址\",{\"1\":{\"640\":1}}],[\"框架可能利用了其机制\",{\"1\":{\"637\":1}}],[\"框架中\",{\"1\":{\"1081\":1}}],[\"框架中解决循环依赖问题的过程\",{\"1\":{\"543\":1}}],[\"框架中用于管理拦截器的注册表\",{\"1\":{\"534\":1}}],[\"框架中常用的注解\",{\"1\":{\"501\":1}}],[\"框架了\",{\"1\":{\"494\":1,\"713\":1}}],[\"框架一起使\",{\"1\":{\"493\":1}}],[\"框架一般都是基于\",{\"1\":{\"493\":1}}],[\"框架使用者定制的代码生成器\",{\"1\":{\"465\":1}}],[\"框架\",{\"1\":{\"182\":1,\"393\":1,\"493\":1,\"543\":1,\"594\":1,\"688\":2,\"713\":1,\"738\":1}}],[\"框架实现的\",{\"1\":{\"123\":1}}],[\"框架里面的\",{\"1\":{\"120\":1}}],[\"隐藏系统磁盘\",{\"0\":{\"1025\":1}}],[\"隐藏\",{\"1\":{\"1005\":1}}],[\"隐藏点\",{\"1\":{\"978\":1}}],[\"隐藏字段\",{\"1\":{\"908\":2}}],[\"隐藏表单域\",{\"1\":{\"49\":2}}],[\"迁移到\",{\"1\":{\"905\":1}}],[\"迁移到了\",{\"1\":{\"393\":1}}],[\"遵循的就是这个要求\",{\"1\":{\"905\":1}}],[\"遵守as\",{\"1\":{\"329\":1}}],[\"串行化\",{\"1\":{\"905\":3}}],[\"竟然能成功\",{\"1\":{\"905\":1}}],[\"脏读\",{\"1\":{\"905\":1}}],[\"脏数据\",{\"1\":{\"117\":1}}],[\"幻读是指\",{\"1\":{\"905\":1}}],[\"幻读\",{\"1\":{\"905\":4,\"906\":1}}],[\"幻象引用仅仅是提供了一种确保对象被\",{\"1\":{\"636\":1}}],[\"幻象引用有什么区别\",{\"1\":{\"635\":1}}],[\"剖析\",{\"1\":{\"904\":1}}],[\"衍生出\",{\"1\":{\"902\":1}}],[\"衍生出的问题\",{\"1\":{\"876\":1}}],[\"吗\",{\"1\":{\"902\":1,\"935\":1}}],[\"崩溃恢复以后这个事务无效\",{\"1\":{\"901\":1}}],[\"怎样让数据库恢复到半个月内任意一秒的状态\",{\"1\":{\"901\":1}}],[\"怎么检查自己有没有学好呢\",{\"1\":{\"1150\":1}}],[\"怎么学\",{\"1\":{\"1150\":1}}],[\"怎么寻找乐趣呢\",{\"1\":{\"1150\":1}}],[\"怎么才能有效的去学习一门新的技术呢\",{\"1\":{\"1143\":1}}],[\"怎么制定一个计划\",{\"1\":{\"1142\":1}}],[\"怎么安排自己的时间\",{\"1\":{\"1142\":1}}],[\"怎么走\",{\"1\":{\"1086\":1}}],[\"怎么前后的\",{\"1\":{\"1081\":1}}],[\"怎么删除表的前\",{\"1\":{\"933\":1}}],[\"怎么能做到优化呢\",{\"1\":{\"899\":1}}],[\"怎么做呢\",{\"1\":{\"1150\":1}}],[\"怎么做\",{\"1\":{\"896\":1}}],[\"怎么是单用户系统\",{\"1\":{\"785\":1}}],[\"怎么玩\",{\"1\":{\"591\":1,\"594\":1}}],[\"怎么共享\",{\"1\":{\"565\":1}}],[\"怎么实现呢\",{\"1\":{\"630\":1}}],[\"怎么实现starter\",{\"1\":{\"466\":1}}],[\"怎么实现的\",{\"1\":{\"76\":1}}],[\"怎么打破双亲委派模型\",{\"1\":{\"382\":1}}],[\"怎么解决由这种热点行更新导致的性能问题呢\",{\"1\":{\"932\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"893\":1}}],[\"怎么解决full\",{\"1\":{\"389\":1}}],[\"怎么解决都搞不好\",{\"1\":{\"227\":1}}],[\"怎么解决的嘛\",{\"1\":{\"106\":1}}],[\"怎么用\",{\"1\":{\"147\":1,\"594\":1}}],[\"怎么还用到了分布式锁呢\",{\"1\":{\"112\":1}}],[\"怎么还让后端给你判断是否快过期\",{\"1\":{\"70\":1}}],[\"绕\",{\"1\":{\"900\":1}}],[\"绕过直接给后端发请求\",{\"1\":{\"239\":1}}],[\"状态转移\",{\"1\":{\"1086\":1}}],[\"状态查看操作\",{\"1\":{\"990\":1}}],[\"状态\",{\"1\":{\"900\":2,\"927\":1}}],[\"状态和对垃圾收集的影响\",{\"1\":{\"636\":1}}],[\"恢复出来的这一行\",{\"1\":{\"901\":2}}],[\"恢复生意后依然可以通过账本和粉板上的数据明确赊账账目\",{\"1\":{\"899\":1}}],[\"恢复从机发现之前挂掉时\",{\"1\":{\"862\":1}}],[\"推送流程\",{\"0\":{\"987\":1}}],[\"推进一下\",{\"1\":{\"899\":1}}],[\"推荐一下\",{\"1\":{\"1162\":1}}],[\"推荐一个非常牛的文档网站生成器\",{\"1\":{\"1161\":1}}],[\"推荐一些学习资料\",{\"1\":{\"1150\":1}}],[\"推荐买第十版\",{\"1\":{\"1150\":1}}],[\"推荐案例\",{\"1\":{\"1127\":1}}],[\"推荐直接\",{\"1\":{\"796\":1}}],[\"推荐静态内部类方式\",{\"1\":{\"779\":1}}],[\"推荐使用hash\",{\"1\":{\"876\":1}}],[\"推荐使用arraydeque来实现栈的功能\",{\"1\":{\"677\":1}}],[\"推荐使用\",{\"1\":{\"486\":1,\"908\":1}}],[\"推荐编写to\",{\"1\":{\"410\":1}}],[\"推荐大家使用\",{\"1\":{\"212\":1}}],[\"推荐在异步回调的时候修改订单状态\",{\"1\":{\"192\":1}}],[\"推荐\",{\"0\":{\"118\":1,\"841\":1},\"1\":{\"156\":1}}],[\"追加写\",{\"1\":{\"900\":2,\"901\":1}}],[\"追上\",{\"1\":{\"899\":1}}],[\"追求的是最终一致性\",{\"1\":{\"184\":1}}],[\"追求的是强一致性\",{\"1\":{\"184\":1}}],[\"粉板写满了\",{\"1\":{\"899\":1}}],[\"粉板\",{\"1\":{\"899\":4}}],[\"粉板总会有记不下的时候\",{\"1\":{\"899\":1}}],[\"掌柜可以等打烊后再整理\",{\"1\":{\"899\":1}}],[\"掌柜要找到那个名字\",{\"1\":{\"899\":1}}],[\"掌柜一定会选择后者\",{\"1\":{\"899\":1}}],[\"掌柜一般有两种做法\",{\"1\":{\"899\":1}}],[\"酒店掌柜有一个粉板\",{\"1\":{\"899\":1}}],[\"孔乙己\",{\"1\":{\"899\":1}}],[\"归档日志\",{\"1\":{\"898\":1,\"900\":1}}],[\"归根结底就是资源缓存的问题\",{\"1\":{\"539\":1,\"1083\":1}}],[\"惊叹的同时\",{\"1\":{\"898\":1}}],[\"决定各个表的连接顺序\",{\"1\":{\"896\":1}}],[\"决定使用哪个索引\",{\"1\":{\"896\":1}}],[\"识别成\",{\"1\":{\"895\":2}}],[\"识时务者为俊杰\",{\"1\":{\"688\":1}}],[\"词法分析\",{\"1\":{\"895\":2}}],[\"废物利用变成了\",{\"1\":{\"1005\":1}}],[\"废时间\",{\"1\":{\"894\":1}}],[\"废话不要留在简历里\",{\"1\":{\"1125\":1}}],[\"废话\",{\"1\":{\"182\":1}}],[\"握手后\",{\"1\":{\"893\":1}}],[\"涵盖\",{\"1\":{\"892\":1}}],[\"层来说\",{\"1\":{\"922\":1}}],[\"层实现的\",{\"1\":{\"900\":1}}],[\"层也有自己的日志\",{\"1\":{\"900\":1}}],[\"层\",{\"1\":{\"892\":2,\"900\":1}}],[\"层和存储引擎层两部分\",{\"1\":{\"892\":1}}],[\"层抛出异常时\",{\"1\":{\"520\":1}}],[\"层抛出的异常集中处理\",{\"1\":{\"520\":1}}],[\"层抛出的异常\",{\"1\":{\"520\":1}}],[\"丁奇\",{\"1\":{\"891\":1}}],[\"林晓斌\",{\"1\":{\"891\":1}}],[\"颁发一个新的访问令牌\",{\"1\":{\"890\":1}}],[\"暴露到\",{\"1\":{\"889\":1}}],[\"暴露了短信接口api\",{\"1\":{\"129\":1}}],[\"唯一需要注意的是\",{\"1\":{\"1158\":1}}],[\"唯一索引\",{\"1\":{\"936\":1}}],[\"唯一标识\",{\"1\":{\"889\":1}}],[\"唯独\",{\"1\":{\"706\":1}}],[\"喜欢点a按钮\",{\"1\":{\"889\":1}}],[\"帮助前端应用将请求转发到后端服务\",{\"1\":{\"883\":1}}],[\"帮助企业迅速搭建客户触达通道\",{\"1\":{\"594\":2}}],[\"充当了一会代理服务器\",{\"1\":{\"883\":1}}],[\"充分理解这些引用\",{\"1\":{\"637\":1}}],[\"巧妙解决跨域问题\",{\"1\":{\"882\":1}}],[\"约等于\",{\"1\":{\"877\":1}}],[\"约定\",{\"1\":{\"554\":1,\"599\":1}}],[\"王清江\",{\"1\":{\"877\":1}}],[\"王五\",{\"1\":{\"765\":1,\"766\":1,\"768\":1}}],[\"粗略过了一遍\",{\"1\":{\"877\":1}}],[\"楠哥的太浅了\",{\"1\":{\"877\":1}}],[\"弊端\",{\"1\":{\"872\":1}}],[\"候\",{\"1\":{\"867\":1}}],[\"候选\",{\"1\":{\"572\":1}}],[\"候选人说了一堆aop原理\",{\"1\":{\"492\":1}}],[\"热点\",{\"1\":{\"867\":1}}],[\"热部署其实就是热重启\",{\"1\":{\"558\":1}}],[\"热部署部署代码和配置文件\",{\"1\":{\"123\":1}}],[\"误判\",{\"1\":{\"866\":1}}],[\"击穿\",{\"1\":{\"865\":1,\"867\":1,\"876\":1}}],[\"贴一张u盘使用状况\",{\"1\":{\"1160\":1}}],[\"贴一张学校电脑的配置\",{\"1\":{\"1160\":1}}],[\"贴一个插槽的图\",{\"1\":{\"865\":1}}],[\"贴个图意思就是一条线串起来\",{\"1\":{\"863\":1}}],[\"投递时间\",{\"0\":{\"1129\":1}}],[\"投递平台\",{\"0\":{\"1128\":1}}],[\"投递失败的消息详细信息\",{\"1\":{\"836\":1}}],[\"投票是根据这个参数来的\",{\"1\":{\"865\":1}}],[\"薪火相传\",{\"0\":{\"863\":1}}],[\"狂神说redis笔记\",{\"1\":{\"849\":1}}],[\"狂神nginx学习笔记\",{\"1\":{\"71\":1}}],[\"谁小投谁\",{\"1\":{\"865\":1}}],[\"谁解答完谁举手\",{\"1\":{\"849\":1}}],[\"谁先抢到就谁\",{\"1\":{\"817\":1}}],[\"化\",{\"1\":{\"849\":1}}],[\"少打了开头的字母\",{\"1\":{\"895\":1}}],[\"少了上下文切换开销\",{\"1\":{\"849\":1}}],[\"少于20分钟就refresh\",{\"1\":{\"69\":1}}],[\"削峰\",{\"1\":{\"848\":1}}],[\"情况\",{\"1\":{\"977\":1}}],[\"情况3\",{\"1\":{\"846\":1}}],[\"情况2\",{\"1\":{\"846\":1,\"848\":1}}],[\"情况1\",{\"1\":{\"846\":1,\"847\":1,\"848\":1}}],[\"情景2\",{\"1\":{\"174\":1}}],[\"情景1\",{\"1\":{\"174\":1}}],[\"造成消息空转浪费资源\",{\"1\":{\"844\":1}}],[\"造成订单解锁晚于库存解锁执行\",{\"1\":{\"844\":1}}],[\"延时队列\",{\"1\":{\"843\":1}}],[\"延时队列实现\",{\"0\":{\"840\":1}}],[\"延迟一段时间再给解锁库存的服务发消息补偿回来\",{\"1\":{\"839\":1}}],[\"延迟创建对象\",{\"1\":{\"779\":1}}],[\"延迟到运行时出现\",{\"1\":{\"686\":1}}],[\"延迟\",{\"1\":{\"428\":1}}],[\"延迟加载bean\",{\"1\":{\"486\":1}}],[\"延迟加载\",{\"0\":{\"424\":1},\"1\":{\"91\":1}}],[\"拒收\",{\"1\":{\"837\":1}}],[\"体会到引擎设计的精妙之处\",{\"1\":{\"916\":1}}],[\"体现\",{\"1\":{\"837\":1}}],[\"体验要stata的效果就好了\",{\"1\":{\"608\":1}}],[\"拥有一票否决权的公司\",{\"1\":{\"1132\":1}}],[\"拥有全量的日志\",{\"1\":{\"899\":2}}],[\"拥有自己的队列\",{\"1\":{\"823\":1}}],[\"拥塞控制\",{\"1\":{\"56\":1}}],[\"版的rabbitmq服务器\",{\"1\":{\"823\":1}}],[\"版本10\",{\"1\":{\"1037\":1}}],[\"版本一致性控制\",{\"1\":{\"1012\":1}}],[\"版本为\",{\"1\":{\"1010\":1}}],[\"版本直接将查询缓存的整块功能删掉了\",{\"1\":{\"894\":1}}],[\"版本开始成为了默认存储引擎\",{\"1\":{\"892\":1}}],[\"版本和许多\",{\"1\":{\"785\":1}}],[\"版本中引入了\",{\"1\":{\"928\":1}}],[\"版本中\",{\"1\":{\"635\":1,\"1010\":1}}],[\"版本\",{\"1\":{\"554\":1,\"785\":2,\"998\":1}}],[\"版本更新\",{\"1\":{\"539\":1,\"1083\":1}}],[\"版本仲裁\",{\"0\":{\"476\":1}}],[\"版本号实现\",{\"1\":{\"539\":1}}],[\"版本号\",{\"0\":{\"311\":1}}],[\"版本的也行\",{\"1\":{\"107\":1}}],[\"挂了可能就会影响\",{\"1\":{\"823\":1}}],[\"挂载之前\",{\"1\":{\"225\":1}}],[\"挂载完成\",{\"1\":{\"225\":1}}],[\"挂载的文件里改容器也就跟着改了\",{\"1\":{\"210\":1}}],[\"呢\",{\"1\":{\"814\":1,\"901\":1,\"927\":1,\"1139\":1}}],[\"短片小说\",{\"1\":{\"1076\":1}}],[\"短连接则是指每次执行完很少的几次查询就断开连接\",{\"1\":{\"893\":1}}],[\"短信业务又不是我们的主业务\",{\"1\":{\"814\":1}}],[\"短句匹配\",{\"0\":{\"275\":1}}],[\"订阅队列还是接收消息\",{\"1\":{\"823\":1}}],[\"订阅者\",{\"1\":{\"817\":1}}],[\"订阅\",{\"1\":{\"817\":2}}],[\"订票业务和短信业务\",{\"1\":{\"812\":1}}],[\"订单解锁的消息延迟抵达\",{\"1\":{\"844\":1}}],[\"订单解锁晚于库存解锁执行导致库存永远不会被解锁\",{\"1\":{\"844\":1}}],[\"订单回滚\",{\"1\":{\"844\":1}}],[\"订单回滚但是下面feign调用的不会回滚\",{\"1\":{\"176\":1}}],[\"订单过期未支付\",{\"1\":{\"844\":2}}],[\"订单服务启动多个\",{\"1\":{\"830\":1}}],[\"订单服务又一次发起调用库存服务\",{\"1\":{\"170\":1}}],[\"订单关单的时候手动调用支付宝的收单\",{\"1\":{\"193\":1}}],[\"订单用异步确保型\",{\"1\":{\"183\":1,\"607\":1}}],[\"订单数加一\",{\"1\":{\"183\":1}}],[\"订单数据\",{\"1\":{\"118\":1}}],[\"订单模块是电商系统的枢纽\",{\"1\":{\"158\":1}}],[\"订单模块的\",{\"1\":{\"156\":1,\"581\":1}}],[\"订单的拦截器使用new\",{\"1\":{\"157\":1}}],[\"订单确认页需要feign拿用户地址\",{\"1\":{\"157\":1}}],[\"借用了分治的思想\",{\"1\":{\"1085\":1}}],[\"借鉴\",{\"1\":{\"811\":1}}],[\"借助\",{\"1\":{\"889\":1}}],[\"借助了\",{\"1\":{\"67\":1}}],[\"借助内容协商机制服务器从备选项中选择一项进行应用\",{\"1\":{\"47\":1}}],[\"填入以下数据\",{\"1\":{\"810\":1}}],[\"填充因子\",{\"1\":{\"703\":1}}],[\"咱们可以理解为nginx\",{\"1\":{\"810\":1}}],[\"咱们需要注意锁的级别\",{\"1\":{\"81\":1,\"936\":1}}],[\"科学上网\",{\"1\":{\"809\":1}}],[\"附录\",{\"0\":{\"808\":1},\"1\":{\"800\":1}}],[\"附加其他的操作\",{\"1\":{\"688\":1}}],[\"国内大牛力作\",{\"1\":{\"1150\":1}}],[\"国内下载镜像地址\",{\"1\":{\"800\":1}}],[\"国区没有\",{\"1\":{\"1003\":1}}],[\"国外有的用ga来表示release版本\",{\"1\":{\"554\":1}}],[\"花了三周的星期六\",{\"1\":{\"995\":1}}],[\"花了挺多时间不想再搞了就直接重装系统了\",{\"1\":{\"800\":1}}],[\"花生壳\",{\"1\":{\"197\":1}}],[\"起床适用于有工作的人\",{\"1\":{\"980\":1}}],[\"起因是看到别人博客搞了个文件系统很多文件且文件很大\",{\"1\":{\"1156\":1}}],[\"起因\",{\"1\":{\"800\":1,\"994\":1}}],[\"起个名字\",{\"1\":{\"234\":1}}],[\"走ssh协议\",{\"1\":{\"798\":1,\"984\":1}}],[\"固我第一次尝试了\",{\"1\":{\"797\":1,\"983\":1}}],[\"固定的位置循环写入\",{\"1\":{\"899\":1}}],[\"固定密码长度只要6位\",{\"1\":{\"802\":1}}],[\"固定密码的总长度\",{\"1\":{\"802\":1}}],[\"固定速率执行\",{\"1\":{\"730\":1}}],[\"固定数的\",{\"1\":{\"360\":1}}],[\"地区\",{\"0\":{\"1106\":1},\"1\":{\"1105\":1}}],[\"地区cn\",{\"1\":{\"797\":1,\"983\":1}}],[\"地理位置\",{\"1\":{\"869\":1}}],[\"地址总线36位\",{\"1\":{\"1093\":1}}],[\"地址总线如果是32个\",{\"1\":{\"1093\":1}}],[\"地址分\",{\"1\":{\"591\":1}}],[\"地址\",{\"1\":{\"576\":1,\"662\":1,\"923\":1,\"1041\":1}}],[\"地址被占用了\",{\"1\":{\"76\":1}}],[\"省份\",{\"1\":{\"961\":1}}],[\"省去了我们自定义redistemplate的过程\",{\"1\":{\"875\":1}}],[\"省时省力\",{\"1\":{\"796\":1}}],[\"省掉了整个续期操作\",{\"1\":{\"115\":1}}],[\"└──\",{\"1\":{\"795\":4}}],[\"├──\",{\"1\":{\"795\":3}}],[\"守护进程\",{\"1\":{\"790\":1}}],[\"宿主机必须存在这个文件\",{\"1\":{\"789\":1}}],[\"舒服太多了\",{\"1\":{\"789\":1}}],[\"备忘录\",{\"1\":{\"1164\":1}}],[\"备忘录和提醒事项分类\",{\"1\":{\"1163\":1}}],[\"备份拿到的是\",{\"1\":{\"929\":2}}],[\"备份一般都会在备库上执行\",{\"1\":{\"929\":1}}],[\"备份系统备份的得到的库不是一个逻辑时间点\",{\"1\":{\"927\":1}}],[\"备份为什么要加锁呢\",{\"1\":{\"927\":1}}],[\"备份\",{\"0\":{\"799\":1,\"800\":1,\"985\":1},\"1\":{\"799\":1,\"985\":1}}],[\"备份数据库\",{\"1\":{\"787\":1}}],[\"备注\",{\"1\":{\"754\":1,\"922\":1,\"927\":1,\"928\":1}}],[\"名字\",{\"1\":{\"986\":1,\"1001\":1}}],[\"名字首字母大写\",{\"0\":{\"945\":1}}],[\"名字第一个字是张\",{\"1\":{\"924\":1}}],[\"名字命名有讲究\",{\"1\":{\"823\":1}}],[\"名称\",{\"1\":{\"784\":2}}],[\"名实现动态路由\",{\"0\":{\"591\":1}}],[\"⭐️\",{\"1\":{\"782\":7,\"997\":1,\"1038\":1}}],[\"⭐⭐⭐\",{\"0\":{\"739\":1}}],[\"七\",{\"0\":{\"771\":1,\"1152\":1}}],[\"六\",{\"0\":{\"770\":1,\"1149\":1}}],[\"李雷\",{\"1\":{\"765\":1,\"766\":1,\"768\":1}}],[\"李四\",{\"1\":{\"765\":1,\"766\":1,\"768\":1}}],[\"李泽玉考西电\",{\"1\":{\"220\":1}}],[\"综合练习\",{\"0\":{\"764\":1}}],[\"综上\",{\"1\":{\"543\":1}}],[\"综上所述\",{\"1\":{\"155\":1,\"785\":1,\"990\":1}}],[\"隶属的就是一个类\",{\"1\":{\"761\":1}}],[\"普通索引占用的空间也就越小\",{\"1\":{\"918\":1}}],[\"普通索引的叶子节点就越小\",{\"1\":{\"918\":1}}],[\"普通方法与静态方法\",{\"0\":{\"760\":1}}],[\"普通select\",{\"1\":{\"82\":1}}],[\"贼省略大括号的同时\",{\"1\":{\"757\":1}}],[\"慢查询\",{\"1\":{\"959\":1}}],[\"慢查询是否开启\",{\"1\":{\"897\":1}}],[\"慢就是快\",{\"1\":{\"740\":1}}],[\"慢慢的把阀值增长到设置的阀值\",{\"1\":{\"602\":1}}],[\"亿行的表上一个整数字段的索引\",{\"1\":{\"916\":1}}],[\"亿了\",{\"1\":{\"916\":1}}],[\"亿长度的数组\",{\"1\":{\"739\":1}}],[\"亿的映射空间\",{\"1\":{\"739\":1}}],[\"恰好对应数组的有效索引范围\",{\"1\":{\"739\":1}}],[\"恰好nginx\",{\"1\":{\"71\":1}}],[\"饼状图\",{\"1\":{\"736\":1}}],[\"柱状图\",{\"1\":{\"736\":1}}],[\"背靠是\",{\"1\":{\"735\":1}}],[\"痛点\",{\"0\":{\"734\":1}}],[\"占着\",{\"1\":{\"929\":1}}],[\"占用内存涨得特别快\",{\"1\":{\"893\":1}}],[\"占用额外内控空间去记录该反序列化的那个类的全路径类名\",{\"1\":{\"872\":1}}],[\"占用了我们大部分时间和精力\",{\"1\":{\"726\":1}}],[\"占位符提供具体的值\",{\"1\":{\"522\":1}}],[\"占位符提供值的方法\",{\"1\":{\"522\":1}}],[\"占位符提供值\",{\"1\":{\"522\":1}}],[\"占位符\",{\"1\":{\"522\":1}}],[\"启用第三方库时也需要显式配置\",{\"1\":{\"726\":1}}],[\"启动时候\",{\"1\":{\"1160\":1}}],[\"启动时间\",{\"1\":{\"998\":1}}],[\"启动了但还没提交\",{\"1\":{\"935\":1}}],[\"启动了2个服务\",{\"1\":{\"831\":1}}],[\"启动的时候会创建一个视图\",{\"1\":{\"934\":1}}],[\"启动的时候加载\",{\"1\":{\"124\":1}}],[\"启动事务\",{\"1\":{\"929\":1}}],[\"启动nginx\",{\"1\":{\"810\":1}}],[\"启动线程\",{\"1\":{\"688\":1}}],[\"启动变慢非常多\",{\"1\":{\"635\":1}}],[\"启动类给上静态变量\",{\"1\":{\"1081\":1}}],[\"启动类加载器\",{\"1\":{\"679\":1}}],[\"启动类\",{\"1\":{\"629\":1}}],[\"启动模板真不错\",{\"1\":{\"614\":1}}],[\"启动应用程序时会同时生效\",{\"1\":{\"543\":1}}],[\"启动应用两个都会生效吗\",{\"1\":{\"543\":1}}],[\"启动报错要求配\",{\"1\":{\"506\":1}}],[\"启动spring容器\",{\"1\":{\"459\":1}}],[\"启动程序\",{\"1\":{\"219\":1}}],[\"启动项目\",{\"1\":{\"215\":1,\"222\":1}}],[\"启动mysql容器\",{\"1\":{\"210\":1}}],[\"启动\",{\"1\":{\"124\":1,\"222\":1,\"354\":1,\"1041\":1}}],[\"乘除运算符\",{\"1\":{\"725\":1}}],[\"深度优先\",{\"1\":{\"1150\":1}}],[\"深奥的一比\",{\"1\":{\"1150\":1}}],[\"深\",{\"1\":{\"1106\":1}}],[\"深色框表示是在执行器中执行的\",{\"1\":{\"900\":1}}],[\"深入理解java虚拟机\",{\"1\":{\"1150\":1}}],[\"深入理解\",{\"1\":{\"724\":1}}],[\"深拷贝\",{\"1\":{\"683\":1}}],[\"驻留进入字符串常量池\",{\"1\":{\"723\":1}}],[\"烧脑的\",{\"0\":{\"723\":1}}],[\"忽略掉下划线开头的文件\",{\"1\":{\"1161\":1}}],[\"忽略字段为null\",{\"1\":{\"956\":1}}],[\"忽略了\",{\"1\":{\"722\":1}}],[\"忽略网络延迟\",{\"1\":{\"571\":1}}],[\"恭喜你\",{\"1\":{\"721\":1}}],[\"恭喜尚硅谷破百万关注\",{\"1\":{\"261\":1}}],[\"奇怪的\",{\"0\":{\"720\":1}}],[\"⚠️注意\",{\"1\":{\"716\":1}}],[\"桥方法为编译器自动生成\",{\"1\":{\"716\":1}}],[\"桥方法\",{\"1\":{\"716\":1}}],[\"呈上\",{\"0\":{\"716\":1}}],[\"擦除记录前要把记录更新到数据文件\",{\"1\":{\"899\":1}}],[\"擦除后多个父类的桥方法将冲突\",{\"1\":{\"717\":1}}],[\"擦除后为\",{\"1\":{\"717\":1}}],[\"擦除后\",{\"1\":{\"715\":2}}],[\"擦除后相当于\",{\"1\":{\"715\":1}}],[\"擦除为其限定类型\",{\"1\":{\"715\":1}}],[\"擦除为\",{\"1\":{\"715\":1,\"717\":1}}],[\"市面上有很多消息推送系统都是基于\",{\"1\":{\"713\":1}}],[\"市面上有5种常见的电商模式\",{\"1\":{\"204\":1}}],[\"凭借这些并不能够让你找到一份满意的工作\",{\"1\":{\"1150\":1}}],[\"凭借自己的了解\",{\"1\":{\"713\":1}}],[\"凭前缀是因为redis会存大量不同的数据\",{\"1\":{\"128\":1}}],[\"吧\",{\"1\":{\"713\":1,\"1150\":1}}],[\"套接字服务器等网络编程\",{\"1\":{\"713\":2}}],[\"套了一层又一层\",{\"1\":{\"231\":1}}],[\"间接地提高了系统的性能和吞吐量\",{\"1\":{\"712\":1}}],[\"间接实现了\",{\"1\":{\"357\":1}}],[\"询问内核数据是否准备就绪\",{\"1\":{\"712\":1}}],[\"核实\",{\"1\":{\"808\":1}}],[\"核把数据拷贝到用户空间\",{\"1\":{\"712\":1}}],[\"核心概念\",{\"0\":{\"822\":1}}],[\"核心控制器\",{\"1\":{\"543\":1}}],[\"核心配置文件\",{\"1\":{\"464\":1}}],[\"核心原理\",{\"1\":{\"152\":1}}],[\"核心方法\",{\"1\":{\"67\":1,\"877\":1}}],[\"核心\",{\"1\":{\"49\":1,\"478\":1,\"614\":1,\"688\":1,\"694\":1}}],[\"磁盘\",{\"1\":{\"709\":1}}],[\"磁盘路径或网络路径\",{\"1\":{\"400\":1}}],[\"描述了计算机系统与外部设备之间通信的过程\",{\"1\":{\"709\":1}}],[\"诺依曼结构\",{\"1\":{\"709\":1}}],[\"协作的\",{\"1\":{\"736\":1}}],[\"协议进行访问\",{\"1\":{\"706\":1}}],[\"协议从服务器加载\",{\"1\":{\"706\":1}}],[\"协议\",{\"0\":{\"818\":1},\"1\":{\"706\":1,\"797\":1,\"983\":1}}],[\"协调tm全局事务中的各个分支事务\",{\"1\":{\"606\":1}}],[\"桶中的node被树化时最小的hash表容量\",{\"1\":{\"703\":1}}],[\"私有化构造方法\",{\"1\":{\"700\":1}}],[\"私有云\",{\"1\":{\"196\":1}}],[\"④\",{\"1\":{\"696\":2}}],[\"形成了死锁\",{\"1\":{\"933\":1}}],[\"形成了一个环\",{\"1\":{\"694\":1}}],[\"形参都没的情况\",{\"1\":{\"780\":1}}],[\"形参都是局部变量\",{\"1\":{\"658\":1}}],[\"形参个数类型都一样\",{\"1\":{\"688\":1}}],[\"形参在调用时\",{\"1\":{\"686\":1}}],[\"醒了要扩的那个状态还保留在没扩之前的状态\",{\"1\":{\"693\":1}}],[\"迭代匹配结果并提取部分内容\",{\"1\":{\"1019\":1}}],[\"迭代允许\",{\"1\":{\"889\":1}}],[\"迭代\",{\"1\":{\"689\":1}}],[\"供给型接口\",{\"1\":{\"688\":1}}],[\"懂反射更好的理解框架的地层实现\",{\"1\":{\"688\":1}}],[\"透过问题看本质\",{\"1\":{\"688\":1}}],[\"便于程序代码的重构\",{\"1\":{\"1074\":1}}],[\"便于子类继承此运行时类时\",{\"1\":{\"688\":1}}],[\"便于通过反射\",{\"1\":{\"688\":1}}],[\"枚举类型\",{\"1\":{\"779\":1}}],[\"枚举式\",{\"1\":{\"779\":1}}],[\"枚举形式最简单如果是懒汉式\",{\"1\":{\"779\":1}}],[\"枚举\",{\"1\":{\"688\":1}}],[\"枚举注解也自己看博客学\",{\"1\":{\"687\":1}}],[\"落地\",{\"0\":{\"819\":1},\"1\":{\"688\":1}}],[\"落地实现这个方案\",{\"1\":{\"183\":1,\"605\":1,\"607\":1}}],[\"统称一致性问题\",{\"1\":{\"905\":1}}],[\"统计文本中每个字符出现的次数\",{\"1\":{\"688\":1}}],[\"统一消息的编程模型\",{\"1\":{\"594\":1}}],[\"统一跳转到统一处理结果页面\",{\"1\":{\"584\":1}}],[\"统一异常处理\",{\"1\":{\"240\":1}}],[\"∞\",{\"1\":{\"688\":2}}],[\"泛型无法使用\",{\"1\":{\"717\":1}}],[\"泛型参数不能是基本类型\",{\"1\":{\"717\":1}}],[\"泛型参数与类的泛型参数没有任何关系比如类是<e>\",{\"1\":{\"688\":1}}],[\"泛型有哪些限制\",{\"0\":{\"717\":1}}],[\"泛型可以使用自限定类型如\",{\"1\":{\"715\":1}}],[\"泛型擦除后为\",{\"1\":{\"716\":1}}],[\"泛型擦除之后\",{\"1\":{\"715\":1}}],[\"泛型擦除中\",{\"1\":{\"639\":1}}],[\"泛型本质上其实还是编译器的行为\",{\"1\":{\"715\":1}}],[\"泛型方法所属的类是不是泛型类都没有关系\",{\"1\":{\"688\":1}}],[\"泛型方法是<t>\",{\"1\":{\"688\":1}}],[\"泛型方法\",{\"1\":{\"688\":1}}],[\"泛型常见的表示可以是<e>\",{\"1\":{\"688\":1}}],[\"泛型类型参数必须是一个类或接口类型\",{\"1\":{\"688\":1}}],[\"泛型类型参数<t>必须是一个引用类型\",{\"1\":{\"688\":1}}],[\"泛型的限制一般是由泛型擦除机制导致的\",{\"1\":{\"717\":1}}],[\"泛型的\",{\"1\":{\"688\":1}}],[\"泛型\",{\"0\":{\"714\":1},\"1\":{\"688\":1}}],[\"古老\",{\"1\":{\"688\":1}}],[\"见视频p602\",{\"1\":{\"688\":1}}],[\"见hashset\",{\"1\":{\"688\":1}}],[\"见到的\",{\"1\":{\"477\":1}}],[\"见到很多\",{\"1\":{\"477\":1}}],[\"效率极高\",{\"1\":{\"969\":1}}],[\"效率就会越低\",{\"1\":{\"905\":1}}],[\"效率是不是低得让人难以忍受\",{\"1\":{\"899\":1}}],[\"效率比hashmap高\",{\"1\":{\"688\":1}}],[\"效率要高于hashset\",{\"1\":{\"688\":1}}],[\"效率低\",{\"1\":{\"688\":2}}],[\"效率高\",{\"1\":{\"688\":1,\"959\":1}}],[\"效果相同时git\",{\"1\":{\"990\":1}}],[\"效果体现\",{\"0\":{\"479\":1}}],[\"效果\",{\"0\":{\"447\":1,\"480\":1}}],[\"效果就是\",{\"1\":{\"444\":1}}],[\"跑一个线程有4步\",{\"1\":{\"687\":1}}],[\"笔试题\",{\"1\":{\"686\":1}}],[\"笔记等支持同步\",{\"1\":{\"1162\":1}}],[\"笔记中\",{\"1\":{\"1101\":1}}],[\"笔记中了\",{\"1\":{\"1080\":1}}],[\"笔记中的\",{\"1\":{\"779\":1}}],[\"笔记\",{\"1\":{\"83\":1,\"85\":1,\"93\":1,\"543\":1,\"876\":1,\"1081\":1,\"1144\":1}}],[\"装载装不上\",{\"1\":{\"1027\":1}}],[\"装载进内存中\",{\"1\":{\"688\":1}}],[\"装的时候可能得取消一个勾选\",{\"1\":{\"1026\":1}}],[\"装了啥\",{\"1\":{\"1001\":1}}],[\"装箱\",{\"1\":{\"686\":1}}],[\"装完后可在\",{\"1\":{\"223\":1}}],[\"匿名对象\",{\"1\":{\"686\":1}}],[\"辐射式设计\",{\"1\":{\"686\":1}}],[\"共同关注\",{\"1\":{\"869\":1}}],[\"共同点\",{\"1\":{\"686\":1}}],[\"共享公共数据库方式\",{\"1\":{\"612\":1}}],[\"共享锁\",{\"0\":{\"326\":1},\"1\":{\"115\":1,\"868\":1}}],[\"懒汉式\",{\"1\":{\"700\":1,\"779\":1}}],[\"懒汉\",{\"1\":{\"686\":1}}],[\"懒加载\",{\"1\":{\"424\":1,\"427\":1}}],[\"饿汉式单例是线程安全的\",{\"1\":{\"700\":1}}],[\"饿汉式\",{\"1\":{\"700\":1,\"779\":2}}],[\"饿汉\",{\"1\":{\"686\":1}}],[\"浮点型\",{\"1\":{\"686\":1}}],[\"冒泡\",{\"1\":{\"685\":1}}],[\"红色\",{\"1\":{\"993\":1}}],[\"红色框框处不是utf\",{\"1\":{\"805\":1}}],[\"红色部分表示授权\",{\"1\":{\"619\":1}}],[\"红黑树变成链表了\",{\"1\":{\"682\":1}}],[\"位数字的宽度\",{\"1\":{\"920\":1}}],[\"位于堆中\",{\"1\":{\"722\":1}}],[\"位于方法区中\",{\"1\":{\"722\":1}}],[\"位运算比直接的乘除法\",{\"1\":{\"686\":1}}],[\"位运算\",{\"1\":{\"686\":1}}],[\"位运算符操作的都是整型的数据\",{\"1\":{\"685\":1}}],[\"位必须是\",{\"1\":{\"681\":1}}],[\"位\",{\"1\":{\"681\":1}}],[\"位bit和高\",{\"1\":{\"681\":1}}],[\"位置\",{\"1\":{\"664\":1}}],[\"求解关键\",{\"0\":{\"1086\":1}}],[\"求\",{\"1\":{\"681\":1}}],[\"^=\",{\"1\":{\"1085\":3}}],[\"^a\",{\"1\":{\"1018\":1}}],[\"^abc\",{\"1\":{\"959\":1}}],[\"^^\",{\"1\":{\"1005\":1}}],[\"^^^\",{\"1\":{\"625\":1}}],[\"^\",{\"1\":{\"681\":4,\"694\":1,\"706\":1,\"883\":1,\"959\":1,\"1016\":2,\"1018\":1}}],[\"符号通常用于引用环境变量的值\",{\"1\":{\"782\":1}}],[\"符号引用是一种符号化的表示方式\",{\"1\":{\"679\":1}}],[\"符号引用包括类或接口的全限定名\",{\"1\":{\"679\":1}}],[\"符号引用验证等\",{\"1\":{\"679\":1}}],[\"符合就\",{\"1\":{\"590\":1}}],[\"元素只存储0和1\",{\"1\":{\"866\":1}}],[\"元素\",{\"1\":{\"694\":1}}],[\"元数据验证\",{\"1\":{\"679\":1}}],[\"元空间的大小不再计入\",{\"1\":{\"383\":1}}],[\"元空间的大小由系统的可用内存决定\",{\"1\":{\"383\":1}}],[\"低耦合\",{\"1\":{\"678\":1}}],[\"低成本\",{\"1\":{\"594\":2}}],[\"颜色\",{\"1\":{\"678\":1}}],[\"谈一谈你对面向对象的理解\",{\"0\":{\"678\":1}}],[\"谈谈java反射机制\",{\"1\":{\"637\":1}}],[\"谈谈你对\",{\"1\":{\"633\":1}}],[\"电脑从来没有关过机\",{\"1\":{\"1160\":1}}],[\"电话来了\",{\"1\":{\"675\":3}}],[\"电商系统中\",{\"1\":{\"183\":1}}],[\"电商系统涉及到3流\",{\"1\":{\"158\":1}}],[\"电商要求高\",{\"1\":{\"100\":1}}],[\"成就感满满的\",{\"1\":{\"1150\":1}}],[\"成都\",{\"1\":{\"1106\":1}}],[\"成长\",{\"0\":{\"1112\":1},\"1\":{\"1105\":1}}],[\"成本太高\",{\"1\":{\"915\":1}}],[\"成本\",{\"1\":{\"899\":1}}],[\"成为了链表中的第一个元素\",{\"1\":{\"694\":1}}],[\"成员变量有默认的属性值\",{\"1\":{\"686\":1}}],[\"成员变量\",{\"1\":{\"686\":1,\"696\":1}}],[\"成员有4种访问权限吧\",{\"1\":{\"668\":1}}],[\"成员内部类\",{\"1\":{\"668\":1,\"686\":1}}],[\"成功出现内容\",{\"1\":{\"1161\":1}}],[\"成功将码云上的个人学习笔记发布到giteepages上\",{\"1\":{\"1161\":1}}],[\"成功回调\",{\"1\":{\"834\":1,\"836\":1}}],[\"成功掉进了坑里\",{\"1\":{\"721\":1}}],[\"成功地找到了一种在不妥协可维护性和性能的情况下实现易于开发\",{\"1\":{\"713\":1}}],[\"成功给\",{\"1\":{\"626\":1}}],[\"成功\",{\"1\":{\"403\":1}}],[\"成功修改内存值为4\",{\"1\":{\"305\":1}}],[\"修正参数的作用\",{\"1\":{\"887\":1}}],[\"修饰\",{\"1\":{\"779\":1}}],[\"修饰函数式接口的\",{\"1\":{\"748\":1}}],[\"修饰泛型\",{\"1\":{\"718\":1}}],[\"修饰泛型变量\",{\"1\":{\"717\":1}}],[\"修饰符\",{\"0\":{\"669\":1}}],[\"修饰符有public\",{\"1\":{\"668\":1}}],[\"修改环境变量不重启生效\",{\"1\":{\"1041\":1}}],[\"修改快捷键为刚才配的\",{\"1\":{\"1005\":1}}],[\"修改完提交后\",{\"1\":{\"990\":1}}],[\"修改完成后\",{\"1\":{\"893\":1}}],[\"修改的命令\",{\"1\":{\"990\":1}}],[\"修改表结构等\",{\"1\":{\"927\":1}}],[\"修改默认密码\",{\"1\":{\"792\":1,\"802\":1}}],[\"修改密码\",{\"0\":{\"792\":1},\"1\":{\"802\":1}}],[\"修改保存后重启\",{\"1\":{\"789\":1}}],[\"修改后和之前一样\",{\"1\":{\"721\":1}}],[\"修改为指向元素\",{\"1\":{\"694\":1}}],[\"修改这一句\",{\"1\":{\"600\":1}}],[\"修改下nacos中的yaml配置文件\",{\"1\":{\"598\":1}}],[\"修改9527的yml\",{\"1\":{\"591\":1}}],[\"修改cloud\",{\"1\":{\"575\":1}}],[\"修改\",{\"1\":{\"437\":1,\"608\":1,\"927\":1,\"975\":1,\"990\":1}}],[\"修改时我们想要校验的字段和规则可能是不一样的\",{\"1\":{\"241\":1}}],[\"修改需要自定义的配置\",{\"1\":{\"213\":1}}],[\"修改订单状态之前一定要验签\",{\"1\":{\"192\":1}}],[\"修改商品库存为2\",{\"1\":{\"169\":1}}],[\"修改没法附带其它服务器一起改缓存\",{\"1\":{\"103\":1}}],[\"寄存器\",{\"1\":{\"664\":1}}],[\"梅开二度\",{\"1\":{\"662\":1,\"670\":1}}],[\"虚引用必须要和\",{\"1\":{\"660\":1}}],[\"虚引用是最弱的一种引用关系\",{\"1\":{\"660\":1}}],[\"虚引用\",{\"1\":{\"660\":2}}],[\"虚拟主机是共享相同的身份认证和加密环境的独立服务器域\",{\"1\":{\"823\":1}}],[\"虚拟主机\",{\"1\":{\"823\":2}}],[\"虚拟dom\",{\"1\":{\"218\":1}}],[\"虚拟机栈\",{\"1\":{\"695\":1}}],[\"虚拟机启动时\",{\"1\":{\"635\":1}}],[\"虚拟机规范把方法区描述为堆的一个逻辑部分\",{\"1\":{\"386\":1}}],[\"虚拟机会根据应用程序的需求自动管理元空间的内存使用\",{\"1\":{\"383\":1}}],[\"虚拟机使用永久代\",{\"1\":{\"383\":1}}],[\"虚拟机\",{\"0\":{\"570\":1},\"1\":{\"94\":1,\"634\":1,\"724\":1}}],[\"③\",{\"1\":{\"658\":1,\"696\":2}}],[\"啊\",{\"1\":{\"658\":1,\"1092\":1}}],[\"黑马点评\",{\"0\":{\"869\":1}}],[\"黑客明知道但就是一直访问这个不存在的资源\",{\"1\":{\"866\":1}}],[\"黑线|||||||||\",{\"1\":{\"658\":1}}],[\"黑卡丽\",{\"0\":{\"524\":1}}],[\"心态其实是很关键的\",{\"1\":{\"1147\":1}}],[\"心态如何把握\",{\"0\":{\"1133\":1}}],[\"心态\",{\"0\":{\"1077\":1}}],[\"心想\",{\"1\":{\"658\":1}}],[\"心中充满了鄙夷\",{\"1\":{\"658\":1}}],[\"心跳连接\",{\"1\":{\"564\":1}}],[\"额外的命令行工具\",{\"1\":{\"1005\":1}}],[\"额外字段\",{\"1\":{\"250\":1}}],[\"额\",{\"1\":{\"658\":1}}],[\"汽车类作为实现类实现跑和叫\",{\"1\":{\"657\":1}}],[\"汽车不是动物呀\",{\"1\":{\"657\":1}}],[\"契约关系\",{\"1\":{\"657\":1}}],[\"血缘联系\",{\"1\":{\"657\":1}}],[\"圆形和方形都是形状的一种\",{\"1\":{\"655\":1}}],[\"赋值给这个数据版本的事务\",{\"1\":{\"935\":1}}],[\"赋值\",{\"1\":{\"696\":1}}],[\"赋值运算有返回值\",{\"0\":{\"653\":1}}],[\"赋予了java语言令人意外的活力\",{\"1\":{\"639\":1}}],[\"赋予程序在运行时自省\",{\"1\":{\"638\":1}}],[\"疯狂java讲义\",{\"1\":{\"1150\":2}}],[\"疯狂java\",{\"1\":{\"649\":1}}],[\"呼应题目\",{\"1\":{\"648\":1}}],[\"精确匹配\",{\"1\":{\"823\":1}}],[\"精简\",{\"0\":{\"758\":1}}],[\"精度溢出\",{\"1\":{\"648\":1}}],[\"精准\",{\"1\":{\"594\":2}}],[\"精准唤醒\",{\"1\":{\"352\":1}}],[\"妙啊\",{\"1\":{\"648\":1,\"980\":1}}],[\"溢出也是顶多溢出最高位符号位一位bit\",{\"1\":{\"648\":1}}],[\"减小部署包的大小\",{\"1\":{\"1012\":1}}],[\"减小了最终构建结果的大小\",{\"1\":{\"1012\":1}}],[\"减慢发送消息速率\",{\"1\":{\"848\":1}}],[\"减法\",{\"1\":{\"648\":1}}],[\"减少选择\",{\"1\":{\"1051\":1}}],[\"减少请求数据库的次数\",{\"1\":{\"973\":1}}],[\"减少单个数据库的负载\",{\"1\":{\"960\":1}}],[\"减少单次查询的磁盘访问次数\",{\"1\":{\"919\":1}}],[\"减少单次读取数据的量\",{\"1\":{\"91\":1}}],[\"减少死锁的主要方向\",{\"1\":{\"933\":1}}],[\"减少回表次数\",{\"1\":{\"924\":1}}],[\"减少语句的执行时间\",{\"1\":{\"922\":1}}],[\"减少了语句的交互次数\",{\"1\":{\"907\":1}}],[\"减少了对\",{\"1\":{\"712\":1}}],[\"减少虚拟机的运行开销\",{\"1\":{\"715\":1}}],[\"减少哈希冲突的概率\",{\"1\":{\"681\":1}}],[\"减少判断\",{\"1\":{\"517\":2}}],[\"减少系统开销\",{\"1\":{\"441\":1}}],[\"减少和数据库的交互次数\",{\"1\":{\"441\":1}}],[\"减少进入老年代的对象数量\",{\"1\":{\"389\":1}}],[\"减少创建和销毁线程带来的系统开销\",{\"1\":{\"367\":1}}],[\"减少io次数\",{\"1\":{\"250\":1}}],[\"补贴\",{\"1\":{\"1108\":1}}],[\"补=\",{\"1\":{\"648\":1}}],[\"补\",{\"1\":{\"648\":2}}],[\"补码只有转换为原码才能被正常人类识别\",{\"1\":{\"685\":1}}],[\"补码解决\",{\"1\":{\"648\":1}}],[\"补码与原码相互转换\",{\"1\":{\"648\":1}}],[\"补充评论\",{\"0\":{\"1093\":1}}],[\"补充面试题\",{\"1\":{\"908\":1}}],[\"补充面试常问\",{\"1\":{\"466\":1}}],[\"补充我的问题\",{\"1\":{\"581\":1}}],[\"补充\",{\"0\":{\"124\":1,\"182\":1,\"186\":1,\"488\":1,\"491\":1,\"494\":1,\"495\":1,\"496\":1,\"579\":1,\"609\":1,\"903\":1,\"910\":1},\"1\":{\"231\":1,\"359\":1,\"422\":1,\"605\":1,\"686\":2,\"688\":2,\"695\":1,\"713\":1,\"722\":1,\"897\":1,\"902\":1,\"906\":2,\"916\":3,\"918\":1,\"923\":2,\"947\":1,\"996\":1,\"1160\":1}}],[\"队列过期\",{\"0\":{\"841\":1}}],[\"队列删除消息\",{\"1\":{\"830\":1}}],[\"队列并指定它们之间的路由键\",{\"1\":{\"823\":1}}],[\"队列\",{\"1\":{\"642\":1,\"817\":1}}],[\"康师傅的\",{\"1\":{\"642\":1}}],[\"远优于早期的简单同步实现\",{\"1\":{\"641\":1}}],[\"远程仓库\",{\"1\":{\"1009\":1}}],[\"远程地址\",{\"1\":{\"987\":2}}],[\"远程控制\",{\"1\":{\"196\":1}}],[\"远程调用注册api\",{\"1\":{\"134\":1}}],[\"幸好java语言提供了并发包\",{\"1\":{\"640\":1}}],[\"言下之意\",{\"1\":{\"985\":1}}],[\"言归正传\",{\"1\":{\"637\":1}}],[\"言外之意就是没有用这个\",{\"1\":{\"581\":1}}],[\"诊断\",{\"1\":{\"637\":1}}],[\"垃圾时间\",{\"1\":{\"980\":1}}],[\"垃圾收集机制等的掌握\",{\"1\":{\"637\":1}}],[\"垃圾收集器不会碰这种对象\",{\"1\":{\"636\":1}}],[\"垃圾回收线程\",{\"0\":{\"701\":1}}],[\"垃圾回收器将永远不会回收被引用的对象\",{\"1\":{\"660\":1}}],[\"垃圾回收器就不会回收它\",{\"1\":{\"660\":1}}],[\"垃圾回收\",{\"1\":{\"381\":1}}],[\"垃圾回收机制会将其回收\",{\"1\":{\"125\":1}}],[\"逐一添加自己喜欢的插件\",{\"1\":{\"1161\":1}}],[\"逐渐调整到整点为止\",{\"1\":{\"980\":1}}],[\"逐条解释运行的\",{\"1\":{\"635\":1}}],[\"逐个进行初始化\",{\"1\":{\"543\":1}}],[\"平均分\",{\"1\":{\"959\":1}}],[\"平时也没有什么动不动就需要恢复临时库的场景呀\",{\"1\":{\"901\":1}}],[\"平台自身\",{\"1\":{\"636\":1}}],[\"平台的理解\",{\"1\":{\"633\":1}}],[\"平台到底了解到什么程度\",{\"1\":{\"633\":1}}],[\"平板问题\",{\"1\":{\"546\":1,\"1166\":1}}],[\"角色映射用于表示用户与角色之间的关系\",{\"1\":{\"630\":1}}],[\"角色映射\",{\"1\":{\"630\":1}}],[\"角色可以被赋予给用户\",{\"1\":{\"630\":1}}],[\"角色是权限的集合\",{\"1\":{\"630\":1}}],[\"角色\",{\"1\":{\"630\":3}}],[\"权限必须是\",{\"1\":{\"998\":1}}],[\"权限管理系统\",{\"1\":{\"877\":1}}],[\"权限映射表示角色与权限之间的关系\",{\"1\":{\"630\":1}}],[\"权限映射\",{\"1\":{\"630\":1}}],[\"权限表示系统中具体的操作或功能\",{\"1\":{\"630\":1}}],[\"权限\",{\"0\":{\"786\":1},\"1\":{\"630\":1,\"1100\":1}}],[\"权限属性\",{\"1\":{\"629\":1}}],[\"权限控制等\",{\"1\":{\"156\":1}}],[\"遍走\",{\"1\":{\"627\":1}}],[\"遍历到c的时候发现c的next节点是b\",{\"1\":{\"694\":1}}],[\"遍历前10个偶数\",{\"1\":{\"689\":1}}],[\"遍历map的时候index表示的就是map的key\",{\"1\":{\"436\":1}}],[\"遍历list的时候是index就是索引\",{\"1\":{\"436\":1}}],[\"遍历出所有结果拼接一个结束的字符\",{\"1\":{\"436\":1}}],[\"遍历出所有结果拼接一个开始的字符\",{\"1\":{\"436\":1}}],[\"遍历集合\",{\"1\":{\"430\":1}}],[\"遍历\",{\"1\":{\"220\":1}}],[\"疑问\",{\"1\":{\"625\":1}}],[\"黄色部分表示异常处理\",{\"1\":{\"619\":1}}],[\"账号后所有东西就都同步过来了\",{\"1\":{\"1005\":1}}],[\"账号密码不能用默认的\",{\"1\":{\"618\":1}}],[\"账户余额中扣除电影票价\",{\"1\":{\"931\":1}}],[\"账户余额没扣\",{\"1\":{\"927\":1}}],[\"账户余额只有买一本书\",{\"1\":{\"178\":1}}],[\"登陆实现的延续\",{\"1\":{\"627\":1}}],[\"登陆接口\",{\"0\":{\"626\":1},\"1\":{\"627\":1}}],[\"登陆界面得换成系统的\",{\"1\":{\"618\":1}}],[\"登陆了才能访问到\",{\"1\":{\"616\":1}}],[\"登出成功的处理器\",{\"1\":{\"631\":1}}],[\"登出\",{\"1\":{\"616\":1}}],[\"登录后可以在不同电脑之间同步词库\",{\"1\":{\"1006\":1}}],[\"登录时死活登不上\",{\"1\":{\"1005\":1}}],[\"登录进入\",{\"1\":{\"986\":1}}],[\"登录的时候怎么把答案的key再带回给后端\",{\"1\":{\"878\":1}}],[\"登录认证失败的处理器\",{\"1\":{\"631\":1}}],[\"登录成功的处理器\",{\"1\":{\"631\":1}}],[\"登录成功后跳转回原服务\",{\"1\":{\"153\":1}}],[\"登录用户放到\",{\"1\":{\"156\":1}}],[\"登录以后\",{\"1\":{\"154\":1}}],[\"登录购物车\",{\"1\":{\"154\":1}}],[\"登录状态\",{\"1\":{\"154\":1}}],[\"登录服务器\",{\"1\":{\"153\":1}}],[\"登录\",{\"1\":{\"70\":1,\"153\":1,\"688\":1,\"1005\":1}}],[\"登录完成最终返回了一个真正的token字符串\",{\"1\":{\"68\":1}}],[\"搭配欧陆直接起飞\",{\"1\":{\"1162\":1}}],[\"搭配一起用\",{\"1\":{\"1080\":1}}],[\"搭springboot项目\",{\"1\":{\"616\":1}}],[\"搭建一主多从\",{\"0\":{\"861\":1}}],[\"搭建\",{\"1\":{\"565\":1}}],[\"搭建数据库mysql\",{\"0\":{\"395\":1}}],[\"搭建环境\",{\"0\":{\"394\":1}}],[\"社区也会有人做教程的\",{\"1\":{\"1145\":1}}],[\"社区\",{\"1\":{\"1145\":1}}],[\"社区资源也比shiro丰富\",{\"1\":{\"615\":1}}],[\"社交登录指的是用qq微信等方式登录\",{\"1\":{\"135\":1}}],[\"社交登录\",{\"0\":{\"135\":1},\"1\":{\"126\":1}}],[\"格式会记录行的内容\",{\"1\":{\"900\":1}}],[\"格式的话是记sql语句\",{\"1\":{\"900\":1}}],[\"格式的数据\",{\"1\":{\"706\":1}}],[\"格式的完整路径\",{\"1\":{\"192\":1}}],[\"格式\",{\"0\":{\"1126\":1},\"1\":{\"613\":1}}],[\"魔改数据库\",{\"1\":{\"606\":1}}],[\"卖家库\",{\"1\":{\"606\":1}}],[\"检索出表中\",{\"1\":{\"924\":1}}],[\"检验规则是否生效\",{\"1\":{\"605\":1}}],[\"检查\",{\"1\":{\"1012\":1}}],[\"检查依赖项的\",{\"1\":{\"1012\":1}}],[\"检查请求中是否携带有效的jwt令牌\",{\"1\":{\"890\":1}}],[\"检查异常\",{\"0\":{\"705\":1}}],[\"检查文件后缀名是否在允许的列表中\",{\"1\":{\"540\":1}}],[\"检查aware接口\",{\"1\":{\"489\":1}}],[\"检查内存泄漏\",{\"1\":{\"389\":1}}],[\"检查到223\",{\"1\":{\"76\":1}}],[\"检查到dns服务器208\",{\"1\":{\"76\":1}}],[\"兜底方法\",{\"1\":{\"604\":1}}],[\"触发器\",{\"1\":{\"892\":1}}],[\"触发的系统主动规则\",{\"1\":{\"603\":1}}],[\"触发一个自己的方法treenodeclick\",{\"1\":{\"226\":1}}],[\"牺牲小我\",{\"1\":{\"603\":1}}],[\"往小了说可以是今天的一个学习计划\",{\"1\":{\"1144\":1}}],[\"往往同时具有老技术和新技术\",{\"1\":{\"1111\":1}}],[\"往往并不能进行有效优化\",{\"1\":{\"635\":1}}],[\"往库存解锁的死信队列丢一条消息\",{\"1\":{\"844\":1}}],[\"往下部分略过\",{\"1\":{\"603\":1}}],[\"往返时间\",{\"1\":{\"603\":1}}],[\"往返\",{\"1\":{\"603\":1}}],[\"往后再回头了\",{\"1\":{\"466\":1}}],[\"流畅的很\",{\"1\":{\"1160\":1}}],[\"流的形式的～\",{\"1\":{\"877\":1}}],[\"流量削峰\",{\"0\":{\"814\":1}}],[\"流控设置保存在内存中\",{\"1\":{\"600\":1}}],[\"流控\",{\"0\":{\"600\":1}}],[\"流程一样\",{\"1\":{\"990\":1}}],[\"流程图如下\",{\"1\":{\"617\":1}}],[\"流程图\",{\"0\":{\"617\":1},\"1\":{\"619\":1}}],[\"流程\",{\"1\":{\"153\":1,\"423\":1}}],[\"流程上是这样的\",{\"1\":{\"54\":1}}],[\"速率控制\",{\"1\":{\"599\":1}}],[\"速度会相对快一点\",{\"1\":{\"1145\":1}}],[\"速度慢\",{\"1\":{\"448\":1}}],[\"速度快\",{\"1\":{\"448\":1,\"688\":1}}],[\"速度当然也就越快\",{\"1\":{\"76\":1}}],[\"醉了\",{\"1\":{\"598\":1}}],[\"智联招聘\",{\"1\":{\"1128\":1}}],[\"智能的互联化通讯能力\",{\"1\":{\"594\":2}}],[\"智慧互联\",{\"1\":{\"196\":1}}],[\"友好\",{\"1\":{\"594\":2}}],[\"意志力不行❌\",{\"1\":{\"980\":1}}],[\"意思是父类的方法已经被重写\",{\"1\":{\"697\":1}}],[\"意思就是不会从上层目录寻找\",{\"1\":{\"1009\":1}}],[\"意思就是先从工程里面有依赖相关的模块中找你引入的\",{\"1\":{\"1009\":1}}],[\"意思就是在类加载到方法区的时候执行的\",{\"1\":{\"697\":1}}],[\"意思就是上面这条语句还是得跑sql\",{\"1\":{\"447\":1}}],[\"意为从大的目标去观察\",{\"1\":{\"688\":1}}],[\"意味着两边都删了这一行\",{\"1\":{\"993\":1}}],[\"意味着如果采用第一个策略\",{\"1\":{\"932\":1}}],[\"意味着如果你只执行一个\",{\"1\":{\"907\":1}}],[\"意味着\",{\"1\":{\"686\":1}}],[\"意味着spring\",{\"1\":{\"594\":1}}],[\"耗时多少毫秒\",{\"1\":{\"594\":1}}],[\"耗时三个月断断续续敲完\",{\"1\":{\"261\":1}}],[\"运算符进行字符串匹配时\",{\"1\":{\"959\":1}}],[\"运算器\",{\"1\":{\"709\":1}}],[\"运算代替\",{\"1\":{\"706\":1}}],[\"运算的\",{\"1\":{\"685\":1}}],[\"运算的目的是将哈希码的高位和低位的信息结合起来\",{\"1\":{\"681\":1}}],[\"运算更快\",{\"1\":{\"681\":1}}],[\"运算\",{\"1\":{\"681\":1}}],[\"运维多用一个bash命令\",{\"1\":{\"594\":1}}],[\"运行成功之后\",{\"1\":{\"1161\":1}}],[\"运行如下命令启动本地服务器\",{\"1\":{\"1161\":1}}],[\"运行该命令\",{\"1\":{\"999\":1}}],[\"运行的\",{\"1\":{\"998\":1}}],[\"运行权限\",{\"1\":{\"998\":1}}],[\"运行shell\",{\"1\":{\"994\":1}}],[\"运行上面拉去的镜像成容器\",{\"1\":{\"790\":1}}],[\"运行文件\",{\"1\":{\"784\":1}}],[\"运行之后\",{\"1\":{\"720\":1}}],[\"运行期间通过反射添加\",{\"1\":{\"715\":1}}],[\"运行\",{\"1\":{\"537\":1,\"699\":1,\"1001\":1,\"1039\":1}}],[\"运行时环境\",{\"1\":{\"1012\":1}}],[\"运行时环境提供依赖\",{\"1\":{\"1012\":1}}],[\"运行时常量池\",{\"1\":{\"722\":1}}],[\"运行时常量池在方法区中\",{\"1\":{\"386\":1}}],[\"运行时表现为sub类特性\",{\"1\":{\"697\":1}}],[\"运行时类\",{\"1\":{\"688\":1}}],[\"运行时候动态获取注解信息\",{\"1\":{\"500\":1}}],[\"运行流程\",{\"0\":{\"363\":1}}],[\"携程的apollo\",{\"1\":{\"591\":1}}],[\"携带了哪个字段查询条件就带上这个字段的值\",{\"1\":{\"430\":1}}],[\"携带的数据\",{\"1\":{\"226\":1}}],[\"携带上数据\",{\"1\":{\"226\":1}}],[\"携带参数\",{\"1\":{\"98\":1,\"536\":1}}],[\"②\",{\"1\":{\"658\":1,\"696\":2}}],[\"②访问http\",{\"1\":{\"591\":1}}],[\"②lb\",{\"1\":{\"591\":1}}],[\"①\",{\"1\":{\"658\":1,\"696\":2}}],[\"①启动一个eureka7001+两个服务提供者8001\",{\"1\":{\"591\":1}}],[\"①需要注意的是uri的协议为lb\",{\"1\":{\"591\":1}}],[\"希望大家多多包涵\",{\"1\":{\"1152\":1}}],[\"希望大家养成习惯\",{\"1\":{\"740\":1}}],[\"希望以后你不会是那群天天打游戏看剧最后抱怨自己工资低的那群人中的一个\",{\"1\":{\"1141\":1}}],[\"希望能弥补你看到基本工资后的脚软\",{\"1\":{\"1104\":1}}],[\"希望对大家有所帮助\",{\"1\":{\"1001\":1}}],[\"希望借由把这个疑惑解开的过程\",{\"1\":{\"934\":1}}],[\"希望我举的例子能够帮助你理解事务\",{\"1\":{\"908\":1}}],[\"希望这些案例能加深你对\",{\"1\":{\"904\":1}}],[\"希望这可以帮助你给\",{\"1\":{\"522\":1}}],[\"希望在8001外面套一层9527\",{\"1\":{\"590\":1}}],[\"断开连接\",{\"1\":{\"893\":1}}],[\"断定型接口\",{\"1\":{\"688\":1}}],[\"断言\",{\"1\":{\"590\":1,\"591\":3}}],[\"断路器会关闭\",{\"1\":{\"587\":1}}],[\"断路器将会开启\",{\"1\":{\"587\":1}}],[\"断路器开启或者关闭的条件\",{\"0\":{\"587\":1}}],[\"越少越好\",{\"1\":{\"1126\":1}}],[\"越来越偏向仪表盘\",{\"1\":{\"589\":1}}],[\"越细越快\",{\"1\":{\"115\":1}}],[\"碰撞解决方法\",{\"1\":{\"740\":1}}],[\"碰上\",{\"0\":{\"649\":1}}],[\"碰上服务端宕机或关闭\",{\"1\":{\"585\":1}}],[\"碰到了这样的一道题\",{\"1\":{\"658\":1}}],[\"碰到的问题\",{\"1\":{\"125\":1}}],[\"碰到忘记点搜本笔记配合视频再度复习\",{\"1\":{\"90\":1}}],[\"宕机\",{\"1\":{\"585\":1}}],[\"坐席忙继续等待请按1无需等待请挂机\",{\"1\":{\"582\":1}}],[\"坐等\",{\"1\":{\"466\":1}}],[\"扇出\",{\"1\":{\"581\":1}}],[\"豪猪哥出道即巅峰\",{\"1\":{\"581\":1}}],[\"毫秒\",{\"1\":{\"577\":1}}],[\"端\",{\"1\":{\"606\":2}}],[\"端业务设成耗费3秒钟\",{\"1\":{\"577\":1}}],[\"端口被占\",{\"1\":{\"1041\":1}}],[\"端口号\",{\"1\":{\"688\":2}}],[\"端口等\",{\"1\":{\"576\":1}}],[\"端口都要相同\",{\"1\":{\"230\":1}}],[\"端口\",{\"1\":{\"210\":1}}],[\"端口映射到主机的\",{\"1\":{\"210\":1}}],[\"手机验证码\",{\"0\":{\"854\":1}}],[\"手写轮询算法\",{\"1\":{\"575\":1}}],[\"手动完成对象的序列化和反序列化\",{\"1\":{\"875\":1}}],[\"手动拒签\",{\"1\":{\"837\":1}}],[\"手动模式需要\",{\"1\":{\"837\":1}}],[\"手动确认\",{\"1\":{\"837\":3}}],[\"手动ack消息\",{\"1\":{\"832\":1,\"837\":1}}],[\"手动一行行命令的时候用\",{\"1\":{\"799\":1,\"985\":1}}],[\"手动的输出会导致一直阻塞\",{\"1\":{\"689\":1}}],[\"手动置null\",{\"1\":{\"660\":1}}],[\"手动让\",{\"1\":{\"489\":1}}],[\"手动清除了一级缓存\",{\"1\":{\"444\":1}}],[\"手动清除entry对象\",{\"1\":{\"157\":1}}],[\"手动调用threadlocal的remove方法\",{\"1\":{\"157\":1}}],[\"手动解锁\",{\"1\":{\"115\":1}}],[\"达不到特殊化定制的目的了\",{\"1\":{\"575\":1}}],[\"现代人会无限延长垃圾时间\",{\"1\":{\"980\":1}}],[\"现代浏览器不允许直接从本地文件系统加载\",{\"1\":{\"706\":1}}],[\"现象\",{\"1\":{\"929\":4}}],[\"现实生活中我们没办法保证网络不中断网线不会断\",{\"1\":{\"572\":1}}],[\"现实情况下我们面对的是一个不可靠的网络\",{\"1\":{\"572\":1}}],[\"现在懂了\",{\"1\":{\"1165\":1}}],[\"现在128篇笔记了\",{\"1\":{\"1164\":1}}],[\"现在记性变差了越来越依赖于这两个\",{\"1\":{\"1164\":1}}],[\"现在我就是在学校的实验楼写这篇文章\",{\"1\":{\"1160\":1}}],[\"现在手机已经成为人生活中不可或缺的东西了\",{\"1\":{\"1148\":1}}],[\"现在有很多教学视频的网站\",{\"1\":{\"1145\":1}}],[\"现在有这个内置参数后可以只写一套在里面做个判断当前数据库是哪一个就好\",{\"1\":{\"438\":1}}],[\"现在有这样一个场景\",{\"1\":{\"333\":1}}],[\"现在认识到这些已经有点晚了\",{\"1\":{\"1140\":1}}],[\"现在前端找工作好找么\",{\"1\":{\"1139\":1}}],[\"现在则多指\",{\"1\":{\"1076\":1}}],[\"现在你用的是arraylist\",{\"1\":{\"1074\":1}}],[\"现在的版本过高\",{\"1\":{\"1013\":1}}],[\"现在的没这么麻烦了吧\",{\"1\":{\"608\":1}}],[\"现在由于你的正确设计\",{\"1\":{\"931\":1}}],[\"现在发起一个逻辑备份\",{\"1\":{\"927\":1}}],[\"现在分到两个页中\",{\"1\":{\"918\":1}}],[\"现在常见的做法也是用全量备份加上应用\",{\"1\":{\"901\":1}}],[\"现在就是\",{\"1\":{\"900\":1}}],[\"现在最常用的存储引擎是\",{\"1\":{\"892\":1}}],[\"现在在过\",{\"1\":{\"877\":1}}],[\"现在明了了\",{\"1\":{\"866\":1}}],[\"现在设成简单密码依旧\",{\"1\":{\"788\":1}}],[\"现在能看到的所有东西了\",{\"1\":{\"723\":1}}],[\"现在非要内卷到研究把一个线程不安全的类放在多线程下会有什么问题\",{\"1\":{\"694\":1}}],[\"现在用的很频繁\",{\"1\":{\"998\":1}}],[\"现在用\",{\"1\":{\"576\":1}}],[\"现在用了\",{\"1\":{\"229\":1}}],[\"现在进化了以后\",{\"1\":{\"560\":1}}],[\"现在\",{\"1\":{\"504\":1,\"537\":1,\"576\":1,\"674\":1,\"916\":1,\"921\":1,\"933\":1}}],[\"现在还不是多例\",{\"1\":{\"504\":1}}],[\"现在理解了\",{\"1\":{\"487\":1}}],[\"现在整合spring后可以不用一个目录了\",{\"1\":{\"453\":1}}],[\"现在花3\",{\"1\":{\"393\":1}}],[\"现在70\",{\"1\":{\"364\":1}}],[\"现在看的迷迷糊糊\",{\"1\":{\"327\":1}}],[\"现在看来是nginx把\",{\"1\":{\"71\":1}}],[\"现在主物理内存的值是l4了\",{\"1\":{\"310\":1}}],[\"现在主物理内存的共享变量\",{\"1\":{\"310\":1}}],[\"现在暂时这么做\",{\"1\":{\"231\":1}}],[\"现在需要知道\",{\"1\":{\"227\":1,\"528\":1}}],[\"现在方法调用要买两本\",{\"1\":{\"178\":1}}],[\"现在不确定的点是拦截\",{\"1\":{\"157\":1}}],[\"现在是我看视频我接地气的理解\",{\"1\":{\"109\":1}}],[\"软件行业\",{\"1\":{\"1114\":1}}],[\"软件看是否启动\",{\"1\":{\"998\":1}}],[\"软件复用和维护存在很大问题\",{\"1\":{\"678\":1}}],[\"软链到本来目录\",{\"1\":{\"998\":1}}],[\"软链\",{\"1\":{\"998\":1}}],[\"软状态是指允许系统存在中间状态\",{\"1\":{\"572\":1}}],[\"软状态\",{\"1\":{\"572\":1}}],[\"软引用对象不会被回收\",{\"1\":{\"660\":1}}],[\"软引用是用来描述一些非必需但仍有用的对象\",{\"1\":{\"660\":1}}],[\"软引用通常用来实现内存敏感的缓存\",{\"1\":{\"636\":1}}],[\"软引用\",{\"1\":{\"448\":1,\"635\":1,\"636\":1,\"660\":2}}],[\"领导选举\",{\"1\":{\"572\":1}}],[\"领导\",{\"1\":{\"572\":1}}],[\"混淆点\",{\"1\":{\"571\":1}}],[\"弱鸡题\",{\"1\":{\"658\":1}}],[\"弱一致性\",{\"1\":{\"571\":1}}],[\"弱引用的引用强度比软引用要更弱一些\",{\"1\":{\"660\":1}}],[\"弱引用\",{\"1\":{\"448\":1,\"635\":1,\"636\":1,\"660\":2}}],[\"绝情版\",{\"1\":{\"569\":1}}],[\"互联网行业\",{\"1\":{\"1114\":1}}],[\"互相指向对方\",{\"1\":{\"565\":1}}],[\"互斥条件\",{\"1\":{\"377\":1}}],[\"互斥锁\",{\"0\":{\"326\":1},\"1\":{\"115\":1,\"867\":1}}],[\"管这么多干嘛\",{\"1\":{\"740\":1}}],[\"管道过滤器对传递消息处理\",{\"1\":{\"613\":1}}],[\"管理自己的\",{\"1\":{\"996\":1}}],[\"管理整个分库分表\",{\"1\":{\"961\":1}}],[\"管理的类中使用\",{\"1\":{\"884\":1}}],[\"管理分支事务处理的资源\",{\"1\":{\"606\":1}}],[\"管理服务于服务之间依赖关系\",{\"1\":{\"563\":1}}],[\"管理比较复杂\",{\"1\":{\"563\":1}}],[\"管理每个服务与服务之间依赖关系比较复杂\",{\"1\":{\"563\":1}}],[\"管理上就非常麻烦\",{\"1\":{\"562\":1}}],[\"管你是啥ide\",{\"1\":{\"227\":1,\"529\":1}}],[\"入口文件\",{\"1\":{\"1161\":1}}],[\"入门推荐\",{\"1\":{\"1150\":1}}],[\"入门书为辅\",{\"1\":{\"1150\":1}}],[\"入门级学会\",{\"1\":{\"1150\":1}}],[\"入门案例的认证工作主要有它负责\",{\"1\":{\"619\":1}}],[\"入门篇已讲完\",{\"1\":{\"561\":1}}],[\"入驻企业\",{\"1\":{\"561\":1}}],[\"搂一眼京东的\",{\"1\":{\"553\":1}}],[\"俗称微服务全家桶\",{\"1\":{\"553\":1}}],[\"嵌入式数据库\",{\"1\":{\"550\":1,\"1166\":1}}],[\"嵌套结果集的方式\",{\"1\":{\"426\":1}}],[\"嵌套\",{\"1\":{\"216\":1,\"372\":1}}],[\"今年\",{\"1\":{\"1110\":1}}],[\"今年的\",{\"1\":{\"1103\":1}}],[\"今年$\",{\"1\":{\"216\":1}}],[\"今天终于弄好了\",{\"1\":{\"1156\":1}}],[\"今天想到网上下一个软件\",{\"1\":{\"1153\":1}}],[\"今天为了说明查询和更新的区别\",{\"1\":{\"934\":1}}],[\"今天这篇文章\",{\"1\":{\"925\":1,\"926\":1,\"934\":1}}],[\"今天就让我们一起来聊聊这个话题吧\",{\"1\":{\"909\":1}}],[\"今天我要跟你聊聊\",{\"1\":{\"926\":1}}],[\"今天我要问你的问题是\",{\"1\":{\"633\":1,\"635\":1,\"637\":1,\"640\":1}}],[\"今天我们就来讲讲\",{\"1\":{\"930\":1}}],[\"今天我们就来说说其中\",{\"1\":{\"905\":1}}],[\"今天我们再继续聊聊跟\",{\"1\":{\"921\":1}}],[\"今天的文章里\",{\"1\":{\"904\":1}}],[\"今天\",{\"1\":{\"902\":1,\"919\":1,\"929\":1,\"933\":1}}],[\"今天学了用docker\",{\"1\":{\"800\":1}}],[\"今天重新导入这个项目时\",{\"1\":{\"546\":1}}],[\"准确来说是安全管理框架\",{\"1\":{\"615\":1}}],[\"准确的来说\",{\"1\":{\"543\":1}}],[\"准备本地目录\",{\"0\":{\"1004\":1}}],[\"准备解锁库存的信息\",{\"1\":{\"844\":1}}],[\"准备关闭订单202302011429244921620670634357006338\",{\"1\":{\"844\":1}}],[\"准备\",{\"1\":{\"679\":1}}],[\"准备阶段\",{\"1\":{\"609\":2}}],[\"准备阶段+提交阶段\",{\"1\":{\"183\":1}}],[\"准备接受任务\",{\"1\":{\"363\":1}}],[\"准备好的空闲线程执行\",{\"1\":{\"363\":1}}],[\"准备好\",{\"1\":{\"363\":1}}],[\"准备面试\",{\"1\":{\"261\":1}}],[\"准备检索请求\",{\"1\":{\"126\":1}}],[\"浏宽器中点击按钮请求后台\",{\"1\":{\"543\":1,\"1081\":1}}],[\"浏览器在本地环境中可能会施加一些安全限制\",{\"1\":{\"706\":1}}],[\"浏览器在本地运行时都可以正常加载和呈现\",{\"1\":{\"706\":1}}],[\"浏览器通常支持加载和渲染多种文件类型\",{\"1\":{\"706\":1}}],[\"浏览器会限制直接从本地文件系统加载\",{\"1\":{\"706\":1}}],[\"浏览器会遵循同源策略\",{\"1\":{\"706\":1}}],[\"浏览器会将请求到的静态资源\",{\"1\":{\"539\":1,\"1083\":1}}],[\"浏览器会将当前网址作为referer字段\",{\"1\":{\"46\":1}}],[\"浏览器响应\",{\"1\":{\"230\":1}}],[\"浏览器重启后还在\",{\"1\":{\"154\":1}}],[\"浏览器的技术\",{\"1\":{\"154\":1}}],[\"浏览器\",{\"1\":{\"60\":1}}],[\"浏览器都会将其视为相同的url\",{\"1\":{\"60\":1}}],[\"火车发车前收到提醒\",{\"1\":{\"543\":1,\"1081\":1}}],[\"半成品实例\",{\"1\":{\"543\":1}}],[\"称为死锁\",{\"1\":{\"932\":1}}],[\"称为\",{\"1\":{\"543\":1,\"900\":1}}],[\"性赋值\",{\"1\":{\"543\":1}}],[\"性能非常好\",{\"1\":{\"1099\":1}}],[\"性能非常低\",{\"1\":{\"972\":1}}],[\"性能方面的影响其实是比较小的\",{\"1\":{\"971\":1}}],[\"性能比较差\",{\"1\":{\"961\":1}}],[\"性能比较低下\",{\"1\":{\"641\":1}}],[\"性能自然会受影响\",{\"1\":{\"918\":1}}],[\"性能极⾼\",{\"1\":{\"849\":1}}],[\"性能是mysql的⼏⼗倍\",{\"1\":{\"849\":1}}],[\"性能\",{\"1\":{\"713\":1,\"868\":1}}],[\"性能已经比较可观\",{\"1\":{\"674\":1}}],[\"性能高\",{\"1\":{\"379\":1}}],[\"性能和效率都不是特别好\",{\"1\":{\"312\":1}}],[\"性能更好\",{\"1\":{\"186\":1}}],[\"性能优势\",{\"1\":{\"156\":1}}],[\"性能损失越大\",{\"1\":{\"102\":1}}],[\"性能与压力测试\",{\"1\":{\"102\":1}}],[\"性能好\",{\"1\":{\"87\":1}}],[\"性能低\",{\"1\":{\"87\":1}}],[\"性能得不到保障\",{\"1\":{\"85\":1}}],[\"性能问题\",{\"1\":{\"82\":1}}],[\"覆盖索引\",{\"0\":{\"922\":1},\"1\":{\"969\":1}}],[\"覆盖了\",{\"1\":{\"694\":1,\"922\":1}}],[\"覆盖全球的短信服务\",{\"1\":{\"594\":2}}],[\"覆盖\",{\"1\":{\"543\":1}}],[\"故此翻书评\",{\"1\":{\"1076\":1}}],[\"故意把服务的提供者\",{\"1\":{\"577\":1}}],[\"故障容错\",{\"1\":{\"565\":1}}],[\"故而最终为后加载的配置项生效\",{\"1\":{\"543\":1}}],[\"故因为存在数据依赖\",{\"1\":{\"293\":1}}],[\"犹记毕业第一年时\",{\"1\":{\"539\":1,\"1083\":1}}],[\"菜单栏的东西大体都一样的\",{\"1\":{\"884\":1}}],[\"菜单\",{\"1\":{\"537\":1,\"883\":1}}],[\"菜鸟教程\",{\"1\":{\"1145\":1}}],[\"菜鸟\",{\"1\":{\"208\":1}}],[\"邮件通知等\",{\"1\":{\"520\":1}}],[\"专栏的作者\",{\"1\":{\"1150\":1}}],[\"专门用来记录客人的赊账记录\",{\"1\":{\"899\":1}}],[\"专门用于处理restful风格的控制器\",{\"1\":{\"520\":1}}],[\"专业\",{\"1\":{\"883\":1}}],[\"专心于业务逻辑\",{\"1\":{\"472\":1}}],[\"观察者模式\",{\"1\":{\"498\":1}}],[\"观察如下实例\",{\"1\":{\"275\":1}}],[\"库的\",{\"1\":{\"907\":1,\"928\":1,\"974\":1}}],[\"库\",{\"1\":{\"498\":1,\"961\":1}}],[\"库存\",{\"1\":{\"932\":2}}],[\"库存解锁消息重新入队\",{\"1\":{\"844\":1}}],[\"库存超出限制\",{\"1\":{\"220\":1}}],[\"库存减一\",{\"1\":{\"183\":1}}],[\"库存服务\",{\"1\":{\"183\":1}}],[\"库存操作要统一\",{\"1\":{\"82\":1}}],[\"态代理\",{\"1\":{\"498\":1}}],[\"切记不要三心二意\",{\"1\":{\"1144\":1}}],[\"切记不要不懂装懂\",{\"1\":{\"891\":1}}],[\"切分为很多usertable\",{\"1\":{\"960\":1}}],[\"切换分支\",{\"1\":{\"987\":1}}],[\"切换后再将其他几个节点上添加字段\",{\"1\":{\"976\":1}}],[\"切换dev\",{\"1\":{\"598\":1}}],[\"切换命令\",{\"1\":{\"594\":1}}],[\"切换使用jedis\",{\"1\":{\"107\":1}}],[\"切面声明\",{\"1\":{\"495\":1}}],[\"组合索引\",{\"1\":{\"959\":1}}],[\"组合关系\",{\"1\":{\"657\":1}}],[\"组成的\",{\"1\":{\"1005\":1}}],[\"组成一个查询变成\",{\"1\":{\"959\":1}}],[\"组成部分\",{\"1\":{\"493\":1}}],[\"组内字符串连接\",{\"1\":{\"946\":1}}],[\"组队成功\",{\"1\":{\"854\":1}}],[\"组队的时候有任何一个命令失败\",{\"1\":{\"854\":1}}],[\"组队阶段\",{\"1\":{\"854\":1}}],[\"组件扫描减少了配置量\",{\"1\":{\"726\":1}}],[\"组件\",{\"0\":{\"23\":1,\"30\":1},\"1\":{\"30\":1,\"485\":2}}],[\"环\",{\"1\":{\"694\":1}}],[\"环绕\",{\"1\":{\"492\":1}}],[\"环绕切点\",{\"1\":{\"492\":1}}],[\"环境挺重要的\",{\"1\":{\"1150\":1}}],[\"环境也造就了你\",{\"1\":{\"1077\":1}}],[\"环境变量配置\",{\"1\":{\"800\":1}}],[\"环境变量\",{\"0\":{\"1080\":1},\"1\":{\"522\":1,\"1038\":1}}],[\"环境\",{\"0\":{\"396\":1}}],[\"式\",{\"1\":{\"492\":1}}],[\"及其\",{\"1\":{\"1001\":1}}],[\"及其他一些\",{\"1\":{\"914\":1}}],[\"及以前的版本\",{\"1\":{\"906\":1}}],[\"及\",{\"1\":{\"905\":2}}],[\"及执行时间\",{\"1\":{\"492\":1}}],[\"及更高版本\",{\"1\":{\"383\":1}}],[\"及更高版本中\",{\"1\":{\"383\":1}}],[\"试着找一下相关的微信\",{\"1\":{\"1145\":1}}],[\"试想如果同时有另外一个顾客\",{\"1\":{\"931\":1}}],[\"试想一个\",{\"1\":{\"708\":1}}],[\"试官不想听这个\",{\"1\":{\"543\":1}}],[\"试写这种百度就能出来的东西持保留意见\",{\"1\":{\"492\":1}}],[\"试图往已经满的阻塞队列中添加新元素的线程\",{\"1\":{\"345\":1}}],[\"试图从空的阻塞队列中获取元素的线程将会被阻塞\",{\"1\":{\"345\":1}}],[\"试图获取instance的时候\",{\"1\":{\"301\":1}}],[\"场面一度很尴尬\",{\"1\":{\"492\":1}}],[\"场景提示密码过期需修改\",{\"1\":{\"792\":1,\"802\":1}}],[\"场景一\",{\"1\":{\"421\":1}}],[\"场景题\",{\"0\":{\"390\":1}}],[\"场景学jsp的时候好像把请求的编码统一改成utf\",{\"1\":{\"156\":1}}],[\"场景\",{\"0\":{\"333\":1},\"1\":{\"47\":1,\"60\":1,\"73\":1,\"76\":2,\"77\":1,\"87\":2,\"141\":1,\"156\":1,\"160\":1,\"161\":1,\"167\":1,\"241\":1,\"247\":1,\"250\":1,\"260\":1,\"429\":1,\"434\":1,\"438\":1,\"439\":1,\"507\":1,\"510\":1,\"515\":1,\"577\":1,\"590\":1,\"706\":1,\"799\":1,\"809\":2,\"814\":1,\"823\":1,\"833\":1,\"837\":1,\"844\":1,\"860\":1,\"876\":1,\"918\":1,\"932\":1,\"952\":1,\"981\":1,\"985\":1,\"990\":1,\"1010\":1,\"1013\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1027\":1,\"1051\":1,\"1082\":1}}],[\"向上面申请\",{\"1\":{\"1131\":1}}],[\"向上自然转\",{\"1\":{\"688\":1}}],[\"向链表头部插入元素\",{\"1\":{\"694\":1}}],[\"向下强转\",{\"1\":{\"688\":1}}],[\"向用户传达服务不可用的信息\",{\"1\":{\"603\":1}}],[\"向属性注入的值\",{\"1\":{\"487\":1}}],[\"向父组件发送事件\",{\"1\":{\"226\":1}}],[\"扫描的是标记了特定注解的组件类\",{\"1\":{\"482\":1}}],[\"扫描的是配置类\",{\"1\":{\"478\":1,\"482\":1}}],[\"扫描组件的位置\",{\"1\":{\"482\":1}}],[\"扫描主启动类下所有组件\",{\"1\":{\"478\":1}}],[\"↓\",{\"1\":{\"477\":1,\"1005\":1}}],[\"舍弃父依赖的版本控制\",{\"1\":{\"476\":1}}],[\"云原生\",{\"1\":{\"474\":1}}],[\"云服务器使用\",{\"0\":{\"982\":1}}],[\"云服务器的\",{\"1\":{\"797\":1,\"983\":1}}],[\"云服务器redis不设密容易被挖矿\",{\"0\":{\"105\":1}}],[\"云服务器上用\",{\"1\":{\"83\":1}}],[\"听课也是一脸懵逼\",{\"1\":{\"1150\":1}}],[\"听上去就很危险\",{\"1\":{\"927\":1}}],[\"听视频老师讲讲\",{\"1\":{\"474\":1}}],[\"听听就好\",{\"1\":{\"112\":1}}],[\"健康\",{\"1\":{\"1123\":1}}],[\"健康检查及外部化配置\",{\"1\":{\"473\":1}}],[\"健康状况\",{\"1\":{\"270\":1}}],[\"适当的运行时环境提供了mybatis\",{\"1\":{\"1012\":1}}],[\"适应后会感受到光标快速移动带来的效率提升\",{\"1\":{\"1006\":1}}],[\"适合复杂实例化\",{\"1\":{\"779\":1}}],[\"适合频繁的插入\",{\"1\":{\"688\":1}}],[\"适配\",{\"1\":{\"594\":1}}],[\"适配器\",{\"1\":{\"613\":1}}],[\"适配器模式\",{\"1\":{\"498\":1}}],[\"适配器实现接口\",{\"1\":{\"471\":1}}],[\"适用场景\",{\"0\":{\"196\":1},\"1\":{\"506\":1}}],[\"适用于需要将二进制数据转换为可打印的\",{\"1\":{\"1081\":1}}],[\"适用于需要对数据进行压缩\",{\"1\":{\"1081\":1}}],[\"适用于多读的应用类型\",{\"1\":{\"855\":1}}],[\"适用于多线程\",{\"1\":{\"779\":2}}],[\"适用于单线程\",{\"1\":{\"779\":1}}],[\"适用于单个线程内部共享数据\",{\"1\":{\"156\":1}}],[\"适用于网络状况正常的情况下\",{\"1\":{\"577\":1}}],[\"适用于将请求直接映射到文件系统路径\",{\"1\":{\"73\":1}}],[\"宏观是一套解决方案生态圈\",{\"1\":{\"468\":1}}],[\"细数自己用过的\",{\"1\":{\"468\":1}}],[\"细化分不同颜色不同版本\",{\"1\":{\"244\":1}}],[\"细化后就能又获取bindingresult对象\",{\"1\":{\"240\":1}}],[\"细化来说\",{\"1\":{\"76\":1}}],[\"做一些自己能力范围之内的题\",{\"1\":{\"1150\":1}}],[\"做一个数字的输出\",{\"0\":{\"769\":1},\"1\":{\"769\":1}}],[\"做游戏\",{\"1\":{\"1150\":1}}],[\"做自己感兴趣的事情的时候\",{\"1\":{\"1139\":1}}],[\"做成服务的这两者sc做成的都不能跑\",{\"1\":{\"1041\":1}}],[\"做\",{\"1\":{\"1017\":1}}],[\"做同步时有个要注意的是\",{\"1\":{\"1005\":1}}],[\"做几个配置\",{\"1\":{\"1005\":1}}],[\"做到一半时有人过来反馈一个bug\",{\"1\":{\"990\":1}}],[\"做哈希\",{\"1\":{\"961\":1}}],[\"做题时候发现\",{\"1\":{\"959\":1}}],[\"做全库逻辑备份\",{\"1\":{\"927\":1}}],[\"做联合主键\",{\"1\":{\"925\":1}}],[\"做加减法\",{\"1\":{\"904\":1}}],[\"做权限验证\",{\"1\":{\"897\":1}}],[\"做完了这些识别以后\",{\"1\":{\"895\":1}}],[\"做完上述简单的配置操作数据是放redis了\",{\"1\":{\"147\":1}}],[\"做什么事都有有一个目标\",{\"1\":{\"1144\":1}}],[\"做什么\",{\"1\":{\"895\":1}}],[\"做异或运算获得\",{\"1\":{\"681\":1}}],[\"做某些事情的机制\",{\"1\":{\"636\":1}}],[\"做项目\",{\"1\":{\"1150\":1}}],[\"做项目订单这个全局事务需要把这两个注解都写\",{\"1\":{\"607\":1}}],[\"做项目快速上手能干\",{\"1\":{\"466\":1}}],[\"做了一次封装\",{\"1\":{\"560\":1}}],[\"搁浅\",{\"1\":{\"466\":1}}],[\"映射到当前的\",{\"1\":{\"790\":1}}],[\"映射就像hashmap根据k\",{\"1\":{\"689\":1}}],[\"映射动态请求\",{\"1\":{\"460\":1}}],[\"映射文件中进行条件判断\",{\"1\":{\"430\":1}}],[\"拦截转发给\",{\"1\":{\"543\":1}}],[\"拦截所有的前端的请求\",{\"1\":{\"480\":1}}],[\"拦截所有请求\",{\"1\":{\"459\":1}}],[\"拦截sql语句\",{\"1\":{\"465\":1}}],[\"拦截器会捕获到过期错误\",{\"1\":{\"890\":1}}],[\"拦截器会执行刷新令牌的逻辑\",{\"1\":{\"890\":1}}],[\"拦截器处理\",{\"1\":{\"890\":1}}],[\"拦截器只是针对每一个请求\",{\"1\":{\"157\":1}}],[\"拦截器拦完后\",{\"1\":{\"156\":1}}],[\"拦截器使用场景\",{\"1\":{\"156\":1}}],[\"拦截器通常用于在请求处理的前后进行额外的操作\",{\"1\":{\"156\":1}}],[\"拦截器可以捕获响应过程中发生的异常\",{\"1\":{\"156\":1}}],[\"拦截器可以记录响应的详细信息\",{\"1\":{\"156\":1}}],[\"拦截器可以检查响应结果\",{\"1\":{\"156\":1}}],[\"拦截器可以对返回的数据进行格式化\",{\"1\":{\"156\":1}}],[\"拦截器可以对生成的响应进行修改\",{\"1\":{\"156\":1}}],[\"拦截器可以对请求结果进行后处理\",{\"1\":{\"156\":1}}],[\"拦截器可以处理响应\",{\"1\":{\"156\":1}}],[\"拦截器适合于以下情况\",{\"1\":{\"156\":1}}],[\"拦截器按照配置顺序执行\",{\"1\":{\"156\":1}}],[\"拦截器在请求被路由后执行\",{\"1\":{\"156\":1}}],[\"拦截器\",{\"0\":{\"534\":1},\"1\":{\"156\":1,\"465\":1}}],[\"拦截器跟过滤器有什么区别\",{\"1\":{\"156\":1}}],[\"够深入的吧\",{\"1\":{\"454\":1}}],[\"够用就行了\",{\"1\":{\"601\":1}}],[\"够用\",{\"1\":{\"105\":1}}],[\"猜测\",{\"1\":{\"454\":1,\"462\":1}}],[\"猜缩写\",{\"1\":{\"87\":1}}],[\"移除基于垃圾回收器状态和软引用规则的对象\",{\"1\":{\"448\":1}}],[\"移除最长时间不被使用的对象\",{\"1\":{\"448\":1}}],[\"经验\",{\"1\":{\"1130\":1}}],[\"经历过这个阶段后\",{\"1\":{\"451\":1}}],[\"经常会有人问我\",{\"1\":{\"1139\":1}}],[\"经常查询并且不经常改变的数据\",{\"1\":{\"441\":1}}],[\"经常将要查询的列名\",{\"1\":{\"440\":1}}],[\"经过了解发现是挂载了阿里云盘\",{\"1\":{\"1156\":1}}],[\"经过了分析器\",{\"1\":{\"896\":1}}],[\"经过实践可行\",{\"1\":{\"1155\":1}}],[\"经过debug发现后端判断重复逻辑和前端其实差不多\",{\"1\":{\"889\":1}}],[\"经过认证后判断当前用户是否有权限进行某个操作\",{\"1\":{\"615\":1}}],[\"经过网关动态的路由到能用的各个服务\",{\"1\":{\"590\":1}}],[\"经过测试\",{\"1\":{\"229\":1}}],[\"经过验证发现不是那么回事\",{\"1\":{\"123\":1}}],[\"批量删大量数据不好\",{\"1\":{\"975\":1}}],[\"批量操作\",{\"0\":{\"973\":1}}],[\"批量取出消息入库\",{\"1\":{\"848\":1}}],[\"批量注释服务配置如图\",{\"1\":{\"810\":1}}],[\"批量改文件夹权限\",{\"1\":{\"786\":1}}],[\"批量起别名\",{\"1\":{\"464\":1}}],[\"批量保存\",{\"1\":{\"437\":1}}],[\"批量读取\",{\"1\":{\"91\":1}}],[\"遇见特殊符号应该去写转义字符\",{\"1\":{\"430\":1}}],[\"遇到很难解决的问题也是很正常的\",{\"1\":{\"1150\":1}}],[\"遇到的问题千奇百怪\",{\"1\":{\"1150\":1}}],[\"遇到某个节点或网络分区故障的时候\",{\"1\":{\"572\":1}}],[\"遇到实时性\",{\"1\":{\"118\":1}}],[\"遇到问题是很正常的\",{\"1\":{\"1150\":1}}],[\"遇到问题\",{\"1\":{\"87\":1}}],[\"男生\",{\"1\":{\"429\":1}}],[\"鉴别器\",{\"0\":{\"429\":1},\"1\":{\"429\":2}}],[\"立长志☑️\",{\"1\":{\"980\":1}}],[\"立即\",{\"1\":{\"428\":1}}],[\"立刻通知其它线程让他们看到\",{\"1\":{\"284\":1}}],[\"联表\",{\"1\":{\"970\":1}}],[\"联合索引给\",{\"1\":{\"923\":1}}],[\"联合索引\",{\"1\":{\"923\":1,\"959\":1}}],[\"联合查询\",{\"1\":{\"421\":1}}],[\"联想任务管理器就知道是微软的东西\",{\"1\":{\"959\":1}}],[\"联想订票系统\",{\"1\":{\"812\":1}}],[\"联想单例的实例变量+volitile\",{\"1\":{\"644\":1}}],[\"联想到\",{\"1\":{\"60\":1}}],[\"失败的原因\",{\"1\":{\"836\":1}}],[\"失败回调\",{\"1\":{\"834\":1}}],[\"失败后会回调returncallback\",{\"1\":{\"834\":1}}],[\"失败了\",{\"1\":{\"606\":1}}],[\"失败率达到多少后跳闸\",{\"1\":{\"586\":1}}],[\"失败\",{\"1\":{\"403\":1}}],[\"失效模式\",{\"0\":{\"118\":1}}],[\"失效后重查放入缓存就又是最新数据了\",{\"1\":{\"116\":1}}],[\"失效就用refresh去重新获取\",{\"1\":{\"70\":1}}],[\"增长是\",{\"1\":{\"961\":1}}],[\"增加选择机会\",{\"1\":{\"1141\":1}}],[\"增加选择\",{\"1\":{\"1051\":1}}],[\"增加+\",{\"1\":{\"993\":1}}],[\"增加数据传输时间\",{\"1\":{\"969\":1}}],[\"增加对应解决哪个问题\",{\"1\":{\"905\":1}}],[\"增加了三个元数据\",{\"1\":{\"849\":1}}],[\"增加系统的复杂性\",{\"1\":{\"118\":1}}],[\"增删改\",{\"1\":{\"495\":1}}],[\"增删改执行完成后就会清除缓存\",{\"1\":{\"449\":1}}],[\"增删改查\",{\"0\":{\"403\":1}}],[\"显著提升查询性能\",{\"1\":{\"922\":1}}],[\"显式启动的事务\",{\"1\":{\"907\":1}}],[\"显式启动事务语句\",{\"1\":{\"907\":1}}],[\"显式指定\",{\"1\":{\"894\":1}}],[\"显式初始化\",{\"1\":{\"658\":1,\"696\":1}}],[\"显示或隐藏某个\",{\"1\":{\"1005\":1}}],[\"显示信息\",{\"1\":{\"997\":1}}],[\"显示简介\",{\"1\":{\"997\":2}}],[\"显示隐藏文件\",{\"1\":{\"997\":1,\"998\":1}}],[\"显示字段\",{\"1\":{\"959\":1}}],[\"显示宽度只用于显示\",{\"1\":{\"920\":1}}],[\"显示的信息都是来自mysql系统库\",{\"1\":{\"893\":1}}],[\"显示的指定每个我们需要更改的配置的值\",{\"1\":{\"400\":1,\"424\":1}}],[\"显示所有环境变量\",{\"1\":{\"782\":1}}],[\"显示初始化\",{\"1\":{\"686\":1}}],[\"显示一个简化的页面或者错误信息\",{\"1\":{\"603\":1}}],[\"显然\",{\"1\":{\"918\":1}}],[\"显然属于第二类\",{\"1\":{\"383\":1}}],[\"显然这种处理很不好\",{\"1\":{\"143\":1}}],[\"死信队列\",{\"1\":{\"843\":1}}],[\"死信交换机再丢给指定队列\",{\"1\":{\"840\":1}}],[\"死信会丢给死信交换机\",{\"1\":{\"840\":1}}],[\"死循环\",{\"1\":{\"391\":1}}],[\"死锁检测要耗费大量的\",{\"1\":{\"932\":1}}],[\"死锁通常与事务和并发操作有关\",{\"1\":{\"932\":1}}],[\"死锁和死锁检测这两大部分内容\",{\"1\":{\"933\":1}}],[\"死锁和死锁检测\",{\"0\":{\"932\":1},\"1\":{\"929\":1}}],[\"死锁\",{\"1\":{\"377\":1}}],[\"死锁很难人为干预\",{\"1\":{\"377\":1}}],[\"死锁问题\",{\"1\":{\"82\":1}}],[\"尽可能多的去认识这样的人\",{\"1\":{\"1151\":1}}],[\"尽可能的提高你的视野\",{\"1\":{\"1150\":1}}],[\"尽可能地避免关联查询\",{\"1\":{\"970\":1}}],[\"尽信书\",{\"0\":{\"1093\":1}}],[\"尽自己所能地去消息队列中取消息和消费消息\",{\"1\":{\"814\":1}}],[\"尽量使用自增\",{\"0\":{\"972\":1}}],[\"尽量使用主键查询\",{\"1\":{\"918\":1}}],[\"尽量避免多表做\",{\"0\":{\"970\":1}}],[\"尽量打散\",{\"1\":{\"961\":1}}],[\"尽量用\",{\"1\":{\"947\":1}}],[\"尽量少地访问资源是数据库设计的重要原则之一\",{\"1\":{\"925\":1}}],[\"尽量少写代码\",{\"1\":{\"599\":1}}],[\"尽量较少碰撞\",{\"1\":{\"739\":1}}],[\"尽量让对象能够在新生代中被回收\",{\"1\":{\"389\":1}}],[\"尽量减少无用的对象创建和引用\",{\"1\":{\"389\":1}}],[\"尽管mybatis\",{\"1\":{\"1012\":1}}],[\"尽管如此\",{\"1\":{\"726\":1}}],[\"尽管线程t1的cas操作成功\",{\"1\":{\"309\":1}}],[\"尽管地址栏不区分大小写\",{\"1\":{\"60\":1}}],[\"尽管某些浏览器可能仍然支持它\",{\"1\":{\"47\":1}}],[\"消耗资源并不多\",{\"1\":{\"977\":1}}],[\"消耗资源的\",{\"1\":{\"977\":1}}],[\"消耗\",{\"1\":{\"932\":1}}],[\"消耗接近\",{\"1\":{\"931\":1}}],[\"消耗较大的系统资源\",{\"1\":{\"389\":1}}],[\"消费订单解锁消息时\",{\"1\":{\"844\":1}}],[\"消费重复消息会带来更大的麻烦\",{\"1\":{\"815\":1}}],[\"消费型接口\",{\"1\":{\"688\":1}}],[\"消费者能力不足或宕机\",{\"1\":{\"848\":1}}],[\"消费者未ack时宕机\",{\"1\":{\"846\":1}}],[\"消费者被告知消息是否抵达queue\",{\"1\":{\"834\":1}}],[\"消费者被告知消息是否抵达服务器\",{\"1\":{\"834\":1}}],[\"消费者工程\",{\"1\":{\"827\":1}}],[\"消费者服务提供者\",{\"1\":{\"564\":1}}],[\"消费者\",{\"1\":{\"543\":1,\"1081\":1}}],[\"消息也比较闭塞\",{\"1\":{\"1140\":1}}],[\"消息头\",{\"1\":{\"889\":1}}],[\"消息积压\",{\"0\":{\"848\":1}}],[\"消息重新入队\",{\"1\":{\"847\":1}}],[\"消息重复\",{\"0\":{\"847\":1}}],[\"消息由unack变为ready\",{\"1\":{\"847\":1}}],[\"消息会丢失\",{\"1\":{\"846\":1}}],[\"消息会从unacked中删除\",{\"1\":{\"837\":1}}],[\"消息未抵达broker\",{\"1\":{\"846\":1}}],[\"消息未到达队列触发returncallback回调\",{\"1\":{\"836\":2}}],[\"消息确认机制\",{\"1\":{\"845\":2}}],[\"消息过期\",{\"0\":{\"842\":1}}],[\"消息入队\",{\"1\":{\"837\":1}}],[\"消息抵达broker\",{\"1\":{\"836\":1,\"846\":1}}],[\"消息是否成功收到\",{\"1\":{\"836\":1}}],[\"消息是不具名的\",{\"1\":{\"823\":1}}],[\"消息在没有被队列接收时是否强行退回\",{\"1\":{\"835\":1}}],[\"消息从exchange投递到queue\",{\"1\":{\"834\":1}}],[\"消息从publisher到达broker\",{\"1\":{\"834\":1}}],[\"消息如想放对象\",{\"1\":{\"828\":1}}],[\"消息一直在队列里面\",{\"1\":{\"823\":1}}],[\"消息的状态\",{\"1\":{\"836\":1}}],[\"消息的消费者\",{\"1\":{\"823\":1}}],[\"消息的生产者\",{\"1\":{\"823\":1}}],[\"消息的话\",{\"1\":{\"609\":1}}],[\"消息体是不透明的\",{\"1\":{\"823\":1}}],[\"消息\",{\"1\":{\"823\":1}}],[\"消息通信\",{\"1\":{\"817\":1}}],[\"消息通道\",{\"1\":{\"613\":1}}],[\"消息读取后被移出队列\",{\"1\":{\"817\":1}}],[\"消息接收者从队列中获取消息内容\",{\"1\":{\"817\":1}}],[\"消息发送者发送消息\",{\"1\":{\"817\":1}}],[\"消息代理将其放入一个队列中\",{\"1\":{\"817\":1}}],[\"消息代理保证消息传递到指定目的地\",{\"1\":{\"816\":1}}],[\"消息代理\",{\"1\":{\"816\":1}}],[\"消息服务中两个重要概念\",{\"1\":{\"816\":1}}],[\"消息中间件松耦合的概念十分相似\",{\"1\":{\"612\":1}}],[\"消息驱动能力\",{\"1\":{\"594\":1}}],[\"消息总线\",{\"1\":{\"594\":1}}],[\"消息乱序\",{\"1\":{\"183\":1}}],[\"消息丢失\",{\"0\":{\"846\":1},\"1\":{\"183\":1}}],[\"消息队列服务器\",{\"1\":{\"824\":1}}],[\"消息队列和相关对象\",{\"1\":{\"823\":1}}],[\"消息队列主要有两种形式的目的地\",{\"1\":{\"817\":1}}],[\"消息队列也有它的副作用\",{\"0\":{\"815\":1}}],[\"消息队列\",{\"1\":{\"91\":1,\"823\":1,\"839\":1}}],[\"桢栈中具体的流程\",{\"1\":{\"388\":1}}],[\"四种引用类型\",{\"0\":{\"660\":1}}],[\"四\",{\"0\":{\"759\":1,\"1143\":1},\"1\":{\"630\":1,\"660\":1,\"980\":1}}],[\"四个核心模块\",{\"1\":{\"499\":1}}],[\"四个部分\",{\"1\":{\"388\":1}}],[\"四大对象每个创建的时候都有一个interceptorchain\",{\"1\":{\"465\":1}}],[\"四大特性\",{\"1\":{\"183\":1}}],[\"栈堆内存的变化\",{\"1\":{\"780\":1}}],[\"栈帧以后进先出\",{\"1\":{\"778\":1}}],[\"栈帧是用于支持方法调用和方法执行的数据结构\",{\"1\":{\"778\":1}}],[\"栈帧\",{\"1\":{\"778\":1}}],[\"栈帧又包含\",{\"1\":{\"388\":1}}],[\"栈\",{\"1\":{\"389\":1}}],[\"栈会为每个方法在运行的时候分配一块独立的栈帧内存区域\",{\"1\":{\"388\":1}}],[\"清理垃圾等同时进行\",{\"1\":{\"687\":1}}],[\"清理机制\",{\"1\":{\"636\":1}}],[\"清理软引用指向的对象\",{\"1\":{\"636\":1}}],[\"清除软件缓存\",{\"1\":{\"1162\":1}}],[\"清除未被标记的对象\",{\"1\":{\"385\":1}}],[\"清除算法保证了读写连续性\",{\"1\":{\"385\":1}}],[\"清除算法可能导致内存碎片化问题\",{\"1\":{\"385\":1}}],[\"清除算法\",{\"1\":{\"385\":1}}],[\"清缓存必备\",{\"1\":{\"62\":1}}],[\"老杨同志\",{\"1\":{\"925\":1}}],[\"老三件套\",{\"0\":{\"736\":1}}],[\"老的\",{\"1\":{\"561\":1}}],[\"老年代空间不足\",{\"1\":{\"389\":1}}],[\"老年代存活多\",{\"1\":{\"389\":1}}],[\"老年代用\",{\"1\":{\"389\":1}}],[\"老生代\",{\"1\":{\"385\":1}}],[\"老师上课讲的东西很重要\",{\"1\":{\"1150\":1}}],[\"老师说先把会做的做了\",{\"1\":{\"292\":1}}],[\"老师\",{\"1\":{\"112\":1}}],[\"老师讲课时基本都是50线程持续压\",{\"1\":{\"99\":1}}],[\"老师的redis\",{\"1\":{\"83\":1}}],[\"助记的话\",{\"1\":{\"383\":1}}],[\"命名参数\",{\"0\":{\"408\":1},\"1\":{\"408\":1}}],[\"命名应该非简称\",{\"1\":{\"383\":1}}],[\"命令生成\",{\"1\":{\"1041\":1}}],[\"命令窗口的清屏命令\",{\"1\":{\"1041\":1}}],[\"命令终端的清屏命令\",{\"1\":{\"1041\":1}}],[\"命令用于关闭命令提示符窗口中的命令回显\",{\"1\":{\"1038\":1}}],[\"命令用于显示当前进程的状态\",{\"1\":{\"210\":1}}],[\"命令时\",{\"1\":{\"990\":1}}],[\"命令观察\",{\"1\":{\"977\":1}}],[\"命令并不是一个事务的起点\",{\"1\":{\"934\":1}}],[\"命令之后由于客户端发生异常断开\",{\"1\":{\"927\":1}}],[\"命令了\",{\"1\":{\"927\":1}}],[\"命令是\",{\"1\":{\"927\":1}}],[\"命令中看到它\",{\"1\":{\"893\":1}}],[\"命令来设置临时环境变量\",{\"1\":{\"1038\":1}}],[\"命令来将修改的文件添加到暂存区\",{\"1\":{\"990\":1}}],[\"命令来控制并发\",{\"1\":{\"928\":1}}],[\"命令来确保在分布式环境下的互斥访问\",{\"1\":{\"849\":1}}],[\"命令来查找\",{\"1\":{\"782\":1}}],[\"命令来对日志进行搜索\",{\"1\":{\"734\":1}}],[\"命令解释好使\",{\"1\":{\"782\":1}}],[\"命令后添加参数\",{\"1\":{\"546\":1}}],[\"命令行中\",{\"1\":{\"1038\":1}}],[\"命令行窗口将不会输出命令本身\",{\"1\":{\"1038\":1}}],[\"命令行还是可以会一下\",{\"1\":{\"985\":1}}],[\"命令行参数\",{\"1\":{\"522\":1}}],[\"命令行工具连接\",{\"1\":{\"212\":1}}],[\"命令的时候\",{\"1\":{\"290\":1}}],[\"命令\",{\"1\":{\"212\":1,\"782\":1,\"808\":1,\"854\":2,\"908\":1,\"986\":1,\"1005\":1,\"1038\":1}}],[\"命令有提示\",{\"1\":{\"83\":1}}],[\"命令参数\",{\"1\":{\"76\":1}}],[\"堆中\",{\"1\":{\"723\":1,\"725\":1}}],[\"堆中也得有才能给变量拿去用\",{\"1\":{\"723\":1}}],[\"堆中新生代初始及最大大小\",{\"1\":{\"383\":1}}],[\"堆伸缩时会产生fullgc\",{\"1\":{\"389\":1}}],[\"堆\",{\"1\":{\"389\":1,\"695\":1}}],[\"堆区分开来\",{\"1\":{\"386\":1}}],[\"堆内存调整\",{\"1\":{\"389\":1}}],[\"堆内存结构\",{\"1\":{\"385\":1}}],[\"堆内存的限制\",{\"1\":{\"383\":1}}],[\"堆结构\",{\"0\":{\"385\":1}}],[\"堆的初始化初始化大小\",{\"1\":{\"383\":1}}],[\"堆的最大内存数\",{\"1\":{\"383\":1}}],[\"题\",{\"0\":{\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"725\":1}}],[\"题中\",{\"1\":{\"697\":1}}],[\"题目设定为小表\",{\"1\":{\"929\":1}}],[\"题目\",{\"1\":{\"685\":1,\"688\":1,\"778\":1}}],[\"题目中所问的eden区的大小是指年轻代的大小\",{\"1\":{\"383\":1}}],[\"题主提到的参数前缀为x\",{\"1\":{\"383\":1}}],[\"题外话\",{\"0\":{\"319\":1},\"1\":{\"565\":2,\"614\":1}}],[\"题外\",{\"0\":{\"124\":1},\"1\":{\"110\":1}}],[\"脑袋里要有\",{\"1\":{\"993\":1}}],[\"脑袋里想着那个三层的图就好\",{\"1\":{\"383\":1}}],[\"脑图和流程图我觉得收益很高\",{\"1\":{\"1144\":1}}],[\"脑图与流程图\",{\"1\":{\"1144\":1}}],[\"脑图\",{\"0\":{\"287\":1}}],[\"区间的\",{\"1\":{\"915\":1}}],[\"区分概念\",{\"1\":{\"627\":1}}],[\"区分开其他的加前缀\",{\"1\":{\"551\":1,\"1166\":1}}],[\"区分druid连接池为监控而生扩展点多\",{\"0\":{\"524\":1}}],[\"区分\",{\"1\":{\"478\":1,\"546\":1,\"625\":1,\"863\":1,\"990\":1,\"1039\":1}}],[\"区分不同类的方式不仅仅根据类名\",{\"1\":{\"382\":1}}],[\"区后对象的初始年龄变为1\",{\"1\":{\"385\":1}}],[\"区\",{\"1\":{\"385\":1}}],[\"区域分配\",{\"1\":{\"385\":1}}],[\"区别十分明显\",{\"1\":{\"936\":1}}],[\"区别就是比完发现key有一样的此时把现在这个key的value替换数组里以前的这个key对应的value\",{\"1\":{\"688\":1}}],[\"区别在于是否使用了final进行修饰\",{\"1\":{\"725\":1}}],[\"区别在于\",{\"1\":{\"482\":1}}],[\"区别直接买一台几核几g的服务造成浪费\",{\"1\":{\"474\":1}}],[\"区别\",{\"1\":{\"156\":1,\"216\":1,\"454\":1}}],[\"牛客\",{\"1\":{\"388\":1}}],[\"牛客网\",{\"1\":{\"379\":1,\"380\":1,\"662\":1,\"670\":1,\"671\":1,\"696\":1,\"773\":1}}],[\"牛刀\",{\"1\":{\"291\":1}}],[\"某种意义上\",{\"1\":{\"688\":1}}],[\"某个方法出问题了\",{\"1\":{\"604\":1}}],[\"某个达到最大自旋次数的线程会升级为重量级锁\",{\"1\":{\"379\":1}}],[\"某时刻某一个微服务不可用了\",{\"1\":{\"569\":1}}],[\"某些设计模式的实现和\",{\"1\":{\"1150\":1}}],[\"某些服务不处理\",{\"1\":{\"582\":1}}],[\"某些服务器可能会对url路径和查询参数进行区分大小写的处理\",{\"1\":{\"60\":1}}],[\"某些节点之间不连通了\",{\"1\":{\"571\":1}}],[\"某些结果是基于之前数据实时计算出来的\",{\"1\":{\"220\":1}}],[\"处于\",{\"1\":{\"900\":1}}],[\"处于忙等状态\",{\"1\":{\"379\":1}}],[\"处理文本等工作效率\",{\"1\":{\"1015\":1}}],[\"处理步骤就是\",{\"1\":{\"914\":1}}],[\"处理这种情况的一种方法是\",{\"1\":{\"914\":1}}],[\"处理后续请求\",{\"1\":{\"890\":1}}],[\"处理全局异常\",{\"1\":{\"729\":1}}],[\"处理方式\",{\"1\":{\"712\":1}}],[\"处理模型来应对更高的并发量\",{\"1\":{\"711\":1}}],[\"处理流之二\",{\"1\":{\"688\":1}}],[\"处理流是作用在已有流的基础之上的\",{\"1\":{\"688\":1}}],[\"处理流\",{\"1\":{\"688\":1}}],[\"处理器\",{\"1\":{\"664\":1}}],[\"处理器在进行重排序时\",{\"1\":{\"292\":1}}],[\"处理过滤器链中抛出的任何accessdeniedexception和authenticationexception\",{\"1\":{\"619\":1}}],[\"处理过程\",{\"1\":{\"606\":1}}],[\"处理逻辑\",{\"1\":{\"582\":1}}],[\"处理完请求后执行\",{\"1\":{\"495\":1}}],[\"处理完成后释放锁\",{\"1\":{\"171\":1}}],[\"处理\",{\"0\":{\"878\":1},\"1\":{\"471\":1,\"534\":1,\"737\":1,\"977\":1}}],[\"处理其他事情\",{\"1\":{\"380\":1}}],[\"处理请求\",{\"1\":{\"252\":1}}],[\"处理对应异常\",{\"1\":{\"240\":1}}],[\"处理起来会非常麻烦\",{\"1\":{\"169\":1}}],[\"处理认证结果\",{\"1\":{\"153\":1}}],[\"处理用户输入的认证信息\",{\"1\":{\"153\":1}}],[\"处理登录注册\",{\"1\":{\"126\":1}}],[\"处理数据库事务的一致性\",{\"1\":{\"78\":1}}],[\"偏向锁升级为轻量级锁\",{\"1\":{\"379\":1}}],[\"偏向于第一个获得它的线程的锁\",{\"1\":{\"379\":1}}],[\"翻看方鸿渐的求学履历\",{\"1\":{\"1076\":1}}],[\"翻译过来的意思就是抽象队列同步器\",{\"1\":{\"378\":1}}],[\"翻墙\",{\"1\":{\"72\":1}}],[\"至此\",{\"1\":{\"897\":1}}],[\"至于\",{\"1\":{\"1109\":1}}],[\"至于文中说的32位操作系统\",{\"1\":{\"1093\":1}}],[\"至于谁希望订阅\",{\"1\":{\"813\":1}}],[\"至于我们从文章一开始就提到的字面量\",{\"1\":{\"725\":1}}],[\"至于为什么源代码中字符串拼接的操作\",{\"1\":{\"725\":1}}],[\"至于为什么\",{\"1\":{\"685\":1}}],[\"至于为什么看自己redis笔记\",{\"1\":{\"105\":1}}],[\"至少\",{\"1\":{\"1150\":1}}],[\"至少我去过的团队都没有长期\",{\"1\":{\"1113\":1}}],[\"至少我搜了下springboot还是蛮不错的\",{\"1\":{\"985\":1}}],[\"至少是要让对方知道我调用的是哪个类中的哪个方法以及相关参数吧\",{\"1\":{\"713\":1}}],[\"至少三台\",{\"1\":{\"599\":1}}],[\"至少前5种答出来\",{\"1\":{\"498\":1}}],[\"至少有一个线程必须持有一个资源且正在等待获取一个当前被别的线程持有的资源\",{\"1\":{\"377\":1}}],[\"步长设置为3\",{\"1\":{\"961\":1}}],[\"步校验通过反\",{\"1\":{\"621\":1}}],[\"步好像是通过\",{\"1\":{\"620\":1}}],[\"步操作\",{\"1\":{\"372\":1}}],[\"步骤大体上是这样\",{\"1\":{\"1144\":1}}],[\"步骤没有则从\",{\"1\":{\"1009\":1}}],[\"步骤\",{\"1\":{\"921\":2}}],[\"步骤3之间不存在\",{\"1\":{\"301\":1}}],[\"步骤2\",{\"1\":{\"301\":1}}],[\"降低maven版本\",{\"1\":{\"1013\":1}}],[\"降低为\",{\"1\":{\"916\":1}}],[\"降低了系统的可用性\",{\"1\":{\"815\":1}}],[\"降低代码可读性\",{\"1\":{\"715\":1}}],[\"降低切换成本\",{\"1\":{\"594\":1}}],[\"降低应用程序的执行效率\",{\"1\":{\"389\":1}}],[\"降低资源的消耗\",{\"1\":{\"367\":1}}],[\"降级限流\",{\"1\":{\"868\":1}}],[\"降级是基于全局考虑\",{\"1\":{\"603\":1}}],[\"降级页面\",{\"1\":{\"603\":1}}],[\"降级的核心思想就是丢车保帅\",{\"1\":{\"603\":1}}],[\"降级\",{\"0\":{\"603\":1},\"1\":{\"228\":1,\"582\":1,\"603\":1}}],[\"阿里\",{\"1\":{\"1005\":1}}],[\"阿里钉\",{\"1\":{\"1003\":1}}],[\"阿里爸爸今天又用一记重拳猛击我的脸\",{\"1\":{\"658\":1}}],[\"阿里中间件团队开发的一款分布式任务调度产品\",{\"1\":{\"594\":1}}],[\"阿里巴巴开源产品\",{\"1\":{\"594\":1}}],[\"阿里巴巴\",{\"1\":{\"366\":1,\"970\":1,\"971\":1}}],[\"阿里云短信服务\",{\"1\":{\"594\":1}}],[\"阿里云提供的海量\",{\"1\":{\"594\":1}}],[\"阿里云对象存储服务\",{\"1\":{\"594\":1}}],[\"阿里云对象存储\",{\"1\":{\"594\":1}}],[\"阿里云\",{\"1\":{\"208\":1}}],[\"若不想merge远程和本地修改\",{\"1\":{\"987\":1}}],[\"若\",{\"1\":{\"935\":2}}],[\"若隔离级别是\",{\"1\":{\"905\":4}}],[\"若依是支持token续期的\",{\"1\":{\"890\":1}}],[\"若此位置有对象存在\",{\"0\":{\"691\":1}}],[\"若是改为count=++count\",{\"1\":{\"670\":1}}],[\"若失败\",{\"1\":{\"587\":1}}],[\"若无可回收\",{\"1\":{\"365\":1}}],[\"若没有主动释放锁\",{\"1\":{\"352\":1}}],[\"种常见\",{\"0\":{\"710\":1}}],[\"种引用的强度依次减弱\",{\"1\":{\"660\":1}}],[\"种\",{\"1\":{\"660\":1}}],[\"种包装类默认创建了数值\",{\"1\":{\"647\":1}}],[\"种线程池\",{\"0\":{\"365\":1}}],[\"种方式\",{\"0\":{\"354\":1}}],[\"剩下\",{\"1\":{\"364\":1}}],[\"满了\",{\"1\":{\"363\":1,\"899\":1}}],[\"满足条件的下一行\",{\"1\":{\"897\":1}}],[\"满足cp原则和满足ap原则三大类\",{\"1\":{\"572\":1}}],[\"满足\",{\"1\":{\"295\":1,\"681\":1}}],[\"丢失\",{\"1\":{\"901\":1}}],[\"丢几帧无所谓\",{\"1\":{\"688\":1}}],[\"丢新的abortpolicy\",{\"1\":{\"362\":1}}],[\"丢老的\",{\"1\":{\"362\":1}}],[\"光看书或者博客是很难记住那些流程的\",{\"1\":{\"1144\":1}}],[\"光配置这些\",{\"1\":{\"726\":1}}],[\"光的意思很快\",{\"0\":{\"524\":1}}],[\"光只有右半边会报错就又要去源码copy\",{\"1\":{\"361\":1}}],[\"光猫\",{\"1\":{\"77\":1}}],[\"超好用\",{\"1\":{\"990\":1}}],[\"超纲\",{\"1\":{\"929\":1}}],[\"超卖\",{\"1\":{\"857\":2}}],[\"超卖现象\",{\"1\":{\"87\":1}}],[\"超过三个表禁止\",{\"1\":{\"970\":1}}],[\"超过就报警\",{\"1\":{\"908\":1}}],[\"超过指定ttl还没被消费就称这个消息为死信\",{\"1\":{\"840\":1}}],[\"超过后报错\",{\"1\":{\"577\":1}}],[\"超时时间设置太短的话\",{\"1\":{\"932\":1}}],[\"超时\",{\"1\":{\"582\":1,\"857\":1,\"880\":1}}],[\"超出的线程会在队列中等待\",{\"1\":{\"365\":1}}],[\"超级大坑警告\",{\"1\":{\"360\":1}}],[\"屁股后带\",{\"1\":{\"359\":1}}],[\"足够的落地往细节传\",{\"1\":{\"359\":1}}],[\"足够的抽象往高处写\",{\"1\":{\"359\":1}}],[\"池化技术\",{\"0\":{\"359\":1}}],[\"陌生的两个东西\",{\"1\":{\"474\":1}}],[\"陌生\",{\"0\":{\"357\":1},\"1\":{\"985\":1}}],[\"陌溪\",{\"1\":{\"295\":1}}],[\"继承exception\",{\"1\":{\"686\":1}}],[\"继承关系\",{\"1\":{\"655\":1}}],[\"继承了父的所有包括\",{\"1\":{\"556\":1}}],[\"继承\",{\"1\":{\"354\":1,\"655\":1}}],[\"继续做\",{\"1\":{\"694\":1}}],[\"继续开启\",{\"1\":{\"587\":1}}],[\"继续执行过滤器链\",{\"1\":{\"890\":1}}],[\"继续执行\",{\"1\":{\"332\":1,\"694\":1}}],[\"继续取值然后再比较\",{\"1\":{\"305\":1}}],[\"继续尝试执行\",{\"1\":{\"186\":1}}],[\"部署的方式很多\",{\"1\":{\"1161\":1}}],[\"部署\",{\"1\":{\"994\":1}}],[\"部署到不同的库上\",{\"1\":{\"960\":1}}],[\"部署方式\",{\"1\":{\"553\":1}}],[\"部署多个机器\",{\"1\":{\"112\":1}}],[\"部门信息在我们使用的时候再去查询\",{\"1\":{\"424\":1}}],[\"部门设置到员工中\",{\"1\":{\"423\":1}}],[\"部分字典和教程\",{\"1\":{\"1155\":1}}],[\"部分是否有配置相关的插件或属性来下载源码\",{\"1\":{\"1012\":1}}],[\"部分或\",{\"1\":{\"1012\":1}}],[\"部分有个\",{\"1\":{\"878\":1}}],[\"部分广播\",{\"1\":{\"823\":1}}],[\"部分看\",{\"1\":{\"619\":1}}],[\"部分网络出现问题导致部分参与者收不到\",{\"1\":{\"609\":1}}],[\"部分消费者可能会被引导到一个降级页面\",{\"1\":{\"572\":1}}],[\"部分\",{\"1\":{\"352\":1,\"537\":1}}],[\"唤醒\",{\"1\":{\"352\":3}}],[\"早上看\",{\"1\":{\"1150\":1}}],[\"早起小妙招\",{\"1\":{\"980\":1}}],[\"早起是和时间进行\",{\"1\":{\"980\":1}}],[\"早起奥义1\",{\"1\":{\"980\":1}}],[\"早起与成功\",{\"1\":{\"980\":1}}],[\"早期暴露的半成品实例\",{\"1\":{\"543\":2}}],[\"早期实例\",{\"1\":{\"543\":1}}],[\"早期曝光对象工厂\",{\"1\":{\"543\":1}}],[\"早期曝光对象\",{\"1\":{\"543\":1}}],[\"早期的时候我们对线程的主要操作为\",{\"1\":{\"350\":1}}],[\"早就想到了解决方案\",{\"1\":{\"146\":1}}],[\"循坏\",{\"1\":{\"348\":1}}],[\"循环结束\",{\"1\":{\"921\":1}}],[\"循环写\",{\"1\":{\"899\":1}}],[\"循环count都为0\",{\"1\":{\"670\":1}}],[\"循环cas就无法保证操作的原子性\",{\"1\":{\"307\":1}}],[\"循环里面的count=count++\",{\"1\":{\"670\":1}}],[\"循环依赖解析的过程中可能会出现死循环的情况\",{\"1\":{\"543\":1}}],[\"循环依赖解析是指\",{\"1\":{\"543\":1}}],[\"循环依赖解析\",{\"1\":{\"543\":1}}],[\"循环依赖指的是两个或多个\",{\"1\":{\"543\":2}}],[\"循环等待\",{\"1\":{\"377\":1}}],[\"循环比较获取直到成功为止\",{\"1\":{\"325\":1}}],[\"循环时间长\",{\"1\":{\"307\":1}}],[\"循环\",{\"1\":{\"87\":1}}],[\"尤其适用于需要管理大量windows服务的场景\",{\"1\":{\"1041\":1}}],[\"尤其还要兼顾效率和线程安全\",{\"1\":{\"347\":1}}],[\"尤其是上个学期经常往学校的实验楼跑\",{\"1\":{\"1160\":1}}],[\"尤其是大字段\",{\"1\":{\"969\":1}}],[\"尤其是在设计表结构时\",{\"1\":{\"925\":1}}],[\"尤其是遇到association和collection\",{\"1\":{\"426\":1}}],[\"尤其是分布式\",{\"1\":{\"261\":1}}],[\"尤其是并发量比较大的业务场景\",{\"1\":{\"169\":1}}],[\"抢票\",{\"1\":{\"855\":1}}],[\"抢到车位\",{\"1\":{\"343\":1}}],[\"抢占\",{\"1\":{\"342\":1}}],[\"另一类表级的锁是\",{\"1\":{\"928\":1}}],[\"另一种策略是\",{\"1\":{\"932\":1}}],[\"另一种做法是先在粉板上记下这次的账\",{\"1\":{\"899\":1}}],[\"另一种类型的常量是运行时常量\",{\"1\":{\"725\":1}}],[\"另一个外物的影响周围的环境\",{\"1\":{\"1148\":1}}],[\"另一个是\",{\"1\":{\"934\":1}}],[\"另一个思路是控制并发度\",{\"1\":{\"932\":1}}],[\"另一个线程开始转换就会发现红黑树变成了链表\",{\"1\":{\"682\":1}}],[\"另一个用于并发线程数的控制\",{\"1\":{\"341\":1}}],[\"另一方面又要你透露目前工资\",{\"1\":{\"1130\":1}}],[\"另一方面\",{\"1\":{\"1014\":1}}],[\"另一方\",{\"1\":{\"564\":1}}],[\"另外就是icloud了同步很舒服\",{\"1\":{\"1164\":1}}],[\"另外就是垃圾收集\",{\"1\":{\"634\":1}}],[\"另外windows系统的一些好用的软件\",{\"1\":{\"1160\":1}}],[\"另外如果某个子项目需要另外的一个版本\",{\"1\":{\"556\":1}}],[\"另外一个线程马上调用方法2\",{\"1\":{\"295\":1}}],[\"另外一个线程bbb又对内存中的一个共享变量x进行操作\",{\"1\":{\"288\":1}}],[\"另外\",{\"1\":{\"54\":1,\"153\":1,\"641\":1,\"679\":1,\"868\":1,\"959\":1,\"1010\":1,\"1016\":1,\"1041\":1}}],[\"颗龙珠\",{\"1\":{\"338\":1,\"339\":1}}],[\"收获有多大你们试试就知道了\",{\"1\":{\"1144\":1}}],[\"收货托盘\",{\"1\":{\"959\":2}}],[\"收到解锁库存的信息\",{\"1\":{\"844\":1}}],[\"收到订单关闭\",{\"1\":{\"844\":1}}],[\"收到过期的订单信息\",{\"1\":{\"844\":1}}],[\"收集到\",{\"1\":{\"338\":1,\"339\":1}}],[\"收单\",{\"0\":{\"193\":1}}],[\"集合框架\",{\"1\":{\"1150\":1}}],[\"集合框架概览\",{\"1\":{\"642\":2}}],[\"集合中的每个元素执行给定的操作\",{\"1\":{\"767\":1}}],[\"集合的遍历\",{\"0\":{\"767\":1},\"1\":{\"767\":1}}],[\"集合排序案例\",{\"0\":{\"765\":1},\"1\":{\"765\":1}}],[\"集合set添加某元素时\",{\"0\":{\"691\":1}}],[\"集合\",{\"1\":{\"688\":1}}],[\"集成是\",{\"1\":{\"686\":1}}],[\"集齐7个龙珠\",{\"1\":{\"338\":1}}],[\"集群搭建好后\",{\"1\":{\"865\":1}}],[\"集群端口\",{\"1\":{\"825\":1}}],[\"集群有三个的话\",{\"1\":{\"599\":1}}],[\"集群下仍然有节点能够持续提供服务\",{\"1\":{\"572\":1}}],[\"集群篇因为电脑拉胯只能看\",{\"1\":{\"261\":1}}],[\"集群负载均衡\",{\"0\":{\"256\":1}}],[\"集群三篇\",{\"1\":{\"203\":1}}],[\"集群模式和云托管模式等\",{\"1\":{\"112\":1}}],[\"集群的redis\",{\"1\":{\"103\":1}}],[\"集群\",{\"0\":{\"565\":1,\"566\":1},\"1\":{\"94\":1,\"598\":1,\"599\":1}}],[\"集群部署\",{\"1\":{\"80\":1}}],[\"案例如下\",{\"1\":{\"531\":1}}],[\"案例\",{\"0\":{\"338\":1}}],[\"案例都一样\",{\"1\":{\"83\":1}}],[\"屏蔽了各不同数据库的差异\",{\"1\":{\"594\":1}}],[\"屏蔽了对整个缓存的操作\",{\"1\":{\"119\":1}}],[\"屏蔽底层消息中间件的差异\",{\"1\":{\"594\":1}}],[\"屏障才会开门\",{\"1\":{\"337\":1}}],[\"召唤神龙的demo\",{\"1\":{\"338\":1}}],[\"召唤神龙\",{\"1\":{\"337\":1,\"338\":1,\"339\":1}}],[\"墙才会消失\",{\"1\":{\"334\":1}}],[\"离职时间\",{\"0\":{\"1122\":1}}],[\"离职原因一定要不可打回\",{\"0\":{\"1121\":1}}],[\"离职率很高的团队\",{\"1\":{\"1109\":1}}],[\"离线处理业务慢慢处理\",{\"1\":{\"848\":1}}],[\"离线购物车\",{\"1\":{\"154\":2}}],[\"离开车位\",{\"1\":{\"343\":1}}],[\"离开教室\",{\"1\":{\"334\":15,\"335\":1}}],[\"闭锁\",{\"0\":{\"331\":1}}],[\"答\",{\"1\":{\"687\":1,\"916\":1,\"959\":1}}],[\"答案就是\",{\"1\":{\"708\":1}}],[\"答案\",{\"1\":{\"658\":1,\"685\":1,\"723\":1,\"724\":1,\"725\":1,\"780\":1,\"878\":1}}],[\"答案却是\",{\"1\":{\"658\":1}}],[\"答案是\",{\"1\":{\"906\":1}}],[\"答案是false\",{\"1\":{\"725\":1}}],[\"答案是只创建一个对象\",{\"1\":{\"722\":1}}],[\"答案是利用反射修改char数组的值\",{\"1\":{\"721\":1}}],[\"答案是1\",{\"1\":{\"691\":1}}],[\"答案是一个都不用\",{\"1\":{\"360\":1}}],[\"答案是跟核心\",{\"1\":{\"286\":1}}],[\"答上来就对了一半了\",{\"1\":{\"329\":1}}],[\"拔高自己的高度\",{\"1\":{\"327\":1}}],[\"🤺\",{\"1\":{\"323\":1}}],[\"🤺🤺🤺\",{\"1\":{\"183\":1}}],[\"厕所卧室就不需要加锁了\",{\"1\":{\"322\":1}}],[\"公积金能一样吗\",{\"1\":{\"1130\":1}}],[\"公积金和\",{\"1\":{\"1130\":1}}],[\"公积金\",{\"1\":{\"1108\":1}}],[\"公共表达式\",{\"1\":{\"959\":1}}],[\"公式\",{\"1\":{\"685\":1}}],[\"公司总不可能给你安排新的结婚对象吧\",{\"1\":{\"1121\":1}}],[\"公司工商信息\",{\"0\":{\"1116\":1},\"1\":{\"1115\":1}}],[\"公司计划短期内上市\",{\"1\":{\"1104\":1}}],[\"公司尚未设置非核心团队岗\",{\"1\":{\"1104\":1}}],[\"公司还没招到hr\",{\"1\":{\"1104\":1}}],[\"公司的没有\",{\"1\":{\"1012\":1}}],[\"公司的同事告诉他说\",{\"1\":{\"925\":1}}],[\"公司jar包\",{\"1\":{\"1012\":1}}],[\"公司地址\",{\"1\":{\"1005\":1}}],[\"公司指定好了这芯片生产的标准\",{\"1\":{\"740\":1}}],[\"公司\",{\"1\":{\"740\":1}}],[\"公司等不及了就自己出了\",{\"1\":{\"590\":1}}],[\"公司出的\",{\"1\":{\"590\":1}}],[\"公司开发的eureka模块来实现服务治理\",{\"1\":{\"563\":1}}],[\"公司引入浏览器\",{\"1\":{\"543\":1}}],[\"公司每次发布完成后\",{\"1\":{\"539\":1,\"1083\":1}}],[\"公司上班时间段不准员工访问特定的网页\",{\"1\":{\"76\":1}}],[\"公平锁\",{\"0\":{\"315\":1},\"1\":{\"318\":1}}],[\"然而实际上\",{\"1\":{\"972\":1}}],[\"然而\",{\"1\":{\"309\":1,\"383\":1,\"706\":1,\"787\":1,\"883\":2,\"933\":1,\"963\":1}}],[\"然后一个模式一个模式的学\",{\"1\":{\"1150\":1}}],[\"然后关掉视频\",{\"1\":{\"1150\":1}}],[\"然后颓废好几天\",{\"1\":{\"1147\":1}}],[\"然后记录下来\",{\"1\":{\"1144\":1}}],[\"然后慢慢的去增加自己每天的任务量\",{\"1\":{\"1142\":1}}],[\"然后每天很容易就能做到\",{\"1\":{\"1142\":1}}],[\"然后每次学生线程执行完\",{\"1\":{\"334\":1}}],[\"然后是精确到小时的日计划\",{\"1\":{\"1142\":1}}],[\"然后是b\",{\"1\":{\"849\":1}}],[\"然后只能选择看个直播\",{\"1\":{\"1142\":1}}],[\"然后浪费大把的时间\",{\"1\":{\"1140\":1}}],[\"然后回第二三梯队当主程\",{\"1\":{\"1106\":1}}],[\"然后可以将压缩后的数据存储到文件中\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"然后单独搞个\",{\"1\":{\"1080\":1}}],[\"然后从\",{\"1\":{\"1009\":1}}],[\"然后从第二天又重新开始\",{\"1\":{\"980\":1}}],[\"然后鼠标点击任意地方拖动窗口了\",{\"1\":{\"1006\":1}}],[\"然后去看看书里对这部分知识的讲解\",{\"1\":{\"1150\":1}}],[\"然后去掉\",{\"1\":{\"1005\":1}}],[\"然后去处理e和a\",{\"1\":{\"849\":1}}],[\"然后编辑\",{\"1\":{\"1005\":1}}],[\"然后按\",{\"1\":{\"1005\":1}}],[\"然后按顺序往后依次选择\",{\"1\":{\"208\":1}}],[\"然后我在\",{\"1\":{\"1005\":1}}],[\"然后我说得\",{\"1\":{\"998\":1}}],[\"然后我们再看两个关键字\",{\"1\":{\"721\":1}}],[\"然后我们模拟6辆车同时并发抢占停车位\",{\"1\":{\"342\":1}}],[\"然后写non\",{\"1\":{\"993\":1}}],[\"然后写脚本进行限制恶意访问\",{\"1\":{\"72\":1}}],[\"然后commit可以把文件夹的属性提交\",{\"1\":{\"993\":1}}],[\"然后controller再用这个resttemplate\",{\"1\":{\"576\":1}}],[\"然后git\",{\"1\":{\"990\":1}}],[\"然后切换到另一个分支去修改bug\",{\"1\":{\"990\":1}}],[\"然后随着时间的推移我们的时间就会被自己以外的人所占据\",{\"1\":{\"980\":1}}],[\"然后随便跑一个业务逻辑\",{\"1\":{\"908\":1}}],[\"然后删除其中无用数据\",{\"1\":{\"975\":1}}],[\"然后逐行进行比较\",{\"1\":{\"966\":1}}],[\"然后存储到多个结构相同的表\",{\"1\":{\"960\":1}}],[\"然后使用max函数获取每个组中第二列和第三列的最大值\",{\"1\":{\"959\":1}}],[\"然后使用配置分组区分环境\",{\"1\":{\"598\":1}}],[\"然后其他线程才有可能继续执行\",{\"1\":{\"932\":1}}],[\"然后正式导数据\",{\"1\":{\"929\":1}}],[\"然后备份用户课程表\",{\"1\":{\"927\":1}}],[\"然后往已购课程里面加上一门课\",{\"1\":{\"927\":1}}],[\"然后对整个库做备份\",{\"1\":{\"927\":1}}],[\"然后对变量进行操作\",{\"1\":{\"287\":1}}],[\"然后呢\",{\"1\":{\"924\":1}}],[\"然后向后遍历\",{\"1\":{\"923\":1}}],[\"然后向后遍历得到所有需要的结果\",{\"1\":{\"923\":1}}],[\"然后向右遍历\",{\"1\":{\"915\":1}}],[\"然后挪动部分数据过去\",{\"1\":{\"918\":1}}],[\"然后你也忍不住的参与进去\",{\"1\":{\"1148\":1}}],[\"然后你的快捷键组合会多很多\",{\"1\":{\"1005\":1}}],[\"然后你会发现\",{\"1\":{\"901\":1}}],[\"然后你可以把表数据从临时库取出来\",{\"1\":{\"901\":1}}],[\"然后你在本机窗口输入的命令\",{\"1\":{\"790\":1}}],[\"然后告知执行器执行完成了\",{\"1\":{\"900\":1}}],[\"然后把其他都禁掉\",{\"1\":{\"1006\":1}}],[\"然后把\",{\"1\":{\"914\":1}}],[\"然后把这些记录从粉板上擦掉\",{\"1\":{\"899\":1}}],[\"然后把数据模型填充到视图里面再渲染成\",{\"1\":{\"543\":1}}],[\"然后磁盘也要找到对应的那条记录\",{\"1\":{\"899\":1}}],[\"然后更新\",{\"1\":{\"898\":1}}],[\"然后针对性的去解决\",{\"1\":{\"897\":1}}],[\"然后进入执行器阶段\",{\"1\":{\"896\":1}}],[\"然后进入mysql输入status再次查看\",{\"1\":{\"805\":1}}],[\"然后客户端程序结束执行\",{\"1\":{\"893\":1}}],[\"然后又立刻点a按钮\",{\"1\":{\"889\":1}}],[\"然后又增加回10\",{\"1\":{\"309\":1}}],[\"然后立刻点b按钮\",{\"1\":{\"889\":1}}],[\"然后部署到一个独立的web服务器\",{\"1\":{\"883\":1}}],[\"然后代理服务器会将这些请求转发到后端服务\",{\"1\":{\"883\":1}}],[\"然后继续回到讲台上等\",{\"1\":{\"849\":1}}],[\"然后检查学生做的是否正确\",{\"1\":{\"849\":1}}],[\"然后执行重试\",{\"1\":{\"815\":1}}],[\"然后执行compareandswapint\",{\"1\":{\"305\":1}}],[\"然后输入status\",{\"1\":{\"805\":1}}],[\"然后就可以按住\",{\"1\":{\"1006\":1}}],[\"然后就可以愉快地用\",{\"1\":{\"1005\":1}}],[\"然后就可以直接yum安装\",{\"1\":{\"801\":1}}],[\"然后就可以通过arrays\",{\"1\":{\"688\":1}}],[\"然后方法accept指向我们的引用\",{\"1\":{\"767\":1}}],[\"然后现在需要量产了\",{\"1\":{\"740\":1}}],[\"然后由不同的厂商去根据这个规则对这个接口进行实现\",{\"1\":{\"740\":1}}],[\"然后由nginx实现转发请求\",{\"1\":{\"573\":1}}],[\"然后返回常量池中的这个引用\",{\"1\":{\"723\":1}}],[\"然后选一套自己喜欢的\",{\"1\":{\"1150\":1}}],[\"然后选的0\",{\"1\":{\"703\":1}}],[\"然后选择\",{\"1\":{\"537\":1,\"1038\":1}}],[\"然后面试官讲了一下为什么可以\",{\"1\":{\"686\":1}}],[\"然后讲一下\",{\"0\":{\"682\":1}}],[\"然后说一下他们基本的概念\",{\"1\":{\"680\":1}}],[\"然后配置给springsecurity即可\",{\"1\":{\"630\":1}}],[\"然后也学习了从数据库获取授权的\",{\"1\":{\"630\":1}}],[\"然后设置我们的资源所需要的权限即可\",{\"1\":{\"629\":1}}],[\"然后获取\",{\"1\":{\"933\":1}}],[\"然后获取其中的权限信息\",{\"1\":{\"629\":1}}],[\"然后获取securitycontextholder中的认证信息\",{\"1\":{\"628\":1}}],[\"然后数据有无还得看\",{\"1\":{\"628\":1}}],[\"然后重写里面的loaduserbyusername方法\",{\"1\":{\"624\":1}}],[\"然后调用后进入监控网站可以看到哪个服务调的哪个服务\",{\"1\":{\"594\":1}}],[\"然后用你自己的语言试着写一下\",{\"1\":{\"1150\":1}}],[\"然后用户购买\",{\"1\":{\"927\":1}}],[\"然后用\",{\"1\":{\"556\":1}}],[\"然后注入它所依赖的\",{\"1\":{\"543\":1}}],[\"然后注入另一个\",{\"1\":{\"543\":1}}],[\"然后根据分页对象配置的要分几页每页多少条\",{\"1\":{\"465\":1}}],[\"然后根据某列的值改变封装行为\",{\"1\":{\"429\":1}}],[\"然后通过业务重试一般就没问题了\",{\"1\":{\"932\":1}}],[\"然后通过执行javap\",{\"1\":{\"388\":1}}],[\"然后通过比较新旧虚拟dom树的差异\",{\"1\":{\"218\":1}}],[\"然后直接清理掉端边界以外的内存\",{\"1\":{\"385\":1}}],[\"然后直接报错\",{\"1\":{\"48\":1}}],[\"然后他们的区别主要有几个方面\",{\"1\":{\"380\":1}}],[\"然后后面出现了替代方案\",{\"1\":{\"350\":1}}],[\"然后同时编写七个线程\",{\"1\":{\"338\":1}}],[\"然后同步到model\",{\"1\":{\"218\":1}}],[\"然后计数器的值也设置成6\",{\"1\":{\"334\":1}}],[\"然后走人\",{\"1\":{\"333\":1}}],[\"然后并发读取操作\",{\"1\":{\"326\":1}}],[\"然后发起cas操作\",{\"1\":{\"312\":1}}],[\"然后增加2\",{\"1\":{\"309\":1}}],[\"然后不断的获取内存中的值\",{\"1\":{\"305\":1}}],[\"然后提交\",{\"1\":{\"303\":1}}],[\"然后三个线程\",{\"1\":{\"290\":1}}],[\"然后分组的时候填这些接口\",{\"1\":{\"241\":1}}],[\"然后分布式锁主要使用\",{\"1\":{\"86\":1,\"114\":1}}],[\"然后要通过dom操作model\",{\"1\":{\"218\":1}}],[\"然后循环\",{\"1\":{\"208\":1}}],[\"然后操作的时候带上此version号\",{\"1\":{\"170\":1}}],[\"然后再和书上比对一下做一些修改\",{\"1\":{\"1144\":1}}],[\"然后再从内存里访问硬盘的数据\",{\"1\":{\"1089\":1}}],[\"然后再利用git\",{\"1\":{\"990\":1}}],[\"然后再对\",{\"1\":{\"961\":1}}],[\"然后再继续学习交叉连接\",{\"1\":{\"937\":1}}],[\"然后再给另外一个朋友转账\",{\"1\":{\"904\":1}}],[\"然后再返回\",{\"1\":{\"900\":1}}],[\"然后再更新\",{\"1\":{\"899\":1}}],[\"然后再执行请求了\",{\"1\":{\"893\":1}}],[\"然后再到etc目录下的my\",{\"1\":{\"805\":1}}],[\"然后再上传这些小的文件分片\",{\"1\":{\"708\":1}}],[\"然后再做一系列逻辑\",{\"1\":{\"688\":1}}],[\"然后再实现本地rpc调用rpc远程调用框架核心设计思想\",{\"1\":{\"564\":1}}],[\"然后再剪切到属性\",{\"1\":{\"361\":1}}],[\"然后再根据10000<=balance<=20000进行过滤查询结果\",{\"1\":{\"278\":1}}],[\"然后再进行修改\",{\"1\":{\"169\":1}}],[\"然后再一和redis如果还在的一比对就发现不对\",{\"1\":{\"167\":1}}],[\"然后在\",{\"1\":{\"1005\":1}}],[\"然后在命令行里编辑\",{\"1\":{\"1005\":1}}],[\"然后在堆空间中创建\",{\"1\":{\"724\":1}}],[\"然后在config再一配就行\",{\"1\":{\"631\":1}}],[\"然后在项目启动时\",{\"1\":{\"522\":1}}],[\"然后在方法\",{\"1\":{\"321\":1}}],[\"然后在进行更新操作\",{\"1\":{\"305\":1}}],[\"然后在认证服务器上配置相应的认证提供者\",{\"1\":{\"153\":1}}],[\"然后在当前标签页中打开该网址\",{\"1\":{\"62\":1}}],[\"然后导入letture依赖5\",{\"1\":{\"107\":1}}],[\"然后将当前分支指向新的基底分支\",{\"1\":{\"990\":1}}],[\"然后将备份好的文件写到宿主主机地址\",{\"1\":{\"800\":1}}],[\"然后将hash值的低\",{\"1\":{\"681\":1}}],[\"然后将其注入到当前\",{\"1\":{\"543\":1}}],[\"然后将这些表按照一定的规则存储到多个userdb上\",{\"1\":{\"960\":1}}],[\"然后将这些流合并为单个流\",{\"1\":{\"775\":1}}],[\"然后将这些信息封装到authentication对象中\",{\"1\":{\"620\":1}}],[\"然后将这些\",{\"1\":{\"543\":1}}],[\"然后将数据插入去重表+业务操作\",{\"1\":{\"173\":1}}],[\"然后将值映射到一个\",{\"1\":{\"103\":1}}],[\"然后将哈希结果映射到不同的\",{\"1\":{\"103\":1}}],[\"然后将请求转发给内部网络上的服务器\",{\"1\":{\"72\":1,\"809\":1}}],[\"然后扯一下它的流程和原理\",{\"1\":{\"87\":1,\"115\":1}}],[\"然后\",{\"1\":{\"77\":1,\"385\":1,\"543\":1,\"634\":1,\"681\":1,\"734\":1,\"898\":1,\"901\":1,\"906\":1,\"914\":1,\"1076\":1,\"1077\":1,\"1150\":1}}],[\"然后目标主机接收到该请求后\",{\"1\":{\"76\":1}}],[\"觉得自己当时要是学习就好了\",{\"1\":{\"1142\":1}}],[\"觉得没问题\",{\"1\":{\"309\":1}}],[\"觉得可以把他当成异步编排\",{\"1\":{\"202\":1}}],[\"连续三次回车\",{\"1\":{\"986\":1}}],[\"连进来导致\",{\"1\":{\"977\":1}}],[\"连写\",{\"1\":{\"928\":1}}],[\"连环套路\",{\"0\":{\"309\":1}}],[\"连接起来\",{\"1\":{\"987\":1}}],[\"连接表\",{\"1\":{\"963\":1}}],[\"连接的sql\",{\"1\":{\"947\":1}}],[\"连接建立完成后\",{\"1\":{\"894\":1}}],[\"连接完成后\",{\"1\":{\"893\":1}}],[\"连接命令中的\",{\"1\":{\"893\":1}}],[\"连接命令一般是这么写的\",{\"1\":{\"893\":1}}],[\"连接器就会自动将它断开\",{\"1\":{\"893\":1}}],[\"连接器就要开始认证你的身份\",{\"1\":{\"893\":1}}],[\"连接器会到权限表里面查出你拥有的权限\",{\"1\":{\"893\":1}}],[\"连接器负责跟客户端建立连接\",{\"1\":{\"893\":1}}],[\"连接器\",{\"0\":{\"893\":1}}],[\"连接服务器的\",{\"1\":{\"796\":1}}],[\"连接失败\",{\"1\":{\"688\":1}}],[\"连接一切\",{\"1\":{\"474\":1}}],[\"连接池实现\",{\"1\":{\"740\":1}}],[\"连接池等\",{\"1\":{\"740\":1}}],[\"连接池是与数据库交互的一部分\",{\"1\":{\"393\":1}}],[\"连接池\",{\"1\":{\"359\":1,\"857\":1}}],[\"连接\",{\"0\":{\"1030\":1},\"1\":{\"176\":1,\"712\":1,\"823\":1}}],[\"连接可能会被关闭\",{\"1\":{\"48\":1}}],[\"连接成功后即可关闭\",{\"1\":{\"47\":1}}],[\"狸猫换太子\",{\"1\":{\"308\":1}}],[\"思考一下自己的表结构设计的是否有问题\",{\"1\":{\"970\":1}}],[\"思考异步编排和异步任务的区别\",{\"1\":{\"202\":1}}],[\"思路分析\",{\"0\":{\"621\":1}}],[\"思路\",{\"1\":{\"451\":1,\"624\":1}}],[\"思想是即使无法做到强一致性\",{\"1\":{\"571\":1}}],[\"思想\",{\"0\":{\"304\":1}}],[\"合上书\",{\"1\":{\"1144\":1}}],[\"合肥\",{\"1\":{\"1106\":1}}],[\"合作项目的时候\",{\"1\":{\"987\":1}}],[\"合并地狱就需要推翻\",{\"1\":{\"994\":1}}],[\"合并这俩的文件后的显示窗口\",{\"1\":{\"991\":1}}],[\"合并冲突的处理复杂度以及其他因素\",{\"1\":{\"990\":1}}],[\"合并通常会产生合并冲突\",{\"1\":{\"990\":1}}],[\"合并通常用于合并多个分支的修改\",{\"1\":{\"990\":1}}],[\"合并通常使用以下命令\",{\"1\":{\"990\":1}}],[\"合并通常适用于多人同时在同一个分支上进行开发的情况\",{\"1\":{\"990\":1}}],[\"合并会在提交历史记录中保留每个分支的修改记录\",{\"1\":{\"990\":2}}],[\"合并会将多个分支的修改合并为一个新的提交\",{\"1\":{\"990\":1}}],[\"合并会保留原来的分支历史记录\",{\"1\":{\"990\":1}}],[\"合并是将两个或多个分支的修改合并为一个新的提交\",{\"1\":{\"990\":1}}],[\"合并适合于处理不同的功能或特性的分支\",{\"1\":{\"990\":1}}],[\"合并操作会创建一个新的提交\",{\"1\":{\"990\":1}}],[\"合并\",{\"1\":{\"990\":2}}],[\"合并的过程\",{\"1\":{\"918\":1}}],[\"合并代码后\",{\"1\":{\"303\":1}}],[\"合理减少了代码量\",{\"1\":{\"584\":1}}],[\"合理管理对象的生命周期\",{\"1\":{\"389\":1}}],[\"合理的冗余字段是为了快速查询\",{\"1\":{\"250\":1}}],[\"否者就会加入到等待队列中\",{\"1\":{\"318\":1}}],[\"否者需要先将代码pull下来\",{\"1\":{\"303\":1}}],[\"否则你是摆脱不了它的\",{\"1\":{\"1150\":1}}],[\"否则无法启动\",{\"1\":{\"998\":1}}],[\"否则将返回空值\",{\"1\":{\"959\":1}}],[\"否则status为exited\",{\"1\":{\"790\":1}}],[\"否则编译不会通过\",{\"1\":{\"705\":1}}],[\"否则权限不够的\",{\"1\":{\"689\":1}}],[\"否则会报找不到\",{\"1\":{\"1005\":1}}],[\"否则会报错\",{\"1\":{\"400\":1}}],[\"否则会很容易冲突\",{\"1\":{\"1005\":1}}],[\"否则会导致查询结果不准确或错误\",{\"1\":{\"959\":1}}],[\"否则会导致当前线程一直阻塞\",{\"1\":{\"689\":1}}],[\"否则重现实例化\",{\"1\":{\"636\":1}}],[\"否则我们自定义的这个配置类就会被所有的ribbon客户端所共享\",{\"1\":{\"575\":1}}],[\"否则不查询\",{\"1\":{\"429\":1}}],[\"否则导致过大启动不了\",{\"1\":{\"267\":1}}],[\"否则空指针\",{\"1\":{\"227\":1,\"529\":1}}],[\"否则\",{\"1\":{\"186\":1,\"600\":1,\"723\":1,\"900\":1,\"959\":1}}],[\"否则可能会出现内存泄漏等问题\",{\"1\":{\"156\":1}}],[\"否则表示锁已被其他进程持有\",{\"1\":{\"79\":1}}],[\"著作权归所有\",{\"1\":{\"494\":1}}],[\"著作权归作者所有\",{\"1\":{\"383\":1,\"998\":1}}],[\"著作权归javaguide\",{\"1\":{\"302\":2,\"378\":1,\"722\":1,\"724\":1,\"739\":1,\"740\":1,\"779\":1}}],[\"著作权归guide所有\",{\"1\":{\"47\":1}}],[\"程序启动时会自动执行\",{\"1\":{\"1079\":1}}],[\"程序经过javac\",{\"1\":{\"688\":1}}],[\"程序在服务器中已经运行起来了\",{\"1\":{\"688\":1}}],[\"程序放内存中跑起来运行了\",{\"1\":{\"687\":1}}],[\"程序\",{\"1\":{\"687\":1,\"688\":1}}],[\"程序计数器是计算机\",{\"1\":{\"664\":1}}],[\"程序计数器\",{\"0\":{\"664\":1},\"1\":{\"664\":1,\"778\":1}}],[\"程序或其他实体\",{\"1\":{\"630\":1}}],[\"程序运行导常\",{\"1\":{\"582\":1}}],[\"程序参数\",{\"1\":{\"546\":1}}],[\"程序的根目录可能由部署环境或命令行参数决定\",{\"1\":{\"537\":1}}],[\"程序的执行结果在单线程中并没有改变\",{\"1\":{\"301\":1}}],[\"程序将使用你指定的目录作为根目录\",{\"1\":{\"537\":1}}],[\"程序发现\",{\"1\":{\"531\":1}}],[\"程序员如何高效学习\",{\"0\":{\"1136\":1}}],[\"程序员最讨厌不懂装懂\",{\"1\":{\"1135\":1}}],[\"程序员工资较低\",{\"1\":{\"1114\":1}}],[\"程序员可能有的补贴有餐补\",{\"1\":{\"1108\":1}}],[\"程序员的顶级地区应该是美国湾区\",{\"1\":{\"1106\":1}}],[\"程序员找工作指南\",{\"0\":{\"1102\":1}}],[\"程序员不得不考虑如何释放资源\",{\"1\":{\"686\":1}}],[\"程序员不需要自己操心内存的分配和回收\",{\"1\":{\"634\":1}}],[\"程序员\",{\"1\":{\"283\":1}}],[\"底层使用的是\",{\"1\":{\"887\":1}}],[\"底层使用的就是自旋\",{\"1\":{\"324\":1}}],[\"底层所使用的字符串表示\",{\"1\":{\"849\":1}}],[\"底层红黑树\",{\"1\":{\"688\":1}}],[\"底层数组是node\",{\"1\":{\"688\":1}}],[\"底层是红黑树\",{\"1\":{\"688\":1}}],[\"底层是有符号的二进制数来存储的\",{\"1\":{\"648\":1}}],[\"底层是通过monitor对象来完成\",{\"1\":{\"352\":1}}],[\"底层会有非常多这样的写法\",{\"1\":{\"517\":1}}],[\"底层依赖reactor\",{\"1\":{\"466\":1}}],[\"底层有优化\",{\"1\":{\"462\":1}}],[\"底层汇编\",{\"0\":{\"306\":1}}],[\"底层原理\",{\"0\":{\"304\":1}}],[\"底层实现即为\",{\"1\":{\"302\":1}}],[\"底层\",{\"1\":{\"291\":1,\"298\":1}}],[\"陆续执行\",{\"1\":{\"290\":1}}],[\"工资条上的数字跟你报的数字差\",{\"1\":{\"1130\":1}}],[\"工资条不能反映工资\",{\"1\":{\"1130\":1}}],[\"工资低\",{\"1\":{\"1118\":1,\"1121\":1}}],[\"工资是否拖欠等信息即可\",{\"1\":{\"1117\":1}}],[\"工资略低\",{\"1\":{\"1114\":1}}],[\"工资高加班多提升空间大\",{\"1\":{\"1114\":1}}],[\"工资在大部分时候是你找工作首要参考依据\",{\"1\":{\"1108\":1}}],[\"工资构成\",{\"0\":{\"1108\":1},\"1\":{\"1105\":1}}],[\"工资面议\",{\"1\":{\"1104\":1}}],[\"工资上不封顶\",{\"1\":{\"1104\":1}}],[\"工资\",{\"1\":{\"1104\":1}}],[\"工程师可以加的内容\",{\"1\":{\"1127\":1}}],[\"工程\",{\"1\":{\"1009\":1}}],[\"工程重构\",{\"0\":{\"561\":1}}],[\"工具可以在\",{\"1\":{\"1003\":1}}],[\"工具\",{\"0\":{\"1003\":1},\"1\":{\"985\":1,\"1003\":2,\"1005\":2,\"1161\":1}}],[\"工具类\",{\"0\":{\"133\":1,\"361\":1,\"402\":1}}],[\"工厂模式\",{\"1\":{\"498\":1}}],[\"工作经验也不是很多\",{\"1\":{\"1152\":1}}],[\"工作经历\",{\"1\":{\"1125\":1,\"1127\":1}}],[\"工作内容枯燥等真实原因\",{\"1\":{\"1121\":1}}],[\"工作内存与主内存同步延迟现象导致的可见性问题\",{\"1\":{\"297\":1}}],[\"工作内存是每个线程的私有数据区域\",{\"1\":{\"287\":1}}],[\"工作描述\",{\"1\":{\"1103\":1}}],[\"工作履历\",{\"1\":{\"1076\":1}}],[\"工作中犯的错误\",{\"1\":{\"959\":1}}],[\"工作的这处优化我猜测\",{\"1\":{\"959\":1}}],[\"工作也罢\",{\"1\":{\"571\":1}}],[\"工作目录\",{\"1\":{\"537\":1}}],[\"工作机制\",{\"0\":{\"446\":1}}],[\"替代的重要原因之一\",{\"1\":{\"930\":1}}],[\"替代\",{\"1\":{\"283\":1,\"927\":1}}],[\"替换的时候可以用\",{\"0\":{\"1047\":1}}],[\"替换后的文本也会保持小写\",{\"0\":{\"1046\":1}}],[\"替换子容器和对象的所有者\",{\"1\":{\"1041\":1}}],[\"替换东西时候又得带上原先的\",{\"1\":{\"1019\":1}}],[\"替换成你要设置的密码\",{\"1\":{\"792\":1,\"802\":1}}],[\"替换成变量的值\",{\"1\":{\"411\":1}}],[\"替换为\",{\"1\":{\"411\":1}}],[\"替换为spring\",{\"1\":{\"147\":1}}],[\"替换大的\",{\"1\":{\"240\":1}}],[\"轻db的架构思路\",{\"1\":{\"970\":1}}],[\"轻量级锁的目的是用短时间忙等换取线程在用户态和内核态切换的开销\",{\"1\":{\"379\":1}}],[\"轻量级同步\",{\"1\":{\"283\":1}}],[\"轻便的机制\",{\"1\":{\"49\":1}}],[\"禁止自我保护\",{\"1\":{\"569\":1}}],[\"禁止指令重排\",{\"1\":{\"283\":2}}],[\"禁用\",{\"2\":{\"4\":1}}],[\"禁用了如下功能\",{\"1\":{\"2\":1}}],[\"干掉java基础\",{\"1\":{\"1150\":1}}],[\"干什么用的\",{\"1\":{\"779\":1}}],[\"干完活后\",{\"1\":{\"352\":3}}],[\"干活\",{\"1\":{\"352\":3}}],[\"干扰他们\",{\"1\":{\"329\":1}}],[\"干\",{\"1\":{\"283\":1}}],[\"缩招不是不招聘\",{\"1\":{\"283\":1}}],[\"于\",{\"1\":{\"712\":1}}],[\"于流量高峰期\",{\"1\":{\"603\":1}}],[\"于是乎我也想整一个\",{\"1\":{\"1156\":1}}],[\"于是改成先用\",{\"1\":{\"1005\":1}}],[\"于是在活动时间开始的时候\",{\"1\":{\"931\":1}}],[\"于是就进入了执行器阶段\",{\"1\":{\"897\":1}}],[\"于是重复请求进入了后端\",{\"1\":{\"889\":1}}],[\"于是总结了一下\",{\"1\":{\"658\":1}}],[\"于是有了\",{\"1\":{\"591\":1}}],[\"于是有了下文\",{\"1\":{\"484\":1}}],[\"于是springboot出2跟着整\",{\"1\":{\"466\":1}}],[\"于是\",{\"1\":{\"312\":1}}],[\"于是再次进入下一个循环\",{\"1\":{\"312\":1}}],[\"于是系统总结下\",{\"1\":{\"60\":1}}],[\"于22nd\",{\"1\":{\"283\":1}}],[\"布隆过滤器是可以以较低的空间占用来判断元素是否存在进而用于去重\",{\"1\":{\"866\":1}}],[\"布隆过滤器的底层数据结构可以理解为bitmap\",{\"1\":{\"866\":1}}],[\"布隆过滤器\",{\"1\":{\"866\":1}}],[\"布尔型\",{\"1\":{\"686\":1}}],[\"布尔查询又叫组合查询\",{\"1\":{\"277\":1}}],[\"布局包括\",{\"1\":{\"5\":1}}],[\"布局\",{\"0\":{\"5\":1},\"2\":{\"7\":1}}],[\"布局与功能禁用\",{\"0\":{\"2\":1}}],[\"匹配\",{\"0\":{\"1048\":1}}],[\"匹配最小长度满足条件的值\",{\"1\":{\"1021\":1}}],[\"匹配主表达式后面的组而不将其包含在结果中\",{\"1\":{\"1021\":1}}],[\"匹配不在集合中的任何字符\",{\"1\":{\"1018\":1}}],[\"匹配空行\",{\"0\":{\"1016\":1}}],[\"匹配进来\",{\"1\":{\"959\":1}}],[\"匹配1\",{\"1\":{\"823\":1}}],[\"匹配0个或更多前面的标记\",{\"1\":{\"1016\":1}}],[\"匹配0\",{\"1\":{\"823\":1}}],[\"匹配后提供服务的路由地址\",{\"1\":{\"591\":2}}],[\"匹配所有\",{\"0\":{\"273\":1}}],[\"匹配成功则删除令牌\",{\"1\":{\"167\":1}}],[\"官方自带的逻辑备份工具是\",{\"1\":{\"927\":1}}],[\"官方用语\",{\"1\":{\"638\":1}}],[\"官方推荐使用的版本\",{\"1\":{\"554\":1}}],[\"官方开始推荐广泛使用\",{\"1\":{\"554\":1}}],[\"官方有\",{\"1\":{\"451\":1}}],[\"官方文档很清楚了\",{\"1\":{\"607\":1}}],[\"官方文档明确给出了警告\",{\"1\":{\"575\":1}}],[\"官方文档说了需要付费\",{\"1\":{\"558\":1}}],[\"官方文档\",{\"1\":{\"267\":1,\"599\":1,\"603\":1}}],[\"官网的文档一般足够了\",{\"1\":{\"1145\":1}}],[\"官网下下来运行\",{\"1\":{\"606\":1}}],[\"官网推荐用\",{\"1\":{\"581\":1}}],[\"官网文档\",{\"1\":{\"208\":1,\"552\":1}}],[\"官网解决不了的再\",{\"1\":{\"147\":1}}],[\"官网\",{\"1\":{\"147\":1,\"554\":1,\"594\":1,\"1145\":1}}],[\"官网给出了以上流程\",{\"1\":{\"111\":1}}],[\"官网快捷键总结\",{\"1\":{\"62\":1}}],[\"列模式批量操作\",{\"0\":{\"1051\":1}}],[\"列表\",{\"1\":{\"993\":1,\"1003\":1}}],[\"列表总数需要单独冗余存储等问题\",{\"1\":{\"961\":1}}],[\"列2\",{\"1\":{\"959\":1}}],[\"列1\",{\"1\":{\"959\":1}}],[\"列转行用union\",{\"0\":{\"947\":1},\"1\":{\"959\":1}}],[\"列显示为\",{\"1\":{\"893\":1}}],[\"列举了很多种情况\",{\"1\":{\"725\":1}}],[\"列值对应的java类型\",{\"1\":{\"429\":1}}],[\"列值\",{\"0\":{\"415\":1}}],[\"列名\",{\"0\":{\"415\":1}}],[\"列\",{\"1\":{\"265\":1,\"895\":1}}],[\"行组合\",{\"1\":{\"959\":1}}],[\"行都将与每个匹配的\",{\"1\":{\"959\":1}}],[\"行的复制\",{\"1\":{\"959\":1}}],[\"行以及与之匹配的\",{\"1\":{\"959\":1}}],[\"行数据\",{\"1\":{\"933\":1}}],[\"行锁是在需要的时候才加上的\",{\"1\":{\"931\":1}}],[\"行锁就是针对数据表中行记录的锁\",{\"1\":{\"930\":1}}],[\"行锁\",{\"1\":{\"892\":1}}],[\"行后续的操作\",{\"1\":{\"713\":1}}],[\"行业背景还是有必要注意一下的\",{\"1\":{\"1150\":1}}],[\"行业背景也是很重要的\",{\"1\":{\"1150\":1}}],[\"行业\",{\"0\":{\"1114\":1},\"1\":{\"283\":1,\"1105\":1}}],[\"行\",{\"0\":{\"1044\":1},\"1\":{\"265\":1,\"933\":1,\"959\":1}}],[\"行级锁都是基于索引的\",{\"1\":{\"81\":1,\"906\":1,\"936\":1}}],[\"索引15\",{\"1\":{\"1017\":1}}],[\"索引只对查询有好处\",{\"1\":{\"975\":1}}],[\"索引一般加在常用来查询的字段上\",{\"1\":{\"936\":1}}],[\"索引不是越多越好\",{\"1\":{\"936\":1}}],[\"索引不止存在内存中\",{\"1\":{\"916\":1}}],[\"索引在小数据量的时候用处不大\",{\"1\":{\"936\":1}}],[\"索引组织表的理解\",{\"1\":{\"925\":1}}],[\"索引内部就判断了\",{\"1\":{\"924\":1}}],[\"索引里面我特意去掉了\",{\"1\":{\"924\":1}}],[\"索引下推\",{\"0\":{\"924\":1},\"1\":{\"925\":1}}],[\"索引项是按照索引定义里面出现的字段顺序排序的\",{\"1\":{\"923\":1}}],[\"索引会生效吗\",{\"1\":{\"923\":1}}],[\"索引失效\",{\"1\":{\"923\":1}}],[\"索引生效\",{\"1\":{\"923\":2}}],[\"索引字段的维护总是有代价的\",{\"1\":{\"922\":1}}],[\"索引有关的概念\",{\"1\":{\"921\":1}}],[\"索引可能因为删除\",{\"1\":{\"919\":1}}],[\"索引维护\",{\"0\":{\"918\":1}}],[\"索引树上了\",{\"1\":{\"922\":1}}],[\"索引树上找到\",{\"1\":{\"921\":1}}],[\"索引树的\",{\"1\":{\"921\":1}}],[\"索引树取下一个值\",{\"1\":{\"921\":2}}],[\"索引树查到\",{\"1\":{\"921\":2}}],[\"索引树搜索一次\",{\"1\":{\"917\":1}}],[\"索引树\",{\"1\":{\"917\":1}}],[\"索引类型分为主键索引和非主键索引\",{\"1\":{\"917\":1}}],[\"索引是否缺失\",{\"1\":{\"977\":1}}],[\"索引是数据结构\",{\"1\":{\"936\":1}}],[\"索引是数据库系统里面最重要的概念之一\",{\"1\":{\"909\":1}}],[\"索引是不是太多了\",{\"1\":{\"923\":1}}],[\"索引是在存储引擎层实现的\",{\"1\":{\"916\":1}}],[\"索引就是数据结构\",{\"1\":{\"913\":1}}],[\"索引查询都是比全表扫描要快的\",{\"1\":{\"911\":1}}],[\"索引需要使用物理文件存储\",{\"1\":{\"911\":1}}],[\"索引的数据结构\",{\"1\":{\"936\":1}}],[\"索引的数据结构模型\",{\"1\":{\"921\":1}}],[\"索引的复用能力\",{\"1\":{\"923\":1}}],[\"索引的出现是为了提高查询效率\",{\"1\":{\"913\":1}}],[\"索引的出现其实就是为了提高数据查询的效率\",{\"1\":{\"909\":1}}],[\"索引的常见模型\",{\"0\":{\"913\":1}}],[\"索引的优缺点\",{\"0\":{\"910\":1}}],[\"索引其实就是它的\",{\"1\":{\"909\":1}}],[\"索引又是如何工作的呢\",{\"1\":{\"909\":1}}],[\"索引\",{\"1\":{\"265\":1,\"436\":1,\"892\":1,\"922\":1,\"923\":1,\"925\":2,\"936\":1}}],[\"倒着看由简入繁\",{\"1\":{\"375\":1}}],[\"倒排索引机制\",{\"0\":{\"264\":1}}],[\"倒计时刷新就没用了\",{\"1\":{\"129\":1}}],[\"倒计时\",{\"1\":{\"128\":1}}],[\"维持和管理连接\",{\"1\":{\"893\":1}}],[\"维护一种非强制性的映射关系\",{\"1\":{\"636\":1}}],[\"维护\",{\"1\":{\"606\":1}}],[\"维护火葬场\",{\"1\":{\"252\":1}}],[\"维基百科\",{\"1\":{\"262\":1}}],[\"除此之外\",{\"1\":{\"722\":1,\"726\":1,\"1150\":1,\"1161\":1}}],[\"除现在用的原生servlet外多了一套解决方案\",{\"1\":{\"466\":1}}],[\"除非你转专业\",{\"1\":{\"1150\":1}}],[\"除非你的业务就是有一张静态表\",{\"1\":{\"894\":1}}],[\"除非你知道高版本怎么配置\",{\"1\":{\"261\":1}}],[\"除非特别大的业务\",{\"1\":{\"866\":1}}],[\"除非进行特定的配置或使用第三方工具\",{\"1\":{\"785\":1}}],[\"除非单台机器ca自己本地访问自己localhost但不可能\",{\"1\":{\"572\":1}}],[\"除非整个网络环境都发生了故障\",{\"1\":{\"571\":1}}],[\"除非想自定义比如想给线程名字一个约束\",{\"1\":{\"362\":1}}],[\"除非抛出异常或者正常运行完成\",{\"1\":{\"352\":1}}],[\"除了手机\",{\"1\":{\"1148\":1}}],[\"除了一些\",{\"1\":{\"1132\":1}}],[\"除了常使用\",{\"1\":{\"1016\":1}}],[\"除了\",{\"1\":{\"1005\":1}}],[\"除了性能不错之外\",{\"1\":{\"970\":1}}],[\"除了性能外\",{\"1\":{\"918\":1}}],[\"除了分表\",{\"1\":{\"959\":1}}],[\"除了考虑性能外\",{\"1\":{\"918\":1}}],[\"除了对回滚段的影响\",{\"1\":{\"906\":1}}],[\"除了主从复制之外\",{\"1\":{\"900\":1}}],[\"除了下面这些之外官方文档上还列举了不少情况\",{\"1\":{\"725\":1}}],[\"除了error\",{\"1\":{\"705\":1}}],[\"除了添加null之外\",{\"1\":{\"688\":1}}],[\"除了0特殊外\",{\"1\":{\"648\":1}}],[\"除了hashtable等同步容器\",{\"1\":{\"641\":1}}],[\"除了原始数据类型的变量\",{\"1\":{\"635\":1}}],[\"除了拦截所有请求到登陆页面\",{\"1\":{\"616\":1}}],[\"除了有个注解是配合springsecurity实现注解地方放行访问\",{\"1\":{\"490\":1}}],[\"除了图片\",{\"1\":{\"261\":1}}],[\"除了基本的分布式对象\",{\"1\":{\"112\":1}}],[\"必看\",{\"1\":{\"1150\":1}}],[\"必看书籍\",{\"1\":{\"1150\":2}}],[\"必然会有一个属于自己的职业规划\",{\"1\":{\"1144\":1}}],[\"必然需要花费更多的时间\",{\"1\":{\"372\":1}}],[\"必不可少的内容\",{\"1\":{\"1127\":1}}],[\"必用\",{\"1\":{\"261\":1}}],[\"必须修改成下面这样\",{\"1\":{\"1085\":1}}],[\"必须复杂密码\",{\"1\":{\"1001\":1}}],[\"必须明确写清列名不能\",{\"1\":{\"959\":1}}],[\"必须按照相同的顺序来加锁\",{\"1\":{\"932\":1}}],[\"必须加\",{\"1\":{\"790\":1}}],[\"必须加以下\",{\"1\":{\"691\":1}}],[\"必须通过\",{\"1\":{\"709\":1}}],[\"必须通过主内存来完成\",{\"1\":{\"287\":1}}],[\"必须定义显式构造函数\",{\"1\":{\"691\":1}}],[\"必须相等\",{\"1\":{\"691\":1}}],[\"必须是对象吗\",{\"1\":{\"688\":1}}],[\"必须是vue实例中定义的函数\",{\"1\":{\"220\":1}}],[\"必须在\",{\"1\":{\"1005\":1}}],[\"必须在连接时指定\",{\"1\":{\"823\":1}}],[\"必须在传递类型后才能使用就泛型而言\",{\"1\":{\"717\":1}}],[\"必须在同步代码块中使用\",{\"1\":{\"687\":1}}],[\"必须在工作内存中进行\",{\"1\":{\"287\":1}}],[\"必须从左到右写好\",{\"1\":{\"646\":1}}],[\"必须实现security提供的websecurityconfigureradapter类\",{\"1\":{\"625\":1}}],[\"必须选出一个唯一的leader\",{\"1\":{\"572\":1}}],[\"必须把当前类加入spring的容器管理\",{\"1\":{\"505\":1}}],[\"必须发送post请求\",{\"1\":{\"502\":1}}],[\"必须放在最前面\",{\"1\":{\"400\":1}}],[\"必须考虑到指令之间的\",{\"1\":{\"293\":1}}],[\"必须先导包\",{\"1\":{\"217\":1}}],[\"必须要手动上传不能资源管理器复制进去\",{\"1\":{\"1084\":1}}],[\"必须要禁止其他节点的读写操作\",{\"1\":{\"572\":1}}],[\"必须要考虑指令之间的\",{\"1\":{\"292\":1}}],[\"必须要做限流\",{\"1\":{\"198\":1}}],[\"必须要抛出异常\",{\"1\":{\"182\":1}}],[\"必须外网可以正常访问\",{\"1\":{\"192\":1}}],[\"必须学会看官方文档解决问题\",{\"1\":{\"147\":1}}],[\"架构模式\",{\"1\":{\"553\":1}}],[\"架构风格\",{\"1\":{\"553\":1}}],[\"架构\",{\"0\":{\"843\":1},\"1\":{\"261\":1}}],[\"架构图\",{\"1\":{\"126\":1}}],[\"终于好了\",{\"1\":{\"1154\":1}}],[\"终于到了\",{\"1\":{\"1001\":1}}],[\"终于结束了\",{\"1\":{\"261\":1}}],[\"终止\",{\"1\":{\"929\":1}}],[\"终结版练习\",{\"1\":{\"658\":1}}],[\"终端\",{\"1\":{\"215\":1,\"219\":1,\"790\":1}}],[\"边工边敲历经52天\",{\"1\":{\"261\":1}}],[\"采样率值介于\",{\"1\":{\"594\":1}}],[\"采购\",{\"0\":{\"259\":1}}],[\"采用的\",{\"1\":{\"919\":1}}],[\"采用的是数组加链表的结构\",{\"1\":{\"722\":1}}],[\"采用拉链法结合红黑树\",{\"1\":{\"740\":1}}],[\"采用拉链法\",{\"1\":{\"740\":1}}],[\"采用二进制位操作\",{\"1\":{\"739\":1}}],[\"采用了英国伦敦地铁站的名称来命名\",{\"1\":{\"554\":1}}],[\"采用了\",{\"1\":{\"543\":2}}],[\"采用\",{\"1\":{\"154\":2,\"302\":1,\"740\":2,\"779\":1}}],[\"技能描述\",{\"1\":{\"1127\":1}}],[\"技术的深入掌握都需要去不断的学习\",{\"1\":{\"1141\":1}}],[\"技术的更新换代\",{\"1\":{\"1141\":1}}],[\"技术只是辅助\",{\"1\":{\"1114\":1}}],[\"技术求稳\",{\"1\":{\"1114\":1}}],[\"技术发展慢\",{\"1\":{\"1114\":1}}],[\"技术发展快\",{\"1\":{\"1114\":1}}],[\"技术大佬才会用到的词汇\",{\"1\":{\"1103\":1}}],[\"技术\",{\"0\":{\"1111\":1},\"1\":{\"591\":1,\"899\":1,\"1105\":1}}],[\"技术上可以\",{\"1\":{\"584\":1}}],[\"技术选型\",{\"0\":{\"228\":1},\"1\":{\"589\":1}}],[\"技巧\",{\"0\":{\"253\":1}}],[\"像激活idea这种得放\",{\"1\":{\"998\":1}}],[\"像分库分表这类场景就不建议使用自增\",{\"1\":{\"972\":1}}],[\"像下面这个语句一样\",{\"1\":{\"894\":1}}],[\"像下面这样直接赋值不就可以了吗\",{\"1\":{\"721\":1}}],[\"像货物一样可以签收\",{\"1\":{\"837\":1}}],[\"像mysql这种服务得放launchdaemons里\",{\"1\":{\"998\":1}}],[\"像mysql这种关系型数据库\",{\"1\":{\"689\":1}}],[\"像mysql\",{\"1\":{\"796\":1}}],[\"像我们平常运行的应用程序都是运行在用户空间\",{\"1\":{\"709\":1}}],[\"像第一种定死了\",{\"1\":{\"688\":1}}],[\"像api像后面导入的第三方开源jar包\",{\"1\":{\"688\":1}}],[\"像a\",{\"1\":{\"657\":1}}],[\"像age这种精确取值\",{\"1\":{\"279\":1}}],[\"像一个适配器\",{\"1\":{\"594\":1}}],[\"像\",{\"1\":{\"576\":1}}],[\"像苹果生态\",{\"1\":{\"553\":1}}],[\"像是创造一个变量\",{\"1\":{\"439\":1}}],[\"像这种字段\",{\"1\":{\"252\":1}}],[\"像素\",{\"1\":{\"244\":1}}],[\"既可以先从表\",{\"1\":{\"896\":1}}],[\"既能懒加载\",{\"1\":{\"779\":1}}],[\"既考察了我们对基础概念的理解\",{\"1\":{\"637\":1}}],[\"既是销售属性又是基本属性\",{\"1\":{\"252\":1}}],[\"既然32位系统里内存地址长度是32位的\",{\"1\":{\"1092\":1}}],[\"既然进入了等待状态\",{\"1\":{\"934\":1}}],[\"既然要全库只读\",{\"1\":{\"927\":1}}],[\"既然要享受spring的好处\",{\"1\":{\"182\":1}}],[\"既然主键包含了\",{\"1\":{\"925\":1}}],[\"既然只依靠\",{\"1\":{\"900\":1}}],[\"既然这两个类都是通过继承父类abstractwrapper获得的like方法\",{\"1\":{\"743\":1,\"1101\":1}}],[\"既然编译器要把泛型擦除\",{\"1\":{\"715\":1}}],[\"既然不能new的话就通过多态\",{\"1\":{\"686\":1}}],[\"既然网络都分区了为什么还能保持cp\",{\"1\":{\"571\":1}}],[\"既然现在每次都要传递这两个\",{\"1\":{\"70\":1}}],[\"很有趣\",{\"1\":{\"1150\":1}}],[\"很有可能把系统打死\",{\"1\":{\"602\":1}}],[\"很好记\",{\"1\":{\"1145\":1}}],[\"很好用\",{\"1\":{\"996\":1}}],[\"很久都没用\",{\"1\":{\"1144\":1}}],[\"很快就会被淘汰了\",{\"1\":{\"1141\":1}}],[\"很可能问到他熟但是你不熟的细节\",{\"1\":{\"1134\":1}}],[\"很充足\",{\"1\":{\"1103\":1}}],[\"很笨的一种做法\",{\"1\":{\"970\":1}}],[\"很长时间才会更新一次\",{\"1\":{\"894\":1}}],[\"很详细\",{\"1\":{\"777\":1}}],[\"很详细比视频评论下我看初级篇找的要详细\",{\"1\":{\"90\":1}}],[\"很淡漠的利益关系\",{\"1\":{\"657\":1}}],[\"很亲密\",{\"1\":{\"657\":1}}],[\"很少直接操作各种不同引用\",{\"1\":{\"637\":1}}],[\"很重要\",{\"1\":{\"568\":1}}],[\"很厉害\",{\"1\":{\"554\":1,\"1150\":1}}],[\"很显然是不能接受的\",{\"1\":{\"372\":1}}],[\"很多东西仔细去想并把他们连接起来其实是可以拓宽思路的\",{\"1\":{\"1160\":1}}],[\"很多东西其实是我以前写过的\",{\"1\":{\"1152\":1}}],[\"很多人其实从来没有完成过自己的计划\",{\"1\":{\"1142\":2}}],[\"很多人应该都有过这样的经历\",{\"1\":{\"1142\":1}}],[\"很多人说\",{\"1\":{\"261\":1}}],[\"很多时候\",{\"1\":{\"1139\":1,\"1151\":1}}],[\"很多数据必须\",{\"1\":{\"970\":1}}],[\"很多公司内部复杂的系统\",{\"1\":{\"970\":1}}],[\"很多的\",{\"1\":{\"961\":1}}],[\"很多解锁细节\",{\"1\":{\"844\":1}}],[\"很多小伙伴搞不清楚为啥要学习\",{\"1\":{\"713\":1}}],[\"很多繁琐的重复编程\",{\"1\":{\"639\":1}}],[\"很多场景都是利用类似机制做到的\",{\"1\":{\"638\":1}}],[\"很多概念与mysql类似的\",{\"1\":{\"265\":1}}],[\"很方便\",{\"1\":{\"252\":1,\"598\":1}}],[\"很麻烦\",{\"1\":{\"252\":1}}],[\"级联属性\",{\"1\":{\"421\":1}}],[\"级联属性封装结果集\",{\"0\":{\"421\":1},\"1\":{\"421\":1}}],[\"级联值得学习\",{\"1\":{\"250\":1}}],[\"级联选择器\",{\"0\":{\"248\":1}}],[\"测了一下输出都是\",{\"1\":{\"249\":1}}],[\"测试是否成功即可\",{\"1\":{\"986\":1}}],[\"测试多线程修改值\",{\"1\":{\"856\":1}}],[\"测试的时候直接写成参数测试吧\",{\"1\":{\"689\":1}}],[\"测试了一下\",{\"1\":{\"556\":1,\"597\":1}}],[\"测试\",{\"0\":{\"268\":1},\"1\":{\"415\":1,\"449\":1,\"591\":1,\"597\":1,\"598\":1,\"994\":1}}],[\"测试环境下\",{\"1\":{\"267\":1}}],[\"测试点\",{\"1\":{\"229\":1}}],[\"测试类的话用springboot的测试注解\",{\"1\":{\"505\":1}}],[\"测试类测不出多线程的效果\",{\"1\":{\"353\":1}}],[\"测试类\",{\"0\":{\"527\":1},\"1\":{\"227\":1,\"529\":1}}],[\"测试时候这个通了正式环境改个参数就行\",{\"1\":{\"190\":1}}],[\"ˈdʒæksən\",{\"1\":{\"247\":1}}],[\"尺寸等\",{\"1\":{\"244\":1}}],[\"仿照别的校验写\",{\"0\":{\"243\":1}}],[\"仿照源码抄部分\",{\"1\":{\"123\":1}}],[\"规约例如把映射的信息做一个sum\",{\"1\":{\"689\":1}}],[\"规避资源耗尽的风险\",{\"1\":{\"366\":1}}],[\"规格与包装\",{\"1\":{\"244\":1}}],[\"规定\",{\"1\":{\"243\":1}}],[\"规范里指明了\",{\"1\":{\"722\":1}}],[\"规范\",{\"1\":{\"241\":1,\"591\":1}}],[\"规则制定者管理不同名字的\",{\"1\":{\"122\":1}}],[\"抽象角色\",{\"1\":{\"688\":1}}],[\"抽象和接口用到多态\",{\"1\":{\"686\":1}}],[\"抽象类可以\",{\"1\":{\"686\":1}}],[\"抽象类是一种模板式设计\",{\"1\":{\"686\":1}}],[\"抽象类用于代码复用强调所属关系\",{\"1\":{\"686\":1}}],[\"抽象类与其派生类是一种\",{\"1\":{\"657\":1}}],[\"抽象\",{\"1\":{\"686\":1}}],[\"抽象出门的属性\",{\"1\":{\"678\":1}}],[\"抽取可重用的sql片段\",{\"1\":{\"440\":1}}],[\"抽取解耦封装\",{\"1\":{\"240\":1}}],[\"抽空可以再看看\",{\"1\":{\"234\":1}}],[\"😭\",{\"1\":{\"998\":1}}],[\"💡\",{\"1\":{\"739\":1}}],[\"😉\",{\"1\":{\"240\":1}}],[\"😡\",{\"1\":{\"1081\":1}}],[\"😡todo\",{\"1\":{\"178\":1,\"743\":1,\"1101\":1}}],[\"😡但是我发现\",{\"1\":{\"107\":1}}],[\"品牌名必须提交\",{\"1\":{\"240\":2}}],[\"拖拽的\",{\"1\":{\"234\":1}}],[\"拖拽前端业务实现\",{\"0\":{\"234\":1}}],[\"拖慢\",{\"1\":{\"92\":1}}],[\"算出来\",{\"1\":{\"935\":1}}],[\"算出md5值\",{\"1\":{\"132\":1}}],[\"算法\",{\"1\":{\"389\":1,\"571\":1,\"1150\":1}}],[\"算一种\",{\"0\":{\"232\":1}}],[\"物理+数据链路层\",{\"1\":{\"688\":1}}],[\"物理删除\",{\"1\":{\"229\":1}}],[\"物业公司\",{\"1\":{\"561\":1}}],[\"物流\",{\"1\":{\"158\":2}}],[\"且\",{\"1\":{\"959\":1}}],[\"且之前挂掉的主服务器重连还是主服务器\",{\"1\":{\"864\":1}}],[\"且主服务器恢复后仍是主服务器\",{\"1\":{\"862\":1}}],[\"且不说能不能承受\",{\"1\":{\"814\":1}}],[\"且不会对用户的本地文件系统造成潜在的风险\",{\"1\":{\"706\":1}}],[\"且腾讯云发来警告cpu和带宽被跑满\",{\"1\":{\"800\":1}}],[\"且字面量方式创建的\",{\"1\":{\"722\":1}}],[\"且当前数组的长度\",{\"1\":{\"703\":1}}],[\"且线程\",{\"1\":{\"694\":1}}],[\"且某一个索引位置以链表形式存在的数据个数\",{\"1\":{\"688\":1}}],[\"且常量池不会存在相同内容的常量\",{\"1\":{\"687\":1}}],[\"且按规则每4位组一个数\",{\"1\":{\"685\":1}}],[\"且没带cookie\",{\"1\":{\"591\":1}}],[\"且会在下面工具栏显示\",{\"1\":{\"229\":1}}],[\"且这个包下有\",{\"1\":{\"219\":1}}],[\"学什么可能得根据公司的需求来了\",{\"1\":{\"1150\":1}}],[\"学什么都能够找到一份好的工作\",{\"1\":{\"1139\":1}}],[\"学校机房网络ip地址是固定的而自己坐的位置又不固定\",{\"1\":{\"1160\":1}}],[\"学校不安排你就不学\",{\"1\":{\"1150\":1}}],[\"学校应该也开了\",{\"1\":{\"1150\":1}}],[\"学长\",{\"1\":{\"1150\":1}}],[\"学编程\",{\"1\":{\"1150\":1}}],[\"学完虚拟机再看它\",{\"1\":{\"1150\":1}}],[\"学完了\",{\"1\":{\"1150\":1}}],[\"学完的知识\",{\"1\":{\"1144\":1}}],[\"学完之后\",{\"1\":{\"1144\":1}}],[\"学历\",{\"1\":{\"1127\":1,\"1130\":1}}],[\"学生建议按照这个流程来\",{\"1\":{\"1144\":1}}],[\"学生基本信息\",{\"1\":{\"959\":1}}],[\"学生解答一道题目\",{\"1\":{\"849\":1}}],[\"学过本章内容的小吕又纳闷了\",{\"1\":{\"925\":1}}],[\"学到一招\",{\"1\":{\"878\":1}}],[\"学到了\",{\"1\":{\"229\":1}}],[\"学的一个点\",{\"1\":{\"739\":1}}],[\"学\",{\"1\":{\"688\":1}}],[\"学习利器\",{\"1\":{\"1164\":1}}],[\"学习java\",{\"1\":{\"1150\":1}}],[\"学习从来都不是只看看书就能学会的\",{\"1\":{\"1144\":1}}],[\"学习也一样\",{\"1\":{\"1144\":1}}],[\"学习最好一个时间段专一的去研究一个知识点\",{\"1\":{\"1144\":1}}],[\"学习不是你看得书越多\",{\"1\":{\"1143\":1}}],[\"学习吧\",{\"1\":{\"1142\":1}}],[\"学习的方式是想通的\",{\"1\":{\"1152\":1}}],[\"学习的目的\",{\"0\":{\"1141\":1},\"1\":{\"1141\":1}}],[\"学习的步骤\",{\"0\":{\"1144\":1},\"1\":{\"1137\":1}}],[\"学习的思维方式\",{\"1\":{\"688\":1}}],[\"学习方法\",{\"0\":{\"1143\":1},\"1\":{\"1137\":1}}],[\"学习目的\",{\"1\":{\"1137\":1}}],[\"学习空间大\",{\"1\":{\"1112\":1}}],[\"学习游戏网站\",{\"1\":{\"985\":1}}],[\"学习理念设计和思想\",{\"1\":{\"581\":1}}],[\"学习手册\",{\"0\":{\"491\":1}}],[\"学习\",{\"1\":{\"327\":1,\"483\":1}}],[\"学习一下雷神的思想\",{\"1\":{\"231\":1}}],[\"学于\",{\"1\":{\"283\":1}}],[\"学学雷神的思想境界\",{\"1\":{\"243\":1}}],[\"学springsecurity配置\",{\"1\":{\"156\":1}}],[\"学springsecurity的时候用来校验\",{\"1\":{\"156\":1}}],[\"拼接null就是null\",{\"1\":{\"959\":1}}],[\"拼接\",{\"1\":{\"229\":1}}],[\"善用工具还是会给带来科技的快感和生产力的\",{\"1\":{\"1164\":1}}],[\"善用\",{\"1\":{\"229\":1}}],[\"熔断是被调用方故障\",{\"1\":{\"603\":1}}],[\"熔断的话直接快速响应失败就不会堆积了长时间的卡死\",{\"1\":{\"603\":1}}],[\"熔断降级\",{\"1\":{\"594\":1,\"599\":1}}],[\"熔断\",{\"0\":{\"603\":1},\"1\":{\"228\":1,\"603\":1}}],[\"貌似有问题\",{\"1\":{\"779\":1}}],[\"貌似\",{\"1\":{\"505\":1}}],[\"貌似是junit4用的注解\",{\"1\":{\"227\":1,\"529\":1}}],[\"貌似删了这个功能了\",{\"1\":{\"154\":1}}],[\"父节点又小于右儿子\",{\"1\":{\"916\":1}}],[\"父类初始化调用的方法为子类实现的方法\",{\"1\":{\"697\":1}}],[\"父类初始化<clinit>\",{\"1\":{\"658\":1}}],[\"父类非静态代码块\",{\"1\":{\"697\":1}}],[\"父类非静态对象和非静态代码块\",{\"1\":{\"658\":1}}],[\"父类静态代码块\",{\"1\":{\"697\":1}}],[\"父类静态对象和静态代码块\",{\"1\":{\"658\":1}}],[\"父类实例化方法\",{\"1\":{\"658\":1}}],[\"父类的静态代码块\",{\"1\":{\"658\":1}}],[\"父类构造函数\",{\"1\":{\"658\":1,\"697\":1}}],[\"父子关系\",{\"1\":{\"657\":1}}],[\"父子\",{\"1\":{\"556\":1}}],[\"父子组件传递数据\",{\"1\":{\"226\":2}}],[\"父pom\",{\"1\":{\"556\":1}}],[\"父工程这里只是起一个定义作用\",{\"1\":{\"556\":1}}],[\"父工程\",{\"0\":{\"555\":1},\"1\":{\"556\":1}}],[\"父工程的配置\",{\"1\":{\"554\":1}}],[\"父有这个按道理子引入父应该也有\",{\"1\":{\"546\":1}}],[\"父\",{\"1\":{\"546\":1,\"556\":1}}],[\"父组件绑定这个事件\",{\"1\":{\"226\":1}}],[\"任意数据类型都具备一个class静态属性\",{\"1\":{\"688\":1}}],[\"任意多的数据都会带出去\",{\"1\":{\"226\":1}}],[\"任何与null值的比对都会返回null\",{\"1\":{\"948\":1}}],[\"任何与null值的对比都将返回null\",{\"1\":{\"948\":1}}],[\"任何一台都可以作为集群的一个入口\",{\"1\":{\"865\":1}}],[\"任何数异或本身都为0\",{\"1\":{\"706\":1}}],[\"任何数异或0都等于它本身\",{\"1\":{\"706\":1}}],[\"任何地点存储和访问任意类型的数据\",{\"1\":{\"594\":2}}],[\"任何时间\",{\"1\":{\"594\":2}}],[\"任何节点有3状态\",{\"1\":{\"572\":1}}],[\"任务名字可随意\",{\"1\":{\"994\":1}}],[\"任务调度服务\",{\"1\":{\"594\":2}}],[\"任务一二完后我才做\",{\"1\":{\"376\":1}}],[\"任务管理器\",{\"1\":{\"62\":1}}],[\"任务列表\",{\"0\":{\"21\":1}}],[\"子查询\",{\"1\":{\"959\":2}}],[\"子串的任意字符串\",{\"1\":{\"959\":1}}],[\"子句的基本语法\",{\"1\":{\"959\":1}}],[\"子句用于定义一个临时的命名查询\",{\"1\":{\"959\":1}}],[\"子句\",{\"1\":{\"947\":1,\"959\":1,\"963\":7}}],[\"子\",{\"1\":{\"556\":1}}],[\"子模块整个\",{\"1\":{\"556\":1}}],[\"子模块继承之后\",{\"1\":{\"556\":1}}],[\"子工程会向上找\",{\"1\":{\"556\":1}}],[\"子类中的basename还没有被初始化\",{\"1\":{\"697\":1}}],[\"子类实现的方法中调用的basename为子类中的私有属性\",{\"1\":{\"697\":1}}],[\"子类实例化方法\",{\"1\":{\"658\":1}}],[\"子类非静态代码块和初始化步骤还没有到\",{\"1\":{\"697\":1}}],[\"子类非静态代码块\",{\"1\":{\"697\":1}}],[\"子类静态代码块\",{\"1\":{\"697\":1}}],[\"子类静态对象和静态代码块\",{\"1\":{\"658\":1}}],[\"子类特有的属性和方法不能调用\",{\"1\":{\"686\":1}}],[\"子类访问权限大于等于父类方法访问权限\",{\"1\":{\"659\":1}}],[\"子类抛出异常小于等于父类方法抛出异常\",{\"1\":{\"659\":1}}],[\"子类返回类型小于等于父类方法返回类型\",{\"1\":{\"659\":1}}],[\"子类的静态代码块\",{\"1\":{\"658\":1}}],[\"子类的初始化<clinit>\",{\"1\":{\"658\":1}}],[\"子类的无参构造\",{\"1\":{\"658\":2}}],[\"子类的非静态代码块\",{\"1\":{\"658\":2}}],[\"子类构造函数\",{\"1\":{\"658\":1,\"697\":1}}],[\"子类\",{\"1\":{\"543\":1,\"658\":1,\"717\":1,\"1081\":1}}],[\"子类可以访问父类的非\",{\"1\":{\"182\":1}}],[\"子组件给父组件发送一个事件\",{\"1\":{\"226\":1}}],[\"子组件给父组件传递数据\",{\"1\":{\"226\":1}}],[\"仔细看下面的例子便于理解\",{\"1\":{\"226\":1}}],[\"生词本\",{\"1\":{\"1164\":1}}],[\"生日庆祝\",{\"1\":{\"1108\":1}}],[\"生产\",{\"1\":{\"1084\":1}}],[\"生产环境\",{\"1\":{\"598\":1}}],[\"生产环境下的微服务肯定是分布式部署的\",{\"1\":{\"553\":1}}],[\"生产者流量太大\",{\"1\":{\"848\":1}}],[\"生产者发送消息到queue会经过两个过程\",{\"1\":{\"834\":1}}],[\"生产者工程\",{\"1\":{\"827\":1}}],[\"生产者\",{\"1\":{\"543\":1,\"1081\":1}}],[\"生产者消费者模式\",{\"0\":{\"348\":1}}],[\"生成静态文件\",{\"1\":{\"883\":1}}],[\"生成订单时创建消息放入延时队列\",{\"1\":{\"844\":1}}],[\"生成ssh\",{\"1\":{\"797\":1,\"983\":1}}],[\"生成\",{\"1\":{\"646\":1,\"689\":1,\"883\":1}}],[\"生成的版本一定属于上面的\",{\"1\":{\"935\":1}}],[\"生成的是不带\",{\"1\":{\"587\":1}}],[\"生成的uuid是带\",{\"1\":{\"587\":1}}],[\"生成的url将是$\",{\"1\":{\"539\":1}}],[\"生成一个对应的文件\",{\"1\":{\"981\":1}}],[\"生成一个请求唯一id\",{\"1\":{\"174\":1}}],[\"生成一个唯一id\",{\"1\":{\"174\":1}}],[\"生态系统中的网关\",{\"1\":{\"713\":1}}],[\"生态系统中最完整的\",{\"1\":{\"494\":1}}],[\"生态很庞大\",{\"1\":{\"468\":1}}],[\"生效的配置类就会给容器中装配很多组件\",{\"1\":{\"485\":1}}],[\"生效\",{\"1\":{\"483\":1,\"923\":1}}],[\"生命周期有七步\",{\"1\":{\"489\":1}}],[\"生命周期\",{\"1\":{\"225\":8}}],[\"讲解十分详细\",{\"1\":{\"1161\":1}}],[\"讲解一下目录🤺\",{\"1\":{\"222\":1}}],[\"讲了70+如何写好java代码的例子\",{\"1\":{\"1150\":1}}],[\"讲的挺有趣的\",{\"1\":{\"1150\":1}}],[\"讲一下\",{\"0\":{\"681\":1}}],[\"讲一下tcp三次握手\",{\"0\":{\"57\":1}}],[\"讲义\",{\"1\":{\"649\":1}}],[\"价格\",{\"1\":{\"220\":2}}],[\"监控\",{\"1\":{\"594\":1,\"908\":1}}],[\"监控data中的数据变化\",{\"1\":{\"225\":1}}],[\"监控内存泄露\",{\"1\":{\"101\":1}}],[\"监听死信队列\",{\"1\":{\"844\":1}}],[\"监听哪些队列即可\",{\"0\":{\"830\":1}}],[\"监听\",{\"1\":{\"817\":1}}],[\"监听80端口\",{\"1\":{\"810\":1}}],[\"监听两个类中都没有另一个的引用\",{\"1\":{\"543\":1,\"1081\":1}}],[\"监听属性\",{\"1\":{\"225\":1}}],[\"监听函数\",{\"1\":{\"221\":1}}],[\"监听器拿消息写services用两个注解\",{\"1\":{\"829\":1}}],[\"监听器需要实现applicationlistener<applicotionevent>\",{\"1\":{\"543\":1,\"1081\":1}}],[\"监听器需要被spring管理\",{\"1\":{\"543\":1,\"1081\":1}}],[\"监听器\",{\"1\":{\"220\":1,\"521\":1,\"619\":1}}],[\"号文件开头\",{\"1\":{\"899\":1}}],[\"号文件末尾后就回到\",{\"1\":{\"899\":1}}],[\"号应该是分隔符\",{\"1\":{\"787\":1}}],[\"号元素\",{\"1\":{\"694\":1}}],[\"号\",{\"1\":{\"411\":1}}],[\"号左边的\",{\"1\":{\"220\":1}}],[\"号商品\",{\"1\":{\"115\":1}}],[\"定期\",{\"1\":{\"901\":1}}],[\"定期断开长连接\",{\"1\":{\"893\":1}}],[\"定期扫描数据库\",{\"1\":{\"846\":1}}],[\"定位到此元素实际存储位置\",{\"0\":{\"691\":1}}],[\"定位到主机\",{\"1\":{\"688\":1}}],[\"定位正在运行的进程\",{\"1\":{\"688\":1}}],[\"定制rabbittemplate\",{\"0\":{\"836\":1}}],[\"定制镜像\",{\"1\":{\"796\":1}}],[\"定制排序\",{\"1\":{\"688\":1}}],[\"定制化配置\",{\"1\":{\"485\":1}}],[\"定义状态\",{\"1\":{\"1086\":1}}],[\"定义正则表达式匹配模式\",{\"1\":{\"1019\":1}}],[\"定义好了接口标准\",{\"1\":{\"740\":1}}],[\"定义变量\",{\"1\":{\"646\":1}}],[\"定义方法\",{\"1\":{\"646\":1}}],[\"定义jwt认证过滤器\",{\"0\":{\"627\":1}}],[\"定义java\",{\"1\":{\"549\":1}}],[\"定义了一组标准的接口和类\",{\"1\":{\"740\":1}}],[\"定义了一个demo类\",{\"1\":{\"388\":1}}],[\"定义了跑的方法\",{\"1\":{\"657\":1}}],[\"定义了认证authentication的方法\",{\"1\":{\"620\":1}}],[\"定义全局事务的范围\",{\"1\":{\"606\":1}}],[\"定义规则\",{\"1\":{\"605\":1}}],[\"定义资源\",{\"1\":{\"605\":1}}],[\"定义一个\",{\"1\":{\"576\":1}}],[\"定义一个循环屏障\",{\"1\":{\"338\":1,\"339\":1}}],[\"定义要处理的后缀名列表\",{\"1\":{\"540\":1}}],[\"定义切点有很多其它种方\",{\"1\":{\"492\":1}}],[\"定义属性和对应的set方法\",{\"1\":{\"487\":1}}],[\"定义普通列封装规则\",{\"1\":{\"419\":1}}],[\"定义的属性名\",{\"1\":{\"220\":1}}],[\"定义的名为\",{\"1\":{\"220\":1}}],[\"定时任务有时效性问题\",{\"1\":{\"839\":1}}],[\"定时任务上架\",{\"1\":{\"202\":1}}],[\"定时任务来完成定时任务不阻塞的功能\",{\"1\":{\"202\":1}}],[\"定时任务不该阻塞\",{\"1\":{\"202\":1}}],[\"定时任务\",{\"1\":{\"202\":1,\"890\":1}}],[\"定时任务demo\",{\"0\":{\"202\":1}}],[\"定时任务就参考秒杀系统的定时任务设计\",{\"1\":{\"198\":1}}],[\"定时任务会定期发送续约请求到redis\",{\"1\":{\"113\":1}}],[\"绑定的ip\",{\"1\":{\"853\":1}}],[\"绑定和权限机制\",{\"1\":{\"823\":1}}],[\"绑定\",{\"1\":{\"823\":1}}],[\"绑定属性\",{\"1\":{\"220\":1}}],[\"绑定事件\",{\"1\":{\"220\":1}}],[\"事实证明我是对的\",{\"1\":{\"1160\":1}}],[\"事实上有的老师讲的不是很好\",{\"1\":{\"1150\":1}}],[\"事件源\",{\"1\":{\"543\":1,\"1081\":1}}],[\"事件消费方\",{\"1\":{\"543\":1,\"1081\":1}}],[\"事件\",{\"1\":{\"543\":1,\"1081\":1}}],[\"事件生产方\",{\"1\":{\"543\":1,\"1081\":1}}],[\"事件驱动模型其实是一种抽象模型\",{\"1\":{\"543\":1,\"1081\":1}}],[\"事件驱动模型就是观察者模式很经典的一个应用\",{\"1\":{\"498\":1}}],[\"事件驱动运行的\",{\"1\":{\"543\":1,\"1081\":1}}],[\"事件驱动\",{\"0\":{\"1081\":1},\"1\":{\"543\":1,\"1081\":1}}],[\"事件驱动的编程模型是基于发布订阅模式的\",{\"1\":{\"498\":1}}],[\"事件名推荐\",{\"1\":{\"226\":1}}],[\"事件名\",{\"1\":{\"226\":1}}],[\"事件机制\",{\"1\":{\"226\":1}}],[\"事件指定一个回调函数\",{\"1\":{\"220\":1}}],[\"事件中直接写js片段\",{\"1\":{\"220\":1}}],[\"事件修饰符\",{\"1\":{\"220\":2}}],[\"事务是最小的执行单位\",{\"1\":{\"962\":1}}],[\"事务在启动的时候就\",{\"1\":{\"935\":1}}],[\"事务在执行期间看到的数据前后必须是一致的\",{\"1\":{\"905\":1}}],[\"事务才真正启动\",{\"1\":{\"934\":1}}],[\"事务才会回滚\",{\"1\":{\"182\":2}}],[\"事务中\",{\"1\":{\"931\":1}}],[\"事务中的\",{\"1\":{\"928\":1}}],[\"事务不提交\",{\"1\":{\"928\":1}}],[\"事务不起作用\",{\"1\":{\"182\":2}}],[\"事务隔离\",{\"1\":{\"927\":1,\"934\":1}}],[\"事务隔离的实现\",{\"0\":{\"906\":1}}],[\"事务id\",{\"1\":{\"908\":1}}],[\"事务执行更新操作并提交事务\",{\"1\":{\"906\":1}}],[\"事务首先使用\",{\"1\":{\"906\":1}}],[\"事务结束\",{\"1\":{\"906\":1}}],[\"事务启动时的视图可以认为是静态的\",{\"1\":{\"905\":1}}],[\"事务原理的理解\",{\"1\":{\"904\":1}}],[\"事务原子性回滚\",{\"1\":{\"178\":1}}],[\"事务支持是在引擎层实现的\",{\"1\":{\"904\":1}}],[\"事务就是要保证一组数据库操作\",{\"1\":{\"904\":1}}],[\"事务参与者就会一直卡在提交\",{\"1\":{\"609\":1}}],[\"事务参与者会在正式提交事务之前会一直占用相关的资源\",{\"1\":{\"609\":1}}],[\"事务模式\",{\"1\":{\"608\":1}}],[\"事务模型的思想类似\",{\"1\":{\"186\":1}}],[\"事务协调器\",{\"1\":{\"608\":1}}],[\"事务协调者\",{\"1\":{\"606\":1}}],[\"事务管理器等\",{\"1\":{\"740\":1}}],[\"事务管理器\",{\"1\":{\"606\":1}}],[\"事务管理器名称默认就是transactionmanager\",{\"1\":{\"462\":1}}],[\"事务如何切入\",{\"1\":{\"462\":1}}],[\"事务控制\",{\"1\":{\"462\":1}}],[\"事务日志存储位置\",{\"1\":{\"608\":1}}],[\"事务日志会被删除吗\",{\"1\":{\"186\":1}}],[\"事务日志包含了事务的执行状态\",{\"1\":{\"186\":1}}],[\"事务补偿型方案\",{\"1\":{\"183\":1,\"607\":1}}],[\"事务将不会起作用\",{\"1\":{\"182\":1}}],[\"事务b的逻辑\",{\"1\":{\"179\":1}}],[\"事务b\",{\"1\":{\"179\":2}}],[\"事务b在事务a提交之前获取锁\",{\"1\":{\"80\":1}}],[\"事务a\",{\"1\":{\"179\":2}}],[\"事务行为将按照外部方法的事务来执行\",{\"1\":{\"179\":1}}],[\"事务使用代理对象来控制的\",{\"1\":{\"179\":2}}],[\"事务的原子性确保动作要么全部完成\",{\"1\":{\"962\":1}}],[\"事务的启动方式\",{\"0\":{\"907\":1}}],[\"事务的冲突问题\",{\"0\":{\"855\":1}}],[\"事务的7大传播行为\",{\"1\":{\"178\":1}}],[\"事务的传播行为\",{\"1\":{\"178\":1}}],[\"事务的两大属性\",{\"0\":{\"177\":1}}],[\"事务设置\",{\"1\":{\"80\":1}}],[\"事务\",{\"0\":{\"85\":1,\"497\":1},\"1\":{\"80\":1,\"857\":1,\"892\":1,\"904\":1,\"905\":3,\"931\":2,\"932\":2,\"934\":5}}],[\"项的值\",{\"1\":{\"220\":1}}],[\"项绑定到组件中\",{\"1\":{\"220\":1}}],[\"项识别为\",{\"1\":{\"219\":1}}],[\"项目详情要描述清楚\",{\"1\":{\"1125\":1}}],[\"项目奖等\",{\"1\":{\"1108\":1}}],[\"项目是放在工作区中运行\",{\"1\":{\"1100\":1}}],[\"项目内搜索\",{\"1\":{\"985\":1}}],[\"项目上sqlserver死锁\",{\"1\":{\"959\":1}}],[\"项目上怎么用的分布式锁\",{\"0\":{\"114\":1}}],[\"项目启动的时候就会执行数据库已有的\",{\"1\":{\"887\":1}}],[\"项目流程\",{\"0\":{\"616\":1}}],[\"项目名\",{\"1\":{\"597\":1}}],[\"项目需要有自己的parel如何处置springboot的parent\",{\"1\":{\"546\":1,\"1166\":1}}],[\"项目中\",{\"1\":{\"1012\":1}}],[\"项目中什么地方用到了\",{\"1\":{\"497\":1}}],[\"项目中使用\",{\"0\":{\"368\":1,\"377\":1}}],[\"项目结构\",{\"0\":{\"465\":1}}],[\"项目搭起来后\",{\"1\":{\"261\":1}}],[\"项目地址\",{\"1\":{\"261\":1}}],[\"项目采取\",{\"1\":{\"238\":1}}],[\"项目所有的依赖\",{\"1\":{\"222\":1}}],[\"项目的话\",{\"1\":{\"987\":1}}],[\"项目的依赖之间的关系对我们来说变的更加简单了\",{\"1\":{\"727\":1}}],[\"项目的\",{\"1\":{\"222\":1,\"522\":3}}],[\"项目\",{\"0\":{\"1110\":1},\"1\":{\"222\":3,\"522\":1,\"543\":1,\"589\":1,\"980\":1,\"1081\":1,\"1105\":1,\"1127\":1}}],[\"项目简介\",{\"0\":{\"204\":1}}],[\"项目代码中他做了\",{\"1\":{\"189\":1}}],[\"项目1\",{\"1\":{\"153\":2}}],[\"项目视频地址\",{\"1\":{\"90\":1}}],[\"尚上优选类似多多买菜\",{\"1\":{\"1096\":1}}],[\"尚上优选\",{\"0\":{\"1096\":1}}],[\"尚上优选笔记\",{\"1\":{\"219\":1}}],[\"尚硅谷周阳老师\",{\"1\":{\"552\":1}}],[\"尚硅谷视频地址\",{\"1\":{\"78\":1}}],[\"尚硅谷\",{\"1\":{\"78\":1}}],[\"出错了自己先试试能不能解决\",{\"1\":{\"1150\":1}}],[\"出去一看\",{\"1\":{\"1140\":2}}],[\"出差补贴等\",{\"1\":{\"1108\":1}}],[\"出内存的为输出\",{\"1\":{\"688\":1}}],[\"出来存成文本\",{\"1\":{\"927\":1}}],[\"出来的变量\",{\"1\":{\"686\":1}}],[\"出来一个\",{\"1\":{\"219\":1}}],[\"出生并经过第一次\",{\"1\":{\"385\":1}}],[\"出现的比上面的都早\",{\"1\":{\"688\":1}}],[\"出现登录页面之后\",{\"1\":{\"624\":1}}],[\"出现超时的情况\",{\"1\":{\"576\":1}}],[\"出现写丢失\",{\"1\":{\"290\":1}}],[\"出现异常的话\",{\"1\":{\"186\":1}}],[\"出现问题后哪怕全部token都失效\",{\"1\":{\"70\":1}}],[\"渲染到\",{\"1\":{\"218\":1}}],[\"详细我记录在\",{\"1\":{\"1080\":1}}],[\"详细点的table\",{\"1\":{\"923\":1}}],[\"详细点看\",{\"1\":{\"218\":1}}],[\"详细评论看官方的\",{\"1\":{\"891\":1}}],[\"详细信息看课件\",{\"1\":{\"849\":1}}],[\"详细笔记看脑图\",{\"1\":{\"552\":1}}],[\"详细\",{\"1\":{\"543\":1}}],[\"详情\",{\"0\":{\"39\":1,\"43\":1}}],[\"详情容器\",{\"1\":{\"14\":1}}],[\"数学\",{\"1\":{\"959\":2,\"1164\":1}}],[\"数学成绩\",{\"1\":{\"959\":1}}],[\"数学和加密函数等\",{\"1\":{\"892\":1}}],[\"数学的思想\",{\"1\":{\"648\":1}}],[\"数字是跳转\",{\"0\":{\"1068\":1}}],[\"数字\",{\"1\":{\"802\":2}}],[\"数字越小\",{\"1\":{\"491\":1}}],[\"数值一律用补码来表示和存储\",{\"1\":{\"648\":1}}],[\"数量空闲的线程会在\",{\"1\":{\"363\":1}}],[\"数量的核心线程\",{\"1\":{\"363\":1}}],[\"数量\",{\"1\":{\"220\":2}}],[\"数组里面事务\",{\"1\":{\"935\":1}}],[\"数组和链表\",{\"1\":{\"740\":1}}],[\"数组对象\",{\"1\":{\"725\":1}}],[\"数组的每个位置称为一个桶\",{\"1\":{\"688\":1}}],[\"数组长度为0个\",{\"1\":{\"685\":1}}],[\"数组+链表+红黑树\",{\"1\":{\"674\":1,\"688\":1}}],[\"数组+链表\",{\"1\":{\"674\":1,\"688\":2}}],[\"数组类型的属性\",{\"0\":{\"242\":1}}],[\"数组\",{\"1\":{\"217\":1,\"682\":1,\"686\":1,\"688\":1,\"695\":1,\"703\":1}}],[\"数据迁移\",{\"1\":{\"1079\":1}}],[\"数据冗余\",{\"1\":{\"970\":1}}],[\"数据类型保持绝对一致\",{\"1\":{\"970\":1}}],[\"数据保持一致\",{\"1\":{\"962\":1}}],[\"数据从单库单表迁移多库多表是一件即繁杂又容易出错的事情\",{\"1\":{\"961\":1}}],[\"数据从内核空间\",{\"1\":{\"712\":1}}],[\"数据分布情况等因素\",{\"1\":{\"961\":1}}],[\"数据分散到多个数据库或数据表中\",{\"1\":{\"960\":1}}],[\"数据量是否太\",{\"1\":{\"977\":1}}],[\"数据量\",{\"1\":{\"961\":1}}],[\"数据定义语句\",{\"1\":{\"927\":1}}],[\"数据更新语句\",{\"1\":{\"927\":1}}],[\"数据的特点\",{\"1\":{\"960\":1}}],[\"数据的增删改\",{\"1\":{\"927\":1}}],[\"数据的检索速度\",{\"1\":{\"911\":1}}],[\"数据的可见性和事务的隔离级别有关\",{\"1\":{\"908\":1}}],[\"数据页\",{\"1\":{\"903\":1}}],[\"数据结构简单重设计\",{\"1\":{\"849\":1}}],[\"数据就会流转到下一个stream上\",{\"1\":{\"772\":1}}],[\"数据不一致\",{\"1\":{\"609\":1}}],[\"数据存储是存在一致性问题的\",{\"1\":{\"599\":1}}],[\"数据报表的展现\",{\"1\":{\"589\":1}}],[\"数据校验\",{\"0\":{\"533\":1}}],[\"数据源\",{\"1\":{\"462\":1,\"551\":1,\"1166\":1}}],[\"数据会从二级缓存中获取\",{\"1\":{\"447\":1}}],[\"数据传输量增加\",{\"1\":{\"969\":1}}],[\"数据传输对象\",{\"1\":{\"410\":1}}],[\"数据传输速率\",{\"1\":{\"286\":1}}],[\"数据依赖关系\",{\"1\":{\"301\":1}}],[\"数据依赖性\",{\"1\":{\"293\":1}}],[\"数据也会在新加入的节点中进行平衡\",{\"1\":{\"265\":1}}],[\"数据表肯定会有主键和主键索引\",{\"1\":{\"972\":1}}],[\"数据表中的一行记录\",{\"1\":{\"935\":1}}],[\"数据表\",{\"1\":{\"265\":1}}],[\"数据双向绑定\",{\"1\":{\"220\":1}}],[\"数据错误\",{\"1\":{\"183\":1}}],[\"数据锁定时间可能会很长\",{\"1\":{\"169\":1}}],[\"数据库会新产生一个\",{\"1\":{\"1079\":1}}],[\"数据库主键一定要自增吗\",{\"1\":{\"972\":1}}],[\"数据库很难啊\",{\"1\":{\"970\":1}}],[\"数据库很多请求打过来自己有什么优化方法\",{\"1\":{\"959\":1}}],[\"数据库同时要服务写和读\",{\"1\":{\"970\":1}}],[\"数据库替代传统的关系型数据库\",{\"1\":{\"961\":1}}],[\"数据库分表\",{\"1\":{\"959\":1}}],[\"数据库中还有一些没那么一目了然的概念和设计\",{\"1\":{\"930\":1}}],[\"数据库中使用最为广泛\",{\"1\":{\"916\":1}}],[\"数据库需要合理地控制资源的访问规则\",{\"1\":{\"926\":1}}],[\"数据库锁设计的初衷是处理并发问题\",{\"1\":{\"926\":1}}],[\"数据库优化器可能不会选择使用复合索引\",{\"1\":{\"923\":1}}],[\"数据库底层存储的核心就是基于这些数据模型的\",{\"1\":{\"916\":1}}],[\"数据库技术发展到今天\",{\"1\":{\"916\":1}}],[\"数据库存储大多不适用二叉树\",{\"1\":{\"916\":1}}],[\"数据库索引的内容比较多\",{\"1\":{\"909\":1}}],[\"数据库的默认隔离级别其实就是\",{\"1\":{\"905\":1}}],[\"数据库行为是有所不同的\",{\"1\":{\"905\":1}}],[\"数据库来说\",{\"1\":{\"902\":1}}],[\"数据库重启后\",{\"1\":{\"899\":2}}],[\"数据库等各种来源\",{\"1\":{\"679\":1}}],[\"数据库与用户输入的数据\",{\"1\":{\"624\":1}}],[\"数据库\",{\"0\":{\"977\":1},\"1\":{\"265\":1,\"268\":1,\"961\":1}}],[\"数据库里面它可能用到的回滚记录都必须保留\",{\"1\":{\"906\":1}}],[\"数据库里面会创建一个视图\",{\"1\":{\"905\":1}}],[\"数据库里面\",{\"1\":{\"893\":1}}],[\"数据库里数据是\",{\"1\":{\"220\":1}}],[\"数据库里的数据\",{\"0\":{\"89\":1}}],[\"数据库创建防重表\",{\"1\":{\"173\":1}}],[\"数据库层面\",{\"1\":{\"172\":1,\"932\":1}}],[\"数据库唯一约束\",{\"1\":{\"172\":1}}],[\"数据库乐观锁\",{\"0\":{\"170\":1}}],[\"数据库悲观锁\",{\"0\":{\"169\":1}}],[\"数据被分割成多个较小的数据片段\",{\"1\":{\"103\":1}}],[\"数据一致性问题\",{\"1\":{\"103\":1}}],[\"数据是在请求域中的\",{\"1\":{\"98\":1,\"536\":1}}],[\"数据包可能无法成功传输到目标主机或返回到源主机\",{\"1\":{\"76\":1}}],[\"数据\",{\"1\":{\"65\":1,\"152\":1,\"268\":1,\"582\":1,\"706\":2}}],[\"具有以下含义\",{\"1\":{\"990\":1}}],[\"具有\",{\"1\":{\"899\":2}}],[\"具有下面这些优点\",{\"1\":{\"713\":1}}],[\"具有指令重排的特性\",{\"1\":{\"302\":1,\"779\":1}}],[\"具有很大的灵活性\",{\"1\":{\"216\":1}}],[\"具体怎么配置goolge就好\",{\"1\":{\"1097\":1}}],[\"具体选择哪种方法取决于实际需求\",{\"1\":{\"960\":1}}],[\"具体选择要看开发的场景需求\",{\"1\":{\"641\":1}}],[\"具体语法如下\",{\"1\":{\"959\":1}}],[\"具体所有\",{\"1\":{\"950\":1}}],[\"具体续期的代码在tokenservice类下的verifytoken\",{\"1\":{\"890\":1}}],[\"具体原理看课件\",{\"1\":{\"862\":1}}],[\"具体代码看文件\",{\"1\":{\"854\":1}}],[\"具体操作看\",{\"1\":{\"1160\":1}}],[\"具体操作\",{\"0\":{\"810\":1},\"1\":{\"868\":1}}],[\"具体在这两个类中也没看到重写\",{\"1\":{\"743\":1,\"1101\":1}}],[\"具体可以看下面的笔记\",{\"1\":{\"960\":1}}],[\"具体可以看下\",{\"1\":{\"723\":1}}],[\"具体可为两种情况\",{\"1\":{\"722\":1}}],[\"具体可检测的内容参考下面的链接\",{\"1\":{\"567\":1}}],[\"具体到jvm学类加载器\",{\"1\":{\"688\":1}}],[\"具体保证线程安全的方式\",{\"1\":{\"641\":1}}],[\"具体使用场景是什么\",{\"1\":{\"635\":1}}],[\"具体为什么会这样\",{\"1\":{\"625\":1}}],[\"具体落地实现是raft算法是c理论的解决方案\",{\"1\":{\"571\":1}}],[\"具体版本选择可以看\",{\"1\":{\"554\":1}}],[\"具体配置方式可能因你所使用的框架或工具而异\",{\"1\":{\"539\":1}}],[\"具体见上面代码\",{\"1\":{\"439\":1}}],[\"具体步骤\",{\"1\":{\"427\":1}}],[\"具体的生成逻辑作者重写了\",{\"1\":{\"877\":1}}],[\"具体的方法指向的是\",{\"1\":{\"765\":1}}],[\"具体的数据库厂商或第三方开发者可以通过实现这些接口来提供特定数据库的支持\",{\"1\":{\"740\":1}}],[\"具体的实例对象是在堆中存放\",{\"1\":{\"722\":1}}],[\"具体的一些写法看官网\",{\"1\":{\"403\":1}}],[\"具体的去搜\",{\"1\":{\"45\":1}}],[\"具体流程\",{\"1\":{\"379\":1,\"451\":1}}],[\"具体一些命令怎么用\",{\"1\":{\"267\":1}}],[\"具体想体验深一点可以下载ali的model有几个jsp页面和一个配置类\",{\"1\":{\"191\":1}}],[\"具体结合\",{\"1\":{\"157\":1}}],[\"具体实现细节可以参考\",{\"1\":{\"153\":1}}],[\"具体验证f12\",{\"1\":{\"141\":1}}],[\"具体写的controller应该是提供给别的服务进行调用的\",{\"1\":{\"126\":1}}],[\"具体缓存的是某个数据\",{\"1\":{\"115\":1}}],[\"具体\",{\"1\":{\"112\":1,\"709\":1,\"1083\":1}}],[\"具体来说\",{\"1\":{\"103\":1,\"157\":1,\"538\":1,\"543\":1,\"679\":1,\"899\":1,\"906\":1,\"1012\":1,\"1082\":1}}],[\"具体书签搜记录\",{\"1\":{\"76\":1}}],[\"具体看官方文档\",{\"1\":{\"1161\":1}}],[\"具体看官网~\",{\"1\":{\"417\":1}}],[\"具体看官网\",{\"1\":{\"223\":1}}],[\"具体看官网文档\",{\"1\":{\"120\":1}}],[\"具体看上面\",{\"1\":{\"959\":1}}],[\"具体看课件\",{\"1\":{\"865\":1}}],[\"具体看图\",{\"1\":{\"809\":1}}],[\"具体看lambda表达式\",{\"1\":{\"688\":1}}],[\"具体看java\",{\"1\":{\"688\":1}}],[\"具体看acwing\",{\"1\":{\"1085\":1}}],[\"具体看api文档\",{\"1\":{\"687\":1}}],[\"具体看ali官网给的文档就行\",{\"1\":{\"126\":1}}],[\"具体看别人笔记\",{\"1\":{\"602\":1}}],[\"具体看项目体现\",{\"1\":{\"554\":1}}],[\"具体看更详细的依赖\",{\"1\":{\"554\":1}}],[\"具体看自动配置\",{\"1\":{\"477\":1}}],[\"具体看github官网\",{\"1\":{\"465\":1}}],[\"具体看下面例子\",{\"1\":{\"292\":1}}],[\"具体看基础篇\",{\"1\":{\"267\":1}}],[\"具体看文档\",{\"1\":{\"216\":1}}],[\"具体看title\",{\"1\":{\"161\":1}}],[\"具体看如下类\",{\"1\":{\"123\":1}}],[\"具体看一下自己的代码\",{\"1\":{\"87\":1}}],[\"具体看\",{\"1\":{\"76\":1,\"125\":1,\"158\":1,\"202\":1,\"229\":1,\"779\":1}}],[\"变基和合并都是常见的代码合并方式\",{\"1\":{\"990\":1}}],[\"变基通常使用以下命令\",{\"1\":{\"990\":1}}],[\"变基的结果是\",{\"1\":{\"990\":1}}],[\"变基会将当前分支的修改在提交历史记录中移动到指定分支的后面\",{\"1\":{\"990\":1}}],[\"变基是将当前分支的修改\",{\"1\":{\"990\":1}}],[\"变基操作有可能会导致冲突\",{\"1\":{\"990\":1}}],[\"变基操作会将一系列的提交按照顺序一个一个地应用到另一个分支上\",{\"1\":{\"990\":1}}],[\"变基\",{\"1\":{\"990\":2}}],[\"变更的表刚好有长事务在执行\",{\"1\":{\"928\":1}}],[\"变更权限的指令\",{\"1\":{\"786\":1}}],[\"变成\",{\"1\":{\"216\":1,\"268\":1,\"372\":1}}],[\"变量的方式影响面更大\",{\"1\":{\"927\":1}}],[\"变量的引用\",{\"1\":{\"662\":1}}],[\"变量初始化\",{\"1\":{\"780\":1}}],[\"变量分为属性\",{\"1\":{\"686\":1}}],[\"变量不能用static修饰\",{\"1\":{\"505\":1}}],[\"变量名\",{\"1\":{\"436\":1}}],[\"变量时\",{\"1\":{\"156\":1}}],[\"变量\",{\"0\":{\"662\":1},\"1\":{\"88\":1,\"1074\":6}}],[\"变量等于旧值就允许更新\",{\"0\":{\"83\":1}}],[\"函数将逐个检查列\",{\"1\":{\"959\":1}}],[\"函数的示例用法\",{\"1\":{\"959\":1}}],[\"函数用于处理\",{\"1\":{\"959\":1}}],[\"函数需要接受date参数\",{\"1\":{\"951\":1}}],[\"函数来获取月份\",{\"1\":{\"951\":1}}],[\"函数返回两个日期之间的天数\",{\"0\":{\"950\":1}}],[\"函数不支持\",{\"1\":{\"923\":1}}],[\"函数式接口\",{\"1\":{\"770\":1}}],[\"函数型接口\",{\"1\":{\"688\":1}}],[\"函数\",{\"1\":{\"217\":1,\"219\":1}}],[\"函数声明\",{\"1\":{\"216\":1}}],[\"函数表达式\",{\"1\":{\"216\":1}}],[\"局部内部类\",{\"1\":{\"686\":1}}],[\"局部声明一个组件\",{\"1\":{\"221\":1}}],[\"局部\",{\"1\":{\"216\":1,\"221\":1}}],[\"局部变量要先赋值再用\",{\"1\":{\"686\":1}}],[\"局部变量不能\",{\"1\":{\"686\":1}}],[\"局部变量可以\",{\"1\":{\"646\":1}}],[\"局部变量是基本类型创建在哪\",{\"1\":{\"389\":1}}],[\"局部变量表\",{\"1\":{\"388\":1}}],[\"局部变量\",{\"1\":{\"88\":2,\"686\":3}}],[\"声明需要监听的所有队列\",{\"1\":{\"830\":1}}],[\"声明时就已经初始化\",{\"1\":{\"725\":1}}],[\"声明是base\",{\"1\":{\"697\":1}}],[\"声明真实对象和代理对象的共同接口\",{\"1\":{\"688\":1}}],[\"声明肯定都先于构造器\",{\"1\":{\"658\":1}}],[\"声明接口的每一个方法都是调用哪个远程服务的哪个请求\",{\"1\":{\"576\":1}}],[\"声明式事务\",{\"1\":{\"497\":1}}],[\"声明式\",{\"1\":{\"228\":1}}],[\"声明常量\",{\"1\":{\"216\":1}}],[\"声明的变量有严格局部作用域\",{\"1\":{\"216\":1}}],[\"声明的变量往往会越域\",{\"1\":{\"216\":1}}],[\"声明个map到最外圈\",{\"1\":{\"103\":1}}],[\"快\",{\"1\":{\"956\":2}}],[\"快照\",{\"0\":{\"935\":1}}],[\"快排\",{\"0\":{\"1085\":1},\"1\":{\"685\":1}}],[\"快很多\",{\"1\":{\"494\":1}}],[\"快捷方式可以绑定快捷键\",{\"1\":{\"1037\":1}}],[\"快捷的ajax\",{\"1\":{\"460\":1}}],[\"快捷键里把所有都删了\",{\"1\":{\"1005\":1}}],[\"快捷键供参考\",{\"1\":{\"1005\":1}}],[\"快捷键\",{\"1\":{\"62\":1,\"996\":1,\"1041\":1}}],[\"快把\",{\"1\":{\"309\":1}}],[\"快速排序当我们把基准值设置在左边时\",{\"1\":{\"1085\":1}}],[\"快速排序\",{\"1\":{\"1085\":1}}],[\"快速生成for循环\",{\"0\":{\"1062\":1}}],[\"快速定位到修改过的地方的快捷键\",{\"0\":{\"1045\":1}}],[\"快速定位报错原因\",{\"0\":{\"526\":1}}],[\"快速打开环境变量\",{\"1\":{\"1039\":1}}],[\"快速连耳机\",{\"0\":{\"1030\":1}}],[\"快速上手\",{\"1\":{\"223\":1}}],[\"快速搭建脚手架工程\",{\"1\":{\"222\":1}}],[\"快速入门\",{\"1\":{\"215\":1}}],[\"`mktemp\",{\"1\":{\"1005\":1}}],[\"`score`\",{\"1\":{\"973\":4}}],[\"`k`\",{\"1\":{\"934\":1}}],[\"`t`\",{\"1\":{\"934\":1}}],[\"`t1`\",{\"1\":{\"929\":2}}],[\"`tuser`\",{\"1\":{\"922\":1}}],[\"`d`\",{\"1\":{\"925\":1}}],[\"`geek`\",{\"1\":{\"925\":1}}],[\"`cus\",{\"1\":{\"973\":4}}],[\"`cb`\",{\"1\":{\"925\":1}}],[\"`ca`\",{\"1\":{\"925\":1}}],[\"`c`=\",{\"1\":{\"923\":2}}],[\"`c`\",{\"1\":{\"923\":3,\"925\":5}}],[\"`com\",{\"1\":{\"517\":1}}],[\"`b`=\",{\"1\":{\"923\":1}}],[\"`b`\",{\"1\":{\"923\":3,\"925\":3}}],[\"`a`=\",{\"1\":{\"923\":2}}],[\"`a`\",{\"1\":{\"923\":3,\"925\":3}}],[\"`age`\",{\"1\":{\"922\":2}}],[\"`name\",{\"1\":{\"922\":1}}],[\"`name`\",{\"1\":{\"922\":2,\"973\":4}}],[\"`ismale`\",{\"1\":{\"922\":1}}],[\"`id\",{\"1\":{\"922\":3}}],[\"`id`\",{\"1\":{\"922\":2,\"934\":2,\"973\":4}}],[\"`http\",{\"1\":{\"883\":1}}],[\"`pms\",{\"1\":{\"257\":1}}],[\"`<button\",{\"1\":{\"221\":2}}],[\"`我是$\",{\"1\":{\"216\":1}}],[\"`\",{\"1\":{\"215\":1,\"216\":1}}],[\"`java\",{\"1\":{\"125\":1}}],[\"交通补贴\",{\"1\":{\"1108\":1}}],[\"交叉连接的语法格式如下\",{\"1\":{\"937\":1}}],[\"交叉连接\",{\"1\":{\"937\":1}}],[\"交换器\",{\"1\":{\"823\":2}}],[\"交换机\",{\"1\":{\"77\":1}}],[\"交互命令的接口\",{\"1\":{\"790\":1}}],[\"交互模式\",{\"1\":{\"210\":1,\"212\":1}}],[\"交替做多件事情\",{\"1\":{\"675\":1}}],[\"拉勾网\",{\"1\":{\"1128\":1}}],[\"拉取\",{\"1\":{\"990\":1}}],[\"拉取指定的版本\",{\"1\":{\"790\":1}}],[\"拉取指定的\",{\"1\":{\"210\":1}}],[\"拉不下来\",{\"1\":{\"981\":1}}],[\"拉出一个链表\",{\"1\":{\"914\":1}}],[\"拉去mysql镜像\",{\"1\":{\"210\":1}}],[\"拉镜像\",{\"1\":{\"210\":1}}],[\"外物的影响\",{\"0\":{\"1148\":1},\"1\":{\"1137\":1}}],[\"外的io\",{\"1\":{\"975\":1}}],[\"外语简称\",{\"1\":{\"664\":1}}],[\"外文名\",{\"1\":{\"664\":1}}],[\"外面\",{\"1\":{\"210\":1,\"789\":1}}],[\"外部类\",{\"1\":{\"668\":1}}],[\"外部\",{\"1\":{\"210\":1}}],[\"外部方法的事务会继续执行\",{\"1\":{\"179\":1}}],[\"容量就是1byte\",{\"1\":{\"1092\":1}}],[\"容量\",{\"1\":{\"687\":1}}],[\"容量小\",{\"1\":{\"685\":1}}],[\"容量不够数量来凑\",{\"1\":{\"265\":1}}],[\"容错等\",{\"1\":{\"563\":1}}],[\"容易导致程序出现非预期行为\",{\"1\":{\"930\":1}}],[\"容易忘\",{\"1\":{\"595\":1}}],[\"容易忽略\",{\"1\":{\"505\":1,\"1041\":1}}],[\"容易计算\",{\"1\":{\"132\":1}}],[\"容纳的话\",{\"1\":{\"385\":1}}],[\"容器等\",{\"1\":{\"1041\":1}}],[\"容器负责注入依赖\",{\"1\":{\"884\":1}}],[\"容器可\",{\"1\":{\"789\":1}}],[\"容器用来加载和管理业务类\",{\"1\":{\"737\":1}}],[\"容器处理\",{\"1\":{\"737\":1}}],[\"容器在实例化一个\",{\"1\":{\"543\":1}}],[\"容器会根据\",{\"1\":{\"738\":1}}],[\"容器会将请求转发到具体的\",{\"1\":{\"737\":1}}],[\"容器会设置一个默认值为\",{\"1\":{\"543\":1}}],[\"容器会按照依赖关系将这些\",{\"1\":{\"543\":1}}],[\"容器会创建一个\",{\"1\":{\"543\":1}}],[\"容器会在实例化\",{\"1\":{\"543\":1}}],[\"容器本质是一个大工厂\",{\"1\":{\"498\":1}}],[\"容器中的binding\",{\"1\":{\"829\":1}}],[\"容器中\",{\"1\":{\"543\":1,\"625\":1}}],[\"容器中才能用\",{\"1\":{\"507\":1}}],[\"容器中没有这个名字\",{\"1\":{\"483\":1}}],[\"容器中有这个类型组件\",{\"1\":{\"483\":1}}],[\"容器\",{\"1\":{\"211\":1,\"737\":3,\"738\":1}}],[\"容器名称|容器id\",{\"1\":{\"210\":1}}],[\"容器隔离\",{\"1\":{\"210\":1}}],[\"容器的控制\",{\"1\":{\"884\":1}}],[\"容器的话主要有两个\",{\"1\":{\"486\":1}}],[\"容器的\",{\"1\":{\"210\":1,\"789\":1,\"790\":1}}],[\"散列\",{\"1\":{\"208\":1}}],[\"轮询库然后\",{\"1\":{\"887\":1}}],[\"轮询\",{\"1\":{\"208\":1,\"574\":1}}],[\"天天都在用\",{\"1\":{\"1164\":1}}],[\"天天都在用的软硬件\",{\"0\":{\"1162\":1}}],[\"天上是不会掉馅饼的\",{\"1\":{\"1141\":1}}],[\"天眼查\",{\"1\":{\"1116\":1}}],[\"天津\",{\"1\":{\"1106\":1}}],[\"天若识字\",{\"1\":{\"1037\":1}}],[\"天下文章一堆抄\",{\"1\":{\"581\":1}}],[\"天生带着他\",{\"1\":{\"576\":1}}],[\"天猫\",{\"1\":{\"206\":1}}],[\"天然幂等性\",{\"0\":{\"165\":1}}],[\"京东和当当经常有活动的\",{\"1\":{\"1145\":1}}],[\"京东\",{\"1\":{\"206\":1}}],[\"售产品和服务\",{\"1\":{\"206\":1}}],[\"销售属性\",{\"1\":{\"244\":1,\"252\":1}}],[\"销售自营商品给客户\",{\"1\":{\"203\":1}}],[\"销毁前可能自己配置了一些销毁之前的方法\",{\"1\":{\"489\":1}}],[\"销毁\",{\"1\":{\"489\":1,\"543\":1}}],[\"销毁完成\",{\"1\":{\"225\":1}}],[\"销毁之前\",{\"1\":{\"225\":1}}],[\"销毁指定实例\",{\"1\":{\"124\":1}}],[\"销毁这个bean再重新注册进来\",{\"1\":{\"124\":1}}],[\"谷粒商城是一个b2c模式的电商平台\",{\"1\":{\"203\":1}}],[\"伪完结\",{\"1\":{\"202\":1}}],[\"幂等性处理\",{\"1\":{\"202\":1}}],[\"随身携带工作环境\",{\"1\":{\"1160\":1}}],[\"随意\",{\"1\":{\"1005\":1}}],[\"随时可以提交事务\",{\"1\":{\"900\":1}}],[\"随着外部类的加载初始化而初始化\",{\"1\":{\"779\":1}}],[\"随着互联网三高架构\",{\"1\":{\"169\":1}}],[\"随机选其中一条记录来加\",{\"1\":{\"932\":1}}],[\"随机数等\",{\"1\":{\"539\":1,\"1083\":1}}],[\"随机码\",{\"1\":{\"202\":1}}],[\"周计划\",{\"1\":{\"1142\":1}}],[\"周简历石沉大海是很正常的\",{\"1\":{\"1129\":1}}],[\"周的时间\",{\"1\":{\"1129\":1}}],[\"周志明的软件架构课\",{\"1\":{\"962\":1}}],[\"周\",{\"1\":{\"201\":1}}],[\"表结构比较稳定的情况下才会考虑这种做法\",{\"1\":{\"970\":1}}],[\"表结构定义类似这样的\",{\"1\":{\"925\":1}}],[\"表就基本能够满足为了几年内你的业务的需求\",{\"1\":{\"961\":1}}],[\"表列名为准\",{\"1\":{\"947\":1}}],[\"表的语句\",{\"1\":{\"934\":1}}],[\"表锁一般是在数据库引擎不支持行锁的时候才会被用到的\",{\"1\":{\"929\":1}}],[\"表锁是最常用的处理并发的方式\",{\"1\":{\"928\":1}}],[\"表锁的语法是\",{\"1\":{\"928\":1}}],[\"表级锁\",{\"0\":{\"928\":1}}],[\"表级锁和行锁三类\",{\"1\":{\"926\":1}}],[\"表记录\",{\"1\":{\"925\":1}}],[\"表文件大小不变\",{\"1\":{\"919\":1}}],[\"表中已经存在\",{\"1\":{\"959\":1}}],[\"表中\",{\"1\":{\"917\":1,\"928\":1}}],[\"表中有字段\",{\"1\":{\"917\":1}}],[\"表都是根据主键顺序以索引的形式存放的\",{\"1\":{\"917\":1}}],[\"表名\",{\"1\":{\"895\":1,\"938\":2}}],[\"表单用户信息\",{\"1\":{\"626\":1}}],[\"表关联\",{\"1\":{\"618\":1}}],[\"表明当前属性是调用select指定的方法查出的结果\",{\"1\":{\"423\":1}}],[\"表明你知道啥是指令重排\",{\"1\":{\"329\":1}}],[\"表\",{\"1\":{\"268\":1,\"893\":1,\"908\":1,\"919\":1,\"959\":2,\"961\":1,\"1084\":1}}],[\"表达式可以返回空匹配项\",{\"1\":{\"1017\":1}}],[\"表达式进行了特殊处理\",{\"1\":{\"743\":1,\"1101\":1}}],[\"表达式作为参数\",{\"1\":{\"743\":1,\"1101\":1}}],[\"表达式\",{\"0\":{\"201\":1,\"940\":1},\"1\":{\"229\":1,\"522\":1,\"594\":2,\"743\":1,\"1101\":1}}],[\"表示计划招聘的人员的个数\",{\"1\":{\"1103\":1}}],[\"表示当前脚本的名称\",{\"1\":{\"1041\":1}}],[\"表示当前访问系统的用户\",{\"1\":{\"620\":1}}],[\"表示仅返回路径\",{\"1\":{\"1041\":1}}],[\"表示仅返回驱动器号和路径\",{\"1\":{\"1041\":1}}],[\"表示目录\",{\"1\":{\"1037\":2}}],[\"表示软链\",{\"1\":{\"998\":1}}],[\"表示查询所有列\",{\"1\":{\"959\":1}}],[\"表示匹配任意单个字符\",{\"1\":{\"959\":1}}],[\"表示这个版本是已经提交了的事务生成的\",{\"1\":{\"935\":1}}],[\"表示这个版本是已提交的事务或者是当前事务自己生成的\",{\"1\":{\"935\":1}}],[\"表示这个版本是由还没提交的事务生成的\",{\"1\":{\"935\":1}}],[\"表示这个版本是由将来启动的事务生成的\",{\"1\":{\"935\":1}}],[\"表示这个\",{\"1\":{\"934\":1}}],[\"表示这个语句执行过程中扫描了多少行\",{\"1\":{\"897\":1}}],[\"表示开启这个逻辑\",{\"1\":{\"932\":1}}],[\"表示mysql需要进行排序操作\",{\"1\":{\"923\":1}}],[\"表示每次事务的\",{\"1\":{\"902\":2}}],[\"表示请求url公共部分\",{\"1\":{\"880\":1}}],[\"表示他们解答\",{\"1\":{\"849\":1}}],[\"表示消息队列服务器实体\",{\"1\":{\"823\":1}}],[\"表示一批交换器\",{\"1\":{\"823\":1}}],[\"表示一个从消息队列中取得消息的客户端应用程序\",{\"1\":{\"823\":1}}],[\"表示一个普通的反斜杠字符\",{\"1\":{\"61\":1}}],[\"表示记录日志信息\",{\"1\":{\"810\":1}}],[\"表示使用名为\",{\"1\":{\"790\":1}}],[\"表示使用延迟加载\",{\"1\":{\"428\":1}}],[\"表示为容器指定一个名称\",{\"1\":{\"790\":1}}],[\"表示分配一个伪终端\",{\"1\":{\"790\":1}}],[\"表示在前台\",{\"1\":{\"790\":1}}],[\"表示该类型的对象是有限的几个\",{\"1\":{\"779\":1}}],[\"表示该类在项目所有类中可以被导入\",{\"1\":{\"668\":1}}],[\"表示数的范围的大和小\",{\"1\":{\"702\":1}}],[\"表示数组属性只有一个值\",{\"1\":{\"242\":1}}],[\"表示string可以比较大小\",{\"1\":{\"687\":1}}],[\"表示字符串是支持序列化的\",{\"1\":{\"687\":1}}],[\"表示枚举值的顺序\",{\"1\":{\"671\":1}}],[\"表示\",{\"1\":{\"648\":2,\"899\":1}}],[\"表示启用gateway的负载均衡功能\",{\"1\":{\"591\":1}}],[\"表示自定义参数\",{\"1\":{\"547\":1}}],[\"表示任意目录下的以\",{\"1\":{\"454\":1}}],[\"表示的是任意目录\",{\"1\":{\"454\":1}}],[\"表示将一个int类型的常量2\",{\"1\":{\"388\":1}}],[\"表示将一个int类型的常量4\",{\"1\":{\"388\":1}}],[\"表示将一个int类型的常量5\",{\"1\":{\"388\":1}}],[\"表示将变量2\",{\"1\":{\"388\":1}}],[\"表示将这个int值从栈中取出\",{\"1\":{\"388\":3}}],[\"表示非公平锁\",{\"1\":{\"317\":1}}],[\"表示公平锁\",{\"1\":{\"317\":1}}],[\"表示商品的库存数量为10个\",{\"1\":{\"309\":1}}],[\"表示它运行在一个新的事务\",{\"1\":{\"179\":1}}],[\"表示它运行在一个事务\",{\"1\":{\"179\":1}}],[\"表示和老师同样的版本还会出现和老师同样的问题\",{\"1\":{\"107\":1}}],[\"表示水平制表符\",{\"1\":{\"61\":1}}],[\"表示回车\",{\"1\":{\"61\":1}}],[\"表示换行\",{\"1\":{\"61\":1}}],[\"表示超时时间为60秒\",{\"1\":{\"48\":1}}],[\"点对点\",{\"1\":{\"817\":1,\"823\":1}}],[\"点对点消息通信\",{\"1\":{\"817\":1}}],[\"点来概括一下\",{\"1\":{\"713\":1}}],[\"点\",{\"1\":{\"216\":1}}],[\"点一下要1s后才能再点\",{\"1\":{\"199\":1}}],[\"点击服务\",{\"1\":{\"1161\":1}}],[\"点击\",{\"1\":{\"537\":2}}],[\"点击了\",{\"1\":{\"220\":1}}],[\"点击光标多个\",{\"1\":{\"215\":1}}],[\"点击qq按钮\",{\"1\":{\"135\":1}}],[\"点击获取验证码后\",{\"1\":{\"128\":1}}],[\"沿用了外网的域名\",{\"1\":{\"198\":1}}],[\"续断\",{\"1\":{\"197\":1}}],[\"续期\",{\"1\":{\"115\":1}}],[\"续期不想做了就把锁时间搞长一点\",{\"1\":{\"111\":1}}],[\"续期问题面试杭州问过\",{\"1\":{\"64\":1}}],[\"仅对该用户有效\",{\"1\":{\"998\":1}}],[\"仅用1代表代码行\",{\"1\":{\"956\":1}}],[\"仅仅扫描了一条语句\",{\"1\":{\"897\":1}}],[\"仅仅是提供一种访问在弱引用状态下对象的途径\",{\"1\":{\"636\":1}}],[\"仅仅是以上功能还不行\",{\"1\":{\"598\":1}}],[\"仅有的线程安全实现\",{\"1\":{\"640\":1}}],[\"仅限第一次使用\",{\"1\":{\"197\":2}}],[\"仅供参考\",{\"1\":{\"182\":1}}],[\"折腾了半天结果发现有大佬开发的一键脚本\",{\"1\":{\"1157\":1}}],[\"折腾半天\",{\"1\":{\"865\":1}}],[\"折中处理\",{\"1\":{\"814\":1}}],[\"折线图对存储在\",{\"1\":{\"736\":1}}],[\"折\",{\"1\":{\"197\":2}}],[\"验签\",{\"1\":{\"194\":1}}],[\"验证权限\",{\"1\":{\"897\":1}}],[\"验证jwt令牌的有效性和过期时间\",{\"1\":{\"890\":1}}],[\"验证的话可以有用杀死进程的方式\",{\"1\":{\"837\":1}}],[\"验证长度\",{\"1\":{\"802\":2}}],[\"验证是否设置成功\",{\"1\":{\"797\":1,\"983\":1}}],[\"验证过程包括文件格式验证\",{\"1\":{\"679\":1}}],[\"验证当前访问系统的是不是本系统的用户\",{\"1\":{\"615\":1}}],[\"验证挂载生效\",{\"1\":{\"211\":1}}],[\"验证\",{\"1\":{\"156\":1,\"210\":1,\"679\":1}}],[\"验证码生成使用了google\",{\"1\":{\"877\":1}}],[\"验证码\",{\"1\":{\"134\":1,\"848\":1,\"878\":1}}],[\"验证码倒计时\",{\"0\":{\"128\":1}}],[\"验证令牌有效期\",{\"1\":{\"67\":1}}],[\"雷神用了这个\",{\"1\":{\"525\":1}}],[\"雷神b站教程\",{\"1\":{\"203\":1}}],[\"雷神说这个不好使\",{\"1\":{\"202\":1}}],[\"雷神自己根据\",{\"1\":{\"191\":1}}],[\"雷神写了demo\",{\"1\":{\"153\":1}}],[\"稍微变动就变\",{\"1\":{\"190\":1}}],[\"侵入业务代码\",{\"1\":{\"186\":1}}],[\"节省存储空间或在网络传输中降低带宽消耗的情况\",{\"1\":{\"1081\":1}}],[\"节省内存\",{\"1\":{\"688\":1}}],[\"节省资源\",{\"1\":{\"186\":1}}],[\"节约时间\",{\"1\":{\"557\":1}}],[\"节点流是直接怼到数据的\",{\"1\":{\"688\":1}}],[\"节点流\",{\"1\":{\"688\":1}}],[\"节点宕机\",{\"1\":{\"572\":1}}],[\"节点2由于分区无法更新该值\",{\"1\":{\"572\":1}}],[\"节点间的网络连接通信正常的话\",{\"1\":{\"572\":1}}],[\"节点被分配一个哈希值\",{\"1\":{\"103\":1}}],[\"节点上\",{\"1\":{\"103\":3}}],[\"节点上的技术\",{\"1\":{\"103\":1}}],[\"释放了\",{\"1\":{\"929\":1}}],[\"释放锁\",{\"1\":{\"906\":2}}],[\"释放资源\",{\"1\":{\"603\":1}}],[\"释放其占用的内存空间\",{\"1\":{\"385\":1}}],[\"释放停车位\",{\"1\":{\"342\":1,\"343\":1}}],[\"释放信号量\",{\"1\":{\"342\":2}}],[\"释放\",{\"1\":{\"186\":2,\"326\":2,\"932\":2}}],[\"取date类型字段为\",{\"0\":{\"951\":1}}],[\"取得\",{\"1\":{\"921\":2}}],[\"取满足条件的第一行\",{\"1\":{\"897\":1}}],[\"取代的重要原因之一\",{\"1\":{\"892\":1,\"904\":1}}],[\"取自极客时间专栏\",{\"1\":{\"891\":1}}],[\"取top\",{\"1\":{\"869\":1}}],[\"取两个集合的某个字段的并集\",{\"1\":{\"776\":1}}],[\"取余\",{\"1\":{\"739\":1,\"961\":2}}],[\"取余的操作来实现\",{\"1\":{\"739\":1}}],[\"取余数\",{\"1\":{\"681\":1}}],[\"取决于数据块的大小\",{\"1\":{\"916\":1}}],[\"取决于系统重要性\",{\"1\":{\"902\":1}}],[\"取决于系统的重要性\",{\"1\":{\"901\":1}}],[\"取决于它的运算类型\",{\"1\":{\"685\":1}}],[\"取决于具体的需求和应用场景\",{\"1\":{\"156\":1}}],[\"取值的正确方式$\",{\"1\":{\"440\":1}}],[\"取值\",{\"1\":{\"438\":1}}],[\"取而代之的是使用\",{\"1\":{\"383\":1}}],[\"取巧\",{\"0\":{\"256\":1}}],[\"取的是系统变量\",{\"1\":{\"227\":1}}],[\"取\",{\"1\":{\"227\":1,\"776\":1}}],[\"取消执行\",{\"1\":{\"186\":1}}],[\"取消\",{\"1\":{\"186\":2}}],[\"阶段可以是\",{\"1\":{\"722\":1}}],[\"阶段完成之后挂掉的话\",{\"1\":{\"609\":1}}],[\"阶段出现问题的概率是比较小的\",{\"1\":{\"186\":1}}],[\"阶段出现问题的话\",{\"1\":{\"186\":1}}],[\"阶段的逻辑\",{\"1\":{\"186\":1}}],[\"阶段失败的话\",{\"1\":{\"186\":1}}],[\"阶段失败了怎么办呢\",{\"1\":{\"186\":1}}],[\"阶段预留的转账资金\",{\"1\":{\"186\":1}}],[\"阶段预留的业务资源\",{\"1\":{\"186\":2}}],[\"阶段就会执行真正的扣钱操作\",{\"1\":{\"186\":1}}],[\"阶段执行成功的话\",{\"1\":{\"186\":1}}],[\"阶段执行成功就会执行\",{\"1\":{\"186\":1}}],[\"阶段会处理\",{\"1\":{\"186\":1}}],[\"阶段\",{\"1\":{\"186\":6,\"560\":1,\"609\":1,\"722\":1}}],[\"尝试执行\",{\"1\":{\"186\":1}}],[\"尝试\",{\"1\":{\"186\":2}}],[\"依旧是视频+书+写代码\",{\"1\":{\"1150\":1}}],[\"依旧会对该微服务的信息进行保存\",{\"1\":{\"569\":1}}],[\"依托社区和团长社交关系实现生鲜商品流通的新零售模式\",{\"1\":{\"1096\":1}}],[\"依次来巩固你学的技术\",{\"1\":{\"1150\":1}}],[\"依次执行\",{\"1\":{\"935\":1}}],[\"依次取出来\",{\"1\":{\"901\":1}}],[\"依次看下每个组件的作用\",{\"1\":{\"892\":1}}],[\"依靠的就是底层的unsafe类\",{\"1\":{\"304\":1}}],[\"依靠数据库或者存储资源层面的事务\",{\"1\":{\"184\":1}}],[\"依赖项\",{\"1\":{\"1014\":1}}],[\"依赖中的\",{\"1\":{\"1010\":1}}],[\"依赖第一步\",{\"1\":{\"1003\":1}}],[\"依赖就好了\",{\"1\":{\"740\":1}}],[\"依赖里面修改一些\",{\"1\":{\"740\":1}}],[\"依赖注入\",{\"1\":{\"688\":1}}],[\"依赖注销就好了\",{\"1\":{\"227\":1}}],[\"依赖于\",{\"1\":{\"543\":1}}],[\"依赖于另一个还未创建的\",{\"1\":{\"543\":1}}],[\"依赖于另一个\",{\"1\":{\"543\":1}}],[\"依赖\",{\"1\":{\"499\":1,\"616\":1,\"621\":1,\"871\":1,\"1010\":1}}],[\"依赖管理\",{\"0\":{\"475\":1},\"1\":{\"474\":1,\"476\":1}}],[\"依赖发现\",{\"1\":{\"178\":1}}],[\"支持索引\",{\"1\":{\"923\":1}}],[\"支持的功能也不同\",{\"1\":{\"892\":1}}],[\"支持\",{\"1\":{\"892\":1,\"906\":1}}],[\"支持多个用户同时登录和操作\",{\"1\":{\"785\":1}}],[\"支持多种协议\",{\"1\":{\"713\":1}}],[\"支持对多种日志类型进行处理\",{\"1\":{\"736\":1}}],[\"支持泛型的返回值\",{\"1\":{\"687\":1}}],[\"支持nacos的动态刷新功能\",{\"1\":{\"598\":1}}],[\"支持在任何应用\",{\"1\":{\"594\":1}}],[\"支持分布式系统中的外部化配置\",{\"1\":{\"594\":1}}],[\"支持两种模式开发\",{\"1\":{\"466\":1}}],[\"支持基本的增删改查\",{\"1\":{\"465\":1}}],[\"支持定时及周期性任务执行\",{\"1\":{\"365\":1}}],[\"支持定时任务线程池\",{\"1\":{\"202\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"22\":1}}],[\"支付这四个功能为该项目最折磨人功能\",{\"1\":{\"261\":1}}],[\"支付成功后url\",{\"1\":{\"192\":1}}],[\"支付宝沙箱每周日12\",{\"1\":{\"261\":1}}],[\"支付宝\",{\"1\":{\"196\":1}}],[\"支付宝服务器异步回调\",{\"1\":{\"194\":1}}],[\"支付宝会悄悄的给我们发送一个请求\",{\"1\":{\"192\":1}}],[\"支付宝私钥是肯定不知道的\",{\"1\":{\"190\":1}}],[\"支付宝告诉你有没有支付成功\",{\"1\":{\"183\":1,\"607\":1}}],[\"支付\",{\"0\":{\"189\":1}}],[\"✔\",{\"1\":{\"183\":2,\"607\":2,\"648\":2,\"845\":1}}],[\"✔是高并发优先考虑的\",{\"1\":{\"183\":1,\"607\":1}}],[\"柔性事务追求的是最终一致性\",{\"1\":{\"183\":1}}],[\"柔性事务就是\",{\"1\":{\"183\":1}}],[\"柔性事务\",{\"1\":{\"183\":4,\"192\":1,\"607\":3,\"845\":1}}],[\"强烈建议你不要这么做\",{\"1\":{\"893\":1}}],[\"强转要带括号\",{\"1\":{\"685\":1}}],[\"强调流程化解决问题\",{\"1\":{\"678\":1}}],[\"强\",{\"1\":{\"636\":1}}],[\"强引用\",{\"1\":{\"635\":1,\"660\":2}}],[\"强力推荐看这篇\",{\"1\":{\"556\":1}}],[\"强就强在它是一个整体\",{\"1\":{\"553\":1}}],[\"强制使用https\",{\"1\":{\"1161\":1}}],[\"强制退出\",{\"1\":{\"1005\":1}}],[\"强制\",{\"1\":{\"366\":2,\"637\":1,\"970\":1,\"1041\":1}}],[\"强一致性\",{\"1\":{\"183\":1,\"571\":1}}],[\"强抗碰撞\",{\"1\":{\"132\":1}}],[\"刚刚接触计算机\",{\"1\":{\"1150\":1}}],[\"刚好能解决\",{\"1\":{\"648\":1}}],[\"刚进第一个\",{\"1\":{\"301\":1}}],[\"刚性事务\",{\"1\":{\"183\":1}}],[\"刚跑的时候拿的后面就算修改也不会再去拿了\",{\"1\":{\"107\":1}}],[\"又去研究\",{\"1\":{\"1150\":1}}],[\"又可以培养出成就感\",{\"1\":{\"1150\":1}}],[\"又可能会出现什么结果\",{\"1\":{\"927\":1}}],[\"又能从17楼直接跳到2楼\",{\"1\":{\"1090\":1}}],[\"又轻又好看\",{\"1\":{\"1005\":1}}],[\"又有基于\",{\"1\":{\"923\":1}}],[\"又有一个线程来了\",{\"1\":{\"301\":1}}],[\"又因为前面我们提到的\",{\"1\":{\"917\":1}}],[\"又怎么办呢\",{\"1\":{\"899\":1}}],[\"又保证了线程安全\",{\"1\":{\"779\":1}}],[\"又会把它当做新的框架来学\",{\"1\":{\"740\":1}}],[\"又会恢复为链表形态\",{\"1\":{\"703\":1}}],[\"又\",{\"1\":{\"688\":1}}],[\"又调用方法\",{\"1\":{\"321\":1}}],[\"又改成\",{\"1\":{\"309\":1}}],[\"又诞生了一些新的理论\",{\"1\":{\"183\":1}}],[\"又不是写学生作业\",{\"1\":{\"92\":1}}],[\"等效于do\",{\"1\":{\"1085\":1}}],[\"等于这个表现在完全不可读写了\",{\"1\":{\"928\":1}}],[\"等不忙的时候再写账本\",{\"1\":{\"899\":1}}],[\"等打烊以后再把账本翻出来核算\",{\"1\":{\"899\":1}}],[\"等多个存储引擎\",{\"1\":{\"892\":1}}],[\"等所有持久化过程全部结束了\",{\"1\":{\"859\":1}}],[\"等他遇到springboot时\",{\"1\":{\"740\":1}}],[\"等一元运算符\",{\"1\":{\"725\":1}}],[\"等等热门开源项目都用到了\",{\"1\":{\"713\":1}}],[\"等等\",{\"1\":{\"712\":1,\"740\":1}}],[\"等等服务\",{\"1\":{\"183\":1}}],[\"等内核把数据准备好了\",{\"1\":{\"712\":1}}],[\"等抽象\",{\"1\":{\"712\":1}}],[\"等\",{\"1\":{\"690\":1,\"693\":1,\"706\":1,\"734\":1,\"792\":1,\"802\":1,\"823\":1,\"959\":3}}],[\"等问题\",{\"1\":{\"637\":1}}],[\"等没有被spring管理的工具类中使用spring对象\",{\"1\":{\"538\":1,\"1082\":1}}],[\"等以\",{\"1\":{\"498\":1}}],[\"等注解的类\",{\"1\":{\"482\":1}}],[\"等同于在idea中配置\",{\"1\":{\"546\":1}}],[\"等同于\",{\"1\":{\"383\":2,\"478\":1}}],[\"等异步方法都完成后才能放数据之类的操作\",{\"1\":{\"377\":1}}],[\"等待资源\",{\"1\":{\"933\":2}}],[\"等待\",{\"1\":{\"933\":2}}],[\"等待一段时间后重试获取锁\",{\"1\":{\"851\":1}}],[\"等待下一次消费并不会消失\",{\"1\":{\"837\":1}}],[\"等待消费者连接到这个队列将其取走\",{\"1\":{\"823\":1}}],[\"等待数据从内核空间拷贝到用户空间的这段时间里\",{\"1\":{\"712\":1}}],[\"等待客户端访问\",{\"1\":{\"688\":1}}],[\"等待是否中断\",{\"1\":{\"352\":1}}],[\"等待到7个线程全部执行完毕后\",{\"1\":{\"338\":1}}],[\"等全部线程完成后\",{\"1\":{\"338\":1,\"339\":1}}],[\"等价于上面的\",{\"1\":{\"763\":1}}],[\"等价于\",{\"1\":{\"216\":1,\"548\":1,\"686\":2}}],[\"等号右边可以理解为在setxxx\",{\"1\":{\"125\":1}}],[\"举手到坐检查\",{\"1\":{\"849\":1}}],[\"举手\",{\"1\":{\"849\":1}}],[\"举个通俗易懂的例子\",{\"1\":{\"740\":1}}],[\"举个例子\",{\"1\":{\"183\":1,\"543\":1,\"657\":1,\"727\":1,\"928\":1,\"1012\":1}}],[\"举例\",{\"0\":{\"608\":1},\"1\":{\"932\":1}}],[\"举例如要组装成一台电脑集合上面的技术\",{\"1\":{\"472\":1}}],[\"举例说明\",{\"0\":{\"352\":1},\"1\":{\"352\":1,\"388\":1}}],[\"举例来说\",{\"1\":{\"76\":1}}],[\"动宾结构\",{\"1\":{\"678\":1}}],[\"动态性\",{\"1\":{\"688\":1}}],[\"动态语言\",{\"1\":{\"688\":1}}],[\"动态处理代理方法调用的机制\",{\"1\":{\"638\":1}}],[\"动态类型和静态类型就是其中一种分类角度\",{\"1\":{\"637\":1}}],[\"动态路由的功能\",{\"1\":{\"591\":1}}],[\"动态链接\",{\"1\":{\"388\":1,\"778\":1}}],[\"动态配置管理\",{\"1\":{\"228\":1}}],[\"动态更新视图\",{\"1\":{\"220\":1}}],[\"动态代理的优点是它可以在运行时创建代理对象\",{\"1\":{\"688\":1}}],[\"动态代理解决了什么问题\",{\"1\":{\"639\":1}}],[\"动态代理是一种方便运行时动态构建代理\",{\"1\":{\"638\":1}}],[\"动态代理是基于什么原理\",{\"1\":{\"637\":1}}],[\"动态代理是基于接口的代理\",{\"1\":{\"182\":1}}],[\"动态代理有两个\",{\"1\":{\"493\":1}}],[\"动态代理比如\",{\"1\":{\"493\":1}}],[\"动态代理\",{\"1\":{\"182\":1,\"640\":1,\"688\":2}}],[\"动态代理只能代理实现了接口的目标对象\",{\"1\":{\"182\":1}}],[\"动态代理和\",{\"1\":{\"182\":1}}],[\"动态代理来生成代理对象\",{\"1\":{\"182\":1}}],[\"动静分离\",{\"0\":{\"95\":1},\"1\":{\"71\":1}}],[\"抛开这点不谈\",{\"1\":{\"1139\":1}}],[\"抛开上面的问题不讲\",{\"1\":{\"815\":1}}],[\"抛异常\",{\"1\":{\"362\":1,\"582\":1}}],[\"抛异常来使整个\",{\"1\":{\"176\":1}}],[\"抛出异常\",{\"1\":{\"363\":1,\"686\":1}}],[\"抛出问题\",{\"1\":{\"309\":1}}],[\"抛出已检查异常\",{\"1\":{\"182\":1}}],[\"隔离性之后\",{\"1\":{\"962\":1}}],[\"隔离性\",{\"1\":{\"905\":2,\"962\":1}}],[\"隔离性与隔离级别\",{\"0\":{\"905\":1}}],[\"隔离性和持久性\",{\"1\":{\"79\":1}}],[\"隔离级别的实现\",{\"1\":{\"934\":1}}],[\"隔离级别就很方便\",{\"1\":{\"905\":1}}],[\"隔离级别下直接用加锁的方式来避免并行访问\",{\"1\":{\"905\":1}}],[\"隔离级别下直接返回记录上的最新值\",{\"1\":{\"905\":1}}],[\"隔离级别下\",{\"1\":{\"905\":2}}],[\"隔离级别是基于\",{\"1\":{\"905\":1}}],[\"隔离级别\",{\"0\":{\"180\":1},\"1\":{\"905\":1,\"929\":2}}],[\"仍然能够把数据恢复回来\",{\"1\":{\"901\":1}}],[\"仍然能够对外提供满足一致性和可用性的服务\",{\"1\":{\"571\":1}}],[\"仍然用前面的\",{\"1\":{\"901\":1}}],[\"仍然疑惑\",{\"0\":{\"883\":1}}],[\"仍然把剩下的消息给消费了的问题\",{\"1\":{\"837\":1}}],[\"仍然可能存在数据不一致的情况\",{\"1\":{\"609\":1}}],[\"仍不知道以下是否成立\",{\"1\":{\"179\":1}}],[\"仍提供了长连接选项\",{\"1\":{\"47\":1}}],[\"带你走一遍整个执行流程\",{\"1\":{\"892\":1}}],[\"带有过期时间的键\",{\"1\":{\"849\":1}}],[\"带cookie的\",{\"1\":{\"591\":1}}],[\"带来的变化\",{\"1\":{\"471\":1}}],[\"带\",{\"1\":{\"271\":2}}],[\"带了break的swtich\",{\"1\":{\"430\":1,\"433\":1}}],[\"带了\",{\"1\":{\"178\":1}}],[\"带上版本号\",{\"0\":{\"170\":1}}],[\"买的人也不少\",{\"1\":{\"1150\":1}}],[\"买票\",{\"1\":{\"931\":1}}],[\"买域名\",{\"1\":{\"688\":1}}],[\"买家库\",{\"1\":{\"606\":1}}],[\"买1001\",{\"1\":{\"178\":1}}],[\"买了案例\",{\"1\":{\"69\":1}}],[\"假设我想让我的网站名显示\",{\"1\":{\"1161\":1}}],[\"假设我们有两个\",{\"1\":{\"543\":1}}],[\"假设我们没有加\",{\"1\":{\"290\":1}}],[\"假设字段\",{\"1\":{\"931\":1}}],[\"假设这个\",{\"1\":{\"929\":1}}],[\"假设这个市民表的定义是这样的\",{\"1\":{\"922\":1}}],[\"假设表\",{\"1\":{\"928\":1}}],[\"假设备份期间\",{\"1\":{\"927\":1}}],[\"假设index\",{\"1\":{\"923\":1}}],[\"假设\",{\"1\":{\"914\":2,\"917\":1}}],[\"假设数据表\",{\"1\":{\"905\":1}}],[\"假设在\",{\"1\":{\"901\":1}}],[\"假设当前\",{\"1\":{\"901\":1}}],[\"假设你要学\",{\"1\":{\"1150\":1}}],[\"假设你现在已经喜欢上编程了\",{\"1\":{\"1150\":1}}],[\"假设你现在要维护\",{\"1\":{\"927\":1}}],[\"假设你以后的方向是\",{\"1\":{\"1150\":1}}],[\"假设你开始用\",{\"1\":{\"1074\":1}}],[\"假设你负责实现一个电影票在线交易业务\",{\"1\":{\"931\":1}}],[\"假设你的表中确实有一个唯一字段\",{\"1\":{\"918\":1}}],[\"假设你在管理一个个人银行账户表\",{\"1\":{\"905\":1}}],[\"假设你是一个老师\",{\"1\":{\"849\":1}}],[\"假设你确定两件对象之间是like\",{\"1\":{\"657\":1}}],[\"假设你确定两件对象之间是has\",{\"1\":{\"656\":1}}],[\"假设你确定两件对象之间是is\",{\"1\":{\"655\":1}}],[\"假设hashmap的长度为n\",{\"1\":{\"739\":1}}],[\"假设有两个资源\",{\"1\":{\"933\":1}}],[\"假设有两个线程\",{\"1\":{\"694\":1}}],[\"假设有\",{\"1\":{\"932\":1}}],[\"假设有一个方法\",{\"1\":{\"321\":1}}],[\"假设有一个库存管理系统\",{\"1\":{\"309\":1}}],[\"假设微服务a调用微服务b和微服务c\",{\"1\":{\"581\":1}}],[\"假设一个节点的大小\",{\"1\":{\"916\":1}}],[\"假设一个值从\",{\"1\":{\"906\":1}}],[\"假设一个自习室里有7个人\",{\"1\":{\"333\":1}}],[\"假设一共有6个车\",{\"1\":{\"342\":1}}],[\"假设线程a的操作执行顺序是减少2\",{\"1\":{\"309\":1}}],[\"假设线程a和线程b同时执行getandint操作\",{\"1\":{\"305\":1}}],[\"假设执行\",{\"1\":{\"305\":1}}],[\"假设1线程\",{\"1\":{\"290\":1}}],[\"假设x是一个已知仅包含字符串的列表\",{\"1\":{\"249\":1}}],[\"假失败\",{\"1\":{\"176\":1}}],[\"假如你给32位的系统配上了8gb的内存\",{\"1\":{\"1092\":1}}],[\"假如你知道你要找的人住在那栋大楼的17楼\",{\"1\":{\"1090\":1}}],[\"假如取的时候原先传过来的时候有中文一个中文3个字节\",{\"1\":{\"688\":1}}],[\"假如回到十几年前就别买房子了太贵了\",{\"1\":{\"688\":1}}],[\"假如person类\",{\"1\":{\"688\":1}}],[\"假如有比student小的子类\",{\"1\":{\"688\":1}}],[\"假如数组里有1000个元素\",{\"1\":{\"688\":1}}],[\"假如自己设计一个set该如何设计\",{\"1\":{\"688\":1}}],[\"假如提交的是\",{\"1\":{\"606\":1}}],[\"假如gulimall订单服务掉其它业务都回滚了\",{\"1\":{\"572\":1}}],[\"假如多个listener消费谁先\",{\"1\":{\"543\":1,\"1081\":1}}],[\"假如我在传值的时候只想传e就可以用bind\",{\"1\":{\"439\":1}}],[\"假如我的参数emloyee为空我where条件又要用这个参数\",{\"1\":{\"438\":1}}],[\"假如我有两套数据库mysql\",{\"1\":{\"438\":1}}],[\"假如id赋值为null就会出问题\",{\"1\":{\"431\":1}}],[\"假如商品详情页的每个查询\",{\"1\":{\"372\":1}}],[\"假如\",{\"1\":{\"92\":1,\"606\":1,\"961\":1}}],[\"假如获取锁后服务器宕机\",{\"1\":{\"87\":1}}],[\"假如项目没用thymeleaf\",{\"1\":{\"72\":1}}],[\"创造运行时类对象\",{\"1\":{\"688\":1}}],[\"创造多线程的方式二\",{\"1\":{\"687\":1}}],[\"创订单是本方法\",{\"1\":{\"176\":1}}],[\"创建集合存储提取的结果\",{\"1\":{\"1019\":1}}],[\"创建并且切换到分支里\",{\"0\":{\"990\":1}}],[\"创建并写入内容\",{\"1\":{\"782\":1}}],[\"创建分支\",{\"0\":{\"989\":1}}],[\"创建表时并不一定必须指定主键\",{\"1\":{\"965\":1}}],[\"创建视图的语法是\",{\"1\":{\"934\":1}}],[\"创建索引和维护索引需要耗费许多时间\",{\"1\":{\"911\":1}}],[\"创建axios实例\",{\"1\":{\"880\":1}}],[\"创建消息处理类\",{\"1\":{\"827\":1}}],[\"创建空数据库\",{\"1\":{\"806\":1}}],[\"创建测试类\",{\"0\":{\"752\":1}}],[\"创建多个接口\",{\"0\":{\"751\":1}}],[\"创建条件构造器对象\",{\"1\":{\"743\":1,\"1101\":1}}],[\"创建无限流\",{\"1\":{\"689\":1}}],[\"创建运行时类的对象\",{\"1\":{\"688\":1}}],[\"创建对象\",{\"1\":{\"688\":3}}],[\"创建了几个对象\",{\"0\":{\"722\":1},\"1\":{\"722\":1,\"725\":1}}],[\"创建了数值在\",{\"1\":{\"647\":1}}],[\"创建了一个springsessionrepositoryfilter\",{\"1\":{\"147\":1}}],[\"创建微服务模块套路\",{\"1\":{\"558\":1}}],[\"创建工厂\",{\"1\":{\"543\":1}}],[\"创建后置处理器实现类\",{\"1\":{\"489\":1}}],[\"创建属性对应的set方法\",{\"1\":{\"487\":1}}],[\"创建属性\",{\"1\":{\"487\":1}}],[\"创建类\",{\"1\":{\"487\":1}}],[\"创建独立spring应用\",{\"1\":{\"473\":1}}],[\"创建的时候有过期时间的\",{\"1\":{\"626\":1}}],[\"创建的\",{\"1\":{\"363\":1,\"779\":1}}],[\"创建一个临时的新表\",{\"1\":{\"976\":1}}],[\"创建一个\",{\"1\":{\"543\":1}}],[\"创建一个空对象\",{\"1\":{\"543\":1}}],[\"创建一个defaultsqlsession对象\",{\"1\":{\"465\":1}}],[\"创建一个单线程化的线程池\",{\"1\":{\"365\":1}}],[\"创建一个定长线程池\",{\"1\":{\"365\":2}}],[\"创建一个可缓存线程池\",{\"1\":{\"365\":1}}],[\"创建一个可重入锁\",{\"1\":{\"317\":1}}],[\"创建一个重入锁\",{\"1\":{\"352\":1}}],[\"创建一个读锁\",{\"1\":{\"326\":1}}],[\"创建一个读写锁\",{\"1\":{\"326\":1}}],[\"创建一个写锁\",{\"1\":{\"326\":1}}],[\"创建一个项目\",{\"1\":{\"219\":1}}],[\"创建原子引用包装类\",{\"1\":{\"310\":1}}],[\"创建之前\",{\"1\":{\"225\":1}}],[\"创建完成\",{\"1\":{\"225\":1}}],[\"创建\",{\"1\":{\"105\":1,\"498\":1,\"551\":1,\"1019\":2,\"1166\":1}}],[\"控制并发\",{\"1\":{\"932\":1}}],[\"控制的\",{\"1\":{\"893\":1}}],[\"控制的不可编辑\",{\"1\":{\"61\":1}}],[\"控制父子关系形成好树状结构\",{\"1\":{\"883\":1}}],[\"控制\",{\"1\":{\"838\":1}}],[\"控制分布式事务\",{\"1\":{\"607\":1}}],[\"控制器\",{\"1\":{\"521\":1,\"709\":1}}],[\"控制主数据源\",{\"1\":{\"462\":1}}],[\"控制台\",{\"1\":{\"210\":1,\"212\":1,\"430\":1}}],[\"控制不了其他服务的回滚\",{\"1\":{\"176\":1}}],[\"插槽作用\",{\"1\":{\"865\":1}}],[\"插槽\",{\"1\":{\"865\":1}}],[\"插入链接\",{\"0\":{\"1043\":1}}],[\"插入点\",{\"1\":{\"1017\":1}}],[\"插入新记录的时候可以不指定\",{\"1\":{\"918\":1}}],[\"插入数据\",{\"1\":{\"884\":1}}],[\"插入元素\",{\"1\":{\"694\":2}}],[\"插入的元素剔除出链表\",{\"1\":{\"694\":1}}],[\"插入的元素成为链表的头部\",{\"1\":{\"694\":1}}],[\"插入一个键值对到链表的头部\",{\"1\":{\"694\":1}}],[\"插入一个元素分两步\",{\"1\":{\"693\":1}}],[\"插入\",{\"1\":{\"403\":1,\"693\":2}}],[\"插入成功才可以操作\",{\"1\":{\"173\":1}}],[\"插件装了\",{\"1\":{\"1005\":1}}],[\"插件\",{\"1\":{\"1005\":2}}],[\"插件基于拦截器\",{\"1\":{\"465\":1}}],[\"插件编写\",{\"1\":{\"465\":1}}],[\"插件机制\",{\"1\":{\"465\":1}}],[\"插件需要实现的接口\",{\"1\":{\"465\":1}}],[\"插件生成\",{\"1\":{\"229\":1}}],[\"插件来实现\",{\"1\":{\"11\":1}}],[\"高频使用\",{\"0\":{\"1048\":1}}],[\"高版本的maven好像只支持访问https\",{\"1\":{\"1013\":1}}],[\"高亮显示某行代码\",{\"1\":{\"985\":1}}],[\"高效运算\",{\"1\":{\"686\":1}}],[\"高效\",{\"1\":{\"594\":2}}],[\"高效并且对业务零侵入地解决分布式事务问题\",{\"1\":{\"594\":1}}],[\"高可靠的消息发布与订阅服务\",{\"1\":{\"594\":1}}],[\"高可靠的云存储服务\",{\"1\":{\"594\":2}}],[\"高可靠\",{\"1\":{\"594\":2}}],[\"高可用的定时\",{\"1\":{\"594\":2}}],[\"高可用\",{\"1\":{\"169\":1,\"815\":1}}],[\"高级系统设置\",{\"1\":{\"1038\":1}}],[\"高级篇偏运维一点\",{\"1\":{\"870\":1}}],[\"高级篇功能打通\",{\"1\":{\"261\":1}}],[\"高级特性\",{\"1\":{\"383\":1}}],[\"高级选项\",{\"1\":{\"383\":1}}],[\"高级工程师问题\",{\"1\":{\"379\":1}}],[\"高级部分\",{\"0\":{\"226\":1}}],[\"高级\",{\"1\":{\"203\":1,\"870\":1,\"1107\":1,\"1150\":1}}],[\"高性能\",{\"0\":{\"968\":1},\"1\":{\"169\":1}}],[\"高并发的\",{\"1\":{\"261\":1,\"466\":1,\"712\":1}}],[\"高并发\",{\"0\":{\"199\":1},\"1\":{\"169\":1}}],[\"高并发三宝\",{\"1\":{\"91\":1}}],[\"理想化\",{\"1\":{\"688\":1}}],[\"理想的同时刻数据一致性无法实现\",{\"1\":{\"571\":1}}],[\"理解了\",{\"1\":{\"994\":1}}],[\"理解了事务的隔离级别\",{\"1\":{\"906\":1}}],[\"理解相当于平替了一下\",{\"1\":{\"883\":1}}],[\"理解的不是很透彻\",{\"1\":{\"859\":1}}],[\"理解为夫妻没有稳定的经济基础\",{\"1\":{\"1076\":1}}],[\"理解为一个容器\",{\"1\":{\"903\":1}}],[\"理解为\",{\"1\":{\"697\":1}}],[\"理解引用对于掌握\",{\"1\":{\"635\":1}}],[\"理解\",{\"1\":{\"230\":1}}],[\"理解成\",{\"1\":{\"210\":1,\"789\":1}}],[\"理解刷新会覆盖\",{\"1\":{\"167\":1}}],[\"理论+实战\",{\"1\":{\"869\":1}}],[\"理论上来说\",{\"1\":{\"713\":1}}],[\"理论上就应该准守事物的\",{\"1\":{\"183\":1}}],[\"理论延伸的地方\",{\"1\":{\"572\":1}}],[\"理论只能满足\",{\"1\":{\"572\":1}}],[\"理论的延伸\",{\"1\":{\"571\":1}}],[\"理论了解么\",{\"1\":{\"571\":1}}],[\"理论是分布式领域非常非常重要的两个理论\",{\"1\":{\"571\":1}}],[\"理论\",{\"0\":{\"1088\":1},\"1\":{\"183\":2,\"571\":1}}],[\"理论和\",{\"1\":{\"183\":1,\"571\":1}}],[\"理清看门狗\",{\"1\":{\"113\":1}}],[\"属\",{\"1\":{\"543\":1}}],[\"属性等\",{\"0\":{\"1074\":1}}],[\"属性的赋值顺序\",{\"1\":{\"686\":1}}],[\"属性可以用权限修饰符\",{\"1\":{\"686\":1}}],[\"属性来配置不同包或类的日志级别\",{\"1\":{\"523\":1}}],[\"属性xd\",{\"1\":{\"489\":1}}],[\"属性值\",{\"1\":{\"489\":1}}],[\"属性赋值的先后顺序\",{\"1\":{\"696\":1}}],[\"属性赋值\",{\"1\":{\"489\":1,\"543\":2}}],[\"属性指定了一个表达式\",{\"1\":{\"430\":1}}],[\"属性类型\",{\"1\":{\"252\":1}}],[\"属性\",{\"0\":{\"449\":1},\"1\":{\"244\":1,\"686\":3,\"696\":1}}],[\"属性为\",{\"1\":{\"220\":1}}],[\"属性上\",{\"1\":{\"220\":1}}],[\"属性传递参数\",{\"1\":{\"220\":1}}],[\"属性有\",{\"1\":{\"161\":1}}],[\"属于同步非阻塞\",{\"1\":{\"712\":1}}],[\"属于同步阻塞\",{\"1\":{\"711\":1}}],[\"属于字符流\",{\"1\":{\"688\":1}}],[\"属于既偏门又非常高频的一道题目\",{\"1\":{\"637\":1}}],[\"属于运行时增强\",{\"1\":{\"494\":1}}],[\"属于编译时的增强\",{\"1\":{\"493\":1}}],[\"属于java的关键字\",{\"1\":{\"352\":1}}],[\"属于\",{\"1\":{\"186\":1,\"712\":1}}],[\"属于目前比较火的一种柔性事务解决方案\",{\"1\":{\"186\":1}}],[\"属于业务代码无侵入的\",{\"1\":{\"184\":1}}],[\"属于文件性的数据库\",{\"1\":{\"87\":1}}],[\"知行合一\",{\"1\":{\"552\":1}}],[\"知识扩展\",{\"0\":{\"635\":1,\"640\":1}}],[\"知识待完善\",{\"1\":{\"499\":1}}],[\"知识汇总\",{\"0\":{\"75\":1}}],[\"知乎专栏\",{\"1\":{\"1145\":1}}],[\"知乎私信\",{\"1\":{\"1128\":1}}],[\"知乎上也有关于这个问题的讨论\",{\"1\":{\"970\":1}}],[\"知乎\",{\"1\":{\"383\":1,\"998\":1}}],[\"知道原来还有这么多技术\",{\"1\":{\"1150\":1}}],[\"知道自己每个时期要完成什么样的目标\",{\"1\":{\"1144\":1}}],[\"知道自己在什么时期要做什么\",{\"1\":{\"1144\":1}}],[\"知道了为什么要学\",{\"1\":{\"1142\":1}}],[\"知道了自己的方向\",{\"1\":{\"1142\":1}}],[\"知道了这个设定\",{\"1\":{\"931\":1}}],[\"知道了这个答案\",{\"1\":{\"931\":1}}],[\"知道哪些消息没有可靠抵达就再重新发一次\",{\"1\":{\"833\":1}}],[\"知道来龙去脉\",{\"1\":{\"828\":1}}],[\"知道这个干这个用的就好\",{\"1\":{\"688\":1}}],[\"知道\",{\"1\":{\"161\":1}}],[\"涉及了两阶段锁协议\",{\"1\":{\"933\":1}}],[\"涉及的线程都在等待别的线程释放资源时\",{\"1\":{\"932\":1}}],[\"涉及到\",{\"1\":{\"159\":1}}],[\"涉及启动流程的配置就不能热部署\",{\"1\":{\"123\":1}}],[\"退出循环\",{\"1\":{\"915\":1}}],[\"退出登录\",{\"0\":{\"628\":1}}],[\"退货\",{\"1\":{\"158\":1}}],[\"退款\",{\"1\":{\"158\":1}}],[\"付款\",{\"1\":{\"158\":1}}],[\"资金流\",{\"1\":{\"158\":2}}],[\"资源的消耗\",{\"1\":{\"712\":1}}],[\"资源的\",{\"1\":{\"712\":1}}],[\"资源管理器上传的文件不是源文件\",{\"1\":{\"1084\":1}}],[\"资源管理器\",{\"1\":{\"606\":1}}],[\"资源\",{\"1\":{\"605\":1,\"932\":2,\"947\":1}}],[\"资源名\",{\"1\":{\"539\":1}}],[\"资源不能被抢占\",{\"1\":{\"377\":1}}],[\"资源服务器\",{\"1\":{\"136\":1}}],[\"资源拥有者\",{\"1\":{\"136\":1}}],[\"结语\",{\"0\":{\"1152\":1}}],[\"结构\",{\"1\":{\"876\":1}}],[\"结构区分\",{\"1\":{\"876\":1}}],[\"结构跟\",{\"1\":{\"876\":1}}],[\"结构在原本字符数组之上\",{\"1\":{\"849\":1}}],[\"结尾的字符串\",{\"1\":{\"959\":1}}],[\"结尾\",{\"1\":{\"849\":1}}],[\"结尾处\",{\"1\":{\"805\":1}}],[\"结束的就可以了\",{\"1\":{\"1041\":1}}],[\"结束阻塞状态\",{\"1\":{\"687\":1}}],[\"结束后打个分隔线\",{\"1\":{\"492\":1}}],[\"结论是\",{\"1\":{\"925\":1}}],[\"结论\",{\"1\":{\"229\":1,\"604\":1,\"702\":1}}],[\"结果都没能达成目的\",{\"1\":{\"1157\":1}}],[\"结果都将为null\",{\"1\":{\"959\":1}}],[\"结果中将包括满足连接条件的所有\",{\"1\":{\"959\":1}}],[\"结果用着用着突然连接断了\",{\"1\":{\"800\":1}}],[\"结果会返回什么呢\",{\"1\":{\"725\":1}}],[\"结果为int型\",{\"1\":{\"702\":1}}],[\"结果为5\",{\"1\":{\"295\":1}}],[\"结果自动提升为容量大的数据类型\",{\"1\":{\"702\":1}}],[\"结果就会相反\",{\"1\":{\"724\":1}}],[\"结果就在堆中\",{\"1\":{\"687\":1}}],[\"结果就是5050\",{\"1\":{\"670\":1}}],[\"结果就是5050101=510050了\",{\"1\":{\"670\":1}}],[\"结果\",{\"1\":{\"492\":1,\"1051\":1}}],[\"结果是\",{\"1\":{\"374\":1}}],[\"结果和最开始的不一样\",{\"1\":{\"294\":1}}],[\"结果无法预测\",{\"1\":{\"292\":1,\"295\":1}}],[\"结果过滤\",{\"0\":{\"278\":1}}],[\"结果认真看有个\",{\"1\":{\"227\":1}}],[\"结果一直报错\",{\"1\":{\"227\":1}}],[\"结算的service是我看过的最繁琐的\",{\"1\":{\"158\":1}}],[\"结合书和博客自己写一个总结\",{\"1\":{\"1150\":1}}],[\"结合线程池\",{\"1\":{\"883\":1}}],[\"结合上面的watch学习\",{\"1\":{\"857\":1}}],[\"结合了\",{\"1\":{\"712\":1}}],[\"结合这个图\",{\"1\":{\"627\":1}}],[\"结合这个过程\",{\"1\":{\"543\":1}}],[\"结合这个看\",{\"1\":{\"83\":1}}],[\"结合起来\",{\"1\":{\"539\":1}}],[\"结合\",{\"1\":{\"228\":1,\"371\":1}}],[\"结合官方文档\",{\"1\":{\"113\":1}}],[\"结合前面的笔记\",{\"1\":{\"109\":1}}],[\"结合后面学的\",{\"1\":{\"78\":1}}],[\"结合使用\",{\"1\":{\"78\":1}}],[\"突然有一天你又要捡起它\",{\"1\":{\"1144\":1}}],[\"突然后悔\",{\"1\":{\"1142\":1}}],[\"突然发现\",{\"1\":{\"1019\":1}}],[\"突然发现他是\",{\"1\":{\"157\":1}}],[\"突然想明白一个事\",{\"1\":{\"993\":1}}],[\"突然网络断了\",{\"1\":{\"708\":1}}],[\"突然失败\",{\"1\":{\"708\":1}}],[\"突然又看到官网\",{\"1\":{\"112\":1}}],[\"整理代码\",{\"0\":{\"1057\":1}}],[\"整理算法\",{\"1\":{\"385\":1}}],[\"整理算法用于老年代\",{\"1\":{\"385\":1}}],[\"整成服务\",{\"1\":{\"1041\":1}}],[\"整成一个\",{\"1\":{\"889\":1}}],[\"整库\",{\"1\":{\"993\":1}}],[\"整\",{\"1\":{\"977\":1}}],[\"整体空间利用率降低大约\",{\"1\":{\"918\":1}}],[\"整体来看\",{\"1\":{\"900\":1}}],[\"整完这个可以再整\",{\"1\":{\"877\":1}}],[\"整型所允许的最大值\",{\"1\":{\"920\":1}}],[\"整型\",{\"1\":{\"686\":1}}],[\"整了很久才发现这个问题\",{\"1\":{\"598\":1}}],[\"整个文件夹里的内容\",{\"0\":{\"1048\":1}}],[\"整个文件夹搞三个配置文件\",{\"1\":{\"861\":1}}],[\"整个查询3k\",{\"1\":{\"959\":1}}],[\"整个库回到可以正常更新的状态\",{\"1\":{\"927\":1}}],[\"整个事务存在期间都用这个视图\",{\"1\":{\"905\":1}}],[\"整个系统的复杂度是不是上升了\",{\"1\":{\"815\":1}}],[\"整个密码中至少要包含特殊字符的个数\",{\"1\":{\"802\":1}}],[\"整个密码中至少要包含阿拉伯数字的个数\",{\"1\":{\"802\":1}}],[\"整个密码中至少要包含大\",{\"1\":{\"802\":1}}],[\"整个过程\",{\"1\":{\"899\":1}}],[\"整个过程就是非常慢\",{\"1\":{\"734\":1}}],[\"整个过程内心会充满疑问的\",{\"1\":{\"156\":1}}],[\"整个网络就分成了几块区域\",{\"1\":{\"571\":1}}],[\"整合mybatis\",{\"1\":{\"462\":1}}],[\"整合流程\",{\"0\":{\"455\":1}}],[\"整合包\",{\"1\":{\"451\":1}}],[\"整合\",{\"1\":{\"152\":2,\"1100\":1}}],[\"整合redis作为session存储\",{\"1\":{\"147\":1}}],[\"​\",{\"1\":{\"156\":3,\"171\":1,\"229\":2,\"355\":1,\"356\":1,\"380\":14,\"382\":4,\"465\":3,\"489\":1,\"508\":1,\"576\":1,\"608\":1,\"685\":1,\"686\":5,\"799\":3,\"976\":2,\"985\":3,\"994\":1,\"1010\":1}}],[\"添加项目了\",{\"1\":{\"1005\":1}}],[\"添加到系统\",{\"1\":{\"1005\":1}}],[\"添加到暂存区\",{\"1\":{\"990\":1}}],[\"添加到loginuser中\",{\"1\":{\"624\":1}}],[\"添加操作\",{\"1\":{\"990\":1}}],[\"添加字段\",{\"1\":{\"976\":1}}],[\"添加\",{\"1\":{\"923\":1,\"1005\":2}}],[\"添加mysql端口3306和tomcat端口8080\",{\"1\":{\"804\":1}}],[\"添加完后执行\",{\"1\":{\"800\":1}}],[\"添加失败\",{\"1\":{\"688\":1}}],[\"添加网关后\",{\"1\":{\"590\":1}}],[\"添加网关前\",{\"1\":{\"590\":1}}],[\"添加新注解\",{\"1\":{\"583\":1}}],[\"添加一些不属于表里的字段\",{\"1\":{\"250\":1}}],[\"添加额外的信息或执行其他相关操作\",{\"1\":{\"156\":1}}],[\"添加其他配置\",{\"1\":{\"71\":1}}],[\"虽然学习整得不行\",{\"1\":{\"1162\":1}}],[\"虽然很啰嗦\",{\"1\":{\"1150\":1}}],[\"虽然很多硬件都会为了优化做一些重排\",{\"1\":{\"329\":1}}],[\"虽然他已经知道了\",{\"1\":{\"1119\":1}}],[\"虽然都是程序员\",{\"1\":{\"1114\":1}}],[\"虽然pom文件和settings文件中的<repository>标签都涉及仓库配置\",{\"1\":{\"1014\":1}}],[\"虽然ping命令使用icmp协议来发送请求和接收回复\",{\"1\":{\"76\":1}}],[\"虽然最终检测的结果是没有死锁\",{\"1\":{\"932\":1}}],[\"虽然数据量不大\",{\"1\":{\"928\":1}}],[\"虽然这个查询需求在业务中出现的概率不高\",{\"1\":{\"923\":1}}],[\"虽然还没有提交\",{\"1\":{\"905\":1}}],[\"虽然密码也可以直接跟在\",{\"1\":{\"893\":1}}],[\"虽然i自增为2\",{\"1\":{\"778\":1}}],[\"虽然int\",{\"1\":{\"388\":1}}],[\"虽然可以使用lambda表达式对某些接口进行简单的实现\",{\"1\":{\"747\":1}}],[\"虽然也被声明为final类型\",{\"1\":{\"725\":1}}],[\"虽然我英语学的不怎么样但这些软件我是真的用的溜\",{\"1\":{\"1162\":1}}],[\"虽然我的实习经历还蛮多的\",{\"1\":{\"1150\":1}}],[\"虽然我上面说过\",{\"1\":{\"1142\":1}}],[\"虽然我们使用的类库\",{\"1\":{\"637\":1}}],[\"虽然我对面\",{\"1\":{\"492\":1}}],[\"虽然现在不理解但是先码上\",{\"1\":{\"474\":1}}],[\"虽然\",{\"1\":{\"386\":1,\"632\":1,\"726\":1,\"899\":2,\"928\":1}}],[\"虽然能得到异常信息\",{\"1\":{\"374\":1}}],[\"虽然它们也支持多用户\",{\"1\":{\"785\":1}}],[\"虽然它们都可以用于处理请求和响应\",{\"1\":{\"156\":1}}],[\"虽然它有补偿机制\",{\"1\":{\"183\":1}}],[\"什么for循环\",{\"1\":{\"1150\":1}}],[\"什么意思呢\",{\"1\":{\"1090\":1,\"1150\":1}}],[\"什么是yum\",{\"1\":{\"810\":1}}],[\"什么是lambda\",{\"0\":{\"745\":1}}],[\"什么是\",{\"0\":{\"727\":1,\"737\":1,\"738\":1}}],[\"什么是桥方法\",{\"0\":{\"716\":1}}],[\"什么是泛型擦除机制\",{\"0\":{\"715\":1}}],[\"什么是分片上传呢\",{\"1\":{\"708\":1}}],[\"什么是维护模式\",{\"1\":{\"594\":1}}],[\"什么是网络分区\",{\"1\":{\"571\":1}}],[\"什么是服务注册与发现\",{\"0\":{\"564\":1}}],[\"什么是服务治理\",{\"0\":{\"563\":1}}],[\"什么是缓存\",{\"1\":{\"441\":1}}],[\"什么样的数据能使用缓存\",{\"1\":{\"441\":1}}],[\"什么时候才不需要了呢\",{\"1\":{\"906\":1}}],[\"什么时候删除呢\",{\"1\":{\"906\":1}}],[\"什么时候不用\",{\"1\":{\"454\":1,\"462\":1}}],[\"什么时候用\",{\"1\":{\"454\":1,\"462\":1}}],[\"什么时候用过滤器什么时候用拦截器\",{\"1\":{\"156\":1}}],[\"什么时候会发生full\",{\"1\":{\"389\":1}}],[\"什么时候需要唤醒线程\",{\"1\":{\"347\":1}}],[\"什么都混一起\",{\"1\":{\"92\":1}}],[\"比别人学的深\",{\"1\":{\"1141\":1}}],[\"比\",{\"1\":{\"1041\":1}}],[\"比对本地的fetch\",{\"1\":{\"990\":1}}],[\"比count\",{\"1\":{\"956\":2}}],[\"比使用复合索引更高效\",{\"1\":{\"923\":1}}],[\"比那些直接配置的舒服多了\",{\"1\":{\"828\":1}}],[\"比方空调继承于制冷机\",{\"1\":{\"657\":1}}],[\"比方电脑是由显示器\",{\"1\":{\"656\":1}}],[\"比方菱形\",{\"1\":{\"655\":1}}],[\"比方说为了容灾\",{\"1\":{\"598\":1}}],[\"比方说我们现在有三个环境\",{\"1\":{\"598\":1}}],[\"比喻\",{\"1\":{\"322\":1}}],[\"比较推荐用markdown来做笔记\",{\"1\":{\"1145\":1}}],[\"比较安全的离职原因是搬迁\",{\"1\":{\"1123\":1}}],[\"比较出名的就是\",{\"1\":{\"961\":1}}],[\"比较可能的情况是\",{\"1\":{\"929\":1}}],[\"比较理想的机制是\",{\"1\":{\"928\":1}}],[\"比较难理解\",{\"1\":{\"905\":1}}],[\"比较多的留言都选择了第二种方式\",{\"1\":{\"933\":1}}],[\"比较多\",{\"1\":{\"713\":1}}],[\"比较两个对象是否相同的标准\",{\"1\":{\"688\":1}}],[\"比较就必须要是\",{\"1\":{\"647\":1}}],[\"比较常见\",{\"1\":{\"550\":1}}],[\"比较常用的池化技术还是很多\",{\"1\":{\"359\":1}}],[\"比较并交换\",{\"1\":{\"310\":2}}],[\"比较发现自己手里的数字3和主内存中的数字4不一致\",{\"1\":{\"305\":1}}],[\"比较内存的值也是3\",{\"1\":{\"305\":1}}],[\"比较麻烦\",{\"1\":{\"241\":1}}],[\"比较复杂且重要\",{\"1\":{\"158\":1}}],[\"比较泛的\",{\"1\":{\"156\":1}}],[\"比较灵活\",{\"1\":{\"156\":1}}],[\"比如代码高亮\",{\"1\":{\"1161\":1}}],[\"比如一些语句什么的\",{\"1\":{\"1150\":1}}],[\"比如一个tcp连接\",{\"1\":{\"823\":1}}],[\"比如年计划\",{\"1\":{\"1142\":1}}],[\"比如阿里巴巴\",{\"1\":{\"1132\":1}}],[\"比如项目奖金\",{\"1\":{\"1130\":1}}],[\"比如工作电脑\",{\"1\":{\"1130\":1}}],[\"比如自己动手把老技术升级为新技术\",{\"1\":{\"1111\":1}}],[\"比如jd想检索商品\",{\"1\":{\"1098\":1}}],[\"比如jdk自身提供的动态代理\",{\"1\":{\"638\":1}}],[\"比如servlet\",{\"1\":{\"1012\":1}}],[\"比如spring\",{\"1\":{\"554\":1}}],[\"比如钉钉\",{\"1\":{\"1005\":1}}],[\"比如执行比如\",{\"1\":{\"1005\":1}}],[\"比如现在有三张表\",{\"1\":{\"961\":1}}],[\"比如数据量很大\",{\"1\":{\"961\":1}}],[\"比如大名鼎鼎的mycat\",{\"1\":{\"961\":1}}],[\"比如这个表的订单在另外一张表\",{\"1\":{\"961\":1}}],[\"比如web容器或应用服务器\",{\"1\":{\"1012\":1}}],[\"比如web\",{\"1\":{\"960\":1}}],[\"比如windows就是典型的单用户系统\",{\"1\":{\"785\":1}}],[\"比如退票逻辑\",{\"1\":{\"932\":1}}],[\"比如同一行同时最多只有\",{\"1\":{\"932\":1}}],[\"比如都是按照先拿t1\",{\"1\":{\"932\":1,\"933\":1}}],[\"比如按照\",{\"1\":{\"931\":1}}],[\"比如两阶段锁\",{\"1\":{\"930\":1}}],[\"比如事务\",{\"1\":{\"930\":1}}],[\"比如事务管理和\",{\"1\":{\"726\":1}}],[\"比如给一个表上加了一列\",{\"1\":{\"929\":1}}],[\"比如上面这个市民表的情况\",{\"1\":{\"923\":1}}],[\"比如字符串类型的身份证号\",{\"1\":{\"918\":1}}],[\"比如某一个\",{\"1\":{\"909\":1}}],[\"比如某天下午两点发现中午十二点有一次误删表\",{\"1\":{\"901\":1}}],[\"比如第一类更新丢失\",{\"1\":{\"906\":1}}],[\"比如查询余额\",{\"1\":{\"904\":1}}],[\"比如原来是\",{\"1\":{\"900\":1}}],[\"比如突然停业几天\",{\"1\":{\"899\":1}}],[\"比如可以配置为一组\",{\"1\":{\"899\":1}}],[\"比如如果有个触发器\",{\"1\":{\"897\":1}}],[\"比如如文件管理\",{\"1\":{\"709\":1}}],[\"比如优化器是怎么选择索引的\",{\"1\":{\"896\":1}}],[\"比如下面这个例子\",{\"1\":{\"928\":1}}],[\"比如下面这个语句\",{\"1\":{\"895\":1,\"907\":1}}],[\"比如下面这段代码\",{\"1\":{\"295\":1}}],[\"比如存储过程\",{\"1\":{\"892\":1}}],[\"比如8080端口\",{\"1\":{\"883\":1}}],[\"比如80端口\",{\"1\":{\"883\":1}}],[\"比如你学gc\",{\"1\":{\"1144\":1}}],[\"比如你要学习java\",{\"1\":{\"1144\":1}}],[\"比如你要保存的是\",{\"1\":{\"915\":1}}],[\"比如你执行下面这样的语句\",{\"1\":{\"896\":1}}],[\"比如你对你博客的所有文章按照阅读量来排序\",{\"1\":{\"868\":1}}],[\"比如你写一个后台系统\",{\"1\":{\"261\":1}}],[\"比如增加积分\",{\"1\":{\"815\":1}}],[\"比如zsh\",{\"1\":{\"787\":1}}],[\"比如zookeeper\",{\"1\":{\"109\":1}}],[\"比如基于\",{\"1\":{\"726\":1}}],[\"比如基于分离锁实现的concurrenthashmap等并发实现等\",{\"1\":{\"641\":1}}],[\"比如我在企查查上找到乐视网的工商信息\",{\"1\":{\"1116\":1}}],[\"比如我在某台主机上操作git和我的远程仓库\",{\"1\":{\"798\":1,\"984\":1}}],[\"比如我现在测试的\",{\"1\":{\"1041\":1}}],[\"比如我调用另外一个节点的方法的话\",{\"1\":{\"713\":1}}],[\"比如我们这个例子中的表\",{\"1\":{\"897\":1}}],[\"比如我们大多数情况使用的\",{\"1\":{\"634\":1}}],[\"比如我们提到的\",{\"1\":{\"378\":1}}],[\"比如显示屏\",{\"1\":{\"709\":1}}],[\"比如键盘\",{\"1\":{\"709\":1}}],[\"比如360可以杀毒\",{\"1\":{\"687\":1}}],[\"比如网页缓存\",{\"1\":{\"660\":1}}],[\"比如concurrenthashmap\",{\"1\":{\"641\":1}}],[\"比如vector\",{\"1\":{\"640\":1}}],[\"比如进行rpc调用\",{\"1\":{\"640\":1}}],[\"比如利用传说中更高性能的字节码操作机制\",{\"1\":{\"638\":1}}],[\"比如用来判断一个库是主库还是备库\",{\"1\":{\"927\":1}}],[\"比如用来包装rpc调用\",{\"1\":{\"638\":1}}],[\"比如用户小明转账给小红\",{\"1\":{\"609\":1}}],[\"比如获取某个对象的类定义\",{\"1\":{\"638\":1}}],[\"比如分支预测\",{\"1\":{\"635\":1}}],[\"比如在手机复制个图片或者文字\",{\"1\":{\"1164\":1}}],[\"比如在\",{\"1\":{\"892\":1}}],[\"比如在线程b中调用了线程a的join\",{\"1\":{\"650\":1}}],[\"比如在第2阶段\",{\"1\":{\"609\":1}}],[\"比如在a类中有a方法和b方法\",{\"1\":{\"182\":1}}],[\"比如注册中心大家都用同一个\",{\"1\":{\"598\":1}}],[\"比如系统部分机房发生断电或断网故障\",{\"1\":{\"572\":1}}],[\"比如部分节点网络出了问题\",{\"1\":{\"571\":1}}],[\"比如集群部署\",{\"1\":{\"553\":1}}],[\"比如安装jdk时设置的环境变量\",{\"1\":{\"549\":1}}],[\"比如说限制连接数等\",{\"1\":{\"977\":1}}],[\"比如说加索引\",{\"1\":{\"977\":1}}],[\"比如说我们想把用户表拆分成\",{\"1\":{\"961\":1}}],[\"比如说用户表\",{\"1\":{\"961\":1}}],[\"比如说一个动物抽象类\",{\"1\":{\"657\":1}}],[\"比如说大量的线程同时并发修改一个atomicinteger\",{\"1\":{\"312\":1}}],[\"比如说\",{\"1\":{\"241\":1,\"590\":1,\"713\":1,\"961\":1}}],[\"比如说单个数据库的性能达到瓶颈或者数据量太大的时候\",{\"1\":{\"183\":1}}],[\"比如看标题链接\",{\"1\":{\"230\":1}}],[\"比如登录不登录之类\",{\"1\":{\"156\":1}}],[\"比如\",{\"1\":{\"71\":1,\"93\":1,\"217\":1,\"242\":1,\"417\":1,\"500\":1,\"547\":1,\"635\":1,\"636\":2,\"637\":1,\"639\":1,\"660\":1,\"688\":1,\"695\":1,\"702\":1,\"713\":1,\"726\":1,\"738\":1,\"740\":1,\"815\":1,\"892\":1,\"894\":1,\"900\":1,\"904\":1,\"914\":1,\"918\":1,\"923\":1,\"927\":1,\"930\":1,\"932\":3,\"935\":2,\"972\":1,\"1005\":1,\"1150\":1,\"1161\":1}}],[\"比如2小时\",{\"1\":{\"70\":1}}],[\"判断依据\",{\"1\":{\"1012\":1}}],[\"判断哪些数据已经刷盘\",{\"1\":{\"899\":2}}],[\"判断你输入的这个\",{\"1\":{\"895\":1}}],[\"判断请求url和数据是否和上一次相同\",{\"1\":{\"889\":1}}],[\"判断字符串是否为null及size小于0\",{\"1\":{\"876\":1}}],[\"判断字符串是不是为空\",{\"1\":{\"252\":1}}],[\"判断如已过期会缓存重建\",{\"1\":{\"867\":1}}],[\"判断在可能是hash冲突到了\",{\"1\":{\"866\":1}}],[\"判断当前有没有没有就new\",{\"1\":{\"700\":1}}],[\"判断场景自动配置那些生效那些没生效\",{\"1\":{\"483\":1}}],[\"判断表达式\",{\"1\":{\"430\":1}}],[\"判断\",{\"1\":{\"352\":3,\"430\":1,\"688\":1,\"897\":1}}],[\"判断是否为最新\",{\"1\":{\"305\":1}}],[\"判断集合是不是空\",{\"1\":{\"252\":1}}],[\"判断没有用雷神的\",{\"1\":{\"234\":1}}],[\"判断用户是否登陆\",{\"1\":{\"156\":1}}],[\"判断用户登录状态\",{\"1\":{\"156\":1}}],[\"判断和释放锁之间\",{\"1\":{\"87\":1}}],[\"参考答案如下\",{\"1\":{\"929\":1}}],[\"参考答案\",{\"1\":{\"919\":1}}],[\"参考大众点评做的\",{\"1\":{\"869\":1}}],[\"参考的是java8的java\",{\"1\":{\"590\":1}}],[\"参考\",{\"0\":{\"1007\":1},\"1\":{\"388\":1,\"1005\":1}}],[\"参考京东\",{\"1\":{\"156\":1}}],[\"参见\",{\"1\":{\"383\":1}}],[\"参照官方文档\",{\"1\":{\"267\":1}}],[\"参照9001新建9002\",{\"1\":{\"256\":1,\"594\":1}}],[\"参照别的注解自己写一个\",{\"1\":{\"243\":1}}],[\"参数的值\",{\"1\":{\"959\":1}}],[\"参数的数量只有一个\",{\"1\":{\"755\":1}}],[\"参数传递后\",{\"1\":{\"771\":1}}],[\"参数t\",{\"1\":{\"770\":3}}],[\"参数数量和类型一定要和接口中定义的方法一致\",{\"1\":{\"761\":1}}],[\"参数小括号\",{\"1\":{\"755\":1}}],[\"参数小括号精简\",{\"0\":{\"755\":1}}],[\"参数和是\",{\"1\":{\"752\":2}}],[\"参数是t\",{\"1\":{\"770\":2}}],[\"参数是\",{\"1\":{\"752\":2}}],[\"参数是面试重点\",{\"1\":{\"362\":1}}],[\"参数列表\",{\"1\":{\"750\":1,\"752\":1}}],[\"参数列表不同\",{\"1\":{\"652\":1}}],[\"参数越界\",{\"1\":{\"686\":3}}],[\"参数类型t\",{\"1\":{\"770\":1}}],[\"参数类型\",{\"1\":{\"754\":1}}],[\"参数类型精简\",{\"0\":{\"754\":1}}],[\"参数类型相同\",{\"1\":{\"659\":1}}],[\"参数类型不同\",{\"1\":{\"652\":1}}],[\"参数个数不同\",{\"1\":{\"652\":1}}],[\"参数值\",{\"1\":{\"511\":1}}],[\"参数名=参数值\",{\"1\":{\"511\":1}}],[\"参数会被封装为一个map\",{\"1\":{\"438\":1}}],[\"参数可以使用\",{\"1\":{\"407\":1}}],[\"参数处理\",{\"0\":{\"405\":1}}],[\"参数来配置元空间的最大大小\",{\"1\":{\"383\":1}}],[\"参数不再适用于\",{\"1\":{\"383\":1}}],[\"参数不再起作用\",{\"1\":{\"383\":1}}],[\"参数用于配置永久代的最大大小\",{\"1\":{\"383\":1}}],[\"参数2\",{\"1\":{\"338\":1,\"339\":1}}],[\"参数1\",{\"1\":{\"338\":1,\"339\":1}}],[\"参数e是原内存的值\",{\"1\":{\"306\":1}}],[\"参数总结\",{\"1\":{\"254\":1}}],[\"参数\",{\"1\":{\"252\":1,\"635\":1,\"770\":3,\"929\":1}}],[\"参数先\",{\"1\":{\"240\":1}}],[\"参数含义\",{\"1\":{\"226\":1}}],[\"参数说明\",{\"1\":{\"210\":1}}],[\"参数为锁名字\",{\"1\":{\"115\":1}}],[\"跨服务\",{\"1\":{\"251\":1}}],[\"跨域机制是阻止了数据的跨域获取\",{\"1\":{\"543\":1}}],[\"跨域有多种解决方案\",{\"1\":{\"231\":1}}],[\"跨域\",{\"1\":{\"230\":1,\"231\":1}}],[\"跨请求访问\",{\"1\":{\"156\":1}}],[\"跨来源资源共享\",{\"1\":{\"54\":1}}],[\"让我觉得爽的另外一款软件\",{\"1\":{\"1162\":1}}],[\"让我们开始吧\",{\"1\":{\"1161\":1}}],[\"让我们看看按顺序加锁的情况\",{\"1\":{\"933\":1}}],[\"让我们再看看append方法的源码\",{\"1\":{\"720\":1}}],[\"让我们不再关注具体mq的细节\",{\"1\":{\"594\":1}}],[\"让你有种看不完的感觉\",{\"1\":{\"1150\":1}}],[\"让你可以一键启动\",{\"1\":{\"1005\":1}}],[\"让后来者也能享受到你的学习成果\",{\"1\":{\"1150\":1}}],[\"让读书的过程不那么的枯燥\",{\"1\":{\"1150\":1}}],[\"让自己爱上编程\",{\"1\":{\"1150\":1}}],[\"让其尽可能少地匹配字符\",{\"1\":{\"1020\":1}}],[\"让其他人更方便的使用这个模式\",{\"1\":{\"1150\":1}}],[\"让其他事务得以继续执行\",{\"1\":{\"932\":1}}],[\"让其他线程有机会执行\",{\"1\":{\"650\":1}}],[\"让马上解决\",{\"1\":{\"990\":1}}],[\"让30个\",{\"1\":{\"849\":1}}],[\"让大家排队\",{\"1\":{\"582\":1}}],[\"让所有存活的对象向一端移动\",{\"1\":{\"385\":1}}],[\"让一组线程到达一个屏障\",{\"1\":{\"337\":1}}],[\"让一些线程阻塞直到另一些线程完成一系列操作才被唤醒\",{\"1\":{\"332\":1}}],[\"让定时任务异步执行\",{\"1\":{\"202\":1}}],[\"让用户输入认证信息\",{\"1\":{\"153\":1}}],[\"让网页多长时间\",{\"1\":{\"63\":1}}],[\"配合spring的版本\",{\"1\":{\"1084\":1}}],[\"配合springsecurity实现注解地方放行访问\",{\"1\":{\"889\":1}}],[\"配合方法分隔符使用\",{\"0\":{\"1053\":1}}],[\"配套的提交语句是\",{\"1\":{\"907\":1}}],[\"配了为啥就不用密码了\",{\"1\":{\"798\":1,\"984\":1}}],[\"配了才能实现push代码的时候不需要反复输入自己的github账号密码\",{\"1\":{\"798\":1,\"984\":1}}],[\"配上tomcat\",{\"1\":{\"456\":1}}],[\"配太繁琐\",{\"1\":{\"231\":1}}],[\"配好配置文件\",{\"1\":{\"153\":1}}],[\"配置中\",{\"1\":{\"1005\":1}}],[\"配置中心的文件名是什么\",{\"1\":{\"597\":1}}],[\"配置中心地址\",{\"1\":{\"593\":1}}],[\"配置中心\",{\"0\":{\"596\":1},\"1\":{\"228\":1}}],[\"配置里\",{\"1\":{\"1005\":1}}],[\"配置里选上\",{\"1\":{\"1005\":1}}],[\"配置如下\",{\"1\":{\"1005\":1}}],[\"配置复制到\",{\"1\":{\"1005\":1}}],[\"配置邮箱\",{\"1\":{\"986\":1}}],[\"配置用户名\",{\"1\":{\"986\":1}}],[\"配置的方式是\",{\"1\":{\"905\":1}}],[\"配置的是\",{\"1\":{\"229\":1}}],[\"配置代理\",{\"1\":{\"883\":1}}],[\"配置vue的代理相当于在开发环境下使用一个轻量级的代理服务器\",{\"1\":{\"883\":1}}],[\"配置反向代理服务器\",{\"1\":{\"882\":1}}],[\"配置完后\",{\"1\":{\"861\":1}}],[\"配置让它看上去简洁不少\",{\"1\":{\"726\":1}}],[\"配置只放开了登录接口\",{\"1\":{\"627\":1}}],[\"配置服务名\",{\"1\":{\"608\":1}}],[\"配置自己的\",{\"1\":{\"595\":1}}],[\"配置和管理微服务\",{\"1\":{\"594\":1}}],[\"配置管理和服务管理平台\",{\"1\":{\"594\":1}}],[\"配置更改时自动刷新\",{\"1\":{\"594\":1}}],[\"配置好后能拿到git中yaml的内容\",{\"1\":{\"592\":1}}],[\"配置好路由\",{\"1\":{\"282\":1}}],[\"配置多数据源\",{\"0\":{\"551\":1}}],[\"配置生效覆盖关系\",{\"1\":{\"543\":1}}],[\"配置aop切面\",{\"1\":{\"492\":1}}],[\"配置后置处理器\",{\"1\":{\"489\":1}}],[\"配置后就可根据里面的分\",{\"0\":{\"282\":1}}],[\"配置数据源为例\",{\"0\":{\"485\":1},\"1\":{\"481\":1}}],[\"配置事务增强\",{\"1\":{\"462\":2}}],[\"配置切入点表达式\",{\"1\":{\"462\":1}}],[\"配置扫描器\",{\"1\":{\"462\":1}}],[\"配置视图解析器\",{\"1\":{\"460\":1}}],[\"配置springmvc配置文件的位置\",{\"1\":{\"459\":1}}],[\"配置spring配置文件的位置\",{\"1\":{\"459\":1}}],[\"配置地狱\",{\"1\":{\"451\":1,\"472\":1}}],[\"配置一些xml环境\",{\"1\":{\"451\":1}}],[\"配置一个专门用来进行batch操作的sqlsession\",{\"1\":{\"462\":1}}],[\"配置一个config类\",{\"1\":{\"123\":1}}],[\"配置一个\",{\"1\":{\"95\":1}}],[\"配置try\",{\"1\":{\"352\":1}}],[\"配置跨域\",{\"1\":{\"231\":1}}],[\"配置当次请求允许跨域\",{\"1\":{\"231\":1}}],[\"配置日志\",{\"1\":{\"229\":1}}],[\"配置标志位\",{\"1\":{\"229\":1}}],[\"配置文件也可以直接导入到\",{\"1\":{\"981\":1}}],[\"配置文件所在的组\",{\"1\":{\"598\":1}}],[\"配置文件详解\",{\"0\":{\"597\":1}}],[\"配置文件热部署\",{\"1\":{\"546\":1}}],[\"配置文件中\",{\"1\":{\"522\":1}}],[\"配置文件中debug=true开启自动配置报告\",{\"1\":{\"483\":1}}],[\"配置文件失效\",{\"1\":{\"229\":1}}],[\"配置文件\",{\"0\":{\"517\":1},\"1\":{\"229\":1,\"598\":1}}],[\"配置文档中修改存活时间\",{\"1\":{\"123\":1}}],[\"配置小点\",{\"1\":{\"229\":1}}],[\"配置信息等\",{\"1\":{\"706\":1}}],[\"配置信息\",{\"1\":{\"222\":1}}],[\"配置镜像加速\",{\"1\":{\"208\":1}}],[\"配置类中遍历上面类暴露到\",{\"1\":{\"889\":1}}],[\"配置类组件之间有依赖关系\",{\"1\":{\"517\":1}}],[\"配置类放在\",{\"1\":{\"509\":1}}],[\"配置类里面使用\",{\"1\":{\"504\":1}}],[\"配置类\",{\"1\":{\"123\":1,\"478\":1}}],[\"配置\",{\"0\":{\"10\":1,\"148\":1,\"211\":1,\"828\":1,\"1005\":1},\"1\":{\"150\":1,\"211\":1,\"267\":1,\"517\":1,\"543\":1,\"545\":1,\"554\":1,\"595\":1,\"599\":2,\"608\":1,\"726\":3,\"883\":1,\"981\":1,\"986\":1,\"1005\":6,\"1041\":1}}],[\"他山之石可以攻玉\",{\"0\":{\"1185\":1}}],[\"他本身就已经是一个优秀的人了\",{\"1\":{\"1139\":1}}],[\"他和我说\",{\"1\":{\"1139\":1}}],[\"他已进入今日头条工作\",{\"1\":{\"1127\":1}}],[\"他如果找你谈话\",{\"1\":{\"1119\":1}}],[\"他如果不理你\",{\"1\":{\"1119\":1}}],[\"他今年拿\",{\"1\":{\"1103\":1}}],[\"他才要检测\",{\"1\":{\"932\":1}}],[\"他购买了一门课程\",{\"1\":{\"927\":1}}],[\"他是要单独去加载和实例化的\",{\"1\":{\"779\":1}}],[\"他是java提供的锁\",{\"1\":{\"329\":1}}],[\"他必须知道它持有的所有对象的具体类型\",{\"1\":{\"717\":1}}],[\"他表示的是正在创建的对象\",{\"1\":{\"658\":1}}],[\"他的父项目\",{\"1\":{\"476\":1}}],[\"他里面包含configuration以及executor\",{\"1\":{\"465\":1}}],[\"他就是尝试使用分段cas以及自动分段迁移的方式来大幅度提升多线程高并发执行cas操作的性能\",{\"1\":{\"312\":1}}],[\"他们也是学生\",{\"1\":{\"1152\":1}}],[\"他们也会打游戏\",{\"1\":{\"1151\":1}}],[\"他们会合理的安排时间\",{\"1\":{\"1151\":1}}],[\"他们的区别是什么\",{\"1\":{\"1085\":1}}],[\"他们都是\",{\"1\":{\"920\":1}}],[\"他们都可以使一个线程修改后的变量立即对其它线程可见\",{\"1\":{\"297\":1}}],[\"他们简单区别就是\",{\"1\":{\"486\":1}}],[\"他们之间不能存在数据依赖的问题\",{\"1\":{\"295\":1}}],[\"他都能做\",{\"1\":{\"156\":1}}],[\"他登录了代表这个集团的产品就登录过了\",{\"1\":{\"153\":1}}],[\"他将无法收到http的响应报文\",{\"1\":{\"46\":1}}],[\"记笔记的一些工具\",{\"1\":{\"1145\":1}}],[\"记到了\",{\"1\":{\"1083\":1}}],[\"记为高水位\",{\"1\":{\"935\":1}}],[\"记为\",{\"1\":{\"935\":1}}],[\"记两条\",{\"1\":{\"900\":1}}],[\"记录作者对这个blog的很多思路\",{\"1\":{\"1078\":1}}],[\"记录一条交易日志\",{\"1\":{\"931\":1}}],[\"记录上的最新值\",{\"1\":{\"906\":1}}],[\"记录\",{\"1\":{\"903\":1,\"1144\":1}}],[\"记录了事务执行前的数据\",{\"1\":{\"902\":1}}],[\"记录的是这个语句的原始逻辑\",{\"1\":{\"900\":1}}],[\"记录的是\",{\"1\":{\"900\":1}}],[\"记录的是逻辑日志\",{\"1\":{\"900\":1}}],[\"记录的是物理日志\",{\"1\":{\"899\":1}}],[\"记录次数以及\",{\"1\":{\"887\":1}}],[\"记录前一个数据和后一个数据\",{\"1\":{\"688\":1}}],[\"记住\",{\"1\":{\"1144\":1}}],[\"记住原则二\",{\"1\":{\"1132\":1}}],[\"记住一些原则\",{\"1\":{\"1130\":1}}],[\"记住一个核心思想\",{\"1\":{\"153\":1}}],[\"记住wtg里面装wepe看\",{\"1\":{\"1026\":1}}],[\"记住路由的先后顺序\",{\"1\":{\"591\":1}}],[\"记住还需保证冗余字段的数据一致\",{\"1\":{\"250\":1}}],[\"记忆混乱了\",{\"1\":{\"240\":1}}],[\"记一下最后一个\",{\"1\":{\"208\":1}}],[\"记一下\",{\"1\":{\"178\":1}}],[\"记得给自己找一个舒适的学习环境\",{\"1\":{\"1148\":1}}],[\"记得我有一次这么回答一个朋友的时候\",{\"1\":{\"1139\":1}}],[\"记得把\",{\"1\":{\"1005\":1}}],[\"记得需要重新右键commit打开一个新的框才能看到效果\",{\"1\":{\"993\":1}}],[\"记得重启一下\",{\"1\":{\"981\":1}}],[\"记得设置一下序列化对象\",{\"1\":{\"872\":1}}],[\"记得改\",{\"1\":{\"796\":1}}],[\"记得带上\",{\"1\":{\"566\":1}}],[\"记得回收\",{\"1\":{\"157\":1}}],[\"记得看了个文章还是视频\",{\"1\":{\"144\":1}}],[\"记得alias最后要带上\",{\"1\":{\"73\":1}}],[\"待遇\",{\"1\":{\"1150\":1}}],[\"待吸收美团的过来\",{\"1\":{\"738\":1}}],[\"待补\",{\"1\":{\"344\":1}}],[\"待实现的功能在说明中会简略说明\",{\"1\":{\"229\":1}}],[\"待验证\",{\"1\":{\"152\":1}}],[\"待定\",{\"1\":{\"93\":1}}],[\"搜狗输入法的皮肤我用的matrix\",{\"1\":{\"1006\":1}}],[\"搜名字\",{\"1\":{\"996\":1}}],[\"搜出来第一条会有副红色眼镜\",{\"1\":{\"985\":1}}],[\"搜一下以前的帖子\",{\"1\":{\"480\":1}}],[\"搜\",{\"1\":{\"148\":1,\"241\":1,\"782\":1,\"1005\":1}}],[\"搜索可以用正则\",{\"0\":{\"1047\":1}}],[\"搜索树\",{\"1\":{\"913\":1}}],[\"搜索和分析海量数据\",{\"1\":{\"262\":1}}],[\"搜索数据才能读到\",{\"1\":{\"257\":1}}],[\"搜索技巧\",{\"1\":{\"62\":1}}],[\"搜索\",{\"0\":{\"1050\":1},\"1\":{\"62\":1,\"1161\":1}}],[\"扩容\",{\"1\":{\"865\":1}}],[\"扩容的临界值\",{\"1\":{\"703\":2}}],[\"扩容完顺序会逆过来\",{\"1\":{\"694\":1}}],[\"扩完后\",{\"1\":{\"693\":1}}],[\"扩大成\",{\"1\":{\"147\":1}}],[\"扩大作用域\",{\"1\":{\"147\":1}}],[\"扩展类加载器\",{\"1\":{\"679\":1}}],[\"扩展性\",{\"1\":{\"52\":1}}],[\"扩展\",{\"0\":{\"11\":1,\"12\":1,\"428\":1,\"559\":1},\"1\":{\"12\":1,\"428\":1,\"893\":1}}],[\"负载访问\",{\"1\":{\"574\":1}}],[\"负载均衡到指定服务\",{\"1\":{\"591\":1}}],[\"负载均衡\",{\"1\":{\"71\":1,\"144\":1,\"228\":1,\"563\":1,\"573\":1,\"824\":1,\"959\":1}}],[\"负责存储相关的具体事宜\",{\"1\":{\"900\":1}}],[\"负责存储用户的认证信息并负责验证用户的身份\",{\"1\":{\"153\":1}}],[\"负责数据的存储和提取\",{\"1\":{\"892\":1}}],[\"负责日志的搜素\",{\"1\":{\"736\":1}}],[\"负责日志的收集和清洗\",{\"1\":{\"736\":1}}],[\"负责执行的\",{\"1\":{\"679\":1}}],[\"负责权限校验的过滤器\",{\"1\":{\"619\":1}}],[\"负责处理我们在登陆页面填写了用户名密码后的登陆请求\",{\"1\":{\"619\":1}}],[\"负责解析请求\",{\"1\":{\"543\":1}}],[\"负责将原生httpsession\",{\"1\":{\"147\":1}}],[\"样的去官网摸索\",{\"1\":{\"146\":1}}],[\"样式文件\",{\"1\":{\"46\":1}}],[\"严谨点可以\",{\"1\":{\"139\":1}}],[\"微博私信等\",{\"1\":{\"1128\":1}}],[\"微观是spring框架\",{\"1\":{\"468\":1}}],[\"微服务如有一起用\",{\"1\":{\"823\":1}}],[\"微服务架构中网关的位置\",{\"1\":{\"590\":1}}],[\"微服务架构下\",{\"1\":{\"183\":1}}],[\"微服务b和微服务c又调用其它的微服务\",{\"1\":{\"581\":1}}],[\"微服务信息完善\",{\"0\":{\"567\":1}}],[\"微服务工程构建\",{\"0\":{\"558\":1}}],[\"微服务是一种架构风格\",{\"1\":{\"554\":1}}],[\"微服务理解\",{\"1\":{\"553\":1}}],[\"微服务\",{\"1\":{\"553\":1,\"598\":1}}],[\"微服务之间互相调用传输数\",{\"1\":{\"251\":1}}],[\"微服务因为模块很多需要\",{\"1\":{\"202\":1}}],[\"微服务互相调用\",{\"1\":{\"164\":1}}],[\"微服务模块在上线之前乃至上线之后都会进行压力测试\",{\"1\":{\"99\":1}}],[\"微信上的文章很多都来自于博客\",{\"1\":{\"1145\":1}}],[\"微信公众号\",{\"1\":{\"1145\":1}}],[\"微信服务器等\",{\"1\":{\"136\":1}}],[\"微信\",{\"1\":{\"136\":1,\"196\":1}}],[\"允许一个线程同时监听和处理多个网络连接的\",{\"1\":{\"849\":1}}],[\"允许多个用户同时登录和操作\",{\"1\":{\"785\":1}}],[\"允许把这种二进制流存到磁盘中\",{\"1\":{\"688\":1}}],[\"允许把内存中的java对象转换成与平台无关的二进制流\",{\"1\":{\"688\":1}}],[\"允许不同副本同步的延时就是软状态的体现\",{\"1\":{\"572\":1}}],[\"允许损失部分可用性\",{\"1\":{\"572\":2}}],[\"允许的创建线程数量为\",{\"1\":{\"366\":1}}],[\"允许的请求队列长度为\",{\"1\":{\"366\":1}}],[\"允许用户授权第三方移动应用访问他们存储在另外的服务提供者上的信息\",{\"1\":{\"136\":1}}],[\"允许临时脏数据可忽略\",{\"1\":{\"118\":1}}],[\"校验密码\",{\"1\":{\"883\":1}}],[\"校验验证码\",{\"1\":{\"883\":1}}],[\"校验其他接口\",{\"0\":{\"627\":1}}],[\"校验时会根据这个秘钥校验\",{\"1\":{\"626\":1}}],[\"校验时间戳是不是60s内\",{\"1\":{\"129\":1}}],[\"校验表单\",{\"1\":{\"134\":1}}],[\"难的就是前端的\",{\"1\":{\"238\":1}}],[\"难道再维护一个字段放盐\",{\"1\":{\"132\":1}}],[\"难点在于如何确定同一个人的同一个请求\",{\"1\":{\"889\":1}}],[\"难点\",{\"1\":{\"111\":1,\"685\":1}}],[\"预定了这次分享的大部分其实都是学生\",{\"1\":{\"1150\":1}}],[\"预定酒店后收到短信通知等\",{\"1\":{\"543\":1,\"1081\":1}}],[\"预备知识\",{\"1\":{\"804\":1}}],[\"预热方式就是把为了保护系统\",{\"1\":{\"602\":1}}],[\"预热\",{\"0\":{\"602\":1},\"1\":{\"867\":1}}],[\"预计\",{\"1\":{\"283\":1}}],[\"预留的资源就是转账资金\",{\"1\":{\"186\":1}}],[\"预先计算\",{\"1\":{\"132\":1}}],[\"预测光猫只能那么多人连超过就坏数据包堆积\",{\"1\":{\"77\":1}}],[\"彩虹表\",{\"1\":{\"132\":1}}],[\"抗修改性\",{\"1\":{\"132\":1}}],[\"哪来的缓存\",{\"1\":{\"1162\":1}}],[\"哪个时间段做什么都详细的列出来\",{\"1\":{\"1142\":1}}],[\"哪个隔离级别都有它自己的使用场景\",{\"1\":{\"905\":1}}],[\"哪个微服务需要回滚的就得加上\",{\"1\":{\"608\":1}}],[\"哪怕内存不足时\",{\"1\":{\"660\":1}}],[\"哪怕只修改1个字节\",{\"1\":{\"132\":1}}],[\"哪些数据还没有\",{\"1\":{\"899\":2}}],[\"哪些点想看就可以看他公众号的讲义\",{\"1\":{\"877\":1}}],[\"哪些情况会出发降级\",{\"1\":{\"582\":1}}],[\"哪些情况需要防止\",{\"0\":{\"164\":1}}],[\"哪些模块组成\",{\"0\":{\"499\":1}}],[\"哪天完全脱离自己写\",{\"1\":{\"130\":1}}],[\"√\",{\"1\":{\"131\":1,\"305\":1}}],[\"密密麻麻几十页\",{\"1\":{\"899\":1}}],[\"密码策略相关参数\",{\"1\":{\"802\":1}}],[\"密码设置必须要大小写字母数字和特殊符号\",{\"1\":{\"792\":1,\"802\":1}}],[\"密码加密校验问题\",{\"0\":{\"625\":1}}],[\"密码加密器\",{\"1\":{\"133\":1}}],[\"密码的后台默认实现改为落库查询\",{\"1\":{\"624\":1}}],[\"密码存数据库加密分\",{\"1\":{\"131\":1}}],[\"密集型\",{\"1\":{\"99\":3}}],[\"小巧\",{\"1\":{\"1150\":1}}],[\"小公司里生存了多年\",{\"1\":{\"1109\":1}}],[\"小托盘\",{\"1\":{\"959\":2}}],[\"小数据量的表不需要加索引\",{\"1\":{\"936\":1}}],[\"小吕在入职新公司的时候\",{\"1\":{\"925\":1}}],[\"小结\",{\"0\":{\"902\":1,\"908\":1,\"919\":1,\"925\":1,\"929\":1,\"933\":1}}],[\"小时以下\",{\"1\":{\"1001\":1}}],[\"小时左右\",{\"1\":{\"1001\":1}}],[\"小时\",{\"1\":{\"893\":1}}],[\"小写字母的总个数\",{\"1\":{\"802\":1}}],[\"小写字母还是大小写混合\",{\"1\":{\"60\":1}}],[\"小不忍则乱大谋\",{\"1\":{\"688\":1}}],[\"小处着手的意思是比喻既要从全局和长远的观点出发去考虑问题\",{\"1\":{\"688\":1}}],[\"小技巧\",{\"1\":{\"597\":1,\"725\":1,\"963\":1,\"1079\":1}}],[\"小白都能看得懂的java虚拟机内存模型\",{\"1\":{\"388\":1}}],[\"小于等于\",{\"1\":{\"278\":1}}],[\"小于\",{\"1\":{\"278\":1,\"916\":1}}],[\"小div\",{\"1\":{\"220\":1}}],[\"小\",{\"1\":{\"208\":1}}],[\"小米商城\",{\"1\":{\"206\":1}}],[\"小傻瓜\",{\"1\":{\"128\":1}}],[\"授权获取重定向到自己url\",{\"1\":{\"138\":1}}],[\"授权服务器\",{\"1\":{\"136\":1}}],[\"授权\",{\"1\":{\"126\":1,\"614\":1,\"615\":1,\"630\":2}}],[\"认清自己的第二点是\",{\"1\":{\"1140\":1}}],[\"认清自己最关键的一点是\",{\"1\":{\"1139\":1}}],[\"认清自己\",{\"0\":{\"1138\":1},\"1\":{\"1137\":1}}],[\"认为扫描行数是\",{\"1\":{\"922\":1}}],[\"认为内存不足时\",{\"1\":{\"636\":1}}],[\"认真听\",{\"1\":{\"162\":1}}],[\"认证过滤器\",{\"1\":{\"629\":1}}],[\"认证登陆接口的账号\",{\"1\":{\"624\":1}}],[\"认证实现\",{\"0\":{\"624\":1}}],[\"认证流程图\",{\"0\":{\"620\":1}}],[\"认证和授权也是springsecurity作为安全框架的核心功能\",{\"1\":{\"615\":2}}],[\"认证\",{\"1\":{\"614\":1,\"615\":1,\"626\":1,\"630\":1}}],[\"认证服务器通常使用数据库来存储用户的认证信息\",{\"1\":{\"153\":1}}],[\"认证中心\",{\"1\":{\"126\":1}}],[\"认识到人外有人\",{\"1\":{\"1140\":1}}],[\"认识\",{\"0\":{\"79\":1}}],[\"营养价值不大\",{\"1\":{\"126\":1}}],[\"跳上一个浏览过的文件\",{\"1\":{\"1074\":1}}],[\"跳到上次的光标位置\",{\"1\":{\"1074\":1}}],[\"跳到指定行\",{\"0\":{\"1069\":1}}],[\"跳表\",{\"1\":{\"916\":1}}],[\"跳对应的catch中处理\",{\"1\":{\"686\":1}}],[\"跳过单元测试\",{\"0\":{\"557\":1}}],[\"跳过穿透\",{\"1\":{\"261\":1}}],[\"跳过\",{\"1\":{\"198\":1}}],[\"跳回之前网页\",{\"1\":{\"135\":1}}],[\"跳了\",{\"1\":{\"126\":1}}],[\"跳转取到后刷新页面就没了\",{\"1\":{\"98\":1,\"536\":1}}],[\"跳转到地址栏\",{\"1\":{\"62\":1}}],[\"选好方向\",{\"1\":{\"1150\":1}}],[\"选方向一定要选自己感兴趣的方向\",{\"1\":{\"1139\":1}}],[\"选上\",{\"1\":{\"1005\":1}}],[\"选中从jar包找\",{\"0\":{\"1064\":1}}],[\"选中报错\",{\"1\":{\"981\":1}}],[\"选中下一个同名单词\",{\"1\":{\"215\":1}}],[\"选\",{\"0\":{\"572\":1},\"1\":{\"1005\":1}}],[\"选项表示在提交时显示更详细的信息\",{\"1\":{\"990\":1}}],[\"选项表示自动将所有已修改的文件添加到暂存区\",{\"1\":{\"990\":1}}],[\"选项我猜是\",{\"1\":{\"782\":1}}],[\"选项\",{\"1\":{\"537\":1}}],[\"选项卡\",{\"1\":{\"537\":1}}],[\"选择部署目录\",{\"1\":{\"1161\":1}}],[\"选择giteepages\",{\"1\":{\"1161\":1}}],[\"选择远比努力重要的前提是你这个选择得正确\",{\"1\":{\"1139\":1}}],[\"选择远比努力重要\",{\"1\":{\"1139\":1}}],[\"选择forr会生成递减\",{\"0\":{\"1062\":1}}],[\"选择fori会生成递加\",{\"0\":{\"1062\":1}}],[\"选择要查询的列以及进行计算和聚合的函数\",{\"1\":{\"963\":1}}],[\"选择器\",{\"1\":{\"712\":1}}],[\"选择器允许一个线程同时监听多个通道的事件\",{\"1\":{\"712\":1}}],[\"选择你想要设置为程序根目录的目录\",{\"1\":{\"537\":1}}],[\"选择你要修改的运行配置\",{\"1\":{\"537\":1}}],[\"选择\",{\"1\":{\"537\":2}}],[\"选择vue2\",{\"1\":{\"219\":1}}],[\"选择一个最优的cdn服务器来响应你的请求\",{\"1\":{\"77\":1}}],[\"选一个就有个title标签后面有个×\",{\"1\":{\"126\":1}}],[\"面的时候\",{\"1\":{\"1144\":1}}],[\"面向简历编程\",{\"1\":{\"1111\":1}}],[\"面向过程代码松散\",{\"1\":{\"678\":1}}],[\"面向过程是\",{\"1\":{\"678\":1}}],[\"面向过程让计算机有步骤地顺序做一件事\",{\"1\":{\"678\":1}}],[\"面向对象的思想\",{\"1\":{\"1150\":1}}],[\"面向对象的方式首先会定义一个类\",{\"1\":{\"678\":1}}],[\"面向对象\",{\"0\":{\"686\":1}}],[\"面向对象代码强调高内聚\",{\"1\":{\"678\":1}}],[\"面向对象相对面向过程更适合解决规模较大的问题\",{\"1\":{\"678\":1}}],[\"面向对象多态\",{\"1\":{\"658\":1}}],[\"面向切面的编程\",{\"1\":{\"638\":1}}],[\"面向切面\",{\"1\":{\"465\":1}}],[\"面\",{\"1\":{\"543\":1}}],[\"面试遇到不会的\",{\"0\":{\"1133\":1}}],[\"面试的意义不就是看这个人能不能胜任工作吗\",{\"1\":{\"1132\":1}}],[\"面试mai题\",{\"0\":{\"977\":1}}],[\"面试官的下个问题很可能是你在项目c里是怎样用的\",{\"1\":{\"1134\":1}}],[\"面试官就会按他的思路问你\",{\"1\":{\"1134\":1}}],[\"面试官\",{\"1\":{\"1134\":1}}],[\"面试官问离职原因\",{\"0\":{\"1123\":1}}],[\"面试官很可能会问你这个问题\",{\"1\":{\"708\":1}}],[\"面试官几乎是必定会问这两个分布式相关的理论\",{\"1\":{\"571\":1}}],[\"面试官提示\",{\"1\":{\"380\":1}}],[\"面试题\",{\"0\":{\"389\":1,\"912\":1,\"975\":1,\"976\":1},\"1\":{\"685\":1,\"687\":1}}],[\"面试中比较常问的是\",{\"1\":{\"381\":1}}],[\"面试中小厂就没必要准备了\",{\"1\":{\"381\":1}}],[\"面试\",{\"0\":{\"364\":1}}],[\"面试者至少要知道一下概念\",{\"1\":{\"328\":1}}],[\"面试这里是高频考点\",{\"1\":{\"162\":1}}],[\"面试就喜欢问认证\",{\"1\":{\"126\":1}}],[\"面试常问1\",{\"1\":{\"47\":1}}],[\"面包屑导航\",{\"1\":{\"126\":1}}],[\"找资料的途径\",{\"1\":{\"1145\":1}}],[\"找工作\",{\"1\":{\"1150\":1}}],[\"找工作的时候\",{\"1\":{\"1141\":1}}],[\"找工作好找么\",{\"1\":{\"1139\":1}}],[\"找工作过程中你会频繁请假\",{\"1\":{\"1119\":1}}],[\"找工作到底该看什么\",{\"0\":{\"1105\":1}}],[\"找起来会比较容易\",{\"1\":{\"1005\":1}}],[\"找有没有\",{\"1\":{\"1003\":1}}],[\"找出消耗高的\",{\"1\":{\"977\":1}}],[\"找出答案\",{\"1\":{\"241\":1}}],[\"找位置\",{\"1\":{\"899\":1}}],[\"找文件夹\",{\"1\":{\"782\":1}}],[\"找文件\",{\"1\":{\"782\":1}}],[\"找一找\",{\"1\":{\"713\":1}}],[\"找到自己工作状态最好的时间去工作等等\",{\"1\":{\"1142\":1}}],[\"找到最适合自己的作息时间去休息\",{\"1\":{\"1142\":1}}],[\"找到最近的一次全量备份\",{\"1\":{\"901\":1}}],[\"找到符合条件的行数据\",{\"1\":{\"966\":1}}],[\"找到第一个满足条件的记录\",{\"1\":{\"924\":1}}],[\"找到之后再拿出算盘计算\",{\"1\":{\"899\":1}}],[\"找到这一行\",{\"1\":{\"898\":1}}],[\"找到这条语句之后\",{\"1\":{\"897\":1}}],[\"找到匹配的\",{\"1\":{\"543\":1}}],[\"找到\",{\"1\":{\"537\":1,\"914\":1}}],[\"找到标记为\",{\"1\":{\"482\":2}}],[\"找到容器镜像服务\",{\"1\":{\"208\":1}}],[\"找了很多篇文章\",{\"1\":{\"1157\":1}}],[\"找了很多教程都没解决的计网问题\",{\"1\":{\"76\":1}}],[\"找了很久\",{\"1\":{\"454\":1,\"462\":1}}],[\"找不到数据的\",{\"1\":{\"125\":1}}],[\"究其原因是\",{\"1\":{\"125\":2}}],[\"序列化按顺序执行\",{\"1\":{\"854\":1}}],[\"序列化并不保存静态变量\",{\"1\":{\"688\":2}}],[\"序列化保存的是对象的状态\",{\"1\":{\"688\":2}}],[\"序列化需要加常量id\",{\"1\":{\"688\":1}}],[\"序列化这个对象\",{\"1\":{\"683\":1}}],[\"序列化时bean需要返回的实现类\",{\"1\":{\"148\":1}}],[\"序列化\",{\"1\":{\"125\":2,\"640\":1,\"686\":1,\"688\":1}}],[\"序列号能够保证数据包不重复\",{\"1\":{\"57\":1}}],[\"序列号和确认应答\",{\"1\":{\"56\":1}}],[\"被ignore的文件在idea里显示的是金黄色的\",{\"1\":{\"987\":1}}],[\"被union\",{\"1\":{\"947\":1}}],[\"被阻塞\",{\"1\":{\"929\":1}}],[\"被按顺序改成了\",{\"1\":{\"906\":1}}],[\"被直接缓存在内存中\",{\"1\":{\"894\":1}}],[\"被系统强行杀掉\",{\"1\":{\"893\":1}}],[\"被修饰的方法在接口中可以默认实现\",{\"1\":{\"747\":1}}],[\"被声明为final\",{\"1\":{\"725\":1}}],[\"被解释为\",{\"1\":{\"706\":1}}],[\"被线程\",{\"1\":{\"694\":1}}],[\"被代理类\",{\"1\":{\"688\":1}}],[\"被final修饰的变量是常量\",{\"1\":{\"662\":1}}],[\"被gcroot强引用=gcroot对象来说\",{\"1\":{\"660\":1}}],[\"被security拦截业务接口\",{\"1\":{\"624\":1}}],[\"被synchronized修饰的代码是单线程执行的\",{\"1\":{\"329\":1}}],[\"被\",{\"1\":{\"568\":1,\"892\":1,\"904\":1,\"930\":1,\"962\":1}}],[\"被挂起的线程又会自动唤醒\",{\"1\":{\"346\":1}}],[\"被拆分成了3个指令\",{\"1\":{\"290\":1}}],[\"被创建时\",{\"1\":{\"152\":1}}],[\"被回收掉后rediscacheconfiguration的final属性变量所得到的值还会保留吗\",{\"1\":{\"125\":1}}],[\"被抓包后accesstoken容易被利用爬\",{\"1\":{\"70\":1}}],[\"则使用\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"则使用了thymeleaf的url表达式生成相对于当前请求上下文的css文件url\",{\"1\":{\"539\":1}}],[\"则结果将被丢弃\",{\"1\":{\"1021\":1}}],[\"则报错\",{\"1\":{\"1009\":1}}],[\"则跳过该步骤\",{\"1\":{\"1009\":1}}],[\"则mysql会使用主键作为聚簇索引进行数据的物理存储和访问\",{\"1\":{\"967\":1}}],[\"则mysql将使用默认长度1来定义该字段\",{\"1\":{\"963\":1}}],[\"则查询结果将随机返回一个记录\",{\"1\":{\"959\":1}}],[\"则更常用\",{\"1\":{\"959\":1}}],[\"则不同\",{\"1\":{\"956\":1}}],[\"则必须等事务\",{\"1\":{\"930\":1}}],[\"则表结构被改过\",{\"1\":{\"929\":1}}],[\"则表示全部采集\",{\"1\":{\"594\":1}}],[\"则很快能够执行完成\",{\"1\":{\"929\":1}}],[\"则其他线程写\",{\"1\":{\"928\":1}}],[\"则其他事务必须等待该事务释放锁之后才能进行修改操作\",{\"1\":{\"906\":1}}],[\"则数据库就会一直保持\",{\"1\":{\"927\":1}}],[\"则往往不容易保证有序插入\",{\"1\":{\"918\":1}}],[\"则需要先搜索\",{\"1\":{\"917\":1}}],[\"则需要用户去手动释放锁\",{\"1\":{\"352\":1}}],[\"则只要\",{\"1\":{\"918\":1}}],[\"则只需要在\",{\"1\":{\"918\":1}}],[\"则只需要搜索\",{\"1\":{\"917\":1}}],[\"则只能在同一会话\",{\"1\":{\"156\":1}}],[\"则提交事务\",{\"1\":{\"907\":1}}],[\"则在事务\",{\"1\":{\"905\":1}}],[\"则\",{\"1\":{\"905\":3}}],[\"则一直使用同一个连接\",{\"1\":{\"893\":1}}],[\"则回调时返回null\",{\"1\":{\"836\":1}}],[\"则删除这个元素\",{\"1\":{\"768\":1}}],[\"则每一处实现都需要更改\",{\"1\":{\"760\":1}}],[\"则每一个参数的类型都要省略\",{\"1\":{\"754\":1}}],[\"则返回1或0\",{\"1\":{\"959\":1}}],[\"则返回\",{\"1\":{\"959\":1}}],[\"则返回值为\",{\"0\":{\"940\":2}}],[\"则返回此字符串在常量池中的引用\",{\"1\":{\"723\":1}}],[\"则返回状态\",{\"1\":{\"67\":1}}],[\"则存储了堆上\",{\"1\":{\"722\":1}}],[\"则会进行默认赋值\",{\"1\":{\"696\":1}}],[\"则会发生精度溢出\",{\"1\":{\"648\":1}}],[\"则hashcode\",{\"1\":{\"691\":1}}],[\"则可以考虑先在从库添加\",{\"1\":{\"976\":1}}],[\"则可以\",{\"1\":{\"688\":1}}],[\"则可以避免在每个使用的子项目里都声明一个版本号\",{\"1\":{\"556\":1}}],[\"则内存空间足够\",{\"1\":{\"660\":1}}],[\"则是从上级目录中找啦\",{\"1\":{\"1009\":1}}],[\"则是\",{\"1\":{\"918\":1}}],[\"则是提交事务并自动启动下一个事务\",{\"1\":{\"907\":1}}],[\"则是延伸出来的一种广泛应用于产品开发中的技术\",{\"1\":{\"639\":1}}],[\"则是不带返回值\",{\"1\":{\"374\":1}}],[\"则以vm\",{\"1\":{\"549\":1}}],[\"则后者会覆盖前者\",{\"1\":{\"543\":1}}],[\"则直接生效\",{\"1\":{\"543\":1}}],[\"则无需设置拦截路径\",{\"1\":{\"534\":1}}],[\"则根本无法找到usermapper这个组件\",{\"1\":{\"531\":1}}],[\"则新建线程\",{\"1\":{\"365\":1}}],[\"则该对象会被垃圾回收机制回收\",{\"1\":{\"125\":1}}],[\"链表长度超过一定阈值时\",{\"1\":{\"740\":1}}],[\"链表中的节点是一个个的\",{\"1\":{\"722\":1}}],[\"链表变为了\",{\"1\":{\"694\":1}}],[\"链表为空\",{\"1\":{\"694\":2}}],[\"链表成环的场景通常是由于链表的插入\",{\"1\":{\"694\":1}}],[\"链表和红黑树转换的时候会抛出类型转化异常\",{\"1\":{\"682\":1}}],[\"链式\",{\"1\":{\"216\":1,\"372\":1}}],[\"链式调用就行\",{\"1\":{\"513\":1}}],[\"链式调用\",{\"1\":{\"125\":1}}],[\"链路追踪\",{\"1\":{\"174\":1}}],[\"链接\",{\"1\":{\"2\":1,\"14\":1,\"242\":1,\"379\":1,\"380\":1,\"383\":1,\"662\":1,\"670\":1,\"671\":1,\"696\":1,\"773\":1,\"998\":1,\"1161\":1}}],[\"按ctrl点击可以打开explorer\",{\"0\":{\"1073\":1}}],[\"按ctrl+d退出数据库后输入\",{\"1\":{\"793\":1,\"803\":1}}],[\"按第一次打开的顺序切换\",{\"0\":{\"1036\":1}}],[\"按\",{\"1\":{\"1005\":1}}],[\"按这个顺序会比较好\",{\"1\":{\"1005\":1}}],[\"按顺序加锁的情况\",{\"1\":{\"933\":1}}],[\"按顺序遍历\",{\"1\":{\"914\":1}}],[\"按顺序逐个检查\",{\"1\":{\"849\":1}}],[\"按理说只要一直都在发生请求的话是不会出现token过期的情况的\",{\"1\":{\"890\":1}}],[\"按n键向上查找关键字\",{\"1\":{\"782\":1}}],[\"按n键查找关键字下一个位置\",{\"1\":{\"782\":1}}],[\"按模块汇总到自己的里面\",{\"1\":{\"707\":1}}],[\"按钮\",{\"1\":{\"537\":1}}],[\"按需要恢复到线上库去\",{\"1\":{\"901\":1}}],[\"按需使用\",{\"1\":{\"894\":1}}],[\"按需自动配置\",{\"1\":{\"478\":1}}],[\"按需加载\",{\"1\":{\"424\":2}}],[\"按对象进入缓存的顺序来移除它们\",{\"1\":{\"448\":1}}],[\"按键修饰符\",{\"1\":{\"220\":2}}],[\"按照指定的列排序\",{\"1\":{\"963\":1}}],[\"按照可重复读的定义\",{\"1\":{\"935\":1}}],[\"按照图中的搜索顺序就是按照\",{\"1\":{\"916\":1}}],[\"按照我们指定的拒绝策略拒绝执行任务\",{\"1\":{\"362\":1}}],[\"按照正常单线程环境\",{\"1\":{\"293\":1}}],[\"按照旧有的逻辑重新获取实例\",{\"1\":{\"124\":1}}],[\"按照业务类型分\",{\"1\":{\"123\":1}}],[\"按官网加配置\",{\"1\":{\"105\":1}}],[\"搞了一次四级\",{\"1\":{\"1164\":1}}],[\"搞技术的也会失业\",{\"1\":{\"1141\":1}}],[\"搞台从机shutdown\",{\"1\":{\"862\":1}}],[\"搞两台从机\",{\"1\":{\"861\":1}}],[\"搞不懂这里的第一个参数的lambda为什么拿的是\",{\"1\":{\"743\":2,\"1101\":2}}],[\"搞不懂事务和锁的概念\",{\"1\":{\"78\":1}}],[\"搞清楚这个方案会带来什么问题\",{\"1\":{\"961\":1}}],[\"搞清楚\",{\"1\":{\"686\":1}}],[\"搞清就行\",{\"1\":{\"543\":1,\"1081\":1}}],[\"搞混了\",{\"1\":{\"283\":1}}],[\"搞完了就删掉todo\",{\"1\":{\"229\":1}}],[\"搞个\",{\"1\":{\"584\":1}}],[\"搞个时间重新排个版\",{\"1\":{\"499\":1}}],[\"搞个定时任务与支付宝对账\",{\"1\":{\"193\":1}}],[\"搞个aop给你去代理解决\",{\"1\":{\"178\":1}}],[\"搞个拦截器\",{\"1\":{\"156\":1}}],[\"搞熟三个参数\",{\"1\":{\"130\":1}}],[\"搞一下午\",{\"1\":{\"123\":1,\"546\":1}}],[\"确实是这样的\",{\"1\":{\"933\":1}}],[\"确实很快就可以解开\",{\"1\":{\"932\":1}}],[\"确实\",{\"1\":{\"927\":1}}],[\"确实这也解决了客户端缓存的问题\",{\"1\":{\"539\":1,\"1083\":1}}],[\"确定想要离职吗\",{\"0\":{\"1118\":1}}],[\"确定是不是有\",{\"1\":{\"977\":1}}],[\"确定是\",{\"1\":{\"977\":1}}],[\"确定同一个人同一个请求\",{\"1\":{\"889\":1}}],[\"确定方法需要缓存以及他们的缓存策略\",{\"1\":{\"122\":1}}],[\"确认学习目标\",{\"1\":{\"1144\":1}}],[\"确认是否有不必要的只读事务\",{\"1\":{\"908\":1}}],[\"确认是否使用了\",{\"1\":{\"908\":1}}],[\"确认机制看做一种协议\",{\"1\":{\"834\":1}}],[\"确认设置后\",{\"1\":{\"537\":1}}],[\"确认执行\",{\"1\":{\"186\":1}}],[\"确认\",{\"1\":{\"186\":2}}],[\"确保这个语句执行完就可以得到一个一致性视图\",{\"1\":{\"929\":1}}],[\"确保不会有其他线程对数据库做更新\",{\"1\":{\"927\":1}}],[\"确保请求能够成功到达后端服务\",{\"1\":{\"883\":1}}],[\"确保每个消息发送成功\",{\"1\":{\"846\":1}}],[\"确保每个线程都拥有自己独立的局部变量存储空间\",{\"1\":{\"156\":1}}],[\"确保其符合java虚拟机规范\",{\"1\":{\"679\":1}}],[\"确保\",{\"1\":{\"152\":1}}],[\"确保分布式锁的可靠性\",{\"1\":{\"79\":1}}],[\"确保数据的可靠传输\",{\"1\":{\"56\":1}}],[\"封装处理好这些细节\",{\"1\":{\"845\":1}}],[\"封装了下载代码的流程\",{\"1\":{\"994\":1}}],[\"封装了用户相关信息\",{\"1\":{\"620\":1}}],[\"封装了一个alipaytemplate\",{\"1\":{\"191\":1}}],[\"封装修改条件\",{\"1\":{\"430\":1}}],[\"封装查询条件\",{\"1\":{\"430\":1}}],[\"封装查询一大块\",{\"1\":{\"121\":1}}],[\"封装employee\",{\"1\":{\"429\":1}}],[\"封装list<employee>\",{\"0\":{\"426\":1}}],[\"封装一条记录\",{\"1\":{\"415\":1}}],[\"封装页面指定的vo\",{\"1\":{\"252\":1}}],[\"封装的\",{\"1\":{\"252\":1}}],[\"封装成一个个的\",{\"1\":{\"613\":1}}],[\"封装成页面要用的数据\",{\"1\":{\"251\":1}}],[\"封装成我们需要的格式\",{\"1\":{\"126\":1}}],[\"封装对象\",{\"1\":{\"251\":1}}],[\"封装和发送出去的对象就是\",{\"1\":{\"251\":1}}],[\"封装\",{\"1\":{\"246\":1}}],[\"封装vo\",{\"1\":{\"130\":1}}],[\"封装api跨服务调用\",{\"1\":{\"92\":1}}],[\"好记性不如烂笔头\",{\"1\":{\"1144\":1}}],[\"好奇为什么不\",{\"1\":{\"1082\":1}}],[\"好奇怎么判断dns服务器是不是学校的\",{\"1\":{\"76\":1}}],[\"好奇怎么实现\",{\"1\":{\"76\":1}}],[\"好用\",{\"0\":{\"1045\":1},\"1\":{\"1097\":1}}],[\"好用的快捷键\",{\"1\":{\"215\":1}}],[\"好在\",{\"1\":{\"894\":1}}],[\"好理解的解决方案\",{\"1\":{\"868\":1}}],[\"好理解\",{\"1\":{\"859\":1}}],[\"好了\",{\"1\":{\"723\":1,\"901\":1,\"931\":1,\"1150\":1}}],[\"好的\",{\"1\":{\"713\":1}}],[\"好疼\",{\"1\":{\"658\":1}}],[\"好像被它加密了\",{\"1\":{\"1084\":1}}],[\"好像写到\",{\"1\":{\"1080\":1}}],[\"好像从来没有静下来享受下生活\",{\"1\":{\"1076\":1}}],[\"好像网上下的\",{\"1\":{\"999\":1}}],[\"好像也可以\",{\"1\":{\"945\":1}}],[\"好像与世无争\",{\"1\":{\"934\":1}}],[\"好像同spring有个工具类一样\",{\"1\":{\"876\":1}}],[\"好像蛮给力\",{\"1\":{\"587\":1}}],[\"好像不是\",{\"1\":{\"488\":1}}],[\"好像相对上面两个来说\",{\"1\":{\"357\":1}}],[\"好像是有个ci服务器\",{\"1\":{\"994\":1}}],[\"好像是redission的信号量\",{\"1\":{\"858\":1}}],[\"好像是用aop的aspectj实现同一个服务的不同方法用不同事务\",{\"1\":{\"179\":1}}],[\"好像是\",{\"1\":{\"167\":1,\"1084\":1}}],[\"好使\",{\"1\":{\"258\":1,\"739\":1,\"797\":1,\"983\":1}}],[\"好处是我们不需要关心什么时候需要阻塞线程\",{\"1\":{\"347\":1}}],[\"好处\",{\"0\":{\"453\":1},\"1\":{\"119\":1,\"688\":2,\"865\":1}}],[\"删掉本来目录的\",{\"1\":{\"998\":1}}],[\"删的执行效率\",{\"1\":{\"975\":1}}],[\"删了所有快捷键\",{\"1\":{\"1005\":1}}],[\"删了一列\",{\"1\":{\"928\":1}}],[\"删了就可以了\",{\"1\":{\"70\":1}}],[\"删除文件\",{\"0\":{\"1032\":1}}],[\"删除旧表\",{\"1\":{\"976\":1}}],[\"删除完成后重新创建索引创建索引也非常快\",{\"1\":{\"975\":1}}],[\"删除长期未使用的索引\",{\"0\":{\"974\":1},\"1\":{\"974\":1}}],[\"删除就好了\",{\"1\":{\"942\":1}}],[\"删除集合中年龄大于12的元素\",{\"1\":{\"768\":1}}],[\"删除集合中满足条件的元素\",{\"0\":{\"768\":1},\"1\":{\"768\":1}}],[\"删除等操作没有进行同步处理导致的\",{\"1\":{\"694\":1}}],[\"删除操作\",{\"1\":{\"688\":1}}],[\"删除redis中对应的数据即可\",{\"1\":{\"628\":1}}],[\"删除\",{\"1\":{\"437\":1,\"975\":1,\"993\":1}}],[\"删除与未删除是\",{\"1\":{\"229\":1}}],[\"删除令牌要在执行业务代码之前\",{\"1\":{\"167\":1}}],[\"删\",{\"1\":{\"155\":1,\"887\":1}}],[\"删缓存\",{\"0\":{\"118\":1}}],[\"双向链表\",{\"1\":{\"688\":1}}],[\"双端队列是后出的api\",{\"1\":{\"642\":1}}],[\"双端检锁机制\",{\"0\":{\"301\":1}}],[\"双亲委派模型是什么\",{\"1\":{\"382\":1}}],[\"双亲委派模型\",{\"0\":{\"382\":1}}],[\"双重检查锁\",{\"1\":{\"779\":1}}],[\"双重检查锁定\",{\"1\":{\"283\":1}}],[\"双重检查加锁多线程情况下会出现某个线程虽然这里已经为空\",{\"1\":{\"302\":1}}],[\"双写模式\",{\"0\":{\"117\":1}}],[\"双token明显增加前后端的工作量\",{\"1\":{\"70\":1}}],[\"双token\",{\"1\":{\"70\":1}}],[\"针对一次会话的话\",{\"1\":{\"1080\":1}}],[\"针对上述基础语法的精简\",{\"1\":{\"753\":1}}],[\"针对上面的\",{\"1\":{\"146\":1}}],[\"针对数组需要用arrays有静态方法\",{\"1\":{\"689\":1}}],[\"针对集合\",{\"1\":{\"689\":1}}],[\"针对的是数据强一致性\",{\"1\":{\"609\":1}}],[\"针对的是儿子模块\",{\"1\":{\"556\":1}}],[\"针对运维来说巴适\",{\"1\":{\"473\":1}}],[\"针对jvm提供的三个内置的类加载器\",{\"1\":{\"382\":1}}],[\"针对核心线程数外的线程超出这个时间还没有被使用就解雇\",{\"1\":{\"362\":1}}],[\"针对嵌套的\",{\"1\":{\"216\":1}}],[\"针对这一特点\",{\"1\":{\"198\":1}}],[\"针对分布式事务\",{\"1\":{\"183\":1}}],[\"针对\",{\"1\":{\"177\":1,\"999\":1}}],[\"针对不同的社交网站可能需要建不同的表\",{\"1\":{\"139\":1}}],[\"针对读多写少的场景\",{\"1\":{\"116\":1}}],[\"针对cookie存在跨域问题\",{\"1\":{\"52\":1}}],[\"给我的体验非常nice\",{\"1\":{\"1161\":1}}],[\"给我看看吧\",{\"1\":{\"1103\":1}}],[\"给大家提供一个网站牛客网\",{\"1\":{\"1150\":1}}],[\"给一些重要的地方打上标记\",{\"1\":{\"1144\":1}}],[\"给一个表加字段\",{\"1\":{\"928\":1}}],[\"给一个小表加个字段\",{\"1\":{\"928\":1}}],[\"给一个远程文本地址\",{\"0\":{\"282\":1}}],[\"给你足够大的发展空间\",{\"1\":{\"1104\":1}}],[\"给文件夹添加属性\",{\"1\":{\"993\":1}}],[\"给影院\",{\"1\":{\"931\":1}}],[\"给某个字段加个索引吧\",{\"1\":{\"909\":1}}],[\"给前端\",{\"1\":{\"883\":1}}],[\"给后面复用\",{\"1\":{\"865\":1,\"876\":1}}],[\"给数据库保存每一个详细信息\",{\"1\":{\"846\":1}}],[\"给每个消息做好日志记录\",{\"1\":{\"846\":1}}],[\"给每一个微服务设置\",{\"1\":{\"254\":1}}],[\"给消费者删\",{\"1\":{\"843\":1}}],[\"给机器看的\",{\"1\":{\"688\":1,\"890\":1}}],[\"给分布式大事务的入口标注\",{\"1\":{\"608\":1}}],[\"给补回来回复以前的状态\",{\"1\":{\"606\":1}}],[\"给广州机房的service微服务起一个集群名称\",{\"1\":{\"598\":1}}],[\"给\",{\"1\":{\"483\":1,\"900\":2}}],[\"给容器中自动配置了\",{\"1\":{\"828\":1}}],[\"给容器中批量导入一些组件\",{\"1\":{\"483\":1}}],[\"给容器中添加了一个组件\",{\"1\":{\"152\":1}}],[\"给予封装\",{\"1\":{\"465\":1}}],[\"给下面用\",{\"1\":{\"439\":1}}],[\"给where后面加上1=1\",{\"1\":{\"431\":1}}],[\"给线程池直接提交任务\",{\"1\":{\"361\":1}}],[\"给点建议给想学和正在学的小伙伴\",{\"1\":{\"261\":1}}],[\"给组件唯一标识\",{\"1\":{\"234\":1}}],[\"给组件绑定参数\",{\"1\":{\"220\":1}}],[\"给希望异步执行的方法标注\",{\"1\":{\"202\":1}}],[\"给指定手机号发送验证码\",{\"1\":{\"128\":1}}],[\"给的key里放uuid+线程号和之前是差不多的\",{\"1\":{\"115\":1}}],[\"给锁设置过期时间\",{\"1\":{\"87\":1}}],[\"阻塞\",{\"1\":{\"928\":1}}],[\"阻塞等待整个线程执行完成\",{\"1\":{\"357\":1}}],[\"阻塞队列满了\",{\"1\":{\"363\":1}}],[\"阻塞队列\",{\"0\":{\"344\":1},\"1\":{\"362\":1}}],[\"阻塞式等待\",{\"1\":{\"115\":1}}],[\"阻止冒泡\",{\"1\":{\"220\":1}}],[\"阻止了icmp请求的回复\",{\"1\":{\"76\":1}}],[\"厉害的点是\",{\"1\":{\"115\":1}}],[\"直聘\",{\"1\":{\"1128\":1}}],[\"直进核心团队\",{\"1\":{\"1104\":1}}],[\"直得注意\",{\"1\":{\"686\":1}}],[\"直到跑通\",{\"1\":{\"1150\":1}}],[\"直到找到第一个大于等于分界值的索引\",{\"1\":{\"1085\":1}}],[\"直到macos\",{\"1\":{\"1037\":1}}],[\"直到超时\",{\"1\":{\"932\":1}}],[\"直到\",{\"1\":{\"929\":1}}],[\"直到不满足条件为止\",{\"1\":{\"923\":1}}],[\"直到查到第一个大于\",{\"1\":{\"915\":1}}],[\"直到该事务释放锁\",{\"1\":{\"906\":1}}],[\"直到事务\",{\"1\":{\"905\":1,\"931\":1}}],[\"直到取到这个表的最后一行\",{\"1\":{\"897\":1}}],[\"直到容器停止\",{\"1\":{\"790\":1}}],[\"直到所有元素都被处理或动作引发异常\",{\"1\":{\"767\":1}}],[\"直到在内\",{\"1\":{\"712\":1}}],[\"直到在内核把数据拷贝到用户空间\",{\"1\":{\"711\":1}}],[\"直到线程a等线程b全部执行完\",{\"1\":{\"687\":1}}],[\"直到线程a执行完毕后\",{\"1\":{\"650\":1}}],[\"直到线程显式释放锁\",{\"1\":{\"113\":1}}],[\"直到创建完整个\",{\"1\":{\"543\":1}}],[\"直到其它线程往满的队列中移除一个或多个元素\",{\"1\":{\"345\":1}}],[\"直到其它线程往空的队列插入新的元素\",{\"1\":{\"345\":1}}],[\"直到成功\",{\"1\":{\"305\":1}}],[\"直到更新完成\",{\"1\":{\"305\":1}}],[\"直到期望的值和真实值一样\",{\"1\":{\"305\":1}}],[\"直到p325\",{\"1\":{\"261\":1}}],[\"直到最后一个线程到达屏障时\",{\"1\":{\"337\":1}}],[\"直到最后一个\",{\"1\":{\"208\":1}}],[\"直接百度下载就好\",{\"1\":{\"1150\":1}}],[\"直接忽略掉这些也是可以的\",{\"1\":{\"1150\":1}}],[\"直接寻址技术\",{\"0\":{\"1090\":1}}],[\"直接标记\",{\"0\":{\"1068\":1}}],[\"直接到删不了的目录里面一层去删就行\",{\"1\":{\"1041\":1}}],[\"直接新建快捷方式就行\",{\"1\":{\"1041\":1}}],[\"直接禁掉\",{\"1\":{\"1006\":1}}],[\"直接同步出本地文档库\",{\"1\":{\"1005\":1}}],[\"直接github提供云中的linux容器给你操作\",{\"1\":{\"994\":1}}],[\"直接申请另一个新数据页接着写就可以了\",{\"1\":{\"972\":1}}],[\"直接执行\",{\"1\":{\"933\":2}}],[\"直接进入等待\",{\"1\":{\"932\":1}}],[\"直接判断并跳过\",{\"1\":{\"924\":1}}],[\"直接过滤掉不满足条件的记录\",{\"1\":{\"924\":1}}],[\"直接将这个索引设置为主键\",{\"1\":{\"918\":1}}],[\"直接把\",{\"1\":{\"899\":2}}],[\"直接拒绝当前请求\",{\"1\":{\"888\":1}}],[\"直接赋值\",{\"1\":{\"878\":1}}],[\"直接看书+看博客+开源项目\",{\"1\":{\"1150\":1}}],[\"直接看这个类源码有四个属性要设\",{\"1\":{\"872\":1}}],[\"直接看提出者的\",{\"1\":{\"553\":1,\"554\":1}}],[\"直接在前端拿到所有需要用到的数据之后再进行排序也是可以的\",{\"1\":{\"868\":1}}],[\"直接崩溃\",{\"1\":{\"814\":1}}],[\"直接idea运行dockerfile\",{\"1\":{\"796\":1}}],[\"直接实例化饿汉式\",{\"1\":{\"779\":1}}],[\"直接创建对象\",{\"1\":{\"779\":1}}],[\"直接呈现为一个拼接后的完整字符串\",{\"1\":{\"725\":1}}],[\"直接粗暴放\",{\"1\":{\"706\":1}}],[\"直接class对象api\",{\"1\":{\"688\":1}}],[\"直接返回对象的引用\",{\"1\":{\"724\":1}}],[\"直接返回字符串常量池中字符串对象\",{\"1\":{\"723\":1}}],[\"直接返回这个引用并赋值给s2\",{\"1\":{\"723\":1}}],[\"直接返回\",{\"1\":{\"647\":1}}],[\"直接web界面dashboard\",{\"1\":{\"600\":1}}],[\"直接界面化的细粒度统一配置\",{\"1\":{\"599\":1}}],[\"直接运行bin目录下的startup\",{\"1\":{\"594\":1}}],[\"直接用就行\",{\"1\":{\"577\":1}}],[\"直接买个品牌机\",{\"1\":{\"472\":1}}],[\"直接就会将数据在缓存中的引用交给用户\",{\"1\":{\"448\":1}}],[\"直接从缓存中拿\",{\"1\":{\"443\":1}}],[\"直接传入pojo\",{\"1\":{\"409\":1}}],[\"直接取出参数值\",{\"1\":{\"406\":1}}],[\"直接根据\",{\"1\":{\"383\":1}}],[\"直接操作主内存\",{\"1\":{\"305\":1}}],[\"直接拷贝虚拟端口映射\",{\"1\":{\"256\":1,\"594\":1}}],[\"直接修复的时候有选择导入依赖的\",{\"1\":{\"242\":1}}],[\"直接修改字节码\",{\"1\":{\"182\":1}}],[\"直接多个变量\",{\"1\":{\"229\":1}}],[\"直接面向消费销\",{\"1\":{\"206\":1}}],[\"直接new出来的对象添加事务不起作用\",{\"1\":{\"182\":1}}],[\"直接放参数用就行\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"直接去数据库查询就行\",{\"1\":{\"108\":1}}],[\"直接\",{\"1\":{\"101\":1,\"188\":1,\"844\":1}}],[\"直接写哪个请求映射哪个页面就行\",{\"1\":{\"97\":1}}],[\"未完成\",{\"1\":{\"1085\":1}}],[\"未理解\",{\"1\":{\"925\":1}}],[\"未提交变更对其他事务也是不可见的\",{\"1\":{\"905\":1}}],[\"未被引用\",{\"1\":{\"660\":1}}],[\"未解决\",{\"1\":{\"546\":1}}],[\"未指定老年代和新生代大小\",{\"1\":{\"389\":1}}],[\"未登录状态\",{\"1\":{\"154\":1}}],[\"未能及时续约锁的过期时间\",{\"1\":{\"113\":1}}],[\"未过期\",{\"1\":{\"69\":1}}],[\"初学者够用了\",{\"1\":{\"1150\":1}}],[\"初级\",{\"1\":{\"1107\":1,\"1150\":1}}],[\"初印象\",{\"1\":{\"1097\":1}}],[\"初次执行到synchronized代码块时候\",{\"1\":{\"379\":1}}],[\"初始值分别是1\",{\"1\":{\"961\":1}}],[\"初始的密码策略\",{\"1\":{\"802\":1}}],[\"初始状态下\",{\"1\":{\"694\":1}}],[\"初始状态\",{\"1\":{\"309\":1,\"694\":1}}],[\"初始化成功后\",{\"1\":{\"1161\":1}}],[\"初始化代码里进行显式配置\",{\"1\":{\"726\":1}}],[\"初始化子类\",{\"1\":{\"658\":1}}],[\"初始化顺序是\",{\"1\":{\"658\":1}}],[\"初始化的时候\",{\"1\":{\"593\":1}}],[\"初始化数据等\",{\"1\":{\"546\":1,\"1166\":1}}],[\"初始化完成的\",{\"1\":{\"543\":1}}],[\"初始化方法\",{\"0\":{\"530\":1},\"1\":{\"530\":1}}],[\"初始化出configuration对象\",{\"1\":{\"465\":1}}],[\"初始化大小用\",{\"1\":{\"383\":1}}],[\"初始化线程的\",{\"0\":{\"354\":1}}],[\"初始化一个信号量为3\",{\"1\":{\"342\":1}}],[\"初始化对象\",{\"1\":{\"301\":2}}],[\"初始化项目\",{\"1\":{\"219\":1,\"1161\":1}}],[\"初始化\",{\"1\":{\"210\":1,\"222\":1,\"302\":1,\"489\":1,\"543\":1,\"679\":1,\"779\":1}}],[\"初步理解\",{\"0\":{\"122\":1}}],[\"初步解决\",{\"1\":{\"103\":1}}],[\"初体验\",{\"0\":{\"113\":1}}],[\"问就是约定\",{\"1\":{\"241\":1}}],[\"问了chatgpt\",{\"1\":{\"748\":1}}],[\"问了\",{\"1\":{\"153\":1}}],[\"问\",{\"1\":{\"144\":1,\"497\":1}}],[\"问您个很简单的问题我不太懂\",{\"1\":{\"112\":1}}],[\"问题不大\",{\"1\":{\"1135\":1}}],[\"问题建模\",{\"0\":{\"1086\":1}}],[\"问题就在于list有多个实现类\",{\"1\":{\"1074\":1}}],[\"问题就解决了\",{\"1\":{\"929\":1}}],[\"问题是\",{\"1\":{\"934\":1}}],[\"问题是域名问题\",{\"1\":{\"198\":1}}],[\"问题的症结在于\",{\"1\":{\"932\":1}}],[\"问题的处理通常如下\",{\"1\":{\"890\":1}}],[\"问题的解法\",{\"1\":{\"179\":1}}],[\"问题完毕\",{\"1\":{\"849\":1}}],[\"问题出现在\",{\"1\":{\"693\":1}}],[\"问题二\",{\"0\":{\"882\":1},\"1\":{\"608\":1}}],[\"问题一\",{\"0\":{\"881\":1},\"1\":{\"608\":1}}],[\"问题提出\",{\"1\":{\"454\":1}}],[\"问题场景\",{\"1\":{\"157\":1,\"471\":1}}],[\"问题来了\",{\"1\":{\"110\":1,\"111\":1}}],[\"问题\",{\"0\":{\"351\":1,\"581\":1,\"874\":1},\"1\":{\"72\":1,\"77\":1,\"82\":1,\"98\":1,\"103\":1,\"115\":1,\"117\":1,\"132\":1,\"141\":2,\"176\":1,\"241\":1,\"301\":1,\"434\":1,\"536\":1,\"585\":1,\"594\":1,\"799\":1,\"837\":1,\"857\":1,\"876\":1,\"878\":1,\"923\":1,\"961\":1,\"985\":1}}],[\"哨兵模式启动没有检测到从机\",{\"1\":{\"865\":1}}],[\"哨兵模式\",{\"0\":{\"865\":1},\"1\":{\"112\":1,\"864\":1}}],[\"包版本的问题\",{\"1\":{\"1150\":1}}],[\"包代码例try\",{\"0\":{\"1066\":1}}],[\"包到里面\",{\"0\":{\"1047\":1}}],[\"包裹的组\",{\"1\":{\"1019\":1}}],[\"包裹http+css+js静态包里面的其他文件\",{\"1\":{\"706\":1}}],[\"包管理\",{\"1\":{\"810\":1}}],[\"包装类等对象的不可变性\",{\"1\":{\"780\":1}}],[\"包装类型可用于泛型\",{\"1\":{\"686\":1}}],[\"包装类可以\",{\"1\":{\"686\":1}}],[\"包里的类也一模一样\",{\"1\":{\"561\":1}}],[\"包里大规模使用到\",{\"1\":{\"298\":1}}],[\"包的版本号\",{\"1\":{\"556\":1}}],[\"包路径一开始初始化就是一样的\",{\"1\":{\"531\":1}}],[\"包和\",{\"1\":{\"531\":1}}],[\"包扫描xml文件和mapper类得在一个目录下\",{\"1\":{\"453\":1}}],[\"包起来\",{\"0\":{\"255\":1},\"1\":{\"959\":1}}],[\"包\",{\"1\":{\"219\":1,\"561\":1,\"712\":1}}],[\"包下面\",{\"1\":{\"215\":1,\"219\":1,\"378\":1}}],[\"包括minio\",{\"1\":{\"1078\":1}}],[\"包括盘符和路径\",{\"1\":{\"1041\":1}}],[\"包括14个空匹配项\",{\"1\":{\"1017\":1}}],[\"包括合并后的所有修改\",{\"1\":{\"990\":1}}],[\"包括每个修改的文件的\",{\"1\":{\"990\":1}}],[\"包括已经被\",{\"1\":{\"990\":1}}],[\"包括本地和远程\",{\"1\":{\"987\":1}}],[\"包括不需要的列\",{\"1\":{\"969\":1}}],[\"包括零个字符\",{\"1\":{\"959\":1}}],[\"包括建表\",{\"1\":{\"927\":1}}],[\"包括了覆盖索引\",{\"1\":{\"925\":1}}],[\"包括连接器\",{\"1\":{\"892\":1}}],[\"包括代码中的字面量\",{\"1\":{\"722\":1}}],[\"包括\",{\"1\":{\"706\":1}}],[\"包括非静态初始化块\",{\"1\":{\"697\":2}}],[\"包括静态初始化块\",{\"1\":{\"697\":2}}],[\"包括静态变量的赋值和静态代码块的执行\",{\"1\":{\"679\":1}}],[\"包括有从简单的synchronize方式\",{\"1\":{\"641\":1}}],[\"包括springmvc常用组件\",{\"1\":{\"480\":1}}],[\"包括spring也有自己的定时任务注解\",{\"1\":{\"200\":1}}],[\"包括cpu和内存\",{\"1\":{\"389\":1}}],[\"包括一个eden和两个survivor\",{\"1\":{\"383\":1}}],[\"包括实例字段\",{\"1\":{\"284\":1}}],[\"包括去哪里下\",{\"1\":{\"222\":1}}],[\"包括对非\",{\"1\":{\"182\":1}}],[\"包括对请求的预处理和对响应的后处理\",{\"1\":{\"156\":1}}],[\"包括单点登录功能\",{\"1\":{\"153\":1}}],[\"包括单机模式\",{\"1\":{\"112\":1}}],[\"包含了多个加密类型\",{\"1\":{\"625\":1}}],[\"包含了sleuth+zipkin\",{\"1\":{\"594\":1}}],[\"包含了用户的认证信息和其他相关信息\",{\"1\":{\"153\":1}}],[\"包含executor和configuration\",{\"1\":{\"465\":1}}],[\"包含服务器类型\",{\"1\":{\"48\":1}}],[\"包含\",{\"1\":{\"14\":1}}],[\"使它支持http的地址\",{\"1\":{\"1013\":1}}],[\"使打包不出问题\",{\"1\":{\"1012\":1}}],[\"使得数据可以更有效地存储和传输\",{\"1\":{\"1081\":2}}],[\"使得在使用时可以正常打包和部署\",{\"1\":{\"1012\":1}}],[\"使得提交历史更加清晰和线性\",{\"1\":{\"990\":1}}],[\"使得目标分支中的提交线性排列\",{\"1\":{\"990\":1}}],[\"使得实现和维护更加简便\",{\"1\":{\"960\":1}}],[\"使得修改生效\",{\"1\":{\"800\":1}}],[\"使得容器可以通过主机的ip地址访问网络\",{\"1\":{\"796\":1}}],[\"使得链表成环\",{\"1\":{\"694\":1}}],[\"使得哈希码的分布更加均匀\",{\"1\":{\"681\":1}}],[\"使数字更易于理解和识别\",{\"1\":{\"643\":1}}],[\"使符合接收方要求\",{\"1\":{\"613\":1}}],[\"使不断出现的问题得以解决\",{\"1\":{\"543\":1,\"1081\":1}}],[\"使队列重新变得空闲起来\",{\"1\":{\"345\":1}}],[\"使您可以专注于数据建模和应用程序逻辑\",{\"1\":{\"112\":1}}],[\"使用日常\",{\"0\":{\"1164\":1}}],[\"使用系统属性窗口\",{\"1\":{\"1038\":1}}],[\"使用双冒号\",{\"1\":{\"1038\":1}}],[\"使用常规方法\",{\"1\":{\"1027\":1}}],[\"使用常量表达式进行初始化\",{\"1\":{\"725\":1}}],[\"使用错误\",{\"0\":{\"1017\":1}}],[\"使用docker\",{\"1\":{\"1001\":1}}],[\"使用以下方法永久设置\",{\"1\":{\"998\":1}}],[\"使用以下命令启动\",{\"1\":{\"522\":1}}],[\"使用git\",{\"1\":{\"990\":1}}],[\"使用group\",{\"1\":{\"959\":1}}],[\"使用英文字母\",{\"1\":{\"985\":1}}],[\"使用最新的订阅地址\",{\"1\":{\"981\":1}}],[\"使用最多的就是\",{\"1\":{\"547\":1}}],[\"使用率是否下降\",{\"1\":{\"977\":1}}],[\"使用cte可以简化复杂查询的编写\",{\"1\":{\"959\":1}}],[\"使用collection标签定义关联的集合类型的属性封装规则\",{\"1\":{\"426\":1}}],[\"使用corsconfig和注解\",{\"1\":{\"231\":1}}],[\"使用code换取accesstoken\",{\"1\":{\"136\":1}}],[\"使用左连接\",{\"1\":{\"959\":1}}],[\"使用union\",{\"1\":{\"947\":1}}],[\"使用参数\",{\"1\":{\"927\":1}}],[\"使用到a和b\",{\"1\":{\"923\":1}}],[\"使用到a\",{\"1\":{\"923\":6}}],[\"使用到了适配器模式\",{\"1\":{\"498\":1}}],[\"使用索引吗\",{\"1\":{\"923\":1}}],[\"使用索引一定能提高查询性能吗\",{\"1\":{\"911\":1}}],[\"使用索引可以大大加快\",{\"1\":{\"911\":1}}],[\"使用另外一套日志系统\",{\"1\":{\"900\":1}}],[\"使用一段时间\",{\"1\":{\"893\":1}}],[\"使用一个正则表达式字面量\",{\"1\":{\"216\":1}}],[\"使用上述代码可以获取当前系统的逻辑cpu个数\",{\"1\":{\"1095\":1}}],[\"使用上述配置序列化时\",{\"1\":{\"873\":1}}],[\"使用上面的命令就直接下载了安装用的yum\",{\"1\":{\"801\":1}}],[\"使用watch\",{\"1\":{\"856\":1}}],[\"使用这两个类的api操作基本感觉就和\",{\"1\":{\"828\":1}}],[\"使用命令\",{\"1\":{\"810\":1}}],[\"使用nginx反向代理\",{\"1\":{\"809\":1}}],[\"使用nginx部署为同一域\",{\"1\":{\"231\":1}}],[\"使用主机网络模式\",{\"1\":{\"796\":1}}],[\"使用lambda表达式实现comparator接口\",{\"1\":{\"766\":1}}],[\"使用lambda表达式可以对一个接口的方法进行非常简洁的实现\",{\"1\":{\"746\":1}}],[\"使用提供的\",{\"1\":{\"765\":1}}],[\"使用移位运算符\",{\"1\":{\"725\":1}}],[\"使用加减运算符+\",{\"1\":{\"725\":1}}],[\"使用+或\",{\"1\":{\"725\":1}}],[\"使用字面量声明\",{\"1\":{\"722\":1}}],[\"使用泛型可在编译期间进行类型检测\",{\"1\":{\"715\":1}}],[\"使用它可以快速简单地开发网络应用程序\",{\"1\":{\"713\":1}}],[\"使用了一下云服务器的redis开了6379端口写了点springboot整合redis的测试代码\",{\"1\":{\"800\":1}}],[\"使用了\",{\"1\":{\"713\":1,\"917\":1}}],[\"使用选择器\",{\"1\":{\"712\":1}}],[\"使用默认字符集进行解码\",{\"1\":{\"687\":1}}],[\"使用默认的字符集进行编码\",{\"1\":{\"687\":1}}],[\"使用向下转型\",{\"1\":{\"686\":1}}],[\"使用面向过程语言开发大型项目\",{\"1\":{\"678\":1}}],[\"使用内選锁\",{\"1\":{\"674\":1}}],[\"使用反编译软件可以看到这个源代码编译之后的结果\",{\"1\":{\"669\":1}}],[\"使用补码\",{\"1\":{\"648\":1}}],[\"使用eureka的客户端连接到\",{\"1\":{\"564\":1}}],[\"使用mycat时不需要改代码\",{\"1\":{\"960\":1}}],[\"使用minio\",{\"1\":{\"796\":1}}],[\"使用md5生成版本号进行管理\",{\"1\":{\"539\":1}}],[\"使用mapperproxyfactory创建一个mapperproxy的代理对象\",{\"1\":{\"465\":1}}],[\"使用工厂模式通过\",{\"1\":{\"498\":1}}],[\"使用property完成属性注入\",{\"1\":{\"487\":1}}],[\"使用parameterhandler来给sql设置参数\",{\"1\":{\"465\":1}}],[\"使用xml配置形式的事务\",{\"1\":{\"462\":1}}],[\"使用association进行分步查询\",{\"1\":{\"423\":1,\"429\":1}}],[\"使用association定义关联的单个对象的封装规则\",{\"0\":{\"422\":1},\"1\":{\"422\":1}}],[\"使用aopcontext\",{\"1\":{\"179\":1}}],[\"使用注解接收消息\",{\"1\":{\"827\":1}}],[\"使用注解\",{\"1\":{\"408\":1}}],[\"使用线程池进行统一分配\",{\"1\":{\"367\":1}}],[\"使用线程池的情况下\",{\"1\":{\"157\":1}}],[\"使用方法\",{\"1\":{\"352\":1}}],[\"使用方式就是用this\",{\"1\":{\"233\":1}}],[\"使用的屏障\",{\"1\":{\"337\":1}}],[\"使用原子包装类\",{\"1\":{\"291\":1}}],[\"使用场景\",{\"0\":{\"298\":1},\"1\":{\"283\":1,\"495\":2,\"496\":1}}],[\"使用场景看下面笔记\",{\"1\":{\"156\":1}}],[\"使用类使用数组类型的属性\",{\"1\":{\"242\":1}}],[\"使用过程\",{\"0\":{\"240\":1}}],[\"使用过滤器\",{\"1\":{\"156\":1,\"590\":1}}],[\"使用案例\",{\"1\":{\"233\":1}}],[\"使用虚拟dom\",{\"1\":{\"218\":1}}],[\"使用此方法可获得更好的性能\",{\"1\":{\"216\":1}}],[\"使用镜像加速器\",{\"1\":{\"208\":1}}],[\"使用异步任务管理器\",{\"1\":{\"883\":1}}],[\"使用异步任务\",{\"1\":{\"202\":1}}],[\"使用就\",{\"1\":{\"191\":1}}],[\"使用代理对象来调用事务方法\",{\"1\":{\"179\":1}}],[\"使用订单号orderno作为去重表唯一索引\",{\"1\":{\"173\":1}}],[\"使用threadlocal存储了一些对象或数据\",{\"1\":{\"157\":1}}],[\"使用json的序列化方式来序列化对象到redis中\",{\"1\":{\"147\":1}}],[\"使用select\",{\"1\":{\"936\":1}}],[\"使用select指定的方法\",{\"1\":{\"423\":1}}],[\"使用stream流效率更高\",{\"1\":{\"689\":1,\"741\":1}}],[\"使用spring\",{\"1\":{\"123\":2,\"871\":1}}],[\"使用spring缓存抽象时我们需要关注以下两点\",{\"1\":{\"122\":1}}],[\"使用sync\",{\"1\":{\"108\":1}}],[\"使用redis\",{\"1\":{\"102\":1}}],[\"使用redis模拟session\",{\"1\":{\"52\":1}}],[\"使用压力测试\",{\"1\":{\"99\":1}}],[\"使用==select\",{\"1\":{\"81\":1}}],[\"使用数据库可以提供\",{\"1\":{\"79\":1}}],[\"使用数据库的v和锁机制来实现分布式锁\",{\"1\":{\"79\":1}}],[\"使用安全\",{\"1\":{\"76\":1}}],[\"使用其他地址如218\",{\"1\":{\"76\":1}}],[\"使用\",{\"0\":{\"191\":1,\"212\":1,\"268\":1,\"448\":1,\"829\":1},\"1\":{\"49\":1,\"105\":1,\"123\":1,\"132\":1,\"153\":1,\"156\":1,\"169\":1,\"182\":1,\"211\":1,\"220\":1,\"222\":1,\"229\":1,\"281\":1,\"371\":1,\"378\":1,\"411\":1,\"465\":1,\"489\":1,\"492\":1,\"511\":2,\"520\":1,\"543\":1,\"566\":2,\"567\":1,\"594\":1,\"605\":1,\"625\":1,\"629\":1,\"650\":2,\"679\":1,\"713\":3,\"715\":1,\"734\":1,\"796\":1,\"799\":1,\"871\":2,\"884\":1,\"923\":1,\"937\":1,\"959\":2,\"963\":1,\"977\":1,\"985\":1,\"986\":1,\"1010\":2,\"1022\":1,\"1023\":1,\"1038\":1,\"1081\":1,\"1084\":1}}],[\"使用指南\",{\"1\":{\"28\":2},\"2\":{\"1\":1,\"3\":1,\"24\":1,\"31\":1,\"32\":1}}],[\"总不能每次都要花时间手写网络ip吧\",{\"1\":{\"1160\":1}}],[\"总比你不知道学什么好\",{\"1\":{\"1150\":1}}],[\"总比全表扫描要好\",{\"1\":{\"924\":1}}],[\"总会有疏漏的地方或者讲得不太好的地方\",{\"1\":{\"1150\":1}}],[\"总包\",{\"1\":{\"1103\":1}}],[\"总分\",{\"1\":{\"959\":1}}],[\"总共就可以记录\",{\"1\":{\"899\":1}}],[\"总有手快的人\",{\"1\":{\"889\":1}}],[\"总有些老jar包或公司老配置需要的\",{\"1\":{\"518\":1}}],[\"总体来说\",{\"1\":{\"641\":1}}],[\"总是选简单的路走\",{\"1\":{\"1076\":1}}],[\"总是只能取到最新的数据\",{\"1\":{\"927\":1}}],[\"总是跟这个事务在启动时看到的数据是一致的\",{\"1\":{\"905\":1}}],[\"总是在我们写的时候就会出错\",{\"1\":{\"705\":1}}],[\"总是自动带上show\",{\"1\":{\"236\":1}}],[\"总是用map强转相应的bean\",{\"1\":{\"125\":1}}],[\"总的来说\",{\"1\":{\"112\":1,\"156\":1,\"543\":1,\"639\":1,\"849\":1,\"961\":1}}],[\"总之满意\",{\"1\":{\"1160\":1}}],[\"总之\",{\"1\":{\"112\":1,\"123\":1,\"153\":1,\"871\":1,\"1010\":1,\"1041\":1,\"1150\":1,\"1162\":1}}],[\"总结来说\",{\"1\":{\"905\":1}}],[\"总结两者\",{\"0\":{\"184\":1}}],[\"总结一句\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"总结一下\",{\"1\":{\"73\":1}}],[\"总结起来\",{\"1\":{\"182\":1,\"488\":1}}],[\"总结\",{\"0\":{\"134\":1,\"1159\":1},\"1\":{\"76\":1,\"108\":1,\"111\":1,\"118\":1,\"238\":1,\"304\":1,\"465\":1,\"483\":1,\"485\":1,\"520\":1,\"554\":1,\"576\":1,\"630\":1,\"658\":1,\"668\":1,\"688\":1,\"696\":1,\"699\":1,\"868\":1,\"937\":1}}],[\"信道是建立在真实的tcp连接内的虚拟连接\",{\"1\":{\"823\":1}}],[\"信道\",{\"1\":{\"823\":1}}],[\"信号量打满也会导致服务降级\",{\"1\":{\"582\":1}}],[\"信号量需要减1\",{\"1\":{\"342\":1}}],[\"信号量主要用于两个目的\",{\"1\":{\"341\":1}}],[\"信号量\",{\"0\":{\"340\":1}}],[\"信号量最大作用\",{\"1\":{\"202\":1}}],[\"信号量等后面项目用到的点\",{\"1\":{\"112\":1}}],[\"信息\",{\"1\":{\"883\":1,\"997\":1}}],[\"信息流\",{\"1\":{\"158\":1}}],[\"信息容器\",{\"1\":{\"14\":1}}],[\"没啥的\",{\"1\":{\"1161\":1}}],[\"没看过\",{\"1\":{\"1150\":3}}],[\"没什么上升空间\",{\"1\":{\"1114\":1}}],[\"没人会给程序员一个月一百万月薪的\",{\"1\":{\"1104\":1}}],[\"没人给你抢指令重排无所谓\",{\"1\":{\"292\":1}}],[\"没成功\",{\"1\":{\"998\":1}}],[\"没工作的好像并无必要\",{\"1\":{\"980\":1}}],[\"没答出来\",{\"1\":{\"947\":1}}],[\"没写完就\",{\"1\":{\"901\":1}}],[\"没必要为了排行榜引入一个\",{\"1\":{\"868\":1}}],[\"没必要再去查询数据库\",{\"1\":{\"443\":1}}],[\"没设密码被挖矿\",{\"1\":{\"788\":1}}],[\"没对过一道\",{\"1\":{\"777\":1}}],[\"没关系\",{\"1\":{\"721\":1,\"896\":1}}],[\"没\",{\"1\":{\"361\":1}}],[\"没任何关系的\",{\"1\":{\"283\":1}}],[\"没用\",{\"1\":{\"179\":2}}],[\"没锁住\",{\"1\":{\"111\":1}}],[\"没有什么比做一个项目更能提高水平了\",{\"1\":{\"1150\":1}}],[\"没有时间再去让你从头开始学了\",{\"1\":{\"1140\":1}}],[\"没有时效性问题\",{\"1\":{\"839\":1}}],[\"没有人要求你必须得满分\",{\"1\":{\"1135\":1}}],[\"没有质疑你能力的资格\",{\"1\":{\"1132\":1}}],[\"没有提升空间\",{\"1\":{\"1118\":1}}],[\"没有开启超线程时\",{\"1\":{\"1095\":1}}],[\"没有深入探究了\",{\"0\":{\"1093\":1}}],[\"没有主动地去争取过什么\",{\"1\":{\"1076\":1}}],[\"没有主键就是根据rowid来的是吗\",{\"0\":{\"967\":1}}],[\"没有转义问题\",{\"1\":{\"1039\":1}}],[\"没有那些自以为是的说教\",{\"1\":{\"980\":1}}],[\"没有鸡汤\",{\"1\":{\"980\":1}}],[\"没有空话\",{\"1\":{\"980\":1}}],[\"没有显式地使用\",{\"1\":{\"934\":1}}],[\"没有影响\",{\"1\":{\"929\":2}}],[\"没有视图概念\",{\"1\":{\"905\":1}}],[\"没有加\",{\"1\":{\"884\":1}}],[\"没有重复造轮子\",{\"1\":{\"877\":2}}],[\"没有哪一门技术是\",{\"0\":{\"815\":1}}],[\"没有日志系统之前\",{\"1\":{\"734\":1}}],[\"没有感知到\",{\"1\":{\"694\":1}}],[\"没有别的同步保障\",{\"1\":{\"694\":1}}],[\"没有为缺省构造函数定义隐式超构造函数\",{\"1\":{\"691\":1}}],[\"没有体现动态性\",{\"1\":{\"688\":1}}],[\"没有类的单继承局限\",{\"1\":{\"687\":1}}],[\"没有类似于wait的阻塞\",{\"1\":{\"325\":1}}],[\"没有默认初始化值\",{\"1\":{\"686\":1}}],[\"没有创建新对象\",{\"1\":{\"683\":1}}],[\"没有方法修饰符\",{\"1\":{\"661\":1}}],[\"没有学下去\",{\"1\":{\"604\":1}}],[\"没有一套web界面可以给我们进行更加细粒度化得配置流控\",{\"1\":{\"599\":1}}],[\"没有的好功能\",{\"1\":{\"598\":1}}],[\"没有改名字\",{\"1\":{\"593\":1}}],[\"没有固定规则但要求唯一\",{\"1\":{\"591\":1}}],[\"没有发生网络分区时候\",{\"1\":{\"572\":1}}],[\"没有eureka那含情脉脉\",{\"1\":{\"570\":1}}],[\"没有active的话两者都是会生效的\",{\"1\":{\"543\":1}}],[\"没有使用到当前一级缓存的情况\",{\"1\":{\"444\":1}}],[\"没有获得到锁的线程自旋\",{\"1\":{\"379\":1}}],[\"没有\",{\"0\":{\"938\":1},\"1\":{\"352\":1,\"593\":1,\"899\":1,\"900\":1,\"1134\":1,\"1150\":1}}],[\"没有标注分组的校验注解就不会被校验\",{\"1\":{\"241\":1}}],[\"没有去捋了\",{\"1\":{\"188\":1,\"844\":1}}],[\"没有抛出任何异常\",{\"1\":{\"186\":1}}],[\"没有过期\",{\"1\":{\"152\":1}}],[\"没有办法\",{\"1\":{\"131\":1}}],[\"没有就用默认配置\",{\"1\":{\"125\":1}}],[\"没有手动解锁它也会给解锁\",{\"1\":{\"115\":1}}],[\"没有原子性\",{\"1\":{\"110\":1}}],[\"没有最好的\",{\"1\":{\"79\":1}}],[\"没有更换\",{\"1\":{\"69\":1}}],[\"回忆\",{\"1\":{\"1144\":1}}],[\"回答b则会把面试官往你的项目上引导\",{\"1\":{\"1134\":1}}],[\"回答b\",{\"1\":{\"1134\":1}}],[\"回答a相当于你把方向交给了面试官\",{\"1\":{\"1134\":1}}],[\"回答a\",{\"1\":{\"1134\":1}}],[\"回表\",{\"1\":{\"969\":1}}],[\"回表了两次\",{\"1\":{\"921\":1}}],[\"回到主键索引树搜索的过程\",{\"1\":{\"921\":1}}],[\"回到上面的问题\",{\"1\":{\"721\":1}}],[\"回复的文本内容\",{\"1\":{\"836\":1}}],[\"回复的状态码\",{\"1\":{\"836\":1}}],[\"回车即可\",{\"1\":{\"782\":2}}],[\"回车符\",{\"1\":{\"61\":1}}],[\"回收的操作\",{\"1\":{\"686\":1}}],[\"回收分配内存\",{\"1\":{\"634\":1}}],[\"回滚到\",{\"1\":{\"929\":1}}],[\"回滚语句是\",{\"1\":{\"907\":1}}],[\"回滚段被清理\",{\"1\":{\"906\":1}}],[\"回滚日志是跟数据字典一起放在\",{\"1\":{\"906\":1}}],[\"回滚日志会被删除\",{\"1\":{\"906\":1}}],[\"回滚日志总不能一直保留吧\",{\"1\":{\"906\":1}}],[\"回滚日志\",{\"1\":{\"902\":1,\"935\":1}}],[\"回滚日志表\",{\"1\":{\"606\":1}}],[\"回滚\",{\"1\":{\"176\":1}}],[\"回顾\",{\"1\":{\"156\":1,\"1144\":1}}],[\"回\",{\"1\":{\"111\":1}}],[\"回的途中时间过期别的线程占了这把锁\",{\"1\":{\"111\":1}}],[\"换完新的订阅\",{\"1\":{\"981\":1}}],[\"换算成一个确定的位置\",{\"1\":{\"914\":1}}],[\"换句话说本地只支持html+css+js\",{\"1\":{\"706\":1}}],[\"换句话说接口越来越像类了例如collection\",{\"1\":{\"686\":1}}],[\"换句话说\",{\"1\":{\"679\":1,\"688\":2,\"1107\":1}}],[\"换句话说也就是配置文件热部署也就只能对自己demo中entity直接绑yaml没有代码处理的有效了\",{\"1\":{\"124\":1}}],[\"换成它的网站由它进行重定向\",{\"1\":{\"1153\":1}}],[\"换成文件\",{\"1\":{\"981\":1}}],[\"换成\",{\"1\":{\"566\":1,\"1005\":1}}],[\"换成一行的\",{\"1\":{\"110\":1}}],[\"换来的是\",{\"1\":{\"217\":1}}],[\"换行符\",{\"1\":{\"61\":1}}],[\"撰写栏\",{\"1\":{\"110\":1}}],[\"窗口和图标\",{\"1\":{\"998\":1}}],[\"窗口\",{\"1\":{\"110\":1}}],[\"正是这个不好的ui或者说系统提醒的这句话让大家有了误解\",{\"1\":{\"998\":1}}],[\"正例\",{\"1\":{\"973\":1}}],[\"正符合了我们前面提到的递增插入的场景\",{\"1\":{\"918\":1}}],[\"正确做法\",{\"1\":{\"868\":1}}],[\"正确的理解是这样的\",{\"1\":{\"658\":1}}],[\"正好花点时间写一篇环境的部署的总结\",{\"1\":{\"800\":1}}],[\"正式提出离职后\",{\"1\":{\"1122\":1}}],[\"正式今天这篇文章开始之前\",{\"1\":{\"713\":1}}],[\"正式发布版\",{\"1\":{\"554\":1}}],[\"正式发布的版本\",{\"1\":{\"554\":1}}],[\"正在上传\",{\"1\":{\"1084\":1}}],[\"正在dev分支开发新功能\",{\"1\":{\"990\":1}}],[\"正在等待的线程可以选择放弃等待\",{\"1\":{\"380\":1}}],[\"正在倒计时中\",{\"1\":{\"128\":1}}],[\"正常一台linux一个redis\",{\"1\":{\"860\":1}}],[\"正常生命周期为五步\",{\"1\":{\"489\":1}}],[\"正常写~\",{\"1\":{\"413\":1}}],[\"正常则往下执行\",{\"1\":{\"379\":1}}],[\"正常情况下我们还是要采用第二种策略\",{\"1\":{\"932\":1}}],[\"正常情况下搜索引擎需要在\",{\"1\":{\"572\":1}}],[\"正常情况下\",{\"1\":{\"186\":1}}],[\"正则组引用\",{\"1\":{\"1047\":1}}],[\"正则中的表达式可以用\",{\"0\":{\"1047\":1}}],[\"正则也可以用复用这个组的概念\",{\"1\":{\"1019\":1}}],[\"正则匹配0次必须加星\",{\"1\":{\"1016\":1}}],[\"正则很多地方都可以用\",{\"1\":{\"1015\":1}}],[\"正则处理不了校验\",{\"1\":{\"242\":1}}],[\"正则确实不需要\",{\"1\":{\"240\":1}}],[\"正则表达式字面量就会被编译\",{\"1\":{\"216\":1}}],[\"正规笔记看我另一篇笔记\",{\"1\":{\"109\":1}}],[\"正向代理\",{\"0\":{\"72\":1},\"1\":{\"72\":3,\"809\":2}}],[\"完整仓库\",{\"1\":{\"1005\":1}}],[\"完整版\",{\"1\":{\"808\":1}}],[\"完整代码\",{\"0\":{\"335\":1,\"339\":1,\"343\":1}}],[\"完全没有印象\",{\"1\":{\"1143\":1}}],[\"完全相等的行\",{\"1\":{\"947\":1}}],[\"完全可以借着这个时间差再查一次\",{\"1\":{\"904\":1}}],[\"完全可以使用spring\",{\"1\":{\"108\":1}}],[\"完全ok很合理\",{\"1\":{\"657\":1}}],[\"完成内存地址定位\",{\"1\":{\"1093\":1}}],[\"完成后的现象\",{\"1\":{\"865\":1}}],[\"完成字符串的拼接操作\",{\"1\":{\"724\":1}}],[\"完成\",{\"1\":{\"191\":1,\"283\":1,\"1150\":1}}],[\"完成业务检查\",{\"1\":{\"186\":1}}],[\"完成配置更改后\",{\"1\":{\"48\":1}}],[\"感触深的是以下两处\",{\"1\":{\"1076\":1}}],[\"感谢您的付出\",{\"1\":{\"980\":1}}],[\"感兴趣的事情\",{\"1\":{\"980\":1}}],[\"感兴趣的可以看看\",{\"1\":{\"970\":1}}],[\"感知上个返回值\",{\"1\":{\"375\":1}}],[\"感知异常\",{\"1\":{\"240\":1}}],[\"感知到mysql的更新去更新redis\",{\"1\":{\"108\":1}}],[\"感觉像是在看一本新书\",{\"1\":{\"1144\":1}}],[\"感觉像cas\",{\"1\":{\"712\":1}}],[\"感觉就像是在看一本新书\",{\"1\":{\"1143\":1}}],[\"感觉还是能用的只要在一台服务器上还是保持这种情况\",{\"1\":{\"883\":1}}],[\"感觉还是防火墙策略问题\",{\"1\":{\"76\":1}}],[\"感觉不想学还是不要强行学这一块了\",{\"1\":{\"876\":1}}],[\"感觉说的比较清楚了\",{\"1\":{\"660\":1}}],[\"感觉简单就没有实操了\",{\"1\":{\"594\":1}}],[\"感觉和\",{\"1\":{\"252\":1}}],[\"感觉\",{\"1\":{\"231\":1,\"628\":1}}],[\"感觉很物超所值\",{\"1\":{\"1160\":1}}],[\"感觉很洋气\",{\"1\":{\"229\":1}}],[\"感觉很有用\",{\"1\":{\"126\":1}}],[\"感觉可以理解成把\",{\"1\":{\"216\":1}}],[\"感觉是token的感觉\",{\"1\":{\"174\":1}}],[\"感觉这有点\",{\"1\":{\"101\":1}}],[\"感觉有时生效\",{\"1\":{\"71\":1}}],[\"感觉ruoyi是只用redis\",{\"1\":{\"65\":1}}],[\"感觉跟直接用最简单方式\",{\"1\":{\"65\":1}}],[\"读过的文章越多你就学的越好\",{\"1\":{\"1143\":1}}],[\"读题问什么\",{\"1\":{\"1086\":1}}],[\"读到结局意犹未尽感觉还有内容\",{\"1\":{\"1076\":1}}],[\"读完条后地图的数据就在内存中了\",{\"1\":{\"1089\":1}}],[\"读完\",{\"1\":{\"1076\":1}}],[\"读已提交是commit之后可见\",{\"1\":{\"905\":1}}],[\"读提交是指\",{\"1\":{\"905\":1}}],[\"读提交\",{\"1\":{\"905\":6,\"934\":1}}],[\"读未提交是commit之前的修改都可见\",{\"1\":{\"905\":1}}],[\"读未提交是指\",{\"1\":{\"905\":1}}],[\"读未提交\",{\"1\":{\"905\":3}}],[\"读作goes\",{\"1\":{\"750\":1,\"752\":1}}],[\"读\",{\"1\":{\"326\":3,\"905\":1,\"906\":3}}],[\"读取密码\",{\"1\":{\"782\":1}}],[\"读取操作不会阻塞线程\",{\"1\":{\"712\":1}}],[\"读取共享资源应该可以同时进行\",{\"1\":{\"326\":1}}],[\"读取到\",{\"1\":{\"301\":1}}],[\"读取赋值等\",{\"1\":{\"287\":1}}],[\"读的时候\",{\"1\":{\"296\":1}}],[\"读读无所谓\",{\"1\":{\"118\":1}}],[\"读写特别频繁\",{\"1\":{\"976\":1}}],[\"读写分离\",{\"1\":{\"959\":1}}],[\"读写\",{\"1\":{\"928\":2}}],[\"读写文件\",{\"1\":{\"709\":1}}],[\"读写锁之间\",{\"1\":{\"928\":1}}],[\"读写锁手写缓存\",{\"1\":{\"298\":1}}],[\"读写锁\",{\"1\":{\"118\":1}}],[\"读写加锁\",{\"1\":{\"108\":1}}],[\"读锁的请求也会被\",{\"1\":{\"928\":1}}],[\"读锁还没有释放\",{\"1\":{\"928\":1}}],[\"读锁之间不互斥\",{\"1\":{\"928\":1}}],[\"读锁\",{\"0\":{\"326\":1},\"1\":{\"115\":1,\"326\":1,\"905\":1,\"928\":4,\"929\":2}}],[\"读多写少\",{\"1\":{\"108\":1,\"154\":1}}],[\"读多写多\",{\"1\":{\"108\":1}}],[\"读模式\",{\"1\":{\"108\":1}}],[\"写得多\",{\"1\":{\"1150\":1}}],[\"写在前面\",{\"1\":{\"1150\":2}}],[\"写了个小管理系统或者刷了一些题\",{\"1\":{\"1150\":1}}],[\"写出多么厉害的程序\",{\"1\":{\"1150\":1}}],[\"写游戏其实是一件很有挑战性的事\",{\"1\":{\"1150\":1}}],[\"写游戏是最容易获得成就感的\",{\"1\":{\"1150\":1}}],[\"写的\",{\"1\":{\"1005\":2}}],[\"写的比较详细\",{\"1\":{\"731\":1}}],[\"写冲突的无锁并发控制\",{\"1\":{\"906\":1}}],[\"写完之后\",{\"1\":{\"901\":2}}],[\"写完\",{\"1\":{\"901\":1}}],[\"写完数据库后\",{\"0\":{\"118\":1}}],[\"写到第\",{\"1\":{\"899\":1}}],[\"写到末尾就又回到开头循环写\",{\"1\":{\"899\":1}}],[\"写redo\",{\"1\":{\"899\":1}}],[\"写redo日志也是写io\",{\"1\":{\"899\":1}}],[\"写个config类给容器中放\",{\"1\":{\"828\":1}}],[\"写数据时注意\",{\"1\":{\"688\":1}}],[\"写数据库后\",{\"0\":{\"117\":1}}],[\"写一个类继承thread\",{\"1\":{\"687\":1}}],[\"写一个controller处理订单状态\",{\"1\":{\"192\":1}}],[\"写酱紫的源代码\",{\"1\":{\"669\":1}}],[\"写或者不写都有\",{\"1\":{\"658\":1}}],[\"写法spring\",{\"1\":{\"598\":1}}],[\"写这个data\",{\"1\":{\"598\":1}}],[\"写yml\",{\"1\":{\"558\":1}}],[\"写全了反而失效\",{\"1\":{\"546\":1}}],[\"写入磁盘\",{\"1\":{\"900\":1}}],[\"写入两个内容\",{\"1\":{\"878\":1}}],[\"写入操作也不会阻塞线程\",{\"1\":{\"712\":1}}],[\"写入操作是一个一个线程进行执行的\",{\"1\":{\"326\":1}}],[\"写入\",{\"1\":{\"630\":1}}],[\"写入主内存\",{\"1\":{\"284\":1}}],[\"写\",{\"1\":{\"326\":3,\"359\":1,\"905\":1,\"906\":3}}],[\"写写的时候按顺序排好队\",{\"1\":{\"118\":1}}],[\"写缓存\",{\"0\":{\"117\":1}}],[\"写锁最好\",{\"1\":{\"928\":1}}],[\"写锁之间是互斥的\",{\"1\":{\"928\":1}}],[\"写锁\",{\"0\":{\"326\":1},\"1\":{\"115\":1,\"326\":1,\"905\":1,\"928\":2}}],[\"写模式\",{\"1\":{\"108\":2}}],[\"写作日期为\",{\"1\":{\"28\":1}}],[\"空出位置\",{\"1\":{\"918\":1}}],[\"空\",{\"1\":{\"860\":1}}],[\"空间固定会用完\",{\"1\":{\"900\":1}}],[\"空间\",{\"1\":{\"385\":1,\"709\":1}}],[\"空闲的core\",{\"1\":{\"363\":1}}],[\"空结果缓存||布隆过滤器\",{\"1\":{\"108\":1,\"866\":1}}],[\"空格隔开就行\",{\"1\":{\"71\":1}}],[\"空格域名\",{\"1\":{\"62\":1}}],[\"空格\",{\"1\":{\"60\":1,\"62\":1}}],[\"改善代码既有的设计\",{\"1\":{\"1150\":1}}],[\"改完需要以下命令生效\",{\"1\":{\"1041\":1}}],[\"改内存参数\",{\"1\":{\"977\":1}}],[\"改配置\",{\"0\":{\"853\":1}}],[\"改变\",{\"0\":{\"721\":1}}],[\"改指针\",{\"1\":{\"693\":1}}],[\"改为count++\",{\"1\":{\"670\":1}}],[\"改yaml\",{\"1\":{\"594\":1}}],[\"改的太痛苦\",{\"1\":{\"591\":1}}],[\"改pom\",{\"1\":{\"558\":1}}],[\"改名用cli上传文件\",{\"1\":{\"540\":1}}],[\"改写哪些配置直接看官网\",{\"1\":{\"466\":1}}],[\"改成提交\",{\"1\":{\"900\":1}}],[\"改成no\",{\"1\":{\"853\":1}}],[\"改成\",{\"1\":{\"309\":1,\"901\":1,\"905\":1,\"906\":1,\"929\":1,\"1006\":1}}],[\"改订单状态\",{\"1\":{\"194\":1}}],[\"改操作\",{\"1\":{\"155\":1}}],[\"改\",{\"1\":{\"107\":1,\"975\":1,\"977\":1}}],[\"改大了就行\",{\"1\":{\"107\":1}}],[\"升级lettuce客户端\",{\"1\":{\"107\":1}}],[\"治标不治本\",{\"1\":{\"107\":1}}],[\"源表列\",{\"1\":{\"959\":2}}],[\"源表别名\",{\"1\":{\"959\":1}}],[\"源表表达式\",{\"1\":{\"959\":1}}],[\"源表中的数据到目标表中\",{\"1\":{\"959\":1}}],[\"源代码\",{\"1\":{\"292\":1}}],[\"源码或者框架源码\",{\"1\":{\"1150\":1}}],[\"源码的人\",{\"1\":{\"932\":1}}],[\"源码生成\",{\"1\":{\"635\":1}}],[\"源码\",{\"0\":{\"580\":1,\"692\":1},\"1\":{\"1081\":1}}],[\"源码模块中的\",{\"1\":{\"499\":1}}],[\"源码暂时掠过了\",{\"1\":{\"161\":1}}],[\"源码会自创\",{\"1\":{\"160\":1}}],[\"源码会自动创\",{\"1\":{\"156\":1,\"581\":1}}],[\"源码其实就是个\",{\"1\":{\"140\":1}}],[\"源码key好像是用的string的\",{\"1\":{\"125\":1}}],[\"源码体现某一块可能没有减内存导致溢出\",{\"1\":{\"107\":1}}],[\"源主机的配置问题也可能导致ping不通\",{\"1\":{\"76\":1}}],[\"传输给其他系统或在内存中进行处理\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"传输层\",{\"1\":{\"688\":1}}],[\"传统行业\",{\"1\":{\"1114\":1}}],[\"传统的\",{\"1\":{\"711\":1}}],[\"传统的web框架\",{\"1\":{\"590\":1}}],[\"传统的web系统\",{\"1\":{\"70\":1}}],[\"传统方式\",{\"1\":{\"487\":1}}],[\"传入column指定的这列参数的值\",{\"1\":{\"423\":1}}],[\"传\",{\"1\":{\"359\":1}}],[\"传值\",{\"1\":{\"287\":1}}],[\"传的data\",{\"1\":{\"236\":1}}],[\"传递给模板\",{\"1\":{\"220\":1}}],[\"传播行为那里\",{\"1\":{\"178\":1}}],[\"传播行为\",{\"0\":{\"177\":1,\"178\":1}}],[\"传前端\",{\"1\":{\"105\":1}}],[\"构建配置等\",{\"1\":{\"1014\":1}}],[\"构建和打包项目时为什么要排除mybatis\",{\"1\":{\"1012\":1}}],[\"构建\",{\"1\":{\"994\":1}}],[\"构建代码\",{\"1\":{\"78\":1}}],[\"构\",{\"1\":{\"976\":1}}],[\"构造器的方式\",{\"1\":{\"687\":1}}],[\"构造器\",{\"1\":{\"686\":1}}],[\"构造器中初始化\",{\"1\":{\"658\":1,\"696\":1}}],[\"构造块\",{\"1\":{\"658\":4}}],[\"构造请求数据\",{\"1\":{\"580\":1}}],[\"构造bean对象\",{\"1\":{\"489\":1}}],[\"构造参数注入\",{\"0\":{\"488\":1},\"1\":{\"488\":1,\"489\":1}}],[\"构造方法的优先级一般比代码块低\",{\"0\":{\"697\":1}}],[\"构造方法就是\",{\"1\":{\"661\":1}}],[\"构造方法\",{\"0\":{\"661\":1,\"763\":1}}],[\"构造方法注入\",{\"1\":{\"359\":1,\"488\":1}}],[\"构造方法是protected所以需要匿名创建\",{\"1\":{\"105\":1}}],[\"构造函数可以传递boolean值\",{\"1\":{\"352\":1}}],[\"构成负载均衡集群\",{\"1\":{\"112\":1}}],[\"调到\",{\"1\":{\"1006\":2}}],[\"调整语句顺序并不能完全避免死锁\",{\"1\":{\"933\":1}}],[\"调\",{\"1\":{\"712\":1}}],[\"调这个对象的start\",{\"1\":{\"687\":1}}],[\"调构造方法super\",{\"1\":{\"686\":1}}],[\"调动可用资源\",{\"1\":{\"543\":1,\"1081\":1}}],[\"调优和监控\",{\"1\":{\"1081\":1}}],[\"调优和问题排查\",{\"1\":{\"381\":1}}],[\"调优那味了\",{\"1\":{\"101\":1}}],[\"调试环节是必要的\",{\"1\":{\"261\":1}}],[\"调用引擎接口取\",{\"1\":{\"897\":1}}],[\"调用相应的\",{\"1\":{\"738\":1}}],[\"调用的增强版本\",{\"1\":{\"712\":1}}],[\"调用的是父类的final方法或者字段\",{\"1\":{\"698\":1}}],[\"调用的是父类的static方法或者字段\",{\"1\":{\"698\":1}}],[\"调用的是远程服务\",{\"1\":{\"176\":1}}],[\"调用后\",{\"1\":{\"709\":1,\"711\":1}}],[\"调用equals\",{\"0\":{\"691\":1}}],[\"调用es\",{\"1\":{\"126\":1}}],[\"调用线程的run\",{\"1\":{\"688\":1}}],[\"调用线程就会被阻塞\",{\"1\":{\"332\":1}}],[\"调用构造对象同名方法\",{\"1\":{\"688\":1}}],[\"调用class的静态方法\",{\"1\":{\"688\":1}}],[\"调用countdown方法的线程不会被阻塞\",{\"1\":{\"332\":1}}],[\"调用getclass\",{\"1\":{\"688\":1}}],[\"调用运行时类的属性\",{\"1\":{\"688\":1}}],[\"调用运行时类的指定结构\",{\"1\":{\"688\":1}}],[\"调用put\",{\"1\":{\"688\":1}}],[\"调用方\",{\"1\":{\"594\":1}}],[\"调用方法等方式使用该类\",{\"1\":{\"679\":1}}],[\"调用方法或者构造对象\",{\"1\":{\"638\":1}}],[\"调用方法\",{\"1\":{\"321\":1}}],[\"调用函数递归处理文件夹中的文件\",{\"1\":{\"540\":1}}],[\"调用list<string>\",{\"1\":{\"483\":1}}],[\"调用intern\",{\"1\":{\"722\":1}}],[\"调用interceptor\",{\"1\":{\"465\":1}}],[\"调用interrupt\",{\"1\":{\"352\":1}}],[\"调用defaultsqlsession的增删改查\",{\"1\":{\"465\":1}}],[\"调用statementhandler的增删改查方法\",{\"1\":{\"465\":1}}],[\"调用statementhandler预编译参数以及设置参数值\",{\"1\":{\"465\":1}}],[\"调用system\",{\"1\":{\"389\":1}}],[\"调用service\",{\"1\":{\"252\":1}}],[\"调用时创建\",{\"1\":{\"388\":1}}],[\"调用父加载器\",{\"1\":{\"382\":1}}],[\"调用工程师\",{\"1\":{\"283\":1}}],[\"调用链监控\",{\"1\":{\"228\":1}}],[\"调用远程服务\",{\"1\":{\"228\":1}}],[\"调用\",{\"1\":{\"216\":2,\"302\":1,\"372\":2,\"411\":1,\"582\":2,\"709\":1,\"712\":5,\"779\":1,\"897\":1}}],[\"调用接口时\",{\"1\":{\"174\":1}}],[\"调用库存服务version变成了2\",{\"1\":{\"170\":1}}],[\"调用该方法会删除缓存category下的所有cache\",{\"1\":{\"123\":1}}],[\"调用业务方法\",{\"1\":{\"496\":1}}],[\"调用业务\",{\"1\":{\"103\":1}}],[\"考研的我就不管了\",{\"1\":{\"1150\":1}}],[\"考察你对反射机制的了解和掌握程度\",{\"1\":{\"639\":1}}],[\"考察当前软硬件环境下系统所能承受的最大负荷并帮助找出系统瓶颈所在\",{\"1\":{\"99\":1}}],[\"考点分析\",{\"0\":{\"637\":1,\"639\":1}}],[\"考虑使用临时表或公共表达式\",{\"1\":{\"959\":1}}],[\"考虑到存储空间的问题\",{\"1\":{\"923\":1}}],[\"考虑到树根的数据块总是在内存中的\",{\"1\":{\"916\":1}}],[\"考虑到性能\",{\"1\":{\"183\":1}}],[\"考虑重构提取出来\",{\"1\":{\"561\":1}}],[\"考虑\",{\"1\":{\"103\":1}}],[\"大四\",{\"1\":{\"1150\":2}}],[\"大话设计模式\",{\"1\":{\"1150\":1}}],[\"大三这一年\",{\"1\":{\"1150\":1}}],[\"大三\",{\"1\":{\"1150\":2}}],[\"大二的一年\",{\"1\":{\"1150\":1}}],[\"大二要做的\",{\"1\":{\"1150\":1}}],[\"大二\",{\"1\":{\"1150\":2}}],[\"大括号少了一个\",{\"1\":{\"1150\":1}}],[\"大括号可省略\",{\"1\":{\"750\":1}}],[\"大一的这一年\",{\"1\":{\"1150\":1}}],[\"大一\",{\"1\":{\"1150\":2}}],[\"大纲就行\",{\"1\":{\"1144\":1}}],[\"大家其实都会\",{\"1\":{\"1140\":1}}],[\"大学里真正有用的知识\",{\"1\":{\"1150\":1}}],[\"大学的入门语言差不多都是c或者c++吧\",{\"1\":{\"1150\":1}}],[\"大学学计算机其实大部分时间还是得看你自己\",{\"1\":{\"1150\":1}}],[\"大学生的学习\",{\"1\":{\"1137\":1}}],[\"大学毕业后丧失学习能力的90后将彻底被挤出\",{\"1\":{\"283\":1}}],[\"大街网\",{\"1\":{\"1128\":1}}],[\"大公司的成长体系比小公司健全很多\",{\"1\":{\"1112\":1}}],[\"大公司里的成熟团队\",{\"1\":{\"1109\":1}}],[\"大牛\",{\"1\":{\"1109\":1}}],[\"大牛云集\",{\"1\":{\"1104\":1}}],[\"大点对眼睛好\",{\"1\":{\"1005\":1}}],[\"大\",{\"1\":{\"977\":1}}],[\"大托盘\",{\"1\":{\"959\":2}}],[\"大大减少检索的数据量\",{\"1\":{\"911\":1}}],[\"大体来说\",{\"1\":{\"892\":1}}],[\"大量用户请求购票整个系统会变成什么样\",{\"1\":{\"814\":1}}],[\"大概25kb的样子\",{\"1\":{\"801\":1}}],[\"大概了解了里面的东西\",{\"1\":{\"687\":1}}],[\"大的结论\",{\"1\":{\"722\":1}}],[\"大的写后面\",{\"1\":{\"686\":1}}],[\"大文件上传中途\",{\"1\":{\"708\":1}}],[\"大多数情况下\",{\"1\":{\"911\":1}}],[\"大多数浏览器在本地环境中支持加载和显示文本文件\",{\"1\":{\"706\":1}}],[\"大多都损失在网络交互了\",{\"1\":{\"102\":1}}],[\"大处着眼\",{\"1\":{\"688\":1}}],[\"大脑\",{\"1\":{\"686\":1}}],[\"大负载算法\",{\"1\":{\"574\":1}}],[\"大意了\",{\"1\":{\"415\":1}}],[\"大部分的人都只看到一部分计算机的应届生工资很高很羡慕\",{\"1\":{\"1141\":1}}],[\"大部分时候你是接触不到的\",{\"1\":{\"1109\":1}}],[\"大部分微服务框架底层涉及到网络通信的部分都是基于\",{\"1\":{\"713\":1}}],[\"大部分对象的生命周期较短\",{\"1\":{\"385\":1}}],[\"大部分情况下它和之前毫无变化\",{\"1\":{\"1148\":1}}],[\"大部分情况下\",{\"1\":{\"634\":1}}],[\"大部分情况\",{\"1\":{\"385\":1}}],[\"大部分东西不知道作用\",{\"1\":{\"238\":1}}],[\"大小写\",{\"1\":{\"802\":2}}],[\"大小\",{\"1\":{\"363\":1}}],[\"大厅满了\",{\"1\":{\"346\":1}}],[\"大于等于\",{\"1\":{\"278\":1}}],[\"大于\",{\"1\":{\"278\":1}}],[\"大佬\",{\"1\":{\"261\":1}}],[\"大div\",{\"1\":{\"220\":1}}],[\"大数据时代后台没法分析用户推荐\",{\"1\":{\"154\":1}}],[\"大致就需要监控的加pom\",{\"1\":{\"594\":1}}],[\"大致就是initializedatasourcebuilder方法通过\",{\"1\":{\"551\":1,\"1166\":1}}],[\"大致流程\",{\"0\":{\"138\":1}}],[\"大致思路\",{\"1\":{\"70\":1}}],[\"作者回复\",{\"1\":{\"897\":1,\"933\":1}}],[\"作者对这进行了解释\",{\"1\":{\"724\":1}}],[\"作者\",{\"1\":{\"379\":1,\"380\":1,\"383\":1,\"773\":1,\"891\":1,\"998\":1}}],[\"作者设置为\",{\"1\":{\"28\":1}}],[\"作用是事务执行期间用来定义\",{\"1\":{\"934\":1}}],[\"作用\",{\"0\":{\"323\":1},\"1\":{\"483\":1,\"883\":1,\"959\":1,\"1079\":2}}],[\"作为一个有抱负的人\",{\"1\":{\"1150\":1}}],[\"作为一把锁来用\",{\"1\":{\"110\":1}}],[\"作为中间点\",{\"1\":{\"1085\":1}}],[\"作为主键\",{\"0\":{\"972\":1},\"1\":{\"972\":1}}],[\"作为默认的聚簇索引\",{\"1\":{\"967\":1}}],[\"作为行的唯一标识符\",{\"1\":{\"965\":1}}],[\"作为用户可别觉得这样可真好啊\",{\"1\":{\"927\":1}}],[\"作为多用户共享的资源\",{\"1\":{\"926\":1}}],[\"作为下一条记录的\",{\"1\":{\"918\":1}}],[\"作为动词时它有禁闭\",{\"1\":{\"723\":1}}],[\"作为操作对象的参数传入方法\",{\"1\":{\"678\":1}}],[\"作为spring应用的application\",{\"1\":{\"593\":1}}],[\"作为java程序的一个库\",{\"1\":{\"550\":1,\"1166\":1}}],[\"作为媒介\",{\"1\":{\"220\":1}}],[\"作为\",{\"1\":{\"152\":1,\"713\":2}}],[\"作为缓存\",{\"1\":{\"102\":1}}],[\"关注的点在早起要做的事\",{\"1\":{\"980\":1}}],[\"关注的是用户账户余额表和用户课程表\",{\"1\":{\"927\":1}}],[\"关注点在\",{\"1\":{\"960\":1}}],[\"关注负数就行\",{\"1\":{\"685\":1}}],[\"关注负数为补码形式\",{\"1\":{\"648\":1}}],[\"关押的意思\",{\"1\":{\"723\":1}}],[\"关外层流时\",{\"1\":{\"688\":1}}],[\"关流\",{\"1\":{\"688\":1}}],[\"关联起来\",{\"1\":{\"790\":1}}],[\"关联\",{\"0\":{\"601\":1}}],[\"关联本系统会员信息\",{\"1\":{\"139\":1}}],[\"关键词要用醒目样式\",{\"1\":{\"1125\":1}}],[\"关键词\",{\"1\":{\"996\":1}}],[\"关键\",{\"1\":{\"594\":2}}],[\"关键字来定义一个cte\",{\"1\":{\"959\":1}}],[\"关键字来保证其可见性\",{\"1\":{\"283\":1}}],[\"关键字记录的指针\",{\"1\":{\"916\":1}}],[\"关键字就可以了\",{\"1\":{\"868\":1}}],[\"关键字\",{\"1\":{\"782\":2,\"868\":1,\"963\":2}}],[\"关键字修饰也是很有必要的\",{\"1\":{\"302\":1,\"779\":1}}],[\"关键字修饰的方法\",{\"1\":{\"182\":1}}],[\"关闭会话后会失效\",{\"1\":{\"1038\":1}}],[\"关闭\",{\"1\":{\"999\":1}}],[\"关闭订单\",{\"1\":{\"839\":1}}],[\"关闭防火墙\",{\"1\":{\"804\":1}}],[\"关闭资源为什么不写到catch里面\",{\"1\":{\"686\":1}}],[\"关闭解释器\",{\"1\":{\"635\":1}}],[\"关闭缓存\",{\"1\":{\"449\":1}}],[\"关闭eslint的语法检查\",{\"1\":{\"229\":1}}],[\"关灯\",{\"1\":{\"333\":1}}],[\"关系密切程度划分出来\",{\"1\":{\"960\":1}}],[\"关系\",{\"1\":{\"252\":1,\"657\":2}}],[\"关系型数据库\",{\"1\":{\"186\":1}}],[\"关于大学生的学习\",{\"0\":{\"1150\":1}}],[\"关于时间管理以及计划的制定\",{\"1\":{\"1142\":1}}],[\"关于时间的管理\",{\"1\":{\"1142\":1}}],[\"关于索引\",{\"1\":{\"975\":1}}],[\"关于如何查看扫描行数的问题\",{\"1\":{\"922\":1}}],[\"关于java\",{\"1\":{\"688\":1}}],[\"关于同步方法的总结\",{\"1\":{\"687\":1}}],[\"关于\",{\"0\":{\"246\":1},\"1\":{\"182\":1,\"227\":1,\"572\":1,\"802\":2}}],[\"关于代理非public方法的问题\",{\"1\":{\"182\":1}}],[\"关于这些扩展\",{\"1\":{\"12\":1}}],[\"关日志\",{\"1\":{\"102\":1}}],[\"首尾是一样的\",{\"1\":{\"309\":1}}],[\"首页每个人的个性化推荐\",{\"1\":{\"119\":1}}],[\"首页全量数据获取\",{\"1\":{\"102\":1}}],[\"首页染\",{\"1\":{\"102\":2}}],[\"首页一级菜单煊染\",{\"1\":{\"102\":1}}],[\"首先数据库有两个变量默认开启来避免了\",{\"1\":{\"932\":1}}],[\"首先将数据写入到一个临时文件中\",{\"1\":{\"859\":1}}],[\"首先重新登录mysql\",{\"1\":{\"805\":1}}],[\"首先启动mysql\",{\"1\":{\"802\":1}}],[\"首先了解下1和2在linux中代表什么\",{\"1\":{\"784\":1}}],[\"首先了解一个概念\",{\"1\":{\"296\":1}}],[\"首先定义一个饿汉式单例如下\",{\"1\":{\"700\":1}}],[\"首先实现comparable的类必须实现comparato\",{\"1\":{\"688\":1}}],[\"首先这是jdk在1\",{\"1\":{\"686\":1}}],[\"首先调用\",{\"1\":{\"681\":1}}],[\"首先他们都是实现多态的方式\",{\"1\":{\"680\":1}}],[\"首先通过\",{\"1\":{\"634\":1}}],[\"首先我们要解决长事务\",{\"1\":{\"928\":1}}],[\"首先我们要分析下这道题\",{\"1\":{\"328\":1}}],[\"首先我们使用javac\",{\"1\":{\"388\":1}}],[\"首先\",{\"0\":{\"697\":1},\"1\":{\"385\":1,\"640\":1,\"722\":1,\"895\":1,\"898\":1,\"899\":1,\"901\":1,\"908\":1,\"914\":1,\"990\":1,\"1131\":1,\"1142\":1,\"1144\":1,\"1150\":2}}],[\"首先都是可重入锁\",{\"1\":{\"380\":1}}],[\"首先要将变量从主内存拷贝到自己的工作空间\",{\"1\":{\"287\":1}}],[\"首先你们要明白单核多线程和多核多线程的区别\",{\"1\":{\"286\":1}}],[\"首先不同用户应该有独立的购物车\",{\"1\":{\"155\":1}}],[\"首先考虑自己的应用属于\",{\"1\":{\"99\":1}}],[\"首先分布式锁是一种跨进程跨机器节点的互斥锁\",{\"1\":{\"86\":1,\"114\":1}}],[\"频繁gc直角三角形\",{\"1\":{\"101\":1}}],[\"图发现的\",{\"1\":{\"996\":1}}],[\"图中虚线框里是同一行数据的\",{\"1\":{\"935\":1}}],[\"图中四个\",{\"1\":{\"914\":1}}],[\"图中\",{\"1\":{\"914\":1}}],[\"图中浅色框表示是在\",{\"1\":{\"900\":1}}],[\"图中第一个是开三个线程处理\",{\"1\":{\"813\":1}}],[\"图文详细\",{\"1\":{\"808\":1}}],[\"图像文件\",{\"1\":{\"706\":1}}],[\"图省事\",{\"1\":{\"686\":1}}],[\"图形化操作了\",{\"1\":{\"985\":1}}],[\"图形化的监控\",{\"1\":{\"589\":1}}],[\"图形化分析\",{\"1\":{\"391\":1}}],[\"图上的6步执行获取6个completablefuture\",{\"1\":{\"377\":1}}],[\"图\",{\"1\":{\"101\":1,\"543\":1,\"627\":1,\"924\":3,\"935\":1}}],[\"图片ocr\",{\"1\":{\"1163\":1}}],[\"图片缓存等\",{\"1\":{\"660\":1}}],[\"图片过滤链会用这个取上下文登陆信息\",{\"1\":{\"627\":1}}],[\"图片很清楚了\",{\"1\":{\"551\":1,\"1166\":1}}],[\"图片很形象\",{\"1\":{\"83\":1}}],[\"图片\",{\"1\":{\"58\":1,\"571\":1}}],[\"图片引入\",{\"1\":{\"29\":1}}],[\"图片增强\",{\"0\":{\"22\":1}}],[\"安排在最后\",{\"1\":{\"931\":1}}],[\"安装程序\",{\"1\":{\"1027\":1}}],[\"安装字体\",{\"1\":{\"1005\":1}}],[\"安装额外\",{\"1\":{\"1003\":2}}],[\"安装的\",{\"1\":{\"1003\":1}}],[\"安装教程\",{\"1\":{\"808\":1}}],[\"安装至本地仓库\",{\"1\":{\"561\":1}}],[\"安装后\",{\"1\":{\"223\":1}}],[\"安装\",{\"0\":{\"210\":1,\"266\":1,\"801\":1,\"825\":1,\"1002\":1,\"1003\":1},\"1\":{\"233\":1,\"808\":1,\"1003\":4,\"1005\":5}}],[\"安装插件方便查看\",{\"1\":{\"101\":1}}],[\"安全性和可访问性\",{\"1\":{\"706\":1}}],[\"安全\",{\"1\":{\"448\":1,\"594\":2}}],[\"安全校验\",{\"1\":{\"156\":1}}],[\"安全框架\",{\"1\":{\"153\":1}}],[\"安全的在\",{\"1\":{\"14\":1}}],[\"跟门牌号一样\",{\"1\":{\"1091\":1}}],[\"跟踪的文件的修改\",{\"1\":{\"990\":1}}],[\"跟踪垃圾回收\",{\"1\":{\"101\":1}}],[\"跟时间进行田忌赛马\",{\"1\":{\"980\":1}}],[\"跟row\",{\"1\":{\"972\":1}}],[\"跟count\",{\"1\":{\"956\":1}}],[\"跟cpu打交道\",{\"1\":{\"689\":1}}],[\"跟图\",{\"1\":{\"924\":1}}],[\"跟这个表有关的查询缓存会失效\",{\"1\":{\"898\":1}}],[\"跟eureka差不多服务的注册与发现\",{\"1\":{\"824\":1}}],[\"跟着我的思路往下看看\",{\"1\":{\"712\":1}}],[\"跟着视频教程学\",{\"1\":{\"552\":1}}],[\"跟内存打交道\",{\"1\":{\"689\":1}}],[\"跟随男\",{\"1\":{\"1121\":1}}],[\"跟随\",{\"1\":{\"572\":1}}],[\"跟其它配置混一起\",{\"1\":{\"71\":1}}],[\"优秀的人永远都走在大部队的前面\",{\"1\":{\"1150\":1}}],[\"优秀的地方\",{\"1\":{\"115\":1}}],[\"优势\",{\"1\":{\"872\":1}}],[\"优先保证核心业务\",{\"1\":{\"603\":1}}],[\"优先解析\",{\"1\":{\"517\":1}}],[\"优先级更加高\",{\"1\":{\"593\":1}}],[\"优先级低于vm\",{\"1\":{\"549\":1}}],[\"优先级越高\",{\"1\":{\"491\":1}}],[\"优先级\",{\"1\":{\"365\":1}}],[\"优先选择连接数最少\",{\"1\":{\"208\":1}}],[\"优先选择\",{\"1\":{\"82\":1}}],[\"优缺点\",{\"0\":{\"325\":1}}],[\"优惠码\",{\"1\":{\"197\":2}}],[\"优惠信息\",{\"1\":{\"158\":1}}],[\"优雅一点放配置文件\",{\"1\":{\"126\":1}}],[\"优点\",{\"0\":{\"911\":1},\"1\":{\"107\":1,\"325\":1}}],[\"优化手段\",{\"0\":{\"968\":1}}],[\"优化后毫秒级\",{\"1\":{\"959\":1}}],[\"优化慢查询\",{\"1\":{\"959\":1}}],[\"优化器的\",{\"1\":{\"969\":1}}],[\"优化器覆盖索引的优化\",{\"1\":{\"969\":1}}],[\"优化器会优化\",{\"1\":{\"923\":1}}],[\"优化器可能会认为全表扫描\",{\"1\":{\"923\":1}}],[\"优化器决定要使用\",{\"1\":{\"898\":1}}],[\"优化器阶段前是无能为力的\",{\"1\":{\"897\":1}}],[\"优化器阶段完成后\",{\"1\":{\"896\":1}}],[\"优化器是在表里面有多个索引的时候\",{\"1\":{\"896\":1}}],[\"优化器\",{\"0\":{\"896\":1},\"1\":{\"892\":2}}],[\"优化之uuid防误删\",{\"1\":{\"868\":1}}],[\"优化过的数据结构\",{\"1\":{\"849\":1}}],[\"优化了\",{\"1\":{\"712\":1}}],[\"优化代码\",{\"1\":{\"103\":1}}],[\"优化\",{\"1\":{\"102\":1,\"240\":1}}],[\"优化业务\",{\"1\":{\"102\":1,\"107\":1}}],[\"优化数据库\",{\"1\":{\"102\":1}}],[\"优化期间看图标衡量这些指标\",{\"1\":{\"101\":1}}],[\"应当前面带上目录\",{\"1\":{\"784\":1}}],[\"应使用\",{\"1\":{\"712\":1}}],[\"应用交付给客户时候需要经过三个步骤\",{\"1\":{\"994\":1}}],[\"应用了编译器优化中一种被称为常量折叠\",{\"1\":{\"725\":1}}],[\"应用集成模式与概念\",{\"1\":{\"611\":1}}],[\"应用场景\",{\"1\":{\"602\":1}}],[\"应用层\",{\"1\":{\"552\":1,\"688\":1}}],[\"应用启动的时候第一行日志会告诉你\",{\"1\":{\"597\":1}}],[\"应用启动后自动执行一些初始化任务\",{\"1\":{\"546\":1,\"1166\":1}}],[\"应用启动完成后\",{\"1\":{\"546\":1,\"1166\":1}}],[\"应用中\",{\"1\":{\"482\":1}}],[\"应用\",{\"1\":{\"261\":1,\"466\":1,\"712\":1}}],[\"应用程序\",{\"1\":{\"999\":1}}],[\"应用程序的下载标记\",{\"1\":{\"999\":1}}],[\"应用程序的扩展属性中的\",{\"1\":{\"999\":1}}],[\"应用程序不断进行\",{\"1\":{\"712\":1}}],[\"应用程序会一直发起\",{\"1\":{\"712\":1}}],[\"应用程序发起\",{\"1\":{\"711\":1}}],[\"应用程序是由\",{\"1\":{\"543\":1,\"1081\":1}}],[\"应用程序时\",{\"1\":{\"543\":1,\"727\":1}}],[\"应用程序上下文\",{\"1\":{\"538\":1,\"1082\":1}}],[\"应用程序中\",{\"1\":{\"156\":1,\"543\":1}}],[\"应用程序都是可见的\",{\"1\":{\"156\":1}}],[\"应用程序或网站可能会为用户生成一个认证令牌\",{\"1\":{\"153\":1}}],[\"应时间\",{\"1\":{\"100\":1}}],[\"应该扩大了\",{\"1\":{\"1140\":1}}],[\"应该不会再来一次了\",{\"1\":{\"1001\":1}}],[\"应该可以减少到\",{\"1\":{\"1001\":1}}],[\"应该使用分布式\",{\"1\":{\"972\":1}}],[\"应该使用真正的反向代理服务器\",{\"1\":{\"883\":1}}],[\"应该怎么做呢\",{\"1\":{\"923\":1}}],[\"应该怎么办呢\",{\"1\":{\"721\":1}}],[\"应该用基本类型对应的引用类型代替\",{\"1\":{\"717\":1}}],[\"应该把这些代码定义在一个方法里面\",{\"1\":{\"646\":1}}],[\"应该尽可能减少循环依赖的使用\",{\"1\":{\"543\":1}}],[\"应该也行\",{\"1\":{\"506\":1}}],[\"应该算的上是\",{\"1\":{\"494\":1}}],[\"应该就是配置拦截器\",{\"1\":{\"465\":1}}],[\"应该需要告诉其它两个线程\",{\"1\":{\"290\":1}}],[\"应该是行的\",{\"1\":{\"883\":1}}],[\"应该是\",{\"1\":{\"723\":1}}],[\"应该是get\",{\"1\":{\"512\":1}}],[\"应该是这个的缺点需要用到\",{\"1\":{\"283\":1}}],[\"应该是从1开始\",{\"1\":{\"88\":1}}],[\"应该放行\",{\"1\":{\"157\":1}}],[\"应该在集群服务器上面加一层\",{\"1\":{\"103\":1}}],[\"应该说是\",{\"1\":{\"76\":1}}],[\"第0行\",{\"1\":{\"1017\":1}}],[\"第2步在第五步之前实现都是可以的\",{\"1\":{\"987\":1}}],[\"第五步\",{\"1\":{\"489\":1}}],[\"第五个是可以实现选择性通知\",{\"1\":{\"380\":1}}],[\"第四家也愿意给你开这个工资\",{\"1\":{\"1130\":1}}],[\"第四个类\",{\"1\":{\"624\":1}}],[\"第四个是公平锁\",{\"1\":{\"380\":1}}],[\"第四步\",{\"1\":{\"489\":1}}],[\"第三家\",{\"1\":{\"1130\":1}}],[\"第三梯队城市\",{\"1\":{\"1107\":1}}],[\"第三梯队\",{\"1\":{\"1106\":1}}],[\"第三张表是3\",{\"1\":{\"961\":1}}],[\"第三种方式\",{\"1\":{\"933\":1}}],[\"第三种\",{\"1\":{\"933\":1}}],[\"第三种就是i\",{\"1\":{\"849\":1}}],[\"第三种选择\",{\"1\":{\"849\":1}}],[\"第三个\",{\"1\":{\"731\":1}}],[\"第三个是等待可中断\",{\"1\":{\"380\":1}}],[\"第三版\",{\"1\":{\"649\":1}}],[\"第三方jar包里面的配置类全路径都将放在classpath\",{\"1\":{\"731\":1}}],[\"第三方为我们提供的简化开发的场景启动器\",{\"1\":{\"477\":1}}],[\"第三方缓存整合\",{\"0\":{\"451\":1}}],[\"第三步\",{\"1\":{\"233\":1,\"489\":1}}],[\"第\",{\"0\":{\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"725\":1},\"1\":{\"338\":1,\"339\":1,\"620\":1,\"621\":1}}],[\"第二梯队城市\",{\"1\":{\"1107\":1}}],[\"第二梯队\",{\"1\":{\"1106\":1}}],[\"第二张表是\",{\"1\":{\"961\":1}}],[\"第二类更新丢失\",{\"1\":{\"906\":1}}],[\"第二部驻留到字符串常量池中\",{\"1\":{\"724\":1}}],[\"第二条就不会执行\",{\"1\":{\"591\":1}}],[\"第二种启动方式\",{\"1\":{\"934\":1}}],[\"第二种方式是相对较好的\",{\"1\":{\"933\":1}}],[\"第二种方式每个事务在开始时都不需要主动执行一次\",{\"1\":{\"907\":1}}],[\"第二种选择\",{\"1\":{\"849\":1}}],[\"第二种\",{\"0\":{\"546\":1},\"1\":{\"539\":1,\"933\":1}}],[\"第二种服务端签名后直传\",{\"1\":{\"238\":1}}],[\"第二季响应式还没出\",{\"1\":{\"466\":1}}],[\"第二个日志还没有写完期间发生了\",{\"1\":{\"901\":1}}],[\"第二个缓存5分07秒搞个随机数分散开\",{\"1\":{\"868\":1}}],[\"第二个直接给mq发个通知就不管了那三个自己通过订阅拿消息慢慢处理\",{\"1\":{\"813\":1}}],[\"第二个\",{\"1\":{\"731\":1}}],[\"第二个参数表示你想添加到哪个过滤器之前\",{\"1\":{\"627\":1}}],[\"第二个需求\",{\"1\":{\"590\":1}}],[\"第二个是性能\",{\"1\":{\"380\":1}}],[\"第二个服务此时发现过一过时间还是能拿到锁\",{\"1\":{\"115\":1}}],[\"第二次到达同步代码块时\",{\"1\":{\"379\":1}}],[\"第二次发送这个请求\",{\"1\":{\"268\":1}}],[\"第二\",{\"1\":{\"261\":1}}],[\"第二步\",{\"1\":{\"233\":1,\"489\":1}}],[\"第二天才发现是clash的问题查了7890的端口\",{\"1\":{\"198\":1}}],[\"第二层\",{\"1\":{\"155\":1}}],[\"第一梯队城市\",{\"1\":{\"1107\":1}}],[\"第一梯队\",{\"1\":{\"1106\":1}}],[\"第一原则是\",{\"1\":{\"923\":1}}],[\"第一条语句没有走索引\",{\"1\":{\"897\":1}}],[\"第一次查询某条记录\",{\"1\":{\"905\":1}}],[\"第一次调用的是\",{\"1\":{\"897\":1}}],[\"第一次跑也老是超时\",{\"1\":{\"576\":1}}],[\"第一次操作库存时\",{\"1\":{\"170\":1}}],[\"第一种启动方式\",{\"1\":{\"934\":1}}],[\"第一种方式\",{\"1\":{\"933\":1}}],[\"第一种就是阻塞io模型\",{\"1\":{\"849\":1}}],[\"第一种选择\",{\"1\":{\"849\":1}}],[\"第一种\",{\"0\":{\"545\":1},\"1\":{\"933\":1}}],[\"第一季\",{\"1\":{\"499\":1}}],[\"第一季就是掌握整个sevlet技术栈\",{\"1\":{\"466\":1}}],[\"第一组感知上个返回值自己也返回\",{\"1\":{\"375\":1}}],[\"第一个是常见的not\",{\"1\":{\"948\":1}}],[\"第一个是锁的实现不同\",{\"1\":{\"380\":1}}],[\"第一个被锁住的线程要过\",{\"1\":{\"932\":1}}],[\"第一个字是\",{\"1\":{\"924\":1}}],[\"第一个语句就白做了\",{\"1\":{\"919\":1}}],[\"第一个缓存5分01秒\",{\"1\":{\"868\":1}}],[\"第一个参数是0开始\",{\"1\":{\"963\":1}}],[\"第一个参数是作为下面的方法调用者出现\",{\"1\":{\"761\":1}}],[\"第一个参数是上面注入的我们在filter目录写好的类\",{\"1\":{\"627\":1}}],[\"第一个\",{\"1\":{\"731\":1}}],[\"第一个类\",{\"1\":{\"626\":1}}],[\"第一个需求\",{\"1\":{\"590\":1}}],[\"第一个线程执行的条件\",{\"1\":{\"336\":1}}],[\"第一个服务处理业务途中给停掉还没有释放锁\",{\"1\":{\"115\":1}}],[\"第一\",{\"1\":{\"261\":1,\"970\":1}}],[\"第一步会在堆上创建\",{\"1\":{\"724\":1}}],[\"第一步和第四步换成自己的代码\",{\"1\":{\"621\":1}}],[\"第一步\",{\"1\":{\"233\":1,\"489\":1,\"893\":1}}],[\"第一步是查\",{\"1\":{\"72\":1}}],[\"第一层\",{\"1\":{\"155\":1}}],[\"第90\",{\"1\":{\"100\":1}}],[\"压力就没那么大了\",{\"1\":{\"863\":1}}],[\"压力测试\",{\"0\":{\"100\":1}}],[\"压=\",{\"1\":{\"849\":1}}],[\"压到操作数栈\",{\"1\":{\"388\":1}}],[\"压入操作数栈中7\",{\"1\":{\"388\":1}}],[\"压入操作数栈中\",{\"1\":{\"388\":2}}],[\"压缩后的数据可以在需要时进行解压缩以恢复原始数据\",{\"1\":{\"1081\":1}}],[\"压缩和其他数据传输场景中\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"压缩算法将数据压缩为更小的形式\",{\"1\":{\"1081\":1}}],[\"压缩算法\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"压缩算法用于老年代\",{\"1\":{\"385\":1}}],[\"压缩性\",{\"1\":{\"132\":1}}],[\"压测吞吐量也会上来\",{\"1\":{\"254\":1}}],[\"压测时候\",{\"1\":{\"107\":1}}],[\"压测线程数\",{\"1\":{\"102\":1,\"107\":1}}],[\"压测内容\",{\"1\":{\"102\":1,\"107\":1}}],[\"压测的时候搭配\",{\"1\":{\"100\":1}}],[\"压测目的\",{\"1\":{\"99\":1}}],[\"压测章节也用了好用\",{\"1\":{\"79\":1}}],[\"线程数=逻辑处理器个数\",{\"1\":{\"1095\":1}}],[\"线程数和逻辑cpu个数\",{\"0\":{\"1095\":1}}],[\"线程处理连接\",{\"1\":{\"849\":1}}],[\"线程首先发起\",{\"1\":{\"712\":1}}],[\"线程依然是阻塞的\",{\"1\":{\"712\":1}}],[\"线程的优先级\",{\"1\":{\"687\":1}}],[\"线程并发安全问题\",{\"0\":{\"682\":1}}],[\"线程状态\",{\"0\":{\"676\":1}}],[\"线程在就绪状态时仍然持有其所拥有的锁资源\",{\"1\":{\"650\":1}}],[\"线程栈大小\",{\"1\":{\"383\":1}}],[\"线程会判断此时持有锁的线程是否是自己\",{\"1\":{\"379\":1}}],[\"线程不主动释放偏向锁\",{\"1\":{\"379\":1}}],[\"线程不安全\",{\"1\":{\"156\":1,\"686\":1,\"688\":3,\"779\":1}}],[\"线程使用的资源至少有一个不能共享的\",{\"1\":{\"377\":1}}],[\"线程串行化方法\",{\"0\":{\"375\":1}}],[\"线程资源必须通过线程池提供\",{\"1\":{\"366\":1}}],[\"线程池会根据当前系统特点对池内的线程进行优化处理\",{\"1\":{\"367\":1}}],[\"线程池不允许使用\",{\"1\":{\"366\":1}}],[\"线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销\",{\"1\":{\"366\":1}}],[\"线程池创建\",{\"1\":{\"363\":1}}],[\"线程池建议用原生是为了规避资源耗尽的风险\",{\"1\":{\"362\":1}}],[\"线程池实际中使用哪一个\",{\"0\":{\"360\":1}}],[\"线程池\",{\"1\":{\"354\":1,\"357\":1,\"359\":1,\"377\":1,\"582\":1}}],[\"线程池七大参数\",{\"0\":{\"362\":1},\"1\":{\"283\":2}}],[\"线程进入屏障通过cyclicbarrier的await方法\",{\"1\":{\"337\":1}}],[\"线程可以进入任何一个它已经拥有的锁所同步的代码块\",{\"1\":{\"321\":1}}],[\"线程b的操作可能会被误判为未修改过stock的值\",{\"1\":{\"309\":1}}],[\"线程b在线程a执行过程中执行了减少3和增加3的操作\",{\"1\":{\"309\":1}}],[\"线程b将stock的值增加3\",{\"1\":{\"309\":1}}],[\"线程b将stock的值减少3\",{\"1\":{\"309\":1}}],[\"线程b打完收工\",{\"1\":{\"305\":1}}],[\"线程b也通过getintvolatile\",{\"1\":{\"305\":1}}],[\"线程a将stock的值增加2\",{\"1\":{\"309\":1}}],[\"线程a将stock的值减少2\",{\"1\":{\"309\":1}}],[\"线程a和线程b分别对stock进行了多次操作\",{\"1\":{\"309\":1}}],[\"线程a和线程b同时读取stock的值为10\",{\"1\":{\"309\":1}}],[\"线程a和线程b各自持有一份价值为3的副本\",{\"1\":{\"305\":1}}],[\"线程a继续执行compareandswapint进行比较替换\",{\"1\":{\"305\":1}}],[\"线程a总能够看到\",{\"1\":{\"305\":1}}],[\"线程a重新获取value值\",{\"1\":{\"305\":1}}],[\"线程a通过getintvolatile\",{\"1\":{\"305\":1}}],[\"线程安全实现方式\",{\"1\":{\"740\":1}}],[\"线程安全\",{\"1\":{\"686\":1,\"688\":1,\"779\":1}}],[\"线程安全获得保证\",{\"0\":{\"297\":1}}],[\"线程安全性\",{\"1\":{\"156\":1}}],[\"线程2插入\",{\"1\":{\"693\":1}}],[\"线程2\",{\"1\":{\"294\":2}}],[\"线程1\",{\"1\":{\"294\":2,\"693\":2}}],[\"线程挂起等\",{\"1\":{\"113\":1}}],[\"线程\",{\"0\":{\"100\":1},\"1\":{\"302\":1,\"687\":1,\"694\":8,\"779\":1,\"928\":1,\"933\":1}}],[\"线程是运行在内存中的\",{\"1\":{\"99\":1}}],[\"线程标识和1\",{\"1\":{\"86\":1,\"114\":1}}],[\"|grep\",{\"1\":{\"782\":2}}],[\"|这两个符号既可以是逻辑运算符又可以是位运算符\",{\"1\":{\"685\":1}}],[\"||\",{\"1\":{\"237\":1,\"844\":1}}],[\"|\",{\"1\":{\"98\":1,\"536\":1,\"681\":2,\"694\":24,\"782\":1,\"789\":1,\"790\":1,\"905\":6,\"925\":7,\"1005\":3}}],[\"模糊搜\",{\"1\":{\"1005\":1}}],[\"模糊查询\",{\"1\":{\"439\":1}}],[\"模仿api的异常类\",{\"1\":{\"686\":1}}],[\"模型的特性\",{\"1\":{\"712\":1}}],[\"模型的特点\",{\"1\":{\"712\":1}}],[\"模型同样存在问题\",{\"1\":{\"712\":1}}],[\"模型确实有了很大改进\",{\"1\":{\"712\":1}}],[\"模型是无能为力的\",{\"1\":{\"711\":1}}],[\"模型中\",{\"1\":{\"711\":1,\"712\":1}}],[\"模型\",{\"0\":{\"710\":1},\"1\":{\"220\":1,\"711\":1,\"712\":4,\"713\":2}}],[\"模式下运行容器\",{\"1\":{\"790\":1}}],[\"模式的应用\",{\"1\":{\"640\":1}}],[\"模式\",{\"0\":{\"205\":1,\"206\":1,\"608\":1},\"1\":{\"206\":1,\"606\":1,\"607\":1,\"837\":1}}],[\"模式不需要依赖于底层数据资源的事务支持\",{\"1\":{\"186\":1}}],[\"模块之间耦合严重\",{\"1\":{\"678\":1}}],[\"模块的功能\",{\"1\":{\"227\":1}}],[\"模块功能主要由两个命令构成\",{\"1\":{\"217\":1}}],[\"模块\",{\"1\":{\"217\":1,\"509\":1}}],[\"模块化开发\",{\"0\":{\"222\":1}}],[\"模块化就是把代码进行拆分\",{\"1\":{\"217\":1}}],[\"模块化\",{\"0\":{\"217\":1}}],[\"模块介绍\",{\"0\":{\"158\":1}}],[\"模块存的session\",{\"1\":{\"141\":1}}],[\"模拟业务场景\",{\"0\":{\"854\":1}}],[\"模拟发了10个消息\",{\"1\":{\"831\":1}}],[\"模拟出错\",{\"1\":{\"693\":1}}],[\"模拟6部车\",{\"1\":{\"343\":1}}],[\"模拟3个停车位\",{\"1\":{\"342\":1,\"343\":1}}],[\"模拟两个服务\",{\"1\":{\"115\":1}}],[\"模拟的\",{\"1\":{\"98\":1,\"536\":1}}],[\"模板题参考实现\",{\"1\":{\"1085\":1}}],[\"模板好用\",{\"1\":{\"616\":1}}],[\"模板模式\",{\"1\":{\"498\":1}}],[\"模板初始化一个appname\",{\"1\":{\"222\":1}}],[\"模板的渲染速度\",{\"1\":{\"102\":1}}],[\"模板引擎是服务端渲染\",{\"1\":{\"96\":1}}],[\"视为普通字符而不是通配符\",{\"1\":{\"959\":1}}],[\"视图来查询哪些索引从未被使用\",{\"1\":{\"974\":1}}],[\"视图等\",{\"1\":{\"892\":1}}],[\"视图解析器根据名称找到视图\",{\"1\":{\"543\":1}}],[\"视图解析器viewresolver\",{\"1\":{\"480\":1}}],[\"视图对象\",{\"1\":{\"251\":1}}],[\"视图\",{\"1\":{\"220\":1,\"726\":1,\"934\":1}}],[\"视图映射\",{\"0\":{\"97\":1},\"1\":{\"97\":1}}],[\"视频文件\",{\"1\":{\"706\":1}}],[\"视频什么的都是字节流\",{\"1\":{\"688\":1}}],[\"视频讲的特好\",{\"1\":{\"611\":1}}],[\"视频用的就是\",{\"1\":{\"200\":1}}],[\"视频是这个\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"视频以程序化配置讲解\",{\"1\":{\"112\":1}}],[\"视频中再想去找没看到\",{\"1\":{\"844\":1}}],[\"视频中直接看源码真棒\",{\"1\":{\"828\":1}}],[\"视频中是测\",{\"1\":{\"530\":1}}],[\"视频中用的这个一个月9块\",{\"1\":{\"197\":1}}],[\"视频中繁琐的\",{\"1\":{\"92\":1}}],[\"视频中雷神stream循环查库了\",{\"1\":{\"91\":1}}],[\"视频给我的感觉还挺繁琐的\",{\"1\":{\"92\":1}}],[\"视频\",{\"1\":{\"58\":1,\"543\":1,\"1081\":1,\"1150\":1}}],[\"各大博客\",{\"1\":{\"1145\":1}}],[\"各大博客以及知名博主的个人博客\",{\"1\":{\"1145\":1}}],[\"各大主流数据库比如\",{\"1\":{\"609\":1}}],[\"各类文本编辑器\",{\"1\":{\"1015\":1}}],[\"各并发事务之间数据库是独立的\",{\"1\":{\"962\":1}}],[\"各自的查询呢\",{\"1\":{\"923\":1}}],[\"各自的三个权限\",{\"1\":{\"786\":1}}],[\"各自在自己的工作内存中进行加1操作\",{\"1\":{\"290\":1}}],[\"各权限的分数对照表如下\",{\"1\":{\"786\":1}}],[\"各有一个方法\",{\"1\":{\"763\":1}}],[\"各部门清理缓存\",{\"1\":{\"539\":1,\"1083\":1}}],[\"各位注意\",{\"1\":{\"192\":1}}],[\"各种出错\",{\"1\":{\"1150\":1}}],[\"各种有序容器的线程安全版本等\",{\"1\":{\"641\":1}}],[\"各种线程安全队列\",{\"1\":{\"641\":1}}],[\"各种并发容器\",{\"1\":{\"641\":1}}],[\"各种\",{\"1\":{\"251\":1}}],[\"各种唯一约束\",{\"0\":{\"172\":1}}],[\"各种锁机制\",{\"0\":{\"168\":1}}],[\"各种封装的vo\",{\"1\":{\"92\":1}}],[\"各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存操作后再写回主内存中的\",{\"1\":{\"288\":1}}],[\"各个线程中的工作内存储存着主内存中的变量副本拷贝\",{\"1\":{\"287\":1}}],[\"各个服务可能处于不同主机\",{\"1\":{\"208\":1}}],[\"各个中间件的压测数据\",{\"1\":{\"102\":1}}],[\"各个模块在host给一个二级域名\",{\"1\":{\"94\":1}}],[\"网易云课堂\",{\"1\":{\"1145\":1}}],[\"网名\",{\"1\":{\"891\":1}}],[\"网警\",{\"1\":{\"866\":1}}],[\"网卡\",{\"1\":{\"709\":1}}],[\"网格任务支持海量子任务均匀分配到所有\",{\"1\":{\"594\":1}}],[\"网上冲浪\",{\"0\":{\"1186\":1}}],[\"网上冲浪发现用ssh好使\",{\"1\":{\"799\":1,\"985\":1}}],[\"网上另外的补充\",{\"1\":{\"959\":1}}],[\"网上有个例子挺形象的\",{\"1\":{\"675\":1}}],[\"网上例子很多\",{\"1\":{\"671\":1}}],[\"网上还有个解决方法不理解但可行\",{\"1\":{\"546\":1}}],[\"网上随便搜破解随便破\",{\"1\":{\"132\":1}}],[\"网关这一层可以权限校验\",{\"1\":{\"590\":1}}],[\"网关再根据二级域名给断言路由到各个模块\",{\"1\":{\"94\":1}}],[\"网关配置匹配host到指定的\",{\"1\":{\"94\":1}}],[\"网关\",{\"1\":{\"94\":1,\"99\":1,\"228\":1,\"261\":1,\"466\":1}}],[\"网络上已经有非常多分析外键与级联缺陷的文章了\",{\"1\":{\"971\":1}}],[\"网络连接失败\",{\"1\":{\"846\":1}}],[\"网络连接\",{\"1\":{\"823\":1}}],[\"网络请求和响应\",{\"1\":{\"709\":1}}],[\"网络层\",{\"1\":{\"688\":1}}],[\"网络通信通常也叫socket编程\",{\"1\":{\"688\":1}}],[\"网络通信协议\",{\"1\":{\"688\":1}}],[\"网络协议太复杂\",{\"1\":{\"688\":1}}],[\"网络编程我愿意称中\",{\"1\":{\"713\":1}}],[\"网络编程\",{\"1\":{\"688\":1}}],[\"网络丢包\",{\"1\":{\"572\":1}}],[\"网络等等进行操作的模板类\",{\"1\":{\"498\":1}}],[\"网络异常\",{\"1\":{\"183\":1}}],[\"网络问题+分布式机器\",{\"1\":{\"176\":1}}],[\"网络\",{\"1\":{\"77\":1,\"679\":1,\"709\":1,\"712\":1}}],[\"网络故障诊断\",{\"1\":{\"76\":1}}],[\"网络故障或路由问题\",{\"1\":{\"76\":1}}],[\"网络中的故障\",{\"1\":{\"76\":1}}],[\"独立运行的\",{\"1\":{\"611\":1}}],[\"独立开发\",{\"1\":{\"611\":1}}],[\"独立\",{\"1\":{\"493\":1}}],[\"独立部署\",{\"1\":{\"198\":1}}],[\"独立于外部方法的事务a\",{\"1\":{\"179\":1}}],[\"独立自治\",{\"1\":{\"92\":1}}],[\"独占锁\",{\"0\":{\"326\":1},\"1\":{\"115\":1}}],[\"独占排它\",{\"1\":{\"110\":1}}],[\"独占排他使用\",{\"1\":{\"87\":1}}],[\"异地入职补贴\",{\"1\":{\"1108\":1}}],[\"异或是无进位加法\",{\"1\":{\"706\":1}}],[\"异或\",{\"1\":{\"688\":1}}],[\"异常重启之后\",{\"1\":{\"902\":1}}],[\"异常重启之后数据不丢失\",{\"1\":{\"902\":1}}],[\"异常重启了\",{\"1\":{\"893\":1}}],[\"异常后\",{\"1\":{\"686\":3}}],[\"异常\",{\"1\":{\"686\":1}}],[\"异常是\",{\"1\":{\"374\":1}}],[\"异常类型错误\",{\"1\":{\"182\":1}}],[\"异常类中的各种常量enum\",{\"1\":{\"92\":1}}],[\"异常处理在实际项目中的应用\",{\"1\":{\"729\":1}}],[\"异常处理线程\",{\"0\":{\"701\":1},\"1\":{\"687\":1}}],[\"异常处理\",{\"1\":{\"156\":1}}],[\"异步与解耦\",{\"0\":{\"813\":1}}],[\"异步处理\",{\"1\":{\"603\":1}}],[\"异步执行需要\",{\"1\":{\"543\":1,\"1081\":1}}],[\"异步获取json数据\",{\"1\":{\"503\":1}}],[\"异步非阻塞的方式占用少量资源处理大量并发springboot\",{\"1\":{\"466\":1}}],[\"异步任务成功完成了\",{\"1\":{\"374\":1}}],[\"异步任务\",{\"1\":{\"202\":2}}],[\"异步+\",{\"1\":{\"198\":1}}],[\"异步通知\",{\"1\":{\"192\":1}}],[\"异步回调\",{\"0\":{\"192\":1}}],[\"异步下单\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"异步确保型\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"异步编排会丢失\",{\"1\":{\"161\":1}}],[\"异步编排\",{\"1\":{\"126\":1,\"372\":1}}],[\"异步\",{\"0\":{\"353\":1},\"1\":{\"91\":1,\"713\":1,\"813\":1}}],[\"静态\",{\"1\":{\"935\":2}}],[\"静态代码块饿汉式\",{\"1\":{\"779\":1}}],[\"静态代理例子\",{\"1\":{\"688\":1}}],[\"静态代理比如\",{\"1\":{\"493\":1}}],[\"静态代理为什么是静态代理\",{\"0\":{\"493\":1}}],[\"静态内部类不会自动创建\",{\"1\":{\"779\":1}}],[\"静态内部类形式\",{\"1\":{\"779\":1}}],[\"静态内部类形式最简单\",{\"1\":{\"779\":1}}],[\"静态内容的分发\",{\"1\":{\"77\":1}}],[\"静态属性\",{\"1\":{\"697\":2}}],[\"静态域\",{\"1\":{\"695\":1}}],[\"静态同步方法\",{\"1\":{\"687\":1}}],[\"静态变量\",{\"1\":{\"722\":1}}],[\"静态变量属于类的状态\",{\"1\":{\"688\":2}}],[\"静态变量只能在类主体中定义\",{\"0\":{\"663\":1}}],[\"静态变量等信息\",{\"1\":{\"383\":1}}],[\"静态块和静态方法\",{\"1\":{\"658\":1}}],[\"静态块\",{\"1\":{\"658\":3}}],[\"静态路由\",{\"1\":{\"591\":1}}],[\"静态字段和构成数组对象的元素\",{\"1\":{\"284\":1}}],[\"静态资源访问不到\",{\"1\":{\"546\":1}}],[\"静态资源启用版本控制\",{\"0\":{\"539\":1},\"1\":{\"539\":1}}],[\"静态资源\",{\"1\":{\"102\":2}}],[\"静态资源就到\",{\"1\":{\"95\":1}}],[\"静态资源放\",{\"1\":{\"92\":1}}],[\"得带引号不然就错了\",{\"1\":{\"951\":1}}],[\"得停下来先擦掉一些记录\",{\"1\":{\"899\":1}}],[\"得在执行器阶段\",{\"1\":{\"897\":1}}],[\"得在其余\",{\"1\":{\"331\":1}}],[\"得出来的数不会超过15\",{\"1\":{\"706\":1}}],[\"得和真实\",{\"1\":{\"618\":1}}],[\"得像下面这样写\",{\"1\":{\"422\":1}}],[\"得到新的一行数据\",{\"1\":{\"900\":1}}],[\"得到的余数才能用来要存放的位置也就是对应的数组下标\",{\"1\":{\"739\":1}}],[\"得到的为\",{\"1\":{\"505\":1}}],[\"得到\",{\"1\":{\"627\":1,\"917\":1}}],[\"得到所有的组件\",{\"1\":{\"483\":1}}],[\"得到version为1\",{\"1\":{\"170\":1}}],[\"得到服务器返回的数据后\",{\"1\":{\"49\":1}}],[\"得益于\",{\"1\":{\"92\":1}}],[\"商业转载请联系作者获得授权\",{\"1\":{\"383\":1,\"998\":1}}],[\"商城项目烂大街\",{\"1\":{\"261\":1}}],[\"商城项目用的很多\",{\"1\":{\"183\":1,\"607\":1}}],[\"商对客\",{\"1\":{\"206\":1}}],[\"商品定义表\",{\"1\":{\"960\":1}}],[\"商品数据库paydb\",{\"1\":{\"960\":1}}],[\"商品保存可2pc\",{\"1\":{\"183\":1,\"607\":1}}],[\"商品信息\",{\"1\":{\"158\":1}}],[\"商品搜索直接\",{\"1\":{\"126\":1}}],[\"商品搜索\",{\"0\":{\"126\":1},\"1\":{\"263\":1}}],[\"商品介绍等基础数据\",{\"1\":{\"118\":1}}],[\"商品上架的测试数据建议和老师的一模一样\",{\"1\":{\"261\":1}}],[\"商品上架\",{\"0\":{\"92\":1},\"1\":{\"261\":1}}],[\"商网就是做了这个限制\",{\"1\":{\"48\":1}}],[\"先去第一梯队积累两年\",{\"1\":{\"1106\":1}}],[\"先走谁都行\",{\"1\":{\"1085\":1}}],[\"先配\",{\"1\":{\"1005\":1}}],[\"先配置\",{\"1\":{\"1005\":1}}],[\"先开代理\",{\"1\":{\"1003\":1}}],[\"先在从库添加\",{\"1\":{\"976\":1}}],[\"先了解这一个\",{\"1\":{\"976\":1}}],[\"先获取了资源\",{\"1\":{\"933\":2}}],[\"先启动\",{\"1\":{\"928\":1}}],[\"先启动谁都不会报错\",{\"1\":{\"688\":1}}],[\"先备份用户课程表再备份账户余额表\",{\"1\":{\"927\":1}}],[\"先写输出语句括号里要输出的\",{\"0\":{\"1059\":1}}],[\"先写\",{\"1\":{\"901\":2}}],[\"先点的没秒到\",{\"1\":{\"858\":1}}],[\"先检查a\",{\"1\":{\"849\":1}}],[\"先揭晓答案\",{\"1\":{\"725\":1}}],[\"先主要看第一种情况\",{\"1\":{\"722\":1}}],[\"先看看他都能干嘛\",{\"1\":{\"1145\":1}}],[\"先看final\",{\"1\":{\"721\":1}}],[\"先看md5是否存在\",{\"1\":{\"172\":1}}],[\"先扯点别的\",{\"1\":{\"720\":1}}],[\"先放弃\",{\"1\":{\"928\":1}}],[\"先放到这一个文件\",{\"1\":{\"707\":1}}],[\"先放头部再迁移改指针\",{\"1\":{\"693\":1}}],[\"先调用hashcode\",{\"0\":{\"691\":1}}],[\"先关外层的再关内层的\",{\"1\":{\"688\":1}}],[\"先得到key的hashcode\",{\"1\":{\"688\":1}}],[\"先根据hashcode的某种算法找在数组的位置\",{\"1\":{\"688\":1}}],[\"先抽象模型定义共性行为\",{\"1\":{\"678\":1}}],[\"先自加\",{\"1\":{\"670\":1}}],[\"先初始化父类\",{\"1\":{\"658\":1}}],[\"先登陆有了\",{\"1\":{\"627\":1}}],[\"先从自身找问题\",{\"1\":{\"583\":1}}],[\"先从缓存中查找所需的数据\",{\"1\":{\"91\":1}}],[\"先\",{\"1\":{\"583\":1,\"590\":1}}],[\"先欠着\",{\"1\":{\"575\":1}}],[\"先前工程项目没有引入spring\",{\"1\":{\"574\":1}}],[\"先后顺序如下\",{\"1\":{\"543\":1}}],[\"先进先出\",{\"1\":{\"448\":1}}],[\"先进行了写操作\",{\"1\":{\"290\":1}}],[\"先按照员工id查询员工信息\",{\"1\":{\"423\":1}}],[\"先说明冒号的作用\",{\"1\":{\"505\":1}}],[\"先说vm选项\",{\"1\":{\"383\":1}}],[\"先说答案\",{\"1\":{\"99\":1}}],[\"先分析一下里面各个参数的含义\",{\"1\":{\"383\":1}}],[\"先有\",{\"1\":{\"364\":1}}],[\"先到的被阻塞\",{\"1\":{\"338\":1,\"339\":1}}],[\"先解释什么是有序性问题\",{\"1\":{\"329\":1}}],[\"先来先服务\",{\"1\":{\"315\":1}}],[\"先来后到\",{\"1\":{\"315\":1}}],[\"先想办法拿到变量value在内存中的地址\",{\"1\":{\"306\":1}}],[\"先给\",{\"1\":{\"229\":1}}],[\"先创好文件\",{\"1\":{\"213\":1}}],[\"先通过for\",{\"1\":{\"169\":1}}],[\"先读缓存\",{\"1\":{\"121\":1}}],[\"先往下赶进度了\",{\"1\":{\"109\":1}}],[\"先exclusion排除\",{\"1\":{\"107\":1}}],[\"先凝练自己的问题\",{\"1\":{\"72\":1}}],[\"利用了\",{\"1\":{\"935\":1}}],[\"利用率很高\",{\"1\":{\"932\":1}}],[\"利用率很低之后\",{\"1\":{\"918\":1}}],[\"利用微服务名进行路由\",{\"1\":{\"591\":1}}],[\"利用aop打印接口的入参和出参日志\",{\"1\":{\"492\":1}}],[\"利用工厂加载\",{\"1\":{\"483\":1}}],[\"利用getautoconfigurationentry\",{\"1\":{\"483\":1}}],[\"利用该特性实现volatile的内存可见性\",{\"1\":{\"296\":1}}],[\"利用session原理\",{\"1\":{\"98\":1,\"130\":1,\"536\":1}}],[\"利用缓存\",{\"1\":{\"91\":1}}],[\"利用分布式缓存系统如redis或memcached来实现分布式锁\",{\"1\":{\"79\":1}}],[\"别忘记这一步\",{\"1\":{\"861\":1,\"865\":1}}],[\"别忘了\",{\"1\":{\"591\":1}}],[\"别让bean循环依赖\",{\"1\":{\"543\":1}}],[\"别的线程需要这个结果\",{\"1\":{\"372\":1}}],[\"别的老师都是直接去网上复制\",{\"1\":{\"231\":1}}],[\"别的节点无法感知\",{\"1\":{\"183\":1}}],[\"别人还没接触\",{\"1\":{\"1150\":1}}],[\"别人已经帮你找好了\",{\"1\":{\"1145\":1}}],[\"别人访问了就访问了\",{\"1\":{\"571\":1}}],[\"别人的代码\",{\"1\":{\"552\":1}}],[\"别人的笔记\",{\"1\":{\"283\":1,\"552\":1}}],[\"别人不依赖这些组件\",{\"1\":{\"517\":1}}],[\"别人笔记\",{\"1\":{\"283\":1,\"614\":1}}],[\"别人笔记别人代码\",{\"1\":{\"203\":1}}],[\"别人笔记还是评论区的更贴近视频别人代码\",{\"1\":{\"90\":1}}],[\"别人前端代码别人后端代码\",{\"1\":{\"203\":1}}],[\"别名\",{\"1\":{\"73\":1,\"947\":1,\"987\":2}}],[\"略做删减\",{\"1\":{\"1005\":1}}],[\"略\",{\"1\":{\"89\":1,\"395\":1,\"887\":1,\"1002\":1,\"1005\":1}}],[\"全家桶\",{\"0\":{\"1166\":1}}],[\"全家桶中有个很重要的组件就是网关\",{\"1\":{\"590\":1}}],[\"全方位成长机会\",{\"1\":{\"1104\":1}}],[\"全屏\",{\"1\":{\"997\":1}}],[\"全表扫码顺序有主键就根据主键扫\",{\"0\":{\"967\":1}}],[\"全表扫描是指mysql会扫描整个表的每一行数据\",{\"1\":{\"966\":1}}],[\"全连接是一种外连接\",{\"1\":{\"964\":1}}],[\"全连接是外连接吗\",{\"0\":{\"964\":1}}],[\"全文索引\",{\"1\":{\"936\":1}}],[\"全文搜索属于最常见的需求\",{\"1\":{\"262\":1}}],[\"全是针对项目的技术栈在问\",{\"1\":{\"890\":1}}],[\"全是抄的源码createconfiguration方法\",{\"1\":{\"125\":1}}],[\"全班都会被耽误\",{\"1\":{\"849\":1}}],[\"全比完全false就证明没有一样的就可以添加\",{\"1\":{\"688\":1}}],[\"全类名\",{\"1\":{\"509\":1}}],[\"全\",{\"1\":{\"283\":1}}],[\"全局一份好切换\",{\"1\":{\"981\":1}}],[\"全局锁主要用在逻辑备份过程中\",{\"1\":{\"929\":1}}],[\"全局锁的典型使用场景是\",{\"1\":{\"927\":1}}],[\"全局锁就是对整个数据库实例加锁\",{\"1\":{\"927\":1}}],[\"全局锁\",{\"0\":{\"927\":1}}],[\"全局限流\",{\"1\":{\"887\":1}}],[\"全局共享\",{\"1\":{\"722\":2}}],[\"全局事务看成订单模块\",{\"1\":{\"606\":1}}],[\"全局事务创建成功并生成一个全局唯一的xid\",{\"1\":{\"606\":1}}],[\"全局和分支事务的状态\",{\"1\":{\"606\":1}}],[\"全局唯一的事务id\",{\"1\":{\"606\":1}}],[\"全局唯一id\",{\"0\":{\"174\":1}}],[\"全局安装\",{\"1\":{\"222\":2}}],[\"全局安装命令行工具\",{\"1\":{\"219\":1}}],[\"全局声明注册一个组件\",{\"1\":{\"221\":1}}],[\"全局\",{\"1\":{\"216\":1,\"465\":1,\"607\":1}}],[\"全局请求唯一id\",{\"1\":{\"174\":1}}],[\"全局变量\",{\"1\":{\"88\":1}}],[\"全系统统一一个\",{\"1\":{\"153\":1}}],[\"全链路\",{\"1\":{\"102\":1}}],[\"全部转移成\",{\"1\":{\"60\":1}}],[\"下了一个朗文5的词典是真好用\",{\"1\":{\"1164\":1}}],[\"下完之后浏览器一顿跳\",{\"1\":{\"1153\":1}}],[\"下午发现\",{\"1\":{\"1150\":1}}],[\"下班弹\",{\"1\":{\"1104\":1}}],[\"下似乎失效了\",{\"1\":{\"1006\":1}}],[\"下选\",{\"1\":{\"1005\":1}}],[\"下有问题\",{\"1\":{\"1005\":1}}],[\"下建了个\",{\"1\":{\"1005\":1}}],[\"下建了两个目录\",{\"1\":{\"1004\":1}}],[\"下的仓库\",{\"1\":{\"1005\":1}}],[\"下的第一个\",{\"1\":{\"477\":1}}],[\"下划线\",{\"1\":{\"959\":1}}],[\"下划线的存在只是为了提高代码的可读性\",{\"1\":{\"643\":1}}],[\"下\",{\"1\":{\"947\":1,\"1005\":3}}],[\"下次查询再重新建立一个\",{\"1\":{\"893\":1}}],[\"下次调用直接从缓存中获取\",{\"1\":{\"122\":1}}],[\"下订单成功\",{\"1\":{\"844\":1}}],[\"下订单的时候\",{\"1\":{\"839\":1}}],[\"下路径也要变成左斜杠\",{\"1\":{\"806\":1}}],[\"下个jdk还需要登录\",{\"1\":{\"800\":1}}],[\"下文件描述符\",{\"1\":{\"784\":2}}],[\"下图是一个最简单的\",{\"1\":{\"736\":1}}],[\"下图就是一个典型的使用\",{\"1\":{\"713\":1}}],[\"下一行\",{\"1\":{\"897\":1}}],[\"下一个问题来了\",{\"1\":{\"722\":1}}],[\"下一篇\",{\"1\":{\"2\":1}}],[\"下单其实不适合\",{\"1\":{\"608\":1}}],[\"下具有的文件都是classpath\",{\"1\":{\"454\":1}}],[\"下载安装nginx\",{\"1\":{\"810\":1}}],[\"下载并安装mysql官方的\",{\"1\":{\"801\":1}}],[\"下载超慢\",{\"1\":{\"800\":1}}],[\"下载镜像文件\",{\"0\":{\"267\":1}}],[\"下载完的依赖会在\",{\"1\":{\"215\":1,\"219\":1}}],[\"下载依赖包\",{\"1\":{\"215\":1,\"219\":1,\"222\":1}}],[\"下载\",{\"1\":{\"213\":1}}],[\"下面分享一些获取资料的途径\",{\"1\":{\"1144\":1}}],[\"下面就可以新建各种\",{\"1\":{\"1100\":1}}],[\"下面三条就好理解都是装环境\",{\"1\":{\"994\":1}}],[\"下面\",{\"1\":{\"991\":1}}],[\"下面我主要从使用的角度\",{\"1\":{\"913\":1}}],[\"下面我逐一为你解释\",{\"1\":{\"905\":1}}],[\"下面我们通过几段代码加深对它的理解\",{\"1\":{\"725\":1}}],[\"下面我们来具体分析\",{\"1\":{\"723\":1}}],[\"下面我们将一个简单的number++操作\",{\"1\":{\"290\":1}}],[\"下面使用按视频就是\",{\"1\":{\"829\":1}}],[\"下面解释开头提出的问题\",{\"1\":{\"798\":1,\"984\":1}}],[\"下面命令开启的ip是\",{\"1\":{\"793\":1,\"803\":1}}],[\"下面对常见的情况进行列举\",{\"1\":{\"725\":1}}],[\"下面再看看常量池中不存在的情况\",{\"1\":{\"724\":1}}],[\"下面还是基于jdk8版本进行说明\",{\"1\":{\"722\":1}}],[\"下面的\",{\"1\":{\"1010\":1}}],[\"下面的这个\",{\"1\":{\"779\":1}}],[\"下面的方法重载会报错\",{\"1\":{\"715\":1}}],[\"下面的代码都是\",{\"1\":{\"496\":1}}],[\"下面才是正确的写法\",{\"1\":{\"686\":1}}],[\"下面自己码的也可以看看抄过来的图带点自己好理解的逻辑去理解\",{\"1\":{\"605\":1}}],[\"下面有说明\",{\"1\":{\"554\":1}}],[\"下面这段代码中到底创建了几个对象\",{\"1\":{\"722\":1}}],[\"下面这段代码最终会打印什么\",{\"1\":{\"720\":1}}],[\"下面这样\",{\"1\":{\"591\":1}}],[\"下面这样就可以唯一定位到上面属性指定的组件\",{\"1\":{\"234\":1}}],[\"下面这条语句才能命中缓存\",{\"1\":{\"447\":1}}],[\"下面这个必须放settings后面\",{\"1\":{\"400\":1}}],[\"下面这三组api区别\",{\"1\":{\"375\":1}}],[\"下面四个调用都能执行\",{\"1\":{\"216\":1}}],[\"下面是这个表的初始化语句\",{\"1\":{\"921\":1}}],[\"下面是这个表的创建语句\",{\"1\":{\"898\":1}}],[\"下面是按照时间顺序执行两个事务的行为\",{\"1\":{\"905\":1}}],[\"下面是一个只有两行的表的初始化语句\",{\"1\":{\"934\":1}}],[\"下面是一个示例\",{\"1\":{\"538\":1,\"1082\":1}}],[\"下面是一些避免stream循环查询数据库的常见方法\",{\"1\":{\"91\":1}}],[\"下面是示例代码\",{\"1\":{\"179\":1}}],[\"下面是\",{\"1\":{\"156\":1}}],[\"下面抄源码\",{\"1\":{\"125\":1}}],[\"下标\",{\"1\":{\"88\":1}}],[\"递归实现\",{\"1\":{\"883\":1}}],[\"递归地处理当前文件夹及其所有子文件夹中的文件\",{\"1\":{\"540\":1}}],[\"递归回调可以解决倒计时刷新的功能\",{\"1\":{\"128\":1}}],[\"递归\",{\"1\":{\"87\":1,\"886\":1}}],[\"最开始的时候用了一段时间\",{\"1\":{\"1164\":1}}],[\"最近更新了新系统\",{\"1\":{\"1163\":1}}],[\"最近最少使用的\",{\"1\":{\"448\":1}}],[\"最主要的是\",{\"1\":{\"1161\":1}}],[\"最忌讳的是朝三暮四\",{\"1\":{\"1150\":1}}],[\"最新的\",{\"1\":{\"1150\":1}}],[\"最基本的要求\",{\"1\":{\"1150\":1}}],[\"最多一个月你就可以离开公司了\",{\"1\":{\"1122\":1}}],[\"最长递增子序列\",{\"1\":{\"1085\":1,\"1086\":1}}],[\"最快\",{\"1\":{\"956\":1}}],[\"最可能影响并发度的锁的申请时机尽量往后放\",{\"1\":{\"933\":1}}],[\"最可能影响并发度的锁尽量往后放\",{\"1\":{\"931\":1}}],[\"最左前缀可以用于在索引中定位记录\",{\"1\":{\"924\":1}}],[\"最左前缀\",{\"1\":{\"923\":1}}],[\"最左前缀原则\",{\"0\":{\"923\":1},\"1\":{\"923\":1}}],[\"最经典的例子就是转账\",{\"1\":{\"904\":1}}],[\"最简单的设置步长\",{\"1\":{\"961\":1}}],[\"最简单的方法\",{\"1\":{\"897\":1}}],[\"最简单的缓存技术可以用\",{\"1\":{\"103\":1}}],[\"最简洁\",{\"1\":{\"779\":1}}],[\"最原始的时候\",{\"1\":{\"736\":1}}],[\"最前\",{\"1\":{\"658\":2}}],[\"最显著的特性有两个方面\",{\"1\":{\"634\":1}}],[\"最直观的印象是什么呢\",{\"1\":{\"633\":1}}],[\"最推崇的\",{\"1\":{\"612\":1}}],[\"最佳列宽\",{\"1\":{\"1051\":1}}],[\"最佳\",{\"1\":{\"576\":1,\"1126\":1}}],[\"最佳实战\",{\"1\":{\"115\":1,\"517\":2}}],[\"最下面一层就是这个参数点了\",{\"1\":{\"383\":1}}],[\"最差的情况\",{\"1\":{\"307\":1}}],[\"最重要的\",{\"1\":{\"254\":1}}],[\"最好可以试着封装一下这个模式\",{\"1\":{\"1150\":1}}],[\"最好是在拿到年终奖之后\",{\"1\":{\"1122\":1}}],[\"最好使用list\",{\"1\":{\"1074\":1}}],[\"最好就是上述的日志\",{\"1\":{\"846\":1}}],[\"最好拿出来放controller\",{\"1\":{\"829\":1}}],[\"最好选择\",{\"1\":{\"494\":1}}],[\"最好搞一个枚举常量\",{\"1\":{\"252\":1}}],[\"最好还是单独新建一些\",{\"1\":{\"250\":1}}],[\"最好的方式是\",{\"1\":{\"1142\":1}}],[\"最好的解决有序性问题的办法\",{\"1\":{\"329\":1}}],[\"最好的解决方法\",{\"1\":{\"119\":1}}],[\"最好的是生成客户端上传所需要的上传凭证\",{\"1\":{\"238\":1}}],[\"最小是1\",{\"1\":{\"687\":1}}],[\"最小化实际dom操作的次数\",{\"1\":{\"218\":1}}],[\"最小连接\",{\"1\":{\"208\":1}}],[\"最高境界就是数据库设计师和系统架构师\",{\"1\":{\"203\":1}}],[\"最大值加\",{\"1\":{\"918\":1}}],[\"最大值为64m\",{\"1\":{\"383\":1}}],[\"最大是10\",{\"1\":{\"687\":1}}],[\"最大大小用\",{\"1\":{\"383\":1}}],[\"最大只能开到\",{\"1\":{\"363\":1}}],[\"最大的变化就是引入了\",{\"1\":{\"261\":1,\"466\":1}}],[\"最大努力通知型方案\",{\"1\":{\"183\":1,\"192\":1,\"607\":1}}],[\"最大原因\",{\"1\":{\"176\":1}}],[\"最大特点\",{\"1\":{\"132\":1}}],[\"最大响应时间\",{\"1\":{\"100\":1}}],[\"最终只好为了清理回滚段\",{\"1\":{\"906\":1}}],[\"最终只有一个线程扩容后的数据会复制成功\",{\"1\":{\"682\":1}}],[\"最终形成了一个闭环的链表\",{\"1\":{\"694\":1}}],[\"最终拦截器\",{\"1\":{\"619\":1}}],[\"最终方案\",{\"1\":{\"598\":1}}],[\"最终保持到\",{\"1\":{\"363\":1}}],[\"最终让a\",{\"1\":{\"295\":1}}],[\"最终输出就是\",{\"1\":{\"295\":1}}],[\"最终执行指令\",{\"1\":{\"292\":1}}],[\"最终解决方案\",{\"1\":{\"153\":1}}],[\"最终的选择方案\",{\"1\":{\"145\":1}}],[\"最终的返回值仍然会包含之前设置的所有属性和值\",{\"1\":{\"125\":1}}],[\"最终一致性\",{\"1\":{\"116\":1,\"183\":1,\"571\":1,\"572\":1,\"844\":1}}],[\"最后放一下sharelist官方地址\",{\"1\":{\"1159\":1}}],[\"最后才知道是\",{\"1\":{\"1150\":1}}],[\"最后才生成真正的执行计划\",{\"1\":{\"923\":1}}],[\"最后找到一个最适合自己的节奏\",{\"1\":{\"1142\":1}}],[\"最后只能从远程仓库找啦\",{\"1\":{\"1009\":1}}],[\"最后判断是否出现了循环等待\",{\"1\":{\"932\":1}}],[\"最后业务开发就是把\",{\"1\":{\"929\":1}}],[\"最后三步看上去有点\",{\"1\":{\"900\":1}}],[\"最后再总结就够了\",{\"1\":{\"1150\":1}}],[\"最后再进行关联\",{\"1\":{\"970\":1}}],[\"最后再将结果写回到账本上\",{\"1\":{\"899\":1}}],[\"最后再看一下下面的这种情况\",{\"1\":{\"722\":1}}],[\"最后到达存储引擎\",{\"1\":{\"892\":1}}],[\"最后是instance\",{\"1\":{\"598\":1}}],[\"最后的s为service\",{\"1\":{\"594\":1}}],[\"最后的总结说不推荐用这种\",{\"1\":{\"111\":1}}],[\"最后开始解析配置类中定义的bean\",{\"1\":{\"517\":1}}],[\"最后completablefuture\",{\"1\":{\"377\":1}}],[\"最后车辆离开\",{\"1\":{\"342\":1}}],[\"最后我们需要通过countdownlatch的await方法来控制班长主线程的执行\",{\"1\":{\"334\":1}}],[\"最后\",{\"1\":{\"240\":1,\"658\":2,\"713\":1,\"721\":1,\"724\":1,\"919\":1,\"929\":1,\"1142\":1}}],[\"最后得\",{\"1\":{\"192\":1}}],[\"最后将方法的结果放入缓存\",{\"1\":{\"123\":1}}],[\"最后del操作还会把其他服务器的锁释放\",{\"1\":{\"87\":1}}],[\"最少响应时间\",{\"1\":{\"100\":1}}],[\"最早双token方案在哪出现的\",{\"1\":{\"70\":1}}],[\"新组建不久的团队\",{\"1\":{\"1109\":1}}],[\"新技术+新方向+新团队\",{\"1\":{\"1104\":1}}],[\"新发现\",{\"1\":{\"1041\":2}}],[\"新电脑还没施工完成\",{\"1\":{\"1004\":1}}],[\"新代码更新集成到现有的代码库中\",{\"1\":{\"994\":1}}],[\"新表命名为旧表的名称\",{\"1\":{\"976\":1}}],[\"新设计了一款芯片\",{\"1\":{\"740\":1}}],[\"新旧交替学习\",{\"1\":{\"552\":1}}],[\"新生代死亡多\",{\"1\":{\"389\":1}}],[\"新生代用coping\",{\"1\":{\"389\":1}}],[\"新生代内存\",{\"1\":{\"385\":1}}],[\"新建空数据库\",{\"1\":{\"796\":1}}],[\"新建一个\",{\"1\":{\"589\":1}}],[\"新建\",{\"0\":{\"555\":1},\"1\":{\"990\":1}}],[\"新建分组接口\",{\"1\":{\"241\":1}}],[\"新建addgroup\",{\"1\":{\"241\":1}}],[\"新增则\",{\"1\":{\"887\":1}}],[\"新增一种机制\",{\"1\":{\"309\":1}}],[\"新增时不需要携带\",{\"1\":{\"241\":1}}],[\"新增\",{\"1\":{\"241\":1}}],[\"新版本没有vue\",{\"1\":{\"219\":1}}],[\"新的\",{\"1\":{\"681\":1}}],[\"新的nacos已经没有整合ribbon了\",{\"1\":{\"594\":1}}],[\"新的老的都学\",{\"1\":{\"553\":1}}],[\"新的会话查询信息\",{\"1\":{\"446\":1}}],[\"新的任务进来\",{\"1\":{\"363\":1}}],[\"新的过期时间就是看门狗的默认时间\",{\"1\":{\"115\":1}}],[\"新的值\",{\"1\":{\"61\":3}}],[\"新人程序员\",{\"1\":{\"87\":1}}],[\"导数据之前就会启动一个事务\",{\"1\":{\"927\":1}}],[\"导包只可以导到当前层\",{\"1\":{\"665\":1}}],[\"导包\",{\"0\":{\"665\":1}}],[\"导入朗文5时候碰到的问题\",{\"1\":{\"1162\":1}}],[\"导入到\",{\"1\":{\"981\":1}}],[\"导入sql文件\",{\"1\":{\"806\":1}}],[\"导入依赖spring\",{\"1\":{\"608\":1}}],[\"导入组件默认组件名字是\",{\"1\":{\"509\":1}}],[\"导入与第三方缓存整合的适配包\",{\"1\":{\"451\":1}}],[\"导入第三方缓存包即可\",{\"1\":{\"451\":1}}],[\"导入相关jar包技术后只要自己写一个cache的实现\",{\"1\":{\"451\":1}}],[\"导入人人开源的项目到idea时\",{\"1\":{\"227\":1}}],[\"导入vscode\",{\"1\":{\"215\":1}}],[\"导入eclipse进行测试\",{\"1\":{\"191\":1}}],[\"导入\",{\"1\":{\"123\":1,\"223\":1}}],[\"导致的\",{\"1\":{\"977\":1}}],[\"导致还是其他原因\",{\"1\":{\"977\":1}}],[\"导致整个库挂了\",{\"1\":{\"928\":1}}],[\"导致数据页有空洞\",{\"1\":{\"919\":1}}],[\"导致数据库查询不存在数据\",{\"1\":{\"866\":1}}],[\"导致所有请求都会带上\",{\"1\":{\"880\":1}}],[\"导致有这个optional\",{\"1\":{\"871\":1}}],[\"导致有存在\",{\"1\":{\"866\":1}}],[\"导致消息丢失\",{\"1\":{\"846\":1}}],[\"导致库存未解锁\",{\"1\":{\"844\":1}}],[\"导致两个线程的数据结构不一致导致了bug\",{\"1\":{\"694\":1}}],[\"导致迷迷糊糊怎么也搞不明白\",{\"1\":{\"694\":1}}],[\"导致复杂和冗余\",{\"1\":{\"686\":1}}],[\"导致编译时\",{\"1\":{\"686\":1}}],[\"导致了在第一次调用时\",{\"1\":{\"576\":1}}],[\"导致每次访问都要请求服务器\",{\"1\":{\"539\":1,\"1083\":1}}],[\"导致客户端的静态文件往往不是当前最新版本\",{\"1\":{\"539\":1,\"1083\":1}}],[\"导致大量线程空循环\",{\"1\":{\"312\":1}}],[\"导致请求失败\",{\"1\":{\"164\":1}}],[\"导致丢失老request\",{\"1\":{\"160\":1}}],[\"导致丢失\",{\"1\":{\"156\":1,\"581\":1}}],[\"导致堆外内存溢出\",{\"1\":{\"107\":1}}],[\"导致死锁的发生\",{\"1\":{\"933\":1}}],[\"导致死锁\",{\"1\":{\"87\":1,\"110\":1}}],[\"导航栏\",{\"1\":{\"2\":1,\"5\":1}}],[\"防重\",{\"1\":{\"890\":1}}],[\"防重表\",{\"0\":{\"173\":1},\"1\":{\"847\":1}}],[\"防刷\",{\"1\":{\"848\":1}}],[\"防止数据库因为负载过大而瘫痪\",{\"1\":{\"960\":1}}],[\"防止重复提交拦截器\",{\"1\":{\"889\":1}}],[\"防止被继承后对属性进行修改\",{\"1\":{\"721\":1}}],[\"防止从外部进行修改\",{\"1\":{\"721\":1}}],[\"防止崩溃\",{\"1\":{\"603\":1}}],[\"防止与eurekaserver网络不通情况下\",{\"1\":{\"569\":1}}],[\"防止事务堆积\",{\"1\":{\"543\":1,\"1081\":1}}],[\"防止无限循环\",{\"1\":{\"543\":1}}],[\"防止有些用户配置的文件上传解析器不符合规范\",{\"1\":{\"483\":1}}],[\"防止各jar包冲突\",{\"1\":{\"473\":1}}],[\"防止版本更新带来的问题\",{\"1\":{\"400\":1,\"424\":1}}],[\"防止应用程序使用过多的内存\",{\"1\":{\"383\":1}}],[\"防止用户点击多次\",{\"1\":{\"380\":1}}],[\"防止出现指令重排的\",{\"1\":{\"296\":1}}],[\"防止表单重复提交你用到了鼓粒商城提交订单的幂等性设计\",{\"1\":{\"261\":1}}],[\"防止本地事务失效\",{\"1\":{\"178\":1}}],[\"防黄牛\",{\"1\":{\"202\":1}}],[\"防误删\",{\"1\":{\"87\":1}}],[\"防宕机没释放锁\",{\"1\":{\"87\":1,\"110\":1}}],[\"防死锁发生\",{\"1\":{\"87\":1}}],[\"防火墙规则\",{\"1\":{\"76\":1}}],[\"世界上\",{\"1\":{\"87\":1}}],[\"✨\",{\"1\":{\"87\":1}}],[\"缓存区\",{\"1\":{\"990\":1}}],[\"缓存每次都不会命中\",{\"1\":{\"876\":1}}],[\"缓存被\",{\"1\":{\"867\":1}}],[\"缓存原理图\",{\"0\":{\"450\":1}}],[\"缓存是没有被使用的\",{\"1\":{\"449\":1}}],[\"缓存是跟线程挂钩的还是跟核心挂钩的\",{\"1\":{\"286\":1}}],[\"缓存存放多少元素\",{\"1\":{\"448\":1}}],[\"缓存多长时间清空一次\",{\"1\":{\"448\":1}}],[\"缓存刷新间隔\",{\"1\":{\"448\":1}}],[\"缓存清空\",{\"1\":{\"444\":1}}],[\"缓存的回收策略\",{\"1\":{\"448\":1}}],[\"缓存的value值\",{\"1\":{\"123\":1}}],[\"缓存的名字\",{\"1\":{\"123\":1}}],[\"缓存的分区\",{\"1\":{\"123\":1}}],[\"缓存的技术有很多\",{\"1\":{\"103\":1}}],[\"缓存没有再读数据库\",{\"1\":{\"121\":1}}],[\"缓存数据+过期时间也足够解决大部分业务对于缓存的要求\",{\"1\":{\"118\":1}}],[\"缓存数据加上过期时间\",{\"1\":{\"118\":1}}],[\"缓存数据一致性\",{\"0\":{\"116\":1}}],[\"缓存本来保证的就是\",{\"1\":{\"116\":1}}],[\"缓存里面的数据如何和数据库保持一致\",{\"1\":{\"116\":1}}],[\"缓存与数据库一致\",{\"1\":{\"108\":1}}],[\"缓存雪崩\",{\"0\":{\"868\":1},\"1\":{\"108\":1}}],[\"缓存穿透\",{\"1\":{\"108\":1,\"865\":1,\"876\":1}}],[\"缓存\",{\"0\":{\"852\":1,\"866\":1,\"867\":1},\"1\":{\"91\":1,\"102\":1,\"103\":1,\"198\":1,\"849\":2}}],[\"缓存有过期时间\",{\"1\":{\"87\":1}}],[\"缓存击穿\",{\"1\":{\"87\":1,\"108\":1}}],[\"缓存那一篇一起学习\",{\"1\":{\"78\":1}}],[\"该提交会有多个父提交\",{\"1\":{\"990\":1}}],[\"该文档得重新索引归类\",{\"1\":{\"936\":1}}],[\"该文件的权限数字就是\",{\"1\":{\"786\":1}}],[\"该声明指明\",{\"1\":{\"920\":1}}],[\"该索引必须是唯一索引\",{\"1\":{\"918\":1}}],[\"该项目没用\",{\"1\":{\"877\":1}}],[\"该项重启是很快的\",{\"1\":{\"558\":1}}],[\"该给哪些参数之间有些什么关系\",{\"1\":{\"828\":1}}],[\"该命令会返回\",{\"1\":{\"782\":1}}],[\"该命令相当于发get请求\",{\"1\":{\"591\":1}}],[\"该接口会根据刷新令牌的有效性\",{\"1\":{\"890\":1}}],[\"该接口接受一个参数\",{\"1\":{\"748\":3}}],[\"该接口不接受任何参数\",{\"1\":{\"748\":1}}],[\"该接口只有一个方法\",{\"1\":{\"546\":1,\"1166\":1}}],[\"该类只能在同一个package中使用\",{\"1\":{\"668\":1}}],[\"该模型由以下五个主要组成部分构成\",{\"1\":{\"630\":1}}],[\"该用户就会有一个token值\",{\"1\":{\"627\":1}}],[\"该特性是指系统为用户提供的服务可一直使用\",{\"1\":{\"571\":1}}],[\"该特性是指所有节点在相同时刻的数据完全一致\",{\"1\":{\"571\":1}}],[\"该对象封装了命令行参数的信息\",{\"1\":{\"546\":1,\"1166\":1}}],[\"该对象值得引用地址\",{\"1\":{\"305\":1}}],[\"该注解中已经包含了\",{\"1\":{\"482\":1}}],[\"该算法基于一种观察\",{\"1\":{\"385\":1}}],[\"该算法将内存分为两个区域\",{\"1\":{\"385\":1}}],[\"该算法分为两个阶段\",{\"1\":{\"385\":1}}],[\"该框架中用到了executor\",{\"1\":{\"359\":1}}],[\"该方法的实现位于unsafe\",{\"1\":{\"306\":1}}],[\"该线程失去cpu执行权\",{\"1\":{\"305\":1}}],[\"该线程会去执行一个定时任务\",{\"1\":{\"86\":1,\"114\":1}}],[\"该查询语言非常全面\",{\"1\":{\"272\":1}}],[\"该配置去yaml配\",{\"1\":{\"202\":1}}],[\"该业务的mq架构图\",{\"1\":{\"187\":1}}],[\"该锁实现了juc\",{\"1\":{\"115\":1}}],[\"该表极具学习价值\",{\"1\":{\"102\":1}}],[\"该节点会根据你的地理位置和网络条件\",{\"1\":{\"77\":1}}],[\"执行一段时间后\",{\"1\":{\"980\":1}}],[\"执行期间\",{\"1\":{\"934\":1}}],[\"执行效率\",{\"1\":{\"911\":1}}],[\"执行命令\",{\"1\":{\"897\":1}}],[\"执行的时候\",{\"1\":{\"929\":1}}],[\"执行的逻辑也差不多\",{\"1\":{\"897\":1}}],[\"执行的就是子类重写的test\",{\"1\":{\"658\":1}}],[\"执行的就是子类重写的代码\",{\"1\":{\"658\":1}}],[\"执行器调用引擎的提交事务接口\",{\"1\":{\"900\":1}}],[\"执行器调用一次\",{\"1\":{\"897\":1}}],[\"执行器生成这个操作的\",{\"1\":{\"900\":1}}],[\"执行器拿到引擎给的行数据\",{\"1\":{\"900\":1}}],[\"执行器先找引擎取\",{\"1\":{\"900\":1}}],[\"执行器负责具体执行\",{\"1\":{\"898\":1}}],[\"执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端\",{\"1\":{\"897\":1}}],[\"执行器就会根据表的引擎定义\",{\"1\":{\"897\":1}}],[\"执行器\",{\"0\":{\"897\":1}}],[\"执行器等\",{\"1\":{\"892\":1}}],[\"执行器等功能模块\",{\"1\":{\"892\":1}}],[\"执行结果会被存入查询缓存中\",{\"1\":{\"894\":1}}],[\"执行逻辑就会来到第二步\",{\"1\":{\"894\":1}}],[\"执行刷新令牌的操作\",{\"1\":{\"890\":1}}],[\"执行队列\",{\"1\":{\"854\":1}}],[\"执行这个方法\",{\"1\":{\"836\":1}}],[\"执行这个方法rabbittemplate\",{\"1\":{\"510\":1}}],[\"执行以下命令开启远程访问限制\",{\"1\":{\"793\":1,\"803\":1}}],[\"执行下面的程序\",{\"1\":{\"725\":1}}],[\"执行s1\",{\"1\":{\"724\":1}}],[\"执行类的初始化代码\",{\"1\":{\"679\":1}}],[\"执行等\",{\"1\":{\"630\":1}}],[\"执行请求会有重试机制\",{\"1\":{\"580\":1}}],[\"执行成功会解码响应数据\",{\"1\":{\"580\":1}}],[\"执行成功的远程feign调用的服务肯定不会回滚了\",{\"1\":{\"176\":1}}],[\"执行相关任务\",{\"1\":{\"543\":1,\"1081\":1}}],[\"执行耗时\",{\"1\":{\"492\":1}}],[\"执行增删改查方法\",{\"1\":{\"465\":2}}],[\"执行int类型的加\",{\"1\":{\"388\":1}}],[\"执行iadd\",{\"1\":{\"290\":1}}],[\"执行不了任务\",{\"1\":{\"379\":1}}],[\"执行完代码代入上面的场景就是\",{\"1\":{\"987\":1}}],[\"执行完成\",{\"1\":{\"929\":1}}],[\"执行完成后\",{\"1\":{\"894\":1}}],[\"执行完毕\",{\"1\":{\"650\":1}}],[\"执行完同步代码块后\",{\"1\":{\"379\":1}}],[\"执行完之后再进行解锁\",{\"1\":{\"329\":1}}],[\"执行\",{\"1\":{\"365\":1,\"722\":1,\"887\":1,\"905\":1,\"931\":1,\"1006\":1}}],[\"执行cas方法\",{\"1\":{\"305\":1}}],[\"执行了\",{\"1\":{\"302\":1,\"779\":1}}],[\"执行putfileld\",{\"1\":{\"290\":1}}],[\"执行getfield\",{\"1\":{\"290\":1}}],[\"执行顺序有可能变成\",{\"1\":{\"302\":1,\"779\":1}}],[\"执行顺序是\",{\"1\":{\"293\":1}}],[\"执行顺序\",{\"1\":{\"156\":1}}],[\"执行位置\",{\"1\":{\"156\":1}}],[\"执行检索请求\",{\"1\":{\"126\":1}}],[\"执行时内存\",{\"1\":{\"101\":1}}],[\"执行事务前后\",{\"1\":{\"962\":1}}],[\"执行事务操作\",{\"1\":{\"182\":1}}],[\"执行事务的操作\",{\"1\":{\"179\":1}}],[\"执行事务\",{\"1\":{\"85\":1}}],[\"执行之前\",{\"1\":{\"85\":1}}],[\"浪费cpu资源\",{\"1\":{\"83\":1}}],[\"乐观锁解决写写冲突\",{\"1\":{\"906\":1}}],[\"乐观锁适用于多读的应用类型\",{\"1\":{\"855\":1}}],[\"乐观锁典型例子\",{\"1\":{\"855\":1}}],[\"乐观锁主要使用于处理读多写少的问题\",{\"1\":{\"170\":1}}],[\"乐观锁\",{\"0\":{\"83\":1,\"85\":1,\"269\":1},\"1\":{\"83\":1,\"855\":2,\"857\":1,\"906\":1}}],[\"悲观锁解决写写冲突\",{\"1\":{\"906\":1}}],[\"悲观锁sql落地\",{\"1\":{\"906\":1}}],[\"悲观锁使用时一般伴随事务一起使用\",{\"1\":{\"169\":1}}],[\"悲观锁已经越来越少的被使用到生产环境中了\",{\"1\":{\"169\":1}}],[\"悲观锁则有一定概率会\",{\"1\":{\"83\":1}}],[\"悲观锁\",{\"0\":{\"82\":1},\"1\":{\"855\":1,\"906\":1}}],[\"查漏补缺\",{\"1\":{\"1150\":1}}],[\"查类\",{\"0\":{\"1064\":1}}],[\"查ip的网站\",{\"1\":{\"1041\":1}}],[\"查到的\",{\"1\":{\"934\":2}}],[\"查找是查找\",{\"1\":{\"1085\":1}}],[\"查找是否有指定源码的相关配置\",{\"1\":{\"1012\":1}}],[\"查找需要基于排序好的集合\",{\"1\":{\"1085\":1}}],[\"查找顺序\",{\"1\":{\"1009\":1}}],[\"查找star大于1000\",{\"1\":{\"985\":1}}],[\"查找过程的时间复杂度是\",{\"1\":{\"972\":1}}],[\"查找到第一个符合条件的记录是\",{\"1\":{\"923\":1}}],[\"查找一个值最多只需要访问\",{\"1\":{\"916\":1}}],[\"查找路径不只两个\",{\"1\":{\"916\":1}}],[\"查找成本都很高\",{\"1\":{\"899\":1}}],[\"查资料\",{\"1\":{\"723\":1}}],[\"查库的时候\",{\"1\":{\"629\":1}}],[\"查出的数据都会被默认先放在一级缓存中\",{\"1\":{\"447\":1}}],[\"查出对象\",{\"1\":{\"423\":1}}],[\"查出所有分类\",{\"1\":{\"229\":1}}],[\"查完后+放缓存\",{\"1\":{\"108\":1}}],[\"查询mysql官方手册得知删除数据的速度和创建的索引数量是成正比的\",{\"1\":{\"975\":1}}],[\"查询时间超过了我们设定的时间的语句\",{\"1\":{\"959\":1}}],[\"查询平均成绩大于等于68分的同学的信息并按总分从高到低排序\",{\"1\":{\"959\":1}}],[\"查询定义\",{\"1\":{\"959\":1}}],[\"查询将只匹配以\",{\"1\":{\"959\":1}}],[\"查询近30天活跃用户数\",{\"1\":{\"952\":1}}],[\"查询需要返回不等于指定值的所有记录\",{\"1\":{\"923\":1}}],[\"查询语句的执行流程\",{\"1\":{\"921\":1}}],[\"查询语句的那一套流程\",{\"1\":{\"898\":1}}],[\"查询比较慢\",{\"1\":{\"909\":1}}],[\"查询条件里面只有\",{\"1\":{\"923\":1}}],[\"查询条件无主键\",{\"1\":{\"906\":1}}],[\"查询条件所指定主键为一个范围时\",{\"1\":{\"906\":1}}],[\"查询条件明确指定索引或主键时\",{\"1\":{\"906\":1}}],[\"查询条件明确指定索引时\",{\"1\":{\"906\":1}}],[\"查询条件明确指定主键时\",{\"1\":{\"906\":1}}],[\"查询条件不同\",{\"1\":{\"444\":1}}],[\"查询也会在优化器之前调用\",{\"1\":{\"897\":1}}],[\"查询缓存的命中率会非常低\",{\"1\":{\"894\":1}}],[\"查询缓存的失效非常频繁\",{\"1\":{\"894\":1}}],[\"查询缓存\",{\"0\":{\"894\":1},\"1\":{\"892\":1,\"894\":1}}],[\"查询拆解\",{\"0\":{\"892\":1}}],[\"查询\",{\"1\":{\"808\":1}}],[\"查询结果的响应时间增加到了\",{\"1\":{\"572\":1}}],[\"查询标签\",{\"1\":{\"449\":1}}],[\"查询一条数据\",{\"1\":{\"446\":1}}],[\"查询的时候如果某些条件没带可能sql拼装会有问题\",{\"1\":{\"431\":1}}],[\"查询的时候锁定该条数据\",{\"1\":{\"169\":1}}],[\"查询员工\",{\"1\":{\"430\":1}}],[\"查询employee的同时查询员工对应的部门\",{\"1\":{\"421\":1}}],[\"查询商品详情页的逻辑比较复杂\",{\"1\":{\"372\":1}}],[\"查询出商品库存信息\",{\"1\":{\"169\":1}}],[\"查询接口\",{\"1\":{\"165\":1}}],[\"查询数据库的业务执行了两次\",{\"1\":{\"108\":1}}],[\"查询或更新条件必须是具体值\",{\"1\":{\"81\":1}}],[\"查询或者更新条件必须是索引字段\",{\"1\":{\"81\":1,\"936\":1}}],[\"查看书签\",{\"0\":{\"1068\":1}}],[\"查看指定\",{\"1\":{\"1041\":1}}],[\"查看被占用端口对应的\",{\"1\":{\"1041\":1}}],[\"查看外网\",{\"1\":{\"1041\":1}}],[\"查看工作区\",{\"1\":{\"990\":1}}],[\"查看firewalld状态\",{\"1\":{\"804\":1}}],[\"查看mysql运行状态\",{\"1\":{\"802\":1}}],[\"查看是否成功\",{\"1\":{\"800\":1}}],[\"查看8080端口占用\",{\"1\":{\"782\":1}}],[\"查看一下printstream类的源码\",{\"1\":{\"720\":1}}],[\"查看spring\",{\"1\":{\"476\":1}}],[\"查看所有分支列表\",{\"1\":{\"987\":1}}],[\"查看所有索引\",{\"1\":{\"270\":1}}],[\"查看所有节点\",{\"1\":{\"270\":1}}],[\"查看主节点\",{\"1\":{\"270\":1}}],[\"查看\",{\"1\":{\"270\":1,\"802\":1,\"977\":1}}],[\"查看过期时间\",{\"1\":{\"87\":1}}],[\"查看详情\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"语音那么复杂的逻辑\",{\"1\":{\"1150\":1}}],[\"语文\",{\"1\":{\"959\":2}}],[\"语文成绩\",{\"1\":{\"959\":1}}],[\"语言字符串的缺陷\",{\"1\":{\"849\":1}}],[\"语言开发的搜索引擎\",{\"1\":{\"736\":1}}],[\"语言中\",{\"1\":{\"635\":1}}],[\"语雀官方笔记\",{\"1\":{\"466\":1}}],[\"语句中\",{\"1\":{\"959\":1}}],[\"语句中需要查询的列\",{\"1\":{\"959\":1}}],[\"语句中列名的子集\",{\"1\":{\"959\":1}}],[\"语句中分组的列应该是\",{\"1\":{\"959\":1}}],[\"语句中使用了\",{\"1\":{\"959\":1}}],[\"语句中使用\",{\"1\":{\"892\":1}}],[\"语句进行数据去重\",{\"1\":{\"959\":1}}],[\"语句将更新\",{\"1\":{\"959\":1}}],[\"语句更新会生成\",{\"1\":{\"935\":1}}],[\"语句完成的时候会自动提交\",{\"1\":{\"934\":1}}],[\"语句本身就是一个事务\",{\"1\":{\"934\":1}}],[\"语句会被阻塞\",{\"1\":{\"931\":1}}],[\"语句会对查询到的行加上排它锁\",{\"1\":{\"906\":1}}],[\"语句后\",{\"1\":{\"931\":1}}],[\"语句执行时会是什么现象呢\",{\"1\":{\"931\":1}}],[\"语句执行之前到达\",{\"1\":{\"929\":1}}],[\"语句里面设定等待时间\",{\"1\":{\"928\":1}}],[\"语句是无记录\",{\"1\":{\"959\":1}}],[\"语句是这么写的\",{\"1\":{\"924\":1}}],[\"语句是否满足\",{\"1\":{\"895\":1}}],[\"语句没有where\",{\"1\":{\"923\":1}}],[\"语句可以这么写\",{\"1\":{\"919\":1}}],[\"语句放到了事务中\",{\"1\":{\"908\":1}}],[\"语句的执行顺序如下\",{\"1\":{\"963\":1}}],[\"语句的执行流程图\",{\"1\":{\"900\":1}}],[\"语句的条件是\",{\"1\":{\"923\":1}}],[\"语句的开销\",{\"1\":{\"907\":1}}],[\"语句对\",{\"1\":{\"906\":1}}],[\"语句开始执行的时候创建的\",{\"1\":{\"905\":1}}],[\"语句也会被记录在\",{\"1\":{\"902\":1}}],[\"语句过程中在写完第一个日志后\",{\"1\":{\"901\":1}}],[\"语句来做例子\",{\"1\":{\"901\":1}}],[\"语句时的内部流程\",{\"1\":{\"900\":1}}],[\"语句基本的执行链路\",{\"1\":{\"898\":1}}],[\"语句就会这么写\",{\"1\":{\"898\":1}}],[\"语句做解析\",{\"1\":{\"895\":1}}],[\"语句一更新就没命中率低\",{\"1\":{\"894\":1}}],[\"语句都不使用查询缓存\",{\"1\":{\"894\":1}}],[\"语句了\",{\"1\":{\"894\":1}}],[\"语句片段\",{\"1\":{\"430\":1}}],[\"语句\",{\"1\":{\"229\":1,\"892\":1,\"895\":1,\"907\":2}}],[\"语句用不到索引是不会使用行级锁的\",{\"1\":{\"81\":1,\"906\":1,\"936\":1}}],[\"语法格式为\",{\"1\":{\"951\":1}}],[\"语法除了会限制别的线程的读写外\",{\"1\":{\"928\":1}}],[\"语法分析器会根据语法规则\",{\"1\":{\"895\":1}}],[\"语法分析\",{\"1\":{\"895\":2}}],[\"语法精简\",{\"0\":{\"753\":1},\"1\":{\"754\":1}}],[\"语法方面\",{\"1\":{\"686\":1}}],[\"语法用于生成url\",{\"1\":{\"539\":1}}],[\"语法\",{\"0\":{\"750\":1,\"761\":1},\"1\":{\"13\":1,\"30\":1,\"201\":1,\"437\":1,\"761\":1,\"895\":1,\"907\":1,\"989\":1}}],[\"语法进行了扩展\",{\"1\":{\"12\":1}}],[\"语法扩展\",{\"1\":{\"11\":1}}],[\"默认启动当前目录\",{\"1\":{\"1161\":1}}],[\"默认风格绿色小清新\",{\"1\":{\"1161\":1}}],[\"默认c\",{\"1\":{\"1150\":1}}],[\"默认cluster是default\",{\"1\":{\"598\":1}}],[\"默认拉下来会在\",{\"1\":{\"981\":1}}],[\"默认拉最新的\",{\"1\":{\"210\":1}}],[\"默认提供的配置已经足够满足大部分需求了\",{\"1\":{\"871\":1}}],[\"默认不开启\",{\"1\":{\"860\":1}}],[\"默认不清空\",{\"1\":{\"448\":1}}],[\"默认30秒\",{\"1\":{\"851\":1}}],[\"默认30s\",{\"1\":{\"115\":1}}],[\"默认为整个仓库\",{\"1\":{\"1161\":1}}],[\"默认为\",{\"1\":{\"802\":1}}],[\"默认为15岁\",{\"1\":{\"385\":1}}],[\"默认\",{\"1\":{\"795\":1,\"823\":1,\"855\":1}}],[\"默认调super\",{\"1\":{\"691\":1}}],[\"默认调用super\",{\"1\":{\"688\":1}}],[\"默认继承object\",{\"1\":{\"686\":1}}],[\"默认继承的是\",{\"1\":{\"582\":1}}],[\"默认java外部类不能用private和protected修饰\",{\"1\":{\"668\":1}}],[\"默认初始化值的情况\",{\"1\":{\"686\":1}}],[\"默认初始化\",{\"1\":{\"658\":1,\"686\":1,\"696\":1}}],[\"默认密码加密器是一个工厂方法创建的\",{\"1\":{\"625\":1}}],[\"默认帮我们实现很多东西\",{\"0\":{\"618\":1}}],[\"默认数据库derby切换到mysql具体看官方文档就行\",{\"1\":{\"599\":1}}],[\"默认nacos使用嵌入式数据库实现数据的存储\",{\"1\":{\"599\":1}}],[\"默认情况\",{\"1\":{\"598\":1}}],[\"默认情况下消息抵达客户端后自动确认\",{\"1\":{\"837\":1}}],[\"默认情况下gateway会根据注册中心的服务列表\",{\"1\":{\"591\":1}}],[\"默认情况下\",{\"1\":{\"60\":1,\"76\":1,\"179\":1,\"182\":1,\"593\":1,\"785\":1,\"883\":1,\"1020\":1}}],[\"默认集成了\",{\"1\":{\"594\":1}}],[\"默认支持\",{\"1\":{\"594\":1}}],[\"默认10秒内超过50\",{\"1\":{\"587\":1}}],[\"默认10秒内超过20个请求次数\",{\"1\":{\"587\":1}}],[\"默认值为\",{\"1\":{\"1009\":1}}],[\"默认值是on\",{\"1\":{\"932\":1}}],[\"默认值是50秒\",{\"1\":{\"932\":1}}],[\"默认值是\",{\"1\":{\"893\":1}}],[\"默认值\",{\"1\":{\"522\":1,\"1009\":1}}],[\"默认值就是这个\",{\"1\":{\"178\":1}}],[\"默认也是单实例的\",{\"1\":{\"504\":1}}],[\"默认都用这个\",{\"1\":{\"584\":1}}],[\"默认都是单例的\",{\"1\":{\"498\":1}}],[\"默认都是get方式访问的\",{\"1\":{\"97\":1}}],[\"默认都会绑定配置文件指定的值\",{\"1\":{\"485\":1}}],[\"默认扫描我们当前系统里面所有meta\",{\"1\":{\"483\":1}}],[\"默认非公平锁\",{\"1\":{\"317\":1,\"343\":1,\"352\":1}}],[\"默认的shell是bash\",{\"1\":{\"1037\":1}}],[\"默认的隔离级别是repeatable\",{\"1\":{\"905\":1}}],[\"默认的自动确认会有问题\",{\"1\":{\"837\":1}}],[\"默认的\",{\"1\":{\"823\":1}}],[\"默认的子配置文件\",{\"1\":{\"795\":1}}],[\"默认的了\",{\"1\":{\"618\":1}}],[\"默认的是\",{\"1\":{\"448\":1,\"574\":1}}],[\"默认的message信息是在这个文件\",{\"1\":{\"243\":1}}],[\"默认的事务传播属性是propagation\",{\"1\":{\"179\":1}}],[\"默认是不到20分钟就进行续期\",{\"1\":{\"890\":1}}],[\"默认是听aof的\",{\"1\":{\"860\":1}}],[\"默认是public\",{\"1\":{\"700\":1}}],[\"默认是可序列化的\",{\"1\":{\"688\":1}}],[\"默认是5\",{\"1\":{\"687\":1}}],[\"默认是5秒\",{\"1\":{\"587\":1}}],[\"默认是开启的\",{\"1\":{\"608\":1}}],[\"默认是full模式\",{\"1\":{\"517\":1}}],[\"默认是false\",{\"1\":{\"342\":1}}],[\"默认是true\",{\"0\":{\"517\":1},\"1\":{\"449\":1}}],[\"默认是非公平锁\",{\"1\":{\"317\":1,\"319\":1}}],[\"默认是1\",{\"1\":{\"202\":1}}],[\"默认是阻塞的\",{\"1\":{\"202\":1}}],[\"默认是\",{\"1\":{\"178\":1,\"597\":1,\"1009\":1}}],[\"默认发的令牌\",{\"1\":{\"147\":1}}],[\"默认时间是\",{\"1\":{\"123\":1}}],[\"默认使用的就是\",{\"1\":{\"892\":1}}],[\"默认使用的passwordencoder要求数据库中的密码格式为\",{\"1\":{\"625\":1}}],[\"默认使用的是jdk动态代理或cglib代理\",{\"1\":{\"182\":1}}],[\"默认使用\",{\"1\":{\"182\":1}}],[\"默认使用jdk序列化机制\",{\"1\":{\"123\":1}}],[\"默认使用xms的值\",{\"1\":{\"107\":1}}],[\"默认行为\",{\"1\":{\"123\":1}}],[\"默认行级锁\",{\"1\":{\"81\":1,\"936\":1}}],[\"默认超时就是我们指定的时间\",{\"1\":{\"115\":1}}],[\"默认加锁\",{\"1\":{\"113\":1}}],[\"锁是系统默认会加的\",{\"1\":{\"928\":1}}],[\"锁误释放问题\",{\"1\":{\"868\":1}}],[\"锁\",{\"1\":{\"687\":1,\"928\":2,\"929\":1}}],[\"锁粒度更细\",{\"1\":{\"740\":1}}],[\"锁粒度锁单节点\",{\"1\":{\"674\":1}}],[\"锁粒度包含多个节点\",{\"1\":{\"674\":1}}],[\"锁定版本+子modlue不用写groupid和version\",{\"1\":{\"556\":1}}],[\"锁定此数据\",{\"1\":{\"171\":1}}],[\"锁对象变成偏向锁\",{\"1\":{\"379\":1}}],[\"锁绑定多个条件condition\",{\"1\":{\"352\":1}}],[\"锁教室门\",{\"1\":{\"333\":1}}],[\"锁相关的知识\",{\"1\":{\"261\":1}}],[\"锁的时间也比较长\",{\"1\":{\"933\":1}}],[\"锁的设计比较复杂\",{\"1\":{\"926\":1}}],[\"锁的超时时间\",{\"1\":{\"851\":1}}],[\"锁的粒度\",{\"1\":{\"115\":2}}],[\"锁的ttl30\",{\"1\":{\"115\":1}}],[\"锁的key是一定的\",{\"1\":{\"110\":1}}],[\"锁会在过期时间到达后自动释放\",{\"1\":{\"113\":1}}],[\"锁自动释放时间\",{\"1\":{\"113\":1}}],[\"锁没加上就解锁把别人的解了\",{\"1\":{\"87\":1}}],[\"锁就会释放\",{\"1\":{\"86\":1,\"114\":1}}],[\"锁范围问题表级锁行级锁\",{\"1\":{\"81\":1}}],[\"锁不住\",{\"1\":{\"80\":1}}],[\"单表查询维护起来都更容易\",{\"1\":{\"970\":1}}],[\"单表查询更利于后续的维护\",{\"1\":{\"970\":1}}],[\"单表查询后在内存中自己做关联\",{\"1\":{\"970\":1}}],[\"单以name=\",{\"1\":{\"923\":1}}],[\"单独为一个不频繁的请求创建一个\",{\"1\":{\"923\":1}}],[\"单独访问一个行可能需要\",{\"1\":{\"916\":1}}],[\"单独一个组件\",{\"1\":{\"599\":1}}],[\"单单使用\",{\"1\":{\"871\":1}}],[\"单机数据库计算资源很贵\",{\"1\":{\"970\":1}}],[\"单机的redis就可以⽀撑每秒十几万的并发\",{\"1\":{\"849\":1}}],[\"单机情况下\",{\"0\":{\"84\":1}}],[\"单元测试发两个不同的实体对象\",{\"1\":{\"831\":1}}],[\"单元测试类中\",{\"0\":{\"530\":1},\"1\":{\"530\":1}}],[\"单纯依靠\",{\"1\":{\"730\":1}}],[\"单纯想学后端东西的\",{\"1\":{\"261\":1}}],[\"单继承多实现\",{\"1\":{\"686\":1}}],[\"单点问题\",{\"1\":{\"609\":1}}],[\"单点登录有条件直接用github的\",{\"1\":{\"261\":1}}],[\"单点登录的认证信息可以存储在认证服务器上或者存储在用户的浏览器上\",{\"1\":{\"153\":1}}],[\"单点登录\",{\"0\":{\"153\":1},\"1\":{\"126\":1}}],[\"单体应用被拆分成微服务应用\",{\"1\":{\"606\":1}}],[\"单体项目也可以水平扩展\",{\"1\":{\"112\":1}}],[\"单位\",{\"1\":{\"577\":1}}],[\"单位是次\",{\"1\":{\"100\":1}}],[\"单位是笔\",{\"1\":{\"100\":1}}],[\"单例池\",{\"1\":{\"543\":1}}],[\"单例bean初始化完成\",{\"1\":{\"543\":1}}],[\"单例模式的逐步优化\",{\"0\":{\"300\":1}}],[\"单例模式\",{\"1\":{\"298\":1,\"498\":1}}],[\"单例模式所有请求都是同一个对象\",{\"1\":{\"80\":1}}],[\"单个子句中不用写order\",{\"1\":{\"947\":1}}],[\"单个语句占用时间长\",{\"1\":{\"933\":1}}],[\"单个就搞笑了\",{\"1\":{\"606\":1}}],[\"单个参数\",{\"0\":{\"406\":1},\"1\":{\"438\":1,\"752\":4}}],[\"单个自己测单线程没问题\",{\"0\":{\"107\":1}}],[\"单线程模型\",{\"1\":{\"849\":1}}],[\"单线程是没有问题的\",{\"1\":{\"693\":1}}],[\"单线程的有序性就天然存在了\",{\"1\":{\"329\":1}}],[\"单线程程序是按程序的顺序来执行的\",{\"1\":{\"329\":1}}],[\"单线程\",{\"1\":{\"301\":1,\"328\":1}}],[\"单线程环境里面确保最终执行结果和代码顺序的结果一致\",{\"1\":{\"292\":1}}],[\"单核多线程\",{\"1\":{\"286\":1}}],[\"单词\",{\"1\":{\"18\":1}}],[\"多端使用\",{\"1\":{\"1162\":1}}],[\"多去认识更优秀的人\",{\"1\":{\"1151\":1}}],[\"多学一些知识\",{\"1\":{\"1150\":1}}],[\"多问问老师\",{\"1\":{\"1150\":1}}],[\"多行\",{\"1\":{\"985\":1}}],[\"多行字符串相当于加强版的字符串\",{\"1\":{\"216\":1}}],[\"多表关联查询效率高点还是多次单表查询效率高\",{\"1\":{\"970\":1}}],[\"多表关联查询时\",{\"1\":{\"970\":1}}],[\"多看好书\",{\"1\":{\"962\":1}}],[\"多看看学学\",{\"1\":{\"229\":1}}],[\"多叉树就是每个节点有多个儿子\",{\"1\":{\"916\":1}}],[\"多一次交互\",{\"1\":{\"907\":1}}],[\"多一个\",{\"1\":{\"559\":1}}],[\"多版本并发控制\",{\"1\":{\"906\":2}}],[\"多版本和\",{\"1\":{\"902\":1}}],[\"多次读同一数据\",{\"1\":{\"905\":1}}],[\"多次访问\",{\"1\":{\"324\":1}}],[\"多级缓存\",{\"1\":{\"868\":1}}],[\"多建操作mset这种不被支持\",{\"1\":{\"865\":1}}],[\"多参数\",{\"0\":{\"758\":1}}],[\"多了红黑树\",{\"1\":{\"740\":1}}],[\"多路复用连接中的一条独立的双向数据流通道\",{\"1\":{\"823\":1}}],[\"多路复用的机制\",{\"1\":{\"712\":1}}],[\"多路复用的系统调用\",{\"1\":{\"712\":1}}],[\"多路复用\",{\"1\":{\"712\":2}}],[\"多路复用和同步非阻塞\",{\"1\":{\"712\":2}}],[\"多路复用器\",{\"1\":{\"712\":1}}],[\"多路复用模型的特点\",{\"1\":{\"712\":1}}],[\"多路复用模型中\",{\"1\":{\"712\":1}}],[\"多路复用模型\",{\"1\":{\"712\":4}}],[\"多敲代码才能理解\",{\"1\":{\"688\":1}}],[\"多加了一个id属性\",{\"1\":{\"688\":1}}],[\"多么痛的领悟\",{\"1\":{\"658\":1}}],[\"多数据源\",{\"1\":{\"606\":1}}],[\"多台服务器\",{\"1\":{\"565\":1}}],[\"多配置激活问题\",{\"1\":{\"546\":1}}],[\"多列的值传递过去\",{\"1\":{\"428\":1}}],[\"多线程好书\",{\"1\":{\"1150\":1}}],[\"多线程并发\",{\"1\":{\"1150\":1}}],[\"多线程情况下的扩容\",{\"1\":{\"693\":1}}],[\"多线程只是草率的过了一遍\",{\"1\":{\"687\":1}}],[\"多线程\",{\"1\":{\"328\":1,\"687\":1}}],[\"多线程环境下不要用\",{\"1\":{\"304\":1}}],[\"多线程环境中线程交替执行\",{\"1\":{\"292\":1,\"295\":1}}],[\"多核多线程\",{\"1\":{\"286\":1}}],[\"多字段匹配\",{\"0\":{\"276\":1}}],[\"多记笔记\",{\"1\":{\"261\":1}}],[\"多大内存\",{\"1\":{\"244\":1}}],[\"多读\",{\"1\":{\"83\":1}}],[\"多例模式\",{\"1\":{\"80\":1}}],[\"多个\",{\"1\":{\"914\":1}}],[\"多个事务是串起来的\",{\"1\":{\"854\":1}}],[\"多个服务应该是轮询拿\",{\"1\":{\"831\":1}}],[\"多个接收者\",{\"1\":{\"817\":1}}],[\"多个微服务之间调用的时候\",{\"1\":{\"581\":1}}],[\"多个节点之前的网络本来是连通的\",{\"1\":{\"571\":1}}],[\"多个切面的情况下\",{\"1\":{\"491\":1}}],[\"多个参数的接口\",{\"1\":{\"751\":1}}],[\"多个参数不是业务模型中的数据\",{\"1\":{\"410\":1}}],[\"多个参数正好是业务逻辑的数据模型\",{\"1\":{\"409\":1}}],[\"多个参数会被封装成一个\",{\"1\":{\"407\":1}}],[\"多个参数\",{\"0\":{\"407\":1},\"1\":{\"438\":1,\"752\":4}}],[\"多个线程同时检测到元素个数超过数组大小\",{\"1\":{\"682\":1}}],[\"多个线程同时\",{\"1\":{\"682\":1}}],[\"多个线程\",{\"1\":{\"326\":1}}],[\"多个用户过来存\",{\"1\":{\"133\":1}}],[\"多个的话\",{\"1\":{\"71\":1}}],[\"多个域名共享cookie\",{\"1\":{\"52\":1}}],[\"本文也会做一定的记录\",{\"1\":{\"1161\":1}}],[\"本节的末尾介绍了笛卡尔积\",{\"1\":{\"937\":1}}],[\"本次案例服务降级处理是在客户端80实现完成的\",{\"1\":{\"585\":1}}],[\"本来想重写\",{\"1\":{\"877\":1}}],[\"本来好好的两个系统之间的调用\",{\"1\":{\"815\":1}}],[\"本来像对象这种都会跟着变\",{\"1\":{\"780\":1}}],[\"本来不该有\",{\"1\":{\"572\":1}}],[\"本来这里返回\",{\"1\":{\"503\":1}}],[\"本是\",{\"1\":{\"393\":1}}],[\"本身是一种面向对象的语言\",{\"1\":{\"634\":1}}],[\"本身是一种抽象的概念\",{\"1\":{\"284\":1}}],[\"本身资源不够\",{\"1\":{\"391\":1}}],[\"本质是双向链表\",{\"1\":{\"972\":1}}],[\"本质上就是一个\",{\"1\":{\"823\":1}}],[\"本质上\",{\"1\":{\"687\":1}}],[\"本质也是存储数据\",{\"1\":{\"265\":1}}],[\"本质在这个类上的方法在执行前后开启了事务\",{\"1\":{\"179\":1}}],[\"本类互调用调用对象\",{\"1\":{\"179\":1}}],[\"本地文件\",{\"1\":{\"1084\":1}}],[\"本地仓库找啦\",{\"1\":{\"1009\":1}}],[\"本地仓库\",{\"1\":{\"1009\":1}}],[\"本地的\",{\"1\":{\"996\":1}}],[\"本地工作副本\",{\"1\":{\"991\":1}}],[\"本地没有rabbitmq\",{\"1\":{\"825\":1}}],[\"本地访问\",{\"0\":{\"706\":1}}],[\"本地回环地址指的是以127开头的地址\",{\"1\":{\"688\":1}}],[\"本地数据库事务\",{\"1\":{\"609\":1}}],[\"本地直接返回默认的数据\",{\"1\":{\"582\":1}}],[\"本地\",{\"1\":{\"573\":1,\"607\":1}}],[\"本地及nacos配置中心共同加载顺序为\",{\"1\":{\"543\":1}}],[\"本地事务失效问题\",{\"1\":{\"179\":1}}],[\"本地事务隔离级别\",{\"0\":{\"177\":1}}],[\"本地事务\",{\"1\":{\"176\":1}}],[\"本地事务问题\",{\"0\":{\"176\":1}}],[\"本地缓存作用域\",{\"1\":{\"449\":1}}],[\"本地缓存\",{\"0\":{\"442\":1},\"1\":{\"103\":1}}],[\"本地配hosts\",{\"1\":{\"94\":1}}],[\"本地锁的确够了\",{\"1\":{\"123\":1}}],[\"本地锁的this只能锁住当前服务\",{\"1\":{\"108\":1}}],[\"本地锁体现\",{\"1\":{\"108\":1}}],[\"本地锁\",{\"0\":{\"80\":1}}],[\"本页面就是一个示例\",{\"1\":{\"2\":1}}],[\"来复用匹配到的内容\",{\"0\":{\"1047\":1}}],[\"来决定看用哪一个\",{\"1\":{\"1041\":1}}],[\"来使用\",{\"1\":{\"1001\":1}}],[\"来搭这台macos\",{\"1\":{\"995\":1}}],[\"来描述这个概念\",{\"1\":{\"959\":1}}],[\"来将下划线\",{\"1\":{\"959\":1}}],[\"来减少死锁对数据库的影响\",{\"1\":{\"933\":1}}],[\"来设置\",{\"1\":{\"932\":1}}],[\"来确保拿到一致性视图\",{\"1\":{\"927\":1}}],[\"来定位记录\",{\"1\":{\"923\":1}}],[\"来控制每个语句执行的最长时间\",{\"1\":{\"908\":1}}],[\"来查看当前的值\",{\"1\":{\"905\":1}}],[\"来查看我们正在运行的容器\",{\"1\":{\"211\":1}}],[\"来恢复的时候就多了一个事务出来\",{\"1\":{\"901\":1}}],[\"来恢复临时库的话\",{\"1\":{\"901\":1}}],[\"来重新初始化连接资源\",{\"1\":{\"893\":1}}],[\"来对请求进行拦截和处理\",{\"1\":{\"890\":1}}],[\"来对消息操作进行统一\",{\"1\":{\"818\":1}}],[\"来处理前端应用和后端服务之间的请求转发和代理\",{\"1\":{\"883\":1}}],[\"来处理前后端的请求转发和跨域问题\",{\"1\":{\"883\":1}}],[\"来处理任何异步操作的结果\",{\"1\":{\"216\":1}}],[\"来维持的话\",{\"1\":{\"824\":1}}],[\"来实例化线程\",{\"1\":{\"769\":1}}],[\"来实现关联查询\",{\"1\":{\"970\":1}}],[\"来实现分库分表\",{\"1\":{\"960\":1}}],[\"来实现的\",{\"1\":{\"901\":1}}],[\"来实现对这些配置类的动态加载\",{\"1\":{\"731\":1}}],[\"来实现\",{\"1\":{\"712\":1,\"900\":1}}],[\"来实现更轻量级的同步\",{\"1\":{\"283\":1}}],[\"来实现锁的获取和释放\",{\"1\":{\"79\":1}}],[\"来获得\",{\"1\":{\"743\":1,\"1101\":1}}],[\"来获取此运行时类\",{\"1\":{\"688\":1}}],[\"来获取一个同步的包装容器\",{\"1\":{\"641\":1}}],[\"来指定使用内存引擎创建表\",{\"1\":{\"892\":1}}],[\"来指定数据库表中的字段名\",{\"1\":{\"743\":1,\"1101\":1}}],[\"来指定查询条件的字段\",{\"1\":{\"743\":1,\"1101\":1}}],[\"来做\",{\"1\":{\"713\":1}}],[\"来做的\",{\"1\":{\"713\":2}}],[\"来说更加易用\",{\"1\":{\"713\":1}}],[\"来一张图\",{\"1\":{\"713\":1}}],[\"来间接访问内核空间\",{\"1\":{\"709\":1}}],[\"来访问\",{\"1\":{\"706\":1}}],[\"来new一个对象了\",{\"1\":{\"686\":1}}],[\"来表示弱引用\",{\"1\":{\"660\":1}}],[\"来表示对服务器单击请求\",{\"1\":{\"100\":1}}],[\"来校验当前\",{\"1\":{\"626\":1}}],[\"来进行资源保护\",{\"1\":{\"605\":1}}],[\"来回\",{\"1\":{\"603\":1}}],[\"来影响程序运行时的默认路径\",{\"1\":{\"537\":1}}],[\"来提供属性的具体值\",{\"1\":{\"522\":1}}],[\"来源是\",{\"1\":{\"1005\":1}}],[\"来源\",{\"0\":{\"330\":1},\"1\":{\"379\":1,\"380\":1,\"383\":1,\"662\":1,\"670\":1,\"671\":1,\"696\":1,\"773\":1,\"998\":1,\"1006\":1}}],[\"来源于\",{\"1\":{\"246\":1}}],[\"来保证\",{\"1\":{\"824\":1}}],[\"来保证出现指令重排的问题\",{\"1\":{\"301\":1}}],[\"来保证线程安全性\",{\"1\":{\"295\":1}}],[\"来比对版本\",{\"1\":{\"269\":1}}],[\"来完成\",{\"1\":{\"220\":1}}],[\"来优化性能\",{\"1\":{\"218\":1}}],[\"来安装\",{\"1\":{\"208\":1}}],[\"来选择要转发的服务器\",{\"1\":{\"208\":1}}],[\"来达到最终一致性\",{\"1\":{\"186\":1}}],[\"来解决这些问题\",{\"1\":{\"849\":1}}],[\"来解决异步编排会丢失\",{\"1\":{\"157\":1}}],[\"来解析\",{\"1\":{\"11\":1}}],[\"来存储类的元数据\",{\"1\":{\"383\":1}}],[\"来存储\",{\"1\":{\"155\":1}}],[\"来判断新手\",{\"1\":{\"126\":1}}],[\"来衡量接口查询次数\",{\"1\":{\"100\":1}}],[\"来衡量整个业务流程\",{\"1\":{\"100\":1}}],[\"内核个数\",{\"0\":{\"1095\":1}}],[\"内核用\",{\"1\":{\"996\":1}}],[\"内核提供的系统调用\",{\"1\":{\"712\":1}}],[\"内核将数据从内核空间拷贝到用户空间\",{\"1\":{\"709\":1}}],[\"内核等待\",{\"1\":{\"709\":1}}],[\"内核\",{\"1\":{\"709\":1,\"712\":1}}],[\"内网ip一般是私有ip通常有一下3种\",{\"1\":{\"688\":1}}],[\"内网穿透后发现f12是下面的\",{\"1\":{\"198\":1}}],[\"内网穿透\",{\"0\":{\"194\":1},\"1\":{\"93\":1}}],[\"内层流会自动关闭\",{\"1\":{\"688\":1}}],[\"内层递归函数仍然能获取到该锁的代码\",{\"1\":{\"321\":1}}],[\"内嵌的解释器将字节码转换成为最终的机器码\",{\"1\":{\"634\":1}}],[\"内嵌web服务器\",{\"1\":{\"473\":1}}],[\"内部就不会有大量的死锁检测工作了\",{\"1\":{\"932\":1}}],[\"内部执行的\",{\"1\":{\"900\":1}}],[\"内部元素的age相减\",{\"1\":{\"765\":1}}],[\"内部类被加载和初始化时\",{\"1\":{\"779\":1}}],[\"内部类也是\",{\"1\":{\"668\":1}}],[\"内部类理解成类的成员\",{\"1\":{\"668\":1}}],[\"内部类\",{\"1\":{\"647\":1,\"686\":2}}],[\"内部相关机制非常有帮助\",{\"1\":{\"635\":1}}],[\"内部包含了提供各种功能的过滤器\",{\"1\":{\"619\":1}}],[\"内部源码设计基于java8的一些新特性\",{\"1\":{\"471\":1}}],[\"内部源码设计\",{\"0\":{\"471\":1}}],[\"内部方法的事务设置将得到正确的应用\",{\"1\":{\"179\":1}}],[\"内部调用同一个对象的另一个事务方法\",{\"1\":{\"179\":1}}],[\"内部调用的时候\",{\"1\":{\"179\":1}}],[\"内存大小是由硬件和操作系统两方制约的\",{\"1\":{\"1093\":1}}],[\"内存大小是由硬件和操作系统两个方面决定的\",{\"1\":{\"1093\":1}}],[\"内存的地址就是32位的2进制数\",{\"1\":{\"1091\":1}}],[\"内存的读写等等\",{\"1\":{\"709\":1}}],[\"内存地址的表示方式\",{\"0\":{\"1091\":1}}],[\"内存作为1个存储数据的存在\",{\"1\":{\"1089\":1}}],[\"内存是计算机系统的主存储器\",{\"1\":{\"1089\":1}}],[\"内存是放不下的\",{\"1\":{\"739\":1}}],[\"内存不足会导致的场景\",{\"1\":{\"782\":1}}],[\"内存不够\",{\"1\":{\"363\":1}}],[\"内存管理等等\",{\"1\":{\"709\":1}}],[\"内存中实际上是加载了子类特有的属性和方法的\",{\"1\":{\"686\":1}}],[\"内存资源耗尽未释放\",{\"1\":{\"391\":1}}],[\"内存分配如下\",{\"1\":{\"388\":1}}],[\"内存连续空间\",{\"1\":{\"385\":1}}],[\"内存区域\",{\"0\":{\"384\":1},\"1\":{\"381\":1}}],[\"内存池\",{\"1\":{\"359\":1}}],[\"内存系统的重排\",{\"1\":{\"292\":1}}],[\"内存屏障另外一个作用是刷新出各种cpu的缓存数\",{\"1\":{\"296\":1}}],[\"内存屏障\",{\"1\":{\"283\":1}}],[\"内存\",{\"1\":{\"265\":1,\"286\":1,\"441\":1}}],[\"内存调大\",{\"1\":{\"254\":1}}],[\"内存泄漏\",{\"1\":{\"99\":1}}],[\"内存性\",{\"1\":{\"87\":1}}],[\"内的线程同步\",{\"1\":{\"79\":1}}],[\"内容详尽\",{\"1\":{\"1125\":1}}],[\"内容很详细\",{\"1\":{\"1097\":1}}],[\"内容如下\",{\"1\":{\"1005\":2}}],[\"内容表\",{\"1\":{\"961\":1}}],[\"内容返回给客户端\",{\"1\":{\"543\":1}}],[\"内容是支付宝付款页面\",{\"1\":{\"515\":1}}],[\"内容分发网络\",{\"1\":{\"77\":3}}],[\"内容类型等\",{\"1\":{\"48\":1}}],[\"内容\",{\"0\":{\"1127\":1},\"1\":{\"11\":1,\"990\":2}}],[\"吞吐量低\",{\"1\":{\"83\":1}}],[\"吞吐量\",{\"1\":{\"79\":1,\"100\":2,\"102\":1,\"107\":1}}],[\"从此爱上记单词\",{\"1\":{\"1162\":1}}],[\"从哪里继承下来\",{\"0\":{\"1067\":1}}],[\"从官方网站下载的\",{\"1\":{\"998\":1}}],[\"从来没有想过要做的事情\",{\"1\":{\"980\":1}}],[\"从我的经验出发\",{\"1\":{\"961\":1}}],[\"从我上面的描述\",{\"1\":{\"889\":1}}],[\"从顾客\",{\"1\":{\"931\":1}}],[\"从两阶段锁说起\",{\"0\":{\"931\":1}}],[\"从主库传过来的时间按照效果不同\",{\"1\":{\"929\":1}}],[\"从主内存拿到原始n\",{\"1\":{\"290\":1}}],[\"从备库上会看到什么现象呢\",{\"1\":{\"929\":1}}],[\"从备份的时间点开始\",{\"1\":{\"901\":1}}],[\"从性能和存储空间方面考量\",{\"1\":{\"918\":1}}],[\"从磁盘随机读一个数据块需要\",{\"1\":{\"916\":1}}],[\"从数据库设计上优化\",{\"1\":{\"932\":1}}],[\"从数据库端来看\",{\"1\":{\"908\":1}}],[\"从数据库中直接移除\",{\"1\":{\"229\":1}}],[\"从应用开发端来看\",{\"1\":{\"908\":1}}],[\"从应用程序的视角来看的话\",{\"1\":{\"709\":1}}],[\"从这个备份恢复到临时库\",{\"1\":{\"901\":1}}],[\"从头开始写\",{\"1\":{\"899\":1}}],[\"从你输入的\",{\"1\":{\"895\":1}}],[\"从你接触\",{\"1\":{\"633\":1}}],[\"从现象看就是\",{\"1\":{\"893\":1}}],[\"从图中不难看出\",{\"1\":{\"892\":1,\"917\":1}}],[\"从6379中set一个值\",{\"1\":{\"865\":1}}],[\"从机投票出一台当主机\",{\"1\":{\"865\":1}}],[\"从机只能读操作\",{\"1\":{\"861\":1}}],[\"从服务器\",{\"1\":{\"864\":1}}],[\"从服务器还是从服务器\",{\"1\":{\"862\":1}}],[\"从服务器挂掉了\",{\"1\":{\"862\":1}}],[\"从指定服务器自动下载安装所有依赖的软件包\",{\"1\":{\"810\":1}}],[\"从字面上理解intern这个单词\",{\"1\":{\"723\":1}}],[\"从计算机结构的视角来看的话\",{\"1\":{\"709\":1}}],[\"从小的地方去动手\",{\"1\":{\"688\":1}}],[\"从属关系\",{\"1\":{\"656\":1}}],[\"从考察知识点的角度\",{\"1\":{\"639\":1}}],[\"从redis中获取用户信息\",{\"1\":{\"627\":1}}],[\"从hystrixcommand到\",{\"1\":{\"604\":1}}],[\"从流量控制\",{\"1\":{\"594\":1,\"599\":1}}],[\"从操作系统的环境变量中读取\",{\"1\":{\"549\":1}}],[\"从meta\",{\"1\":{\"483\":1}}],[\"从缓存中查询\",{\"1\":{\"441\":1}}],[\"从缓存中读取之前缓存存储的数据\",{\"1\":{\"122\":1}}],[\"从参数中取值进行判断\",{\"1\":{\"430\":1}}],[\"从队列中添加元素的操作将会被阻塞\",{\"1\":{\"345\":1}}],[\"从队列中获取元素的操作将会被阻塞\",{\"1\":{\"345\":1}}],[\"从atomicinteger引出下面的问题\",{\"1\":{\"309\":1}}],[\"从商品保存开始就对业务走马观花\",{\"0\":{\"261\":1}}],[\"从github中的统计来看\",{\"1\":{\"247\":1}}],[\"从广义上讲\",{\"1\":{\"244\":1}}],[\"从一级分类开始给每个递归给一个子list\",{\"1\":{\"229\":1}}],[\"从cli中设置密码\",{\"1\":{\"213\":1,\"794\":1}}],[\"从灵活性上说拦截器功能更强大些\",{\"1\":{\"156\":1}}],[\"从\",{\"1\":{\"152\":1,\"377\":1,\"383\":1,\"576\":1,\"901\":1,\"929\":1}}],[\"从原数据计算出md5值很容易\",{\"1\":{\"132\":1}}],[\"从而破坏了划分的准确性\",{\"1\":{\"1085\":1}}],[\"从而产生\",{\"1\":{\"959\":1}}],[\"从而减少死锁的风险\",{\"1\":{\"933\":1}}],[\"从而减少数据库的读取次数\",{\"1\":{\"91\":1}}],[\"从而避免了合并产生的提交历史分支\",{\"1\":{\"990\":1}}],[\"从而避免了数据读写冲突的问题\",{\"1\":{\"906\":1}}],[\"从而避免了多线程环境下程序出现乱序执行的现象\",{\"1\":{\"296\":1}}],[\"从而提供服务\",{\"1\":{\"740\":1}}],[\"从而提高代码质量\",{\"1\":{\"994\":1}}],[\"从而提高你的速度\",{\"1\":{\"994\":1}}],[\"从而提高系统的响应速度和性能\",{\"1\":{\"849\":1}}],[\"从而提高查询效率\",{\"1\":{\"441\":1}}],[\"从而提高性能和响应速度\",{\"1\":{\"218\":1}}],[\"从而去完成自动装配的动作\",{\"1\":{\"731\":1}}],[\"从而在运行期间节省处理器资源\",{\"1\":{\"725\":1}}],[\"从而在本地实现rpc远程服务调用技术\",{\"1\":{\"573\":1}}],[\"从而可以操作真实对象\",{\"1\":{\"688\":1}}],[\"从而授予用户相应的权限\",{\"1\":{\"630\":1}}],[\"从而实现多版本并发控制\",{\"1\":{\"972\":1}}],[\"从而实现动态路由的功能\",{\"1\":{\"591\":1}}],[\"从而实现在子线程中访问请求上下文\",{\"1\":{\"157\":1}}],[\"从而完成\",{\"1\":{\"543\":1}}],[\"从而强制浏览器重新加载资源\",{\"1\":{\"539\":1}}],[\"从而获得更多的灵活性和功能\",{\"1\":{\"538\":1,\"1082\":1}}],[\"从而能够进行更高级别的操作\",{\"1\":{\"538\":1,\"1082\":1}}],[\"从而对异常进行统一处理\",{\"1\":{\"520\":1}}],[\"从而导致问题频出\",{\"1\":{\"961\":1}}],[\"从而导致程序出现异常或崩溃\",{\"1\":{\"694\":1}}],[\"从而导致应用程序启动失败\",{\"1\":{\"543\":1}}],[\"从而导致\",{\"1\":{\"366\":2}}],[\"从而导致死锁的问题\",{\"1\":{\"321\":1}}],[\"从而导致内存泄漏\",{\"1\":{\"157\":1}}],[\"从而保证单例模式的线程安全性\",{\"1\":{\"301\":1}}],[\"从而覆盖了原来的值\",{\"1\":{\"290\":1}}],[\"从而做出相应的反应\",{\"1\":{\"220\":1}}],[\"从而使得事务注解生效\",{\"1\":{\"179\":1}}],[\"从而将数据存储在相应的节点上\",{\"1\":{\"103\":1}}],[\"从而确认连接的可用性\",{\"1\":{\"76\":1}}],[\"从本地锁开始层层递进阐述抛出问题好理解\",{\"1\":{\"78\":1}}],[\"两页为宜\",{\"1\":{\"1126\":1}}],[\"两处\",{\"1\":{\"1005\":1}}],[\"两台电脑连一台显示器软件方式切信号源通过\",{\"1\":{\"996\":1}}],[\"两台机器数据的传输\",{\"1\":{\"688\":1}}],[\"两表\",{\"1\":{\"961\":1}}],[\"两条记录\",{\"1\":{\"931\":1}}],[\"两条命令\",{\"1\":{\"868\":1}}],[\"两棵树的示例示意图如下\",{\"1\":{\"917\":1}}],[\"两大规范\",{\"0\":{\"818\":1}}],[\"两大概念\",{\"0\":{\"816\":1}}],[\"两大优秀特性\",{\"1\":{\"474\":1}}],[\"两句话\",{\"1\":{\"688\":1}}],[\"两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案\",{\"1\":{\"902\":1}}],[\"两阶段提交\",{\"0\":{\"901\":1},\"1\":{\"900\":1,\"901\":3,\"902\":1}}],[\"两阶段提交协议的演变\",{\"1\":{\"607\":1}}],[\"两阶段中比较重要的一些点\",{\"1\":{\"609\":1}}],[\"两端连接所用的时间\",{\"1\":{\"577\":1}}],[\"两任务组合\",{\"0\":{\"376\":1}}],[\"两种文件的概念\",{\"1\":{\"993\":1}}],[\"两种方式的区别在于它们对代码历史记录的影响\",{\"1\":{\"990\":1}}],[\"两种方法构建一个正则表达式\",{\"1\":{\"216\":1}}],[\"两种方法\",{\"1\":{\"79\":1}}],[\"两种消息模型\",{\"0\":{\"817\":1}}],[\"两种状态\",{\"1\":{\"660\":1}}],[\"两种\",{\"1\":{\"604\":1}}],[\"两种配置方式\",{\"1\":{\"591\":1}}],[\"两种常见的异步编程方式\",{\"1\":{\"372\":1}}],[\"两者决定行间隙\",{\"0\":{\"1044\":1}}],[\"两者可同时存在\",{\"1\":{\"932\":1}}],[\"两者的域名或端口不同\",{\"1\":{\"883\":1}}],[\"两者如果没有初始化\",{\"1\":{\"704\":1}}],[\"两者访问成功\",{\"1\":{\"590\":1}}],[\"两者区别\",{\"0\":{\"318\":1}}],[\"两者都保证\",{\"1\":{\"305\":1}}],[\"两次读取的数据就可能不一致\",{\"1\":{\"905\":1}}],[\"两次查询之间执行了增删改操作\",{\"1\":{\"444\":1}}],[\"两次买都会失败\",{\"1\":{\"178\":1}}],[\"两次或者四次不行吗\",{\"0\":{\"57\":1}}],[\"两本书\",{\"1\":{\"178\":1}}],[\"两个都有可能被分配给你\",{\"1\":{\"1111\":1}}],[\"两个都是\",{\"1\":{\"133\":1}}],[\"两个下划线连接描述信息\",{\"1\":{\"1079\":1}}],[\"两个改动\",{\"1\":{\"1005\":1}}],[\"两个选项\",{\"1\":{\"990\":1}}],[\"两个数据要获取\",{\"1\":{\"884\":1}}],[\"两个注解搭配使用\",{\"1\":{\"831\":1}}],[\"两个参数\",{\"1\":{\"748\":1}}],[\"两个或者多个事件在同一时刻发生\",{\"1\":{\"675\":1}}],[\"两个或多个事件在同一时间间隔发生\",{\"1\":{\"675\":1}}],[\"两个方法一个create\",{\"1\":{\"626\":1}}],[\"两个系统之间架设通道大致流程\",{\"0\":{\"613\":1}}],[\"两个系统\",{\"1\":{\"611\":1}}],[\"两个图标都不一样\",{\"1\":{\"593\":1}}],[\"两个服务间的调用\",{\"1\":{\"560\":1}}],[\"两个接口\",{\"0\":{\"486\":1},\"1\":{\"763\":1}}],[\"两个标准配置\",{\"1\":{\"460\":1}}],[\"两个内置参数\",{\"0\":{\"438\":1},\"1\":{\"438\":1}}],[\"两个构造方法\",{\"1\":{\"317\":1}}],[\"两个线程扩容传递的是两个新的table\",{\"1\":{\"694\":1}}],[\"两个线程同时将红黑树转换成链表\",{\"1\":{\"682\":1}}],[\"两个线程\",{\"1\":{\"309\":1,\"693\":1}}],[\"两个线程中使用的变量能否保证一致性是无法确定的\",{\"1\":{\"292\":1,\"295\":1}}],[\"两个问题\",{\"0\":{\"141\":1,\"159\":1}}],[\"两个不同的数据要有一样的md5是非常困难的\",{\"1\":{\"132\":1}}],[\"两个start\",{\"1\":{\"112\":1}}],[\"两个\",{\"1\":{\"77\":1,\"148\":1,\"687\":1}}],[\"过于谄媚\",{\"1\":{\"1127\":1}}],[\"过\",{\"1\":{\"1113\":1}}],[\"过启动时候\",{\"1\":{\"1078\":1}}],[\"过程中\",{\"1\":{\"897\":1}}],[\"过一下会恢复\",{\"1\":{\"586\":1}}],[\"过一段时间自动没网\",{\"1\":{\"77\":1}}],[\"过多的循环依赖可能会导致性能问题\",{\"1\":{\"543\":1}}],[\"过度切换\",{\"1\":{\"366\":1}}],[\"过滤\",{\"1\":{\"590\":1}}],[\"过滤掉没用的参数\",{\"1\":{\"156\":1}}],[\"过滤器链\",{\"1\":{\"619\":1}}],[\"过滤器适用于较为简单和统一的处理逻辑\",{\"1\":{\"156\":1}}],[\"过滤器适合于以下情况\",{\"1\":{\"156\":1}}],[\"过滤器可以对请求数据进行预处理\",{\"1\":{\"156\":1}}],[\"过滤器可以定义执行顺序\",{\"1\":{\"156\":1}}],[\"过滤器在请求被路由之前执行\",{\"1\":{\"156\":1}}],[\"过滤器和拦截器是用于对web请求进行预处理和后处理的不同技术\",{\"1\":{\"156\":1}}],[\"过滤器和拦截器是两种不同的web请求处理机制\",{\"1\":{\"156\":1}}],[\"过滤器主要用于请求和响应的修改\",{\"1\":{\"156\":1}}],[\"过滤器\",{\"1\":{\"156\":1,\"521\":1,\"591\":1}}],[\"过期错误处理\",{\"1\":{\"890\":1}}],[\"过期时间分别为5min\",{\"1\":{\"842\":1}}],[\"过期时间为一个月\",{\"1\":{\"156\":1}}],[\"过期时间为30秒\",{\"1\":{\"113\":1}}],[\"过期\",{\"1\":{\"87\":1}}],[\"过期是过期的access\",{\"1\":{\"70\":1}}],[\"过期了会抛异常\",{\"1\":{\"70\":1}}],[\"才不会不知道做什么好\",{\"1\":{\"1144\":1}}],[\"才算是正式\",{\"1\":{\"1103\":1}}],[\"才搞清楚的\",{\"1\":{\"962\":1}}],[\"才是真正的\",{\"1\":{\"876\":1}}],[\"才是这个商品的购物车信息\",{\"1\":{\"155\":1}}],[\"才创建instance实例对象\",{\"1\":{\"779\":1}}],[\"才可能是一个编译期常量\",{\"1\":{\"725\":1}}],[\"才可以继续执行\",{\"1\":{\"905\":1}}],[\"才可以\",{\"1\":{\"546\":1}}],[\"才想得通\",{\"1\":{\"723\":1}}],[\"才相等\",{\"1\":{\"647\":1}}],[\"才发现成员变量不能\",{\"1\":{\"646\":1}}],[\"才会超时退出\",{\"1\":{\"932\":1}}],[\"才会为其服务\",{\"1\":{\"712\":1}}],[\"才会抛出内存溢出异常\",{\"1\":{\"660\":1}}],[\"才会继续执行线程b\",{\"1\":{\"650\":1}}],[\"才会去试图回收软引用指向的对象\",{\"1\":{\"636\":1}}],[\"才会在局部变量表中给a分配内存空间我们可以把赋值的代码删掉\",{\"1\":{\"388\":1}}],[\"才生效\",{\"1\":{\"597\":1}}],[\"才能拿到最新的分支checkout\",{\"1\":{\"990\":1}}],[\"才能拿变量名赋值\",{\"1\":{\"658\":1}}],[\"才能用\",{\"1\":{\"937\":1}}],[\"才能继续执行\",{\"1\":{\"905\":1,\"931\":1}}],[\"才能确定\",{\"1\":{\"897\":1}}],[\"才能做一些特殊操作\",{\"1\":{\"709\":1}}],[\"才能让junit给你创建\",{\"1\":{\"689\":1}}],[\"才能导入java\",{\"1\":{\"665\":1}}],[\"才能动态刷新\",{\"1\":{\"598\":1}}],[\"才能真正懂线程池\",{\"1\":{\"344\":1}}],[\"才能执行方法\",{\"1\":{\"338\":1,\"339\":1}}],[\"才有网\",{\"1\":{\"77\":1}}],[\"才区分到一个概念\",{\"1\":{\"76\":1}}],[\"要让你的深度足够\",{\"1\":{\"1150\":1}}],[\"要有一个大一点的计划\",{\"1\":{\"1142\":1}}],[\"要有这思路\",{\"1\":{\"130\":1}}],[\"要大方承认\",{\"0\":{\"1135\":1}}],[\"要工资条是侵犯个人隐私的\",{\"1\":{\"1130\":1}}],[\"要工资条你如果愿意给就给\",{\"1\":{\"1130\":1}}],[\"要工资条怎么办\",{\"0\":{\"1130\":1}}],[\"要看什么\",{\"0\":{\"1115\":1}}],[\"要中产的头衔\",{\"1\":{\"1076\":1}}],[\"要体面的生活\",{\"1\":{\"1076\":1}}],[\"要供孩子上好学校\",{\"1\":{\"1076\":1}}],[\"要买车\",{\"1\":{\"1076\":1}}],[\"要买房\",{\"1\":{\"1076\":1}}],[\"要是还删不了了\",{\"1\":{\"1041\":1}}],[\"要是以前底层还需搞个适配器模式\",{\"1\":{\"471\":1}}],[\"要快\",{\"1\":{\"1041\":1}}],[\"要设置环境变量\",{\"1\":{\"1038\":1}}],[\"要稍微做下配置\",{\"1\":{\"1005\":1}}],[\"要从\",{\"1\":{\"1001\":1}}],[\"要对应起来\",{\"1\":{\"996\":1}}],[\"要先commit之后才会真正建立master分支\",{\"1\":{\"987\":1}}],[\"要先判断一下你对这个表\",{\"1\":{\"897\":1}}],[\"要怎么处理呢\",{\"0\":{\"977\":1}}],[\"要如何来解决\",{\"1\":{\"961\":1}}],[\"要\",{\"1\":{\"959\":1}}],[\"要创建1天间隔\",{\"0\":{\"952\":1}}],[\"要将别名放在delete和from之间\",{\"0\":{\"942\":1}}],[\"要将client模块下的application\",{\"1\":{\"593\":1}}],[\"要完成这个交易\",{\"1\":{\"931\":1}}],[\"要在影院\",{\"1\":{\"931\":2}}],[\"要考虑先暂停\",{\"1\":{\"928\":1}}],[\"要根据业务需求\",{\"1\":{\"923\":2}}],[\"要根据市民的身份证号查询他的姓名\",{\"1\":{\"922\":1}}],[\"要这么选择\",{\"1\":{\"919\":1}}],[\"要得到\",{\"1\":{\"906\":1}}],[\"要说明这个问题\",{\"1\":{\"901\":1}}],[\"要理解\",{\"1\":{\"899\":1}}],[\"要跨域\",{\"1\":{\"883\":1}}],[\"要铺垫的知识点还真是不少\",{\"1\":{\"722\":1}}],[\"要扩容的时候阻塞了\",{\"1\":{\"693\":1}}],[\"要保证不能重复就每添加一个元素就和数组里已有的元素equals\",{\"1\":{\"688\":1}}],[\"要保证资源的关闭\",{\"1\":{\"686\":1}}],[\"要保证只有一个请求能进方法里面\",{\"1\":{\"380\":1}}],[\"要记得接口的属性默认为\",{\"1\":{\"686\":1}}],[\"要能手写单例模式\",{\"1\":{\"686\":1}}],[\"要配置到\",{\"1\":{\"597\":1}}],[\"要经过三关才能过来\",{\"1\":{\"591\":1}}],[\"要经历三步\",{\"1\":{\"543\":1}}],[\"要写出常见的异常\",{\"1\":{\"686\":1}}],[\"要写成注册进\",{\"1\":{\"566\":1}}],[\"要写版本号\",{\"1\":{\"476\":1}}],[\"要知道\",{\"1\":{\"1140\":1}}],[\"要知道人外有人\",{\"1\":{\"1140\":1}}],[\"要知道自己到底想要什么\",{\"1\":{\"1139\":1}}],[\"要知道流程\",{\"1\":{\"466\":1}}],[\"要知其然也知其所以然\",{\"1\":{\"961\":1}}],[\"要知行合一\",{\"0\":{\"492\":1}}],[\"要求的并发量不高\",{\"1\":{\"970\":1}}],[\"要求线程在加锁时\",{\"1\":{\"932\":1}}],[\"要求业务开发人员使用\",{\"1\":{\"927\":1}}],[\"要求建表语句里一定要有自增主键\",{\"1\":{\"918\":1}}],[\"要求只能存储string类型的key和value\",{\"1\":{\"875\":1}}],[\"要求接口中定义的必须要实现的抽象方法只能是一个\",{\"1\":{\"747\":1}}],[\"要求代码先要会写\",{\"1\":{\"688\":1}}],[\"要求添加的数据都是相同类的对象\",{\"1\":{\"688\":1}}],[\"要求手动实现\",{\"1\":{\"685\":1}}],[\"要求\",{\"1\":{\"430\":1,\"959\":1}}],[\"要想回答好这个问题\",{\"1\":{\"328\":1}}],[\"要想充分利用多核\",{\"1\":{\"99\":1}}],[\"要注意的是\",{\"1\":{\"265\":1,\"572\":1}}],[\"要256mb起步\",{\"1\":{\"261\":1}}],[\"要把最可能造成锁冲突\",{\"1\":{\"931\":1,\"933\":1}}],[\"要把\",{\"1\":{\"252\":1}}],[\"要把这三条指定包在execute里面\",{\"1\":{\"85\":1}}],[\"要使用一个包\",{\"1\":{\"217\":1}}],[\"要使用行级锁\",{\"1\":{\"81\":1,\"936\":1}}],[\"要和\",{\"1\":{\"216\":1}}],[\"要做的事情就是把\",{\"1\":{\"218\":1}}],[\"要做的事情是就是检查账户余额是否充足\",{\"1\":{\"186\":1}}],[\"要做雷霆之神\",{\"1\":{\"203\":1}}],[\"要么完全不起作用\",{\"1\":{\"962\":1}}],[\"要么是你的引擎升级了\",{\"1\":{\"929\":1}}],[\"要么是你的系统现在还在用\",{\"1\":{\"929\":1}}],[\"要么就是先写完\",{\"1\":{\"901\":1}}],[\"要么用throws子句声明抛出它\",{\"1\":{\"705\":1}}],[\"要么用try\",{\"1\":{\"705\":1}}],[\"要么查缓存\",{\"1\":{\"627\":1}}],[\"要么查数据库\",{\"1\":{\"627\":1}}],[\"要么加进来要么去掉这个注解\",{\"1\":{\"546\":1}}],[\"要么全部失败\",{\"1\":{\"904\":1}}],[\"要么全部成功\",{\"1\":{\"904\":1}}],[\"要么全部唤醒\",{\"1\":{\"352\":2}}],[\"要么全部回滚\",{\"1\":{\"78\":1}}],[\"要么随机\",{\"1\":{\"352\":2}}],[\"要么都执行失败呢\",{\"1\":{\"183\":1}}],[\"要用迭代器删\",{\"1\":{\"645\":1}}],[\"要用的话得在需要注入到对象中才能使用\",{\"1\":{\"217\":1}}],[\"要用\",{\"1\":{\"153\":1,\"304\":1,\"937\":1}}],[\"要等光猫上网的灯亮了\",{\"1\":{\"77\":1}}],[\"要解决的是这个问题\",{\"1\":{\"70\":1}}],[\"租房\",{\"1\":{\"77\":1}}],[\"那你以后肯定会很优秀\",{\"1\":{\"1150\":1}}],[\"那你可以这么做\",{\"1\":{\"901\":1}}],[\"那你可能会问这种模式是不是最高效啊\",{\"1\":{\"635\":1}}],[\"那现在的你一定已经很了不起了\",{\"1\":{\"1142\":1}}],[\"那工资就是\",{\"1\":{\"1104\":1}}],[\"那也仅仅支持4g内存\",{\"1\":{\"1093\":1}}],[\"那是虚拟地址了\",{\"1\":{\"1093\":1}}],[\"那是不是撑得\",{\"1\":{\"694\":1}}],[\"那要安排升级换引擎\",{\"1\":{\"929\":1}}],[\"那意味着单独在字段\",{\"1\":{\"925\":1}}],[\"那些宣称自己\",{\"1\":{\"1113\":1}}],[\"那些不符合最左前缀的部分\",{\"1\":{\"924\":1}}],[\"那些被弱引用关联的对象都会被回收\",{\"1\":{\"660\":1}}],[\"那应该用身份证号做主键\",{\"1\":{\"918\":1}}],[\"那肯定是会报\",{\"1\":{\"897\":1}}],[\"那前端逻辑处理还不是要走\",{\"1\":{\"883\":1}}],[\"那这两个词肯定是绕不过的\",{\"1\":{\"898\":1}}],[\"那这张表上的查询才适合使用查询缓存\",{\"1\":{\"894\":1}}],[\"那这样是不是要保证ha\",{\"1\":{\"815\":1}}],[\"那这个基本就是\",{\"1\":{\"570\":1}}],[\"那这个sql就没意义\",{\"1\":{\"438\":1}}],[\"那为什么还要用泛型呢\",{\"1\":{\"715\":1}}],[\"那为什么不只放\",{\"1\":{\"627\":1}}],[\"那我就建议你创建一个\",{\"1\":{\"923\":1}}],[\"那我就简单用\",{\"1\":{\"713\":1}}],[\"那我估计你可得找一会儿\",{\"1\":{\"909\":1}}],[\"那我一些登录的后台逻辑\",{\"1\":{\"77\":1}}],[\"那条有异常的语句后面的代码就不会再执行了\",{\"1\":{\"686\":1}}],[\"那其他的类型时如何支持的\",{\"1\":{\"671\":1}}],[\"那其他事务也要操作用户小明或小红的话\",{\"1\":{\"609\":1}}],[\"那张经典图三板斧中的\",{\"1\":{\"474\":1}}],[\"那就继续研究\",{\"1\":{\"1150\":1}}],[\"那就很棒了\",{\"1\":{\"1148\":1}}],[\"那就只使用分库\",{\"1\":{\"961\":1}}],[\"那就包括两种情况\",{\"1\":{\"935\":1}}],[\"那就得继续往前找\",{\"1\":{\"935\":1}}],[\"那就得是spring\",{\"1\":{\"182\":1}}],[\"那就是你学艺不佳\",{\"1\":{\"1135\":1}}],[\"那就是\",{\"1\":{\"931\":1}}],[\"那就是单线程\",{\"1\":{\"329\":1}}],[\"那就\",{\"1\":{\"606\":1}}],[\"那个的意思是说现在的字体大小和更低分辨率的缺省字体一样的\",{\"1\":{\"998\":1}}],[\"那个实体类用一下注解就行\",{\"1\":{\"236\":1}}],[\"那个博客留言三级应该也可以简化成这样\",{\"1\":{\"229\":1}}],[\"那如果是我们上面说到的所有事务都要更新同一行的场景呢\",{\"1\":{\"932\":1}}],[\"那如果\",{\"1\":{\"186\":1}}],[\"那既然分布式事务也属于事务\",{\"1\":{\"183\":1}}],[\"那上一次\",{\"1\":{\"125\":1}}],[\"那不是那些配置的东西基本都是\",{\"1\":{\"124\":1}}],[\"那么硬件支持内存就大于4g了\",{\"1\":{\"1093\":1}}],[\"那么2^32到底是多少个\",{\"1\":{\"1092\":1}}],[\"那么假如32位系统的某个内存地址是\",{\"1\":{\"1091\":1}}],[\"那么内存地址的长度是多少呢\",{\"1\":{\"1091\":1}}],[\"那么其他module就算用到了它也只要引入的时候<scope>provided<\",{\"1\":{\"1012\":1}}],[\"那么其他服务也拿不到自己就算重启也要重新拿锁也拿不到\",{\"1\":{\"87\":1}}],[\"那么从早晨的空罐子到晚上的空罐子\",{\"1\":{\"980\":1}}],[\"那么mysql会使用隐藏的rowid\",{\"1\":{\"967\":1}}],[\"那么max函数将返回有值的行\",{\"1\":{\"959\":1}}],[\"那么也可以考虑使用这些\",{\"1\":{\"961\":1}}],[\"那么也就意味着我们同时也会出现一万调用发短信服务的请求\",{\"1\":{\"814\":1}}],[\"那么一次数据的查询会变成\",{\"1\":{\"961\":1}}],[\"那么可以先对用户\",{\"1\":{\"961\":1}}],[\"那么可以写作\",{\"1\":{\"763\":1}}],[\"那么该\",{\"1\":{\"959\":1}}],[\"那么该用户访问我们的业务接口时\",{\"1\":{\"627\":1}}],[\"那么根据左连接的定义\",{\"1\":{\"959\":1}}],[\"那么count\",{\"1\":{\"956\":2}}],[\"那么等到这个事务自己获取到行锁要更新数据的时候\",{\"1\":{\"934\":1}}],[\"那么死锁检测的成本很低\",{\"1\":{\"932\":1}}],[\"那么死锁检测操作就是\",{\"1\":{\"932\":1}}],[\"那么影院账户余额这一行的锁时间就最少\",{\"1\":{\"931\":1}}],[\"那么查询线程拿到的结果跟表结构对不上\",{\"1\":{\"928\":1}}],[\"那么备份就只能通过\",{\"1\":{\"927\":1}}],[\"那么备份期间从库不能执行主库同步过来的\",{\"1\":{\"927\":1}}],[\"那么备份系统中一定会保存最近半个月的所有\",{\"1\":{\"901\":1}}],[\"那么每个二级索引的叶子节点占用约\",{\"1\":{\"918\":1}}],[\"那么访问磁盘的平均次数就更少了\",{\"1\":{\"916\":1}}],[\"那么使用索引也不一定能够带来很大提升\",{\"1\":{\"911\":1}}],[\"那么索引也需要动态的修改\",{\"1\":{\"911\":1}}],[\"那么他可以把顾客名和账目写在板上\",{\"1\":{\"899\":1}}],[\"那么他们都应该从形状类继承\",{\"1\":{\"655\":1}}],[\"那么他们拥有的是同一把锁\",{\"1\":{\"322\":1}}],[\"那么执行器的执行流程是这样的\",{\"1\":{\"897\":1}}],[\"那么对于a按钮是重复提交了\",{\"1\":{\"889\":1}}],[\"那么对哈希码进行与运算的结果将是0到n\",{\"1\":{\"739\":1}}],[\"那么我的目的就达到了\",{\"1\":{\"1152\":1}}],[\"那么我启动一个事务\",{\"1\":{\"935\":1}}],[\"那么我\",{\"1\":{\"815\":1}}],[\"那么我们接下来谈一谈\",{\"1\":{\"1142\":1}}],[\"那么我们接着加点难度\",{\"1\":{\"725\":1}}],[\"那么我们首先需要定义信号量为3\",{\"1\":{\"342\":1}}],[\"那么我们就不用获取锁的时候自己定义leasetime\",{\"1\":{\"113\":1}}],[\"那么如果\",{\"1\":{\"823\":1}}],[\"那么如果我换了一台其他主机\",{\"1\":{\"798\":1,\"984\":1}}],[\"那么如何保证这一组操作要么都执行成功\",{\"1\":{\"183\":1}}],[\"那么父类怎么区分这两个类分别给他们各自的like实现\",{\"1\":{\"743\":1,\"1101\":1}}],[\"那么当它访问这一行数据时\",{\"1\":{\"935\":1}}],[\"那么当前事务读到的数据就是脏数据\",{\"1\":{\"905\":1}}],[\"那么当我们说将一个字符串放入字符串常量池的时候\",{\"1\":{\"722\":1}}],[\"那么当没有其他方式提供属性值时\",{\"1\":{\"522\":1}}],[\"那么编译器是会报错提示\",{\"1\":{\"721\":1}}],[\"那么注解就没有什么作用\",{\"1\":{\"688\":1,\"890\":1}}],[\"那么你的任务就算完成了\",{\"1\":{\"1150\":1}}],[\"那么你一开始制定日计划的时候\",{\"1\":{\"1142\":1}}],[\"那么你觉得现在这个短信系统能承受这一万的峰值么\",{\"1\":{\"814\":1}}],[\"那么你应该把让空调继承制冷机类\",{\"1\":{\"657\":1}}],[\"那么你应该把显示器\",{\"1\":{\"656\":1}}],[\"那么你可以在\",{\"1\":{\"522\":1}}],[\"那么此时你应该使用组合\",{\"1\":{\"657\":1}}],[\"那么此时你应该使用聚合\",{\"1\":{\"656\":1}}],[\"那么此时你应该使用继承\",{\"1\":{\"655\":1}}],[\"那么怎么回滚\",{\"1\":{\"606\":1}}],[\"那么系统设计的时候需要考虑到满足ca特性\",{\"1\":{\"572\":1}}],[\"那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致\",{\"1\":{\"901\":1}}],[\"那么数据库自带的事务就无法满足我们的要求了\",{\"1\":{\"183\":1}}],[\"那么数据就不一致\",{\"1\":{\"572\":1}}],[\"那么在启动应用程序时\",{\"1\":{\"1010\":1}}],[\"那么在备份期间都不能执行更新\",{\"1\":{\"927\":1}}],[\"那么在什么场景下\",{\"1\":{\"902\":1}}],[\"那么在分区期间\",{\"1\":{\"571\":1}}],[\"那么在执行main的时候\",{\"1\":{\"388\":1}}],[\"那么需要在注解上加上\",{\"1\":{\"531\":1}}],[\"那么两者性能差异不大\",{\"1\":{\"494\":1}}],[\"那么有什么方法能够控制班长这个线程是最后一个执行\",{\"1\":{\"333\":1}}],[\"那么它只能找到一个初级前端工程师\",{\"1\":{\"1107\":1}}],[\"那么它只能在构造函数或者成员变量声明的时候初始化一次\",{\"1\":{\"125\":1}}],[\"那么它可以用十六进制表示成\",{\"1\":{\"1091\":1}}],[\"那么它将首先在字符串常量池中创建\",{\"1\":{\"724\":1}}],[\"那么它就是一个无主键表\",{\"1\":{\"965\":1}}],[\"那么它就和没有任何引用一样\",{\"1\":{\"660\":2}}],[\"那么它就会生效\",{\"1\":{\"543\":1}}],[\"那么它也能直接进入method2方法\",{\"1\":{\"322\":1}}],[\"那么交换成l4\",{\"1\":{\"310\":1}}],[\"那么这时候就需要考虑当一部分行记录变成\",{\"1\":{\"932\":1}}],[\"那么这两个事务冲突的部分就是语句\",{\"1\":{\"931\":1}}],[\"那么这块\",{\"1\":{\"899\":1}}],[\"那么这个地址就对应下1个字节了\",{\"1\":{\"1091\":1}}],[\"那么这个依赖不会被自动包含在该模块的依赖列表中\",{\"1\":{\"1010\":1}}],[\"那么这个顺序往往就是需要优先考虑采用的\",{\"1\":{\"923\":1}}],[\"那么这个\",{\"1\":{\"824\":1,\"894\":1}}],[\"那么这个类就具备了原子性\",{\"1\":{\"310\":1}}],[\"那么这些合作的芯片公司\",{\"1\":{\"740\":1}}],[\"那么这些对象或数据将会一直被threadlocal持有\",{\"1\":{\"157\":1}}],[\"那么这里就只需要在字符串常量池中记录一下首次出现的实例引用即可\",{\"1\":{\"724\":1}}],[\"那么这里会调用其父类abstractstringbuilder的appendnull方法\",{\"1\":{\"720\":1}}],[\"那么a线程本次修改失败\",{\"1\":{\"305\":1}}],[\"那么就最多支持4g\",{\"1\":{\"1093\":1}}],[\"那么就可以把我们个人不被打扰的时间从早上5～8点都属于自己的时间\",{\"1\":{\"980\":1}}],[\"那么就破坏了备份的一致性\",{\"1\":{\"927\":1}}],[\"那么就会在消息到达时同时收到消息\",{\"1\":{\"817\":1}}],[\"那么就会以\",{\"1\":{\"720\":1}}],[\"那么就会出现死锁的问题\",{\"1\":{\"321\":1}}],[\"那么就无分布式概念了\",{\"1\":{\"572\":1}}],[\"那么就一直执行\",{\"1\":{\"305\":1}}],[\"那么就不要把过滤条件作为查询条件来用\",{\"1\":{\"278\":1}}],[\"那么操作的时候\",{\"1\":{\"305\":1}}],[\"那么问题就很明了\",{\"1\":{\"260\":1}}],[\"那么临时购物车的购物项也被清除\",{\"1\":{\"156\":1}}],[\"那么锁将一直保持有效\",{\"1\":{\"113\":1}}],[\"那么tps=qps=hps\",{\"1\":{\"100\":1}}],[\"那么ttl的值一开始是什么呢\",{\"1\":{\"76\":1}}],[\"那么途中则经过了64\",{\"1\":{\"76\":1}}],[\"那么\",{\"1\":{\"69\":1,\"295\":1,\"372\":1,\"507\":1,\"543\":2,\"637\":1,\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"725\":1,\"905\":1,\"916\":1,\"921\":1,\"923\":1,\"924\":1,\"927\":1,\"931\":1,\"935\":1,\"1143\":1,\"1150\":1}}],[\"脚手架使用\",{\"1\":{\"222\":1}}],[\"脚手架\",{\"1\":{\"222\":1}}],[\"脚本原子性\",{\"1\":{\"868\":1}}],[\"脚本原子删锁\",{\"1\":{\"111\":1}}],[\"脚本文件的操作\",{\"1\":{\"1079\":1}}],[\"脚本文件或可运行程序的名称\",{\"1\":{\"219\":1}}],[\"脚本文件和样式表等\",{\"1\":{\"77\":1}}],[\"脚本加载后\",{\"1\":{\"216\":1}}],[\"脚本\",{\"1\":{\"87\":1}}],[\"脚本去实现的\",{\"1\":{\"86\":1,\"114\":1}}],[\"脚注\",{\"0\":{\"19\":1}}],[\"旨在防止网站通过访问本地文件系统来获取敏感信息\",{\"1\":{\"706\":1}}],[\"旨在提供高效的内容交付和加速用户访问网站的体验\",{\"1\":{\"77\":1}}],[\"旨在篡改或劫持dns解析过程\",{\"1\":{\"77\":1}}],[\"污染时\",{\"1\":{\"77\":1}}],[\"遭到dns\",{\"1\":{\"77\":1}}],[\"进实验室\",{\"1\":{\"1150\":1}}],[\"进度条的这个过程\",{\"1\":{\"1089\":1}}],[\"进阶书籍+看博客+写总结+写开源项目\",{\"1\":{\"1150\":1}}],[\"进阶\",{\"0\":{\"692\":1},\"1\":{\"864\":1}}],[\"进程那里可以看死锁的语句\",{\"1\":{\"959\":1}}],[\"进程异常重启\",{\"1\":{\"901\":1}}],[\"进程id\",{\"1\":{\"782\":1}}],[\"进程名\",{\"1\":{\"782\":1}}],[\"进程数量过多对服务器开销造成的压力\",{\"1\":{\"712\":1}}],[\"进程通信\",{\"1\":{\"709\":1}}],[\"进程\",{\"1\":{\"687\":1}}],[\"进而当重写了equals方法\",{\"1\":{\"691\":1}}],[\"进而如何取舍\",{\"1\":{\"639\":1}}],[\"进而引起系统崩溃\",{\"1\":{\"581\":1}}],[\"进去\",{\"1\":{\"629\":1}}],[\"进了大门\",{\"1\":{\"322\":1}}],[\"进\",{\"1\":{\"211\":1,\"546\":1,\"1166\":1}}],[\"进入docsify目录\",{\"1\":{\"1161\":1}}],[\"进入这个命令后跟编辑\",{\"1\":{\"990\":1}}],[\"进入\",{\"1\":{\"986\":1}}],[\"进入等待状态\",{\"1\":{\"934\":1}}],[\"进入到下方的消息管道\",{\"1\":{\"613\":1}}],[\"进入到项目目录\",{\"1\":{\"219\":1}}],[\"进入一个无限重复的循环中\",{\"1\":{\"312\":1}}],[\"进入的do\",{\"1\":{\"305\":1}}],[\"进入容器\",{\"1\":{\"210\":1,\"212\":1}}],[\"进入倒计时\",{\"1\":{\"128\":1}}],[\"进行相应的调整\",{\"1\":{\"977\":1}}],[\"进行主从切换\",{\"1\":{\"976\":1}}],[\"进行冗余设计之前\",{\"1\":{\"970\":1}}],[\"进行划分\",{\"1\":{\"960\":1}}],[\"进行分组\",{\"1\":{\"959\":1}}],[\"进行合并\",{\"1\":{\"947\":2}}],[\"进行身份验证和授权\",{\"1\":{\"890\":1}}],[\"进行配置\",{\"1\":{\"810\":1}}],[\"进行扩展\",{\"1\":{\"787\":1}}],[\"进行扩容\",{\"1\":{\"682\":1}}],[\"进行显式配置\",{\"1\":{\"726\":1}}],[\"进行计算\",{\"1\":{\"725\":2}}],[\"进行类型判断\",{\"1\":{\"717\":1}}],[\"进行类型转换\",{\"1\":{\"637\":1}}],[\"进行编程的案例\",{\"1\":{\"713\":1}}],[\"进行比较\",{\"0\":{\"691\":1},\"1\":{\"718\":1}}],[\"进行比对的结果\",{\"1\":{\"624\":1}}],[\"进行元素比较和存储时起着重要的作用\",{\"1\":{\"690\":1}}],[\"进行循环时\",{\"1\":{\"645\":1}}],[\"进行访问是否\",{\"1\":{\"627\":1}}],[\"进行过滤\",{\"1\":{\"590\":1}}],[\"进行查找nginx配置文件\",{\"1\":{\"810\":1}}],[\"进行查找\",{\"1\":{\"454\":1}}],[\"进行取值\",{\"1\":{\"411\":1}}],[\"进行龙珠收集\",{\"1\":{\"338\":1}}],[\"进行检测\",{\"1\":{\"301\":1}}],[\"进行写入操作\",{\"1\":{\"290\":1}}],[\"进行加1操作\",{\"1\":{\"290\":1}}],[\"进行业务处理\",{\"1\":{\"252\":1}}],[\"进行\",{\"1\":{\"247\":1,\"493\":1}}],[\"进行判断\",{\"1\":{\"155\":1}}],[\"进行占锁\",{\"1\":{\"115\":1}}],[\"进行了封装和扩展\",{\"1\":{\"112\":1}}],[\"进行引用\",{\"1\":{\"29\":1}}],[\"进一次首页就要查一次\",{\"1\":{\"103\":1}}],[\"进不去wepe好像\",{\"1\":{\"1026\":1}}],[\"进不去\",{\"0\":{\"77\":1}}],[\"访问knife4j的文档地址\",{\"1\":{\"1097\":1}}],[\"访问文件是\",{\"1\":{\"1039\":1}}],[\"访问每个节点\",{\"1\":{\"916\":1}}],[\"访问的时候以视图的逻辑结果为准\",{\"1\":{\"905\":1}}],[\"访问次数感觉也不错\",{\"1\":{\"866\":1}}],[\"访问数据库中压根就不存在的数据\",{\"1\":{\"866\":1}}],[\"访问可以直接通过singleton\",{\"1\":{\"700\":1}}],[\"访问配置属性等\",{\"1\":{\"538\":1,\"1082\":1}}],[\"访问也老是404\",{\"1\":{\"198\":1}}],[\"访问增强后的代理类的方法\",{\"1\":{\"179\":1}}],[\"访问\",{\"0\":{\"77\":1}}],[\"说你不值这个价\",{\"0\":{\"1132\":1}}],[\"说只能按上一份工资涨薪\",{\"0\":{\"1131\":1},\"1\":{\"1131\":1}}],[\"说出你的理解\",{\"1\":{\"919\":1}}],[\"说完了数据恢复过程\",{\"1\":{\"901\":1}}],[\"说这个元素不在这个集合中就一定不在\",{\"1\":{\"866\":1}}],[\"说一下mysql中事务的实现原理\",{\"1\":{\"908\":1}}],[\"说一下为空null的字符串的打印原理\",{\"1\":{\"720\":1}}],[\"说一下java对象中的对象拷贝\",{\"0\":{\"683\":1}}],[\"说到视图你肯定想起来了\",{\"1\":{\"927\":1}}],[\"说到\",{\"1\":{\"713\":1}}],[\"说它偏门\",{\"1\":{\"637\":1}}],[\"说说你平时有用到aop吗\",{\"0\":{\"492\":1}}],[\"说了分布式锁\",{\"1\":{\"380\":1}}],[\"说白了\",{\"1\":{\"507\":1,\"745\":1,\"779\":1}}],[\"说白了就是用内网穿透服务商备案好了的提供给你用\",{\"1\":{\"195\":1}}],[\"说白了幂等性设计就是\",{\"1\":{\"162\":1}}],[\"说明被final修饰的数组的引用地址是不可改变的\",{\"1\":{\"721\":1}}],[\"说明是第一次存储\",{\"0\":{\"691\":1}}],[\"说明该值已经被其它线程抢先一步修改过了\",{\"1\":{\"305\":1}}],[\"说明在标识处有功能代码待编写\",{\"1\":{\"229\":1}}],[\"说明\",{\"1\":{\"220\":1,\"229\":1,\"278\":1,\"366\":2,\"702\":1}}],[\"说明越快到达目的地\",{\"1\":{\"76\":1}}],[\"说明发送数据包经过路由器越少\",{\"1\":{\"76\":1}}],[\"说\",{\"1\":{\"76\":1,\"849\":1}}],[\"更要能理解一下底层的原理\",{\"1\":{\"1150\":1}}],[\"更高的分辨率可能需要更强大的图形处理能力\",{\"1\":{\"998\":1}}],[\"更消耗\",{\"1\":{\"947\":1}}],[\"更耗时\",{\"1\":{\"947\":1}}],[\"更省空间\",{\"1\":{\"919\":1}}],[\"更适合存储在磁盘中\",{\"1\":{\"916\":1}}],[\"更适合处理多个线程有共享数据的情况\",{\"1\":{\"687\":1}}],[\"更不会加表锁\",{\"1\":{\"906\":1}}],[\"更改millis\",{\"1\":{\"890\":1}}],[\"更改mysql的语言\",{\"0\":{\"805\":1}}],[\"更方便\",{\"1\":{\"798\":1,\"984\":1}}],[\"更多内容请参考我的原创\",{\"1\":{\"729\":1}}],[\"更多的功能和更好的代码风格\",{\"1\":{\"677\":1}}],[\"更好的情况是\",{\"1\":{\"1150\":1}}],[\"更好的东西\",{\"1\":{\"1150\":1}}],[\"更好的方法是什么\",{\"1\":{\"919\":1}}],[\"更好的生活例子\",{\"1\":{\"688\":1}}],[\"更好的视频\",{\"1\":{\"543\":1,\"1081\":1}}],[\"更加可靠\",{\"1\":{\"1041\":1}}],[\"更加易用\",{\"1\":{\"1041\":1}}],[\"更加灵活\",{\"1\":{\"1041\":1}}],[\"更加稳定\",{\"1\":{\"1041\":1}}],[\"更加推荐第一种\",{\"1\":{\"970\":1}}],[\"更加矮宽\",{\"1\":{\"916\":1}}],[\"更加符合业务\",{\"1\":{\"686\":1}}],[\"更加普遍的选择是利用并发包提供的线程安全容器类\",{\"1\":{\"641\":1}}],[\"更接近人的思维\",{\"1\":{\"678\":1}}],[\"更具体地说\",{\"1\":{\"571\":1}}],[\"更具提示码到一个网站逆向出密码\",{\"1\":{\"76\":1}}],[\"更积极地移除基于垃圾收集器状态和弱引用规则的对象\",{\"1\":{\"448\":1}}],[\"更了解\",{\"1\":{\"183\":1}}],[\"更快\",{\"0\":{\"1036\":1},\"1\":{\"156\":1}}],[\"更新或插入\",{\"1\":{\"959\":1}}],[\"更新了一行\",{\"1\":{\"930\":1}}],[\"更新的时间复杂度也是\",{\"1\":{\"916\":1}}],[\"更新的时候会判断你的版本号是否一致\",{\"1\":{\"855\":1}}],[\"更新余额等\",{\"1\":{\"904\":1}}],[\"更新完成\",{\"1\":{\"900\":1}}],[\"更新前和更新后都有\",{\"1\":{\"900\":1}}],[\"更新流程还涉及两个重要的日志模块\",{\"1\":{\"898\":1}}],[\"更新语句也是同样会走一遍\",{\"1\":{\"898\":1}}],[\"更新以及卸载单个软件包\",{\"1\":{\"808\":1}}],[\"更新拼串\",{\"1\":{\"434\":1}}],[\"更新var5\",{\"1\":{\"305\":1}}],[\"更新\",{\"0\":{\"271\":1}}],[\"更新携带\",{\"1\":{\"269\":1}}],[\"更新速度也比较快\",{\"1\":{\"247\":1}}],[\"更新之后\",{\"1\":{\"225\":1}}],[\"更新之前\",{\"1\":{\"225\":1}}],[\"更新接口update\",{\"1\":{\"165\":1}}],[\"更新锁的过期时间\",{\"1\":{\"113\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"5\":1}}],[\"更新时间\",{\"1\":{\"2\":1}}],[\"更偏向于它\",{\"1\":{\"105\":1}}],[\"更推荐\",{\"1\":{\"101\":1}}],[\"次或多次\",{\"1\":{\"1016\":1}}],[\"次磁盘\",{\"1\":{\"916\":1}}],[\"次方个值\",{\"1\":{\"916\":1}}],[\"次方\",{\"1\":{\"739\":1}}],[\"次~~~<\",{\"1\":{\"221\":1}}],[\"次<\",{\"1\":{\"221\":2}}],[\"次\",{\"1\":{\"76\":1,\"186\":1,\"924\":2,\"933\":2}}],[\"输完命令之后\",{\"1\":{\"893\":1}}],[\"输出hello\",{\"1\":{\"994\":1}}],[\"输出集合中所有的偶数\",{\"1\":{\"767\":1}}],[\"输出集合中的所有元素\",{\"1\":{\"767\":1}}],[\"输出结果\",{\"1\":{\"752\":1}}],[\"输出设备接收计算机输出的数据\",{\"1\":{\"709\":1}}],[\"输出设备\",{\"1\":{\"709\":1}}],[\"输出流\",{\"1\":{\"688\":1}}],[\"输出的不是print\",{\"1\":{\"88\":1}}],[\"输错\",{\"1\":{\"76\":1}}],[\"输入maven就可用maven\",{\"1\":{\"1074\":1}}],[\"输入法删除默认的拼音改用搜狗拼音\",{\"1\":{\"1006\":1}}],[\"输入设备向计算机输入数据\",{\"1\":{\"709\":1}}],[\"输入设备\",{\"1\":{\"709\":2}}],[\"输入流\",{\"1\":{\"688\":1}}],[\"输入输出的头尾两端的message\",{\"1\":{\"613\":1}}],[\"输入\",{\"1\":{\"101\":1,\"990\":1}}],[\"输入搜索字词并按\",{\"1\":{\"62\":1}}],[\"输入网站名称并按\",{\"1\":{\"62\":1}}],[\"设定一个空值将始终从仓库中获取\",{\"1\":{\"1009\":1}}],[\"设计方面\",{\"1\":{\"686\":1}}],[\"设计模式之禅\",{\"1\":{\"1150\":1}}],[\"设计模式经典之一\",{\"1\":{\"1150\":1}}],[\"设计模式\",{\"0\":{\"498\":1},\"1\":{\"688\":1,\"1150\":3}}],[\"设备补贴\",{\"1\":{\"1108\":1}}],[\"设备准备好数据\",{\"1\":{\"709\":1}}],[\"设备\",{\"0\":{\"1030\":1},\"1\":{\"77\":1}}],[\"设了密码\",{\"1\":{\"76\":1}}],[\"设置重复值高亮的条件格式\",{\"1\":{\"1051\":1}}],[\"设置冲突\",{\"1\":{\"1005\":1}}],[\"设置里看不到\",{\"1\":{\"998\":1}}],[\"设置换\",{\"1\":{\"996\":1}}],[\"设置到\",{\"1\":{\"996\":1}}],[\"设置也是一样的效果\",{\"1\":{\"993\":1}}],[\"设置手环闹钟\",{\"1\":{\"980\":1}}],[\"设置长事务阈值\",{\"1\":{\"908\":1}}],[\"设置成\",{\"1\":{\"894\":1,\"908\":1}}],[\"设置过期时间\",{\"1\":{\"868\":2}}],[\"设置个短的过期时间\",{\"1\":{\"866\":1}}],[\"设置消息过期时间实现延时队列\",{\"1\":{\"842\":1}}],[\"设置回调\",{\"0\":{\"836\":1}}],[\"设置一个保存点\",{\"1\":{\"929\":1}}],[\"设置一个当前窗口会话的临时变量\",{\"1\":{\"782\":1}}],[\"设置一个毫秒值\",{\"1\":{\"448\":1}}],[\"设置springsecurity的usernamepasswordauthenticationtoken\",{\"1\":{\"627\":1}}],[\"设置服务的超时\",{\"1\":{\"582\":1}}],[\"设置feign客户端超时时间\",{\"1\":{\"577\":1}}],[\"设置切点\",{\"1\":{\"492\":1}}],[\"设置执行类型为batch\",{\"1\":{\"462\":1}}],[\"设置字符集\",{\"1\":{\"459\":1}}],[\"设置启动级别\",{\"1\":{\"459\":1}}],[\"设置日志输出\",{\"1\":{\"400\":1}}],[\"设置超时等\",{\"1\":{\"372\":1}}],[\"设置超时方法\",{\"1\":{\"352\":1}}],[\"设置instance指向刚刚分配的内存地址\",{\"1\":{\"301\":2}}],[\"设置允许携带cookies\",{\"1\":{\"231\":1}}],[\"设置事务的传播行为解决\",{\"1\":{\"179\":1}}],[\"设置事务的传播级别\",{\"1\":{\"178\":1}}],[\"设置事务的隔离级别\",{\"1\":{\"178\":1}}],[\"设置锁和设置过期时间\",{\"1\":{\"110\":1}}],[\"设置锁的过期时间\",{\"1\":{\"87\":1}}],[\"设置的字符集为encoding\",{\"1\":{\"459\":2}}],[\"设置的\",{\"1\":{\"101\":1}}],[\"设置中设置了一个\",{\"1\":{\"76\":1}}],[\"设置每一个请求的唯一\",{\"1\":{\"71\":1}}],[\"设置token过期时间30分钟\",{\"1\":{\"70\":1}}],[\"设置\",{\"0\":{\"802\":1},\"1\":{\"61\":1,\"87\":1,\"202\":1,\"210\":1,\"267\":1,\"1080\":1}}],[\"设置为环境变量\",{\"1\":{\"522\":1}}],[\"设置为\",{\"1\":{\"48\":1,\"932\":1}}],[\"设置和页面关联的cookie\",{\"1\":{\"48\":1}}],[\"想讲述一下自己怎么会爱上这种感觉\",{\"1\":{\"1162\":1}}],[\"想看更详细点的就这篇\",{\"1\":{\"1157\":1}}],[\"想努力却无从努力的人\",{\"1\":{\"1077\":1}}],[\"想把\",{\"1\":{\"1041\":1}}],[\"想把两个列数一样的查询\",{\"1\":{\"959\":1}}],[\"想象要确保基准点左边都是小的\",{\"1\":{\"1085\":1}}],[\"想象树图也要落入磁盘\",{\"1\":{\"975\":1}}],[\"想象一下除了这个日志接口把标准提供给调用方去实现\",{\"1\":{\"740\":1}}],[\"想象一下两个二进制位相加\",{\"1\":{\"648\":1}}],[\"想必大家也和我一样\",{\"1\":{\"962\":1}}],[\"想着自己使用spring\",{\"1\":{\"876\":1}}],[\"想让上面的自动完成且优化\",{\"1\":{\"864\":1}}],[\"想用rocketmq\",{\"1\":{\"594\":1}}],[\"想用的话得用\",{\"1\":{\"108\":1,\"112\":1}}],[\"想不起配置文件怎么配\",{\"1\":{\"484\":1}}],[\"想办法加这两个就不用再回到他们表再查了\",{\"1\":{\"250\":1}}],[\"想办法给三个系统同步同一个用户的票据\",{\"1\":{\"153\":1}}],[\"想要索引生效的话\",{\"1\":{\"923\":1}}],[\"想要恢复未刷盘但已经写入\",{\"1\":{\"899\":1}}],[\"想要实现无密\",{\"1\":{\"798\":1,\"984\":1}}],[\"想要实现无密登录\",{\"1\":{\"798\":1,\"984\":1}}],[\"想要push时不输入账号密码\",{\"1\":{\"798\":1,\"984\":1}}],[\"想要远程调用别的服务\",{\"1\":{\"576\":1}}],[\"想要快速得到用户信息\",{\"1\":{\"156\":1}}],[\"想要\",{\"1\":{\"76\":1}}],[\"想搭建本地静态资源web服务器\",{\"1\":{\"73\":1}}],[\"无所谓左边出发右边出发了应该\",{\"1\":{\"1085\":1}}],[\"无头苍蝇乱撞\",{\"1\":{\"1076\":1}}],[\"无用字段增加网络带宽资源消耗\",{\"1\":{\"969\":1}}],[\"无过滤不索引\",{\"1\":{\"923\":1}}],[\"无索引时\",{\"1\":{\"906\":1}}],[\"无中心化集群\",{\"1\":{\"865\":1}}],[\"无中心配置相对简单\",{\"1\":{\"865\":1}}],[\"无疑极大地减少了开发和联调的工作量\",{\"1\":{\"813\":1}}],[\"无\",{\"1\":{\"770\":1}}],[\"无参无返回\",{\"1\":{\"752\":1}}],[\"无参数\",{\"1\":{\"752\":1}}],[\"无参数接口\",{\"1\":{\"751\":1}}],[\"无参数无返回值接口\",{\"1\":{\"751\":1}}],[\"无返回值\",{\"1\":{\"751\":1,\"752\":2,\"770\":2}}],[\"无返回值有单个参数\",{\"1\":{\"751\":1}}],[\"无序\",{\"1\":{\"688\":2,\"925\":1}}],[\"无情版\",{\"1\":{\"570\":1}}],[\"无形中增加了服务器的压力\",{\"1\":{\"539\":1,\"1083\":1}}],[\"无代码生成\",{\"1\":{\"473\":1}}],[\"无需上传\",{\"1\":{\"1084\":1}}],[\"无需担心跨域问题\",{\"1\":{\"883\":1}}],[\"无需释放资源\",{\"1\":{\"688\":1}}],[\"无需其他代码\",{\"1\":{\"521\":1}}],[\"无需编写xml\",{\"1\":{\"473\":1}}],[\"无需掌握各种组装技术\",{\"1\":{\"472\":1}}],[\"无需写多余的controller\",{\"1\":{\"97\":1}}],[\"无锁\",{\"1\":{\"379\":1}}],[\"无锁化提升并发性能\",{\"1\":{\"157\":1}}],[\"无限的创建和销毁线程不仅消耗系统资源\",{\"1\":{\"367\":1}}],[\"无论怎样\",{\"1\":{\"1150\":1}}],[\"无论事务是否成功\",{\"1\":{\"962\":1}}],[\"无论内存是否足够\",{\"1\":{\"660\":1}}],[\"无论是博客还是书或者是官方资料\",{\"1\":{\"1144\":1}}],[\"无论是\",{\"1\":{\"913\":1,\"933\":1}}],[\"无论是直接通过文件路径访问还是通过本地服务器进行访问\",{\"1\":{\"706\":1}}],[\"无论是使用openfeign还是其他http客户端库\",{\"1\":{\"581\":1}}],[\"无论是通过lock还是trylock方法\",{\"1\":{\"113\":1}}],[\"无论多大文件md5都会搞成固定长度的串\",{\"1\":{\"132\":1}}],[\"无法聚焦思路捋顺\",{\"1\":{\"1085\":1}}],[\"无法获取远程分支\",{\"0\":{\"988\":1},\"1\":{\"988\":1}}],[\"无法创建数据库\",{\"1\":{\"782\":1}}],[\"无法使用\",{\"1\":{\"718\":1,\"969\":1}}],[\"无法编译\",{\"1\":{\"718\":2}}],[\"无法解析为类型\",{\"1\":{\"688\":1}}],[\"无法访问的语句\",{\"1\":{\"686\":1}}],[\"无法先创建一个\",{\"1\":{\"543\":1}}],[\"无法继续向柜子里面添加蛋糕了\",{\"1\":{\"345\":1}}],[\"无法从柜子里面获取蛋糕\",{\"1\":{\"345\":1}}],[\"无法首先执行\",{\"1\":{\"293\":1}}],[\"无法将\",{\"1\":{\"219\":1}}],[\"无法代理非\",{\"1\":{\"182\":1}}],[\"无法被垃圾回收\",{\"1\":{\"157\":1}}],[\"无法扩大域名\",{\"1\":{\"153\":1}}],[\"无法记录库存变化前后的状态\",{\"1\":{\"81\":1}}],[\"无法成功ping通目标主机并不一定意味着icmp协议不可用\",{\"1\":{\"76\":1}}],[\"无网络访问权限\",{\"1\":{\"76\":1}}],[\"机场默认给的是\",{\"1\":{\"981\":1}}],[\"机场的\",{\"1\":{\"76\":1}}],[\"机器卡顿\",{\"1\":{\"844\":1}}],[\"机器宕机\",{\"1\":{\"183\":1}}],[\"机制来实现\",{\"1\":{\"740\":1}}],[\"机制实现的\",{\"1\":{\"740\":1}}],[\"机制等\",{\"1\":{\"636\":1}}],[\"机制\",{\"0\":{\"83\":1},\"1\":{\"740\":1}}],[\"机房网络显示\",{\"1\":{\"76\":1}}],[\"逻辑cpu的个数就是总的cpu物理内核数的两倍\",{\"1\":{\"1095\":1}}],[\"逻辑cpu的个数就是总的cpu物理内核数\",{\"1\":{\"1095\":1}}],[\"逻辑过期\",{\"1\":{\"867\":1}}],[\"逻辑过程省略\",{\"1\":{\"124\":1}}],[\"逻辑删除\",{\"0\":{\"236\":1},\"1\":{\"229\":1}}],[\"逻辑删除有两种方法\",{\"1\":{\"229\":1}}],[\"逻辑思维能力\",{\"1\":{\"126\":1}}],[\"逻辑\",{\"1\":{\"76\":1,\"768\":1}}],[\"类使用\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"类则是基于传统的字符串字段名的方式\",{\"1\":{\"743\":1,\"1101\":1}}],[\"类在设计时针对\",{\"1\":{\"743\":1,\"1101\":1}}],[\"类支持使用\",{\"1\":{\"743\":1,\"1101\":1}}],[\"类信息\",{\"1\":{\"722\":1}}],[\"类本身也被添加了final关键字修饰\",{\"1\":{\"721\":1}}],[\"类常见面试题总结\",{\"0\":{\"719\":1}}],[\"类实例化时才能真正的传递类型参数\",{\"1\":{\"717\":1}}],[\"类中静态块按照声明顺序执行\",{\"1\":{\"697\":1}}],[\"类中加\",{\"1\":{\"598\":1}}],[\"类变量\",{\"0\":{\"704\":1},\"1\":{\"696\":1}}],[\"类a是类b的父类\",{\"1\":{\"688\":1}}],[\"类加载过程是由java虚拟机的类加载器\",{\"1\":{\"679\":1}}],[\"类加载过程包括以下几个步骤\",{\"1\":{\"679\":1}}],[\"类加载完成后\",{\"1\":{\"679\":1}}],[\"类加载是java虚拟机\",{\"1\":{\"679\":1}}],[\"类加载具体过程\",{\"0\":{\"679\":1}}],[\"类加载器的作用就是把类\",{\"1\":{\"688\":1}}],[\"类加载器具体看\",{\"1\":{\"679\":1}}],[\"类加载器\",{\"0\":{\"387\":1}}],[\"类加载器在进行类加载的时候\",{\"1\":{\"382\":1}}],[\"类加载器和双亲委派模型\",{\"1\":{\"381\":1}}],[\"类提供了一个\",{\"1\":{\"672\":1}}],[\"类指外部类的访问修饰符\",{\"0\":{\"668\":1}}],[\"类来表示\",{\"1\":{\"660\":1}}],[\"类对象\",{\"1\":{\"624\":1}}],[\"类去继承官方的\",{\"1\":{\"624\":1}}],[\"类可以将数据压缩为压缩格式\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"类可以将传递的应用程序上下文存储为一个成员变量\",{\"1\":{\"538\":1,\"1082\":1}}],[\"类可以直接访问应用程序上下文\",{\"1\":{\"538\":1,\"1082\":1}}],[\"类可以获得对应用程序上下文的引用\",{\"1\":{\"538\":1,\"1082\":1}}],[\"类组件之间无依赖关系用lite模式加速容器启动过程\",{\"1\":{\"517\":1}}],[\"类组件之间无依赖关系\",{\"1\":{\"517\":1}}],[\"类里面属性名称\",{\"1\":{\"487\":1}}],[\"类\",{\"1\":{\"465\":1,\"496\":1,\"625\":1,\"686\":1,\"1081\":1}}],[\"类名\",{\"1\":{\"454\":1,\"661\":1,\"688\":1}}],[\"类路径下\",{\"1\":{\"400\":1}}],[\"类下面的方法\",{\"1\":{\"304\":1}}],[\"类目>spu>sku\",{\"1\":{\"244\":1}}],[\"类+方法上\",{\"0\":{\"830\":1}}],[\"类+\",{\"1\":{\"240\":1}}],[\"类还要在类头加注解\",{\"1\":{\"240\":1}}],[\"类似java的父目录\",{\"1\":{\"1100\":1}}],[\"类似linux环境下的守护进程\",{\"1\":{\"1041\":1}}],[\"类似回滚事务\",{\"1\":{\"854\":1}}],[\"类似mysql的\",{\"1\":{\"854\":1}}],[\"类似中介\",{\"1\":{\"824\":1}}],[\"类似地\",{\"1\":{\"712\":1}}],[\"类似asm\",{\"1\":{\"638\":1}}],[\"类似hystrix\",{\"1\":{\"604\":1}}],[\"类似熔断保险丝\",{\"1\":{\"581\":1}}],[\"类似快速备忘录功能\",{\"1\":{\"229\":1}}],[\"类似\",{\"1\":{\"217\":1,\"267\":1,\"782\":1,\"928\":1,\"956\":1}}],[\"类似于github\",{\"1\":{\"1145\":1}}],[\"类似于为每一个用户创建一个进程或者\",{\"1\":{\"849\":1}}],[\"类似于工厂方法\",{\"1\":{\"748\":1}}],[\"类似于单例的懒汉式\",{\"1\":{\"688\":1}}],[\"类似于hibernate\",{\"1\":{\"594\":1}}],[\"类似于排队买饭\",{\"1\":{\"315\":1}}],[\"类似于时间戳的概念\",{\"1\":{\"309\":1}}],[\"类似于回收站\",{\"1\":{\"229\":1}}],[\"类似于data概念\",{\"1\":{\"225\":1}}],[\"类似于\",{\"1\":{\"210\":1,\"587\":2}}],[\"类的\",{\"1\":{\"743\":1,\"1101\":1}}],[\"类的加载信息\",{\"1\":{\"695\":1}}],[\"类的加载过程\",{\"1\":{\"688\":1}}],[\"类的加载是按需进行的\",{\"1\":{\"679\":1}}],[\"类的属性\",{\"1\":{\"686\":1}}],[\"类的属性之一\",{\"1\":{\"156\":1}}],[\"类的实例级别字段\",{\"1\":{\"156\":1}}],[\"类的内部类\",{\"1\":{\"156\":1}}],[\"类别\",{\"1\":{\"76\":1}}],[\"类型变量\",{\"1\":{\"717\":1}}],[\"类型需要手动添加强制类型转换\",{\"1\":{\"715\":1}}],[\"类型比较\",{\"0\":{\"647\":1}}],[\"类型对应\",{\"1\":{\"543\":1,\"1081\":1}}],[\"类型的索引\",{\"1\":{\"936\":1}}],[\"类型的强制类型转换\",{\"1\":{\"725\":1}}],[\"类型的字面量\",{\"1\":{\"725\":1}}],[\"类型的最大值\",{\"1\":{\"648\":1}}],[\"类型的数相加\",{\"1\":{\"648\":1}}],[\"类型的异常\",{\"1\":{\"520\":1}}],[\"类型的对象\",{\"1\":{\"156\":1}}],[\"类型\",{\"1\":{\"76\":1,\"265\":1,\"671\":1,\"718\":1}}],[\"开了代理才行\",{\"1\":{\"1005\":1}}],[\"开了2个chrome窗口\",{\"1\":{\"998\":1}}],[\"开起来\",{\"1\":{\"908\":1}}],[\"开辟一条线程\",{\"0\":{\"769\":1},\"1\":{\"769\":1}}],[\"开销小\",{\"1\":{\"688\":1}}],[\"开销大\",{\"1\":{\"307\":1}}],[\"开闭原则\",{\"1\":{\"686\":1}}],[\"开头处\",{\"1\":{\"805\":1}}],[\"开头提醒\",{\"1\":{\"740\":1}}],[\"开头\",{\"1\":{\"548\":1}}],[\"开头的\",{\"1\":{\"1005\":1}}],[\"开头的路径的容量就行\",{\"1\":{\"782\":1}}],[\"开头的这些参数被认为是程序参数\",{\"1\":{\"546\":1}}],[\"开头的xml文件\",{\"1\":{\"454\":1}}],[\"开源中国的码云也行\",{\"1\":{\"1145\":1}}],[\"开源的\",{\"1\":{\"262\":1,\"961\":1}}],[\"开源项目试过了能行\",{\"1\":{\"153\":1}}],[\"开源项目\",{\"1\":{\"153\":1,\"1127\":1}}],[\"开启超线程后\",{\"1\":{\"1095\":1}}],[\"开启用\",{\"1\":{\"1006\":1}}],[\"开启\",{\"1\":{\"1005\":1}}],[\"开启项目内搜索\",{\"1\":{\"985\":1}}],[\"开启消费者手动ack\",{\"1\":{\"846\":1}}],[\"开启生产者确认机制\",{\"1\":{\"846\":1}}],[\"开启手动确认\",{\"1\":{\"837\":1}}],[\"开启发送端消息抵达queue确认\",{\"1\":{\"832\":1}}],[\"开启发送端消息抵达broker确认\",{\"1\":{\"832\":1}}],[\"开启防火墙\",{\"1\":{\"804\":1}}],[\"开启mysql的远程访问\",{\"0\":{\"793\":1,\"803\":1}}],[\"开启某些\",{\"1\":{\"726\":1}}],[\"开启服务的注册与发现功能\",{\"1\":{\"595\":1}}],[\"开启从注册中心动态创建路由的功能\",{\"1\":{\"591\":1}}],[\"开启远程调用功能\",{\"1\":{\"576\":1}}],[\"开启远程权限\",{\"1\":{\"213\":1}}],[\"开启异步\",{\"1\":{\"543\":1,\"1081\":1}}],[\"开启异步任务\",{\"1\":{\"202\":1}}],[\"开启驼峰命名法\",{\"1\":{\"464\":1}}],[\"开启全局二级缓存配置\",{\"1\":{\"448\":1}}],[\"开启获取自增主键的策略\",{\"1\":{\"404\":1}}],[\"开启aof持久化\",{\"1\":{\"213\":1}}],[\"开启aspectj动态代理功能\",{\"1\":{\"179\":1}}],[\"开启定时任务\",{\"1\":{\"202\":1}}],[\"开启这个事务会成功买上一本\",{\"1\":{\"178\":1}}],[\"开启一个新的事务\",{\"1\":{\"178\":1}}],[\"开启事务\",{\"1\":{\"85\":1,\"854\":1}}],[\"开始界面\",{\"1\":{\"1037\":1}}],[\"开始配置成趁手的还是需要一些时间的\",{\"1\":{\"1001\":1}}],[\"开始的\",{\"0\":{\"958\":1}}],[\"开始一个个回表\",{\"1\":{\"924\":1}}],[\"开始执行的时候\",{\"1\":{\"897\":1}}],[\"开始执行语句\",{\"1\":{\"897\":1}}],[\"开始彻底没有这个功能了\",{\"1\":{\"894\":1}}],[\"开始进行垃圾回收\",{\"1\":{\"660\":1}}],[\"开始全局事务\",{\"1\":{\"606\":1}}],[\"开始基础篇的学习\",{\"1\":{\"561\":1}}],[\"开始时间\",{\"1\":{\"492\":1}}],[\"开始打印请求日志\",{\"1\":{\"492\":1}}],[\"开始就略过后面的了\",{\"1\":{\"377\":1}}],[\"开始是0\",{\"1\":{\"337\":1}}],[\"开始\",{\"0\":{\"288\":1},\"1\":{\"383\":1,\"724\":1,\"929\":1}}],[\"开始事务\",{\"1\":{\"169\":1}}],[\"开始倒计时后设置按钮不可用$\",{\"1\":{\"128\":1}}],[\"开发时优先选择\",{\"1\":{\"687\":1}}],[\"开发到现在\",{\"1\":{\"633\":1}}],[\"开发\",{\"1\":{\"598\":1}}],[\"开发环境\",{\"1\":{\"598\":1}}],[\"开发的一个个模块单元\",{\"1\":{\"553\":1}}],[\"开发中推荐用stringbuffer\",{\"1\":{\"687\":1}}],[\"开发中为什么使用线程池\",{\"0\":{\"367\":1}}],[\"开发中遇到什么困难\",{\"1\":{\"106\":1}}],[\"开发手册\",{\"1\":{\"366\":1,\"970\":1,\"971\":1}}],[\"开发一时爽\",{\"1\":{\"252\":1}}],[\"开发人员可以匹配http请求中的所有内容\",{\"1\":{\"590\":1}}],[\"开发人员不用再关心model\",{\"1\":{\"218\":1}}],[\"开发人员从后端获取需要的数据模型\",{\"1\":{\"218\":1}}],[\"开发测试\",{\"1\":{\"196\":1}}],[\"开发认证服务器\",{\"1\":{\"153\":1}}],[\"开放授权\",{\"1\":{\"136\":1}}],[\"开放api里\",{\"1\":{\"70\":1}}],[\"开缓存\",{\"1\":{\"102\":2}}],[\"开不开全局取决于\",{\"1\":{\"76\":1}}],[\"路越走越窄\",{\"1\":{\"1076\":1}}],[\"路径中找\",{\"1\":{\"1009\":1}}],[\"路径相匹配的进行路由\",{\"1\":{\"591\":2}}],[\"路径下的文件\",{\"1\":{\"454\":1}}],[\"路径\",{\"1\":{\"268\":1}}],[\"路径映射\",{\"1\":{\"97\":1}}],[\"路径导航\",{\"1\":{\"2\":1,\"5\":1}}],[\"路由到不同的队列\",{\"1\":{\"843\":1}}],[\"路由键\",{\"1\":{\"823\":1}}],[\"路由的id\",{\"1\":{\"591\":1}}],[\"路由是构建网关的基本模块\",{\"1\":{\"590\":1}}],[\"路由\",{\"1\":{\"590\":1,\"591\":1}}],[\"路由器可以绑花生壳\",{\"1\":{\"196\":1}}],[\"路由器有wifi可以连\",{\"1\":{\"77\":1}}],[\"路由问题或目标主机的设置等其他因素引起的\",{\"1\":{\"76\":1}}],[\"路由问题或网络拥塞可能导致ping不通\",{\"1\":{\"76\":1}}],[\"您也知道计划一般赶不上变化\",{\"1\":{\"1104\":1}}],[\"您应该确认已经从可信的来源下载了\",{\"1\":{\"999\":1}}],[\"您提供的命令\",{\"1\":{\"999\":1}}],[\"您可能需要相应地调整查询以适应实际情况\",{\"1\":{\"959\":1}}],[\"您可以配置maven使用的默认仓库\",{\"1\":{\"1014\":1}}],[\"您可以指定要使用的仓库的位置\",{\"1\":{\"1014\":1}}],[\"您可以移除\",{\"1\":{\"999\":1}}],[\"您可以修改\",{\"1\":{\"789\":1}}],[\"您可以在系统设置中选择显示器的原生分辨率或其他支持的分辨率选项\",{\"1\":{\"998\":1}}],[\"您可以在系统设置中调整显示器的缩放分辨率\",{\"1\":{\"998\":1}}],[\"您可以在任何应用\",{\"1\":{\"594\":1}}],[\"您可以在application\",{\"1\":{\"60\":1}}],[\"您可以同时控制\",{\"1\":{\"523\":1}}],[\"您可以使用\",{\"1\":{\"523\":1}}],[\"您可以解决同一个对象内事务方法互调时默认失效的问题\",{\"1\":{\"179\":1}}],[\"您可以通过使用\",{\"1\":{\"179\":1}}],[\"您可以将\",{\"1\":{\"78\":1}}],[\"您无需手动判断使用哪个配置文件\",{\"1\":{\"881\":1}}],[\"您使用npm\",{\"1\":{\"881\":1}}],[\"您仍然无法通过ping命令与目标主机进行通信\",{\"1\":{\"76\":1}}],[\"例句\",{\"1\":{\"1103\":4}}],[\"例\",{\"0\":{\"762\":1},\"1\":{\"428\":1,\"750\":1,\"763\":1}}],[\"例子很好\",{\"0\":{\"492\":1}}],[\"例子\",{\"0\":{\"294\":1},\"1\":{\"73\":2,\"283\":1}}],[\"例如禁止更新\",{\"1\":{\"1160\":1}}],[\"例如远程开发\",{\"1\":{\"1106\":1}}],[\"例如后台系统一个\",{\"1\":{\"1097\":1}}],[\"例如在传输二进制数据时\",{\"1\":{\"1081\":1}}],[\"例如在控制器\",{\"1\":{\"156\":1}}],[\"例如typora\",{\"1\":{\"1041\":1}}],[\"例如servlet\",{\"1\":{\"1012\":1}}],[\"例如sharding\",{\"1\":{\"960\":1}}],[\"例如定时签到类的\",{\"1\":{\"994\":1}}],[\"例如做与工作不相关的事情\",{\"1\":{\"980\":1}}],[\"例如转账业务中\",{\"1\":{\"962\":1}}],[\"例如国家\",{\"1\":{\"961\":1}}],[\"例如哈希算法\",{\"1\":{\"961\":1}}],[\"例如userid散列\",{\"1\":{\"960\":1}}],[\"例如update\",{\"1\":{\"164\":1}}],[\"例如字符串或数字类型\",{\"1\":{\"959\":1}}],[\"例如尝试融入leetcode拿成就感的这种\",{\"1\":{\"876\":1}}],[\"例如blog\",{\"1\":{\"866\":1}}],[\"例如heima的视频\",{\"1\":{\"865\":1,\"876\":1}}],[\"例如库存解锁时判断工作单的状态\",{\"1\":{\"847\":1}}],[\"例如解锁库存\",{\"1\":{\"843\":1}}],[\"例如路由键不对没有投递成功\",{\"1\":{\"836\":1}}],[\"例如通过channel拿message\",{\"1\":{\"823\":1}}],[\"例如当权限为\",{\"1\":{\"786\":1}}],[\"例如判断一个数是否大于某个阈值\",{\"1\":{\"748\":1}}],[\"例如将一个字符串转换成一个整数\",{\"1\":{\"748\":1}}],[\"例如将数据转换为特定的格式\",{\"1\":{\"156\":1}}],[\"例如打印或写入文件等操作\",{\"1\":{\"748\":1}}],[\"例如打10086人工\",{\"1\":{\"582\":1}}],[\"例如a\",{\"1\":{\"706\":1}}],[\"例如aop\",{\"1\":{\"483\":1}}],[\"例如中文操作系统编码是gbk\",{\"1\":{\"688\":1}}],[\"例如中间件多是计算基本是\",{\"1\":{\"99\":1}}],[\"例如60\",{\"1\":{\"685\":1}}],[\"例如开门这个动作\",{\"1\":{\"678\":1}}],[\"例如下面的father\",{\"1\":{\"658\":1}}],[\"例如下面注销登录就是删\",{\"1\":{\"628\":1}}],[\"例如快速入门案例里面使用到的三种过滤器\",{\"1\":{\"619\":1}}],[\"例如保存商品会有几次feign优惠券之类的这里不要求高并发\",{\"1\":{\"608\":1}}],[\"例如请求调用链路\",{\"1\":{\"603\":1}}],[\"例如请求头或请求参数\",{\"1\":{\"590\":1}}],[\"例如双十一用这组\",{\"1\":{\"598\":1}}],[\"例如服务提供者和服务消费者\",{\"1\":{\"594\":1}}],[\"例如响应时间\",{\"1\":{\"572\":1}}],[\"例如读就绪或写就绪\",{\"1\":{\"712\":1}}],[\"例如读取\",{\"1\":{\"630\":1}}],[\"例如读取配置文件\",{\"1\":{\"546\":1,\"1166\":1}}],[\"例如读写锁可以看看\",{\"1\":{\"115\":1}}],[\"例如获取和管理\",{\"1\":{\"538\":1,\"1082\":1}}],[\"例如日志记录\",{\"1\":{\"520\":1}}],[\"例如写个配置文件无需回头改代码再发布\",{\"1\":{\"473\":1}}],[\"例如mysql\",{\"1\":{\"473\":1}}],[\"例如method01\",{\"1\":{\"179\":1}}],[\"例如分表\",{\"1\":{\"411\":1}}],[\"例如分布式计数器\",{\"1\":{\"112\":1}}],[\"例如分布式锁\",{\"1\":{\"112\":1}}],[\"例如分布式map\",{\"1\":{\"112\":1}}],[\"例如年轻代和老年代\",{\"1\":{\"385\":1}}],[\"例如使用指定的线程池\",{\"1\":{\"372\":1}}],[\"例如湘就是湖南\",{\"1\":{\"321\":1}}],[\"例如高考\",{\"1\":{\"292\":1}}],[\"例如先得有你妈才能有你\",{\"1\":{\"292\":1}}],[\"例如990\",{\"1\":{\"275\":1}}],[\"例如purchase\",{\"1\":{\"179\":1}}],[\"例如集群下多个定时器处理相同的数据\",{\"1\":{\"171\":1}}],[\"例如对结果进行筛选\",{\"1\":{\"156\":1}}],[\"例如事务管理\",{\"1\":{\"156\":1}}],[\"例如数据转换\",{\"1\":{\"156\":1}}],[\"例如用户登录状态\",{\"1\":{\"156\":1}}],[\"例如用户信息等\",{\"1\":{\"156\":1}}],[\"例如用户名和密码\",{\"1\":{\"153\":1}}],[\"例如选择了第三个商品进行增删改查\",{\"1\":{\"155\":1}}],[\"例如文件系统或内存数据库\",{\"1\":{\"153\":1}}],[\"例如访问页面或发送请求\",{\"1\":{\"152\":1}}],[\"例如首页的菜单基本不怎么变\",{\"1\":{\"103\":1}}],[\"例如百度的服务器肯定不止一台\",{\"1\":{\"72\":1,\"809\":1}}],[\"例如翻墙软件\",{\"1\":{\"72\":1}}],[\"例如设定在最后30分钟范围内的操作会刷新token\",{\"1\":{\"70\":1}}],[\"例如\",{\"0\":{\"83\":1},\"1\":{\"60\":1,\"61\":2,\"76\":2,\"78\":1,\"118\":1,\"153\":1,\"261\":1,\"302\":1,\"372\":1,\"383\":1,\"466\":1,\"503\":1,\"520\":1,\"522\":4,\"537\":1,\"538\":1,\"543\":1,\"571\":1,\"686\":1,\"706\":1,\"760\":1,\"779\":1,\"787\":1,\"802\":1,\"823\":1,\"866\":1,\"959\":6,\"960\":2,\"961\":1,\"963\":1,\"987\":1,\"990\":1,\"1010\":1,\"1038\":2,\"1041\":1,\"1082\":1,\"1158\":1}}],[\"五年\",{\"1\":{\"1110\":1}}],[\"五险\",{\"1\":{\"1108\":1}}],[\"五\",{\"0\":{\"764\":1,\"1146\":1},\"1\":{\"73\":1,\"630\":1,\"980\":1}}],[\"特性时\",{\"1\":{\"726\":1}}],[\"特么的\",{\"1\":{\"708\":1}}],[\"特征\",{\"1\":{\"688\":1}}],[\"特别是如果你使用了\",{\"1\":{\"1074\":1}}],[\"特别是当你只想替换\",{\"1\":{\"625\":1}}],[\"特别的\",{\"1\":{\"702\":1}}],[\"特别地\",{\"1\":{\"686\":1}}],[\"特别注意\",{\"1\":{\"267\":1,\"608\":1}}],[\"特殊字符\",{\"1\":{\"802\":2}}],[\"特殊注释说明\",{\"1\":{\"229\":1}}],[\"特殊设计\",{\"1\":{\"108\":1}}],[\"特殊数据\",{\"1\":{\"108\":1}}],[\"特喵的感觉一样的效果\",{\"1\":{\"73\":1}}],[\"特点\",{\"0\":{\"443\":1},\"1\":{\"71\":1,\"154\":1,\"411\":1}}],[\"时用到的一致性读视图\",{\"1\":{\"934\":1}}],[\"时创建的\",{\"1\":{\"934\":1}}],[\"时刻\",{\"1\":{\"929\":8}}],[\"时速度会很快\",{\"1\":{\"914\":1}}],[\"时初始化node\",{\"1\":{\"703\":1}}],[\"时必须重写\",{\"0\":{\"690\":1}}],[\"时才把数组创建好\",{\"1\":{\"688\":1}}],[\"时发现循环依赖\",{\"1\":{\"543\":1}}],[\"时代背景\",{\"0\":{\"474\":1}}],[\"时被阻塞\",{\"1\":{\"337\":1}}],[\"时候就不自增直接\",{\"1\":{\"887\":1}}],[\"时候笔记\",{\"0\":{\"824\":1}}],[\"时候\",{\"1\":{\"194\":1,\"229\":1}}],[\"时候点击\",{\"1\":{\"107\":1}}],[\"时延问题\",{\"1\":{\"193\":1}}],[\"时需要注意及时清除数据\",{\"1\":{\"156\":1}}],[\"时输出的不是普通的字符串时间格式\",{\"1\":{\"125\":2}}],[\"时使用此序列化方法\",{\"1\":{\"125\":2}}],[\"时间很少的就根据自身情况取舍吧\",{\"1\":{\"1144\":1}}],[\"时间管理\",{\"0\":{\"1142\":1},\"1\":{\"1137\":1}}],[\"时间复杂度为\",{\"1\":{\"972\":1}}],[\"时间等\",{\"1\":{\"960\":1}}],[\"时间格式的处理函数\",{\"0\":{\"951\":1}}],[\"时间\",{\"1\":{\"892\":1}}],[\"时间片给其他线程\",{\"1\":{\"650\":1}}],[\"时间窗口期\",{\"1\":{\"586\":1}}],[\"时间差\",{\"1\":{\"309\":1}}],[\"时间到锁一释放自己在裸奔\",{\"1\":{\"87\":1}}],[\"时间戳校验\",{\"1\":{\"129\":1}}],[\"时间戳\",{\"0\":{\"83\":1},\"1\":{\"129\":1}}],[\"时间顾名思义就是返回时间\",{\"1\":{\"76\":1}}],[\"时\",{\"0\":{\"773\":1},\"1\":{\"73\":2,\"76\":1,\"179\":2,\"201\":1,\"251\":1,\"321\":2,\"411\":2,\"543\":2,\"572\":1,\"625\":1,\"688\":1,\"694\":2,\"722\":1,\"724\":2,\"947\":1}}],[\"都听一下\",{\"1\":{\"1150\":1}}],[\"都加上\",{\"1\":{\"1005\":1}}],[\"都需要消耗cpu\",{\"1\":{\"970\":1}}],[\"都需要配置\",{\"1\":{\"798\":1,\"984\":1}}],[\"都提供\",{\"1\":{\"961\":1}}],[\"都提供了\",{\"1\":{\"634\":1}}],[\"都按照相同的顺序获取锁\",{\"1\":{\"933\":1}}],[\"都对应一次磁盘\",{\"1\":{\"916\":1}}],[\"都使用了\",{\"1\":{\"913\":1}}],[\"都持久化到磁盘\",{\"1\":{\"902\":1}}],[\"都直接持久化到磁盘\",{\"1\":{\"902\":1}}],[\"都将依赖于此时读到的权限\",{\"1\":{\"893\":1}}],[\"都将一起查询出来\",{\"1\":{\"424\":1}}],[\"都属于外部设备\",{\"1\":{\"709\":1}}],[\"都重新计算元素位置和复制数据\",{\"1\":{\"682\":1}}],[\"都表示循环从0到999999的范围\",{\"1\":{\"643\":1}}],[\"都必须导入\",{\"1\":{\"608\":1}}],[\"都这么干\",{\"1\":{\"594\":1}}],[\"都用\",{\"1\":{\"589\":1}}],[\"都非常有必要将这两个理论搞懂\",{\"1\":{\"571\":1}}],[\"都要判断会不会由于自己的加入导致了死锁\",{\"1\":{\"932\":1}}],[\"都要\",{\"1\":{\"528\":1}}],[\"都要完成\",{\"0\":{\"376\":1}}],[\"都有默认初始化值\",{\"1\":{\"686\":1}}],[\"都有自己实现\",{\"1\":{\"609\":1}}],[\"都有另一套方案用响应式替代\",{\"1\":{\"466\":1}}],[\"都有点多余\",{\"1\":{\"65\":1}}],[\"都可以得到前一个状态的值\",{\"1\":{\"906\":1}}],[\"都可以用于表示事务的提交状态\",{\"1\":{\"901\":1}}],[\"都可以做并且更好\",{\"1\":{\"713\":1}}],[\"都可以由默认实现\",{\"1\":{\"686\":1}}],[\"都可以被动态代理机制优雅地解决\",{\"1\":{\"639\":1}}],[\"都可以\",{\"1\":{\"601\":1}}],[\"都可以写在代码里面\",{\"1\":{\"599\":1}}],[\"都可以通过classpath\",{\"1\":{\"454\":1}}],[\"都可以的\",{\"1\":{\"220\":1}}],[\"都执行好了\",{\"1\":{\"363\":1}}],[\"都不允许\",{\"1\":{\"928\":1}}],[\"都不涉及到挪动其他记录\",{\"1\":{\"918\":1}}],[\"都不能影响单线程程序的执行结果\",{\"1\":{\"329\":1}}],[\"都不行还得重启项目\",{\"1\":{\"123\":1,\"546\":1}}],[\"都采用它\",{\"1\":{\"262\":1}}],[\"都会产生额外的对索引文件的操作\",{\"1\":{\"975\":1}}],[\"都会生成一个新的数据版本\",{\"1\":{\"935\":1}}],[\"都会走吗\",{\"1\":{\"925\":1}}],[\"都会将整个表重建\",{\"1\":{\"919\":1}}],[\"都会从\",{\"1\":{\"899\":2}}],[\"都会启动手动\",{\"1\":{\"837\":1}}],[\"都会被擦除为\",{\"1\":{\"718\":1}}],[\"都会有两行\",{\"1\":{\"961\":1}}],[\"都会有默认值\",{\"1\":{\"704\":1}}],[\"都会有一个注册中心存放服务地址相关信息\",{\"1\":{\"564\":1}}],[\"都会使结果偏向\",{\"1\":{\"681\":1}}],[\"都会在编译阶段被加上\",{\"1\":{\"669\":1}}],[\"都会在一个群里通知\",{\"1\":{\"539\":1,\"1083\":1}}],[\"都会回收它的空间\",{\"1\":{\"660\":1}}],[\"都会向alibaba靠拢\",{\"1\":{\"581\":1}}],[\"都会用父method01的事务\",{\"1\":{\"178\":1}}],[\"都会导致\",{\"1\":{\"176\":1}}],[\"都登出\",{\"1\":{\"153\":1}}],[\"都登录\",{\"1\":{\"153\":1}}],[\"都去中央认证器\",{\"1\":{\"153\":1}}],[\"都充满疑惑\",{\"1\":{\"125\":1}}],[\"都无法启用看门狗机制\",{\"1\":{\"113\":1}}],[\"都没有手动敲\",{\"1\":{\"109\":1}}],[\"都是自己学的\",{\"1\":{\"1150\":1}}],[\"都是掌握理论知识的步骤\",{\"1\":{\"1144\":1}}],[\"都是windows系统中的服务管理工具\",{\"1\":{\"1041\":1}}],[\"都是指对多个列同时创建一个索引\",{\"1\":{\"959\":1}}],[\"都是默认\",{\"1\":{\"934\":1}}],[\"都是会被锁住的\",{\"1\":{\"927\":1}}],[\"都是追加操作\",{\"1\":{\"918\":1}}],[\"都是在\",{\"1\":{\"931\":1}}],[\"都是在这层实现\",{\"1\":{\"892\":1}}],[\"都是在多线程环境下存储用户信息的方式\",{\"1\":{\"156\":1}}],[\"都是让类去实现对应回调接口\",{\"1\":{\"833\":1}}],[\"都是基于\",{\"1\":{\"738\":1}}],[\"都是ruoyi自己写的然后再services层再反射拿做一系列相应业务\",{\"1\":{\"688\":1}}],[\"都是多个集群\",{\"1\":{\"565\":1}}],[\"都是上层\",{\"1\":{\"552\":1}}],[\"都是要撸代码的\",{\"1\":{\"492\":1}}],[\"都是用sentinel系统默认的提示\",{\"1\":{\"604\":1}}],[\"都是用来扫描组件的注解\",{\"1\":{\"482\":1}}],[\"都是用于定义服务器上的文件路径的指令\",{\"1\":{\"73\":1}}],[\"都是\",{\"1\":{\"482\":1}}],[\"都是将大写字母转小写\",{\"1\":{\"417\":1}}],[\"都是直接或者间接实现了\",{\"1\":{\"354\":1}}],[\"都是靠着\",{\"1\":{\"354\":1}}],[\"都是cv没去自己写\",{\"0\":{\"261\":1}}],[\"都是gulimall\",{\"1\":{\"246\":1}}],[\"都是和α公用一个事务\",{\"1\":{\"179\":1}}],[\"都是一样的api\",{\"1\":{\"115\":1}}],[\"都是静态资源请求\",{\"1\":{\"92\":1}}],[\"都先到其客户端写好对应语句\",{\"1\":{\"78\":1}}],[\"瞎百度\",{\"1\":{\"72\":1}}],[\"保税仓库\",{\"1\":{\"959\":2}}],[\"保留第二行两个字段都有值\",{\"1\":{\"959\":1}}],[\"保护模式\",{\"1\":{\"853\":1}}],[\"保障消息确认机制\",{\"1\":{\"846\":1}}],[\"保障平台\",{\"1\":{\"612\":1}}],[\"保险丝\",{\"1\":{\"582\":1}}],[\"保存路径\",{\"1\":{\"897\":1}}],[\"保存每个消息的详细信息\",{\"1\":{\"846\":1}}],[\"保存更改后的my\",{\"1\":{\"805\":1}}],[\"保存到yigo2\",{\"1\":{\"612\":1}}],[\"保存修改\",{\"1\":{\"537\":1}}],[\"保存数据的时候拿第三方来实现\",{\"1\":{\"451\":1}}],[\"保存订单数据\",{\"1\":{\"261\":1}}],[\"保存用户登录信息\",{\"1\":{\"156\":1}}],[\"保存会存类的全限定类名\",{\"1\":{\"123\":1}}],[\"保存cookie解决\",{\"1\":{\"72\":1}}],[\"保证求解的过程形成一个逻辑上的有向无环图\",{\"1\":{\"1086\":1}}],[\"保证被关联\",{\"1\":{\"970\":1}}],[\"保证读写的正确性\",{\"1\":{\"928\":1}}],[\"保证参数的正确性\",{\"1\":{\"887\":1}}],[\"保证每个消息都被正确消费\",{\"1\":{\"837\":1}}],[\"保证每天拿到当前最新数据即可\",{\"1\":{\"118\":1}}],[\"保证线程安全\",{\"1\":{\"740\":1}}],[\"保证父类有此构造器\",{\"1\":{\"688\":1}}],[\"保证服务不受级联影响\",{\"1\":{\"603\":1}}],[\"保证服务的稳\",{\"1\":{\"199\":1}}],[\"保证bootstrap\",{\"1\":{\"593\":1}}],[\"保证所有任务按照指定顺序\",{\"1\":{\"365\":1}}],[\"保证一次性\",{\"1\":{\"307\":1}}],[\"保证某些变量的内存可见性\",{\"1\":{\"296\":1}}],[\"保证特定操作的顺序\",{\"1\":{\"296\":1}}],[\"保证有序性\",{\"1\":{\"283\":1}}],[\"保证可见性\",{\"1\":{\"283\":2}}],[\"保证权限\",{\"1\":{\"267\":1}}],[\"保证了不会初始化多个static对象\",{\"1\":{\"700\":1}}],[\"保证了一定的安全性\",{\"1\":{\"238\":1}}],[\"保证了数据一致性\",{\"1\":{\"173\":1}}],[\"保证只有一个线程会拿到锁\",{\"1\":{\"87\":1,\"110\":1}}],[\"保证同一时刻只能有一个实例能够获取到锁\",{\"1\":{\"86\":1,\"114\":1}}],[\"保证发送速率与接收速率的匹配\",{\"1\":{\"56\":1}}],[\"方向是\",{\"1\":{\"1152\":1}}],[\"方方\",{\"1\":{\"1126\":1}}],[\"方鸿渐总是被动地去接受\",{\"1\":{\"1076\":1}}],[\"方鸿渐给我的印象就是\",{\"1\":{\"1076\":1}}],[\"方括号\",{\"1\":{\"959\":1}}],[\"方案二\",{\"1\":{\"844\":1}}],[\"方案一\",{\"1\":{\"844\":1}}],[\"方案只是在系统发生分区的时候放弃一致性\",{\"1\":{\"572\":1}}],[\"方案的一个补充\",{\"1\":{\"571\":1}}],[\"方式也可以让全库进入只读状态\",{\"1\":{\"927\":1}}],[\"方式获取\",{\"1\":{\"884\":2}}],[\"方式四\",{\"1\":{\"688\":1,\"689\":1}}],[\"方式三\",{\"1\":{\"688\":1,\"689\":1}}],[\"方式二\",{\"1\":{\"688\":2,\"689\":1}}],[\"方式一\",{\"1\":{\"688\":2,\"689\":1}}],[\"方式\",{\"1\":{\"539\":1,\"927\":1}}],[\"方式给的\",{\"1\":{\"522\":1}}],[\"方式启动\",{\"0\":{\"355\":1}}],[\"方式是指以代理服务器来接受internet上的连接请求\",{\"1\":{\"72\":1,\"809\":1}}],[\"方便阅读\",{\"1\":{\"1125\":1}}],[\"方便你查找\",{\"1\":{\"1003\":2}}],[\"方便的使用rabbittemplate发送消息\",{\"1\":{\"827\":1}}],[\"方便反射动态拿\",{\"1\":{\"688\":1}}],[\"方便查看\",{\"1\":{\"492\":1}}],[\"方便分析源码\",{\"1\":{\"483\":1}}],[\"方便页面返回\",{\"1\":{\"460\":1}}],[\"方便后面\",{\"1\":{\"782\":1}}],[\"方便后面引用\",{\"1\":{\"440\":1}}],[\"方便后来引用这个变量的值\",{\"1\":{\"438\":1}}],[\"方便观察sql语句和参数\",{\"1\":{\"400\":1}}],[\"方便快捷\",{\"1\":{\"222\":1}}],[\"方便重复利用\",{\"1\":{\"217\":1}}],[\"方便本类方法互调\",{\"1\":{\"179\":1}}],[\"方便区分\",{\"1\":{\"128\":1}}],[\"方便些\",{\"1\":{\"83\":1}}],[\"方法做逻辑备份的过程中\",{\"1\":{\"929\":1}}],[\"方法只适用于所有的表使用事务引擎的库\",{\"1\":{\"927\":1}}],[\"方法中\",{\"1\":{\"890\":1}}],[\"方法和对应类有没有加这个注解\",{\"1\":{\"889\":1}}],[\"方法和其他初始化方法\",{\"1\":{\"543\":1}}],[\"方法运行结束\",{\"1\":{\"830\":1}}],[\"方法参数传递机制\",{\"0\":{\"780\":1}}],[\"方法参数需要和发布\",{\"1\":{\"543\":1,\"1081\":1}}],[\"方法返回地址等信息\",{\"1\":{\"778\":1}}],[\"方法执行后销毁\",{\"1\":{\"771\":1}}],[\"方法内被\",{\"1\":{\"771\":1}}],[\"方法内定义开门的具体步骤\",{\"1\":{\"678\":1}}],[\"方法名\",{\"1\":{\"761\":1}}],[\"方法名相同\",{\"1\":{\"659\":1}}],[\"方法的隶属者\",{\"1\":{\"761\":2}}],[\"方法的拦截和增强\",{\"1\":{\"182\":1}}],[\"方法大括号\",{\"1\":{\"756\":1}}],[\"方法大括号精简\",{\"0\":{\"756\":1}}],[\"方法体\",{\"1\":{\"750\":1,\"752\":1}}],[\"方法是通过继承父类\",{\"1\":{\"743\":1,\"1101\":1}}],[\"方法是因为它们在使用集合类\",{\"1\":{\"690\":1}}],[\"方法时\",{\"1\":{\"723\":2}}],[\"方法放在后面细说\",{\"1\":{\"722\":1}}],[\"方法信息\",{\"1\":{\"722\":1}}],[\"方法进行重写\",{\"1\":{\"691\":1}}],[\"方法引用\",{\"0\":{\"760\":1,\"763\":1},\"1\":{\"688\":1,\"761\":1,\"762\":1}}],[\"方法可以抛出异常\",{\"1\":{\"687\":1}}],[\"方法可以中断\",{\"1\":{\"352\":1}}],[\"方法默认\",{\"1\":{\"686\":1}}],[\"方法对\",{\"1\":{\"681\":1}}],[\"方法仅仅是返回一个null\",{\"1\":{\"660\":1}}],[\"方法等待\",{\"1\":{\"650\":1}}],[\"方法暂停当前线程\",{\"1\":{\"650\":1}}],[\"方法也不会显式释放锁资源\",{\"1\":{\"650\":1}}],[\"方法删除元素时\",{\"1\":{\"645\":1}}],[\"方法接收的参数是一个\",{\"1\":{\"546\":1,\"1166\":1}}],[\"方法会被调用得到之前单实例组件\",{\"1\":{\"517\":1}}],[\"方法获取的对象是在字符串常量池中的对象\",{\"1\":{\"723\":1}}],[\"方法获取\",{\"1\":{\"454\":1}}],[\"方法获取到value值也是3\",{\"1\":{\"305\":1}}],[\"方法二\",{\"1\":{\"403\":1,\"683\":1}}],[\"方法一执行完\",{\"1\":{\"780\":1}}],[\"方法一\",{\"1\":{\"403\":1,\"683\":1}}],[\"方法结束\",{\"1\":{\"388\":1}}],[\"方法部分\",{\"1\":{\"388\":1}}],[\"方法出口\",{\"1\":{\"388\":1}}],[\"方法区会存储已被虚拟机加载的\",{\"1\":{\"722\":1}}],[\"方法区\",{\"0\":{\"386\":1},\"1\":{\"695\":1}}],[\"方法完成后的处理\",{\"0\":{\"374\":1}}],[\"方法完成后的感知\",{\"0\":{\"373\":1}}],[\"方法来对文件进行切割\",{\"1\":{\"708\":1}}],[\"方法来指定拦截路径\",{\"1\":{\"534\":1}}],[\"方法来设置拦截路径\",{\"1\":{\"534\":1}}],[\"方法来赋值\",{\"1\":{\"411\":1}}],[\"方法来加载类\",{\"1\":{\"382\":1}}],[\"方法来访问\",{\"1\":{\"304\":1}}],[\"方法来获取代理对象\",{\"1\":{\"179\":1}}],[\"方法2也加锁了\",{\"1\":{\"322\":1}}],[\"方法2\",{\"1\":{\"295\":1}}],[\"方法+\",{\"1\":{\"240\":1}}],[\"方法形参加注解\",{\"1\":{\"240\":1}}],[\"方法实现那三点cv的没有去看\",{\"1\":{\"234\":1}}],[\"方法集合\",{\"1\":{\"225\":1}}],[\"方法或使用更强大的切面功能\",{\"1\":{\"182\":1}}],[\"方法无法被子类重写\",{\"1\":{\"182\":1}}],[\"方法在接口中是不可见的\",{\"1\":{\"182\":1}}],[\"方法\",{\"0\":{\"690\":1,\"691\":1},\"1\":{\"182\":5,\"186\":2,\"302\":1,\"321\":2,\"382\":1,\"388\":1,\"538\":2,\"546\":1,\"650\":1,\"658\":2,\"660\":1,\"672\":1,\"686\":2,\"687\":3,\"688\":1,\"696\":1,\"708\":1,\"722\":1,\"739\":1,\"743\":1,\"760\":1,\"927\":1,\"1082\":2,\"1101\":1,\"1166\":1}}],[\"方法b中的事务也不会生效\",{\"1\":{\"182\":1}}],[\"方法需要确保spring的exposeproxy属性设置为true\",{\"1\":{\"179\":1}}],[\"方法传的所有参数所有参数都会从容器中进行确定\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"方法不会显式释放锁资源\",{\"1\":{\"650\":1}}],[\"方法不再调用\",{\"1\":{\"123\":1}}],[\"方法不用调用\",{\"1\":{\"123\":1}}],[\"方法里面if这个map有没有缓存\",{\"1\":{\"103\":1}}],[\"方法将对象捆绑到一个会话\",{\"1\":{\"49\":1}}],[\"目前只支持用户名密码对加密\",{\"1\":{\"1158\":1}}],[\"目前只支持mysql的存储\",{\"1\":{\"599\":1}}],[\"目前公司规模小于10人\",{\"1\":{\"1104\":1}}],[\"目前这三样都没有\",{\"1\":{\"1104\":1}}],[\"目前尚没看清具体市场在哪\",{\"1\":{\"1104\":1}}],[\"目前包含的插件如下\",{\"1\":{\"1005\":1}}],[\"目前有一个实体类\",{\"1\":{\"763\":1}}],[\"目前来说\",{\"1\":{\"713\":1}}],[\"目前支持\",{\"1\":{\"712\":1}}],[\"目前仅支持rabbitmq\",{\"1\":{\"594\":1}}],[\"目前问题1\",{\"1\":{\"584\":1}}],[\"目前\",{\"1\":{\"543\":1}}],[\"目前的答案\",{\"1\":{\"454\":1}}],[\"目的是测了下这两者都生效了\",{\"1\":{\"1080\":1}}],[\"目的是把大量的数据分散到多个数据库或数据表中\",{\"1\":{\"960\":1}}],[\"目的地\",{\"1\":{\"816\":1}}],[\"目的\",{\"0\":{\"544\":1},\"1\":{\"462\":1,\"686\":1,\"809\":1,\"998\":1,\"1021\":1}}],[\"目的应该是与\",{\"1\":{\"386\":1}}],[\"目的只是为了把value改为json序列化\",{\"1\":{\"125\":1}}],[\"目标往大了说\",{\"1\":{\"1144\":1}}],[\"目标表列\",{\"1\":{\"959\":2}}],[\"目标表别名\",{\"1\":{\"959\":1}}],[\"目标表名称\",{\"1\":{\"959\":1}}],[\"目标uri\",{\"1\":{\"590\":1}}],[\"目标路径\",{\"1\":{\"157\":1}}],[\"目标主机接收到请求后会发送回一个icmp回显回复\",{\"1\":{\"76\":1}}],[\"目标主机的防火墙设置以及网络基础设施的状态\",{\"1\":{\"76\":1}}],[\"目标主机也可能不会回复ping请求\",{\"1\":{\"76\":1}}],[\"目标主机可以选择禁用icmp回复\",{\"1\":{\"76\":1}}],[\"目标主机可能配置了防火墙规则\",{\"1\":{\"76\":1}}],[\"目标主机禁用icmp回复\",{\"1\":{\"76\":1}}],[\"目标主机配置或防火墙设置\",{\"1\":{\"76\":1}}],[\"目标服务器\",{\"1\":{\"72\":1}}],[\"目录中的\",{\"1\":{\"998\":4}}],[\"目录中的虚拟主机配置文件\",{\"1\":{\"48\":1}}],[\"目录挂载\",{\"1\":{\"789\":1}}],[\"目录挂载经常用\",{\"1\":{\"210\":1}}],[\"目录\",{\"1\":{\"642\":1,\"909\":1}}],[\"目录下的\",{\"1\":{\"1005\":1}}],[\"目录下创建\",{\"1\":{\"810\":1}}],[\"目录下去添加一个子配置文件\",{\"1\":{\"810\":1}}],[\"目录下\",{\"1\":{\"522\":1,\"782\":1}}],[\"目录下查找相应的文件并返回给用户\",{\"1\":{\"73\":2}}],[\"目录删掉\",{\"1\":{\"219\":1}}],[\"目录加密\",{\"1\":{\"1158\":1}}],[\"目录加\",{\"1\":{\"211\":1}}],[\"由auth\",{\"1\":{\"1158\":1}}],[\"由\",{\"1\":{\"884\":1}}],[\"由接口调用方确定接口规则\",{\"1\":{\"740\":1}}],[\"由1\",{\"1\":{\"697\":1}}],[\"由业务系统集成\",{\"1\":{\"606\":1}}],[\"由于某些通信协议或数据传输的限制\",{\"1\":{\"1081\":1}}],[\"由于web遵循unix命名\",{\"1\":{\"1037\":1}}],[\"由于mybatis\",{\"1\":{\"1012\":1}}],[\"由于mysql的引擎用myisam不支持事务\",{\"1\":{\"182\":1}}],[\"由于第一次接触macos\",{\"1\":{\"995\":1}}],[\"由于聚簇索引是将索引和数据放在一起的\",{\"1\":{\"978\":1}}],[\"由于索引需要额外的维护成本\",{\"1\":{\"975\":1}}],[\"由于合并比较耗时\",{\"1\":{\"947\":1}}],[\"由于两个线程都在等待对方所持有的资源\",{\"1\":{\"933\":1}}],[\"由于历史原因\",{\"1\":{\"925\":1}}],[\"由于覆盖索引可以减少树的搜索次数\",{\"1\":{\"922\":1}}],[\"由于查询结果所需要的数据只在主键索引上有\",{\"1\":{\"921\":1}}],[\"由于每个非主键索引的叶子节点上都是主键的值\",{\"1\":{\"918\":1}}],[\"由于树是存储在磁盘中的\",{\"1\":{\"916\":1}}],[\"由于这里maven\",{\"1\":{\"1013\":1}}],[\"由于这里需要本地开虚拟机操作\",{\"1\":{\"93\":1}}],[\"由于这些事务随时可能访问数据库里面的任何数据\",{\"1\":{\"906\":1}}],[\"由于这个语句的\",{\"1\":{\"901\":1}}],[\"由于我们前面说过的\",{\"1\":{\"901\":1}}],[\"由于userdto类有属性是long的\",{\"1\":{\"876\":1}}],[\"由于云服务器网络\",{\"1\":{\"797\":1,\"983\":1}}],[\"由于在接口的抽象方法中\",{\"1\":{\"754\":1}}],[\"由于静态方法的加载先于类的实例化\",{\"1\":{\"717\":1}}],[\"由于泛型具有擦除机制\",{\"1\":{\"717\":1}}],[\"由于泛型擦除的问题\",{\"1\":{\"715\":1}}],[\"由于安全和隐私的考虑\",{\"1\":{\"706\":1}}],[\"由于它不知道链表头指针已经被线程a更新了\",{\"1\":{\"694\":1}}],[\"由于有token值\",{\"1\":{\"627\":1}}],[\"由于使用的实体类是user\",{\"1\":{\"624\":1}}],[\"由于没有其他索引\",{\"1\":{\"918\":1}}],[\"由于没有执行这些操作的权限\",{\"1\":{\"709\":1}}],[\"由于没有释放锁\",{\"1\":{\"379\":1}}],[\"由于没学mq略\",{\"1\":{\"594\":1}}],[\"由于没学\",{\"1\":{\"594\":1}}],[\"由于默认的懒加载特性\",{\"1\":{\"576\":1}}],[\"由于spring5重大升级\",{\"1\":{\"471\":1}}],[\"由于求职形势逼迫\",{\"1\":{\"466\":1}}],[\"由于方法\",{\"1\":{\"321\":1}}],[\"由于cas操作只检查当前值与预期值是否相等\",{\"1\":{\"309\":1}}],[\"由于cas操作只关注stock的当前值\",{\"1\":{\"309\":1}}],[\"由于cas是一种系统原语\",{\"1\":{\"303\":1}}],[\"由于java方法无法直接访问底层系统\",{\"1\":{\"304\":1}}],[\"由于jvm运行程序的实体是线程\",{\"1\":{\"287\":1}}],[\"由于instance实例未必已初始化完成\",{\"1\":{\"301\":1}}],[\"由于编译器和处理器都能执行指令重排的优化\",{\"1\":{\"296\":1}}],[\"由于编译器优化重排的存在\",{\"1\":{\"292\":1,\"295\":1}}],[\"由于调度算法有些线程执行着执行着会被挂起\",{\"1\":{\"290\":1}}],[\"由于网络问题或者tm宕机都有可能会造成数据不一致的情况\",{\"1\":{\"609\":1}}],[\"由于网络问题\",{\"1\":{\"164\":1}}],[\"由于线程是被重用的\",{\"1\":{\"157\":1}}],[\"由于\",{\"1\":{\"156\":1,\"520\":1,\"591\":1,\"632\":1,\"901\":2,\"916\":1,\"919\":1,\"928\":1,\"959\":1}}],[\"由于是lettuce的bug造成\",{\"1\":{\"107\":1}}],[\"由于是结合\",{\"1\":{\"92\":1}}],[\"由此引出分布式锁\",{\"1\":{\"79\":1}}],[\"由这台服务器再请求到美国等其它被墙地区的服务器\",{\"1\":{\"72\":1,\"809\":1}}],[\"由来\",{\"1\":{\"58\":1}}],[\"zip\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"zipkin\",{\"1\":{\"594\":1}}],[\"zipkin<\",{\"1\":{\"594\":1}}],[\"zipkin展现\",{\"1\":{\"594\":1}}],[\"zdharma\",{\"1\":{\"1005\":1}}],[\"zc\",{\"1\":{\"1001\":1}}],[\"zcount\",{\"1\":{\"850\":1}}],[\"zs\",{\"1\":{\"1001\":3}}],[\"zset\",{\"1\":{\"868\":1,\"869\":1}}],[\"zsh=\",{\"1\":{\"1005\":1}}],[\"zshrc\",{\"1\":{\"1005\":3}}],[\"zsh\",{\"1\":{\"787\":1,\"1005\":25}}],[\"zadd\",{\"1\":{\"850\":1}}],[\"zother\",{\"0\":{\"1181\":1}}],[\"zoneid\",{\"1\":{\"1081\":1}}],[\"zone=public\",{\"1\":{\"804\":2}}],[\"zookeeper最高\",{\"1\":{\"868\":1}}],[\"zookeeper可以用\",{\"1\":{\"570\":1}}],[\"zookeeper\",{\"1\":{\"78\":1,\"186\":1,\"568\":1,\"570\":1,\"572\":1,\"589\":1,\"594\":1}}],[\"zxvf\",{\"1\":{\"800\":1}}],[\"zerotier\",{\"1\":{\"1003\":1}}],[\"zero\",{\"0\":{\"742\":1}}],[\"zuul1\",{\"1\":{\"590\":1}}],[\"zuul\",{\"1\":{\"589\":1,\"590\":1,\"594\":1}}],[\"z\",{\"0\":{\"1066\":1},\"1\":{\"554\":1,\"721\":1,\"1037\":1}}],[\"z3\",{\"1\":{\"310\":5}}],[\"zzq8\",{\"1\":{\"267\":1,\"268\":1,\"282\":1,\"799\":2,\"985\":2}}],[\"zzqhandsome\",{\"1\":{\"76\":1}}],[\"zzq\",{\"1\":{\"71\":1,\"151\":1,\"156\":1,\"229\":1,\"240\":1,\"243\":1,\"352\":1,\"377\":1,\"523\":1,\"534\":2,\"576\":1,\"810\":1}}],[\"zhuanlan\",{\"1\":{\"388\":1,\"1157\":1}}],[\"zhihu\",{\"1\":{\"383\":1,\"388\":1,\"998\":1,\"1157\":1}}],[\"zhexi\",{\"1\":{\"197\":1}}],[\"zh\",{\"1\":{\"47\":3,\"48\":1,\"243\":1,\"594\":1,\"1161\":1}}],[\"$|$\",{\"1\":{\"1005\":1}}],[\"$pnpm\",{\"1\":{\"1005\":1}}],[\"$path\",{\"1\":{\"1005\":2}}],[\"$pic\",{\"1\":{\"1005\":2}}],[\"$pid\",{\"1\":{\"1005\":1}}],[\"$bun\",{\"1\":{\"1005\":1}}],[\"$zsh\",{\"1\":{\"1005\":1}}],[\"$1\",{\"0\":{\"1047\":1},\"1\":{\"1005\":7,\"1019\":2}}],[\"$1$1\",{\"1\":{\"132\":1}}],[\"$user\",{\"1\":{\"1005\":1}}],[\"$cnt\",{\"1\":{\"1005\":2}}],[\"$file\",{\"1\":{\"1005\":2}}],[\"$n\",{\"1\":{\"1019\":1}}],[\"$now\",{\"1\":{\"1005\":2}}],[\"$nacos\",{\"1\":{\"594\":1}}],[\"$jre\",{\"1\":{\"800\":2}}],[\"$应将其替换为\",{\"1\":{\"591\":1}}],[\"$是先拼接后编译\",{\"1\":{\"411\":1}}],[\"$home\",{\"1\":{\"782\":1,\"1005\":3}}],[\"$host\",{\"1\":{\"71\":1,\"72\":1,\"810\":1}}],[\"$http\",{\"1\":{\"233\":4}}],[\"$emit\",{\"1\":{\"226\":2}}],[\"$2a$10$c\",{\"1\":{\"133\":2}}],[\"$2a$10$vu\",{\"1\":{\"133\":2}}],[\"$\",{\"0\":{\"411\":1},\"1\":{\"128\":9,\"216\":1,\"229\":1,\"400\":4,\"411\":5,\"462\":4,\"505\":1,\"522\":10,\"539\":1,\"591\":3,\"593\":1,\"597\":6,\"782\":1,\"889\":1,\"987\":5,\"994\":4,\"1003\":1,\"1005\":14,\"1016\":2,\"1161\":3}}],[\"$refs\",{\"1\":{\"234\":2}}],[\"$request\",{\"1\":{\"71\":1,\"174\":1}}],[\"$remote\",{\"1\":{\"71\":2,\"810\":2}}],[\"其余\",{\"1\":{\"1092\":1}}],[\"其余情况一律关闭\",{\"1\":{\"261\":1}}],[\"其底层的实现也可能不同\",{\"1\":{\"916\":1}}],[\"其原因是\",{\"1\":{\"916\":1}}],[\"其基本思想是在数据库中维护多个版本的数据\",{\"1\":{\"906\":1}}],[\"其架构模式是插件式的\",{\"1\":{\"892\":1}}],[\"其具体实现有几种\",{\"1\":{\"740\":1}}],[\"其次\",{\"1\":{\"697\":1,\"908\":1,\"1142\":1}}],[\"其次解析配置类\",{\"1\":{\"517\":1}}],[\"其运算过程是相同的\",{\"1\":{\"648\":1}}],[\"其\",{\"1\":{\"556\":1}}],[\"其本身并不具备拦截请求的能力\",{\"1\":{\"534\":1}}],[\"其语义分别是\",{\"1\":{\"383\":1}}],[\"其内部方法操作可以像c的指针一样直接操作内存\",{\"1\":{\"304\":1}}],[\"其简要访问过程如下图\",{\"1\":{\"287\":1}}],[\"其中1个字节用于存储长度信息\",{\"1\":{\"963\":1}}],[\"其中100\",{\"0\":{\"643\":1}}],[\"其中常用的有\",{\"1\":{\"961\":1}}],[\"其中一个module引入了mybatis\",{\"1\":{\"1012\":1}}],[\"其中一个要等另一个执行完才能开始执行\",{\"1\":{\"928\":1}}],[\"其中一行的值为\",{\"1\":{\"905\":1}}],[\"其中的\",{\"1\":{\"893\":1}}],[\"其中元素\",{\"1\":{\"694\":1}}],[\"其中包含可以从流中读取的字节\",{\"1\":{\"688\":1}}],[\"其中包括减少和增加操作\",{\"1\":{\"309\":1}}],[\"其中需要初始化的是静态变量和静态块\",{\"1\":{\"658\":1}}],[\"其中有些补贴是一次性的\",{\"1\":{\"1108\":1}}],[\"其中有如下两种情况\",{\"1\":{\"630\":1}}],[\"其中有一个测试主方法main以及一个test\",{\"1\":{\"388\":1}}],[\"其中有一个是班长\",{\"1\":{\"333\":1}}],[\"其中有一个共享的原子变量stock表示某个商品的库存数量\",{\"1\":{\"309\":1}}],[\"其中有一个不同都会产生跨域\",{\"1\":{\"230\":1}}],[\"其中我们只看test\",{\"1\":{\"388\":1}}],[\"其中参数x是即将更新的值\",{\"1\":{\"306\":1}}],[\"其中\",{\"1\":{\"229\":1,\"388\":1,\"697\":1,\"786\":1,\"792\":1,\"802\":1,\"905\":1,\"923\":1,\"933\":1,\"959\":1}}],[\"其中userid为主键\",{\"1\":{\"165\":1}}],[\"其由包含在斜杠之间的模式组成\",{\"1\":{\"216\":1}}],[\"其他想说的\",{\"0\":{\"1149\":1},\"1\":{\"1137\":1}}],[\"其他福利有通勤班车\",{\"1\":{\"1108\":1}}],[\"其他福利\",{\"1\":{\"1108\":1}}],[\"其他效果都是一样的\",{\"1\":{\"1036\":1}}],[\"其他模块可以依赖于该模块来获取mybatis\",{\"1\":{\"1012\":1}}],[\"其他模板引擎还没自动支持\",{\"1\":{\"539\":1}}],[\"其他情况\",{\"1\":{\"977\":1}}],[\"其他事务的更新对它不可见\",{\"1\":{\"935\":1}}],[\"其他客户端则需要等待或执行其他逻辑\",{\"1\":{\"849\":1}}],[\"其他业务调用失败\",{\"1\":{\"844\":1}}],[\"其他业务情况\",{\"1\":{\"164\":1}}],[\"其他文件类型都访问不到吗\",{\"1\":{\"706\":1}}],[\"其他像图片\",{\"1\":{\"688\":1}}],[\"其他所有都是所谓的引用类型\",{\"1\":{\"635\":1}}],[\"其他接口都是走的\",{\"1\":{\"627\":1}}],[\"其他接口携带此\",{\"1\":{\"627\":1}}],[\"其他接口\",{\"1\":{\"627\":1}}],[\"其他接口全到这个过滤器来\",{\"1\":{\"627\":1}}],[\"其他配置\",{\"1\":{\"625\":1}}],[\"其他的就不用看了\",{\"1\":{\"1157\":1}}],[\"其他的服务器也能看到这把锁\",{\"1\":{\"868\":1}}],[\"其他的话就是隶属对象\",{\"1\":{\"761\":1}}],[\"其他的exception类及其子类都属于可查异常\",{\"1\":{\"705\":1}}],[\"其他的java类和测试就不贴了\",{\"1\":{\"465\":1}}],[\"其他的诸如\",{\"1\":{\"378\":1}}],[\"其他属性不写也自动封装上了\",{\"1\":{\"423\":1}}],[\"其他列可以不指定\",{\"1\":{\"419\":1}}],[\"其他重要的点\",{\"0\":{\"245\":1}}],[\"其他用户是其他线程\",{\"1\":{\"156\":1}}],[\"其他系统都去\",{\"1\":{\"153\":1}}],[\"其他线程丢失\",{\"1\":{\"682\":1}}],[\"其他线程是无法再次获得锁的\",{\"1\":{\"329\":1}}],[\"其他线程可以获取到锁\",{\"1\":{\"113\":1}}],[\"其他线程不能update\",{\"0\":{\"82\":1}}],[\"其它使用了list地方的代码根本不需要改动\",{\"1\":{\"1074\":1}}],[\"其它bat做不成\",{\"1\":{\"1041\":1}}],[\"其它包装类型也一样\",{\"1\":{\"647\":1}}],[\"其它小事务rm看成feign调用的\",{\"1\":{\"606\":1}}],[\"其它普通的可以通过\",{\"1\":{\"584\":1}}],[\"其它节点都是同步好的数据8\",{\"1\":{\"571\":1}}],[\"其它模块都来用这个配置类\",{\"1\":{\"509\":1}}],[\"其它线程调用countdown方法会将计数器减1\",{\"1\":{\"332\":1}}],[\"其它有了快\",{\"1\":{\"199\":1}}],[\"其它全是配参数\",{\"1\":{\"191\":1}}],[\"其它两个线程\",{\"1\":{\"161\":1,\"290\":1}}],[\"其它两个好解决\",{\"1\":{\"108\":1,\"867\":1}}],[\"其它客户端\",{\"1\":{\"153\":1}}],[\"其它高版本或许没有这个问题\",{\"1\":{\"107\":1}}],[\"其它通过上述解决\",{\"1\":{\"105\":1}}],[\"其它配置\",{\"1\":{\"71\":1}}],[\"其实很早就想写了但一直没付出行动\",{\"1\":{\"1160\":1}}],[\"其实很容易就学会了\",{\"1\":{\"1150\":1}}],[\"其实很多时候业务开发同学并不是有意使用长事务\",{\"1\":{\"907\":1}}],[\"其实很多动态代理场景\",{\"1\":{\"640\":1}}],[\"其实真正掌握到的并不多\",{\"1\":{\"1143\":1}}],[\"其实真正想要回答好这个问题\",{\"1\":{\"722\":1}}],[\"其实我想说的是\",{\"1\":{\"1141\":1}}],[\"其实我们的微服务只需保留一个\",{\"1\":{\"598\":1}}],[\"其实内存地址也是由1个2进制数字来表示的\",{\"1\":{\"1091\":1}}],[\"其实按照我们很多人收入\",{\"1\":{\"1076\":1}}],[\"其实类似\",{\"0\":{\"1036\":1}}],[\"其实并不太礼貌\",{\"1\":{\"1005\":1}}],[\"其实用\",{\"1\":{\"996\":1}}],[\"其实它有个用户叫actions仓库叫checkout\",{\"1\":{\"994\":1}}],[\"其实下班后的时间都是垃圾时间\",{\"1\":{\"980\":1}}],[\"其实有更简单的\",{\"1\":{\"952\":1}}],[\"其实有了第三题的基础\",{\"1\":{\"723\":1}}],[\"其实可能有多个版本\",{\"1\":{\"935\":1}}],[\"其实是很耗时的\",{\"1\":{\"1144\":1}}],[\"其实是两个\",{\"1\":{\"993\":1}}],[\"其实是有一个方法能够拿到一致性视图的\",{\"1\":{\"927\":1}}],[\"其实是需要经过操作系统\",{\"1\":{\"709\":1}}],[\"其实不是的\",{\"1\":{\"901\":1}}],[\"其实就相当于告诉主管你要离职了\",{\"1\":{\"1119\":1}}],[\"其实就有两块\",{\"1\":{\"900\":1}}],[\"其实就是区分\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"其实就是\",{\"1\":{\"899\":1}}],[\"其实就是第一种对应上面第一个点对点其它四种对应发布订阅\",{\"1\":{\"818\":1}}],[\"其实就是导入相关适配包\",{\"1\":{\"451\":1}}],[\"其实这些可以直接用注解配放config包\",{\"1\":{\"829\":1}}],[\"其实这块和上面的\",{\"1\":{\"658\":1}}],[\"其实堆里已经创建了两个字符串对象stringobject1和stringobject2\",{\"1\":{\"723\":1}}],[\"其实在\",{\"1\":{\"722\":1}}],[\"其实stringbuilder也对null的字符串进行了特殊处理\",{\"1\":{\"720\":1}}],[\"其实session是依据cookie来识别是否是同一个用户\",{\"1\":{\"50\":1}}],[\"其实像大屏那样处理就行\",{\"1\":{\"706\":1}}],[\"其实至少三个线程\",{\"0\":{\"701\":1}}],[\"其实本质还是entry\",{\"1\":{\"688\":1}}],[\"其实本质是\",{\"1\":{\"49\":1}}],[\"其实以上这些都是小儿科\",{\"1\":{\"598\":1}}],[\"其实正常情况下都不会发生网络分区\",{\"1\":{\"572\":1}}],[\"其实正确答案是开发人员做好设计\",{\"1\":{\"543\":1}}],[\"其实还是很好理解的\",{\"1\":{\"552\":1}}],[\"其实一样的\",{\"1\":{\"546\":1}}],[\"其实lombok有个\",{\"1\":{\"488\":1}}],[\"其实现在更多的用redis或者其它的做缓存\",{\"1\":{\"441\":1}}],[\"其实wait\",{\"1\":{\"352\":1}}],[\"其实里面还是包含了很多信息的\",{\"1\":{\"328\":1}}],[\"其实\",{\"0\":{\"784\":1},\"1\":{\"210\":1,\"543\":1,\"845\":1,\"868\":1,\"916\":1,\"961\":1}}],[\"其实原因很简单\",{\"1\":{\"179\":1}}],[\"其实想看一下自己new\",{\"1\":{\"161\":1}}],[\"其实你登没登录\",{\"1\":{\"156\":1}}],[\"其实浏览器f12也可以看到一个响应时间也可做一部分依据\",{\"1\":{\"102\":1}}],[\"其实uuid也行\",{\"1\":{\"65\":1}}],[\"排行榜应用实现\",{\"1\":{\"869\":1}}],[\"排队一个个检查\",{\"1\":{\"849\":1}}],[\"排查过程\",{\"1\":{\"977\":1}}],[\"排查\",{\"0\":{\"392\":1}}],[\"排查了好久\",{\"1\":{\"71\":1}}],[\"排它锁\",{\"1\":{\"328\":1}}],[\"排序算法是排序\",{\"1\":{\"1085\":1}}],[\"排序字段\",{\"0\":{\"946\":1}}],[\"排序后\",{\"1\":{\"765\":1}}],[\"排序前\",{\"1\":{\"765\":1}}],[\"排序\",{\"1\":{\"411\":1,\"925\":6}}],[\"排序必须是一个大于等于0的整数\",{\"1\":{\"237\":1}}],[\"排序或分页\",{\"1\":{\"156\":1}}],[\"排了2个多小时\",{\"1\":{\"192\":1}}],[\"排除某个站点\",{\"1\":{\"62\":1}}],[\"三指捏合实现复制粘贴图片\",{\"1\":{\"1163\":1}}],[\"三端都有使用\",{\"1\":{\"1162\":1}}],[\"三年\",{\"1\":{\"1110\":1}}],[\"三天\",{\"1\":{\"995\":1}}],[\"三张\",{\"1\":{\"961\":1}}],[\"三组件概念\",{\"1\":{\"606\":1}}],[\"三步\",{\"1\":{\"594\":1,\"686\":1}}],[\"三套\",{\"1\":{\"591\":1}}],[\"三刷总算想起做点笔记\",{\"1\":{\"466\":1}}],[\"三种不同的实现效率都不是很高\",{\"1\":{\"970\":1}}],[\"三种问题场景笔记\",{\"1\":{\"876\":1}}],[\"三种\",{\"1\":{\"383\":1}}],[\"三种情况导致锁失效\",{\"0\":{\"80\":1}}],[\"三\",{\"0\":{\"371\":1,\"753\":1,\"1142\":1,\"1159\":1},\"1\":{\"375\":1,\"619\":1,\"630\":1,\"660\":1,\"980\":1}}],[\"三个板块\",{\"0\":{\"991\":1}}],[\"三个\",{\"1\":{\"883\":1}}],[\"三个参数会自动注入\",{\"1\":{\"830\":1}}],[\"三个角色\",{\"1\":{\"606\":1}}],[\"三个线程同时通过getfield命令\",{\"1\":{\"290\":1}}],[\"三个词的缩写\",{\"1\":{\"183\":1,\"186\":1}}],[\"三大核心概念\",{\"1\":{\"590\":1}}],[\"三大特性\",{\"1\":{\"284\":1}}],[\"三大作用\",{\"0\":{\"812\":1},\"1\":{\"71\":1}}],[\"三级缓存\",{\"1\":{\"543\":1}}],[\"三级菜单最后没有\",{\"1\":{\"247\":1}}],[\"三级菜单\",{\"0\":{\"234\":1}}],[\"三级分类\",{\"1\":{\"102\":2,\"107\":1,\"229\":1}}],[\"三级分类数据获取\",{\"1\":{\"102\":1}}],[\"三段\",{\"1\":{\"70\":1}}],[\"真的当你有多件苹果设备后苹果生态带来的科技感便利感还是非常不错的\",{\"1\":{\"1164\":1}}],[\"真的会让我有一种很方便的感觉\",{\"1\":{\"1160\":1}}],[\"真的好用\",{\"0\":{\"1047\":1}}],[\"真的可以挖掘github这个宝藏库\",{\"1\":{\"985\":1}}],[\"真实工作中根本不会这么用\",{\"1\":{\"833\":1}}],[\"真实角色\",{\"1\":{\"688\":1}}],[\"真实情况\",{\"1\":{\"599\":1}}],[\"真实请求就没有发了\",{\"1\":{\"230\":1}}],[\"真细致\",{\"1\":{\"183\":1}}],[\"真正让我成功的是这篇文章\",{\"1\":{\"1157\":1}}],[\"真正优秀的人不是埋头苦读不问世事\",{\"1\":{\"1151\":1}}],[\"真正的热部署只部署改动的\",{\"1\":{\"558\":1}}],[\"真正理解了\",{\"1\":{\"321\":1}}],[\"真正处理业务的就\",{\"1\":{\"92\":1}}],[\"真正jwt没换啊\",{\"1\":{\"69\":1}}],[\"真当kpi项目搞啊\",{\"1\":{\"70\":1}}],[\"复合索引\",{\"1\":{\"959\":1}}],[\"复合索引和组合索引是同一个概念\",{\"1\":{\"959\":1}}],[\"复合索引时\",{\"1\":{\"923\":1}}],[\"复习gulimall的本地事务对照着笔记来学习\",{\"1\":{\"605\":1}}],[\"复现\",{\"0\":{\"290\":1}}],[\"复杂的流程调用\",{\"1\":{\"158\":1}}],[\"复杂一点本地缓存自动刷新\",{\"1\":{\"70\":1}}],[\"复制到浏览器中访问\",{\"1\":{\"1041\":1}}],[\"复制bean的属性\",{\"1\":{\"876\":1}}],[\"复制原理\",{\"0\":{\"862\":1}}],[\"复制代码到test包下跟着敲\",{\"1\":{\"740\":1}}],[\"复制算法解决了内存碎片化问题\",{\"1\":{\"385\":1}}],[\"复制算法\",{\"1\":{\"385\":1}}],[\"复制算法用于年轻代\",{\"1\":{\"385\":1}}],[\"复制一个\",{\"1\":{\"61\":1}}],[\"复制\",{\"1\":{\"60\":1}}],[\"简书\",{\"1\":{\"1145\":1}}],[\"简明扼要\",{\"1\":{\"1125\":1}}],[\"简历注意事项\",{\"0\":{\"1124\":1}}],[\"简洁直观\",{\"1\":{\"779\":1}}],[\"简介\",{\"0\":{\"441\":1,\"827\":1},\"1\":{\"594\":1}}],[\"简写\",{\"1\":{\"220\":2}}],[\"简化了开发过程\",{\"1\":{\"883\":1}}],[\"简化构建配置\",{\"1\":{\"473\":1}}],[\"简化\",{\"1\":{\"216\":1,\"762\":1}}],[\"简化变量的传递逻辑\",{\"1\":{\"157\":1}}],[\"简而言之\",{\"1\":{\"156\":1,\"482\":1,\"846\":1,\"1012\":1,\"1150\":1}}],[\"简称jmm\",{\"1\":{\"284\":1}}],[\"简称\",{\"1\":{\"153\":1,\"465\":1,\"594\":1}}],[\"简称xhr\",{\"1\":{\"49\":1}}],[\"简单几步配置即可\",{\"1\":{\"1005\":1}}],[\"简单删除就行\",{\"1\":{\"887\":1}}],[\"简单动态字符串\",{\"1\":{\"849\":1}}],[\"简单介绍一下\",{\"0\":{\"726\":1}}],[\"简单分析一下这个过程\",{\"1\":{\"724\":1}}],[\"简单的说\",{\"1\":{\"1099\":1}}],[\"简单的\",{\"1\":{\"706\":1}}],[\"简单的md5\",{\"1\":{\"132\":1}}],[\"简单\",{\"1\":{\"685\":1}}],[\"简单区分就是语言类型信息是在运行时检查\",{\"1\":{\"637\":1}}],[\"简单说一下吧\",{\"1\":{\"713\":1}}],[\"简单说一下自己的看法\",{\"1\":{\"713\":1}}],[\"简单说\",{\"1\":{\"635\":1,\"901\":1}}],[\"简单理解作用就是登录过的用户可以访问我们的业务接口\",{\"1\":{\"627\":1}}],[\"简单总结一下\",{\"1\":{\"609\":1,\"713\":1}}],[\"简单使用\",{\"0\":{\"419\":1}}],[\"简单点\",{\"1\":{\"352\":1,\"951\":1}}],[\"简单请求\",{\"1\":{\"230\":1}}],[\"简单来说就是自动去把第三方组件的bean装载到ioc容器中\",{\"1\":{\"731\":1}}],[\"简单来说\",{\"1\":{\"186\":1,\"708\":1,\"722\":1,\"737\":1,\"904\":1}}],[\"简单来说有两点\",{\"1\":{\"157\":1}}],[\"简单配置\",{\"0\":{\"147\":1}}],[\"简单服务\",{\"1\":{\"102\":1}}],[\"简单一点\",{\"1\":{\"70\":1}}],[\"基础都包括什么呢\",{\"1\":{\"1150\":1}}],[\"基础呢\",{\"1\":{\"1150\":1}}],[\"基础\",{\"1\":{\"1150\":1}}],[\"基础算法\",{\"1\":{\"1085\":1}}],[\"基础类型\",{\"0\":{\"685\":1}}],[\"基础入门\",{\"1\":{\"499\":1}}],[\"基本都是帮倒忙的\",{\"1\":{\"1006\":1}}],[\"基本都需要根据商品id\",{\"1\":{\"155\":1}}],[\"基本不太可能被复用\",{\"1\":{\"970\":1}}],[\"基本思路就是\",{\"1\":{\"932\":1}}],[\"基本数据类型\",{\"1\":{\"688\":1}}],[\"基本数据类型和string默认是可序列化的\",{\"1\":{\"688\":1}}],[\"基本数据类型可以吗\",{\"1\":{\"688\":1}}],[\"基本数据类型都有默认值\",{\"1\":{\"686\":1}}],[\"基本数据类型不能拥有面向对象的好处\",{\"1\":{\"686\":1}}],[\"基本数据类型考虑到重复的问题\",{\"1\":{\"417\":1}}],[\"基本类型和\",{\"1\":{\"725\":2}}],[\"基本类型或者字符串类型\",{\"1\":{\"725\":1}}],[\"基本类型包装类byte\",{\"1\":{\"671\":1}}],[\"基本类型byte\",{\"1\":{\"671\":1}}],[\"基本类型\",{\"1\":{\"671\":1}}],[\"基本类型变量\",{\"1\":{\"217\":1}}],[\"基本调用工具类就可以了\",{\"1\":{\"621\":1}}],[\"基本可用绝不等价于系统不可用\",{\"1\":{\"572\":1}}],[\"基本可用是指分布式系统在出现故障的时候\",{\"1\":{\"572\":1}}],[\"基本可用\",{\"1\":{\"572\":1}}],[\"基本没有什么算法\",{\"1\":{\"552\":1}}],[\"基本看例子理解了就行\",{\"1\":{\"330\":1}}],[\"基本概念\",{\"0\":{\"265\":1}}],[\"基本属性\",{\"1\":{\"244\":1,\"252\":1}}],[\"基本上都存在过期问题\",{\"1\":{\"70\":1}}],[\"基于google的v8引擎\",{\"1\":{\"1099\":1}}],[\"基于本地的fetch\",{\"1\":{\"990\":1}}],[\"基于时间\",{\"1\":{\"961\":1}}],[\"基于位置\",{\"1\":{\"961\":1}}],[\"基于范围\",{\"1\":{\"961\":1}}],[\"基于哈希\",{\"1\":{\"961\":1}}],[\"基于非主键索引的查询需要多扫描一棵索引树\",{\"1\":{\"917\":1}}],[\"基于主键索引和普通索引的查询有什么区别\",{\"1\":{\"917\":1}}],[\"基于springboot\",{\"1\":{\"877\":1}}],[\"基于缓存\",{\"1\":{\"868\":1}}],[\"基于缓存的实现\",{\"1\":{\"79\":1}}],[\"基于数据库实现分布式锁\",{\"1\":{\"868\":1}}],[\"基于数据库的实现\",{\"1\":{\"79\":1}}],[\"基于⼏种基础的数据结构\",{\"1\":{\"849\":1}}],[\"基于内存\",{\"1\":{\"849\":1}}],[\"基于这种情况\",{\"1\":{\"760\":1}}],[\"基于通道的\",{\"1\":{\"712\":1}}],[\"基于上面对最左前缀索引的说明\",{\"1\":{\"923\":1}}],[\"基于上面覆盖索引的说明\",{\"1\":{\"922\":1}}],[\"基于上面的补充\",{\"1\":{\"959\":1}}],[\"基于上面的分析\",{\"1\":{\"928\":1}}],[\"基于上面的索引维护过程说明\",{\"1\":{\"918\":1}}],[\"基于上面的说明\",{\"1\":{\"906\":1}}],[\"基于上面发现问题\",{\"1\":{\"431\":1}}],[\"基于上一步\",{\"1\":{\"688\":1}}],[\"基于asm\",{\"1\":{\"638\":1}}],[\"基于角色的权限控制\",{\"1\":{\"630\":1}}],[\"基于微服务进行隔离\",{\"1\":{\"598\":1}}],[\"基于环境进行隔离\",{\"1\":{\"598\":1}}],[\"基于高可用分布式集群技术\",{\"1\":{\"594\":1}}],[\"基于字节码操作\",{\"1\":{\"494\":1}}],[\"基于代理\",{\"1\":{\"494\":1}}],[\"基于namespace级别的缓存\",{\"1\":{\"445\":1}}],[\"基于where不能去掉后面多出来的and或者or的问题\",{\"1\":{\"432\":1}}],[\"基于该类可以直接操作特定的内存数据\",{\"1\":{\"304\":1}}],[\"基于mit协议\",{\"1\":{\"302\":2,\"378\":1,\"722\":1,\"724\":1,\"739\":1,\"740\":1,\"779\":1}}],[\"基于mysql实现\",{\"1\":{\"87\":1}}],[\"基于\",{\"1\":{\"223\":1,\"261\":1,\"466\":1,\"487\":1,\"519\":1,\"594\":3,\"713\":2,\"736\":1,\"810\":1,\"969\":1}}],[\"基于redis的redisson分布式可重入锁rlock\",{\"1\":{\"115\":1}}],[\"基于redis实现\",{\"1\":{\"87\":1}}],[\"基于zookeeper\",{\"1\":{\"87\":1,\"868\":1}}],[\"基于token的鉴权机制类似于http协议也是无状态的\",{\"1\":{\"54\":1}}],[\"接着访问生成的url即可\",{\"1\":{\"1161\":1}}],[\"接着访问\",{\"1\":{\"1161\":1}}],[\"接着我们使用java\",{\"1\":{\"688\":1}}],[\"接完后继续吃饭\",{\"1\":{\"675\":1}}],[\"接下来是针对准备一毕业就工作的同学的\",{\"1\":{\"1150\":1}}],[\"接下来去参加比赛\",{\"1\":{\"1150\":1}}],[\"接下来要做的是自学\",{\"1\":{\"1150\":1}}],[\"接下来我会结合开头提到的那条\",{\"1\":{\"892\":1}}],[\"接下来收到消息如何处理\",{\"1\":{\"813\":1}}],[\"接下来\",{\"1\":{\"364\":1,\"722\":1,\"724\":1,\"898\":1,\"933\":1,\"1150\":1}}],[\"接受页面传递来的数据\",{\"1\":{\"251\":1}}],[\"接受请求体的\",{\"1\":{\"92\":1}}],[\"接口日志是把其中一个当成死锁的牺牲品解决\",{\"1\":{\"959\":1}}],[\"接口下就两个方法\",{\"1\":{\"877\":1}}],[\"接口有哪些实现类\",{\"1\":{\"872\":1}}],[\"接口在调用方\",{\"1\":{\"740\":1}}],[\"接口在被调用方\",{\"1\":{\"740\":1}}],[\"接口中的抽象方法只有一个\",{\"1\":{\"748\":1}}],[\"接口中的静态方法只能接口来调\",{\"1\":{\"686\":1}}],[\"接口中可以有static\",{\"1\":{\"686\":1}}],[\"接口默认为public\",{\"1\":{\"686\":1}}],[\"接口默认实现\",{\"1\":{\"471\":1}}],[\"接口属性默认\",{\"1\":{\"686\":1}}],[\"接口不能定义构造器\",{\"1\":{\"686\":1}}],[\"接口用于对类的行为进行约束\",{\"1\":{\"686\":1}}],[\"接口成员变量只能\",{\"1\":{\"686\":1}}],[\"接口与其实现类\",{\"0\":{\"659\":1}}],[\"接口与其实现类是一种\",{\"1\":{\"657\":1}}],[\"接口定义一个\",{\"1\":{\"576\":1}}],[\"接口地址\",{\"1\":{\"564\":1}}],[\"接口常用于执行一些初始化任务\",{\"1\":{\"546\":1,\"1166\":1}}],[\"接口是否可以实现default的方法\",{\"1\":{\"686\":1}}],[\"接口是多继承的\",{\"1\":{\"686\":1}}],[\"接口是一种行为规范\",{\"1\":{\"686\":1}}],[\"接口是\",{\"1\":{\"546\":1,\"686\":1,\"1166\":1}}],[\"接口的类\",{\"1\":{\"738\":1}}],[\"接口的default方法作用\",{\"1\":{\"686\":1}}],[\"接口的作用\",{\"1\":{\"546\":1,\"1166\":1}}],[\"接口的作用是允许一个类获取对\",{\"1\":{\"538\":1,\"1082\":1}}],[\"接口的一个实例\",{\"1\":{\"229\":1}}],[\"接口都统一给一个默认实现\",{\"1\":{\"471\":1}}],[\"接口类\",{\"1\":{\"252\":1}}],[\"接口时候方法签名中的形参的\",{\"1\":{\"229\":1}}],[\"接口文档地址\",{\"1\":{\"203\":1}}],[\"接口防刷\",{\"1\":{\"129\":1}}],[\"接口\",{\"1\":{\"126\":1,\"354\":3,\"465\":1,\"538\":2,\"546\":1,\"576\":1,\"657\":1,\"679\":3,\"686\":2,\"688\":2,\"740\":1,\"1082\":2,\"1166\":1}}],[\"接收消息的路由键\",{\"1\":{\"836\":1}}],[\"接收消息的交换机\",{\"1\":{\"836\":1}}],[\"接收端\",{\"1\":{\"688\":1}}],[\"接收的类型\",{\"1\":{\"624\":1}}],[\"接收和效验数据\",{\"1\":{\"252\":1}}],[\"接收一个spel\",{\"1\":{\"123\":1}}],[\"接收方通过发送确认应答来确认已接收到的数据包\",{\"1\":{\"56\":1}}],[\"接2\",{\"1\":{\"70\":1}}],[\"也自己试着二进制装跑bash\",{\"1\":{\"1157\":1}}],[\"也在学习\",{\"1\":{\"1152\":1}}],[\"也挺有名的\",{\"1\":{\"1150\":1}}],[\"也挺好的\",{\"1\":{\"1145\":1}}],[\"也没有必要了\",{\"1\":{\"1150\":1}}],[\"也很好用\",{\"1\":{\"1145\":1}}],[\"也许今天正好有别的事情导致今天的计划没有完成\",{\"1\":{\"1144\":1}}],[\"也许哪一天你需要换成其它的实现类呢\",{\"1\":{\"1074\":1}}],[\"也许只需要\",{\"1\":{\"372\":1}}],[\"也找不到现有的分区\",{\"1\":{\"1027\":1}}],[\"也需要显式引入它们\",{\"1\":{\"1010\":1}}],[\"也需和where的一样遵循最左匹配原则\",{\"1\":{\"923\":1}}],[\"也称为物理地址或行指针\",{\"1\":{\"967\":1}}],[\"也称为堆表\",{\"1\":{\"965\":1}}],[\"也称为复合索引\",{\"1\":{\"959\":1}}],[\"也称为公共表表达式或\",{\"1\":{\"959\":1}}],[\"也称为方法帧或活动记录\",{\"1\":{\"778\":1}}],[\"也只能执行读\",{\"1\":{\"928\":1}}],[\"也只是为了拿\",{\"1\":{\"628\":1}}],[\"也限定了本线程接下来的操作对象\",{\"1\":{\"928\":1}}],[\"也比较简单的数据结构\",{\"1\":{\"913\":1}}],[\"也会追番\",{\"1\":{\"1151\":1}}],[\"也会看剧\",{\"1\":{\"1151\":1}}],[\"也会做相应的笔记\",{\"1\":{\"1144\":1}}],[\"也会有其它数据第二列是空的情况我也需要\",{\"1\":{\"959\":1}}],[\"也会耗费一定空间\",{\"1\":{\"911\":1}}],[\"也会把至少\",{\"1\":{\"903\":1}}],[\"也都是\",{\"1\":{\"905\":1}}],[\"也提供了这种\",{\"1\":{\"894\":1}}],[\"也必须省略return\",{\"1\":{\"757\":1}}],[\"也得指向堆中一个变量\",{\"1\":{\"723\":1}}],[\"也插入一个键值对到链表的头部\",{\"1\":{\"694\":1}}],[\"也要引入commons\",{\"1\":{\"1010\":1}}],[\"也要更新同一行\",{\"1\":{\"930\":1}}],[\"也要以减少资源消耗作为目标\",{\"1\":{\"925\":1}}],[\"也要对hashcode\",{\"1\":{\"691\":1}}],[\"也要在具体事情上一件件地做好\",{\"1\":{\"688\":1}}],[\"也更好体现运行时的动态性\",{\"1\":{\"688\":1}}],[\"也具备了部分动态类型语言的能力\",{\"1\":{\"637\":1}}],[\"也考察了对底层对象生命周期\",{\"1\":{\"637\":1}}],[\"也行\",{\"1\":{\"627\":1,\"1085\":1}}],[\"也有问题\",{\"1\":{\"1026\":1}}],[\"也有可能是每个\",{\"1\":{\"977\":1}}],[\"也有类似的限制\",{\"1\":{\"785\":1}}],[\"也有很多人认为\",{\"1\":{\"712\":1}}],[\"也有很多框架给你去用\",{\"1\":{\"183\":1,\"607\":1}}],[\"也有人利用幻象引用监控对象的创建和销毁\",{\"1\":{\"636\":1}}],[\"也有\",{\"1\":{\"616\":1,\"1081\":1}}],[\"也依赖于\",{\"1\":{\"543\":1}}],[\"也能直接从本地push代码到远程了\",{\"1\":{\"798\":1,\"984\":1}}],[\"也能从注册中心中实时地感知某个服务上线还是下线\",{\"1\":{\"590\":1}}],[\"也能默认拦截所有请求\",{\"1\":{\"534\":1}}],[\"也能够实现一致性\",{\"1\":{\"305\":1}}],[\"也保证了\",{\"1\":{\"382\":1}}],[\"也保证了并发性\",{\"1\":{\"309\":1}}],[\"也无需担心内存可见性问题\",{\"1\":{\"329\":1}}],[\"也知道他的实现原理\",{\"1\":{\"329\":1}}],[\"也知道是什么原因导致的有序性问题\",{\"1\":{\"329\":1}}],[\"也不要因为某一个方向可能不容易找工作而不去学\",{\"1\":{\"1139\":1}}],[\"也不要留下\",{\"1\":{\"1120\":1}}],[\"也不可见\",{\"1\":{\"935\":1}}],[\"也不需要你完全掌握\",{\"1\":{\"1150\":1}}],[\"也不需要\",{\"1\":{\"1005\":1}}],[\"也不需要并发控制\",{\"1\":{\"906\":1}}],[\"也不需要在不同的请求之间进行传输\",{\"1\":{\"156\":1}}],[\"也不影响你的校对结果\",{\"1\":{\"905\":1}}],[\"也不会触发叶子节点的分裂\",{\"1\":{\"918\":1}}],[\"也不会影响已经存在连接的权限\",{\"1\":{\"893\":1}}],[\"也不会出现死锁的问题\",{\"1\":{\"321\":1}}],[\"也不能对已经定义的变量进行赋值操作\",{\"1\":{\"646\":1}}],[\"也不用再搭同zookeeper\",{\"1\":{\"589\":1}}],[\"也不对request不是拿到了吗\",{\"1\":{\"512\":1}}],[\"也支持使用\",{\"1\":{\"182\":1}}],[\"也是讲基础的\",{\"1\":{\"1150\":1}}],[\"也是在线的\",{\"1\":{\"1145\":1}}],[\"也是最重要的一步\",{\"1\":{\"1139\":1}}],[\"也是错的\",{\"1\":{\"1021\":1}}],[\"也是没问题的\",{\"1\":{\"970\":1}}],[\"也是\",{\"1\":{\"935\":1}}],[\"也是往后推移并且循环的\",{\"1\":{\"899\":1}}],[\"也是long类型的\",{\"1\":{\"876\":1}}],[\"也是消息的终点\",{\"1\":{\"823\":1}}],[\"也是官方推荐使用的加锁方式\",{\"1\":{\"674\":1}}],[\"也是因为原子性才加\",{\"1\":{\"644\":1}}],[\"也是按需加载\",{\"1\":{\"427\":1}}],[\"也是一个向交换器发布消息的客户端应用程序\",{\"1\":{\"823\":1}}],[\"也是一个多用户操作系统\",{\"1\":{\"785\":1}}],[\"也是一个\",{\"1\":{\"321\":1}}],[\"也是一种非公平锁\",{\"1\":{\"319\":1}}],[\"也是借助\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"也是通过\",{\"1\":{\"161\":1}}],[\"也是会开启看门狗机制的\",{\"1\":{\"113\":1}}],[\"也可能拖垮整个库\",{\"1\":{\"906\":1}}],[\"也可笨方法new\",{\"1\":{\"876\":1}}],[\"也可区分开发环境\",{\"1\":{\"598\":1}}],[\"也可\",{\"1\":{\"193\":1,\"546\":1}}],[\"也可删掉\",{\"1\":{\"126\":1}}],[\"也可以说是机缘巧合入手的\",{\"1\":{\"1164\":1}}],[\"也可以\",{\"1\":{\"1150\":1}}],[\"也可以提高自己的兴趣\",{\"1\":{\"1150\":1}}],[\"也可以像下面这样\",{\"1\":{\"1085\":1}}],[\"也可以直接把\",{\"1\":{\"1041\":1}}],[\"也可以直观的看到语句执行完后\",{\"1\":{\"725\":1}}],[\"也可以匹配\",{\"1\":{\"1017\":1}}],[\"也可以熟练用起来\",{\"1\":{\"1016\":1}}],[\"也可以做在\",{\"1\":{\"932\":1}}],[\"也可以这么写\",{\"1\":{\"919\":1}}],[\"也可以有多叉\",{\"1\":{\"916\":1}}],[\"也可以先从表\",{\"1\":{\"896\":1}}],[\"也可以自己随便给个index\",{\"1\":{\"795\":1}}],[\"也可以被称为\",{\"1\":{\"712\":1}}],[\"也可以属于输出设备\",{\"1\":{\"709\":1}}],[\"也可以是字符串索引的最左\",{\"1\":{\"923\":1}}],[\"也可以是一周一备\",{\"1\":{\"901\":1}}],[\"也可以是自给随便给<e1\",{\"1\":{\"688\":1}}],[\"也可以是http\",{\"1\":{\"613\":1}}],[\"也可以是循环的\",{\"1\":{\"543\":1}}],[\"也可以比如给不同的model创建它自己的命名空间\",{\"1\":{\"598\":1}}],[\"也可以通过system\",{\"1\":{\"549\":1}}],[\"也可以拦截所有请求\",{\"1\":{\"534\":1}}],[\"也可以导入dependence\",{\"1\":{\"509\":1}}],[\"也可以配合\",{\"1\":{\"488\":1}}],[\"也可以调为公平\",{\"1\":{\"380\":1}}],[\"也可以叫同步点\",{\"1\":{\"337\":1}}],[\"也可以转成指定对象\",{\"1\":{\"139\":1}}],[\"也可以去使用canal订阅binlog的方式\",{\"1\":{\"118\":1}}],[\"也可以在\",{\"1\":{\"1041\":1}}],[\"也可以在客户端断开的时候自动释放\",{\"1\":{\"928\":1}}],[\"也可以在有多个核心的cpu上创建一个线程\",{\"1\":{\"99\":1}}],[\"也可以在请求头中加入connection\",{\"1\":{\"47\":1}}],[\"也可以用\",{\"1\":{\"92\":1}}],[\"也可以使用<trim>标签解决去掉后面多余的逗号\",{\"1\":{\"434\":1}}],[\"也可以使用\",{\"1\":{\"71\":1}}],[\"也就减少了死锁检测的\",{\"1\":{\"932\":1}}],[\"也就会提供参数来控制行为\",{\"1\":{\"908\":1}}],[\"也就需要重新配置\",{\"1\":{\"798\":1,\"984\":1}}],[\"也就\",{\"1\":{\"709\":1}}],[\"也就不存在\",{\"1\":{\"572\":1}}],[\"也就证明了\",{\"1\":{\"388\":1}}],[\"也就没有第三方jar\",{\"1\":{\"124\":1}}],[\"也就是支持并发的线程个数\",{\"1\":{\"1095\":1}}],[\"也就是死锁\",{\"1\":{\"932\":1}}],[\"也就是把整库每个表都\",{\"1\":{\"927\":1}}],[\"也就是索引更紧凑\",{\"1\":{\"919\":1}}],[\"也就是判断上个月的余额和当前余额的差额\",{\"1\":{\"905\":1}}],[\"也就是图里面\",{\"1\":{\"905\":1}}],[\"也就是需要再多搭建一些备库来增加系统的读能力的时候\",{\"1\":{\"901\":1}}],[\"也就是需要参数需要返回值\",{\"1\":{\"229\":1}}],[\"也就是先按\",{\"1\":{\"925\":1}}],[\"也就是先写粉板\",{\"1\":{\"899\":1}}],[\"也就是先执行\",{\"1\":{\"295\":1}}],[\"也就是尽量使用长连接\",{\"1\":{\"893\":1}}],[\"也就是从连接器到执行器的部分\",{\"1\":{\"892\":1}}],[\"也就是不需要\",{\"1\":{\"969\":1}}],[\"也就是不用这个server\",{\"1\":{\"810\":1}}],[\"也就是不会初始化的时候创建出两个对象来\",{\"1\":{\"700\":1}}],[\"也就是要尽量把数据分配均匀\",{\"1\":{\"739\":1}}],[\"也就是变量s1所指向的字符串对象\",{\"1\":{\"724\":1}}],[\"也就是被双引号包围的字符串\",{\"1\":{\"722\":1}}],[\"也就是应用操作之后会直接返回\",{\"1\":{\"713\":1}}],[\"也就是方法重写实现多态问题\",{\"1\":{\"697\":1}}],[\"也就是公共的\",{\"1\":{\"689\":1}}],[\"也就是通常所说的动态编译器\",{\"1\":{\"634\":1}}],[\"也就是让token失效\",{\"1\":{\"628\":1}}],[\"也就是让某个用户的登录状态消失\",{\"1\":{\"628\":1}}],[\"也就是让用户在操作中不下线是第一保障\",{\"1\":{\"70\":1}}],[\"也就是证明是这个用户的token值\",{\"1\":{\"627\":1}}],[\"也就是user对象这个结果封装成能被\",{\"1\":{\"624\":1}}],[\"也就是认证那部分的知识\",{\"1\":{\"620\":1}}],[\"也就是指向服务提供者的东西\",{\"1\":{\"576\":1}}],[\"也就是可独立部署和升级\",{\"1\":{\"554\":1}}],[\"也就是\",{\"1\":{\"362\":1,\"517\":1,\"696\":1,\"713\":1,\"900\":1,\"905\":1,\"1091\":1}}],[\"也就是3个停车位\",{\"1\":{\"342\":1}}],[\"也就是30秒\",{\"1\":{\"113\":1}}],[\"也就是做加法\",{\"1\":{\"337\":1}}],[\"也就是某个线程一直得不到锁\",{\"1\":{\"316\":1}}],[\"也就是队列\",{\"1\":{\"315\":1}}],[\"也就是每次更新的时候\",{\"1\":{\"311\":1}}],[\"也就是修改版本号\",{\"1\":{\"309\":1}}],[\"也就是自旋\",{\"1\":{\"305\":1}}],[\"也就是在执行do\",{\"1\":{\"305\":1}}],[\"也就是在操作库存前先获取当前商品的version版本号\",{\"1\":{\"170\":1}}],[\"也就是当我们执行到重排后的步骤2\",{\"1\":{\"301\":1}}],[\"也就是过在volatile的写\",{\"1\":{\"296\":1}}],[\"也就是压力最小的后端服务器\",{\"1\":{\"208\":1}}],[\"也就是我们呢说的商业零售\",{\"1\":{\"206\":1}}],[\"也就是如果学过\",{\"1\":{\"115\":1}}],[\"也就是说只要cpu知道要访问数据的内存地址\",{\"1\":{\"1090\":1}}],[\"也就是说有xhr就会触发\",{\"1\":{\"1081\":1}}],[\"也就是说你仓库里可能是整个项目\",{\"1\":{\"987\":1}}],[\"也就是说你需要同时维护\",{\"1\":{\"923\":1}}],[\"也就是说超时后会再起一个新\",{\"1\":{\"928\":1}}],[\"也就是说树的高度就等于每次查询数据时磁盘\",{\"1\":{\"916\":1}}],[\"也就是说不允许插队和并行\",{\"1\":{\"854\":1}}],[\"也就是说不要和启动类一个包路径\",{\"1\":{\"575\":1}}],[\"也就是说类中的泛型还没有传递真正的类型参数静态的方法就已经加载完成了\",{\"1\":{\"717\":1}}],[\"也就是说junit不支持手动输入\",{\"1\":{\"689\":1}}],[\"也就是说可以在jvm上运行js\",{\"1\":{\"688\":1}}],[\"也就是说序列化的时候明明给值了比如string我给了值但是在反序列化的时候没值是null\",{\"1\":{\"688\":1}}],[\"也就是说int\",{\"1\":{\"686\":1}}],[\"也就是说将永远无法通过虚引用来获取对象\",{\"1\":{\"660\":1}}],[\"也就是说它可以被嵌入到java应用程序中\",{\"1\":{\"550\":1,\"1166\":1}}],[\"也就是说如果没有指定\",{\"1\":{\"543\":1}}],[\"也就是说我们只需要进入method1后\",{\"1\":{\"322\":1}}],[\"也就是说unsafe类中的方法都直接调用操作系统底层资源执行相应的任务\",{\"1\":{\"304\":1}}],[\"也就是说cas是线程安全的\",{\"1\":{\"303\":1}}],[\"也就是说cas是一条cpu的原子指令\",{\"1\":{\"303\":1}}],[\"也就是说\",{\"1\":{\"296\":1,\"321\":1,\"345\":1,\"688\":1,\"705\":1,\"709\":1,\"721\":1,\"739\":1,\"854\":1,\"892\":1,\"894\":1,\"903\":1,\"906\":1,\"916\":1,\"917\":1,\"918\":1,\"922\":2,\"927\":1,\"931\":2,\"934\":1,\"935\":1,\"962\":1,\"1010\":1}}],[\"也就是说必须要单机部署单例模式\",{\"0\":{\"80\":1}}],[\"也就是说要判断\",{\"1\":{\"76\":1}}],[\"也实现了可重入锁的机制\",{\"1\":{\"86\":1,\"114\":1}}],[\"获得当前指向的远程分支的后续版本的数据\",{\"1\":{\"990\":1}}],[\"获得下标\",{\"1\":{\"681\":1}}],[\"获得新token\",{\"1\":{\"70\":1}}],[\"获取资料的途径和一些工具\",{\"0\":{\"1145\":1}}],[\"获取知识的途径\",{\"1\":{\"1137\":1}}],[\"获取权限\",{\"1\":{\"893\":1}}],[\"获取新的令牌并将其返回给客户端\",{\"1\":{\"890\":1}}],[\"获取注解类不为空即判断\",{\"1\":{\"889\":1}}],[\"获取当前用户的角色和权限信息\",{\"1\":{\"883\":1}}],[\"获取当前文件夹路径\",{\"1\":{\"540\":1}}],[\"获取验证码的时候顺便把uuid也给了前端\",{\"1\":{\"878\":1}}],[\"获取ssh\",{\"1\":{\"797\":1,\"983\":1}}],[\"获取sqlsession对象\",{\"1\":{\"465\":1}}],[\"获取sqlsessionfactory对象\",{\"1\":{\"465\":1}}],[\"获取构造函数\",{\"1\":{\"688\":1}}],[\"获取class对象\",{\"1\":{\"688\":2}}],[\"获取class实例\",{\"1\":{\"688\":2}}],[\"获取code\",{\"1\":{\"138\":1}}],[\"获取类的字节码数据\",{\"1\":{\"679\":1}}],[\"获取类声明的属性和方法\",{\"1\":{\"638\":1}}],[\"获取token\",{\"1\":{\"627\":1}}],[\"获取它上面的\",{\"1\":{\"591\":1}}],[\"获取它的异常错误类\",{\"1\":{\"240\":1}}],[\"获取请求体\",{\"1\":{\"502\":1}}],[\"获取实例化后的\",{\"1\":{\"489\":1}}],[\"获取接口的代理对象\",{\"1\":{\"465\":1}}],[\"获取到的数据包含重复的项\",{\"1\":{\"947\":1}}],[\"获取到字节码文件对象\",{\"1\":{\"688\":1}}],[\"获取到所有需要导入到容器中的配置类\",{\"1\":{\"483\":1}}],[\"获取到所有的interceptor\",{\"1\":{\"465\":1}}],[\"获取到主键值后\",{\"1\":{\"404\":1}}],[\"获取到锁的必须先判断这个数据是否被处理过\",{\"1\":{\"171\":1}}],[\"获取自增主键的值\",{\"0\":{\"404\":1}}],[\"获取返回结果\",{\"1\":{\"357\":1}}],[\"获取值\",{\"1\":{\"312\":1}}],[\"获取值对比\",{\"1\":{\"111\":1}}],[\"获取redis令牌\",{\"1\":{\"167\":1}}],[\"获取父线程的context\",{\"1\":{\"157\":1}}],[\"获取表单信息\",{\"1\":{\"130\":1}}],[\"获取上下文\",{\"1\":{\"124\":1}}],[\"获取指定\",{\"1\":{\"105\":1}}],[\"获取json字符串指定key的value值\",{\"1\":{\"105\":1}}],[\"获取方式\",{\"1\":{\"88\":1}}],[\"获取锁和过期时间之间\",{\"1\":{\"87\":1}}],[\"获取锁时尝试设置一个特定的键值对\",{\"1\":{\"79\":1}}],[\"获取分布式锁来确保在事务期间对共享资源的独占访问\",{\"1\":{\"78\":1}}],[\"获取\",{\"1\":{\"61\":1,\"218\":1,\"357\":1,\"408\":1,\"547\":1,\"549\":1,\"933\":6,\"990\":1}}],[\"去图书馆的话就还得背电脑很重\",{\"1\":{\"1160\":1}}],[\"去实习\",{\"1\":{\"1150\":1}}],[\"去实现的\",{\"1\":{\"86\":1,\"114\":1}}],[\"去改进\",{\"1\":{\"1142\":1}}],[\"去可以\",{\"1\":{\"1110\":1}}],[\"去第一梯队一直待着\",{\"1\":{\"1106\":1}}],[\"去除null值\",{\"1\":{\"959\":1}}],[\"去掉\",{\"1\":{\"1005\":1,\"1006\":1}}],[\"去掉inner\",{\"1\":{\"959\":1}}],[\"去掉整个字符串后面多余的字符\",{\"1\":{\"432\":1}}],[\"去掉整个字符串前面多余的字符\",{\"1\":{\"432\":1}}],[\"去使用这个引擎提供的接口\",{\"1\":{\"897\":1}}],[\"去找配置类\",{\"1\":{\"731\":1}}],[\"去解密校验\",{\"1\":{\"625\":1}}],[\"去中心化\",{\"1\":{\"554\":1}}],[\"去访问资源\",{\"1\":{\"498\":1}}],[\"去mapper\",{\"1\":{\"448\":1}}],[\"去创建\",{\"1\":{\"366\":1}}],[\"去海底捞吃饭\",{\"1\":{\"346\":1}}],[\"去扁平化\",{\"0\":{\"280\":1}}],[\"去公司也是直接封装好的\",{\"1\":{\"246\":1}}],[\"去重工作可交给后台\",{\"1\":{\"947\":1}}],[\"去重\",{\"1\":{\"174\":1,\"963\":1}}],[\"去\",{\"1\":{\"111\":1,\"627\":1}}],[\"去的时候判断是自己的锁\",{\"1\":{\"111\":1}}],[\"去共享锁\",{\"1\":{\"86\":1,\"114\":1}}],[\"去对比判断token有没有过期过期了就调用refreshtoken接口\",{\"1\":{\"70\":1}}],[\"去获取当前的时间\",{\"1\":{\"70\":1}}],[\"还告诉你为什么要这么用\",{\"1\":{\"1150\":1}}],[\"还会有一些个人项目可以参考\",{\"1\":{\"1145\":1}}],[\"还会以restful风格返回响应\",{\"1\":{\"520\":1}}],[\"还未理解透彻\",{\"1\":{\"1021\":1}}],[\"还未被初始化\",{\"1\":{\"302\":1,\"779\":1}}],[\"还请根据业务需求\",{\"1\":{\"923\":1}}],[\"还能帮助我们实现数据恢复\",{\"1\":{\"900\":1}}],[\"还怕没柴烧\",{\"1\":{\"814\":1}}],[\"还留下了调用intern方法的方式\",{\"1\":{\"723\":1}}],[\"还提供了所谓的同步包装器\",{\"1\":{\"641\":1}}],[\"还真未必\",{\"1\":{\"635\":1}}],[\"还带测试controller+html\",{\"1\":{\"614\":1}}],[\"还可以使用\",{\"1\":{\"959\":1}}],[\"还可以定义静态方法和默认方法\",{\"1\":{\"686\":1}}],[\"还可以尽量让同一个机房的微服务互相调用\",{\"1\":{\"598\":1}}],[\"还可以做数据异构\",{\"1\":{\"119\":1}}],[\"还要写到磁盘上\",{\"1\":{\"916\":1}}],[\"还要先经过优化器的处理\",{\"1\":{\"896\":1}}],[\"还要整个项目跑起来\",{\"1\":{\"594\":1}}],[\"还要专门设计一套token体系\",{\"1\":{\"70\":1}}],[\"还支持查看限流降级\",{\"1\":{\"594\":1}}],[\"还包括jar文件中\",{\"1\":{\"454\":1}}],[\"还需手动fetch主干的信息\",{\"1\":{\"990\":1}}],[\"还需要注意的是\",{\"1\":{\"934\":1}}],[\"还需要指定代理模式\",{\"1\":{\"504\":1}}],[\"还需要再向数据库发出查询\",{\"1\":{\"444\":1}}],[\"还需要放在同一个包下\",{\"1\":{\"400\":1}}],[\"还需要考虑关联性\",{\"1\":{\"372\":1}}],[\"还需知道他们两个有什么区别看网站\",{\"1\":{\"227\":1,\"528\":1}}],[\"还降低系统的稳定性\",{\"1\":{\"367\":1}}],[\"还没花时间看\",{\"1\":{\"1081\":1}}],[\"还没做减法之前\",{\"1\":{\"904\":1}}],[\"还没写\",{\"1\":{\"901\":1}}],[\"还没有写完的时候\",{\"1\":{\"901\":1}}],[\"还没有完成初始化\",{\"1\":{\"543\":1}}],[\"还没使用呢\",{\"1\":{\"894\":1}}],[\"还没初始化完成\",{\"1\":{\"301\":1}}],[\"还没提交前的语句看不到数据库的变换\",{\"0\":{\"257\":1}}],[\"还是蛮方便的\",{\"1\":{\"1164\":1}}],[\"还是值得安利的\",{\"1\":{\"1162\":1}}],[\"还是用上面的例子说明\",{\"1\":{\"1090\":1}}],[\"还是用自增字段做主键呢\",{\"1\":{\"918\":1}}],[\"还是牛的\",{\"1\":{\"1041\":1}}],[\"还是建议不要用这种方法的好\",{\"1\":{\"987\":1}}],[\"还是建议用interceptor\",{\"1\":{\"156\":1}}],[\"还是自增\",{\"1\":{\"961\":1}}],[\"还是可以使用\",{\"1\":{\"947\":1}}],[\"还是以影院账户为例\",{\"1\":{\"932\":2}}],[\"还是有的\",{\"1\":{\"918\":1}}],[\"还是上面根据身份证号查名字的例子\",{\"1\":{\"916\":1}}],[\"还是上面这个根据身份证号查名字的例子\",{\"1\":{\"915\":1}}],[\"还是先在粉板上记一下方便\",{\"1\":{\"899\":1}}],[\"还是要看具体的业务场景\",{\"1\":{\"868\":1}}],[\"还是得service用\",{\"1\":{\"829\":1}}],[\"还是需要引入commons\",{\"1\":{\"871\":1}}],[\"还是需要不少配置\",{\"1\":{\"726\":1}}],[\"还是需要用\",{\"1\":{\"726\":1}}],[\"还是创建了几个对象\",{\"0\":{\"725\":1}}],[\"还是阻塞的\",{\"1\":{\"712\":1}}],[\"还是编译期检查\",{\"1\":{\"637\":1}}],[\"还是目前看已经有些过于形式主义的语法呢\",{\"1\":{\"633\":1}}],[\"还是比较快捷的\",{\"1\":{\"492\":1}}],[\"还是重排后\",{\"1\":{\"301\":1}}],[\"还是去这个网站\",{\"1\":{\"267\":1}}],[\"还是会在where后面拼接\",{\"1\":{\"236\":1}}],[\"还是线程数不够运行太慢\",{\"1\":{\"101\":1}}],[\"还是内存经常容易满\",{\"1\":{\"101\":1}}],[\"还是\",{\"0\":{\"1063\":1},\"1\":{\"99\":1,\"905\":1,\"913\":1,\"933\":1}}],[\"还有就是airdrop也很方便\",{\"1\":{\"1164\":1}}],[\"还有墨墨背单词手机端也留着同样值得推荐\",{\"1\":{\"1162\":1}}],[\"还有笔记\",{\"1\":{\"1144\":1}}],[\"还有其他小的制约因素\",{\"1\":{\"1093\":1}}],[\"还有其他的实现方式\",{\"1\":{\"638\":1}}],[\"还有操作系统\",{\"1\":{\"1093\":1}}],[\"还有想要好好努力\",{\"1\":{\"1077\":1}}],[\"还有github中python的批量保存关闭快捷键\",{\"0\":{\"1045\":1}}],[\"还有如下优势\",{\"1\":{\"970\":1}}],[\"还有跨表的连接\",{\"1\":{\"961\":1}}],[\"还有可能是加字段等修改表结构的操作\",{\"1\":{\"927\":1}}],[\"还有jdbc感觉也是spi机制\",{\"1\":{\"740\":1}}],[\"还有些特别的filter\",{\"1\":{\"613\":1}}],[\"还有\",{\"1\":{\"598\":1,\"894\":1,\"935\":1}}],[\"还有自动化配置文档\",{\"1\":{\"466\":1}}],[\"还有新任务进来\",{\"1\":{\"363\":1}}],[\"还有ruoyi前端vue解决\",{\"0\":{\"232\":1}}],[\"还有箭头函数+解构\",{\"1\":{\"216\":1}}],[\"还有3pc\",{\"1\":{\"183\":1,\"607\":1}}],[\"还有下面自己的文中\",{\"1\":{\"157\":1}}],[\"还有一些刚刚入学的新生\",{\"1\":{\"1150\":1}}],[\"还有一些其它锁\",{\"1\":{\"115\":1}}],[\"还有一块是引擎层\",{\"1\":{\"900\":1}}],[\"还有一种线程池\",{\"1\":{\"687\":1}}],[\"还有一种更方便的\",{\"1\":{\"70\":1}}],[\"还有一个\",{\"1\":{\"635\":1}}],[\"还有一个构造方法只填数\",{\"1\":{\"343\":1}}],[\"还有no\",{\"1\":{\"87\":1}}],[\"还不是从80到8080请求\",{\"1\":{\"883\":1}}],[\"还不行\",{\"1\":{\"730\":1}}],[\"还不算完\",{\"1\":{\"217\":1}}],[\"还不如只使用一个accesstoken来直接续期\",{\"1\":{\"70\":1}}],[\"还不会编写\",{\"1\":{\"9\":1}}],[\"如工资条\",{\"1\":{\"1130\":1}}],[\"如获奖\",{\"1\":{\"1127\":1}}],[\"如阿里有\",{\"1\":{\"1112\":1}}],[\"如阿里巴巴\",{\"1\":{\"205\":1}}],[\"如服务器集群\",{\"1\":{\"1041\":1}}],[\"如服务启动类型\",{\"1\":{\"1041\":1}}],[\"如服务崩溃\",{\"1\":{\"1041\":1}}],[\"如maven的pom\",{\"1\":{\"1012\":1}}],[\"如mp4\",{\"1\":{\"706\":1}}],[\"如mp3\",{\"1\":{\"706\":1}}],[\"如<relativepath\",{\"1\":{\"1009\":1}}],[\"如菜单栏\",{\"1\":{\"998\":1}}],[\"如基于哈希\",{\"1\":{\"960\":1}}],[\"如此循环\",{\"1\":{\"932\":1}}],[\"如前面所述\",{\"1\":{\"907\":1}}],[\"如图\",{\"1\":{\"935\":1}}],[\"如图中看到的\",{\"1\":{\"906\":1}}],[\"如图片\",{\"1\":{\"77\":1}}],[\"如日期\",{\"1\":{\"892\":1}}],[\"如nginx\",{\"1\":{\"883\":3}}],[\"如想用\",{\"1\":{\"871\":1}}],[\"如想完成mset操作就需要用到组的方式给这一组set数据一个组名\",{\"1\":{\"865\":1}}],[\"如数据库\",{\"1\":{\"849\":1}}],[\"如一次5个消息到方法进行处理但只处理完1个就宕机\",{\"1\":{\"837\":1}}],[\"如要开启192\",{\"1\":{\"793\":1,\"803\":1}}],[\"如驱动程序\",{\"1\":{\"740\":1}}],[\"如hashcode\",{\"1\":{\"739\":1}}],[\"如磁盘文件读写\",{\"1\":{\"709\":1}}],[\"如ttf\",{\"1\":{\"706\":1}}],[\"如java\",{\"1\":{\"1012\":1}}],[\"如jpeg\",{\"1\":{\"706\":1}}],[\"如js\",{\"1\":{\"539\":1,\"1083\":1}}],[\"如json\",{\"1\":{\"156\":1}}],[\"如用户想注册\",{\"1\":{\"688\":1}}],[\"如先启动客户端握手会报错\",{\"1\":{\"688\":1}}],[\"如需像set添加数据\",{\"1\":{\"688\":1}}],[\"如上employee这个抽象类就可以用属于自己的属性和方法\",{\"1\":{\"686\":1}}],[\"如上图\",{\"1\":{\"630\":1}}],[\"如open\",{\"1\":{\"678\":1}}],[\"如尺寸\",{\"1\":{\"678\":1}}],[\"如arrayblockingqueue\",{\"1\":{\"641\":1}}],[\"如collections\",{\"1\":{\"641\":1}}],[\"如css文件\",{\"1\":{\"539\":1}}],[\"如网格任务\",{\"1\":{\"594\":1}}],[\"如网络故障一时半会也好不了\",{\"1\":{\"846\":1}}],[\"如网络故障\",{\"1\":{\"113\":1}}],[\"如断言为true则匹配该路由\",{\"1\":{\"590\":1}}],[\"如双十一\",{\"1\":{\"572\":1}}],[\"如存在多个类型则通过名称注入\",{\"1\":{\"488\":1}}],[\"如名称无法找到则通过类型注入\",{\"1\":{\"488\":1}}],[\"如有序集合\",{\"1\":{\"849\":1}}],[\"如有进一步的疑问\",{\"1\":{\"522\":1}}],[\"如有说的不对之处望大家指出\",{\"1\":{\"388\":1}}],[\"如有条件电脑内存至少16g起步\",{\"1\":{\"261\":1}}],[\"如复制算法用于年轻代\",{\"1\":{\"385\":1}}],[\"如自旋锁\",{\"1\":{\"380\":1}}],[\"如调用\",{\"1\":{\"374\":1}}],[\"如处理器优化和指令重排等\",{\"1\":{\"329\":1}}],[\"如何执行5am\",{\"1\":{\"980\":1}}],[\"如何安全地给小表加字段\",{\"1\":{\"928\":1}}],[\"如何安排索引内的字段顺序\",{\"1\":{\"923\":1}}],[\"如何正确地显示随机消息\",{\"1\":{\"922\":1}}],[\"如何去分析它慢的原因呢\",{\"1\":{\"897\":1}}],[\"如何使用\",{\"0\":{\"729\":1}}],[\"如何改变一个\",{\"1\":{\"721\":1}}],[\"如何解决大文件上传问题\",{\"0\":{\"708\":1}}],[\"如何才能调用子类特的属性和方法\",{\"1\":{\"686\":1}}],[\"如何求一个0\",{\"1\":{\"685\":1}}],[\"如何进行深拷贝\",{\"1\":{\"683\":1}}],[\"如何实现的\",{\"1\":{\"671\":1}}],[\"如何保证容器是线程安全的\",{\"1\":{\"640\":1}}],[\"如何分类java语言呢\",{\"1\":{\"637\":1}}],[\"如何获取项目类编译后的路径\",{\"1\":{\"454\":1}}],[\"如何避免长事务对业务的影响\",{\"1\":{\"908\":1}}],[\"如何避免死锁\",{\"1\":{\"377\":1}}],[\"如何避免stream循环查库\",{\"1\":{\"91\":1}}],[\"如何创建\",{\"0\":{\"317\":1}}],[\"如何规避aba问题\",{\"1\":{\"309\":1}}],[\"如同butterknife中onclick注解\",{\"1\":{\"242\":1}}],[\"如\",{\"1\":{\"242\":1,\"302\":1,\"377\":1,\"471\":1,\"543\":2,\"548\":1,\"602\":1,\"635\":1,\"690\":1,\"713\":1,\"785\":2,\"849\":1,\"920\":1,\"959\":2,\"969\":1,\"1074\":1,\"1081\":2}}],[\"如项目端口配置\",{\"1\":{\"222\":1}}],[\"如下写的可以从配置文件里设置\",{\"1\":{\"993\":1}}],[\"如下面这个图所示\",{\"1\":{\"899\":1}}],[\"如下图\",{\"1\":{\"619\":1}}],[\"如下图所示\",{\"1\":{\"610\":1}}],[\"如下图位置\",{\"1\":{\"546\":1}}],[\"如下给容器中加入了文件上传解析器\",{\"1\":{\"483\":1}}],[\"如下所示\",{\"1\":{\"216\":2,\"897\":1}}],[\"如下\",{\"1\":{\"216\":1,\"686\":1,\"872\":1}}],[\"如苏宁易购\",{\"1\":{\"206\":1}}],[\"如出异常订单库不会创建但是库存表会锁\",{\"1\":{\"176\":1}}],[\"如可以那这也算种做法吧\",{\"1\":{\"157\":1}}],[\"如响应状态码\",{\"1\":{\"156\":1}}],[\"如测首页不精准只拿了html数据\",{\"1\":{\"100\":1}}],[\"如setnx\",{\"1\":{\"79\":1}}],[\"如过期\",{\"1\":{\"70\":1}}],[\"如果看完这篇长篇大论对你有一点帮助\",{\"1\":{\"1152\":1}}],[\"如果细化的问题你还是不会\",{\"1\":{\"1135\":1}}],[\"如果遇到不会的\",{\"0\":{\"1135\":1}}],[\"如果觉得我能力不行\",{\"1\":{\"1132\":1}}],[\"如果寄存器位数32位\",{\"1\":{\"1093\":1}}],[\"如果地址总线是36个\",{\"1\":{\"1093\":1}}],[\"如果地址的值加1\",{\"1\":{\"1091\":1}}],[\"如果匹配\",{\"1\":{\"1021\":1}}],[\"如果以上两个都不合适可以更改maven中mirrors的配置\",{\"1\":{\"1013\":1}}],[\"如果将mybatis\",{\"1\":{\"1012\":1}}],[\"如果将要过期取token里用户名重新生成token返回前端\",{\"1\":{\"70\":1}}],[\"如果也没有\",{\"1\":{\"1009\":1}}],[\"如果给其他用\",{\"1\":{\"1005\":1}}],[\"如果小于1024端口\",{\"1\":{\"998\":1}}],[\"如果报错那可能是订阅不新\",{\"1\":{\"981\":1}}],[\"如果能使用批量操作就要尽量使用\",{\"1\":{\"973\":1}}],[\"如果系统要求的并发量不大的话\",{\"1\":{\"970\":1}}],[\"如果系统没有发生\",{\"1\":{\"572\":1}}],[\"如果mysql表没有索引\",{\"1\":{\"966\":1}}],[\"如果子查询返回数据\",{\"1\":{\"959\":1}}],[\"如果所有参数都为\",{\"1\":{\"959\":1}}],[\"如果第二列和第三列的数据类型不同\",{\"1\":{\"959\":1}}],[\"如果第一列重复的记录中有至少一行的第二列有值\",{\"1\":{\"959\":1}}],[\"如果第一个字段是范围查询需要单独建一个索引\",{\"1\":{\"923\":1}}],[\"如果实际业务场景中不允许产生重复数据的话\",{\"1\":{\"947\":1}}],[\"如果实现类需要覆盖默认方法\",{\"1\":{\"686\":1}}],[\"如果落在黄色部分\",{\"1\":{\"935\":1}}],[\"如果落在红色部分\",{\"1\":{\"935\":1}}],[\"如果落在绿色部分\",{\"1\":{\"935\":1}}],[\"如果刚好有另外一个事务拥有这一行的行锁\",{\"1\":{\"934\":1}}],[\"如果账户余额可能会减少\",{\"1\":{\"932\":1}}],[\"如果团队里暂时没有数据库方面的专家\",{\"1\":{\"932\":1}}],[\"如果他要加锁访问的行上有锁\",{\"1\":{\"932\":1}}],[\"如果开始执行\",{\"1\":{\"929\":1}}],[\"如果主键是非自增\",{\"1\":{\"972\":1}}],[\"如果主键为自增\",{\"1\":{\"972\":1}}],[\"如果主库上的一个小表做了一个\",{\"1\":{\"929\":1}}],[\"如果主机redis有密码则从机的配置文件还要加一句\",{\"1\":{\"861\":1}}],[\"如果只有一个模块需要使用mybatis\",{\"1\":{\"1012\":1}}],[\"如果只有\",{\"1\":{\"928\":1}}],[\"如果客户端发生异常\",{\"1\":{\"927\":1}}],[\"如果客户端持续有请求\",{\"1\":{\"893\":1}}],[\"如果备份过程中有更新\",{\"1\":{\"927\":1}}],[\"如果备份表的顺序反过来\",{\"1\":{\"927\":1}}],[\"如果后面用这个备份来恢复数据的话\",{\"1\":{\"927\":1}}],[\"如果后面再使用字面量\",{\"1\":{\"725\":1}}],[\"如果时间顺序上是先备份账户余额表\",{\"1\":{\"927\":1}}],[\"如果既有联合查询\",{\"1\":{\"923\":1}}],[\"如果通过调整顺序\",{\"1\":{\"923\":1}}],[\"如果为每一种查询都设计一个索引\",{\"1\":{\"923\":1}}],[\"如果为空\",{\"1\":{\"318\":1}}],[\"如果where\",{\"1\":{\"923\":1}}],[\"如果现在有一个需求\",{\"1\":{\"924\":1}}],[\"如果现在有一个高频请求\",{\"1\":{\"922\":1}}],[\"如果现在主物理内存的值为z3\",{\"1\":{\"310\":1}}],[\"如果新插入的\",{\"1\":{\"918\":1}}],[\"如果插入新的行\",{\"1\":{\"918\":1}}],[\"如果插入失败事物回滚导致业务操作也同时回滚\",{\"1\":{\"173\":1}}],[\"如果语句是\",{\"1\":{\"917\":2}}],[\"如果语句不在查询缓存中\",{\"1\":{\"894\":1}}],[\"如果仅仅看查询效率\",{\"1\":{\"915\":1}}],[\"如果真的出现大事务导致回滚段过大\",{\"1\":{\"908\":1}}],[\"如果执行空罐子\",{\"1\":{\"980\":1}}],[\"如果执行的语句是\",{\"1\":{\"922\":1}}],[\"如果执行\",{\"1\":{\"907\":2,\"927\":1}}],[\"如果其中一个事务使用了\",{\"1\":{\"906\":1}}],[\"如果另一个事务恰好修改了这个数据\",{\"1\":{\"905\":1}}],[\"如果另一个事务回滚\",{\"1\":{\"905\":1}}],[\"如果银行这么整\",{\"1\":{\"904\":1}}],[\"如果今天赊账的不多\",{\"1\":{\"899\":1}}],[\"如果每一次的更新操作都需要写进磁盘\",{\"1\":{\"899\":1}}],[\"如果掌柜没有粉板的帮助\",{\"1\":{\"899\":1}}],[\"如果赊账的人不多\",{\"1\":{\"899\":1}}],[\"如果接触\",{\"1\":{\"898\":1}}],[\"如果表定义了主键\",{\"1\":{\"967\":1}}],[\"如果表中没有主键\",{\"1\":{\"965\":1}}],[\"如果表只有一个字段\",{\"1\":{\"956\":1}}],[\"如果表没有主键或者合适的索引\",{\"1\":{\"967\":1}}],[\"如果表没有主键\",{\"1\":{\"956\":1,\"967\":1}}],[\"如果表名用了别名\",{\"0\":{\"942\":1}}],[\"如果表\",{\"1\":{\"897\":1}}],[\"如果数据量只有1万\",{\"1\":{\"961\":1}}],[\"如果数据有索引\",{\"1\":{\"911\":1}}],[\"如果数据库进行重启\",{\"1\":{\"897\":1}}],[\"如果数组属性只有一个值\",{\"1\":{\"242\":1}}],[\"如果命中查询缓存\",{\"1\":{\"897\":1}}],[\"如果查询中的子查询使用频繁\",{\"1\":{\"959\":1}}],[\"如果查询命中缓存\",{\"1\":{\"894\":1}}],[\"如果查出的是女生\",{\"1\":{\"429\":1}}],[\"如果令牌已经过期\",{\"1\":{\"890\":1}}],[\"如果令牌即将过期\",{\"1\":{\"890\":2}}],[\"如果原值确实是null\",{\"1\":{\"876\":1}}],[\"如果说你的项目需要排序数据量比较小并且业务场景不复杂的话\",{\"1\":{\"868\":1}}],[\"如果故障了根据投票数自动将从库转换为主库\",{\"1\":{\"865\":1}}],[\"如果rdb\",{\"1\":{\"860\":1}}],[\"如果redis客户端程序从redis服务中获取到锁之后立马宕机\",{\"1\":{\"87\":1}}],[\"如果还连不上\",{\"1\":{\"853\":1}}],[\"如果还有空闲内存\",{\"1\":{\"636\":1}}],[\"如果整个系统仅仅靠着一个\",{\"1\":{\"824\":1}}],[\"如果订单java写\",{\"1\":{\"818\":1}}],[\"如果全平台都是java写的那就\",{\"1\":{\"818\":1}}],[\"如果消息队列挂了怎么办呢\",{\"1\":{\"815\":1}}],[\"如果直接在服务配置修改的话就不方便拓展\",{\"1\":{\"810\":1}}],[\"如果当前目录下没有符合\",{\"1\":{\"787\":1}}],[\"如果返回值是true\",{\"1\":{\"768\":1}}],[\"如果需求变更\",{\"1\":{\"760\":1}}],[\"如果需要匹配跨行文本或保留换行符\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"如果需要使用这些库\",{\"1\":{\"1010\":1}}],[\"如果需要用这个\",{\"1\":{\"901\":1}}],[\"如果需要省略类型\",{\"1\":{\"754\":1}}],[\"如果需要替换一种实现\",{\"1\":{\"740\":1}}],[\"如果需要拦截所有请求\",{\"1\":{\"534\":1}}],[\"如果需要进一步细化\",{\"1\":{\"383\":1}}],[\"如果需要代理非\",{\"1\":{\"182\":1}}],[\"如果方法体中唯一的一条语句是一个返回语句\",{\"1\":{\"757\":1}}],[\"如果方法体中只有一条语句\",{\"1\":{\"756\":1}}],[\"如果参数列表中\",{\"1\":{\"755\":1}}],[\"如果字符串常量池中不存在字符串对象\",{\"1\":{\"724\":1}}],[\"如果字符串常量池中已经存在与\",{\"1\":{\"723\":1}}],[\"如果字符串常量池中已经驻留了一个等于此\",{\"1\":{\"723\":1}}],[\"如果字符串本身包含引号\",{\"1\":{\"61\":1}}],[\"如果append方法的参数字符串为null\",{\"1\":{\"720\":1}}],[\"如果使用二叉树来存储\",{\"1\":{\"916\":1}}],[\"如果使用的是\",{\"1\":{\"908\":1}}],[\"如果使用innodb\",{\"1\":{\"905\":1}}],[\"如果使用前面提到过的\",{\"1\":{\"725\":1}}],[\"如果使用尾插法就没有这个bug\",{\"1\":{\"694\":1}}],[\"如果使用可重入锁\",{\"1\":{\"321\":1}}],[\"如果这个问题比较细节\",{\"1\":{\"1135\":1}}],[\"如果这个问题很基础\",{\"1\":{\"1135\":1}}],[\"如果这个依赖还依赖了其他库\",{\"1\":{\"1010\":1}}],[\"如果这个也被写满的话\",{\"1\":{\"972\":1}}],[\"如果这个影院做活动\",{\"1\":{\"931\":1}}],[\"如果这个位置没有元素\",{\"0\":{\"691\":1}}],[\"如果这里宕机\",{\"1\":{\"115\":1}}],[\"如果加int就所有元素都得是int\",{\"1\":{\"688\":1}}],[\"如果该位置没有元素就直接添加到这\",{\"1\":{\"688\":1}}],[\"如果知道容量就给\",{\"1\":{\"687\":1}}],[\"如果拼接的结果调用intern\",{\"1\":{\"687\":1}}],[\"如果回收了软引用对象之后仍然没有足够的内存\",{\"1\":{\"660\":1}}],[\"如果内存空间不足了\",{\"1\":{\"660\":1}}],[\"如果大于0\",{\"1\":{\"653\":1}}],[\"如果最后的结果还要\",{\"1\":{\"648\":1}}],[\"如果它们的和超过了\",{\"1\":{\"648\":1}}],[\"如果尝试在循环过程中直接删除其中的元素\",{\"1\":{\"645\":1}}],[\"如果尝试失败\",{\"1\":{\"318\":1}}],[\"如果熟悉设计模式中的代理模式\",{\"1\":{\"640\":1}}],[\"如果试图获取时对象还在\",{\"1\":{\"636\":1}}],[\"如果要做\",{\"1\":{\"961\":1}}],[\"如果要将\",{\"1\":{\"898\":1}}],[\"如果要永久生效\",{\"1\":{\"897\":1}}],[\"如果要添加一个服务\",{\"1\":{\"810\":1}}],[\"如果要通过配置文件启动\",{\"1\":{\"794\":1}}],[\"如果要说\",{\"1\":{\"694\":1}}],[\"如果要测试\",{\"1\":{\"625\":1}}],[\"如果要删除某个具体\",{\"1\":{\"123\":1}}],[\"如果tm在准备\",{\"1\":{\"609\":1}}],[\"如果配置文件没用敏感信息就\",{\"1\":{\"796\":1}}],[\"如果配置文件中没有配config\",{\"1\":{\"597\":1}}],[\"如果配置了databaseidprovider标签\",{\"1\":{\"438\":1}}],[\"如果成功\",{\"1\":{\"587\":1}}],[\"如果扇出的链路上某个微服务的调用响应时间过长或者不可用\",{\"1\":{\"581\":1}}],[\"如果请求数据和请求url和最近一次请求一致\",{\"1\":{\"888\":1}}],[\"如果请求与断言相匹配则进行路由\",{\"1\":{\"590\":1}}],[\"如果请求头在openfeign中丢失\",{\"1\":{\"581\":1}}],[\"如果请求者伪造remote\",{\"1\":{\"46\":1}}],[\"如果超过了这个限制\",{\"1\":{\"543\":1}}],[\"如果超过重试的次数还未成功执行的话\",{\"1\":{\"186\":1}}],[\"如果存在同名的属性\",{\"1\":{\"543\":1}}],[\"如果存在就重新设置\",{\"1\":{\"113\":1}}],[\"如果用身份证号做主键\",{\"1\":{\"918\":1}}],[\"如果用了\",{\"1\":{\"525\":1}}],[\"如果用户名密码认证通过\",{\"1\":{\"893\":1}}],[\"如果用户名或密码不对\",{\"1\":{\"893\":1}}],[\"如果用户配的bean名字不符合规范\",{\"1\":{\"483\":1}}],[\"如果用户请求的uri是\",{\"1\":{\"73\":1}}],[\"如果flushcache=true\",{\"1\":{\"449\":1}}],[\"如果会话关闭\",{\"1\":{\"446\":1}}],[\"如果带了lastname就用lastname查\",{\"1\":{\"430\":1,\"433\":2}}],[\"如果带了id就用id查\",{\"1\":{\"430\":1,\"433\":2}}],[\"如果javaben属性名和列名不一致\",{\"1\":{\"419\":1}}],[\"如果一张表数据量大且是热表\",{\"1\":{\"976\":1}}],[\"如果一个公司工资给到\",{\"1\":{\"1107\":1}}],[\"如果一个项目需要使用某个第三方库的某个功能\",{\"1\":{\"1010\":1}}],[\"如果一个模块引用了这个依赖\",{\"1\":{\"1010\":1}}],[\"如果一个学生的成绩表中有多条记录\",{\"1\":{\"959\":1}}],[\"如果一个数据版本是在我启动之前生成的\",{\"1\":{\"935\":1}}],[\"如果一个数据库操作出现了异常\",{\"1\":{\"399\":1}}],[\"如果一个库有\",{\"1\":{\"935\":1}}],[\"如果一个查询正在遍历一个表中的数据\",{\"1\":{\"928\":1}}],[\"如果一个对象只具有软引用\",{\"1\":{\"660\":1}}],[\"如果一个对象仅持有虚引用\",{\"1\":{\"660\":2}}],[\"如果一个分布式系统在发生网络分区时选择保持一致性\",{\"1\":{\"571\":1}}],[\"如果一条\",{\"1\":{\"81\":1,\"906\":1,\"936\":1}}],[\"如果基本类型是成员变量呢\",{\"1\":{\"389\":1}}],[\"如果对象在\",{\"1\":{\"385\":1}}],[\"如果想导入\",{\"1\":{\"987\":1}}],[\"如果想加一个还得把整个串干掉\",{\"1\":{\"876\":1}}],[\"如果想中断强引用与对象之间的联系\",{\"1\":{\"660\":1}}],[\"如果想要注入静态\",{\"1\":{\"505\":1}}],[\"如果想填ids\",{\"1\":{\"436\":1}}],[\"如果想打破双亲委派模型则需要重写\",{\"1\":{\"382\":1}}],[\"如果想实现每一个线程都有自己的专属本地变量该如何解决呢\",{\"1\":{\"156\":1}}],[\"如果锁竞争严重\",{\"1\":{\"379\":1}}],[\"如果多个线程用一个锁但是没有锁竞争或者轻微锁竞争\",{\"1\":{\"379\":1}}],[\"如果多个人操作了这个页面呢\",{\"1\":{\"229\":1}}],[\"如果线程只用一次可以考虑用thread类的匿名子类的方式\",{\"1\":{\"687\":1}}],[\"如果线程池长度超过处理需要\",{\"1\":{\"365\":1}}],[\"如果线程数开到了\",{\"1\":{\"363\":1}}],[\"如果队列和maximumpoolsize要满了\",{\"1\":{\"362\":1}}],[\"如果任务有很多\",{\"1\":{\"362\":1}}],[\"如果比较不成功一直在循环\",{\"1\":{\"307\":1}}],[\"如果相同\",{\"1\":{\"305\":1}}],[\"如果更新和原来一样就会\",{\"1\":{\"271\":1}}],[\"如果有必要\",{\"1\":{\"1144\":1}}],[\"如果有一天\",{\"1\":{\"1140\":1}}],[\"如果有一个数据库出现问题\",{\"1\":{\"960\":1}}],[\"如果有一个事务\",{\"1\":{\"935\":1}}],[\"如果有一个学生卡住\",{\"1\":{\"849\":1}}],[\"如果有主键\",{\"1\":{\"956\":1}}],[\"如果有两个线程要同时给一个表加字段\",{\"1\":{\"928\":1}}],[\"如果有的表使用了不支持事务的引擎\",{\"1\":{\"927\":1}}],[\"如果有根据身份证号查询市民信息的需求\",{\"1\":{\"922\":1}}],[\"如果有不合适的\",{\"1\":{\"919\":1}}],[\"如果有人要赊账或者还账的话\",{\"1\":{\"899\":1}}],[\"如果有权限\",{\"1\":{\"897\":1}}],[\"如果有密码的话\",{\"1\":{\"861\":1,\"865\":1}}],[\"如果有兴趣的话\",{\"1\":{\"725\":1}}],[\"如果有元素了就equals比较true就证明一样\",{\"1\":{\"688\":1}}],[\"如果有多个子项目都引用同一样依赖\",{\"1\":{\"556\":1}}],[\"如果有多个线程同时完成这\",{\"1\":{\"372\":1}}],[\"如果有\",{\"1\":{\"543\":1}}],[\"如果有定时任务就参考秒杀系统的定时任务设计\",{\"1\":{\"261\":1}}],[\"如果有就直接从缓存中获取方法调用后的结果\",{\"1\":{\"122\":1}}],[\"如果面试官问的太多\",{\"1\":{\"261\":1}}],[\"如果代码中有该标识\",{\"1\":{\"229\":1}}],[\"如果代码没有特殊\",{\"1\":{\"186\":1}}],[\"如果页面有keep\",{\"1\":{\"225\":1}}],[\"如果启动多个默认配置下的nacos节点\",{\"1\":{\"599\":1}}],[\"如果启动不起来\",{\"1\":{\"219\":1}}],[\"如果启用了\",{\"1\":{\"86\":1,\"114\":1}}],[\"如果正则表达式将会改变\",{\"1\":{\"216\":1}}],[\"如果事务提交成功\",{\"1\":{\"186\":1}}],[\"如果发送消息时未指定此值\",{\"1\":{\"836\":1}}],[\"如果发送方未收到确认应答或检测到数据包丢失\",{\"1\":{\"56\":1}}],[\"如果发现该\",{\"1\":{\"543\":1}}],[\"如果发现是\",{\"1\":{\"186\":1}}],[\"如果单个操作涉及到多个数据库\",{\"1\":{\"183\":1}}],[\"如果异常被catch到\",{\"1\":{\"182\":1}}],[\"如果抛出的\",{\"1\":{\"182\":1}}],[\"如果业务操作失败也会导致插入去重表回滚\",{\"1\":{\"173\":1}}],[\"如果手动清除user\",{\"1\":{\"156\":1}}],[\"如果认证失败\",{\"1\":{\"153\":1}}],[\"如果认证成功\",{\"1\":{\"153\":1}}],[\"如果认证的记录被保存在内存中的话\",{\"1\":{\"52\":1}}],[\"如果\",{\"1\":{\"152\":1,\"182\":1,\"186\":1,\"507\":1,\"647\":1,\"814\":1,\"899\":1,\"900\":1,\"918\":1,\"935\":1,\"1009\":1,\"1160\":1}}],[\"如果没有什么帮助\",{\"1\":{\"1152\":1}}],[\"如果没有的话\",{\"1\":{\"1150\":1}}],[\"如果没有特别需求的话\",{\"1\":{\"1074\":1}}],[\"如果没有则会从\",{\"1\":{\"1009\":1}}],[\"如果没有指定长度\",{\"1\":{\"963\":1}}],[\"如果没有明确指定varchar类型的长度\",{\"1\":{\"963\":2}}],[\"如果没有按照顺序加锁的机制\",{\"1\":{\"933\":1}}],[\"如果没有主键则会自动生成这个当主键\",{\"1\":{\"908\":1}}],[\"如果没有命中查询缓存\",{\"1\":{\"895\":1}}],[\"如果没有显式指定初始值\",{\"1\":{\"696\":1}}],[\"如果没有\",{\"1\":{\"570\":1,\"897\":1,\"1150\":1}}],[\"如果没有其他的引用关系\",{\"1\":{\"636\":1}}],[\"如果没有其他方式提供\",{\"1\":{\"522\":1}}],[\"如果没有其他引用指向该对象\",{\"1\":{\"125\":1}}],[\"如果没有人更改过\",{\"1\":{\"303\":1}}],[\"如果没有就调用方法并缓存结果后返回给用户\",{\"1\":{\"122\":1}}],[\"如果某个表上的查询语句频繁\",{\"1\":{\"928\":1}}],[\"如果某个属性是final类型\",{\"1\":{\"125\":1}}],[\"如果某些业务有且仅有一个请求连接\",{\"1\":{\"100\":1}}],[\"如果缓存中没有\",{\"1\":{\"123\":1}}],[\"如果缓存中有\",{\"1\":{\"123\":2}}],[\"如果缓存中有就用缓存的\",{\"1\":{\"103\":1}}],[\"如果我基于这篇文章再来一遍\",{\"1\":{\"1001\":1}}],[\"如果我告诉你事务\",{\"1\":{\"934\":1}}],[\"如果我现在要按照市民的身份证号去查他的家庭地址呢\",{\"1\":{\"923\":1}}],[\"如果我执行\",{\"1\":{\"921\":1}}],[\"如果我想要改变一个\",{\"1\":{\"721\":1}}],[\"如果我没创hello会报这样的错\",{\"1\":{\"688\":1}}],[\"如果我放外面那就和person平级了别的地方又用不到\",{\"1\":{\"686\":1}}],[\"如果我们从左边开始查找\",{\"1\":{\"1085\":1}}],[\"如果我们用二叉搜索树来实现的话\",{\"1\":{\"916\":1}}],[\"如果我们使用有序数组来实现的话\",{\"1\":{\"915\":1}}],[\"如果我们把购买完成的信息发送到消息队列中\",{\"1\":{\"814\":1}}],[\"如果我们在认证或者授权的过程中出现了异常会被exceptiontranslationfilter捕获到\",{\"1\":{\"630\":1}}],[\"如果我们需要自定义异常处理\",{\"1\":{\"630\":1}}],[\"如果我们需要自定义拦截器\",{\"1\":{\"534\":1}}],[\"如果我们需要在查询结果中进行过滤\",{\"1\":{\"278\":1}}],[\"如果我们的切面比较少\",{\"1\":{\"494\":1}}],[\"如果我们未指定锁的超时时间\",{\"1\":{\"115\":1}}],[\"如果我们传递了锁的超时时间\",{\"1\":{\"115\":1}}],[\"如果我要用云服务的nginx有没有解决方法\",{\"1\":{\"93\":1}}],[\"如果获取锁的线程仍然活跃\",{\"1\":{\"113\":1}}],[\"如果获取锁的线程因为某种原因\",{\"1\":{\"113\":1}}],[\"如果传入的leasetime为\",{\"1\":{\"113\":1}}],[\"如果自己定义了锁自动释放时间的话\",{\"1\":{\"113\":1}}],[\"如果不是\",{\"1\":{\"1150\":1}}],[\"如果不是则跳过\",{\"1\":{\"897\":1}}],[\"如果不能\",{\"1\":{\"1148\":1}}],[\"如果不能精确匹配异常\",{\"1\":{\"240\":1}}],[\"如果不好好学习技术\",{\"1\":{\"1141\":1}}],[\"如果不存在\",{\"1\":{\"915\":1}}],[\"如果不存在则设置\",{\"1\":{\"849\":1}}],[\"如果不使用\",{\"1\":{\"901\":1}}],[\"如果不使用线程池\",{\"1\":{\"366\":1}}],[\"如果不用两阶段提交\",{\"1\":{\"901\":1}}],[\"如果不指定引擎类型\",{\"1\":{\"892\":1}}],[\"如果不定制化\",{\"1\":{\"837\":1}}],[\"如果不加watch\",{\"1\":{\"857\":1}}],[\"如果不加\",{\"1\":{\"790\":1}}],[\"如果不进行\",{\"1\":{\"635\":1}}],[\"如果不支持p\",{\"1\":{\"572\":1}}],[\"如果不想修改包名\",{\"1\":{\"531\":1}}],[\"如果不想改成jedis\",{\"1\":{\"107\":1}}],[\"如果不同\",{\"1\":{\"305\":1}}],[\"如果不希望使用长连接选项\",{\"1\":{\"47\":1}}],[\"如果key存在\",{\"1\":{\"86\":1,\"114\":1}}],[\"如果是逆序则调整两个while循环\",{\"1\":{\"1085\":1}}],[\"如果是\",{\"1\":{\"977\":1}}],[\"如果是sqlserver数据库上述语法有问题吗\",{\"1\":{\"938\":1}}],[\"如果是这个事务自己更新的数据\",{\"1\":{\"935\":1}}],[\"如果是这样的话\",{\"1\":{\"70\":1}}],[\"如果是我启动以后才生成的\",{\"1\":{\"935\":1}}],[\"如果是可重复读隔离级别\",{\"1\":{\"934\":1}}],[\"如果是长整型\",{\"1\":{\"918\":1}}],[\"如果是长连接\",{\"1\":{\"907\":1}}],[\"如果是则将这行存在结果集中\",{\"1\":{\"897\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"302\":1}}],[\"如果是饿汉式\",{\"1\":{\"779\":1}}],[\"如果是静态方法\",{\"1\":{\"761\":1}}],[\"如果是从研究源码的角度来说勉强说得过去\",{\"1\":{\"694\":1}}],[\"如果是授权过程中出现的异常会被封装成accessdeniedexception然后调用accessdeniedhandler对象的方法去进行异常处理\",{\"1\":{\"630\":1}}],[\"如果是认证过程中出现的异常会被封装成authenticationexception然后调用authenticationentrypoint对象的方法去进行异常处理\",{\"1\":{\"630\":1}}],[\"如果是男生\",{\"1\":{\"429\":2}}],[\"如果是放resources则不用配这个\",{\"1\":{\"397\":1}}],[\"如果是菜单\",{\"1\":{\"118\":1}}],[\"如果是用户纬度数据\",{\"1\":{\"118\":1}}],[\"如果是第一次加锁\",{\"1\":{\"86\":1,\"114\":1}}],[\"如果写并发量较低\",{\"1\":{\"83\":1}}],[\"如果写并发量较高\",{\"1\":{\"82\":1}}],[\"如果设置成功则表示获取到了锁\",{\"1\":{\"79\":1}}],[\"如果源主机的网络配置不正确\",{\"1\":{\"76\":1}}],[\"如果您想要实际更改显示器的分辨率\",{\"1\":{\"998\":1}}],[\"如果您执行了一个左连接\",{\"1\":{\"959\":1}}],[\"如果您不确定应用程序的来源或是否应该删除下载标记\",{\"1\":{\"999\":1}}],[\"如果您不确定\",{\"1\":{\"782\":1}}],[\"如果您遇到ping不通的问题\",{\"1\":{\"76\":1}}],[\"如果您无法成功ping通目标主机\",{\"1\":{\"76\":1}}],[\"如果您希望路径大小写不敏感\",{\"1\":{\"60\":1}}],[\"如果ping不通是证明icmp不可用吗\",{\"1\":{\"76\":1}}],[\"如果已经过期重新跳登\",{\"1\":{\"70\":1}}],[\"如果在性能上没有瓶颈点那么就尽量不做分库分表\",{\"1\":{\"961\":1}}],[\"如果在这个指定的等待时间里面能够拿到\",{\"1\":{\"928\":1}}],[\"如果在某个线程\",{\"1\":{\"928\":1}}],[\"如果在连接被断开之后\",{\"1\":{\"893\":1}}],[\"如果在内部已经引用局部变量\",{\"1\":{\"771\":1}}],[\"如果在指令间插入一条memory\",{\"1\":{\"296\":1}}],[\"如果在当前类中进行内部调用方法\",{\"1\":{\"182\":1}}],[\"如果在purchase方法内部发生异常\",{\"1\":{\"179\":1}}],[\"如果在线程执行过程中\",{\"1\":{\"157\":1}}],[\"如果在事务\",{\"1\":{\"85\":1}}],[\"如果在\",{\"1\":{\"48\":1,\"901\":1,\"929\":3,\"959\":1}}],[\"如果http请求经过代理服务器转发\",{\"1\":{\"46\":1}}],[\"如果你也想拥有一个这样的文档网站\",{\"1\":{\"1161\":1}}],[\"如果你也有这个顾虑\",{\"1\":{\"907\":1}}],[\"如果你已经掌握的很好了\",{\"1\":{\"1150\":1}}],[\"如果你已经熟练掌握spring\",{\"1\":{\"740\":1}}],[\"如果你初学\",{\"1\":{\"1150\":1}}],[\"如果你放弃了\",{\"1\":{\"1150\":1}}],[\"如果你能坚持下去\",{\"1\":{\"1150\":1}}],[\"如果你能在一个嘈杂的环境中学习\",{\"1\":{\"1148\":1}}],[\"如果你学的东西\",{\"1\":{\"1144\":1}}],[\"如果你几乎没有完成过自己的计划\",{\"1\":{\"1142\":1}}],[\"如果你真的能够完成你制定的每一个计划\",{\"1\":{\"1142\":1}}],[\"如果你每天都有一个按时间段安排的计划的话\",{\"1\":{\"1142\":1}}],[\"如果你觉得\",{\"1\":{\"1140\":1}}],[\"如果你值这个价\",{\"1\":{\"1131\":1}}],[\"如果你通过了面试\",{\"1\":{\"1130\":1}}],[\"如果你确定了\",{\"1\":{\"1118\":1}}],[\"如果你找的下1个人在2楼\",{\"1\":{\"1090\":1}}],[\"如果你选择替换为大写文本\",{\"0\":{\"1046\":1}}],[\"如果你正在开发一个基于java\",{\"1\":{\"1012\":1}}],[\"如果你不学\",{\"1\":{\"1141\":1}}],[\"如果你不显式地引入\",{\"1\":{\"1010\":1}}],[\"如果你不了解它\",{\"1\":{\"10\":1}}],[\"如果你仔细看配置\",{\"1\":{\"1005\":1}}],[\"如果你有中间件\",{\"1\":{\"932\":1}}],[\"如果你把语句\",{\"1\":{\"931\":1}}],[\"如果你发现你的应用程序里有\",{\"1\":{\"929\":1}}],[\"如果你对事务隔离级别的概念不是很清晰的话\",{\"1\":{\"927\":1}}],[\"如果你要删除一个表里面的前\",{\"1\":{\"933\":1}}],[\"如果你要变更的表是一个热点表\",{\"1\":{\"928\":1}}],[\"如果你要做\",{\"1\":{\"928\":1}}],[\"如果你要查的是所有名字第一个字是\",{\"1\":{\"923\":1}}],[\"如果你要重建主键索引\",{\"1\":{\"919\":1}}],[\"如果你要重建索引\",{\"1\":{\"919\":1}}],[\"如果你现在要找身份证号在\",{\"1\":{\"914\":1}}],[\"如果你运气好\",{\"1\":{\"901\":1}}],[\"如果你还有一些疑问\",{\"1\":{\"896\":1}}],[\"如果你用的是\",{\"1\":{\"893\":1}}],[\"如果你没有后续的动作\",{\"1\":{\"893\":1}}],[\"如果你连的是生产服务器\",{\"1\":{\"893\":1}}],[\"如果你需要对连接池进行更高级的配置\",{\"1\":{\"871\":1}}],[\"如果你想更换主题\",{\"1\":{\"1161\":1}}],[\"如果你想要统计字数并显示\",{\"1\":{\"1161\":1}}],[\"如果你想要马上启动一个事务\",{\"1\":{\"934\":1}}],[\"如果你想进这些公司\",{\"1\":{\"1150\":1}}],[\"如果你想快速找到其中的某一个知识点\",{\"1\":{\"909\":1}}],[\"如果你想在命令行中单独运行这个命令而不报错\",{\"1\":{\"787\":1}}],[\"如果你想去除哈希值的附加\",{\"1\":{\"539\":1}}],[\"如果你这样写\",{\"1\":{\"721\":1}}],[\"如果你的团队内部对于这些组件比较熟悉\",{\"1\":{\"961\":1}}],[\"如果你的团队有能修改\",{\"1\":{\"932\":1}}],[\"如果你的事务中需要锁多个行\",{\"1\":{\"933\":1}}],[\"如果你的\",{\"1\":{\"901\":1}}],[\"如果你的语句不对\",{\"1\":{\"895\":1}}],[\"如果你的查询能够直接在这个缓存中找到\",{\"1\":{\"894\":1}}],[\"如果你的项目涉及到文件上传的话\",{\"1\":{\"708\":1}}],[\"如果你的应用需要处理状态而要求用户能连接到\",{\"1\":{\"208\":1}}],[\"如果你在从库上备份\",{\"1\":{\"927\":1}}],[\"如果你在主库上备份\",{\"1\":{\"927\":1}}],[\"如果你在\",{\"1\":{\"522\":1,\"543\":1}}],[\"如果你在配置文件中有\",{\"1\":{\"522\":1}}],[\"如果你将\",{\"1\":{\"182\":1}}],[\"如果你是一个新手\",{\"1\":{\"9\":1}}],[\"放最大\",{\"1\":{\"1005\":1}}],[\"放弃了\",{\"1\":{\"740\":1}}],[\"放第13个的时候先看要放的位置是不是空的能不能放进去\",{\"1\":{\"703\":1}}],[\"放值\",{\"1\":{\"693\":1}}],[\"放自己的业务代码\",{\"1\":{\"687\":1}}],[\"放开\",{\"1\":{\"626\":1}}],[\"放到github上\",{\"1\":{\"1150\":1}}],[\"放到\",{\"1\":{\"546\":1,\"1166\":1}}],[\"放随意参数的构造器\",{\"1\":{\"513\":1}}],[\"放这个位置\",{\"1\":{\"447\":2}}],[\"放代码块中\",{\"1\":{\"352\":1}}],[\"放上去的key是当前主机的ssh公钥\",{\"1\":{\"798\":1,\"984\":1}}],[\"放上\",{\"1\":{\"282\":1}}],[\"放一个\",{\"1\":{\"167\":1}}],[\"放行路径\",{\"1\":{\"157\":1}}],[\"放入字符串常量池\",{\"1\":{\"722\":1}}],[\"放入localstorage浏览器的技术\",{\"1\":{\"154\":1}}],[\"放入redis\",{\"1\":{\"154\":2}}],[\"放入数据库\",{\"1\":{\"154\":1}}],[\"放入数据库并不合适\",{\"1\":{\"154\":1}}],[\"放common模块\",{\"1\":{\"151\":1}}],[\"放nacos\",{\"1\":{\"150\":1}}],[\"放\",{\"1\":{\"70\":1}}],[\"放在一边\",{\"1\":{\"1148\":1}}],[\"放在数组的这个位置\",{\"1\":{\"914\":1}}],[\"放在不同的服务器\",{\"1\":{\"265\":1}}],[\"放在同一事物中\",{\"1\":{\"173\":1}}],[\"放在前端\",{\"1\":{\"68\":1}}],[\"放在\",{\"1\":{\"46\":1}}],[\"前者包括换行符\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"前的表结构\",{\"1\":{\"929\":1}}],[\"前阿里资深技术专家\",{\"1\":{\"891\":1}}],[\"前台运行\",{\"1\":{\"790\":1}}],[\"前台后台如果想传对象\",{\"1\":{\"688\":1}}],[\"前后加起来大概\",{\"1\":{\"739\":1}}],[\"前后端不分离好像用的是后端的\",{\"1\":{\"618\":1}}],[\"前后端分离的话\",{\"1\":{\"156\":1}}],[\"前四个字母分别为naming和configuration的前两个字母\",{\"1\":{\"594\":1}}],[\"前面说过\",{\"1\":{\"1150\":1}}],[\"前面说的都对\",{\"1\":{\"1093\":1}}],[\"前面ox代表十六进制\",{\"1\":{\"1091\":1}}],[\"前面的文章不是说\",{\"1\":{\"935\":1}}],[\"前面的问题问到了动态代理\",{\"1\":{\"640\":1}}],[\"前面我说到定期全量备份的周期\",{\"1\":{\"902\":1}}],[\"前面我们说了\",{\"1\":{\"928\":1}}],[\"前面我们说过了\",{\"1\":{\"901\":1}}],[\"前面我们说过\",{\"1\":{\"724\":1,\"898\":1}}],[\"前面我们讲过\",{\"1\":{\"900\":1}}],[\"前面我有跟你介绍过\",{\"1\":{\"898\":1}}],[\"前面这个char要用括号包起来\",{\"1\":{\"685\":1}}],[\"前面\",{\"1\":{\"627\":1,\"693\":1}}],[\"前面测试的时候\",{\"1\":{\"574\":1}}],[\"前面加javascript\",{\"1\":{\"125\":1}}],[\"前缀索引\",{\"1\":{\"925\":1}}],[\"前缀覆盖\",{\"1\":{\"432\":1}}],[\"前缀\",{\"1\":{\"432\":1}}],[\"前值作废拿直接拿主物理内存的最新值\",{\"1\":{\"284\":1}}],[\"前置设置\",{\"0\":{\"986\":1}}],[\"前置条件\",{\"0\":{\"853\":1}}],[\"前置拦截器\",{\"1\":{\"619\":1}}],[\"前置逻辑\",{\"1\":{\"496\":1}}],[\"前置通知\",{\"1\":{\"495\":1,\"887\":1}}],[\"前置处理\",{\"1\":{\"489\":1}}],[\"前置知识\",{\"0\":{\"284\":1}}],[\"前置\",{\"1\":{\"178\":1}}],[\"前一次指向的对象会失去引用\",{\"1\":{\"125\":1}}],[\"前提要安装好npm环境\",{\"1\":{\"1161\":1}}],[\"前提\",{\"1\":{\"110\":1,\"517\":1}}],[\"前言\",{\"0\":{\"91\":1,\"99\":1,\"103\":1,\"163\":1,\"190\":1,\"215\":1,\"328\":1,\"350\":1,\"452\":1,\"573\":1,\"590\":1,\"809\":1,\"898\":1,\"904\":1,\"909\":1,\"921\":1,\"926\":1,\"930\":1,\"934\":1,\"1089\":1},\"1\":{\"183\":1,\"1085\":1,\"1162\":1}}],[\"前\",{\"1\":{\"70\":2,\"1129\":1}}],[\"前端工程师最好用\",{\"1\":{\"1126\":1}}],[\"前端工程师\",{\"1\":{\"1126\":1}}],[\"前端实现\",{\"1\":{\"1084\":1}}],[\"前端可以针对同一个按钮进行拦截\",{\"1\":{\"888\":1}}],[\"前端可以通过blob\",{\"1\":{\"708\":1}}],[\"前端每一个页面跳转都要执行\",{\"1\":{\"883\":1}}],[\"前端开发人员可以直接通过代理服务器与后端服务进行交互\",{\"1\":{\"883\":1}}],[\"前端开发基础知识\",{\"1\":{\"216\":1,\"218\":1}}],[\"前端应用和后端api处于不同的域名或端口\",{\"1\":{\"883\":1}}],[\"前端应用通常会经过打包构建\",{\"1\":{\"883\":1}}],[\"前端应用可以直接发送请求到代理服务器\",{\"1\":{\"883\":1}}],[\"前端应用运行在一个开发服务器上\",{\"1\":{\"883\":1}}],[\"前端80\",{\"1\":{\"882\":1}}],[\"前端vue\",{\"1\":{\"878\":1}}],[\"前端发送了所有文件分片之后\",{\"1\":{\"708\":1}}],[\"前端项目\",{\"1\":{\"591\":1}}],[\"前端控制器dispatcherservlet\",{\"1\":{\"480\":1}}],[\"前端代码照抄\",{\"1\":{\"261\":1}}],[\"前端没有传这两个字段\",{\"1\":{\"250\":1}}],[\"前端页面带上到\",{\"1\":{\"238\":1}}],[\"前端校验主要是给一般用户看的\",{\"1\":{\"239\":1}}],[\"前端校验\",{\"0\":{\"237\":1}}],[\"前端限流\",{\"1\":{\"199\":1}}],[\"前端通过有效期时间逆推出token的过期时间之后\",{\"1\":{\"70\":1}}],[\"前端自己记住token有限期\",{\"1\":{\"70\":1}}],[\"前端同样也搭配了\",{\"1\":{\"69\":1}}],[\"前端有\",{\"0\":{\"69\":1}}],[\"前端存\",{\"0\":{\"66\":1}}],[\"前端响应拦截器就删\",{\"1\":{\"65\":1}}],[\"前端\",{\"0\":{\"214\":1,\"623\":1,\"879\":1,\"888\":1},\"1\":{\"65\":1,\"878\":1,\"1150\":1}}],[\"刷的操作都在\",{\"1\":{\"70\":1}}],[\"刷新令牌的拦截器通常是通过spring\",{\"1\":{\"890\":1}}],[\"刷新令牌接口\",{\"1\":{\"890\":1}}],[\"刷新令牌\",{\"1\":{\"890\":1}}],[\"刷新权限表\",{\"1\":{\"793\":1,\"803\":1}}],[\"刷新的原因\",{\"1\":{\"229\":1}}],[\"刷新到18\",{\"1\":{\"115\":1}}],[\"刷新自己\",{\"1\":{\"63\":1}}],[\"刷新\",{\"0\":{\"63\":1}}],[\"个月工资能一样吗\",{\"1\":{\"1130\":1}}],[\"个月工资和\",{\"1\":{\"1130\":1}}],[\"个啦\",{\"1\":{\"1092\":1}}],[\"个可打印字符\",{\"1\":{\"1081\":1}}],[\"个性配置\",{\"1\":{\"981\":1}}],[\"个库和\",{\"1\":{\"961\":1}}],[\"个库\",{\"1\":{\"961\":1}}],[\"个版本\",{\"1\":{\"935\":1}}],[\"个连接中同时执行\",{\"1\":{\"933\":2}}],[\"个并发线程\",{\"1\":{\"932\":1}}],[\"个并发线程要同时更新同一行\",{\"1\":{\"932\":1}}],[\"个客户端\",{\"1\":{\"932\":1}}],[\"个线程在更新\",{\"1\":{\"932\":1}}],[\"个线程执行完才能执行\",{\"1\":{\"331\":1}}],[\"个记录的值的总和\",{\"1\":{\"932\":2}}],[\"个记录\",{\"1\":{\"932\":2}}],[\"个事务\",{\"1\":{\"931\":1}}],[\"个字符\",{\"1\":{\"923\":1}}],[\"个字符串对象\",{\"1\":{\"724\":2}}],[\"个字段\",{\"1\":{\"923\":1}}],[\"个字节的二进制数据编码为\",{\"1\":{\"1081\":1}}],[\"个字节的存储空间\",{\"1\":{\"920\":1}}],[\"个字节\",{\"1\":{\"918\":3,\"920\":1}}],[\"个数据块\",{\"1\":{\"916\":1}}],[\"个文件不要提交\",{\"1\":{\"1005\":1}}],[\"个文件\",{\"1\":{\"899\":1}}],[\"个开源项目的首字母构成\",{\"1\":{\"736\":1}}],[\"个对象\",{\"1\":{\"723\":1}}],[\"个关于常量池的概念\",{\"1\":{\"722\":1}}],[\"个以后\",{\"1\":{\"703\":1}}],[\"个服务来完成\",{\"1\":{\"606\":1}}],[\"个\",{\"1\":{\"385\":2,\"916\":1}}],[\"个默认拒绝策略\",{\"1\":{\"364\":1}}],[\"个被安排上了\",{\"1\":{\"364\":1}}],[\"个继续执行\",{\"1\":{\"364\":1}}],[\"个进入队列排队\",{\"1\":{\"364\":1}}],[\"个能直接得到执行\",{\"1\":{\"364\":1}}],[\"个赞<\",{\"1\":{\"220\":1}}],[\"个拦截器把原requset\",{\"1\":{\"156\":1,\"581\":1}}],[\"个请求\",{\"1\":{\"92\":1}}],[\"个token之所以有这样例子我也会思考存在必要性\",{\"1\":{\"70\":1}}],[\"个人使用感受就是爽\",{\"1\":{\"1160\":1}}],[\"个人用也是蛮好的\",{\"1\":{\"1145\":1}}],[\"个人信息\",{\"1\":{\"1127\":1}}],[\"个人定制化总结\",{\"1\":{\"849\":1}}],[\"个人喜欢用navicat\",{\"1\":{\"805\":1}}],[\"个人对这里jwt作用理解\",{\"1\":{\"627\":1}}],[\"个人感觉\",{\"1\":{\"594\":1}}],[\"个人理解就是\",{\"1\":{\"722\":1}}],[\"个人理解\",{\"1\":{\"518\":1}}],[\"个人觉得pom\",{\"1\":{\"506\":1}}],[\"个人觉得\",{\"1\":{\"78\":1}}],[\"个人觉得没必要维护\",{\"1\":{\"70\":1}}],[\"个人认为不建议使用外键主要是因为对分库分表不友好\",{\"1\":{\"971\":1}}],[\"个人认为新增商品\",{\"1\":{\"261\":1}}],[\"个人认为这四个功能为该项目最折磨人功能\",{\"1\":{\"90\":1}}],[\"个人认为jwt解决最大的问题不是跨域\",{\"1\":{\"70\":1}}],[\"个人认为是频繁点\",{\"1\":{\"64\":1}}],[\"个人总结\",{\"1\":{\"65\":1}}],[\"看起来很有意思\",{\"1\":{\"1150\":1}}],[\"看起来不乏味\",{\"1\":{\"1150\":1}}],[\"看起来确实是没有主键的样子\",{\"1\":{\"972\":1}}],[\"看几篇高质量博客\",{\"1\":{\"1150\":1}}],[\"看的时候会在书上勾勾画画\",{\"1\":{\"1144\":1}}],[\"看的从\",{\"1\":{\"996\":1}}],[\"看似自己学了不少\",{\"1\":{\"1143\":1}}],[\"看似在调用自己写的类\",{\"1\":{\"179\":1}}],[\"看完一节课的视频\",{\"1\":{\"1150\":1}}],[\"看完一遍再从头看\",{\"1\":{\"1143\":1}}],[\"看完之后\",{\"1\":{\"1144\":1}}],[\"看完就知道文件属性了\",{\"1\":{\"786\":1}}],[\"看个电视或者打个游戏来打发时间\",{\"1\":{\"1142\":1}}],[\"看个人习惯都是可以的\",{\"1\":{\"1085\":1}}],[\"看过的书\",{\"1\":{\"1127\":1}}],[\"看过一篇订阅号\",{\"1\":{\"72\":1}}],[\"看触发哪些配置项\",{\"1\":{\"1078\":1}}],[\"看有哪些有哪些构造方法\",{\"0\":{\"1060\":1}}],[\"看电脑系统参数\",{\"0\":{\"1029\":1}}],[\"看萝卜头博客\",{\"1\":{\"1025\":1}}],[\"看这句就很明了了\",{\"1\":{\"1009\":1}}],[\"看这个接口有哪些实现类\",{\"0\":{\"1067\":1}}],[\"看这个类结构\",{\"0\":{\"1067\":1}}],[\"看这个文章迷惑了\",{\"1\":{\"723\":1}}],[\"看这个图\",{\"1\":{\"565\":1}}],[\"看视频感觉更多的是持续集成\",{\"1\":{\"994\":1}}],[\"看视频也可以搭配这个注解\",{\"1\":{\"543\":1,\"1081\":1}}],[\"看书其实是一件很枯燥的事情\",{\"1\":{\"1150\":1}}],[\"看书\",{\"1\":{\"980\":1}}],[\"看来加全局锁不太好\",{\"1\":{\"927\":1}}],[\"看来是实现了自动续期\",{\"1\":{\"115\":1}}],[\"看一遍书\",{\"1\":{\"1150\":1}}],[\"看一个事儿千万不要直接陷入细节里\",{\"1\":{\"892\":1}}],[\"看一下下面这段代码\",{\"1\":{\"725\":1}}],[\"看一下理解\",{\"1\":{\"305\":1}}],[\"看一下\",{\"1\":{\"267\":1}}],[\"看课件\",{\"1\":{\"867\":1}}],[\"看课程目录\",{\"1\":{\"546\":1,\"1166\":1}}],[\"看网上说限制\",{\"1\":{\"866\":1}}],[\"看网上也比较认同\",{\"1\":{\"70\":1}}],[\"看例子\",{\"1\":{\"866\":1}}],[\"看标题的图链接\",{\"1\":{\"844\":1}}],[\"看标题的官网链接\",{\"1\":{\"605\":1}}],[\"看指定端口\",{\"1\":{\"782\":1}}],[\"看10篇文章\",{\"1\":{\"740\":1}}],[\"看javaguide的图\",{\"1\":{\"740\":1}}],[\"看我图片文件夹string\",{\"1\":{\"725\":1}}],[\"看我springboot代码的demo\",{\"1\":{\"466\":1}}],[\"看看一些高质量博客也不错\",{\"1\":{\"1145\":1}}],[\"看看某个知识点的\",{\"1\":{\"1145\":1}}],[\"看看执行计划是否准确\",{\"1\":{\"977\":1}}],[\"看看下面这段代码\",{\"1\":{\"725\":1}}],[\"看看自己的esconstant里面的索引名字写对没\",{\"1\":{\"125\":1}}],[\"看上面场景案例\",{\"1\":{\"1023\":1}}],[\"看上面笔记当时为什么用它的场景\",{\"1\":{\"546\":1}}],[\"看上图\",{\"1\":{\"723\":1}}],[\"看以下好理解\",{\"1\":{\"723\":1}}],[\"看右边\",{\"1\":{\"699\":1}}],[\"看左边\",{\"1\":{\"699\":1}}],[\"看下文\",{\"1\":{\"912\":1}}],[\"看下\",{\"1\":{\"889\":1}}],[\"看下图\",{\"1\":{\"693\":1}}],[\"看下面的例子\",{\"1\":{\"724\":1}}],[\"看下面这个简单的例子\",{\"1\":{\"691\":1}}],[\"看下面会出其它问题\",{\"1\":{\"546\":1}}],[\"看下面\",{\"1\":{\"283\":1}}],[\"看下面例子\",{\"0\":{\"373\":1},\"1\":{\"182\":1}}],[\"看下面代码注释\",{\"1\":{\"113\":1}}],[\"看流程图\",{\"1\":{\"625\":1}}],[\"看日志不方便\",{\"1\":{\"589\":1}}],[\"看顶层的这个接口源码其实也转成了\",{\"1\":{\"543\":1,\"1081\":1}}],[\"看代码demo\",{\"1\":{\"543\":1,\"1081\":1}}],[\"看是否有相关配置项控制哈希值的添加\",{\"1\":{\"539\":1}}],[\"看底层\",{\"1\":{\"352\":1}}],[\"看了一下午\",{\"1\":{\"1150\":1}}],[\"看了这些你会觉得以前写的代码都是问题\",{\"1\":{\"1150\":1}}],[\"看了确实是\",{\"1\":{\"994\":1}}],[\"看了jvm笔记的link地址\",{\"1\":{\"382\":1}}],[\"看了下还是\",{\"1\":{\"309\":1}}],[\"看了视频后发现不是\",{\"1\":{\"179\":1}}],[\"看了视频\",{\"1\":{\"178\":1}}],[\"看基本信息\",{\"0\":{\"270\":1}}],[\"看公司\",{\"1\":{\"241\":1}}],[\"看源码参数缺什么\",{\"1\":{\"231\":1}}],[\"看源码更新token只更了\",{\"1\":{\"69\":1}}],[\"看title解释\",{\"1\":{\"230\":1}}],[\"看\",{\"1\":{\"229\":1,\"845\":1,\"878\":1,\"1144\":1}}],[\"看文档写就行了\",{\"1\":{\"223\":1}}],[\"看到其实是4个内核\",{\"1\":{\"1095\":1}}],[\"看到的仍然跟在启动时看到的一样\",{\"1\":{\"934\":1}}],[\"看到这里你一定有一个疑问\",{\"1\":{\"923\":1}}],[\"看到了\",{\"1\":{\"905\":1}}],[\"看到了p25\",{\"1\":{\"466\":1}}],[\"看到上面这个就证明校验不通过\",{\"1\":{\"239\":1}}],[\"看到\",{\"1\":{\"229\":1,\"546\":1,\"905\":1}}],[\"看到信息\",{\"1\":{\"223\":1}}],[\"看到内存占用是我在\",{\"1\":{\"101\":1}}],[\"看pdf的图片\",{\"1\":{\"201\":1}}],[\"看着一段终于明白了\",{\"1\":{\"694\":1}}],[\"看着有些繁琐\",{\"1\":{\"188\":1,\"844\":1}}],[\"看着配\",{\"1\":{\"112\":1}}],[\"看seata那篇\",{\"0\":{\"185\":1}}],[\"看两张图特别清楚\",{\"1\":{\"159\":1}}],[\"看官网\",{\"1\":{\"148\":1}}],[\"看别人有没有上传过\",{\"1\":{\"132\":1}}],[\"看redis的表现\",{\"1\":{\"115\":1}}],[\"看门狗时间\",{\"1\":{\"115\":1}}],[\"看门狗\",{\"1\":{\"115\":1}}],[\"看门狗会启动一个定时任务\",{\"1\":{\"113\":1}}],[\"看门狗机制的工作原理如下\",{\"1\":{\"113\":1}}],[\"看门狗机制提供的默认超时时间是30\",{\"1\":{\"113\":1}}],[\"看门狗机制是redission提供的一种自动延期机制\",{\"1\":{\"113\":1}}],[\"看github的redisson官方文档就行\",{\"1\":{\"112\":1}}],[\"看本文开头\",{\"1\":{\"103\":1}}],[\"看当前应用是卡在\",{\"1\":{\"101\":1}}],[\"看图说话\",{\"1\":{\"606\":1}}],[\"看图\",{\"1\":{\"210\":1,\"598\":1,\"865\":1}}],[\"看图形化分析\",{\"1\":{\"100\":1}}],[\"看图片红色部分\",{\"1\":{\"93\":1}}],[\"看自己juc篇的笔记\",{\"1\":{\"89\":1}}],[\"看自己标注的\",{\"1\":{\"87\":1}}],[\"分屏\",{\"1\":{\"1164\":1}}],[\"分号写成中文的了\",{\"1\":{\"1150\":1}}],[\"分分钟就记起来了\",{\"1\":{\"1144\":1}}],[\"分治思想\",{\"0\":{\"1085\":1}}],[\"分散数据能够缓解单个数据库的压力\",{\"1\":{\"960\":1}}],[\"分表\",{\"1\":{\"959\":1,\"960\":1}}],[\"分成了几种不同的情况\",{\"1\":{\"935\":1}}],[\"分开声明的两个\",{\"1\":{\"925\":1}}],[\"分摊压力\",{\"1\":{\"865\":1}}],[\"分数则是\",{\"1\":{\"786\":1}}],[\"分数是需要累加的\",{\"1\":{\"786\":1}}],[\"分层\",{\"1\":{\"688\":1}}],[\"分段锁的设计\",{\"1\":{\"740\":1}}],[\"分段锁来保证安全\",{\"1\":{\"740\":1}}],[\"分段锁内部类\",{\"1\":{\"674\":1}}],[\"分段查询\",{\"1\":{\"427\":1}}],[\"分段查询的基础之上加上两个配置\",{\"1\":{\"424\":1}}],[\"分起\",{\"1\":{\"642\":1}}],[\"分离的话肯定不能这样\",{\"1\":{\"618\":1}}],[\"分为口头\",{\"1\":{\"1103\":1}}],[\"分为\",{\"1\":{\"887\":1}}],[\"分为系统默认和客户自定义\",{\"1\":{\"604\":1}}],[\"分为动态代理和静\",{\"1\":{\"498\":1}}],[\"分两步走\",{\"1\":{\"583\":1}}],[\"分区\",{\"1\":{\"572\":3,\"959\":2}}],[\"分区容错性\",{\"1\":{\"571\":1}}],[\"分隔符\",{\"0\":{\"946\":1}}],[\"分隔\",{\"1\":{\"549\":1}}],[\"分隔成三个部分\",{\"1\":{\"70\":1}}],[\"分支名\",{\"1\":{\"987\":2,\"989\":1,\"990\":1}}],[\"分支事务用\",{\"1\":{\"607\":1}}],[\"分支选择\",{\"1\":{\"430\":1,\"433\":1}}],[\"分支控制\",{\"1\":{\"88\":1}}],[\"分步查询\",{\"0\":{\"423\":1,\"427\":1}}],[\"分代收集算法\",{\"1\":{\"385\":1,\"389\":1}}],[\"分配地址\",{\"1\":{\"1092\":1}}],[\"分配到多个数据库或多个数据表中\",{\"1\":{\"961\":1}}],[\"分配内存空间\",{\"1\":{\"302\":1,\"779\":1}}],[\"分配对象内存空间\",{\"1\":{\"301\":2}}],[\"分别用于存储项目数据定义表\",{\"1\":{\"960\":1}}],[\"分别启动\",{\"1\":{\"861\":1}}],[\"分别登录两个用户么\",{\"1\":{\"785\":1}}],[\"分别是\",{\"1\":{\"736\":1}}],[\"分别是信息流\",{\"1\":{\"158\":1}}],[\"分别使用三个独立的数据源\",{\"1\":{\"606\":1}}],[\"分别存储在各自的工作内存\",{\"1\":{\"305\":1}}],[\"分别跑在不同的cpu上\",{\"1\":{\"305\":1}}],[\"分别调用method01\",{\"1\":{\"295\":1}}],[\"分词器可以有自定义词库\",{\"0\":{\"282\":1}}],[\"分词器\",{\"0\":{\"281\":1},\"1\":{\"281\":1}}],[\"分词\",{\"0\":{\"264\":1},\"1\":{\"281\":1}}],[\"分组\",{\"1\":{\"244\":1,\"598\":1}}],[\"分组校验\",{\"0\":{\"241\":1}}],[\"分类\",{\"1\":{\"244\":1}}],[\"分类为\",{\"1\":{\"28\":1}}],[\"分基础\",{\"1\":{\"203\":1}}],[\"分\",{\"1\":{\"201\":1,\"606\":1}}],[\"分库需了解\",{\"1\":{\"961\":1}}],[\"分库和分表并不一定两个都要上\",{\"1\":{\"961\":1}}],[\"分库解决的是数据库端\",{\"1\":{\"961\":1}}],[\"分库分表最难解决的问题是统计\",{\"1\":{\"961\":1}}],[\"分库分表\",{\"1\":{\"961\":1}}],[\"分库分表实际上是分布式存储中一种数据分片的解决方案\",{\"1\":{\"960\":1}}],[\"分库分表的方法有很多种\",{\"1\":{\"960\":1,\"961\":1}}],[\"分库是根据业务不同把相关的表切分到不同的数据库中\",{\"1\":{\"960\":1}}],[\"分库之后\",{\"1\":{\"183\":1}}],[\"分库\",{\"1\":{\"183\":1,\"959\":2,\"960\":1}}],[\"分析完原因之后\",{\"1\":{\"909\":1}}],[\"分析日志行为提前发现问题\",{\"1\":{\"908\":1}}],[\"分析器会通过词法和语法解析知道这是一条更新语句\",{\"1\":{\"898\":1}}],[\"分析器阶段\",{\"1\":{\"897\":1}}],[\"分析器先会做\",{\"1\":{\"895\":1}}],[\"分析器\",{\"0\":{\"895\":1},\"1\":{\"892\":2}}],[\"分析了这一个其他都差不多\",{\"1\":{\"884\":1}}],[\"分析和过滤\",{\"1\":{\"736\":1}}],[\"分析和调优工具\",{\"1\":{\"389\":1}}],[\"分析是否生效装配进来了\",{\"1\":{\"483\":1}}],[\"分析\",{\"1\":{\"178\":1,\"391\":1,\"392\":1,\"685\":1}}],[\"分析响应数据\",{\"1\":{\"126\":1}}],[\"分布下session问题\",{\"1\":{\"130\":1}}],[\"分布式下日志收集\",{\"0\":{\"733\":1}}],[\"分布式下会每个一份\",{\"1\":{\"103\":1}}],[\"分布式架构肯定是多数据库\",{\"1\":{\"606\":1}}],[\"分布式任务调度\",{\"1\":{\"594\":1}}],[\"分布式配置管理\",{\"1\":{\"594\":1}}],[\"分布式存储中一般一份数据会有多个副本\",{\"1\":{\"572\":1}}],[\"分布式系统中\",{\"1\":{\"571\":1}}],[\"分布式系统在遇到网络故障的时候\",{\"1\":{\"571\":1}}],[\"分布式系统经常出现的异常\",{\"1\":{\"183\":1}}],[\"分布式\",{\"1\":{\"553\":1,\"961\":1}}],[\"分布式微服务架构的一站式解决方案\",{\"1\":{\"553\":1}}],[\"分布式高级\",{\"1\":{\"533\":1}}],[\"分布式基础概念\",{\"0\":{\"208\":1}}],[\"分布式每个服务用自己的数据库\",{\"1\":{\"183\":1}}],[\"分布式事务处理过程的一id+三组件模型\",{\"1\":{\"606\":1}}],[\"分布式事务几种方案\",{\"1\":{\"572\":1}}],[\"分布式事务基础理论\",{\"1\":{\"183\":1}}],[\"分布式事务的终极目标就是保证系统中多个相关联的数据库中的数据的一致性\",{\"1\":{\"183\":1}}],[\"分布式事务解决方案有哪些\",{\"1\":{\"183\":1}}],[\"分布式事务\",{\"0\":{\"732\":1},\"1\":{\"176\":1,\"183\":1,\"594\":1}}],[\"分布式session解决方案\",{\"0\":{\"142\":1}}],[\"分布式session\",{\"0\":{\"140\":1}}],[\"分布式set\",{\"1\":{\"112\":1}}],[\"分布式消息队列等等\",{\"1\":{\"112\":1}}],[\"分布式bitset\",{\"1\":{\"112\":1}}],[\"分布式对象存储和分布式限流等\",{\"1\":{\"112\":1}}],[\"分布式集群选举\",{\"1\":{\"112\":1}}],[\"分布式list等等\",{\"1\":{\"112\":1}}],[\"分布式的可伸缩的java工具\",{\"1\":{\"112\":1}}],[\"分布式项目时\",{\"1\":{\"109\":1}}],[\"分布式锁主流的实现方案\",{\"1\":{\"868\":1}}],[\"分布式锁和缓存时\",{\"1\":{\"849\":1}}],[\"分布式锁和缓存等功能\",{\"1\":{\"849\":1}}],[\"分布式锁重\",{\"1\":{\"123\":1}}],[\"分布式锁\",{\"0\":{\"109\":1,\"116\":1,\"171\":1,\"851\":1},\"1\":{\"849\":2}}],[\"分布式锁的实现方式\",{\"1\":{\"87\":1}}],[\"分布式锁用的redis的哪种数据结构\",{\"0\":{\"87\":1,\"115\":1}}],[\"分布式锁全家桶丨一套搞定redis\",{\"1\":{\"78\":1}}],[\"分片上传\",{\"1\":{\"708\":1}}],[\"分片\",{\"1\":{\"103\":1}}],[\"分片的实现方式通常是将数据根据其键进行哈希\",{\"1\":{\"103\":1}}],[\"分片中\",{\"1\":{\"103\":1}}],[\"分片是一种将数据分散存储在多个\",{\"1\":{\"103\":1}}],[\"分片存概念\",{\"1\":{\"103\":1}}],[\"分批读取数据\",{\"1\":{\"91\":1}}],[\"分页数据使用的是\",{\"1\":{\"887\":1}}],[\"分页\",{\"1\":{\"91\":1}}],[\"签名可以想象为\",{\"1\":{\"190\":1}}],[\"签名\",{\"1\":{\"70\":1}}],[\"载荷\",{\"1\":{\"70\":1}}],[\"头晕~\",{\"1\":{\"1081\":1}}],[\"头疼了很久\",{\"1\":{\"996\":1}}],[\"头插法的锅\",{\"1\":{\"694\":1}}],[\"头一次知道还有这个功能\",{\"1\":{\"101\":1}}],[\"头部\",{\"1\":{\"70\":1}}],[\"头标将之返回到服务器\",{\"1\":{\"49\":1}}],[\"头标将它作为\",{\"1\":{\"49\":1}}],[\"常翻的一张图\",{\"1\":{\"961\":1}}],[\"常量折叠会将编译期常量的加减乘除的运算过程在编译过程中折叠\",{\"1\":{\"725\":1}}],[\"常量\",{\"1\":{\"722\":1}}],[\"常量池\",{\"1\":{\"695\":1}}],[\"常量和常量拼接结果在常量池\",{\"1\":{\"687\":1}}],[\"常见集成模式\",{\"0\":{\"612\":1}}],[\"常见的比如慕课网\",{\"1\":{\"1145\":1}}],[\"常见的有\",{\"1\":{\"1114\":1}}],[\"常见的做法有两种\",{\"1\":{\"970\":1}}],[\"常见的两种分库分表的方式\",{\"1\":{\"960\":1}}],[\"常见的哈希函数\",{\"1\":{\"739\":1}}],[\"常见的服务降级策略有以下几种\",{\"1\":{\"603\":1}}],[\"常见的连接池库包括\",{\"1\":{\"393\":1}}],[\"常见的\",{\"0\":{\"365\":1}}],[\"常见的负载均衡算法\",{\"1\":{\"208\":1}}],[\"常见的需要转义的字符\",{\"1\":{\"60\":1}}],[\"常规索引\",{\"1\":{\"936\":1}}],[\"常规操作\",{\"1\":{\"596\":1}}],[\"常规数据\",{\"1\":{\"108\":1}}],[\"常用代码模板1\",{\"1\":{\"1085\":1}}],[\"常用\",{\"1\":{\"786\":1}}],[\"常用于判断条件\",{\"1\":{\"959\":1}}],[\"常用于处理嵌套集合或映射的情况\",{\"1\":{\"775\":1}}],[\"常用于认证授权方面\",{\"1\":{\"70\":1}}],[\"常用的\",{\"1\":{\"748\":1,\"770\":1}}],[\"常用的封装类\",{\"0\":{\"252\":1}}],[\"常用来处理配置文件\",{\"1\":{\"688\":1}}],[\"常用应用场景\",{\"1\":{\"156\":1}}],[\"常用配置\",{\"1\":{\"71\":1}}],[\"之外的任意一个字符\",{\"1\":{\"959\":1}}],[\"之类的解决方案\",{\"1\":{\"909\":1}}],[\"之类的话\",{\"1\":{\"539\":1,\"1083\":1}}],[\"之所以\",{\"1\":{\"905\":1}}],[\"之所以这样跳\",{\"1\":{\"879\":1}}],[\"之所以有这个问题\",{\"1\":{\"871\":1}}],[\"之所以要这一步可能就是因为这样\",{\"1\":{\"780\":1}}],[\"之所以是线程安全的\",{\"1\":{\"700\":1}}],[\"之所以不通过\",{\"1\":{\"685\":1}}],[\"之于\",{\"1\":{\"267\":1}}],[\"之前还用过\",{\"1\":{\"1005\":1}}],[\"之前提交的记录都不会丢失\",{\"1\":{\"899\":1}}],[\"之前你可能经常听\",{\"1\":{\"898\":1}}],[\"之前执行过的语句及其结果可能会以\",{\"1\":{\"894\":1}}],[\"之前是不是执行过这条语句\",{\"1\":{\"894\":1}}],[\"之前以为控制台输出了sql就是没有命中缓存\",{\"1\":{\"876\":1}}],[\"之前迭代器的做法\",{\"1\":{\"768\":1}}],[\"之前也尝试使用过\",{\"1\":{\"713\":1}}],[\"之前我一直有一个误区\",{\"1\":{\"658\":1}}],[\"之前的case\",{\"1\":{\"604\":1}}],[\"之前的版本中\",{\"1\":{\"383\":1}}],[\"之前都先用这个\",{\"1\":{\"560\":1}}],[\"之前会拼接一串\",{\"1\":{\"539\":1}}],[\"之前\",{\"1\":{\"218\":1,\"636\":1,\"660\":1,\"686\":1,\"727\":1,\"740\":1,\"924\":1,\"928\":1}}],[\"之间到达\",{\"1\":{\"929\":1}}],[\"之间又加一层\",{\"1\":{\"866\":1}}],[\"之间的是\",{\"1\":{\"899\":1}}],[\"之间的所有整数\",{\"1\":{\"739\":1}}],[\"之间的依赖关系\",{\"1\":{\"543\":1}}],[\"之间\",{\"1\":{\"594\":1}}],[\"之间相互依赖的情况\",{\"1\":{\"543\":2}}],[\"之间是如何互相影响的\",{\"1\":{\"218\":1}}],[\"之间进行拦截和处理\",{\"1\":{\"156\":1}}],[\"之间共享数据\",{\"1\":{\"156\":1}}],[\"之间密切相关\",{\"1\":{\"112\":1}}],[\"之间安全的传送信息\",{\"1\":{\"70\":1}}],[\"之后事务\",{\"1\":{\"934\":1}}],[\"之后开发人员或者\",{\"1\":{\"928\":1}}],[\"之后其他线程的以下语句会被阻塞\",{\"1\":{\"927\":1}}],[\"之后备份日志的时候\",{\"1\":{\"901\":1}}],[\"之后即使掌柜忘记了\",{\"1\":{\"899\":1}}],[\"之后循环取\",{\"1\":{\"897\":1}}],[\"之后要查询再重连\",{\"1\":{\"893\":1}}],[\"之后就开始安装mysql服务器\",{\"1\":{\"801\":1}}],[\"之后向链表头部插入了元素\",{\"1\":{\"694\":1}}],[\"之后一定会结束当前的分布式事务\",{\"1\":{\"609\":1}}],[\"之后都是cglib\",{\"1\":{\"504\":1}}],[\"之后是c\",{\"1\":{\"849\":1}}],[\"之后是\",{\"1\":{\"227\":1,\"528\":1}}],[\"之后\",{\"1\":{\"48\":1,\"660\":4,\"694\":1,\"713\":1,\"740\":1,\"893\":1,\"927\":1,\"928\":1,\"931\":1,\"1005\":1}}],[\"纯接口方面的用户认证问题\",{\"1\":{\"70\":1}}],[\"概率\",{\"1\":{\"687\":1}}],[\"概述\",{\"0\":{\"562\":1}}],[\"概念的基础\",{\"1\":{\"823\":1}}],[\"概念\",{\"0\":{\"70\":1,\"303\":1,\"314\":1,\"321\":1,\"332\":1,\"337\":1,\"341\":1,\"345\":1,\"606\":1,\"960\":1}}],[\"概括起来\",{\"1\":{\"49\":1}}],[\"再比如air\",{\"1\":{\"1164\":1}}],[\"再也不敢了\",{\"1\":{\"1154\":1}}],[\"再也不会遇到\",{\"1\":{\"1005\":1}}],[\"再shift\",{\"0\":{\"1064\":1}}],[\"再指针放列间隙中变成十字双击\",{\"1\":{\"1051\":1}}],[\"再找不到就报错给你看\",{\"1\":{\"1009\":1}}],[\"再关联到\",{\"1\":{\"1005\":1}}],[\"再修改\",{\"1\":{\"1005\":1}}],[\"再执行这两条命令\",{\"1\":{\"1005\":1}}],[\"再执行上面的sal语句时\",{\"1\":{\"170\":1}}],[\"再理解\",{\"1\":{\"993\":1}}],[\"再切回dev分支\",{\"1\":{\"990\":1}}],[\"再做出相应的调\",{\"1\":{\"977\":1}}],[\"再进行主从切换\",{\"1\":{\"976\":1}}],[\"再进行处理\",{\"1\":{\"49\":1}}],[\"再将userdb上的用户数据表usertable\",{\"1\":{\"960\":1}}],[\"再将信息存入到方法区\",{\"1\":{\"722\":1}}],[\"再扩展\",{\"1\":{\"938\":1}}],[\"再设置一次\",{\"1\":{\"929\":1}}],[\"再请求的话\",{\"1\":{\"928\":1}}],[\"再按\",{\"1\":{\"925\":2}}],[\"再对比字段值\",{\"1\":{\"924\":1}}],[\"再对比一下hashcode\",{\"1\":{\"721\":1}}],[\"再假设执行\",{\"1\":{\"901\":1}}],[\"再调用引擎接口写入这行新数据\",{\"1\":{\"900\":1}}],[\"再写\",{\"1\":{\"901\":1}}],[\"再写磁盘\",{\"1\":{\"899\":1}}],[\"再写一个方法来囊括\",{\"1\":{\"240\":1}}],[\"再判断\",{\"1\":{\"896\":2}}],[\"再根据查询结果进行二次查询\",{\"1\":{\"970\":1}}],[\"再根据\",{\"1\":{\"896\":2}}],[\"再实践验证\",{\"1\":{\"891\":1}}],[\"再用临时文件替换上次持久化好的文件\",{\"1\":{\"859\":1}}],[\"再把旧表数据复\",{\"1\":{\"976\":1}}],[\"再把这个文件填上网上的内容了就可以了\",{\"1\":{\"795\":1}}],[\"再把一些没有的组件删掉\",{\"1\":{\"223\":1}}],[\"再通过重试命令重复这个过程\",{\"1\":{\"928\":1}}],[\"再通过spring提供的importselector这样一个接口\",{\"1\":{\"731\":1}}],[\"再通过某种算法得到在entry数组中的存放位置\",{\"1\":{\"688\":1}}],[\"再使用构造方法创建\",{\"1\":{\"722\":1}}],[\"再使它的value指向堆上的\",{\"1\":{\"722\":1}}],[\"再啰嗦说一点题外话\",{\"1\":{\"721\":1}}],[\"再回到\",{\"1\":{\"921\":1}}],[\"再回头看上面这道题\",{\"1\":{\"720\":1}}],[\"再回顾彻底搞清\",{\"1\":{\"694\":1}}],[\"再来一手墨墨\",{\"1\":{\"1162\":1}}],[\"再来一道\",{\"1\":{\"658\":1}}],[\"再来举一个例子\",{\"1\":{\"715\":1}}],[\"再去和自己的笔记合并\",{\"1\":{\"707\":1}}],[\"再去google\",{\"1\":{\"552\":1}}],[\"再和这个位置上的元素比\",{\"1\":{\"688\":1}}],[\"再反序列化回来就是一个新对象\",{\"1\":{\"683\":1}}],[\"再解决实际问题\",{\"1\":{\"678\":1}}],[\"再返回自加后的值\",{\"1\":{\"670\":1}}],[\"再看一遍视频\",{\"1\":{\"1150\":1}}],[\"再看一段代码\",{\"1\":{\"725\":1}}],[\"再看我们把teacher类继承student\",{\"1\":{\"662\":1}}],[\"再看看执行流程\",{\"1\":{\"388\":1}}],[\"再\",{\"0\":{\"1059\":1},\"1\":{\"658\":1,\"976\":1}}],[\"再接着三个构造块\",{\"1\":{\"658\":1}}],[\"再继续提供服务\",{\"1\":{\"571\":1}}],[\"再说点题外话\",{\"1\":{\"725\":1}}],[\"再说这几个参数\",{\"1\":{\"383\":1}}],[\"再说下synchronized\",{\"1\":{\"329\":1}}],[\"再换回太子\",{\"1\":{\"309\":1}}],[\"再次使用\",{\"1\":{\"1021\":1}}],[\"再次读取同一条记录\",{\"1\":{\"905\":1}}],[\"再次调用查看配置的接口\",{\"1\":{\"598\":1}}],[\"再次进入下一个循环\",{\"1\":{\"312\":1}}],[\"再次强调\",{\"1\":{\"303\":1}}],[\"再次提交则匹配失败\",{\"1\":{\"167\":1}}],[\"再数据库中没有被移除\",{\"1\":{\"229\":1}}],[\"再放行请求到服务器\",{\"1\":{\"126\":1}}],[\"再刷新又变成了30\",{\"1\":{\"115\":1}}],[\"再到\",{\"1\":{\"78\":1,\"917\":1,\"921\":1}}],[\"再拿t2\",{\"1\":{\"932\":1,\"933\":1}}],[\"再拿\",{\"1\":{\"69\":1}}],[\"拿不到也不要阻塞后面的业务语句\",{\"1\":{\"928\":1}}],[\"拿不到参数\",{\"1\":{\"512\":1}}],[\"拿验证码请求举例\",{\"1\":{\"879\":1}}],[\"拿上面数学的方式理解\",{\"1\":{\"688\":1}}],[\"拿用户信息比如\",{\"1\":{\"627\":1}}],[\"拿用户信息放\",{\"1\":{\"627\":1}}],[\"拿数据的那一台就一层层的数据拆封\",{\"1\":{\"688\":1}}],[\"拿数据\",{\"1\":{\"161\":1}}],[\"拿封装给threadlocal\",{\"1\":{\"157\":1}}],[\"拿着令牌访问资源服务器看令牌合法性\",{\"1\":{\"136\":1}}],[\"拿每一次的更新\",{\"1\":{\"119\":1}}],[\"拿了\",{\"1\":{\"95\":1}}],[\"拿到手软\",{\"1\":{\"1103\":1}}],[\"拿到一个查询请求后\",{\"1\":{\"894\":1}}],[\"拿到库存锁定工作单解锁库存\",{\"1\":{\"844\":1}}],[\"拿到对应的资源\",{\"1\":{\"627\":1}}],[\"拿到mapper接口对应的mapperproxy\",{\"1\":{\"465\":1}}],[\"拿到value值3\",{\"1\":{\"305\":1}}],[\"拿到主存中的\",{\"1\":{\"290\":1}}],[\"拿到\",{\"1\":{\"69\":1,\"234\":1,\"591\":1}}],[\"拿\",{\"1\":{\"69\":1,\"283\":1,\"551\":1,\"1166\":1}}],[\"后加别的网址\",{\"1\":{\"1041\":1}}],[\"后加载会覆盖掉前加载\",{\"1\":{\"543\":1}}],[\"后者不包只匹一行\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"后也找到了办法\",{\"1\":{\"1005\":1}}],[\"后只保留一条和\",{\"1\":{\"1005\":1}}],[\"后又发现\",{\"1\":{\"996\":1}}],[\"后补充\",{\"1\":{\"996\":1}}],[\"后需要\",{\"1\":{\"990\":1}}],[\"后可以用\",{\"1\":{\"959\":1}}],[\"后一起用两个\",{\"1\":{\"925\":1}}],[\"后访问的事务必须等前一个事务执行完成\",{\"1\":{\"905\":1}}],[\"后写\",{\"1\":{\"901\":2}}],[\"后点的可能秒到了\",{\"1\":{\"858\":1}}],[\"后期定期重发消息\",{\"1\":{\"836\":1}}],[\"后期自己根据网友笔记再补代码\",{\"1\":{\"198\":1}}],[\"后无法进行类型判断\",{\"1\":{\"717\":2}}],[\"后醒来继续改指针\",{\"1\":{\"693\":1}}],[\"后台改改热点数据的ttl\",{\"1\":{\"867\":1}}],[\"后台运行\",{\"1\":{\"790\":1}}],[\"后台实现落库查form\",{\"1\":{\"626\":1}}],[\"后台脚手架平台一般是后端顺手写出来的\",{\"1\":{\"234\":1}}],[\"后来\",{\"1\":{\"686\":1}}],[\"后来的请求不再去调用这个服务\",{\"1\":{\"582\":1}}],[\"后来懂了\",{\"1\":{\"543\":1,\"1081\":1}}],[\"后来有同事增加了时间戳\",{\"1\":{\"539\":1,\"1083\":1}}],[\"后来补充\",{\"0\":{\"184\":1},\"1\":{\"179\":1,\"571\":1,\"686\":1,\"858\":1}}],[\"后置的判断就会过滤掉\",{\"1\":{\"876\":1}}],[\"后置拦截器\",{\"1\":{\"619\":1}}],[\"后置逻辑\",{\"1\":{\"496\":1}}],[\"后置处理器的方法\",{\"1\":{\"489\":2}}],[\"后置处理等\",{\"1\":{\"489\":1}}],[\"后缀覆盖\",{\"1\":{\"432\":1}}],[\"后缀\",{\"1\":{\"432\":1}}],[\"后的表结构\",{\"1\":{\"929\":1}}],[\"后的目录需要提前建好\",{\"1\":{\"800\":1}}],[\"后的结果\",{\"1\":{\"432\":1}}],[\"后的请求\",{\"0\":{\"69\":1}}],[\"后续如果想新增表或者执行sql可以直接在migration目录按照规则新建migration文件即可\",{\"1\":{\"1079\":1}}],[\"后续查询\",{\"1\":{\"959\":1}}],[\"后续元素的索引会向前移动\",{\"1\":{\"645\":1}}],[\"后续流程依旧是掉系统的\",{\"1\":{\"621\":1}}],[\"后续线程尝试获取锁时\",{\"1\":{\"379\":1}}],[\"后续的每个业务逻辑也可以从\",{\"1\":{\"156\":1}}],[\"后才能看到商品详情页的内容\",{\"1\":{\"372\":1}}],[\"后七个执行完才能执行\",{\"1\":{\"336\":1}}],[\"后发现\",{\"1\":{\"302\":1,\"779\":1}}],[\"后话\",{\"1\":{\"240\":1,\"263\":1,\"506\":1,\"800\":1}}],[\"后会带签名等信息给你去验证\",{\"1\":{\"192\":1}}],[\"后再次发送\",{\"1\":{\"128\":1}}],[\"后面我最终的解决是把所有书签删了搭梯子重新同步一下\",{\"1\":{\"1154\":1}}],[\"后面我光order模块总是有这个问题\",{\"1\":{\"105\":1}}],[\"后面其实都可以用\",{\"1\":{\"985\":1}}],[\"后面要继续增加数据库数或者表数时\",{\"1\":{\"961\":1}}],[\"后面要换实现类了只用换实现类一个地方\",{\"1\":{\"252\":1}}],[\"后面小写\",{\"0\":{\"945\":1}}],[\"后面还跟了一个链表\",{\"1\":{\"914\":1}}],[\"后面还会讲导入\",{\"1\":{\"112\":1}}],[\"后面写在命令行中\",{\"1\":{\"893\":1}}],[\"后面高版本没有这个optional了\",{\"1\":{\"871\":1}}],[\"后面高级篇讲解alibaba的sentinel说明\",{\"1\":{\"588\":1}}],[\"后面30对应的是我java那篇文章\",{\"1\":{\"866\":1}}],[\"后面大致捋了下\",{\"1\":{\"844\":1}}],[\"后面几篇文章不再提醒\",{\"1\":{\"740\":1}}],[\"后面的无数个a\",{\"1\":{\"603\":1}}],[\"后面那些都有抄它的借鉴它的理念\",{\"1\":{\"581\":1}}],[\"后面就驴头不对马嘴了\",{\"1\":{\"1093\":1}}],[\"后面就有人提出平衡二叉查找树\",{\"1\":{\"916\":1}}],[\"后面就不会了\",{\"1\":{\"576\":1}}],[\"后面就直接用注解了方便的很\",{\"1\":{\"112\":1}}],[\"后面可以利用一些手段校验它不该存在并删了它\",{\"1\":{\"572\":1}}],[\"后面多出的and或者or\",{\"1\":{\"432\":1}}],[\"后面商品搜索也是照抄代码\",{\"1\":{\"263\":1}}],[\"后面补充\",{\"1\":{\"183\":1}}],[\"后面限制20人就好多了\",{\"1\":{\"77\":1}}],[\"后\",{\"1\":{\"70\":2,\"152\":2,\"229\":1,\"598\":1}}],[\"后端程序员为例\",{\"1\":{\"1107\":1}}],[\"后端quartz具体怎么执行的\",{\"1\":{\"887\":1}}],[\"后端逻辑三步\",{\"1\":{\"883\":1}}],[\"后端8080\",{\"1\":{\"882\":1}}],[\"后端开发\",{\"1\":{\"713\":1}}],[\"后端可以randomaccessfile类帮助我们合并文件分片\",{\"1\":{\"708\":1}}],[\"后端加了事务\",{\"0\":{\"257\":1}}],[\"后端校验解决此问题\",{\"1\":{\"129\":1}}],[\"后端返回token的有效期\",{\"1\":{\"70\":1}}],[\"后端拦截校验\",{\"1\":{\"70\":1}}],[\"后端设置\",{\"0\":{\"68\":1}}],[\"后端如果redis过期\",{\"1\":{\"67\":1}}],[\"后端存\",{\"0\":{\"67\":1}}],[\"后端\",{\"0\":{\"227\":1,\"622\":1,\"889\":1},\"1\":{\"65\":1,\"69\":1,\"1109\":1}}],[\"yoink\",{\"1\":{\"1003\":1}}],[\"youtube\",{\"0\":{\"980\":1}}],[\"yourtable\",{\"1\":{\"959\":1}}],[\"your\",{\"1\":{\"473\":1,\"546\":1,\"895\":3,\"938\":2,\"1005\":5}}],[\"yourclassname\",{\"1\":{\"179\":1}}],[\"young\",{\"1\":{\"385\":2}}],[\"you\",{\"1\":{\"223\":1,\"473\":1,\"895\":2,\"938\":1,\"941\":2,\"1005\":1}}],[\"yuque\",{\"1\":{\"868\":1}}],[\"yum其他介绍\",{\"1\":{\"810\":1}}],[\"yum通过分析rpm\",{\"1\":{\"810\":1}}],[\"yum\",{\"1\":{\"801\":3,\"810\":2,\"857\":1}}],[\"yi\",{\"0\":{\"1179\":1}}],[\"yield\",{\"0\":{\"650\":1},\"1\":{\"650\":3,\"687\":1}}],[\"yigo\",{\"1\":{\"546\":1,\"1013\":2}}],[\"yellowdog\",{\"1\":{\"810\":1}}],[\"year\",{\"0\":{\"954\":1},\"1\":{\"411\":1,\"951\":2,\"954\":1}}],[\"yes\",{\"0\":{\"967\":1},\"1\":{\"213\":1,\"787\":3,\"853\":1,\"1005\":3}}],[\"y的申明\",{\"1\":{\"293\":1}}],[\"yyyy\",{\"1\":{\"247\":1}}],[\"yml里的内容都分文件抽离出去\",{\"1\":{\"598\":1}}],[\"yml优先级高于application\",{\"1\":{\"593\":1}}],[\"yml先加载的\",{\"1\":{\"593\":1}}],[\"yml是比application\",{\"1\":{\"593\":1}}],[\"yml是系统级的\",{\"1\":{\"593\":1}}],[\"yml是用户级的资源配置项\",{\"1\":{\"593\":1}}],[\"yml文件配置rabbitmq相关信息\",{\"1\":{\"827\":2}}],[\"yml文件改为bootstrap\",{\"1\":{\"593\":1}}],[\"yml文件\",{\"1\":{\"593\":1}}],[\"yml文件里需要开启openfeign客户端超时控制\",{\"1\":{\"577\":1}}],[\"yml文件中添加以下配置\",{\"1\":{\"60\":1}}],[\"yml\",{\"1\":{\"267\":3,\"522\":2,\"593\":3,\"598\":5,\"981\":2,\"998\":2,\"1005\":1}}],[\"yml中测试结果与上面相同\",{\"1\":{\"229\":1}}],[\"yml中配置\",{\"1\":{\"229\":1}}],[\"y\",{\"1\":{\"219\":1,\"249\":1,\"293\":2,\"294\":5,\"718\":4,\"787\":1,\"800\":1,\"801\":2,\"914\":1,\"915\":2,\"923\":7,\"1005\":3}}],[\"ycpj5loy\",{\"1\":{\"133\":2}}],[\"yaml配置\",{\"1\":{\"591\":1}}],[\"yaml配置能热部署的了\",{\"1\":{\"124\":1}}],[\"yaml\",{\"0\":{\"598\":1},\"1\":{\"107\":1,\"150\":1,\"229\":3,\"522\":2,\"543\":4,\"578\":1,\"591\":4,\"593\":3,\"594\":2,\"597\":1,\"598\":2}}],[\"yxykcvclmj2evwxvsjop1b2ccrw\",{\"1\":{\"68\":1}}],[\"里有很多都和\",{\"1\":{\"1150\":1}}],[\"里调用\",{\"1\":{\"1081\":1}}],[\"里被\",{\"1\":{\"1019\":1}}],[\"里的全部关掉\",{\"1\":{\"1006\":1}}],[\"里把\",{\"1\":{\"1006\":1}}],[\"里我把内置的全删了\",{\"1\":{\"1005\":1}}],[\"里选\",{\"1\":{\"1005\":1}}],[\"里选上第一和第三个\",{\"1\":{\"1005\":1}}],[\"里不要\",{\"1\":{\"1005\":1}}],[\"里记得把\",{\"1\":{\"1005\":1}}],[\"里修改配置目录指向他\",{\"1\":{\"1005\":1}}],[\"里找有没有\",{\"1\":{\"1003\":1}}],[\"里并没有\",{\"1\":{\"900\":1}}],[\"里经常说到的\",{\"1\":{\"899\":1}}],[\"里也有这个问题\",{\"1\":{\"899\":1}}],[\"里是怎么工作的\",{\"0\":{\"935\":1}}],[\"里是注解过的地方\",{\"1\":{\"889\":1}}],[\"里是用的\",{\"1\":{\"426\":1}}],[\"里即可\",{\"1\":{\"627\":1}}],[\"里没有\",{\"1\":{\"210\":1,\"789\":1}}],[\"里面也可以\",{\"1\":{\"1080\":1}}],[\"里面也有相关文档地址\",{\"1\":{\"451\":1}}],[\"里面每个事务有一个唯一的事务\",{\"1\":{\"935\":1}}],[\"里面表级别的锁有两种\",{\"1\":{\"928\":1}}],[\"里面对应一棵\",{\"1\":{\"917\":1}}],[\"里面最重要的两个日志\",{\"1\":{\"902\":1}}],[\"里面已经记录了\",{\"1\":{\"901\":1}}],[\"里面就会有类似下面的记录\",{\"1\":{\"906\":1}}],[\"里面就没有这条语句\",{\"1\":{\"901\":1}}],[\"里面就没有记录这个语句\",{\"1\":{\"901\":1}}],[\"里面就有\",{\"1\":{\"381\":1}}],[\"里面会有详细的说明\",{\"1\":{\"897\":1}}],[\"里面\",{\"1\":{\"896\":2,\"899\":1,\"900\":1,\"906\":1,\"932\":1,\"933\":1}}],[\"里面取出\",{\"1\":{\"896\":2}}],[\"里面写好了敏感信息所以上述这部省略\",{\"1\":{\"796\":1}}],[\"里面定义了一个根据用户名查询用户信息的方法\",{\"1\":{\"620\":1}}],[\"里面给也行\",{\"1\":{\"522\":1}}],[\"里面有文档\",{\"1\":{\"1159\":1}}],[\"里面有它的jar是它的增强版\",{\"1\":{\"1097\":1}}],[\"里面有\",{\"1\":{\"239\":1}}],[\"里面有个\",{\"1\":{\"120\":1}}],[\"里面的锁大致可以分成全局锁\",{\"1\":{\"926\":1}}],[\"里面的参数\",{\"1\":{\"583\":1}}],[\"里面的方法\",{\"1\":{\"543\":1}}],[\"里面的\",{\"1\":{\"229\":1,\"543\":1}}],[\"里面的和use\",{\"1\":{\"223\":1}}],[\"里面包含了webpack\",{\"1\":{\"222\":1}}],[\"里面配的域名转发到\",{\"1\":{\"94\":1}}],[\"里\",{\"1\":{\"68\":1,\"156\":1,\"917\":2,\"934\":1,\"998\":1,\"1005\":3,\"1006\":4}}],[\"根本耐不下性子去写代码\",{\"1\":{\"1150\":1}}],[\"根本上是为了获取竞争优势\",{\"1\":{\"1141\":1}}],[\"根本不具有并发能力\",{\"1\":{\"849\":1}}],[\"根本无法确定是否是同一个客户\",{\"1\":{\"49\":1}}],[\"根据您的描述\",{\"1\":{\"959\":1}}],[\"根据上面的分析\",{\"1\":{\"932\":2}}],[\"根据上面的索引结构说明\",{\"1\":{\"917\":1}}],[\"根据两阶段锁协议\",{\"1\":{\"931\":1}}],[\"根据加锁的范围\",{\"1\":{\"926\":1}}],[\"根据身份证号查询地址\",{\"1\":{\"923\":1}}],[\"根据身份证号算出来的值都是\",{\"1\":{\"914\":1}}],[\"根据创建联合索引的顺序\",{\"1\":{\"923\":1}}],[\"根据叶子节点的内容\",{\"1\":{\"917\":1}}],[\"根据业务本身的预估\",{\"1\":{\"908\":1}}],[\"根据实现原理分析了长事务存在的风险\",{\"1\":{\"908\":1}}],[\"根据词法分析的结果\",{\"1\":{\"895\":1}}],[\"根据access\",{\"1\":{\"866\":1}}],[\"根据大学里学到的操作系统相关的知识\",{\"1\":{\"709\":1}}],[\"根据冯\",{\"1\":{\"709\":1}}],[\"根据equals\",{\"1\":{\"688\":1}}],[\"根据其类型\",{\"1\":{\"686\":1}}],[\"根据当前业务情况及流量对一些服务和页面有策略的降级\",{\"1\":{\"603\":1}}],[\"根据cap原理将nosql数据库分成了满足ca原则\",{\"1\":{\"572\":1}}],[\"根据场景特性选择cp或者ap\",{\"1\":{\"572\":1}}],[\"根据请求信息和配置信息找到匹配的\",{\"1\":{\"543\":1}}],[\"根据请求源的\",{\"1\":{\"208\":1}}],[\"根据你的选择\",{\"1\":{\"522\":1}}],[\"根据全局配置文件中的defaultexecutortype创建出对应的executor\",{\"1\":{\"465\":1}}],[\"根据配置文件\",{\"1\":{\"465\":1}}],[\"根据查询员工信息中的d\",{\"1\":{\"423\":1}}],[\"根据每个内存块的特性分配不同的收集算法\",{\"1\":{\"389\":1}}],[\"根据对象的生命周期\",{\"1\":{\"385\":1}}],[\"根据jmm模型\",{\"1\":{\"305\":1}}],[\"根据\",{\"1\":{\"208\":1,\"269\":1,\"499\":1,\"918\":1}}],[\"根据version版本\",{\"1\":{\"170\":1}}],[\"根据特定条件对结果进行处理\",{\"1\":{\"156\":1}}],[\"根据具体的应用架构和需求\",{\"1\":{\"156\":1}}],[\"根据用户查询权限信息\",{\"1\":{\"624\":1}}],[\"根据用户\",{\"1\":{\"144\":1}}],[\"根据uuid将loginuser缓存\",{\"1\":{\"67\":1}}],[\"根目录\",{\"1\":{\"73\":1}}],[\"自欺欺人是影响自己进步的绊脚石\",{\"1\":{\"1140\":1}}],[\"自大\",{\"1\":{\"1140\":1}}],[\"自满\",{\"1\":{\"1140\":1}}],[\"自连接\",{\"0\":{\"944\":1}}],[\"自然也不能访问其他表\",{\"1\":{\"928\":1}}],[\"自然排序\",{\"1\":{\"688\":1}}],[\"自带任务轮询\",{\"1\":{\"782\":1}}],[\"自带排序\",{\"1\":{\"766\":1}}],[\"自带的就很好\",{\"1\":{\"996\":1}}],[\"自带的引擎是\",{\"1\":{\"900\":1}}],[\"自带的\",{\"1\":{\"713\":1,\"1080\":1}}],[\"自带的锁只适用于单个\",{\"1\":{\"79\":1}}],[\"自带动态刷新\",{\"1\":{\"598\":1}}],[\"自顶向下尝试加载类\",{\"1\":{\"382\":1}}],[\"自底向上查找判断类是否被加载\",{\"1\":{\"382\":1}}],[\"自我评价\",{\"1\":{\"1127\":1}}],[\"自我感觉少一步视图\",{\"0\":{\"1036\":1}}],[\"自我感觉数据库的设计是最重要的\",{\"1\":{\"203\":1}}],[\"自我建议\",{\"1\":{\"598\":1}}],[\"自我建议把\",{\"1\":{\"597\":1}}],[\"自我旋转\",{\"1\":{\"305\":1}}],[\"自旋线程会原地空耗cpu\",{\"1\":{\"379\":1}}],[\"自旋就是多次尝试\",{\"1\":{\"324\":1}}],[\"自旋转\",{\"1\":{\"312\":1}}],[\"自旋\",{\"0\":{\"304\":1}}],[\"自旋锁源码\",{\"0\":{\"305\":1}}],[\"自旋锁\",{\"0\":{\"324\":1},\"1\":{\"291\":1,\"324\":1,\"379\":1}}],[\"自旋消耗cpu资源\",{\"1\":{\"109\":1}}],[\"自增主键往往是更合理的选择\",{\"1\":{\"918\":1}}],[\"自增主键的插入数据模式\",{\"1\":{\"918\":1}}],[\"自增主键是指自增列上定义的主键\",{\"1\":{\"918\":1}}],[\"自增到注解指定的\",{\"1\":{\"887\":1}}],[\"自增1不会改变本身变量的数据类型\",{\"1\":{\"685\":1}}],[\"自增\",{\"1\":{\"229\":1}}],[\"自己买了一盒pencil的笔头\",{\"1\":{\"1164\":1}}],[\"自己买了一本小书很不错\",{\"1\":{\"741\":1}}],[\"自己算半个苹果粉\",{\"1\":{\"1162\":1}}],[\"自己写一遍相应的代码\",{\"1\":{\"1150\":1}}],[\"自己写一个有实际应用的demo\",{\"1\":{\"1144\":1}}],[\"自己跟着写代码\",{\"1\":{\"1150\":1}}],[\"自己搭博客\",{\"1\":{\"1145\":1}}],[\"自己总结一遍\",{\"1\":{\"1144\":1}}],[\"自己画和看别人的是完全不同的两个层次\",{\"1\":{\"1144\":1}}],[\"自己再画一个整个java体系的脑图\",{\"1\":{\"1144\":1}}],[\"自己再研究\",{\"0\":{\"1022\":1}}],[\"自己构建相关知识脑图和相关步骤的流程图是非常有必要并且非常有效果的\",{\"1\":{\"1144\":1}}],[\"自己找资料本身就是自学能力的一部分\",{\"1\":{\"1144\":1}}],[\"自己找资料开始学习\",{\"1\":{\"1144\":1}}],[\"自己折腾\",{\"1\":{\"1024\":1}}],[\"自己web页面新建了个分支\",{\"1\":{\"990\":1}}],[\"自己和自己做笛卡尔积\",{\"0\":{\"944\":1}}],[\"自己理解\",{\"1\":{\"932\":1}}],[\"自己被阻塞还没什么关系\",{\"1\":{\"928\":1}}],[\"自己赚了\",{\"1\":{\"927\":1}}],[\"自己\",{\"1\":{\"876\":1}}],[\"自己方法里加了log来甄别方法到底执行没\",{\"1\":{\"876\":1}}],[\"自己宿主机新建一个对应的文件并从网上给上默认内容\",{\"1\":{\"795\":1}}],[\"自己对hashtable太生疏了\",{\"1\":{\"722\":1}}],[\"自己能理解的\",{\"1\":{\"693\":1}}],[\"自己后面补充\",{\"1\":{\"686\":1}}],[\"自己去写登陆接口\",{\"1\":{\"626\":1}}],[\"自己创建bean就不需要了\",{\"1\":{\"625\":1}}],[\"自己看看文档容易知道\",{\"1\":{\"598\":1}}],[\"自己境界没到\",{\"1\":{\"575\":1}}],[\"自己分析\",{\"1\":{\"483\":1}}],[\"自己用过mybatis\",{\"1\":{\"465\":1}}],[\"自己很久以前学了这一套但学的不系统\",{\"1\":{\"393\":1}}],[\"自己捣鼓了很久\",{\"1\":{\"238\":1}}],[\"自己copy完整组件列表import\",{\"1\":{\"223\":1}}],[\"自己在宿主机建立后挂载映射\",{\"1\":{\"213\":1}}],[\"自己提交到线程池\",{\"1\":{\"202\":1}}],[\"自己笔记\",{\"1\":{\"115\":1}}],[\"自己的心态\",{\"0\":{\"1147\":1},\"1\":{\"1137\":1}}],[\"自己的电脑走\",{\"1\":{\"1001\":1}}],[\"自己的根目录\",{\"1\":{\"795\":1}}],[\"自己的区分\",{\"1\":{\"700\":1}}],[\"自己的理解\",{\"1\":{\"290\":1,\"686\":2,\"687\":1,\"703\":1}}],[\"自己的mq笔记\",{\"1\":{\"157\":1}}],[\"自己的项目怎么整合\",{\"1\":{\"153\":1}}],[\"自己的笔记\",{\"1\":{\"108\":1}}],[\"自己的redis\",{\"1\":{\"85\":1}}],[\"自己加了配置\",{\"1\":{\"107\":1}}],[\"自己代码地址\",{\"1\":{\"90\":1}}],[\"自动保存\",{\"1\":{\"1084\":1}}],[\"自动化构建部署\",{\"1\":{\"994\":1}}],[\"自动打卡签到领积分\",{\"1\":{\"994\":1}}],[\"自动处理序列化问题\",{\"1\":{\"872\":1}}],[\"自动处理依赖关系\",{\"1\":{\"810\":1}}],[\"自动启动\",{\"1\":{\"825\":1}}],[\"自动装配的实现呢\",{\"1\":{\"731\":1}}],[\"自动装载\",{\"1\":{\"466\":1}}],[\"自动类型转换\",{\"0\":{\"702\":1}}],[\"自动\",{\"0\":{\"608\":1},\"1\":{\"606\":1}}],[\"自动的给我们在各种mq内切换\",{\"1\":{\"594\":1}}],[\"自动版本仲裁机制\",{\"1\":{\"476\":1}}],[\"自动starter依赖\",{\"1\":{\"473\":1}}],[\"自动注入mapper\",{\"1\":{\"453\":1,\"462\":1}}],[\"自动配置好了一切\",{\"1\":{\"480\":1}}],[\"自动配置\",{\"0\":{\"484\":1},\"1\":{\"473\":1,\"474\":1,\"740\":1}}],[\"自动配置spring以及第三方功能\",{\"1\":{\"473\":1}}],[\"自动配置类\",{\"1\":{\"202\":2}}],[\"自动配置了rediscachemanager\",{\"1\":{\"125\":1}}],[\"自动续期\",{\"1\":{\"87\":1}}],[\"自动刷新redis缓存\",{\"1\":{\"67\":1}}],[\"自定义的实现方法\",{\"1\":{\"762\":1}}],[\"自定义登录接口实现这个功能需要使用到jwt\",{\"1\":{\"626\":1}}],[\"自定义全局globalfilter\",{\"1\":{\"591\":1}}],[\"自定义可以访问的地址\",{\"1\":{\"545\":1}}],[\"自定义一个注解作为切点\",{\"1\":{\"492\":1}}],[\"自定义注解是比较常用的一种\",{\"1\":{\"492\":1}}],[\"自定义注解\",{\"1\":{\"492\":1,\"889\":1}}],[\"自定义注解全是和\",{\"1\":{\"490\":1}}],[\"自定义器\",{\"1\":{\"483\":1}}],[\"自定义版本\",{\"1\":{\"476\":1}}],[\"自定义字符串的截取规则\",{\"1\":{\"432\":1}}],[\"自定义结果集映射规则\",{\"1\":{\"419\":1}}],[\"自定义结果集映射\",{\"0\":{\"418\":1}}],[\"自定义校验\",{\"0\":{\"243\":1}}],[\"自定义操作\",{\"1\":{\"123\":1}}],[\"自定义对齐\",{\"0\":{\"17\":1}}],[\"自定义标题\",{\"1\":{\"14\":5}}],[\"驱动在特定模式下\",{\"1\":{\"637\":1}}],[\"驱动全局事务提交或回滚\",{\"1\":{\"606\":1}}],[\"驱动\",{\"1\":{\"65\":1}}],[\"靠别人不如靠自己\",{\"1\":{\"1111\":1}}],[\"靠的底层汇编\",{\"1\":{\"303\":1}}],[\"靠\",{\"1\":{\"65\":1}}],[\"避免冗余的依赖\",{\"1\":{\"1012\":1}}],[\"避免maven打包臃肿\",{\"1\":{\"1012\":1}}],[\"避免不必要的冲突\",{\"1\":{\"1010\":1}}],[\"避免不必要的依赖冲突和版本冲突\",{\"1\":{\"871\":1,\"1010\":2}}],[\"避免使用\",{\"0\":{\"969\":1}}],[\"避免1024次查询\",{\"1\":{\"961\":1}}],[\"避免重复列\",{\"1\":{\"936\":1}}],[\"避免下图\",{\"1\":{\"932\":1}}],[\"避免死锁的方案\",{\"1\":{\"932\":1}}],[\"避免回表过程呢\",{\"1\":{\"921\":1}}],[\"避免单个语句意外执行太长时间\",{\"1\":{\"908\":1}}],[\"避免出现数据竞争的问题\",{\"1\":{\"694\":1}}],[\"避免扩容\",{\"1\":{\"688\":1}}],[\"避免反复扩容影响效率\",{\"1\":{\"687\":1}}],[\"避免因服务不可用而阻塞整个系统\",{\"1\":{\"603\":1}}],[\"避免了下面while多层判断\",{\"1\":{\"1085\":3}}],[\"避免了将重复的依赖打包到每个模块中\",{\"1\":{\"1012\":1}}],[\"避免了循环依赖和死锁的发生\",{\"1\":{\"933\":1}}],[\"避免了一直阻塞\",{\"1\":{\"712\":1}}],[\"避免了代码膨胀\",{\"1\":{\"584\":1}}],[\"避免了线程之间的数据共享和冲突\",{\"1\":{\"156\":1}}],[\"避免代码重复\",{\"1\":{\"520\":1}}],[\"避免必须实现一些不需要的方法\",{\"1\":{\"471\":1}}],[\"避免频繁触发full\",{\"1\":{\"389\":1}}],[\"避免aba问题的发生\",{\"1\":{\"309\":1}}],[\"避免分布式共享\",{\"1\":{\"65\":1}}],[\"避免网络拥塞并保证整体性能\",{\"1\":{\"56\":1}}],[\"存起来的\",{\"1\":{\"901\":1}}],[\"存放\",{\"1\":{\"795\":1}}],[\"存入securitycontextholder\",{\"1\":{\"627\":1}}],[\"存给红色授权过滤器拿信息\",{\"1\":{\"620\":1}}],[\"存在以偏概全的地方\",{\"1\":{\"1117\":1}}],[\"存在即合理\",{\"1\":{\"905\":1}}],[\"存在即处理过\",{\"1\":{\"174\":1}}],[\"存在vue的data里面的\",{\"1\":{\"879\":1}}],[\"存在有极小概率存在误判可能\",{\"1\":{\"866\":1}}],[\"存在\",{\"1\":{\"694\":1}}],[\"存在的问题\",{\"1\":{\"609\":1}}],[\"存在内存中的临时数据\",{\"1\":{\"441\":1}}],[\"存在拼接问题\",{\"1\":{\"434\":1}}],[\"存在就不处理\",{\"1\":{\"172\":1}}],[\"存取高效\",{\"1\":{\"739\":1}}],[\"存取\",{\"1\":{\"156\":1}}],[\"存取速度相对于\",{\"1\":{\"156\":1}}],[\"存储引擎在\",{\"1\":{\"916\":1}}],[\"存储引擎层\",{\"1\":{\"892\":1}}],[\"存储数据的结构\",{\"1\":{\"914\":1}}],[\"存储数据丢失\",{\"1\":{\"183\":1}}],[\"存储我们需要用到数据对象\",{\"1\":{\"883\":1}}],[\"存储到\",{\"1\":{\"883\":1}}],[\"存储到局部变量\",{\"1\":{\"388\":3}}],[\"存储器\",{\"1\":{\"709\":1}}],[\"存储过程等这些复杂\",{\"1\":{\"465\":1}}],[\"存储和检索数据\",{\"1\":{\"267\":1}}],[\"存储用户信息的一些优势\",{\"1\":{\"156\":1}}],[\"存储用户信息比\",{\"1\":{\"156\":1}}],[\"存储设计\",{\"0\":{\"155\":1}}],[\"存储的数据对于整个\",{\"1\":{\"156\":1}}],[\"存储的数据仅对当前线程可见\",{\"1\":{\"156\":1}}],[\"存储的\",{\"1\":{\"152\":2}}],[\"存储容量和吞吐量\",{\"1\":{\"103\":1}}],[\"存key\",{\"1\":{\"134\":1}}],[\"存的是map\",{\"1\":{\"688\":1}}],[\"存的tonken\",{\"1\":{\"618\":1}}],[\"存的\",{\"1\":{\"123\":1,\"152\":1}}],[\"存好的\",{\"1\":{\"69\":1}}],[\"存redis用户信息\",{\"1\":{\"68\":1}}],[\"存用户信息\",{\"0\":{\"67\":1}}],[\"存jwt解析数据为\",{\"1\":{\"65\":1}}],[\"存\",{\"1\":{\"65\":1,\"626\":1,\"889\":1}}],[\"长这样\",{\"1\":{\"1004\":1}}],[\"长按开机键进入到恢复模式\",{\"1\":{\"999\":1}}],[\"长立志\",{\"1\":{\"980\":1}}],[\"长事务有这些潜在风险\",{\"1\":{\"907\":1}}],[\"长事务还占用锁资源\",{\"1\":{\"906\":1}}],[\"长事务意味着系统里面会存在很老的事务视图\",{\"1\":{\"906\":1}}],[\"长连接是指连接成功后\",{\"1\":{\"893\":1}}],[\"长沙那个也问过\",{\"1\":{\"64\":1}}],[\"长度为16\",{\"1\":{\"703\":1}}],[\"长度是2的幂次\",{\"1\":{\"681\":1}}],[\"长度能改变么\",{\"1\":{\"131\":1}}],[\"长度\",{\"1\":{\"48\":1,\"1086\":1}}],[\"秒级创建快照\",{\"1\":{\"935\":1}}],[\"秒级的从我们海量数据中检索到我们感兴趣的数据\",{\"1\":{\"263\":1}}],[\"秒之内返回给用户相应的查询结果\",{\"1\":{\"572\":1}}],[\"秒杀成功了\",{\"1\":{\"857\":1}}],[\"秒杀已经结束了\",{\"1\":{\"857\":1}}],[\"秒杀案例\",{\"0\":{\"857\":1}}],[\"秒杀系统在开启的瞬间\",{\"1\":{\"602\":1}}],[\"秒杀高并发\",{\"1\":{\"582\":1}}],[\"秒杀确保数据一致性\",{\"1\":{\"365\":1}}],[\"秒杀往后没跟\",{\"1\":{\"202\":1}}],[\"秒杀开始才暴露\",{\"1\":{\"202\":1}}],[\"秒杀链接加密\",{\"1\":{\"202\":1}}],[\"秒杀\",{\"0\":{\"199\":1}}],[\"秒杀具有瞬间高并发的特点\",{\"1\":{\"198\":1}}],[\"秒\",{\"1\":{\"63\":1,\"100\":2,\"201\":1,\"572\":1}}],[\"秒内没有新的请求或响应发生\",{\"1\":{\"48\":1}}],[\"域名系统\",{\"1\":{\"77\":1}}],[\"域名\",{\"1\":{\"62\":1,\"230\":1}}],[\"只留\",{\"1\":{\"1006\":1}}],[\"只开\",{\"1\":{\"1006\":1}}],[\"只保留两个\",{\"1\":{\"1005\":2}}],[\"只保证一致性不保证并发性\",{\"1\":{\"305\":1}}],[\"只按学生\",{\"1\":{\"959\":1}}],[\"只用到了a\",{\"1\":{\"923\":1}}],[\"只用到a\",{\"1\":{\"923\":3}}],[\"只用一次\",{\"1\":{\"686\":1}}],[\"只进行数据索引\",{\"1\":{\"916\":1}}],[\"只进行解释执行\",{\"1\":{\"635\":1}}],[\"只许追加文件但不可以改写文件\",{\"1\":{\"860\":1}}],[\"只验证长度\",{\"1\":{\"802\":2}}],[\"只在需要时显式引入\",{\"1\":{\"1010\":1}}],[\"只在当前\",{\"1\":{\"782\":1}}],[\"只在它这个模块的登录页面有\",{\"1\":{\"141\":1}}],[\"只对了数组\",{\"1\":{\"780\":1}}],[\"只锁定当前链表或红黑二叉树的首节点\",{\"1\":{\"740\":1}}],[\"只增加了一个\",{\"1\":{\"725\":1}}],[\"只创建了一个对象\",{\"1\":{\"725\":1}}],[\"只涉及7种基本数据类型\",{\"0\":{\"702\":1}}],[\"只扫描控制器\",{\"1\":{\"460\":1}}],[\"只读\",{\"1\":{\"448\":1}}],[\"只读变量\",{\"1\":{\"216\":1}}],[\"只想根据传过来的javabean对象有值的参数进行修改\",{\"1\":{\"434\":1}}],[\"只想根据传过来的javabean对象有值的参数作为条件\",{\"1\":{\"429\":1}}],[\"只查其中一个表的某个字段就会发现只会产生一次查询\",{\"1\":{\"424\":1}}],[\"只是为了让你的视野更加开阔\",{\"1\":{\"1150\":1}}],[\"只是看书的话可能配置一个环境变量就要搞好久\",{\"1\":{\"1150\":1}}],[\"只是它们在屏幕上的显示大小会发生变化\",{\"1\":{\"998\":1}}],[\"只是一味地学习大厂现有的拆分方法\",{\"1\":{\"961\":1}}],[\"只是一种编码方法\",{\"1\":{\"58\":1}}],[\"只是join中指定连接条件的简写\",{\"1\":{\"937\":1}}],[\"只是按顺序把\",{\"1\":{\"924\":1}}],[\"只是不推荐\",{\"1\":{\"883\":1}}],[\"只是可以将时间切碎\",{\"1\":{\"675\":1}}],[\"只是会放在jar包的同目录下\",{\"1\":{\"559\":1}}],[\"只是清除当前session的一级缓存\",{\"1\":{\"449\":1}}],[\"只是建议虚拟机执行\",{\"1\":{\"389\":1}}],[\"只执行\",{\"1\":{\"375\":1}}],[\"只执行run方法\",{\"1\":{\"362\":1}}],[\"只需这一处代码即可解决\",{\"1\":{\"625\":1}}],[\"只需表里几个字段\",{\"1\":{\"250\":1}}],[\"只需要配置好db然后启动程序\",{\"1\":{\"1079\":1}}],[\"只需要对\",{\"1\":{\"924\":1}}],[\"只需要往后追加\",{\"1\":{\"914\":1}}],[\"只需要一个线程便可以管理多个客户端\",{\"1\":{\"712\":1}}],[\"只需要定义一个登陆接口\",{\"1\":{\"628\":1}}],[\"只需要新建一个实现类\",{\"1\":{\"624\":1}}],[\"只需要去message\",{\"1\":{\"612\":1}}],[\"只需要为feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦\",{\"1\":{\"585\":1}}],[\"只需要声明version就可\",{\"1\":{\"556\":1}}],[\"只需要在\",{\"1\":{\"740\":1}}],[\"只需要在顶层父容器里更新\",{\"1\":{\"556\":1}}],[\"只需要在java应用程序中进行简单的配置即可使用\",{\"1\":{\"550\":1,\"1166\":1}}],[\"只需要在接口上加上自定义注解\",{\"1\":{\"492\":1}}],[\"只需要增加该锁的计数器即可\",{\"1\":{\"321\":1}}],[\"只需要给容器中放一个rediscacheconfiguration即可\",{\"1\":{\"125\":1}}],[\"只需要关心数据库就好\",{\"1\":{\"119\":1}}],[\"只需要写两三个配置就行\",{\"1\":{\"112\":1}}],[\"只充当一个标识\",{\"1\":{\"241\":1}}],[\"只适合当跳板\",{\"1\":{\"1113\":1}}],[\"只适合一般的分布式事务不合适高并发\",{\"1\":{\"183\":1,\"607\":1}}],[\"只适用一般的分布式事务控制\",{\"1\":{\"608\":1}}],[\"只适用于单体应用\",{\"1\":{\"103\":1}}],[\"只会生成一个\",{\"1\":{\"559\":1}}],[\"只会到你的class路径中查找找文件\",{\"1\":{\"454\":1}}],[\"只会进入其中一个\",{\"1\":{\"430\":1,\"433\":2}}],[\"只会回滚事务b\",{\"1\":{\"179\":1}}],[\"只会真正的处理一次\",{\"1\":{\"170\":1}}],[\"只相当于是把b\",{\"1\":{\"179\":1}}],[\"只能通过把硬盘的数据先放到内存里\",{\"1\":{\"1089\":1}}],[\"只能传输可打印字符\",{\"1\":{\"1081\":1}}],[\"只能\",{\"1\":{\"1041\":1}}],[\"只能从\",{\"1\":{\"924\":1}}],[\"只能使用\",{\"1\":{\"923\":1}}],[\"只能主机写操作\",{\"1\":{\"861\":1}}],[\"只能有一个客户端收到\",{\"1\":{\"830\":1}}],[\"只能有一学一\",{\"1\":{\"740\":1}}],[\"只能消费一次\",{\"1\":{\"772\":1}}],[\"只能声明不能实例化\",{\"1\":{\"717\":1}}],[\"只能声明一次\",{\"1\":{\"216\":1}}],[\"只能交给底层操作系统来\",{\"1\":{\"709\":1}}],[\"只能发起系统调用请求操作系统帮忙完成\",{\"1\":{\"709\":1}}],[\"只能调用父类中声明的方法\",{\"0\":{\"699\":1}}],[\"只能调用父类中声明的属性和方法\",{\"1\":{\"686\":1}}],[\"只能try\",{\"1\":{\"687\":1}}],[\"只能说是预防\",{\"1\":{\"377\":1}}],[\"只能在同步块或者方法中才能调用\",{\"1\":{\"352\":1}}],[\"只能保证一个共享变量的原子操作\",{\"1\":{\"307\":1}}],[\"只能够重新读取后在来一遍了\",{\"1\":{\"305\":1}}],[\"只能选择一个比较折中的方案\",{\"1\":{\"183\":1}}],[\"只能控制住自己的回滚\",{\"1\":{\"176\":1}}],[\"只能用\",{\"1\":{\"88\":1,\"924\":1}}],[\"只不过自增步长设置一下\",{\"1\":{\"961\":1}}],[\"只不过当第一列一样第二列既有空的又有值的我想保留有值的一行\",{\"1\":{\"959\":1}}],[\"只不过封装了\",{\"1\":{\"818\":1}}],[\"只不过返回值是list\",{\"1\":{\"413\":1}}],[\"只不过更强大提供分布式解决方案\",{\"1\":{\"112\":1}}],[\"只不过ruoyi是只用redis\",{\"1\":{\"70\":1}}],[\"只给了\",{\"1\":{\"101\":1}}],[\"只有你的周围\",{\"1\":{\"1140\":1}}],[\"只有这个tomcat9\",{\"1\":{\"1041\":1}}],[\"只有这条加锁线程可以重复获得该锁\",{\"1\":{\"329\":1}}],[\"只有保证了事务的持久性\",{\"1\":{\"962\":1}}],[\"只有再新建的连接才会使用新的权限设置\",{\"1\":{\"893\":1}}],[\"只有抵达了queue消息才会持久化\",{\"1\":{\"846\":1}}],[\"只有等到用户真正需要结果的时候才会执行\",{\"1\":{\"773\":1}}],[\"只有内核空间才能进行系统态级别的资源有关的操作\",{\"1\":{\"709\":1}}],[\"只有运行时才会出错\",{\"1\":{\"705\":1}}],[\"只有在特定的数据库引擎中才有\",{\"1\":{\"936\":1}}],[\"只有在内存不足时\",{\"1\":{\"660\":1}}],[\"只有在缓存中没有找到时才会查询数据库\",{\"1\":{\"91\":1}}],[\"只有\",{\"1\":{\"507\":1,\"743\":1,\"923\":1,\"1101\":1}}],[\"只有容器中的组件才能有springboot提供的强大的功能\",{\"1\":{\"507\":1}}],[\"只有会话提交或者关闭以后\",{\"1\":{\"447\":1}}],[\"只有一个索引\",{\"1\":{\"918\":1}}],[\"只有一个消息完全处理完\",{\"1\":{\"830\":1}}],[\"只有一个参数时可以随便写\",{\"1\":{\"406\":1}}],[\"只有一个线程在执行\",{\"1\":{\"286\":1}}],[\"只有当\",{\"1\":{\"636\":1}}],[\"只有当系统发生分区时候\",{\"1\":{\"572\":1}}],[\"只有当给变量赋值的时候才会分配内存空间\",{\"1\":{\"388\":1}}],[\"只有当计数器的值为0的时候\",{\"1\":{\"334\":1}}],[\"只有知道阻塞队列\",{\"1\":{\"344\":1}}],[\"只有最适合的\",{\"1\":{\"79\":1}}],[\"只有用户长期不操作才会下线\",{\"1\":{\"70\":1}}],[\"只要你肯问\",{\"1\":{\"1150\":1}}],[\"只要你能够培养出兴趣\",{\"1\":{\"1150\":1}}],[\"只要你足够优秀\",{\"1\":{\"1139\":1}}],[\"只要满足最左前缀\",{\"1\":{\"923\":1}}],[\"只要赊账记录记在了粉板上或写在了账本上\",{\"1\":{\"899\":1}}],[\"只要刷入磁盘的数据\",{\"1\":{\"899\":2}}],[\"只要使用哈希算法离不开\",{\"1\":{\"866\":1}}],[\"只要解锁库存的消息失败\",{\"1\":{\"837\":1}}],[\"只要消息没有投递给指定的队列\",{\"1\":{\"836\":1}}],[\"只要消息抵达queue\",{\"1\":{\"832\":1}}],[\"只要收到消息\",{\"1\":{\"830\":1}}],[\"只要项目在运行就会实时监听消费\",{\"1\":{\"829\":1}}],[\"只要我们的系统没有崩溃就行了\",{\"1\":{\"814\":1}}],[\"只要哈希函数映射得比较均匀松散\",{\"1\":{\"739\":1}}],[\"只要字符串拼接带变量的都是在堆中\",{\"1\":{\"725\":1}}],[\"只要是你感兴趣的\",{\"1\":{\"1150\":1}}],[\"只要是new的就是在堆中\",{\"1\":{\"723\":1}}],[\"只要是\",{\"1\":{\"723\":1}}],[\"只要\",{\"1\":{\"660\":1,\"740\":1,\"1005\":1}}],[\"只要强引用存在\",{\"1\":{\"660\":1}}],[\"只要obj还指向object对象\",{\"1\":{\"660\":1}}],[\"只要有一家公司给你开\",{\"1\":{\"1130\":1}}],[\"只要有一个是变量\",{\"1\":{\"687\":1}}],[\"只要有对一个表的更新\",{\"1\":{\"894\":1}}],[\"只要有强引用的存在\",{\"1\":{\"660\":1}}],[\"只要有线程空闲\",{\"1\":{\"362\":1}}],[\"只要超过了引用的作用域或者显式地将相应\",{\"1\":{\"636\":1}}],[\"只要还有强引用指向一个对象\",{\"1\":{\"636\":1}}],[\"只要问到分布式相关的内容\",{\"1\":{\"571\":1}}],[\"只要注意写\",{\"1\":{\"556\":1}}],[\"只要写application后面的名字就行\",{\"1\":{\"546\":1}}],[\"只要容器中有这些组件\",{\"1\":{\"485\":1}}],[\"只要引入starter\",{\"1\":{\"477\":1}}],[\"只要按照官网敲几行命令就可以新建一个基本的vue项目框架\",{\"1\":{\"222\":1}}],[\"只要跨数据库的场景都需要用到引入分布式事务\",{\"1\":{\"183\":1}}],[\"只要看前端能不能获取到token就行了\",{\"1\":{\"156\":1}}],[\"只要跳转到下一个页面取出这个数据以后\",{\"1\":{\"130\":1}}],[\"只要跳到下一个页面取出这个数据以后\",{\"1\":{\"98\":1,\"536\":1}}],[\"只要占锁成功\",{\"1\":{\"115\":1}}],[\"只要缓存的数据有过期时间就足够了\",{\"1\":{\"108\":1}}],[\"只要用户保持活动状态\",{\"1\":{\"152\":1}}],[\"只要用户的最近一次访问存在足够时间就刷新token的过期时间\",{\"1\":{\"70\":1}}],[\"只要用户在操作那么就一定在线\",{\"1\":{\"70\":1}}],[\"只要逻辑上去找到uid对应的jwt\",{\"1\":{\"70\":1}}],[\"只搜索某个站点\",{\"1\":{\"62\":1}}],[\"打算回老家结婚\",{\"1\":{\"1121\":1}}],[\"打算换城市\",{\"1\":{\"1121\":1}}],[\"打算一口气看完视频\",{\"1\":{\"198\":1}}],[\"打退堂鼓的人\",{\"1\":{\"1077\":1}}],[\"打不开的话可以执行一个命令就可以打开了\",{\"1\":{\"999\":1}}],[\"打电话\",{\"1\":{\"688\":1}}],[\"打包jar指定名字\",{\"0\":{\"1011\":1}}],[\"打包后的目录包括三个\",{\"1\":{\"559\":1}}],[\"打包的目录只有两个\",{\"1\":{\"559\":1}}],[\"打包工具\",{\"1\":{\"215\":1}}],[\"打印提取的结果\",{\"1\":{\"1019\":1}}],[\"打印的还是\",{\"1\":{\"771\":1}}],[\"打印结果的产生我们可以看一下字节码文件\",{\"1\":{\"720\":1}}],[\"打印出参\",{\"1\":{\"492\":1}}],[\"打印调用\",{\"1\":{\"492\":1}}],[\"打印\",{\"1\":{\"492\":1}}],[\"打印请求入参\",{\"1\":{\"492\":1}}],[\"打印请求的\",{\"1\":{\"492\":1}}],[\"打印请求\",{\"1\":{\"492\":1}}],[\"打印请求相关参数\",{\"1\":{\"492\":1}}],[\"打印返回参数和接口执行时间\",{\"1\":{\"492\":1}}],[\"打印了一些入参信息\",{\"1\":{\"492\":1}}],[\"打印所有启动时候装载的\",{\"1\":{\"480\":1}}],[\"打印按钮\",{\"1\":{\"5\":1}}],[\"打开命令行全局安装\",{\"1\":{\"1161\":1}}],[\"打开手机也不知道做什么\",{\"1\":{\"1142\":1}}],[\"打开电脑也不知道做什么\",{\"1\":{\"1142\":1}}],[\"打开切换界面\",{\"0\":{\"1035\":1}}],[\"打开表的时候\",{\"1\":{\"897\":1}}],[\"打开确认模式\",{\"0\":{\"835\":1}}],[\"打开自己本地任意一个springboot项目\",{\"1\":{\"740\":1}}],[\"打开这个文件\",{\"1\":{\"610\":1}}],[\"打开\",{\"0\":{\"1030\":1},\"1\":{\"537\":1,\"721\":1,\"1005\":1,\"1006\":1}}],[\"打开终端\",{\"1\":{\"215\":1}}],[\"打开新的标签页并执行\",{\"1\":{\"62\":1}}],[\"键盘end键可以到浏览器页面最底部\",{\"1\":{\"1074\":1}}],[\"键盘输入显示数据\",{\"1\":{\"543\":1,\"1081\":1}}],[\"键来打开系统属性窗口\",{\"1\":{\"1038\":1}}],[\"键入windows徽标键\",{\"0\":{\"1034\":1}}],[\"键值\",{\"1\":{\"789\":1}}],[\"键\",{\"1\":{\"62\":2,\"1005\":2}}],[\"操作数据库新增列会产生语句\",{\"1\":{\"1079\":1}}],[\"操作数栈\",{\"1\":{\"388\":1,\"778\":1}}],[\"操作了\",{\"1\":{\"969\":1}}],[\"操作不慎也会出问题\",{\"1\":{\"928\":1}}],[\"操作操作还是有必要的\",{\"1\":{\"828\":1}}],[\"操作中如果除数是\",{\"1\":{\"739\":1}}],[\"操作系统可以使用逻辑cpu来模拟真实cpu\",{\"1\":{\"1095\":1}}],[\"操作系统支持的虚拟地址只有32位\",{\"1\":{\"1093\":1}}],[\"操作系统最多也只能给其中4gb\",{\"1\":{\"1092\":1}}],[\"操作系统的最小读写单位块的大小\",{\"1\":{\"916\":1}}],[\"操作系统按用户数量可以分为单用户系统和多用户系统\",{\"1\":{\"785\":1}}],[\"操作系统会通知相应的线程进\",{\"1\":{\"713\":1}}],[\"操作系统负责的内核执行具体的\",{\"1\":{\"709\":1}}],[\"操作方式\",{\"1\":{\"712\":1}}],[\"操作方法\",{\"1\":{\"712\":1}}],[\"操作的次数\",{\"1\":{\"916\":1}}],[\"操作的调用而已\",{\"1\":{\"709\":1}}],[\"操作的话\",{\"1\":{\"709\":1}}],[\"操作时\",{\"1\":{\"709\":1}}],[\"操作完成的同时继续执行其他任务\",{\"1\":{\"712\":1}}],[\"操作完成再将变量写回主内存\",{\"1\":{\"287\":1}}],[\"操作完全封装起来\",{\"1\":{\"218\":1}}],[\"操作符\",{\"1\":{\"278\":1,\"784\":2}}],[\"操作\",{\"0\":{\"856\":1,\"1157\":1},\"1\":{\"62\":1,\"87\":1,\"493\":2,\"609\":1,\"694\":1,\"709\":2,\"739\":1,\"849\":1,\"916\":1}}],[\"<字段列表>\",{\"1\":{\"969\":1}}],[\"<字段名>\",{\"1\":{\"937\":2}}],[\"<表2>\",{\"1\":{\"937\":2}}],[\"<表1>\",{\"1\":{\"937\":2}}],[\"<>\",{\"1\":{\"923\":1}}],[\"<k\",{\"1\":{\"688\":1}}],[\"<jdbc\",{\"1\":{\"612\":1}}],[\"<repository>\",{\"1\":{\"1013\":1}}],[\"<relativepath\",{\"1\":{\"1009\":2}}],[\"<result\",{\"1\":{\"419\":3,\"421\":2,\"422\":4,\"426\":4,\"429\":6}}],[\"<resultmap\",{\"1\":{\"419\":1,\"421\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":1,\"429\":1}}],[\"<resource>\",{\"1\":{\"397\":1}}],[\"<resources>\",{\"1\":{\"397\":1}}],[\"<r\",{\"1\":{\"876\":1}}],[\"<rulestate>\",{\"1\":{\"610\":2}}],[\"<optional>\",{\"1\":{\"871\":1,\"1010\":3}}],[\"<optional>true<\",{\"1\":{\"546\":1,\"1010\":2}}],[\"<option\",{\"1\":{\"610\":5}}],[\"<otherwise>\",{\"1\":{\"433\":1}}],[\"<文件的md5值>\",{\"1\":{\"540\":1}}],[\"<finalname>webjava8<\",{\"1\":{\"1011\":1}}],[\"<filter\",{\"1\":{\"459\":8,\"706\":4}}],[\"<filter>\",{\"1\":{\"459\":2,\"706\":1}}],[\"<ftp>\",{\"1\":{\"612\":1}}],[\"<foreach\",{\"1\":{\"436\":1,\"437\":2}}],[\"<load\",{\"1\":{\"459\":1}}],[\"<list>\",{\"1\":{\"610\":1}}],[\"<listener\",{\"1\":{\"459\":1}}],[\"<listener>\",{\"1\":{\"459\":1}}],[\"<li>总价\",{\"1\":{\"220\":1}}],[\"<li>水浒传\",{\"1\":{\"220\":1}}],[\"<li>西游记\",{\"1\":{\"220\":1}}],[\"<li>\",{\"1\":{\"220\":1}}],[\"<web\",{\"1\":{\"459\":1}}],[\"<when\",{\"1\":{\"433\":3}}],[\"<where>\",{\"1\":{\"433\":1}}],[\"<url>http\",{\"1\":{\"1013\":3}}],[\"<url\",{\"1\":{\"459\":3,\"706\":1}}],[\"<update\",{\"1\":{\"434\":1}}],[\"<ul>\",{\"1\":{\"220\":2}}],[\"<if\",{\"1\":{\"430\":5,\"432\":4,\"434\":6,\"438\":4,\"440\":2}}],[\"<if>\",{\"1\":{\"430\":1}}],[\"<id>insecure\",{\"1\":{\"1013\":2}}],[\"<id>yigo<\",{\"1\":{\"1013\":1}}],[\"<id\",{\"1\":{\"419\":1,\"421\":1,\"422\":2,\"423\":1,\"426\":3,\"427\":2,\"429\":2}}],[\"<inti>\",{\"1\":{\"658\":1}}],[\"<init>\",{\"1\":{\"658\":1}}],[\"<init\",{\"1\":{\"459\":4,\"706\":1}}],[\"<insert\",{\"1\":{\"404\":1,\"437\":2}}],[\"<include\",{\"1\":{\"437\":1,\"440\":1,\"878\":2}}],[\"<include>\",{\"1\":{\"397\":1}}],[\"<includes>\",{\"1\":{\"397\":1}}],[\"<input\",{\"1\":{\"220\":3}}],[\"<enabled>false<\",{\"1\":{\"1013\":1}}],[\"<environment\",{\"1\":{\"400\":1}}],[\"<environments\",{\"1\":{\"400\":1}}],[\"<e>\",{\"1\":{\"688\":1}}],[\"<el\",{\"1\":{\"223\":2}}],[\"<plugins>\",{\"1\":{\"1012\":1}}],[\"<path>\",{\"1\":{\"546\":2}}],[\"<parent>\",{\"1\":{\"476\":2}}],[\"<param\",{\"1\":{\"459\":10,\"706\":2}}],[\"<package\",{\"1\":{\"400\":2,\"464\":1}}],[\"<property\",{\"1\":{\"400\":4,\"440\":1,\"460\":2,\"462\":10,\"487\":2,\"489\":1}}],[\"<properties>\",{\"1\":{\"476\":1}}],[\"<properties\",{\"1\":{\"400\":1}}],[\"<=\",{\"1\":{\"334\":1,\"335\":1,\"343\":1,\"688\":1,\"952\":1,\"954\":1}}],[\"<version>4\",{\"1\":{\"397\":1,\"458\":1}}],[\"<version>5\",{\"1\":{\"397\":1,\"458\":3,\"556\":1}}],[\"<version>3\",{\"1\":{\"397\":1,\"458\":1}}],[\"<version>2\",{\"1\":{\"238\":1,\"242\":1,\"458\":3,\"476\":2,\"477\":1,\"546\":1,\"556\":1,\"1010\":1}}],[\"<version>1\",{\"1\":{\"105\":1,\"238\":1,\"397\":2,\"458\":6}}],[\"<groupid>mysq1<\",{\"1\":{\"556\":2}}],[\"<groupid>mysql<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<groupid>javax\",{\"1\":{\"458\":3}}],[\"<groupid>jakarta\",{\"1\":{\"242\":1}}],[\"<groupid>junit<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<groupid>log4j<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<groupid>org\",{\"1\":{\"238\":1,\"397\":2,\"458\":7,\"476\":2,\"477\":1,\"492\":1,\"546\":3,\"556\":1,\"589\":1,\"594\":1,\"828\":1,\"1010\":3}}],[\"<groupid>com\",{\"1\":{\"105\":1,\"238\":1,\"458\":1}}],[\"<clinit>\",{\"1\":{\"658\":1}}],[\"<choose>\",{\"1\":{\"433\":1}}],[\"<cache\",{\"1\":{\"448\":2,\"451\":1}}],[\"<cache><\",{\"1\":{\"448\":1}}],[\"<case\",{\"1\":{\"429\":2}}],[\"<category\",{\"1\":{\"226\":1}}],[\"<command>\",{\"1\":{\"782\":2}}],[\"<component\",{\"1\":{\"610\":1}}],[\"<collection\",{\"1\":{\"426\":1,\"427\":1,\"428\":1}}],[\"<constructor\",{\"1\":{\"462\":2}}],[\"<context\",{\"1\":{\"459\":1,\"460\":2,\"462\":3}}],[\"<configuration>\",{\"1\":{\"400\":1,\"464\":1}}],[\"<connector\",{\"1\":{\"48\":1}}],[\"<counter><\",{\"1\":{\"221\":5}}],[\"<snapshots>\",{\"1\":{\"1013\":1}}],[\"<sql\",{\"1\":{\"440\":1}}],[\"<segment>\",{\"1\":{\"591\":2}}],[\"<servlet\",{\"1\":{\"459\":4}}],[\"<servlet>\",{\"1\":{\"459\":1}}],[\"<set>\",{\"1\":{\"434\":1,\"610\":1}}],[\"<setting\",{\"1\":{\"400\":4,\"424\":2,\"448\":1,\"464\":2}}],[\"<settings>\",{\"1\":{\"400\":1,\"464\":1}}],[\"<select\",{\"1\":{\"408\":1,\"415\":1,\"416\":1,\"419\":1,\"421\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":2,\"429\":2,\"430\":1,\"432\":1,\"433\":1,\"436\":1,\"438\":1,\"878\":1}}],[\"<scope>compile<\",{\"1\":{\"477\":1,\"1010\":1}}],[\"<scope>test<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<scope>import<\",{\"1\":{\"238\":2,\"556\":1}}],[\"<script>\",{\"1\":{\"220\":4,\"221\":1}}],[\"<script\",{\"1\":{\"220\":4,\"221\":1,\"539\":1}}],[\"<style>\",{\"1\":{\"224\":1}}],[\"<span\",{\"1\":{\"220\":1}}],[\"<span><h1>hello<\",{\"1\":{\"220\":1}}],[\"<mirrorof>external\",{\"1\":{\"1013\":2}}],[\"<mirror>\",{\"1\":{\"1013\":2}}],[\"<mvc\",{\"1\":{\"460\":2}}],[\"<mapper\",{\"1\":{\"400\":1}}],[\"<mappers>\",{\"1\":{\"400\":2}}],[\"<mysql\",{\"1\":{\"476\":1}}],[\"<my\",{\"1\":{\"220\":1}}],[\"<meta\",{\"1\":{\"63\":1,\"220\":3}}],[\"<blocked>false<\",{\"1\":{\"1013\":2}}],[\"<bean\",{\"1\":{\"460\":1,\"462\":5,\"487\":1,\"489\":2}}],[\"<beans\",{\"1\":{\"460\":1,\"462\":1}}],[\"<bind\",{\"1\":{\"438\":1}}],[\"<build>\",{\"1\":{\"397\":1,\"556\":1,\"1011\":1,\"1012\":1}}],[\"<button\",{\"1\":{\"220\":2,\"221\":2}}],[\"<branch\",{\"1\":{\"990\":2}}],[\"<br\",{\"1\":{\"220\":1}}],[\"<body>\",{\"1\":{\"220\":3,\"221\":1}}],[\"<body\",{\"1\":{\"63\":1}}],[\"<databinding\",{\"1\":{\"1021\":4,\"1022\":1}}],[\"<datasource\",{\"1\":{\"400\":1}}],[\"<denpendencymanagement>\",{\"1\":{\"546\":1,\"1166\":1}}],[\"<dependencies>\",{\"1\":{\"238\":1,\"458\":1,\"556\":3}}],[\"<dependencymanagement>\",{\"1\":{\"238\":1,\"556\":2}}],[\"<dependency>\",{\"1\":{\"105\":1,\"238\":2,\"242\":1,\"397\":5,\"458\":14,\"477\":1,\"492\":1,\"546\":2,\"556\":3,\"589\":1,\"594\":1,\"828\":1,\"1010\":3}}],[\"<discriminator\",{\"1\":{\"429\":2}}],[\"<directory>src\",{\"1\":{\"397\":1}}],[\"<div\",{\"1\":{\"220\":6,\"221\":1}}],[\"<http>\",{\"1\":{\"612\":1}}],[\"<html\",{\"1\":{\"220\":1}}],[\"<h1>hello<\",{\"1\":{\"220\":1}}],[\"<h1>有\",{\"1\":{\"220\":1}}],[\"<head>\",{\"1\":{\"220\":1}}],[\"<<eof\",{\"1\":{\"1005\":1}}],[\"<<\",{\"1\":{\"208\":1,\"725\":1,\"784\":1,\"1005\":1}}],[\"<annotationprocessorpaths>\",{\"1\":{\"546\":1}}],[\"<aop\",{\"1\":{\"462\":3}}],[\"<association\",{\"1\":{\"422\":1,\"423\":1,\"429\":1}}],[\"<artifactid>commons\",{\"1\":{\"1010\":2}}],[\"<artifactid>druid<\",{\"1\":{\"458\":1}}],[\"<artifactid>aspectjweaver<\",{\"1\":{\"458\":1}}],[\"<artifactid>aliyun\",{\"1\":{\"238\":1}}],[\"<artifactid>servlet\",{\"1\":{\"458\":1}}],[\"<artifactid>spring\",{\"1\":{\"238\":1,\"458\":2,\"476\":2,\"477\":1,\"492\":1,\"546\":3,\"556\":1,\"589\":1,\"594\":1,\"828\":1,\"1010\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<artifactid>log4j<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<artifactid>jstl<\",{\"1\":{\"458\":1}}],[\"<artifactid>jsp\",{\"1\":{\"458\":1}}],[\"<artifactid>junit<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<artifactid>jakarta\",{\"1\":{\"242\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"458\":2}}],[\"<artifactid>mybatis<\",{\"1\":{\"397\":1,\"458\":1}}],[\"<artifactid>mysql\",{\"1\":{\"397\":1,\"458\":1,\"556\":2}}],[\"<artifactid>fastjson<\",{\"1\":{\"105\":1}}],[\"<a\",{\"1\":{\"125\":1,\"220\":1}}],[\"<\",{\"0\":{\"643\":1},\"1\":{\"105\":2,\"182\":1,\"220\":29,\"221\":3,\"224\":2,\"238\":3,\"242\":1,\"286\":4,\"338\":1,\"339\":1,\"352\":6,\"397\":13,\"400\":17,\"404\":2,\"408\":1,\"415\":2,\"416\":2,\"419\":7,\"421\":5,\"422\":7,\"423\":5,\"424\":2,\"426\":5,\"427\":6,\"428\":1,\"429\":12,\"430\":11,\"432\":9,\"433\":8,\"434\":11,\"436\":3,\"437\":9,\"438\":8,\"440\":6,\"448\":2,\"454\":4,\"458\":28,\"459\":27,\"460\":10,\"462\":35,\"464\":9,\"476\":3,\"477\":1,\"487\":3,\"489\":2,\"492\":1,\"546\":12,\"556\":8,\"566\":1,\"589\":1,\"594\":4,\"610\":7,\"643\":2,\"685\":4,\"706\":5,\"784\":1,\"828\":1,\"850\":1,\"851\":1,\"878\":1,\"942\":1,\"952\":1,\"1009\":1,\"1010\":3,\"1013\":10,\"1021\":1,\"1085\":15}}],[\"<t\",{\"1\":{\"715\":1}}],[\"<tx\",{\"1\":{\"462\":4}}],[\"<trim\",{\"1\":{\"432\":1,\"434\":1}}],[\"<transactionmanager\",{\"1\":{\"400\":1}}],[\"<typealiases>\",{\"1\":{\"400\":1,\"464\":1}}],[\"<type>pom<\",{\"1\":{\"238\":2,\"556\":1}}],[\"<title>document<\",{\"1\":{\"220\":1}}],[\"<t>\",{\"1\":{\"85\":1,\"538\":1,\"688\":2,\"715\":1,\"718\":1,\"1082\":1}}],[\"<td>\",{\"1\":{\"61\":1}}],[\"或其他编辑器工具的用户也要加上自己的\",{\"1\":{\"1005\":1}}],[\"或其他远程登录方式访问\",{\"1\":{\"785\":1}}],[\"或其他远程连接方式访问服务器\",{\"1\":{\"785\":1}}],[\"或heapid\",{\"1\":{\"965\":1}}],[\"或更大的值\",{\"1\":{\"908\":1}}],[\"或更新版本\",{\"1\":{\"893\":1}}],[\"或分布式锁\",{\"1\":{\"867\":1}}],[\"或teletypewriter\",{\"1\":{\"790\":1}}],[\"或throw\",{\"1\":{\"705\":1}}],[\"或红黑树\",{\"1\":{\"722\":1}}],[\"或将\",{\"1\":{\"715\":1}}],[\"或通过网络传输\",{\"1\":{\"688\":1}}],[\"或使用本地文件\",{\"1\":{\"608\":1}}],[\"或一个\",{\"1\":{\"537\":1}}],[\"或一条命令\",{\"1\":{\"87\":1}}],[\"或者直接把我的index页面download下来\",{\"1\":{\"1161\":1}}],[\"或者寻求老师的帮助\",{\"1\":{\"1150\":1}}],[\"或者加入实验室\",{\"1\":{\"1150\":1}}],[\"或者加索引\",{\"1\":{\"928\":1}}],[\"或者牛客网也可以\",{\"1\":{\"1150\":1}}],[\"或者有几个群在不停的闲聊\",{\"1\":{\"1148\":1}}],[\"或者将问题简化一下\",{\"1\":{\"1135\":1}}],[\"或者指出我能力哪里有欠缺\",{\"1\":{\"1132\":1}}],[\"或者大小周的公司\",{\"1\":{\"1113\":1}}],[\"或者要加maven项目的时候用\",{\"1\":{\"1074\":1}}],[\"或者鼠标中键\",{\"1\":{\"1051\":1}}],[\"或者位于用户的\",{\"1\":{\"1014\":1}}],[\"或者需要在分支之间保留历史记录的情况\",{\"1\":{\"990\":1}}],[\"或者早入睡提早半小时\",{\"1\":{\"980\":1}}],[\"或者用\",{\"0\":{\"939\":1}}],[\"或者修改字段\",{\"1\":{\"928\":1}}],[\"或者称为业务数据架构师的工作\",{\"1\":{\"922\":1}}],[\"或者页分裂等原因\",{\"1\":{\"919\":1}}],[\"或者更新版本\",{\"1\":{\"908\":1}}],[\"或者断开连接\",{\"1\":{\"907\":1}}],[\"或者说\",{\"1\":{\"902\":1,\"1142\":1}}],[\"或者采用反过来的顺序\",{\"1\":{\"901\":1}}],[\"或者在一个语句有多表关联\",{\"1\":{\"896\":1}}],[\"或者程序里面判断执行过一个占用内存的大查询后\",{\"1\":{\"893\":1}}],[\"或者使用其他的连接池实现\",{\"1\":{\"871\":1}}],[\"或者我消费端处理失败了\",{\"1\":{\"815\":1}}],[\"或者调整浏览器的安全设置以允许加载特定文件类型\",{\"1\":{\"706\":1}}],[\"或者调用regexp对象的构造函数\",{\"1\":{\"216\":1}}],[\"或者是一个数组类型\",{\"1\":{\"688\":1}}],[\"或者算出补码也可得到解\",{\"1\":{\"648\":1}}],[\"或者诊断应用\",{\"1\":{\"637\":1}}],[\"或者叫作最大优化级别\",{\"1\":{\"635\":1}}],[\"或者简单处理\",{\"1\":{\"582\":1}}],[\"或者插入用的列名抽取出来方便引用\",{\"1\":{\"440\":1}}],[\"或者s1\",{\"1\":{\"385\":1}}],[\"或者完全清空队列后\",{\"1\":{\"345\":1}}],[\"或者当前线程是等待队列中的第一个\",{\"1\":{\"318\":1}}],[\"或者饥饿的线程\",{\"1\":{\"316\":1}}],[\"或者内存的重排后\",{\"1\":{\"295\":1}}],[\"或者它将会从用户输入等来源中动态地产生\",{\"1\":{\"216\":1}}],[\"或者\",{\"1\":{\"186\":4,\"572\":1,\"681\":1,\"908\":1,\"916\":1,\"923\":2,\"928\":1,\"935\":1,\"986\":1,\"1041\":2,\"1150\":1}}],[\"或者数据库唯一键\",{\"1\":{\"162\":1}}],[\"或进行数据加工\",{\"1\":{\"156\":1}}],[\"或拦截器\",{\"1\":{\"156\":1}}],[\"或语言\",{\"1\":{\"70\":1}}],[\"或在多长时间后让网页自动链接到其它网页\",{\"1\":{\"63\":1}}],[\"或\",{\"1\":{\"61\":1,\"62\":2,\"153\":1,\"256\":1,\"277\":1,\"407\":1,\"522\":1,\"546\":1,\"681\":1,\"686\":1,\"696\":1,\"724\":1,\"725\":1,\"726\":2,\"784\":3,\"907\":2,\"923\":1,\"937\":1,\"959\":1,\"990\":2,\"997\":1,\"1166\":1}}],[\"或位于\",{\"1\":{\"48\":1}}],[\"需求\",{\"1\":{\"763\":1,\"765\":1,\"769\":1}}],[\"需求描述\",{\"0\":{\"154\":1}}],[\"需先启动服务器端\",{\"1\":{\"688\":1}}],[\"需释放已建立的连接\",{\"1\":{\"688\":1}}],[\"需掌握两个排序\",{\"1\":{\"685\":1}}],[\"需符合\",{\"1\":{\"597\":1}}],[\"需在命令行加条件跑这个cmd\",{\"1\":{\"594\":1}}],[\"需配置\",{\"1\":{\"397\":1}}],[\"需配置的时候加个参数set上去\",{\"1\":{\"47\":1}}],[\"需http\",{\"1\":{\"192\":1}}],[\"需要借助学习氛围比较好的地方\",{\"1\":{\"1160\":1}}],[\"需要借助futuretask类\",{\"1\":{\"687\":1}}],[\"需要虚拟机+指定外接网卡\",{\"1\":{\"1155\":1}}],[\"需要你自愿加班\",{\"1\":{\"1104\":2}}],[\"需要你有一定抗压能力\",{\"1\":{\"1104\":1}}],[\"需要左上角全选\",{\"1\":{\"1051\":1}}],[\"需要改为\",{\"1\":{\"1021\":1}}],[\"需要一点时间适应\",{\"1\":{\"1006\":1}}],[\"需要考虑提交历史记录的重要性\",{\"1\":{\"990\":1}}],[\"需要考虑一个问题\",{\"1\":{\"867\":1}}],[\"需要手动更新\",{\"1\":{\"1161\":1}}],[\"需要手动解决\",{\"1\":{\"990\":2}}],[\"需要手动处理相关的依赖\",{\"1\":{\"871\":1,\"1010\":1}}],[\"需要锁多个行\",{\"1\":{\"931\":1}}],[\"需要的也是\",{\"1\":{\"928\":1}}],[\"需要的时候再通过集合操作去filter拿对应的\",{\"1\":{\"103\":1}}],[\"需要扫描全表的数据\",{\"1\":{\"928\":1}}],[\"需要保留\",{\"1\":{\"925\":1}}],[\"需要回表\",{\"1\":{\"924\":1}}],[\"需要执行几次树的搜索操作\",{\"1\":{\"921\":1}}],[\"需要执行的方法\",{\"1\":{\"338\":1,\"339\":1}}],[\"需要逻辑上挪动后面的数据\",{\"1\":{\"918\":1}}],[\"需要找回数据\",{\"1\":{\"901\":1}}],[\"需要先从磁盘读入内存\",{\"1\":{\"900\":1}}],[\"需要识别出里面的字符串分别是什么\",{\"1\":{\"895\":1}}],[\"需要知道你要做什么\",{\"1\":{\"895\":1}}],[\"需要知道这四大对象的作用\",{\"1\":{\"465\":1}}],[\"需要使用真正的反向代理服务器来处理请求转发和跨域问题\",{\"1\":{\"883\":1}}],[\"需要使用反斜杠进行转义\",{\"1\":{\"61\":1}}],[\"需要单独引一下\",{\"1\":{\"871\":1}}],[\"需要再转成从服务器才能看到值\",{\"1\":{\"862\":1}}],[\"需要注掉\",{\"1\":{\"853\":1}}],[\"需要注意u盘冒白灯才是usb\",{\"1\":{\"1160\":1}}],[\"需要注意的点\",{\"1\":{\"1160\":1}}],[\"需要注意的是\",{\"1\":{\"156\":3,\"157\":1,\"179\":1,\"372\":1,\"383\":1,\"522\":1,\"543\":1,\"572\":1,\"632\":1,\"679\":1,\"706\":1,\"723\":1,\"785\":1,\"849\":1,\"871\":1,\"883\":1,\"894\":1,\"914\":1,\"922\":1,\"967\":1,\"1012\":3}}],[\"需要注意\",{\"1\":{\"928\":1}}],[\"需要注意这里不是字符串的\",{\"1\":{\"720\":1}}],[\"需要根据实际情况考虑应用场景\",{\"1\":{\"961\":1}}],[\"需要根据实际情况选用\",{\"1\":{\"169\":1}}],[\"需要根据具体情况设计和选择合适的加锁策略\",{\"1\":{\"933\":1}}],[\"需要根据身份证号查找对应的名字\",{\"1\":{\"914\":1}}],[\"需要根据业务需求和场景选择合适的redis数据结构和操作\",{\"1\":{\"849\":1}}],[\"需要解锁库存\",{\"1\":{\"844\":1}}],[\"需要修改同一行数据\",{\"1\":{\"931\":1}}],[\"需要修改配置文件\",{\"1\":{\"897\":1}}],[\"需要修改数据库\",{\"1\":{\"836\":1}}],[\"需要修复\",{\"1\":{\"229\":1}}],[\"需要有监听方法才会创建\",{\"1\":{\"829\":1}}],[\"需要connectionfactory的实现来连接消息代理\",{\"1\":{\"820\":1}}],[\"需要云服务器加私钥\",{\"1\":{\"799\":1,\"985\":1}}],[\"需要时直接调用就行\",{\"1\":{\"760\":1}}],[\"需要大量\",{\"1\":{\"726\":1}}],[\"需要理解子类覆盖父类方法的问题\",{\"1\":{\"697\":1}}],[\"需要明白类的加载顺序\",{\"0\":{\"697\":1}}],[\"需要明白为什么和\",{\"1\":{\"570\":1}}],[\"需要自定义排序\",{\"1\":{\"688\":1}}],[\"需要自己搭建一个监控平台\",{\"1\":{\"589\":1}}],[\"需要自己实现\",{\"1\":{\"186\":1}}],[\"需要记录访问顺序或插入顺序\",{\"1\":{\"688\":1}}],[\"需要finally语句\",{\"1\":{\"686\":1}}],[\"需要往用户表中写入用户数据\",{\"1\":{\"625\":1}}],[\"需要重点关注possible\",{\"1\":{\"897\":1}}],[\"需要重写该类从数据库去对比认证\",{\"1\":{\"621\":1}}],[\"需要重启电源\",{\"1\":{\"77\":1}}],[\"需要结合上面的\",{\"1\":{\"619\":1}}],[\"需要调整的点\",{\"0\":{\"618\":1}}],[\"需要调整路由顺序\",{\"1\":{\"591\":1}}],[\"需要登陆后才能访问到\",{\"1\":{\"616\":1}}],[\"需要数据库加一个回滚表\",{\"1\":{\"608\":1}}],[\"需要我们程序员自己手工搭建监控平台\",{\"1\":{\"599\":1}}],[\"需要及时更新\",{\"1\":{\"562\":1}}],[\"需要对外暴露自己的地址\",{\"1\":{\"562\":1}}],[\"需要对请求和响应进行更细粒度的拦截和处理\",{\"1\":{\"156\":1}}],[\"需要对请求进行预处理或对响应进行后处理\",{\"1\":{\"156\":1}}],[\"需要学习多线程使用\",{\"1\":{\"779\":1}}],[\"需要学习jvm\",{\"1\":{\"688\":1}}],[\"需要学习\",{\"1\":{\"553\":1}}],[\"需要多动手\",{\"1\":{\"552\":1}}],[\"需要多模块查询检索\",{\"1\":{\"158\":1}}],[\"需要到数据库连接属性后面加上allowmultiqueries=true\",{\"1\":{\"437\":1}}],[\"需要到jmeter\",{\"1\":{\"100\":1}}],[\"需要加分布式锁\",{\"1\":{\"380\":1}}],[\"需要\",{\"1\":{\"372\":1,\"928\":1,\"935\":1,\"938\":1,\"970\":1}}],[\"需要如下标注的时间才能完成\",{\"1\":{\"372\":1}}],[\"需要通知c线程执行\",{\"1\":{\"352\":2}}],[\"需要通知b线程执行\",{\"1\":{\"352\":1}}],[\"需要通过本地\",{\"1\":{\"304\":1}}],[\"需要等待\",{\"1\":{\"352\":3}}],[\"需要lock\",{\"1\":{\"352\":1}}],[\"需要用到env\",{\"1\":{\"796\":1}}],[\"需要用\",{\"1\":{\"348\":1}}],[\"需要进候厅等待\",{\"1\":{\"346\":1}}],[\"需要7个线程摸一下这个方法\",{\"1\":{\"339\":1}}],[\"需要累加的值\",{\"1\":{\"338\":1,\"339\":1}}],[\"需要集齐七颗龙珠\",{\"1\":{\"337\":1}}],[\"需要转换\",{\"1\":{\"326\":1}}],[\"需要比较期望值和当前值\",{\"1\":{\"311\":1}}],[\"需要比较工作内存中的值\",{\"1\":{\"305\":1}}],[\"需要变动的数量\",{\"1\":{\"305\":1}}],[\"需要依赖于\",{\"1\":{\"293\":1}}],[\"需要将共享的实例变量声明为\",{\"1\":{\"283\":1}}],[\"需要导入\",{\"1\":{\"242\":1}}],[\"需要处理的异常类\",{\"1\":{\"240\":1}}],[\"需要处理的数据\",{\"1\":{\"172\":1}}],[\"需要什么配置什么\",{\"1\":{\"231\":1}}],[\"需要从容器中获取实例是需要加上该注解\",{\"1\":{\"227\":1,\"529\":1}}],[\"需要在密码前加\",{\"1\":{\"625\":1}}],[\"需要在使用了\",{\"1\":{\"598\":1}}],[\"需要在\",{\"1\":{\"570\":1}}],[\"需要在参数上加\",{\"1\":{\"436\":1}}],[\"需要在多个请求之间共享或传递特定的上下文信息\",{\"1\":{\"156\":1}}],[\"需要在不同层级的组件之间进行交互和协调\",{\"1\":{\"156\":1}}],[\"需要在业务处理的前后进行额外的操作\",{\"1\":{\"156\":1}}],[\"需要在整个应用程序中统一应用某种处理逻辑\",{\"1\":{\"156\":1}}],[\"需要在请求到达业务处理之前或响应返回给客户端之前进行干预\",{\"1\":{\"156\":1}}],[\"需要以$1$开头\",{\"1\":{\"132\":1}}],[\"需要jsr303校验\",{\"1\":{\"130\":1}}],[\"需要分布式锁\",{\"1\":{\"109\":1}}],[\"需要层层递进看解决什么问题带着3w才能学好\",{\"1\":{\"78\":1}}],[\"引是按照索引的顺序来存储数据的\",{\"1\":{\"923\":1}}],[\"引擎的库\",{\"1\":{\"929\":1}}],[\"引擎把刚刚写入的\",{\"1\":{\"900\":1}}],[\"引擎将这行新数据更新到内存中\",{\"1\":{\"900\":1}}],[\"引擎直接用树搜索找到这一行\",{\"1\":{\"900\":1}}],[\"引擎在执行这个简单的\",{\"1\":{\"900\":1}}],[\"引擎特有的\",{\"1\":{\"900\":1}}],[\"引擎特有的日志\",{\"1\":{\"899\":1,\"900\":1}}],[\"引擎\",{\"1\":{\"900\":1,\"914\":1}}],[\"引擎会在适当的时候\",{\"1\":{\"899\":1}}],[\"引擎就不支持行锁\",{\"1\":{\"930\":1}}],[\"引擎就不支持事务\",{\"1\":{\"892\":1,\"904\":1}}],[\"引擎就会先把记录写到\",{\"1\":{\"899\":1}}],[\"引擎扫描行数跟\",{\"1\":{\"897\":1}}],[\"引擎接口取这个表的第一行\",{\"1\":{\"897\":1}}],[\"引用知乎上一个高赞的回答来解释什么是i\",{\"1\":{\"849\":1}}],[\"引用\",{\"1\":{\"771\":1,\"994\":1}}],[\"引用的是person的有参构造\",{\"1\":{\"763\":1}}],[\"引用的是person的无参构造\",{\"1\":{\"763\":1}}],[\"引用的是同一个字符串常量对象\",{\"1\":{\"723\":1}}],[\"引用的方法中\",{\"1\":{\"761\":1}}],[\"引用数据类型\",{\"1\":{\"686\":1}}],[\"引用数据类型拷贝创建了新的对象\",{\"1\":{\"683\":1}}],[\"引用队列一起使用\",{\"1\":{\"660\":1}}],[\"引用赋值为\",{\"1\":{\"636\":1}}],[\"引用具体文件时候加\",{\"1\":{\"454\":1,\"462\":1}}],[\"引用包时不加\",{\"1\":{\"454\":1,\"462\":1}}],[\"引用外部定义的sql\",{\"1\":{\"440\":1}}],[\"引用策略\",{\"1\":{\"46\":1}}],[\"引出来aba问题\",{\"1\":{\"307\":1}}],[\"引导跳转到qq授权页\",{\"1\":{\"135\":1}}],[\"引入amqp场景\",{\"1\":{\"828\":1}}],[\"引入aop依赖\",{\"1\":{\"492\":1}}],[\"引入aop\",{\"1\":{\"179\":1}}],[\"引入starter启动依赖组件的时候\",{\"1\":{\"731\":1}}],[\"引入starter组件\",{\"1\":{\"731\":1}}],[\"引入了基于\",{\"1\":{\"726\":1}}],[\"引入了基于注解的组件扫描\",{\"1\":{\"726\":1}}],[\"引入了aspectj\",{\"1\":{\"179\":1}}],[\"引入运行时自省能力\",{\"1\":{\"639\":1}}],[\"引入open\",{\"1\":{\"576\":1}}],[\"引入的索引下推优化\",{\"1\":{\"924\":1}}],[\"引入的\",{\"1\":{\"506\":1,\"556\":1}}],[\"引入依赖\",{\"1\":{\"492\":1}}],[\"引入依赖默认都可以不写版本\",{\"1\":{\"476\":1}}],[\"引入场景对应的自动配置一般都生效了\",{\"1\":{\"483\":1}}],[\"引入非版本仲裁的jar\",{\"1\":{\"476\":1}}],[\"引入数据库的配置文件\",{\"1\":{\"462\":1}}],[\"引入外部properties文件\",{\"1\":{\"400\":1}}],[\"引入countdownlatch后的执行结果\",{\"1\":{\"334\":1}}],[\"引入canal\",{\"1\":{\"108\":1}}],[\"引入\",{\"0\":{\"105\":1},\"1\":{\"105\":1,\"219\":1,\"616\":1,\"621\":1}}],[\"引号冒号还需保存\",{\"1\":{\"876\":1}}],[\"引号\",{\"1\":{\"61\":1}}],[\"反应堆\",{\"1\":{\"1009\":1}}],[\"反之\",{\"1\":{\"1005\":1}}],[\"反例\",{\"1\":{\"973\":1}}],[\"反向方括号\",{\"1\":{\"959\":1}}],[\"反向代理服务器可以提供更强大和灵活的功能\",{\"1\":{\"883\":1}}],[\"反向代理\",{\"0\":{\"72\":1},\"1\":{\"71\":1,\"72\":4,\"809\":3}}],[\"反过来说\",{\"1\":{\"923\":1}}],[\"反客为主的自动版\",{\"1\":{\"865\":1}}],[\"反客为主\",{\"0\":{\"864\":1}}],[\"反\",{\"1\":{\"648\":3}}],[\"反码解决\",{\"1\":{\"648\":1}}],[\"反射的应用\",{\"1\":{\"688\":1}}],[\"反射的应用场景\",{\"1\":{\"688\":1}}],[\"反射机制被视为动态语言的关键\",{\"1\":{\"688\":1}}],[\"反射机制是java语言提供的一种基础功能\",{\"1\":{\"638\":1}}],[\"反射\",{\"1\":{\"495\":1,\"639\":1,\"688\":1}}],[\"反序列的技术克隆一份新的数据给你\",{\"1\":{\"448\":1}}],[\"反序列化有浪费内存的问题\",{\"1\":{\"873\":1}}],[\"反序列化问题\",{\"0\":{\"873\":1}}],[\"反序列化等\",{\"1\":{\"640\":1}}],[\"反序列化报错\",{\"1\":{\"105\":1,\"125\":1,\"876\":1}}],[\"反序列化\",{\"1\":{\"105\":1,\"688\":1}}],[\"反正轮不到你\",{\"1\":{\"1077\":1}}],[\"反正你不用你也要写if\",{\"1\":{\"241\":1}}],[\"反正有\",{\"1\":{\"116\":1}}],[\"反正接口幂等了\",{\"1\":{\"48\":1}}],[\"反证法\",{\"1\":{\"92\":1,\"688\":1}}],[\"反斜杠还得注意转义的问题\",{\"1\":{\"1039\":1}}],[\"反斜杠用于转义后面的字符\",{\"1\":{\"61\":1}}],[\"反斜杠\",{\"1\":{\"61\":1}}],[\"~dp0\",{\"1\":{\"1041\":2}}],[\"~=\",{\"1\":{\"1005\":1}}],[\"~\",{\"1\":{\"61\":1,\"473\":1,\"648\":1,\"685\":1,\"795\":7,\"796\":5,\"797\":1,\"857\":1,\"983\":1,\"986\":1,\"1004\":1,\"1005\":24,\"1092\":1}}],[\"实时预览文档效果\",{\"1\":{\"1161\":1}}],[\"实验楼抢占计划\",{\"1\":{\"1160\":1}}],[\"实验楼电脑又比较好\",{\"1\":{\"1160\":1}}],[\"实验楼的话就离得近只要带上自己的u盘和耳机就行了\",{\"1\":{\"1160\":1}}],[\"实习的话我能给的建议不多\",{\"1\":{\"1150\":1}}],[\"实在感谢分享\",{\"1\":{\"980\":1}}],[\"实在太妙了\",{\"1\":{\"980\":1}}],[\"实战篇性价比高\",{\"1\":{\"870\":1}}],[\"实施有困难\",{\"1\":{\"688\":1}}],[\"实操\",{\"0\":{\"495\":1,\"496\":1}}],[\"实体对象\",{\"0\":{\"416\":1}}],[\"实体类\",{\"1\":{\"240\":1,\"409\":1}}],[\"实例变量指的是类中定义的变量\",{\"1\":{\"704\":1}}],[\"实例变量\",{\"0\":{\"704\":1}}],[\"实例变量的准备是在对象实例化时进行的\",{\"1\":{\"679\":1}}],[\"实例对象也可以调用静态方法\",{\"0\":{\"667\":1}}],[\"实例都创建完成后\",{\"1\":{\"543\":1}}],[\"实例\",{\"1\":{\"543\":3,\"722\":1,\"923\":1}}],[\"实例销毁\",{\"1\":{\"489\":1}}],[\"实例传递\",{\"1\":{\"489\":2}}],[\"实例化并初始化\",{\"1\":{\"543\":1}}],[\"实例化并注入它们所依赖的\",{\"1\":{\"543\":1}}],[\"实例化和初始化的过程\",{\"1\":{\"543\":1}}],[\"实例化和初始化\",{\"1\":{\"543\":1}}],[\"实例化时出现无限递归的问题\",{\"1\":{\"543\":1}}],[\"实例化\",{\"1\":{\"489\":1,\"543\":1}}],[\"实例中定义的名为\",{\"1\":{\"220\":1}}],[\"实例和对应的局部变量值的映射关系\",{\"1\":{\"156\":1}}],[\"实测有效\",{\"1\":{\"1160\":1}}],[\"实测有用\",{\"1\":{\"792\":1,\"802\":1}}],[\"实测while这里这么写不行\",{\"1\":{\"1085\":1}}],[\"实测curl\",{\"1\":{\"1041\":1}}],[\"实测用\",{\"1\":{\"937\":1}}],[\"实测用idea操作docker比用\",{\"1\":{\"789\":1}}],[\"实测能查用公司mysql服务器的人\",{\"1\":{\"893\":1}}],[\"实测如果我不加这个容器run完状态是\",{\"1\":{\"790\":1}}],[\"实测目录不用会自己新建\",{\"1\":{\"789\":1}}],[\"实测不用\",{\"1\":{\"240\":1}}],[\"实测\",{\"1\":{\"219\":1,\"543\":1,\"871\":1,\"959\":1,\"1041\":1}}],[\"实测可搭梯子开全局访问\",{\"1\":{\"76\":1}}],[\"实现mvcc功能\",{\"1\":{\"902\":1}}],[\"实现跨域请求\",{\"1\":{\"883\":1}}],[\"实现扩容\",{\"1\":{\"865\":1}}],[\"实现有什么不同\",{\"0\":{\"740\":1}}],[\"实现全局异常处理\",{\"0\":{\"729\":1}}],[\"实现全局跨域\",{\"1\":{\"545\":1}}],[\"实现消息推送系统\",{\"1\":{\"713\":1}}],[\"实现一个即时通讯系统\",{\"1\":{\"713\":1}}],[\"实现一个自己的\",{\"1\":{\"713\":1}}],[\"实现是sub类\",{\"1\":{\"697\":1}}],[\"实现完后给java\",{\"1\":{\"689\":1}}],[\"实现图片加密操作\",{\"1\":{\"688\":1}}],[\"实现线程有四种方式\",{\"1\":{\"687\":1}}],[\"实现runnable接口\",{\"1\":{\"687\":1}}],[\"实现动态代理的方式很多\",{\"1\":{\"638\":1}}],[\"实现起来也比较简单\",{\"1\":{\"628\":1}}],[\"实现起来非常简单\",{\"1\":{\"609\":1}}],[\"实现了\",{\"1\":{\"935\":1}}],[\"实现了异步的操作日志记录\",{\"1\":{\"883\":1}}],[\"实现了comparable接口\",{\"1\":{\"687\":1}}],[\"实现了serializable接口\",{\"1\":{\"687\":1}}],[\"实现了从数据库获取用户具备的权限字符串\",{\"1\":{\"630\":1}}],[\"实现了基本的权限管理\",{\"1\":{\"630\":1}}],[\"实现了应用程序与消息中间件细节之间的隔离\",{\"1\":{\"594\":1}}],[\"实现了两个服务的横向调用\",{\"1\":{\"560\":1}}],[\"实现服务降级\",{\"1\":{\"585\":1}}],[\"实现服务发现与注册\",{\"1\":{\"563\":1}}],[\"实现负载均衡\",{\"1\":{\"565\":1}}],[\"实现该功能的是resourceurlencodingfilter\",{\"1\":{\"539\":1}}],[\"实现applicationcontextaware接口的作用\",{\"0\":{\"538\":1,\"1082\":1}}],[\"实现步骤\",{\"1\":{\"534\":1}}],[\"实现的blob\",{\"1\":{\"1084\":1}}],[\"实现的方法有很多\",{\"1\":{\"639\":1}}],[\"实现的\",{\"1\":{\"520\":1,\"534\":1,\"905\":1}}],[\"实现cache接口即可\",{\"1\":{\"448\":1}}],[\"实现类是掉不了这个a方法的\",{\"1\":{\"686\":1}}],[\"实现类继承适配器重写\",{\"1\":{\"471\":1}}],[\"实现类\",{\"1\":{\"252\":1}}],[\"实现树形结构的\",{\"1\":{\"229\":1}}],[\"实现与model双向绑定\",{\"1\":{\"220\":1}}],[\"实现字符串拼接\",{\"1\":{\"216\":1}}],[\"实现定时任务\",{\"0\":{\"187\":1}}],[\"实现单点登录\",{\"1\":{\"153\":2}}],[\"实现\",{\"0\":{\"629\":1},\"1\":{\"126\":1,\"156\":1,\"176\":1,\"354\":2,\"493\":1,\"496\":1,\"519\":1,\"538\":1,\"629\":1,\"844\":2,\"1081\":1,\"1082\":1,\"1084\":1}}],[\"实践\",{\"0\":{\"484\":1},\"1\":{\"73\":1,\"959\":1}}],[\"实际情况可能只有当事人清楚\",{\"1\":{\"1116\":1}}],[\"实际能看到的2个物理cpu\",{\"1\":{\"1095\":1}}],[\"实际业务场景避免多表\",{\"1\":{\"970\":1}}],[\"实际语句\",{\"1\":{\"959\":1}}],[\"实际场景可能更加复杂\",{\"1\":{\"933\":1}}],[\"实际解决办法就是先报警\",{\"1\":{\"866\":1}}],[\"实际生产不会用到的\",{\"1\":{\"866\":1}}],[\"实际调用的是person的无参构造\",{\"1\":{\"763\":1}}],[\"实际内容再从常量池中引\",{\"1\":{\"687\":1}}],[\"实际开发少\",{\"1\":{\"686\":1}}],[\"实际传子类对象\",{\"1\":{\"686\":1}}],[\"实际比较的是enum的ordinal值\",{\"1\":{\"671\":1}}],[\"实际switch比较的string\",{\"1\":{\"671\":1}}],[\"实际还是用的int\",{\"1\":{\"671\":1}}],[\"实际还是return\",{\"1\":{\"125\":1}}],[\"实际只支持int类型\",{\"1\":{\"671\":1}}],[\"实际只用锁一行\",{\"1\":{\"299\":1}}],[\"实际是解释和编译混合的一种模式\",{\"1\":{\"635\":1}}],[\"实际项目中我们不会把密码明文存储在数据库中\",{\"1\":{\"625\":1}}],[\"实际项目中一个token搞定也不会有什么问题\",{\"1\":{\"70\":1}}],[\"实际大多数公司的项目技术难点和涵盖范围不如这个项目\",{\"1\":{\"261\":1}}],[\"实际上事务\",{\"1\":{\"931\":1}}],[\"实际上主键索引也是可以使用多个字段的\",{\"1\":{\"925\":1}}],[\"实际上只使用了索引a\",{\"1\":{\"923\":1}}],[\"实际上每条记录在更新的时候都会同时记录一条回滚操作\",{\"1\":{\"906\":1}}],[\"实际上其它4个消息被默认ack但实际上还没处理\",{\"1\":{\"837\":1}}],[\"实际上字符串常量池\",{\"1\":{\"722\":1}}],[\"实际上放进去的是什么呢\",{\"1\":{\"722\":1}}],[\"实际上这道题考查的是两同两小一大原则\",{\"1\":{\"659\":1}}],[\"实际上\",{\"1\":{\"183\":2,\"534\":1,\"625\":1,\"724\":1,\"935\":2,\"1084\":1}}],[\"实际上是代理类调用的\",{\"1\":{\"179\":1,\"182\":1}}],[\"实际用的是增强后的代理类\",{\"1\":{\"179\":1}}],[\"实际就是一个一次性字符串\",{\"1\":{\"70\":1}}],[\"实际配置可能会根据你的服务器环境和需求而有所不同\",{\"1\":{\"48\":1}}],[\"实用\",{\"1\":{\"61\":1}}],[\"解耦\",{\"1\":{\"813\":1}}],[\"解释或者编译执行\",{\"1\":{\"635\":1}}],[\"解释下什么是as\",{\"1\":{\"329\":1}}],[\"解压缩\",{\"1\":{\"1081\":1}}],[\"解压版\",{\"1\":{\"808\":1}}],[\"解压\",{\"1\":{\"800\":1}}],[\"解压并启动seata\",{\"1\":{\"608\":1}}],[\"解压安装包\",{\"1\":{\"594\":1}}],[\"解密信息等访问接口\",{\"1\":{\"591\":1}}],[\"解密后的数据只有\",{\"1\":{\"66\":1}}],[\"解雇临时工\",{\"1\":{\"362\":1}}],[\"解锁订单时为了防止订单解锁晚于库存解锁的bug\",{\"1\":{\"844\":1}}],[\"解锁订单方法监听死信队列\",{\"1\":{\"844\":1}}],[\"解锁时判断是否允许解锁\",{\"1\":{\"844\":1}}],[\"解锁表如果用定时任务很麻烦\",{\"1\":{\"839\":1}}],[\"解锁失败\",{\"1\":{\"837\":1}}],[\"解锁成功\",{\"1\":{\"837\":1}}],[\"解锁之前\",{\"1\":{\"329\":1}}],[\"解锁库存\",{\"0\":{\"188\":1,\"844\":1},\"1\":{\"837\":1}}],[\"解锁放到finally\",{\"1\":{\"115\":1}}],[\"解锁\",{\"0\":{\"111\":1},\"1\":{\"87\":1,\"1006\":1}}],[\"解铃还需系铃人\",{\"1\":{\"87\":1}}],[\"解析阶段\",{\"1\":{\"722\":1}}],[\"解析token获取其中的userid\",{\"1\":{\"627\":1}}],[\"解析文件的每一个信息保存在configuration中\",{\"1\":{\"465\":1}}],[\"解析jwt后发现即将过期就生成一个新token\",{\"1\":{\"70\":1}}],[\"解析\",{\"1\":{\"69\":1,\"627\":1,\"679\":1}}],[\"解决冲突\",{\"0\":{\"992\":1}}],[\"解决这个的方法就是使用中间件\",{\"1\":{\"961\":1}}],[\"解决读写冲突\",{\"1\":{\"906\":3}}],[\"解决缓存雪崩\",{\"1\":{\"868\":1}}],[\"解决缓存击穿\",{\"1\":{\"867\":1}}],[\"解决缓存穿透\",{\"1\":{\"866\":1}}],[\"解决1\",{\"1\":{\"848\":1}}],[\"解决2\",{\"1\":{\"847\":1,\"848\":1}}],[\"解决了前面数\",{\"1\":{\"725\":1}}],[\"解决了高并发系统的性能问题\",{\"1\":{\"441\":1}}],[\"解决途径\",{\"1\":{\"688\":1}}],[\"解决方法\",{\"1\":{\"584\":1,\"766\":1,\"855\":1,\"941\":1}}],[\"解决方案一\",{\"1\":{\"987\":1}}],[\"解决方案看课件\",{\"1\":{\"866\":1}}],[\"解决方案\",{\"0\":{\"166\":1,\"334\":1},\"1\":{\"107\":1,\"118\":1,\"844\":1}}],[\"解决代码膨胀问题\",{\"0\":{\"584\":1}}],[\"解决springboot跨域请求的问题\",{\"0\":{\"544\":1}}],[\"解决返回中文字符串乱码问题\",{\"1\":{\"480\":1}}],[\"解决上面一开始说的关联性的问题\",{\"0\":{\"376\":1}}],[\"解决上述问题\",{\"0\":{\"302\":1}}],[\"解决上述两个问题\",{\"1\":{\"148\":1}}],[\"解决资源不足的问题\",{\"1\":{\"366\":1}}],[\"解决aliyun\",{\"1\":{\"238\":1}}],[\"解决跨域问题不能访问\",{\"1\":{\"706\":1}}],[\"解决跨域\",{\"0\":{\"231\":1},\"1\":{\"231\":1}}],[\"解决闪烁问题\",{\"0\":{\"224\":1},\"1\":{\"224\":1}}],[\"解决重点\",{\"1\":{\"156\":1,\"160\":1,\"581\":1}}],[\"解决不了不同域名的问题了\",{\"1\":{\"153\":1}}],[\"解决子域session共享问题\",{\"1\":{\"147\":1}}],[\"解决+salt\",{\"1\":{\"132\":1}}],[\"解决could\",{\"1\":{\"125\":1}}],[\"解决办法\",{\"1\":{\"108\":1,\"565\":1,\"802\":1,\"1162\":1}}],[\"解决\",{\"0\":{\"133\":1,\"291\":1,\"875\":1},\"1\":{\"65\":1,\"76\":1,\"87\":4,\"103\":1,\"108\":1,\"111\":1,\"117\":1,\"118\":1,\"125\":2,\"150\":1,\"151\":1,\"156\":1,\"157\":1,\"160\":1,\"161\":1,\"179\":2,\"202\":1,\"223\":1,\"236\":1,\"309\":1,\"398\":1,\"508\":1,\"576\":1,\"585\":1,\"594\":1,\"706\":1,\"837\":1,\"846\":3,\"847\":1,\"848\":1,\"857\":1,\"996\":1,\"1013\":1,\"1027\":1}}],[\"解决系统之间session不共享问题\",{\"1\":{\"52\":1}}],[\"解码工具\",{\"1\":{\"60\":1}}],[\"了一天都没能解决\",{\"1\":{\"1150\":1}}],[\"了就要考虑扩容\",{\"1\":{\"703\":1}}],[\"了upupor的开源项目发现项目里的数据库敏感信息都是\",{\"1\":{\"522\":1}}],[\"了`\",{\"1\":{\"216\":1}}],[\"了下看到进了应该是的吧\",{\"1\":{\"124\":1}}],[\"了解验证码\",{\"1\":{\"877\":1}}],[\"了解么\",{\"0\":{\"735\":1}}],[\"了解这个结构已经很简单了\",{\"1\":{\"723\":1}}],[\"了解锁升级吗\",{\"0\":{\"379\":1}}],[\"了解\",{\"0\":{\"119\":1},\"1\":{\"554\":1,\"688\":1,\"689\":1,\"961\":1}}],[\"了\",{\"1\":{\"60\":1,\"92\":1,\"572\":2,\"589\":1,\"814\":1,\"901\":1,\"931\":2,\"1006\":1,\"1144\":1,\"1150\":1}}],[\"到下一行重新键入\",{\"1\":{\"1038\":1}}],[\"到同名的\",{\"1\":{\"1005\":1}}],[\"到主键索引上找出数据行\",{\"1\":{\"924\":1}}],[\"到达\",{\"1\":{\"929\":1}}],[\"到达后会回调confirmcallback\",{\"1\":{\"834\":1}}],[\"到达以下阀值\",{\"1\":{\"587\":1}}],[\"到的公钥内容放入\",{\"1\":{\"797\":1,\"983\":1}}],[\"到的笔记\",{\"1\":{\"90\":1}}],[\"到231\",{\"1\":{\"739\":1}}],[\"到底什么才是常量表达式呢\",{\"1\":{\"725\":1}}],[\"到底几个对象\",{\"1\":{\"723\":1}}],[\"到基于更加精细化的\",{\"1\":{\"641\":1}}],[\"到处运行\",{\"1\":{\"634\":1}}],[\"到此\",{\"1\":{\"630\":1}}],[\"到application不生效到bootstrap生效\",{\"1\":{\"597\":1}}],[\"到指定时间执行任务\",{\"1\":{\"994\":1}}],[\"到指定地方\",{\"1\":{\"590\":1}}],[\"到指定的机器上登录\",{\"1\":{\"144\":1}}],[\"到接口就行\",{\"1\":{\"576\":1}}],[\"到时候估计得还债\",{\"1\":{\"575\":1}}],[\"到这为止还是使用的char类型数组来存储字符\",{\"1\":{\"721\":1}}],[\"到这里我暂时中断了\",{\"1\":{\"876\":1}}],[\"到这里我们就可以明白了\",{\"1\":{\"720\":1}}],[\"到这里\",{\"1\":{\"722\":1}}],[\"到这里基本就可以拿满分了\",{\"1\":{\"329\":1}}],[\"到这个类投射成了\",{\"1\":{\"229\":1}}],[\"到\",{\"1\":{\"60\":1,\"61\":1,\"223\":1,\"594\":1,\"625\":1,\"629\":1,\"647\":1,\"739\":1,\"996\":1,\"1005\":1,\"1092\":1,\"1104\":1,\"1107\":3,\"1112\":2,\"1129\":1}}],[\"qt\",{\"1\":{\"959\":4}}],[\"qty\",{\"1\":{\"959\":6}}],[\"q6\",{\"1\":{\"929\":3}}],[\"q5\",{\"1\":{\"929\":3}}],[\"q4\",{\"1\":{\"929\":3}}],[\"q3\",{\"1\":{\"929\":2}}],[\"q2\",{\"1\":{\"929\":2}}],[\"q1\",{\"1\":{\"929\":2}}],[\"qeustion\",{\"1\":{\"929\":1}}],[\"qbc\",{\"1\":{\"465\":1}}],[\"quotes\",{\"1\":{\"1006\":2}}],[\"quot\",{\"1\":{\"430\":2,\"432\":4}}],[\"quenen\",{\"1\":{\"835\":1}}],[\"queuingprotocol\",{\"1\":{\"818\":1}}],[\"queues\",{\"1\":{\"829\":1,\"830\":2,\"831\":1}}],[\"queue和两者之间的binding\",{\"1\":{\"828\":1}}],[\"queue\",{\"0\":{\"364\":1},\"1\":{\"362\":3,\"641\":1,\"817\":1,\"818\":1,\"823\":2,\"829\":4,\"830\":2,\"831\":1,\"844\":4}}],[\"questionterminal\",{\"1\":{\"662\":1,\"670\":1,\"671\":1,\"696\":1}}],[\"question\",{\"1\":{\"383\":1,\"571\":1,\"897\":2,\"899\":2,\"925\":1,\"933\":1,\"998\":1}}],[\"questions\",{\"1\":{\"302\":1,\"378\":1,\"494\":1,\"724\":1,\"739\":1,\"779\":1}}],[\"querywithpassthrough\",{\"1\":{\"876\":1}}],[\"querywrapper\",{\"1\":{\"743\":3,\"1101\":3}}],[\"query\",{\"0\":{\"272\":1},\"1\":{\"100\":1,\"246\":1,\"273\":2,\"274\":1,\"275\":1,\"276\":2,\"277\":1,\"278\":1,\"279\":1,\"893\":1,\"894\":3,\"897\":2,\"981\":1}}],[\"queryselector\",{\"1\":{\"61\":1}}],[\"quickstart\",{\"1\":{\"1161\":1}}],[\"quicksort\",{\"1\":{\"1085\":8}}],[\"quickshade\",{\"1\":{\"996\":1}}],[\"quick\",{\"1\":{\"281\":1}}],[\"quarantine\",{\"1\":{\"999\":2}}],[\"quartz\",{\"0\":{\"200\":1},\"1\":{\"200\":1,\"501\":1}}],[\"quantid\",{\"1\":{\"938\":1}}],[\"quantid=t2\",{\"1\":{\"938\":2}}],[\"quantity=2\",{\"1\":{\"169\":1}}],[\"quantity\",{\"1\":{\"169\":1,\"959\":1}}],[\"quant\",{\"1\":{\"938\":3,\"959\":2}}],[\"qualified\",{\"1\":{\"679\":1}}],[\"qualifier中指定bean的名字来注入你想要的那个bean\",{\"1\":{\"488\":1}}],[\"qualifier注解\",{\"1\":{\"488\":1}}],[\"qq服务器\",{\"1\":{\"136\":1}}],[\"qq\",{\"1\":{\"105\":1,\"136\":1,\"330\":1,\"865\":1,\"959\":1,\"1003\":1,\"1008\":1}}],[\"qps\",{\"1\":{\"100\":2}}],[\"qaq\",{\"1\":{\"92\":1}}],[\"qag7\",{\"1\":{\"68\":1}}],[\"q\",{\"0\":{\"543\":1},\"1\":{\"76\":2,\"91\":1,\"92\":1,\"112\":2,\"125\":4,\"156\":1,\"157\":3,\"488\":1,\"539\":1,\"543\":1,\"546\":1,\"570\":1,\"572\":3,\"606\":1,\"627\":2,\"849\":2,\"868\":1,\"881\":1,\"882\":1,\"883\":3,\"902\":1,\"908\":1,\"919\":1,\"959\":9,\"996\":1,\"998\":1,\"1010\":1,\"1012\":2,\"1085\":20,\"1160\":2}}],[\"qingshan\",{\"1\":{\"73\":3}}],[\"qrcode\",{\"1\":{\"1005\":1}}],[\"qr=\",{\"1\":{\"1005\":1}}],[\"qr\",{\"1\":{\"60\":1}}],[\"q=0\",{\"1\":{\"47\":5}}],[\"将显示表情符号键盘\",{\"0\":{\"1034\":1}}],[\"将镜像仓库的地址改成https类型的\",{\"1\":{\"1013\":1}}],[\"将代码拷贝\",{\"1\":{\"994\":1}}],[\"将其记录到\",{\"1\":{\"990\":1}}],[\"将其纳入xid对应全局事务的管辖\",{\"1\":{\"606\":1}}],[\"将自动添加所有已修改的文件到暂存区\",{\"1\":{\"990\":1}}],[\"将暂存区的内容提交到本地库\",{\"1\":{\"990\":1}}],[\"将工作区的\",{\"1\":{\"990\":1}}],[\"将插入一条新的记录\",{\"1\":{\"959\":1}}],[\"将匹配除了\",{\"1\":{\"959\":1}}],[\"将匹配\",{\"1\":{\"959\":2}}],[\"将匹配包含\",{\"1\":{\"959\":1}}],[\"将会选择出\",{\"1\":{\"959\":1}}],[\"将会被合并\",{\"1\":{\"947\":1}}],[\"将会导致try块\",{\"1\":{\"649\":1}}],[\"将参数\",{\"1\":{\"932\":1}}],[\"将查找频繁的数据进行靠左创建索引\",{\"1\":{\"923\":1}}],[\"将启动参数\",{\"1\":{\"905\":1}}],[\"将存储的数据划分为若干个\",{\"1\":{\"903\":1}}],[\"将存活的对象从一个区域复制到另一个区域\",{\"1\":{\"385\":1}}],[\"将备份的\",{\"1\":{\"901\":1}}],[\"将新的令牌添加到响应头中\",{\"1\":{\"890\":1}}],[\"将新特性代码自动转换成浏览器能兼容的老代码\",{\"1\":{\"215\":1,\"222\":1}}],[\"将前端应用发送的请求转发到目标url\",{\"1\":{\"883\":1}}],[\"将redis拿到的hash填充到bean\",{\"1\":{\"876\":1}}],[\"将user对象转为hashmap存储到redis\",{\"1\":{\"876\":1}}],[\"将缓存失效时间分散开\",{\"1\":{\"868\":1}}],[\"将接口设计成幂等性\",{\"1\":{\"847\":1}}],[\"将触发returncallback\",{\"1\":{\"846\":1}}],[\"将由消息代理接管\",{\"1\":{\"816\":1}}],[\"将80端口转发到8080端口\",{\"1\":{\"809\":1}}],[\"将容器与主机共享网络命名空间\",{\"1\":{\"796\":1}}],[\"将容器的\",{\"1\":{\"210\":1}}],[\"将密码作为输入通过管道传递给\",{\"1\":{\"782\":1}}],[\"将集合中的每一个元素都带入到接口predicate的test方法中\",{\"1\":{\"768\":1}}],[\"将集合中的每一个元素都带入到接口consumer的方法accept中\",{\"1\":{\"767\":1}}],[\"将排列的依据传入\",{\"1\":{\"765\":1}}],[\"将这个操作记录更新到磁盘里面\",{\"1\":{\"899\":1}}],[\"将这个值封装给javabean的哪个属性\",{\"1\":{\"404\":1}}],[\"将这些person对象按照年龄进行降序排列\",{\"1\":{\"765\":1}}],[\"将装配的控制权移交到了程序之外\",{\"1\":{\"740\":1}}],[\"将链表转换为红黑树\",{\"1\":{\"740\":1}}],[\"将处理的结果返回给\",{\"1\":{\"738\":1}}],[\"将字符串对象\",{\"1\":{\"723\":1}}],[\"将字节码文件转换为机器码是在java虚拟机执行类加载过程中的解析和执行阶段进行的\",{\"1\":{\"679\":1}}],[\"将引用该已存在的对象\",{\"1\":{\"723\":1}}],[\"将引用分为了\",{\"1\":{\"660\":1}}],[\"将头部指针指向元素\",{\"1\":{\"694\":1}}],[\"将类\",{\"1\":{\"679\":1}}],[\"将类的字节码加载到内存中并转换为可执行的java类的过程\",{\"1\":{\"679\":1}}],[\"将原本同步的服务调用改为异步调用\",{\"1\":{\"603\":1}}],[\"将原来的事务挂起\",{\"1\":{\"178\":1}}],[\"将service微服务分别部署在了杭州机房和广州机房\",{\"1\":{\"598\":1}}],[\"将springmvc不能处理的请求交给tomcat\",{\"1\":{\"460\":1}}],[\"将模块置于维护模式\",{\"1\":{\"594\":1}}],[\"将对象转为json\",{\"1\":{\"580\":1}}],[\"将来地址出现变动时\",{\"1\":{\"562\":1}}],[\"将来怎么把拦截器中获取的用户信息传递给后续的每个业务逻辑\",{\"1\":{\"156\":1}}],[\"将使用该默认值\",{\"1\":{\"522\":1}}],[\"将写好的插件注册到全局配置文件中\",{\"1\":{\"465\":1}}],[\"将md5值添加到文件名上\",{\"1\":{\"1084\":1}}],[\"将mapper接口生成代理注入到spring\",{\"1\":{\"462\":1}}],[\"将mysql数据往es里面存一份\",{\"1\":{\"263\":1}}],[\"将用户经常查询的数据放在缓存\",{\"1\":{\"441\":1}}],[\"将用户发送到错误的ip地址或恶意网站上\",{\"1\":{\"77\":1}}],[\"将当前保存为工作区会有一个xxx\",{\"1\":{\"1100\":1}}],[\"将当前遍历出的元素赋值给指定的变量\",{\"1\":{\"436\":1}}],[\"将当前会话的隔离级别降低\",{\"1\":{\"257\":1}}],[\"将多列的值封装map传递\",{\"1\":{\"428\":1}}],[\"将结果压入操作数栈中\",{\"1\":{\"388\":1}}],[\"将操作数栈的4和5从栈中弹出并相加\",{\"1\":{\"388\":1}}],[\"将内存划分为不同的代\",{\"1\":{\"385\":1}}],[\"将被移动到\",{\"1\":{\"385\":1}}],[\"将业务处理完成的对象\",{\"1\":{\"251\":1}}],[\"将配置移动到application\",{\"1\":{\"229\":1}}],[\"将配置文件夹挂载到主机\",{\"1\":{\"210\":2}}],[\"将项目打包\",{\"1\":{\"222\":1}}],[\"将遍历的\",{\"1\":{\"220\":1}}],[\"将输入的合法符串转为数字\",{\"1\":{\"220\":1}}],[\"将日志文件夹挂载到主机\",{\"1\":{\"210\":1}}],[\"将该context设置为子线程的context\",{\"1\":{\"157\":1}}],[\"将离线购物车里合并后清空离线购物车\",{\"1\":{\"154\":1}}],[\"将数据按照指定的列分组\",{\"1\":{\"963\":1}}],[\"将数据按照数据的创建时间或更新时间分配到多个数据库或多个数据表中\",{\"1\":{\"961\":1}}],[\"将数据按照数据所在的位置\",{\"1\":{\"961\":1}}],[\"将数据按照给定的范围分配到多个数据库或多个数据表中\",{\"1\":{\"961\":1}}],[\"将数据按照一定的算法\",{\"1\":{\"961\":1}}],[\"将数据存于内存的\",{\"1\":{\"265\":1}}],[\"将数据保存为json格式\",{\"1\":{\"123\":1}}],[\"将数据放在session中\",{\"1\":{\"98\":1,\"130\":1,\"536\":1}}],[\"将数据放在url后面\",{\"1\":{\"98\":1,\"536\":1}}],[\"将序列化的数据存到redis中\",{\"1\":{\"123\":1}}],[\"将\",{\"1\":{\"105\":1,\"302\":1,\"522\":1,\"543\":1,\"779\":1,\"900\":1,\"905\":1,\"914\":1,\"986\":1}}],[\"将请求和页面映射过来\",{\"1\":{\"97\":1}}],[\"将域名转换为对应的ip地址\",{\"1\":{\"77\":1}}],[\"将映射到路径\",{\"1\":{\"60\":1}}],[\"将token保存在sessionstroage中\",{\"1\":{\"52\":1}}],[\"将token解析出来\",{\"1\":{\"52\":1}}],[\"而盲目的去追\",{\"1\":{\"1139\":1}}],[\"而直接寻址技术已经成为当代计算机软硬件的标准技术之一了\",{\"1\":{\"1090\":1}}],[\"而直接引用是一种具体的内存地址\",{\"1\":{\"679\":1}}],[\"而硬盘是被分到跟光盘\",{\"1\":{\"1089\":1}}],[\"而应该发挥这些能力去帮助他们\",{\"1\":{\"1077\":1}}],[\"而linux是正斜杠\",{\"1\":{\"1039\":1}}],[\"而home只能到光标在这行行头\",{\"1\":{\"1037\":1}}],[\"而http请求又是无状态协议的原因吗\",{\"1\":{\"581\":1}}],[\"而当只需匹配单行文本时\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"而当你需要在\",{\"1\":{\"216\":1}}],[\"而其他模块也需要使用它提供的功能\",{\"1\":{\"1012\":1}}],[\"而其它线程是随机执行的\",{\"1\":{\"333\":1}}],[\"而macos是调节了字体\",{\"1\":{\"998\":1}}],[\"而您在系统设置中进行的缩放只会调整ui元素的大小\",{\"1\":{\"998\":1}}],[\"而ci\",{\"1\":{\"994\":1}}],[\"而cglib代理可以代理任何类的方法\",{\"1\":{\"182\":1}}],[\"而变基也可能会产生冲突\",{\"1\":{\"990\":1}}],[\"而变基通常用于在一个分支上更新另一个分支的修改\",{\"1\":{\"990\":1}}],[\"而变基会将修改历史记录移动到一个新的基底分支上\",{\"1\":{\"990\":1}}],[\"而变基会将原来的分支历史记录\",{\"1\":{\"990\":1}}],[\"而变基适合于将一个分支的修改应用到另一个分支上\",{\"1\":{\"990\":1}}],[\"而git\",{\"1\":{\"990\":1}}],[\"而将数据库当成一种带事务能力的kv系统来使用\",{\"1\":{\"970\":1}}],[\"而将整个库设置为\",{\"1\":{\"927\":1}}],[\"而业务又不在乎那几百微妙到毫秒级的延时差距\",{\"1\":{\"970\":1}}],[\"而访问用户有一千\",{\"1\":{\"961\":1}}],[\"而使用sharding\",{\"1\":{\"960\":1}}],[\"而未对其他列进行聚合函数处理\",{\"1\":{\"959\":1}}],[\"而数据版本的可见性规则\",{\"1\":{\"935\":1}}],[\"而每1个地址对应1个1个字节\",{\"1\":{\"1092\":1}}],[\"而每天都要冲刺一百米\",{\"1\":{\"980\":1}}],[\"而每行数据也都是有多个版本的\",{\"1\":{\"935\":1}}],[\"而每个线程创建时jvm都会为其创建一个工作内存\",{\"1\":{\"287\":1}}],[\"而它的查询方法与表一样\",{\"1\":{\"934\":1}}],[\"而关掉死锁检测意味着可能会出现大量的超时\",{\"1\":{\"932\":1}}],[\"而关于行锁的内容\",{\"1\":{\"926\":1}}],[\"而事务\",{\"1\":{\"932\":1,\"934\":1}}],[\"而事务a将不受影响\",{\"1\":{\"179\":1}}],[\"而实际上\",{\"1\":{\"928\":1}}],[\"而执行期间另一个线程对这个表结构做变更\",{\"1\":{\"928\":1}}],[\"而由于\",{\"1\":{\"927\":1}}],[\"而由于元素\",{\"1\":{\"694\":1}}],[\"而锁就是用来实现这些访问规则的重要数据结构\",{\"1\":{\"926\":1}}],[\"而复合索\",{\"1\":{\"923\":1}}],[\"而再建立一个\",{\"1\":{\"922\":1}}],[\"而有业务逻辑的字段做主键\",{\"1\":{\"918\":1}}],[\"而有序数组在等值查询\",{\"1\":{\"915\":1}}],[\"而哪些场景下不应该\",{\"1\":{\"918\":1}}],[\"而更糟的情况是\",{\"1\":{\"918\":1}}],[\"而更新数据需要找位置\",{\"1\":{\"899\":1}}],[\"而即使多个存储引擎支持同一种类型的索引\",{\"1\":{\"916\":1}}],[\"而回滚段有\",{\"1\":{\"906\":1}}],[\"而两阶段提交就是让这两个状态保持逻辑上的一致\",{\"1\":{\"901\":1}}],[\"而粉板和账本配合的整个过程\",{\"1\":{\"899\":1}}],[\"而你可以骄傲的和别人说\",{\"1\":{\"1150\":1}}],[\"而你所秉持的\",{\"1\":{\"1077\":1}}],[\"而你push的却只是一个文件\",{\"1\":{\"987\":1}}],[\"而你不得不加个字段\",{\"1\":{\"928\":1}}],[\"而你执行了这个语句\",{\"1\":{\"897\":1}}],[\"而你的值编辑后转换为null\",{\"1\":{\"876\":1}}],[\"而第二条语句走了主键索引\",{\"1\":{\"897\":1}}],[\"而优化器的作用就是决定选择使用哪一个方案\",{\"1\":{\"896\":1}}],[\"而settings文件中的<repository>标签用于全局级别的仓库配置\",{\"1\":{\"1014\":1}}],[\"而stringredistemplate<string\",{\"1\":{\"876\":1}}],[\"而s1指向的不是常量池中的对象引用所以返回\",{\"1\":{\"723\":1}}],[\"而生的项目\",{\"1\":{\"869\":1}}],[\"而延时队列\",{\"1\":{\"839\":1}}],[\"而消息头则由一系列的可选属性组成\",{\"1\":{\"823\":1}}],[\"而amqp的消息模式更加丰富\",{\"1\":{\"818\":1}}],[\"而短信系统\",{\"1\":{\"814\":1}}],[\"而在unix系统中\",{\"1\":{\"1037\":1}}],[\"而在oracle数据库中\",{\"1\":{\"959\":1}}],[\"而在\",{\"1\":{\"743\":1,\"1101\":1}}],[\"而在我看来\",{\"1\":{\"740\":1}}],[\"而在这个配置类里面\",{\"1\":{\"731\":1}}],[\"而市面上有好几家芯片制造业公司\",{\"1\":{\"740\":1}}],[\"而对它来说\",{\"1\":{\"935\":1}}],[\"而对于\",{\"1\":{\"928\":1}}],[\"而对于你确定要使用查询缓存的语句\",{\"1\":{\"894\":1}}],[\"而对于短信系统来说并不是我们的主要业务\",{\"1\":{\"814\":1}}],[\"而对于java的数组来说\",{\"1\":{\"717\":1}}],[\"而对s2来说\",{\"1\":{\"725\":1}}],[\"而上边提到的编译期常量的特点就是它的值在编译期就可以确定\",{\"1\":{\"725\":1}}],[\"而堆空间中的对象是独立的\",{\"1\":{\"723\":1}}],[\"而栈里的s只是一个变量\",{\"1\":{\"722\":1}}],[\"而又不想把它重新指向其他对象的话\",{\"1\":{\"721\":1}}],[\"而泛型的这种运行时擦除机制违反了数组安全检查的原则\",{\"1\":{\"717\":1}}],[\"而子类\",{\"1\":{\"716\":1}}],[\"而会等到整个事务提交后再释放\",{\"1\":{\"928\":1}}],[\"而会立即返回\",{\"1\":{\"712\":1}}],[\"而会使用表级锁把整张表锁住\",{\"1\":{\"81\":1,\"906\":1,\"936\":1}}],[\"而此时你的银行卡只有\",{\"1\":{\"904\":1}}],[\"而此时链表头部指针\",{\"1\":{\"694\":1}}],[\"而此时我却删了它\",{\"1\":{\"111\":1}}],[\"而元素\",{\"1\":{\"694\":3}}],[\"而线程\",{\"1\":{\"694\":1}}],[\"而代理对象可以在客户端和目标对象之间起到中介的作用\",{\"1\":{\"688\":1}}],[\"而udp只管发\",{\"1\":{\"688\":1}}],[\"而基本类型不可以\",{\"1\":{\"686\":1}}],[\"而包装类可以是\",{\"1\":{\"686\":1}}],[\"而如果用整型做主键\",{\"1\":{\"918\":1}}],[\"而如果需要识别字符是否为中文\",{\"1\":{\"685\":1}}],[\"而如果通过接口定义跑的方法\",{\"1\":{\"657\":1}}],[\"而引用数据类型只进行了引用地址的传递\",{\"1\":{\"683\":1}}],[\"而并发在同一时刻只会做一件事件\",{\"1\":{\"675\":1}}],[\"而并不一定能提升体验\",{\"1\":{\"70\":1}}],[\"而加1的这个temp又没有赋值给别人所以没用上\",{\"1\":{\"670\":1}}],[\"而后端\",{\"1\":{\"883\":1}}],[\"而后面count自加不影响count结果\",{\"1\":{\"670\":1}}],[\"而后当用户操作视图\",{\"1\":{\"218\":1}}],[\"而那时对象还没创建完成\",{\"1\":{\"667\":1}}],[\"而内存紧张时才需要被抛弃的一类对象\",{\"1\":{\"660\":1}}],[\"而他们两个的初始化顺序是靠他们俩的位置决定的\",{\"1\":{\"658\":1}}],[\"而静态域中包含静态变量\",{\"1\":{\"658\":1}}],[\"而动态代理\",{\"1\":{\"639\":1}}],[\"而无需访问实际的数据行\",{\"1\":{\"969\":1}}],[\"而无需重新进行用户身份验证\",{\"1\":{\"890\":1}}],[\"而无需实现\",{\"1\":{\"625\":1}}],[\"而无需再次输入认证信息\",{\"1\":{\"153\":1}}],[\"而都用外面一个mysql就不会有这种问题\",{\"1\":{\"599\":1}}],[\"而webflux是一个典型非阻塞异步的框架\",{\"1\":{\"590\":1}}],[\"而该中间状态不会影响系统整体可用性\",{\"1\":{\"572\":1}}],[\"而zk在服务器上部署就开了做注册中心了\",{\"1\":{\"570\":1}}],[\"而系统中的其他微服务\",{\"1\":{\"564\":1}}],[\"而服务调用者需要记录服务提供者的地址\",{\"1\":{\"562\":1}}],[\"而组件就是\",{\"1\":{\"561\":1}}],[\"而已\",{\"1\":{\"546\":1}}],[\"而仅是同名key会被后加载的键值覆盖\",{\"1\":{\"543\":1}}],[\"而同理\",{\"1\":{\"531\":1}}],[\"而配置后置处理器后为七步\",{\"1\":{\"489\":1}}],[\"而bean类中属性名是departmentname\",{\"1\":{\"422\":1}}],[\"而new的这个\",{\"1\":{\"354\":1}}],[\"而读操作的时候\",{\"1\":{\"326\":1}}],[\"而用cas\",{\"1\":{\"305\":1}}],[\"而只有在加锁情况下才会造成阻塞\",{\"1\":{\"283\":1}}],[\"而修改时必须要携带\",{\"1\":{\"241\":1}}],[\"而非早起本身\",{\"1\":{\"980\":1}}],[\"而非\",{\"1\":{\"182\":1}}],[\"而非直接访问自身的方法\",{\"1\":{\"179\":1}}],[\"而purchase方法标记了\",{\"1\":{\"179\":1}}],[\"而沿用外部方法的事务\",{\"1\":{\"179\":1}}],[\"而自创的时候用到拦截器增强\",{\"1\":{\"160\":1}}],[\"而订单系统作为中枢将三者有机的集合起来\",{\"1\":{\"158\":1}}],[\"而底层自创的时候用到拦截器增强\",{\"1\":{\"156\":1,\"581\":1}}],[\"而拦截器适用于更灵活和复杂的处理需求\",{\"1\":{\"156\":1}}],[\"而拦截器主要用于请求的拦截和预处理\",{\"1\":{\"156\":1}}],[\"而且颜值也高旋转盖帽\",{\"1\":{\"1160\":1}}],[\"而且不是还有试用期吗\",{\"1\":{\"1132\":1}}],[\"而且不需要将数据序列化和反序列化\",{\"1\":{\"156\":1}}],[\"而且只往后半夜弹\",{\"1\":{\"1104\":1}}],[\"而且只能有一个收到此消息场景\",{\"1\":{\"830\":1}}],[\"而且其实\",{\"1\":{\"996\":1}}],[\"而且如果我们初期没有规划得当\",{\"1\":{\"961\":1}}],[\"而且大事务还会导致主从延迟\",{\"1\":{\"933\":1}}],[\"而且\",{\"1\":{\"932\":1,\"961\":1,\"1130\":1}}],[\"而且这个活动只做一天\",{\"1\":{\"931\":1}}],[\"而且客户端有重试机制\",{\"1\":{\"928\":1}}],[\"而且年龄是\",{\"1\":{\"924\":1}}],[\"而且并不会自动提交\",{\"1\":{\"907\":1}}],[\"而且还可以切换\",{\"1\":{\"740\":1}}],[\"而且1\",{\"1\":{\"694\":1}}],[\"而且它的\",{\"1\":{\"660\":1}}],[\"而且方法\",{\"1\":{\"321\":1}}],[\"而且无论重排前\",{\"1\":{\"301\":1}}],[\"而且贼难找\",{\"1\":{\"192\":1}}],[\"而且可以在请求前\",{\"1\":{\"156\":1}}],[\"而且可以从很多角度去避免这种问题\",{\"1\":{\"70\":1}}],[\"而不能直接传输二进制数据\",{\"1\":{\"1081\":1}}],[\"而不会出现问题\",{\"1\":{\"1012\":1}}],[\"而不会将\",{\"1\":{\"959\":1}}],[\"而不会被shell进行扩展\",{\"1\":{\"787\":1}}],[\"而不会被阻塞\",{\"1\":{\"712\":1}}],[\"而不必等到运行期间再进行运算处理\",{\"1\":{\"725\":1}}],[\"而不必将这些信息存储在\",{\"1\":{\"156\":1}}],[\"而不用考虑各种复杂的跳转情况\",{\"1\":{\"686\":1}}],[\"而不仅仅是视图\",{\"1\":{\"520\":1}}],[\"而不在你自己的项目中所以把jar包导进去\",{\"1\":{\"456\":1}}],[\"而不需要自己打包这些依赖\",{\"1\":{\"1012\":1}}],[\"而不需要为每个连接创建一个线程\",{\"1\":{\"712\":1}}],[\"而不需要在编译时指定代理类\",{\"1\":{\"688\":1}}],[\"而不需要对它们进行修改\",{\"1\":{\"686\":1}}],[\"而不需要一个一个子项目的修改\",{\"1\":{\"556\":1}}],[\"而不需要重新获取锁\",{\"1\":{\"321\":1}}],[\"而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容\",{\"1\":{\"136\":1}}],[\"而不考虑过程中的变化\",{\"1\":{\"309\":2}}],[\"而不受外部方法事务的影响\",{\"1\":{\"179\":1}}],[\"而不适合在不同线程之间传递数据\",{\"1\":{\"156\":1}}],[\"而不是出于某种原因不得不去做\",{\"1\":{\"1139\":1}}],[\"而不是当前屏幕\",{\"0\":{\"1037\":1}}],[\"而不是作为独立运行的应用程序\",{\"1\":{\"1012\":1}}],[\"而不是计算该学生的总分或平均分等聚合值\",{\"1\":{\"959\":1}}],[\"而不是按照husbands1\",{\"1\":{\"776\":1}}],[\"而不是堆空间中的\",{\"1\":{\"723\":1}}],[\"而不是直接把\",{\"1\":{\"722\":1}}],[\"而不是直接存放的对象\",{\"1\":{\"722\":1}}],[\"而不是直接将请求与根目录进行拼接\",{\"1\":{\"73\":1}}],[\"而不是依赖本地文件系统路径\",{\"1\":{\"706\":2}}],[\"而不是新元素\",{\"1\":{\"694\":1}}],[\"而不是基本数据类型\",{\"1\":{\"688\":1}}],[\"而不是\",{\"1\":{\"688\":1}}],[\"而不是用看剧打游戏来打发时间\",{\"1\":{\"1142\":1}}],[\"而不是用\",{\"1\":{\"681\":1}}],[\"而不是可以直接执行的机器码\",{\"1\":{\"635\":1}}],[\"而不是可选项\",{\"1\":{\"572\":1}}],[\"而不是解释执行了\",{\"1\":{\"634\":1}}],[\"而不是使用security默认的用户和密码进行登录\",{\"1\":{\"624\":1}}],[\"而不是永远放弃一致性\",{\"1\":{\"572\":1}}],[\"而不是像synchronized那样\",{\"1\":{\"352\":1}}],[\"而不是entity里面的小驼峰\",{\"1\":{\"236\":1}}],[\"而不是在自己的小圈子里沾沾自喜\",{\"1\":{\"1151\":1}}],[\"而不是在一开始就读取\",{\"1\":{\"91\":1}}],[\"而不是在web应用设计里\",{\"1\":{\"70\":1}}],[\"而不是对每一条记录单独读取\",{\"1\":{\"91\":1}}],[\"而不是经过cdn服务器\",{\"1\":{\"77\":1}}],[\"而我31是没有文章的404\",{\"1\":{\"866\":1}}],[\"而我java写的esconstant是\",{\"1\":{\"125\":1}}],[\"而我们正常想要的是所有服务有一个走了数据库就行了其它用缓存\",{\"1\":{\"108\":1}}],[\"而我们需要模拟更真实的全量数据\",{\"1\":{\"100\":1}}],[\"而这时候事务\",{\"1\":{\"930\":1}}],[\"而这时第一个stream流已经使用完毕\",{\"1\":{\"772\":1}}],[\"而这个库和项目中的其他依赖产生了冲突\",{\"1\":{\"1010\":1}}],[\"而这个更新往往是在系统比较空闲的时候做\",{\"1\":{\"899\":1}}],[\"而这个类会把取到的缓存起来最后再一次性拿出来\",{\"1\":{\"688\":1}}],[\"而这就是springboot的存在意义它是一个高层框架底层是spring为了整合spring整个技术栈\",{\"1\":{\"472\":1}}],[\"而这会给我们的程序带来不小的复杂度\",{\"1\":{\"347\":1}}],[\"而这里是1个char\",{\"1\":{\"685\":1}}],[\"而这里存的是loginuser和null\",{\"1\":{\"627\":1}}],[\"而这里部署了yaml但是读这个yaml的代码\",{\"1\":{\"123\":1}}],[\"而这里我们引入单纯的\",{\"1\":{\"112\":1}}],[\"而这一篇可能自己走马观花了\",{\"1\":{\"78\":1}}],[\"而java不会与0比较\",{\"1\":{\"653\":1}}],[\"而java内存模型中规定所有变量都存储在主内存\",{\"1\":{\"287\":1}}],[\"而juc是单体\",{\"1\":{\"112\":1}}],[\"而jedis比较老了\",{\"1\":{\"107\":1}}],[\"而经过路由器越少\",{\"1\":{\"76\":1}}],[\"而时间小于1s就当1s计算\",{\"1\":{\"76\":1}}],[\"而是去努力的寻找乐趣\",{\"1\":{\"1150\":1}}],[\"而是看你究竟掌握了多了\",{\"1\":{\"1143\":1}}],[\"而是你的圈子\",{\"1\":{\"1140\":1}}],[\"而是将数据按照一定的规则进行编码\",{\"1\":{\"1081\":1}}],[\"而是承认自己的脆弱\",{\"1\":{\"1077\":1}}],[\"而是只依赖于\",{\"1\":{\"1010\":1}}],[\"而是只有\",{\"1\":{\"925\":1}}],[\"而是整行没有n\",{\"1\":{\"959\":1}}],[\"而是通常采用union\",{\"1\":{\"947\":1}}],[\"而是通过代理完成\",{\"1\":{\"640\":1}}],[\"而是通过\",{\"1\":{\"366\":1}}],[\"而是通过一个变量来让他失效\",{\"1\":{\"229\":1}}],[\"而是简单的锁等待呢\",{\"1\":{\"932\":1}}],[\"而是要等到事务结束时才释放\",{\"1\":{\"931\":1}}],[\"而是要使用\",{\"1\":{\"916\":1}}],[\"而是需要通过临时文件进行排序\",{\"1\":{\"923\":1}}],[\"而是统一使用string序列化器\",{\"1\":{\"875\":1}}],[\"而是每次需要的时候根据当前版本和\",{\"1\":{\"935\":1}}],[\"而是每次运行时在内存临时为方法生成一个aop对象\",{\"1\":{\"493\":1}}],[\"而是每一台主机都需要配\",{\"1\":{\"798\":1,\"984\":1}}],[\"而是为了解决线程\",{\"1\":{\"712\":1}}],[\"而是按照数\",{\"1\":{\"688\":1}}],[\"而是静态域\",{\"1\":{\"658\":1}}],[\"而是直接把赋值后的结果放入括号\",{\"1\":{\"653\":1}}],[\"而是直接通过原有的bean直接调用\",{\"1\":{\"179\":1,\"182\":1}}],[\"而是\",{\"1\":{\"599\":1,\"920\":1}}],[\"而是客户端的实现问题\",{\"1\":{\"581\":1}}],[\"而是会根据当前活动的配置文件来加载对应的属性\",{\"1\":{\"543\":1}}],[\"而是interceptorchain\",{\"1\":{\"465\":1}}],[\"而是使用resultmap引用自定义的结果集映射规则\",{\"1\":{\"419\":1}}],[\"而是使用filter方式\",{\"1\":{\"278\":1}}],[\"而是实体类\",{\"1\":{\"416\":1}}],[\"而是让虚拟机管理内存\",{\"1\":{\"389\":1}}],[\"而是应该为在该变量被声明并赋值时创建\",{\"1\":{\"388\":1}}],[\"而是把这个请求委派给父类加载器去完成\",{\"1\":{\"382\":1}}],[\"而是采用循环的方式去尝试获取锁\",{\"1\":{\"324\":1}}],[\"而是在include另外添加配置文件\",{\"1\":{\"810\":1}}],[\"而是在ip网络中使用ip数据包来传输控制消息和错误报告的协议\",{\"1\":{\"76\":1}}],[\"而是在\",{\"1\":{\"712\":1}}],[\"而是在重排后的步骤3才完成\",{\"1\":{\"301\":1}}],[\"而是招聘更多更加优质的开发工程师\",{\"1\":{\"283\":1}}],[\"而是走完整个事务的流程\",{\"1\":{\"100\":1}}],[\"而是return\",{\"1\":{\"88\":1}}],[\"而是前后端分离后\",{\"1\":{\"70\":1}}],[\"而2token可以在access\",{\"1\":{\"70\":1}}],[\"而\",{\"1\":{\"60\":1,\"141\":1,\"156\":2,\"157\":1,\"217\":1,\"218\":1,\"372\":1,\"482\":1,\"494\":2,\"534\":2,\"539\":1,\"543\":1,\"546\":1,\"706\":1,\"722\":1,\"743\":1,\"785\":1,\"823\":1,\"876\":1,\"884\":1,\"899\":2,\"900\":2,\"905\":1,\"906\":1,\"922\":1,\"924\":1,\"928\":1,\"933\":2,\"935\":1,\"959\":1,\"998\":2,\"1101\":1}}],[\"而随着认证用户的增多\",{\"1\":{\"52\":1}}],[\"注销掉\",{\"1\":{\"229\":1}}],[\"注释报错\",{\"1\":{\"229\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"26\":1}}],[\"注入rabbittemplate对象\",{\"1\":{\"827\":1}}],[\"注入就发生在第二步\",{\"1\":{\"543\":1}}],[\"注入静态变量方法\",{\"1\":{\"505\":1}}],[\"注入static\",{\"1\":{\"505\":1}}],[\"注入估计就是\",{\"1\":{\"488\":1}}],[\"注入\",{\"1\":{\"229\":1,\"359\":1,\"411\":1,\"543\":1}}],[\"注册账号时用的邮箱\",{\"1\":{\"986\":1}}],[\"注册账户时会收到短信验证码\",{\"1\":{\"543\":1,\"1081\":1}}],[\"注册拦截器\",{\"1\":{\"534\":1}}],[\"注册登录用到了qq或者微信的单点登录\",{\"1\":{\"261\":1}}],[\"注册\",{\"1\":{\"228\":1}}],[\"注册中心配置\",{\"1\":{\"608\":1}}],[\"注册中心集群\",{\"1\":{\"565\":1}}],[\"注册中心\",{\"0\":{\"595\":1},\"1\":{\"228\":1}}],[\"注册时候验证码页面\",{\"1\":{\"167\":1}}],[\"注册流程\",{\"0\":{\"127\":1}}],[\"注解需要在受\",{\"1\":{\"884\":1}}],[\"注解在方法上监听消息代理发布的消息\",{\"1\":{\"820\":1}}],[\"注解就能很方便地创建一个定时任务\",{\"1\":{\"730\":1}}],[\"注解解释器项目启动的时候遍历所有\",{\"1\":{\"889\":1}}],[\"注解解释器\",{\"1\":{\"688\":1,\"890\":1}}],[\"注解如果没有注解解析器\",{\"1\":{\"688\":1,\"890\":1}}],[\"注解不能正常编译\",{\"1\":{\"546\":1}}],[\"注解方式\",{\"0\":{\"546\":1}}],[\"注解到方法\",{\"1\":{\"543\":1,\"1081\":1}}],[\"注解是给程序看的\",{\"1\":{\"688\":1,\"890\":1}}],[\"注解是基于\",{\"1\":{\"520\":1}}],[\"注解是用于将方法的返回值缓存起来\",{\"1\":{\"123\":1}}],[\"注解处理器\",{\"1\":{\"688\":1,\"890\":1}}],[\"注解处理\",{\"1\":{\"520\":1}}],[\"注解的作用是发现注解\",{\"1\":{\"730\":1}}],[\"注解的方法用于处理不同类型的异常\",{\"1\":{\"520\":1}}],[\"注解的方法\",{\"1\":{\"520\":1}}],[\"注解的类通常会包含多个\",{\"1\":{\"520\":1}}],[\"注解的类来捕获并处理异常\",{\"1\":{\"520\":1}}],[\"注解的类\",{\"1\":{\"517\":1}}],[\"注解标记一个方法时\",{\"1\":{\"501\":1}}],[\"注解标注的类名及其方法名当redis的key\",{\"1\":{\"887\":1}}],[\"注解标注的类名及其方法名\",{\"1\":{\"495\":1}}],[\"注解类添加数组类型的属性\",{\"1\":{\"242\":1}}],[\"注解填分组\",{\"1\":{\"241\":1}}],[\"注解配置\",{\"1\":{\"229\":1}}],[\"注解优先配置生效\",{\"1\":{\"229\":1}}],[\"注解生效\",{\"1\":{\"229\":1}}],[\"注解为切点\",{\"1\":{\"492\":1}}],[\"注解为\",{\"1\":{\"229\":1}}],[\"注解会生效\",{\"1\":{\"229\":1}}],[\"注解\",{\"0\":{\"688\":1,\"890\":1},\"1\":{\"179\":2,\"229\":1,\"408\":1,\"482\":1,\"520\":1,\"576\":2,\"594\":1,\"688\":2,\"730\":2,\"887\":1}}],[\"注解来设置事务的传播行为\",{\"1\":{\"179\":1}}],[\"注解简化我们的开发\",{\"1\":{\"121\":1}}],[\"注解时\",{\"1\":{\"60\":1}}],[\"注\",{\"1\":{\"109\":1,\"539\":2,\"658\":1,\"703\":1,\"936\":1,\"1164\":2}}],[\"注意权限是否够\",{\"1\":{\"998\":1}}],[\"注意最左侧有个\",{\"1\":{\"993\":1}}],[\"注意此时是分支\",{\"1\":{\"990\":1}}],[\"注意会有负数要\",{\"1\":{\"952\":1}}],[\"注意自连接\",{\"0\":{\"937\":1}}],[\"注意旧版本还得装ruby环境\",{\"1\":{\"865\":1}}],[\"注意try\",{\"1\":{\"846\":1}}],[\"注意视频中终止\",{\"1\":{\"837\":1}}],[\"注意docker\",{\"1\":{\"796\":1}}],[\"注意一个类\",{\"1\":{\"688\":1}}],[\"注意看站位\",{\"1\":{\"688\":1}}],[\"注意路径\",{\"1\":{\"688\":1}}],[\"注意public后面的<e>\",{\"1\":{\"688\":1}}],[\"注意重写这两个方法时要保证一致性\",{\"1\":{\"688\":1}}],[\"注意remove\",{\"1\":{\"688\":1}}],[\"注意catch一般都是细致的异常写前面\",{\"1\":{\"686\":1}}],[\"注意super\",{\"1\":{\"686\":1}}],[\"注意submit\",{\"1\":{\"361\":1}}],[\"注意默认还是public\",{\"1\":{\"686\":1}}],[\"注意抽象类是能继承非抽象类的\",{\"1\":{\"686\":1}}],[\"注意上图\",{\"1\":{\"619\":1}}],[\"注意下图的jwt指的是\",{\"1\":{\"617\":1}}],[\"注意下载的seata服务器版本要和\",{\"1\":{\"608\":1}}],[\"注意配置细节\",{\"1\":{\"575\":1}}],[\"注意是\",{\"1\":{\"865\":1}}],[\"注意是这个包下面的\",{\"1\":{\"568\":1}}],[\"注意是autoconfigure包下的\",{\"1\":{\"125\":1}}],[\"注意有一些会有变更\",{\"1\":{\"553\":1}}],[\"注意idea\",{\"1\":{\"523\":1}}],[\"注意参数过长拿不到需要用request类拿\",{\"0\":{\"512\":1}}],[\"注意要在主启动类下\",{\"1\":{\"505\":1}}],[\"注意要配置\",{\"1\":{\"202\":1}}],[\"注意加上web模块\",{\"1\":{\"456\":1}}],[\"注意加上\",{\"1\":{\"454\":1,\"462\":1}}],[\"注意带了\",{\"1\":{\"361\":1}}],[\"注意这些标签有先后顺序的\",{\"1\":{\"400\":1}}],[\"注意这个用词\",{\"1\":{\"722\":1}}],[\"注意这个2\",{\"1\":{\"685\":1}}],[\"注意这个例子\",{\"1\":{\"591\":1}}],[\"注意这个resulttype可不是map\",{\"1\":{\"416\":1}}],[\"注意这个usessl=false\",{\"1\":{\"398\":1}}],[\"注意这个是属性\",{\"1\":{\"361\":1}}],[\"注意这里\",{\"1\":{\"216\":1}}],[\"注意unsafe类的所有方法都是native修饰的\",{\"1\":{\"304\":1}}],[\"注意区分\",{\"1\":{\"238\":1,\"240\":1}}],[\"注意wrapper要用数据库里的字段\",{\"1\":{\"236\":1}}],[\"注意小点\",{\"0\":{\"229\":1}}],[\"注意和\",{\"1\":{\"213\":1}}],[\"注意和mysql写日志的两阶段提交区分\",{\"1\":{\"183\":1,\"607\":1}}],[\"注意周中1代表周日\",{\"1\":{\"201\":1}}],[\"注意支付成功后的异步回调需要内网穿透和nginx联调\",{\"1\":{\"198\":1}}],[\"注意方案是方案框架是框架\",{\"1\":{\"183\":1,\"605\":1,\"607\":1}}],[\"注意不是run\",{\"1\":{\"687\":1}}],[\"注意不是\",{\"1\":{\"105\":1,\"782\":1}}],[\"注意点\",{\"0\":{\"1158\":1},\"1\":{\"93\":1,\"680\":1}}],[\"注意\",{\"0\":{\"105\":1,\"221\":1,\"938\":1,\"1068\":1},\"1\":{\"85\":1,\"97\":1,\"100\":1,\"103\":1,\"105\":1,\"112\":1,\"115\":2,\"123\":2,\"147\":1,\"156\":1,\"167\":1,\"169\":1,\"178\":1,\"192\":1,\"198\":1,\"202\":1,\"210\":1,\"217\":1,\"231\":1,\"239\":1,\"240\":1,\"254\":1,\"302\":1,\"353\":1,\"422\":1,\"426\":1,\"436\":1,\"437\":1,\"465\":2,\"543\":2,\"556\":1,\"558\":1,\"566\":1,\"576\":1,\"577\":1,\"582\":1,\"594\":3,\"595\":1,\"609\":1,\"624\":1,\"625\":1,\"646\":1,\"666\":1,\"685\":2,\"687\":1,\"688\":2,\"704\":1,\"705\":1,\"722\":1,\"761\":1,\"763\":1,\"766\":1,\"779\":1,\"782\":1,\"792\":1,\"793\":1,\"795\":1,\"802\":1,\"803\":1,\"806\":1,\"829\":1,\"831\":1,\"861\":1,\"876\":1,\"925\":1,\"927\":1,\"935\":1,\"951\":1,\"961\":1,\"990\":1,\"996\":2,\"998\":1,\"1081\":1,\"1161\":1}}],[\"注意在交互界面进行的设置\",{\"1\":{\"897\":1}}],[\"注意在\",{\"1\":{\"83\":1}}],[\"注意分号不要丢\",{\"1\":{\"71\":1}}],[\"所示\",{\"1\":{\"935\":1}}],[\"所在的数据页已经满了\",{\"1\":{\"918\":1}}],[\"所在的类需要重写hashcode\",{\"1\":{\"688\":1}}],[\"所使用的shell\",{\"1\":{\"787\":1}}],[\"所管理的\",{\"1\":{\"534\":1}}],[\"所谓强引用\",{\"1\":{\"636\":1}}],[\"所谓的\",{\"1\":{\"581\":1}}],[\"所谓的阻塞\",{\"1\":{\"346\":1}}],[\"所谓原语\",{\"1\":{\"302\":1}}],[\"所对应的锁\",{\"1\":{\"321\":2}}],[\"所得到的md5值都有很大区别\",{\"1\":{\"132\":1}}],[\"所指向的对象被回收了\",{\"1\":{\"125\":1}}],[\"所有工资都是有浮动范围的\",{\"1\":{\"1130\":1}}],[\"所有隐私部分用$\",{\"1\":{\"1080\":1}}],[\"所有数据都有多个版本\",{\"1\":{\"935\":1}}],[\"所有数据地址必须要到叶子节点才能获取到\",{\"1\":{\"916\":1}}],[\"所有对表的增删改查操作都需要先申请\",{\"1\":{\"928\":1}}],[\"所有满足此条件的行都会被加锁\",{\"1\":{\"906\":2}}],[\"所有引擎都可以使用\",{\"1\":{\"900\":1}}],[\"所有跨存储引擎的功能都在这一层实现\",{\"1\":{\"892\":1}}],[\"所有url\",{\"1\":{\"880\":1}}],[\"所有有了内部类\",{\"1\":{\"686\":1}}],[\"所有字符均以2个字节存储\",{\"1\":{\"685\":1}}],[\"所有想要用到分布式事务的微服务使用seatadatasourceproxy代理自己的数据源\",{\"1\":{\"608\":1}}],[\"所有请求都不会进行转发\",{\"1\":{\"587\":1}}],[\"所有请求都会被\",{\"1\":{\"534\":1}}],[\"所有浏览器都实行这个政策\",{\"1\":{\"543\":1}}],[\"所有场景启动器最底层的依赖\",{\"1\":{\"477\":1}}],[\"所有方法都是事务方法\",{\"1\":{\"462\":1}}],[\"所有任务执行完我才做\",{\"1\":{\"376\":1}}],[\"所有被屏障拦截的线程才会继续干活\",{\"1\":{\"337\":1}}],[\"所有硬件优化的前提都是必须遵守as\",{\"1\":{\"329\":1}}],[\"所有\",{\"1\":{\"302\":2,\"378\":1,\"722\":1,\"724\":1,\"739\":1,\"740\":1,\"779\":1}}],[\"所有线程都可访问\",{\"1\":{\"287\":1}}],[\"所有的操作需要的行锁都是在事务提交的时候才释放的\",{\"1\":{\"931\":1}}],[\"所有的\",{\"1\":{\"793\":1,\"803\":1}}],[\"所有的泛型信息都会被擦掉\",{\"1\":{\"715\":1}}],[\"所有的key用set存\",{\"1\":{\"688\":1}}],[\"所有的线程创建都是由指定的\",{\"1\":{\"363\":1}}],[\"所有的查询都会影响到文档的评分及排名\",{\"1\":{\"278\":1}}],[\"所有的数据都是明文存储\",{\"1\":{\"58\":1}}],[\"所有部署的东西全扔云服务器上\",{\"1\":{\"261\":1}}],[\"所有接入校园网的用户都必须使用学校自己的dns\",{\"1\":{\"76\":1}}],[\"所以深度使用每天都会用\",{\"1\":{\"1164\":1}}],[\"所以难免有写得不对或者不到位的地方\",{\"1\":{\"1152\":1}}],[\"所以免不了要学一点前端的知识\",{\"1\":{\"1150\":1}}],[\"所以一定要自己写\",{\"1\":{\"1150\":1}}],[\"所以一定要配置\",{\"1\":{\"389\":1}}],[\"所以只要你不说错话\",{\"1\":{\"1132\":1}}],[\"所以32位系统最多支持4gb内存就是这样来的\",{\"1\":{\"1092\":1}}],[\"所以32位的地址范围就是从\",{\"1\":{\"1092\":1}}],[\"所以2^32个地址就总共能对应应4gb\",{\"1\":{\"1092\":1}}],[\"所以内存才是计算机系统的主存储器\",{\"1\":{\"1089\":1}}],[\"所以文件夹大写小写都一样\",{\"1\":{\"1039\":1}}],[\"所以很多时候需要转义再用\",{\"1\":{\"1023\":1}}],[\"所以大多数业务会把纯计算操作放到service层做\",{\"1\":{\"970\":1}}],[\"所以你才能理解的更透彻\",{\"1\":{\"1150\":1}}],[\"所以你可能只是写了几个小游戏\",{\"1\":{\"1150\":1}}],[\"所以你还需要自己去学很多很多的东西\",{\"1\":{\"1150\":1}}],[\"所以你见到这种字母数字混合一次的地址方式\",{\"1\":{\"1091\":1}}],[\"所以你现在知道了\",{\"1\":{\"935\":1}}],[\"所以你要关注的是紧接\",{\"1\":{\"895\":1}}],[\"所以现在你知道了\",{\"1\":{\"923\":1}}],[\"所以现在你理解为什么了吧\",{\"1\":{\"686\":1}}],[\"所以当\",{\"1\":{\"975\":1}}],[\"所以当已经有了\",{\"1\":{\"923\":1}}],[\"所以当一条线程访问instance不为null时\",{\"1\":{\"301\":1}}],[\"所以使用覆盖索引是一个常用的性能优化手段\",{\"1\":{\"922\":1}}],[\"所以使用下面的查询语句可以获得相同的结果\",{\"1\":{\"893\":1}}],[\"所以不得不回表\",{\"1\":{\"921\":1}}],[\"所以不能用throws\",{\"1\":{\"686\":1}}],[\"所以不能用\",{\"1\":{\"153\":1}}],[\"所以不能一条语句解决的问题都要考虑是否产生问题\",{\"1\":{\"87\":1}}],[\"所以连着执行这两个语句的话\",{\"1\":{\"919\":1}}],[\"所以数据都是存储在\",{\"1\":{\"917\":1}}],[\"所以数据包没经过一个路由器节点ttl都减一\",{\"1\":{\"76\":1}}],[\"所以并没有统一的索引标准\",{\"1\":{\"916\":1}}],[\"所以树的高度越高\",{\"1\":{\"916\":1}}],[\"所以哈希索引做区间查询的速度是很慢的\",{\"1\":{\"914\":1}}],[\"所以从\",{\"1\":{\"905\":1}}],[\"所以从优化的角度\",{\"1\":{\"876\":1}}],[\"所以恢复后这一行\",{\"1\":{\"901\":1}}],[\"所以查询速度比较慢\",{\"1\":{\"897\":1}}],[\"所以我知道\",{\"1\":{\"1150\":1}}],[\"所以我后面看书的时候\",{\"1\":{\"1144\":1}}],[\"所以我希望你能够耐心看完\",{\"1\":{\"909\":1}}],[\"所以我用一个例子说明这几种隔离级别\",{\"1\":{\"905\":1}}],[\"所以我建议你在使用中要尽量减少建立连接的动作\",{\"1\":{\"893\":1}}],[\"所以我们要结合部分垃圾时间用来睡觉\",{\"1\":{\"980\":1}}],[\"所以我们要做的是\",{\"1\":{\"932\":1}}],[\"所以我们想要删除百万数据的时候可以先删除索引\",{\"1\":{\"975\":1}}],[\"所以我们引入了死锁和死锁检测的概念\",{\"1\":{\"933\":1}}],[\"所以我们可以形成两个组合\",{\"1\":{\"906\":1}}],[\"所以我们需要使用多个\",{\"1\":{\"824\":1}}],[\"所以我们配备的硬件资源并不会太高\",{\"1\":{\"814\":1}}],[\"所以我们在项目中只需要把当前登录用户的权限信息也存入authentication\",{\"1\":{\"629\":1}}],[\"所以我们先学习认证这一部分\",{\"1\":{\"617\":1}}],[\"所以vue配置了proxy相当于部分替代了nginx的功能\",{\"1\":{\"883\":1}}],[\"所以会有问题\",{\"1\":{\"868\":1}}],[\"所以会自动去ioc中拿\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"所以少了一步磁盘io\",{\"1\":{\"849\":1}}],[\"所以点点\",{\"1\":{\"828\":1}}],[\"所以引入了信道的概念\",{\"1\":{\"823\":1}}],[\"所以可以看到每个分支的修改历史\",{\"1\":{\"990\":1}}],[\"所以可以认为git\",{\"1\":{\"990\":1}}],[\"所以可以将交换器理解成一个由绑定构成的路由表\",{\"1\":{\"823\":1}}],[\"所以可以自定义的\",{\"1\":{\"624\":1}}],[\"所以`mysqldump`在容器中执行\",{\"1\":{\"800\":1}}],[\"所以下面我就以\",{\"1\":{\"916\":1}}],[\"所以下次在使用git的时候即使没有登录github\",{\"1\":{\"798\":1,\"984\":1}}],[\"所以下图每个服务都会走一遍数据库\",{\"1\":{\"108\":1}}],[\"所以最好只放一些很好的项目\",{\"1\":{\"1145\":1}}],[\"所以最好加前缀\",{\"1\":{\"227\":1}}],[\"所以最后还可以给\",{\"1\":{\"790\":1}}],[\"所以等一下我们设定权限的变更时\",{\"1\":{\"786\":1}}],[\"所以第一个stream流就不能再调用方法\",{\"1\":{\"772\":1}}],[\"所以局部变量\",{\"1\":{\"771\":1}}],[\"所以编译器会加入该桥方法保证多态\",{\"1\":{\"716\":1}}],[\"所以io多路复用设计目的其实不是为了快\",{\"1\":{\"712\":1}}],[\"所以也就不用考虑其他索引的叶子节点大小的问题\",{\"1\":{\"918\":1}}],[\"所以也不需try\",{\"1\":{\"705\":1}}],[\"所以也可以说\",{\"1\":{\"671\":1}}],[\"所以有线程安全问题\",{\"1\":{\"700\":1}}],[\"所以有通过hash来实现这样的操作\",{\"1\":{\"688\":1}}],[\"所以为null\",{\"1\":{\"697\":1}}],[\"所以为了满足并发量\",{\"1\":{\"326\":1}}],[\"所以线程\",{\"1\":{\"694\":1}}],[\"所以链表中的第一个元素是\",{\"1\":{\"694\":1}}],[\"所以必须要声明成public\",{\"1\":{\"689\":1}}],[\"所以必须指定内容\",{\"1\":{\"685\":1}}],[\"所以test类不要用scanner那种控制台手动输入数据的方式\",{\"1\":{\"689\":1}}],[\"所以关于内层流的关闭可以省略\",{\"1\":{\"688\":1}}],[\"所以都是指向字符串常量池中的tom\",{\"1\":{\"687\":1}}],[\"所以a\",{\"1\":{\"686\":1}}],[\"所以a1\",{\"1\":{\"686\":1}}],[\"所以接口的修饰符可以为abstract\",{\"1\":{\"686\":1}}],[\"所以取这个数的后四位就是\",{\"1\":{\"685\":1}}],[\"所以用这种\",{\"1\":{\"884\":1}}],[\"所以用hutools\",{\"1\":{\"876\":1}}],[\"所以用国内的镜像源\",{\"1\":{\"800\":1}}],[\"所以用\",{\"1\":{\"681\":1}}],[\"所以用select\",{\"1\":{\"422\":1}}],[\"所以它的执行速度比较快\",{\"1\":{\"897\":1}}],[\"所以它占用的空间相对较小\",{\"1\":{\"866\":1}}],[\"所以它并不知道链表头部已经有一个元素\",{\"1\":{\"694\":1}}],[\"所以它会将链表头指针指向x节点\",{\"1\":{\"694\":1}}],[\"所以它们不等\",{\"1\":{\"686\":1}}],[\"所以它是一个普通方法\",{\"1\":{\"661\":1}}],[\"所以它无法获得方法\",{\"1\":{\"321\":1}}],[\"所以在网址\",{\"1\":{\"1037\":1}}],[\"所以在统计结果的时候\",{\"1\":{\"956\":1}}],[\"所以在它看来\",{\"1\":{\"935\":1}}],[\"所以在数据库中\",{\"1\":{\"906\":1}}],[\"所以在lambda表达式中参数的类型可以省略\",{\"1\":{\"754\":1}}],[\"所以在\",{\"1\":{\"660\":1,\"998\":1}}],[\"所以在a线程的10秒内\",{\"1\":{\"309\":1}}],[\"所以答案就是\",{\"1\":{\"648\":1}}],[\"所以129前面应该是\",{\"1\":{\"648\":1}}],[\"所以面试官能够扩展或者深挖的内容非常多\",{\"1\":{\"639\":1}}],[\"所以就需要替換passwordencoder\",{\"1\":{\"625\":1}}],[\"所以获取的是数据库的用户密码\",{\"1\":{\"624\":1}}],[\"所以谷粒商城高并发的接口没用seata\",{\"1\":{\"609\":1}}],[\"所以新增了一个bootstrap\",{\"1\":{\"593\":1}}],[\"所以事件类没有extends\",{\"1\":{\"543\":1,\"1081\":1}}],[\"所以此时\",{\"1\":{\"697\":1}}],[\"所以此时我们无法注入到main包中的组件\",{\"1\":{\"531\":1}}],[\"所以此时配置类的解析无法保证先后顺序\",{\"1\":{\"517\":1}}],[\"所以才推荐用\",{\"1\":{\"694\":1}}],[\"所以才会有condition这些\",{\"1\":{\"517\":1}}],[\"所以才会阻塞\",{\"1\":{\"202\":1}}],[\"所以才采用了清空的方式\",{\"1\":{\"385\":1}}],[\"所以eden区域的大小为300m\",{\"1\":{\"383\":1}}],[\"所以呢\",{\"1\":{\"329\":1}}],[\"所以即使在方法\",{\"1\":{\"321\":1}}],[\"所以其它线程对它的修改\",{\"1\":{\"305\":1}}],[\"所以其它操作会被挂起\",{\"1\":{\"290\":1}}],[\"所以执行上述方法需要比较一次\",{\"1\":{\"305\":1}}],[\"所以单核多线程不会有缓存共享问题\",{\"1\":{\"286\":1}}],[\"所以能禁止指令优化重排\",{\"1\":{\"283\":1}}],[\"所以c正确\",{\"1\":{\"283\":1}}],[\"所以好多人边上班边学啊\",{\"1\":{\"261\":1}}],[\"所以导致你的springboot项目开始能访问数据库\",{\"1\":{\"260\":1}}],[\"所以说\",{\"1\":{\"233\":1,\"1139\":1,\"1140\":1}}],[\"所以网关搞一个配置类\",{\"1\":{\"231\":1}}],[\"所以服务器不允许\",{\"1\":{\"230\":1}}],[\"所以这两个开源分支目前都支持\",{\"1\":{\"928\":1}}],[\"所以这一行\",{\"1\":{\"901\":1}}],[\"所以这条语句就会把表\",{\"1\":{\"898\":1}}],[\"所以这个事务的快照\",{\"1\":{\"935\":2}}],[\"所以这个事务提交之前\",{\"1\":{\"906\":1}}],[\"所以这个语句在搜索索引树的时候\",{\"1\":{\"924\":1}}],[\"所以这个散列值是不能直接拿来用的\",{\"1\":{\"739\":1}}],[\"所以这个范围内的自动装箱\",{\"1\":{\"686\":1}}],[\"所以这里也就引入了索引模型的概念\",{\"1\":{\"913\":1}}],[\"所以这里用hutools构造函数定制化全给string\",{\"1\":{\"876\":1}}],[\"所以这里我们假设购票系统能承受这一万的用户请求\",{\"1\":{\"814\":1}}],[\"所以这里还加了另一个关键字private\",{\"1\":{\"721\":1}}],[\"所以这里只用一条命令设置锁和过期时间\",{\"1\":{\"87\":1}}],[\"所以这步可以省略的\",{\"1\":{\"210\":1}}],[\"所以需要分区键\",{\"1\":{\"961\":1}}],[\"所以需要端口映射\",{\"1\":{\"789\":1}}],[\"所以需要端口映射目录挂载\",{\"1\":{\"210\":1}}],[\"所以需要用\",{\"1\":{\"625\":1}}],[\"所以需要使用服务治理\",{\"1\":{\"563\":1}}],[\"所以需要<set>标签解决\",{\"1\":{\"434\":1}}],[\"所以需要引入volatile\",{\"1\":{\"301\":1}}],[\"所以需要配\",{\"1\":{\"283\":1}}],[\"所以需要先创好文件\",{\"1\":{\"213\":1}}],[\"所以需要注意\",{\"1\":{\"93\":1}}],[\"所以到不了网关\",{\"1\":{\"198\":1}}],[\"所以注解不起作用\",{\"1\":{\"182\":1}}],[\"所以注解会失效\",{\"1\":{\"179\":1}}],[\"所以如果长连接累积下来\",{\"1\":{\"893\":1}}],[\"所以如果使用mysal的myisam引擎的话\",{\"1\":{\"182\":1}}],[\"所以如果我请求github\",{\"1\":{\"77\":1}}],[\"所以user\",{\"1\":{\"156\":1}}],[\"所以要加上where才会走索引\",{\"1\":{\"923\":1}}],[\"所以要赋值出去\",{\"1\":{\"780\":1}}],[\"所以要表示一下前面加<e>\",{\"1\":{\"688\":1}}],[\"所以要放finally\",{\"1\":{\"686\":1}}],[\"所以要用int接收\",{\"1\":{\"685\":1}}],[\"所以要么在maven添加loadbalancer代替\",{\"1\":{\"594\":1}}],[\"所以要配置一下\",{\"1\":{\"229\":1}}],[\"所以要\",{\"1\":{\"156\":1}}],[\"所以每次数据查询的次数都一样\",{\"1\":{\"916\":1}}],[\"所以每次\",{\"1\":{\"125\":1}}],[\"所以配置文件改了热部署也没用\",{\"1\":{\"124\":1}}],[\"所以得重启项目才会跑\",{\"1\":{\"123\":1}}],[\"所以得用分布式锁\",{\"1\":{\"108\":1}}],[\"所以缓存数据的时候加上过期时间\",{\"1\":{\"118\":1}}],[\"所以适合使用读写锁\",{\"1\":{\"118\":1}}],[\"所以还是得中间件进行拿阻塞\",{\"1\":{\"109\":1}}],[\"所以交互的空隙后面排队的乘空隙判断redis里没数据\",{\"1\":{\"108\":1}}],[\"所以吞吐量是极大的\",{\"1\":{\"107\":1}}],[\"所以多给点空间肯定能提升性能\",{\"1\":{\"101\":1}}],[\"所以后期我们需要解决分布式的session问题\",{\"1\":{\"98\":1,\"130\":1,\"536\":1}}],[\"所以把accesstoken几分钟有效\",{\"1\":{\"70\":1}}],[\"所以\",{\"1\":{\"60\":1,\"141\":1,\"329\":1,\"534\":1,\"599\":1,\"658\":1,\"669\":1,\"686\":1,\"688\":1,\"694\":1,\"724\":1,\"883\":1,\"890\":1,\"900\":1,\"901\":1,\"905\":1,\"906\":1,\"914\":1,\"915\":1,\"918\":1,\"923\":1,\"925\":1,\"927\":1,\"931\":1,\"932\":2,\"934\":1,\"961\":2,\"975\":1,\"1041\":1,\"1077\":1,\"1130\":1,\"1139\":1,\"1144\":1,\"1148\":1,\"1150\":6}}],[\"可怕的是你没有匹配自己年龄的技术深度\",{\"1\":{\"1139\":1}}],[\"可比较两个\",{\"0\":{\"1074\":1}}],[\"可帮助用户及时发现和解决服务问题\",{\"1\":{\"1041\":1}}],[\"可帮助用户更加轻松地创建和管理windows服务\",{\"1\":{\"1041\":1}}],[\"可\",{\"1\":{\"1041\":1}}],[\"可随便填方便在\",{\"1\":{\"986\":1}}],[\"可减少表结构变更带来的影响\",{\"1\":{\"969\":1}}],[\"可见actions可以拿来跑一些好用的脚本\",{\"1\":{\"994\":1}}],[\"可见\",{\"1\":{\"935\":1}}],[\"可见性\",{\"0\":{\"285\":1},\"1\":{\"284\":1}}],[\"可是大部分时间\",{\"1\":{\"1150\":1}}],[\"可是全无用处\",{\"1\":{\"1076\":1}}],[\"可是\",{\"1\":{\"935\":1}}],[\"可是还有库存\",{\"1\":{\"858\":1}}],[\"可理解为数据库的逻辑删除字段\",{\"1\":{\"867\":1}}],[\"可理解为第一步new的时候就有\",{\"1\":{\"723\":1}}],[\"可对数据库中不存在的数据做缓存\",{\"1\":{\"866\":1}}],[\"可执行文件的完整路径\",{\"1\":{\"782\":1}}],[\"可扩展的\",{\"1\":{\"712\":1}}],[\"可知\",{\"1\":{\"697\":1}}],[\"可大数据量传输\",{\"1\":{\"688\":1}}],[\"可靠性\",{\"1\":{\"868\":1}}],[\"可靠消息\",{\"0\":{\"845\":1}}],[\"可靠消息+最终一致性方案\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"可靠抵达\",{\"1\":{\"832\":1,\"845\":2,\"846\":1}}],[\"可靠\",{\"1\":{\"688\":1}}],[\"可序列化类中所有属性要是可序列化的\",{\"1\":{\"688\":1}}],[\"可重复读就是以事务启动那个时间点的数据为准\",{\"1\":{\"905\":1}}],[\"可重复读是指\",{\"1\":{\"905\":1}}],[\"可重复读\",{\"1\":{\"905\":6,\"906\":1,\"929\":1,\"934\":1}}],[\"可重复\",{\"1\":{\"688\":1}}],[\"可重入的锁\",{\"1\":{\"329\":1}}],[\"可重入锁\",{\"1\":{\"328\":1}}],[\"可重入锁的最大作用就是避免死锁\",{\"1\":{\"323\":1}}],[\"可重入锁就是\",{\"1\":{\"322\":1}}],[\"可重入锁就是递归锁\",{\"1\":{\"321\":1}}],[\"可重入锁和递归锁reentrantlock\",{\"0\":{\"320\":1}}],[\"可重入性\",{\"1\":{\"87\":1}}],[\"可包含抽象方法\",{\"1\":{\"686\":1}}],[\"可看这些对象自动转为基本类型\",{\"1\":{\"671\":1}}],[\"可慢慢的把流量放进来\",{\"1\":{\"602\":1}}],[\"可体现事件源和监听器之间的松耦合仅依赖spring\",{\"1\":{\"543\":1,\"1081\":1}}],[\"可注解\",{\"1\":{\"543\":1,\"1081\":1}}],[\"可入\",{\"1\":{\"473\":1}}],[\"可控制线程最大并发数\",{\"1\":{\"365\":1}}],[\"可灵活回收空闲线程\",{\"1\":{\"365\":1}}],[\"可变的三种创建线程池的方法\",{\"1\":{\"360\":1}}],[\"可中断\",{\"1\":{\"352\":1,\"380\":1}}],[\"可通过synchronized或volatile关键字解决\",{\"1\":{\"297\":1}}],[\"可通过指针操作内存\",{\"1\":{\"89\":1,\"304\":1}}],[\"可视化检索数据\",{\"1\":{\"267\":1}}],[\"可读到没有提交的数据\",{\"1\":{\"257\":1}}],[\"可全局\",{\"1\":{\"221\":1}}],[\"可用集群\",{\"1\":{\"865\":1}}],[\"可用性和分区容错性这三个需求\",{\"1\":{\"572\":1}}],[\"可用性\",{\"1\":{\"571\":1}}],[\"可用性等各方面因素\",{\"1\":{\"183\":1}}],[\"可用的两种方案\",{\"1\":{\"143\":1}}],[\"可用插件\",{\"1\":{\"101\":1}}],[\"可逆\",{\"1\":{\"131\":1}}],[\"可能要说一声抱歉了\",{\"1\":{\"1152\":1}}],[\"可能学校的进度是一个学期\",{\"1\":{\"1150\":1}}],[\"可能并不是权限问题\",{\"1\":{\"1041\":1}}],[\"可能更简洁和直观\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"可能更合适\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"可能代表\",{\"1\":{\"997\":1}}],[\"可能你会问\",{\"1\":{\"932\":1}}],[\"可能未必管用\",{\"1\":{\"928\":1}}],[\"可能遇到脏读\",{\"1\":{\"906\":1}}],[\"可能还得带上老花镜慢慢找\",{\"1\":{\"899\":1}}],[\"可能需要手动引入\",{\"1\":{\"871\":1}}],[\"可能上完锁服务器宕机就没设置过期时间\",{\"1\":{\"868\":1}}],[\"可能被肉鸡了\",{\"1\":{\"800\":1}}],[\"可能被视为不同的路径\",{\"1\":{\"60\":1}}],[\"可能想初始化一些变量\",{\"1\":{\"779\":1}}],[\"可能将它理解为缓存它的引用会更加贴切\",{\"1\":{\"723\":1}}],[\"可能导致内存占用太大\",{\"1\":{\"893\":1}}],[\"可能导致一些元素被跳过或重复处理\",{\"1\":{\"645\":1}}],[\"可能导致aba问题的发生\",{\"1\":{\"309\":1}}],[\"可能带来的性能优势\",{\"1\":{\"635\":1}}],[\"可能只需要一个registry\",{\"1\":{\"608\":1}}],[\"可能我还是不理解\",{\"1\":{\"559\":1}}],[\"可能包含了资源的基本url路径\",{\"1\":{\"539\":1}}],[\"可能是结果集太大了\",{\"1\":{\"959\":1}}],[\"可能是由于openfeign配置不正确或由于网络问题导致的\",{\"1\":{\"581\":1}}],[\"可能是由于你的应用程序或thymeleaf的资源管理策略而生成的\",{\"1\":{\"539\":1}}],[\"可能是node版本不一样\",{\"1\":{\"219\":1}}],[\"可能有乱码\",{\"1\":{\"688\":1}}],[\"可能有很多线程会不停的自旋\",{\"1\":{\"312\":1}}],[\"可能有难度\",{\"1\":{\"261\":1}}],[\"可能没有完成实例化\",{\"1\":{\"301\":1}}],[\"可能没有及时释放掉内存\",{\"1\":{\"107\":1}}],[\"可能运行一千万次会出现一次错误\",{\"1\":{\"301\":1}}],[\"可能会使用不同的术语来描述同样的概念\",{\"1\":{\"959\":1}}],[\"可能会以不同的顺序获取资源的锁\",{\"1\":{\"933\":1}}],[\"可能会存在更新丢失问题\",{\"1\":{\"906\":1}}],[\"可能会造成事务隔离性问题\",{\"1\":{\"906\":1}}],[\"可能会在某些时间点被超高并发地访问\",{\"1\":{\"867\":1}}],[\"可能会导致在找到比基准值小的元素之前\",{\"1\":{\"1085\":1}}],[\"可能会导致查询效率低下\",{\"1\":{\"967\":1}}],[\"可能会导致存储空间的浪费\",{\"1\":{\"963\":1}}],[\"可能会导致出现问题\",{\"1\":{\"645\":1}}],[\"可能会导致threadlocal中的数据在多个任务之间共享\",{\"1\":{\"157\":1}}],[\"可能会下意识地以为动态代理就是利用反射机制实现的\",{\"1\":{\"639\":1}}],[\"可能会创建大量的线程\",{\"1\":{\"366\":1}}],[\"可能会堆积大量的请求\",{\"1\":{\"366\":1}}],[\"可能会出现这样的情况\",{\"1\":{\"295\":1}}],[\"可能出现以下的顺序\",{\"1\":{\"293\":1}}],[\"可能价格也不同\",{\"1\":{\"244\":1}}],[\"可能后期还是以网关层面解决是最好==\",{\"1\":{\"231\":1}}],[\"可能实际开发更多的是用框架\",{\"1\":{\"200\":1}}],[\"可能知道会有本地事务失效的问题\",{\"1\":{\"178\":1}}],[\"可能就是昨天晚上的一个备份\",{\"1\":{\"901\":1}}],[\"可能就是applicationarguments这个对象封装了更好操作\",{\"1\":{\"546\":1}}],[\"可能就只是由于网络抖动造成没及时返回\",{\"1\":{\"176\":1}}],[\"可能就需要分布式锁了\",{\"1\":{\"112\":1}}],[\"可在中间加锁\",{\"1\":{\"87\":1}}],[\"可解决\",{\"1\":{\"80\":1}}],[\"可进官网\",{\"1\":{\"76\":1}}],[\"可以上课不带书\",{\"1\":{\"1164\":1}}],[\"可以方便地创建及在本地预览生成的文档\",{\"1\":{\"1161\":1}}],[\"可以方便地添加更多的数据库和数据表\",{\"1\":{\"960\":1}}],[\"可以仔细看一下下面这张图\",{\"1\":{\"1160\":1}}],[\"可以互相借鉴\",{\"1\":{\"1152\":1}}],[\"可以两本一起看\",{\"1\":{\"1150\":1}}],[\"可以好好整理一下自己学习过程中的代码\",{\"1\":{\"1150\":1}}],[\"可以好好看下\",{\"1\":{\"855\":1}}],[\"可以参加一些比赛\",{\"1\":{\"1150\":1}}],[\"可以参考下构造\",{\"1\":{\"780\":1}}],[\"可以参考\",{\"1\":{\"189\":1}}],[\"可以画流程图和脑图\",{\"1\":{\"1145\":1}}],[\"可以写一个有趣的应用\",{\"1\":{\"1144\":1}}],[\"可以再面一轮\",{\"1\":{\"1132\":1}}],[\"可以再回顾一下第\",{\"1\":{\"927\":1}}],[\"可以说\",{\"1\":{\"1121\":1}}],[\"可以说md5是通过哈希实现的\",{\"1\":{\"539\":1}}],[\"可以待很多年\",{\"1\":{\"1112\":1}}],[\"可以认为是税前年薪总数\",{\"1\":{\"1103\":1}}],[\"可以认为是分裂过程的逆过程\",{\"1\":{\"918\":1}}],[\"可以弄\",{\"1\":{\"1100\":1}}],[\"可以一个正式项目\",{\"1\":{\"1100\":1}}],[\"可以收或打开括号\",{\"0\":{\"1072\":1}}],[\"可以高亮指定范围代码\",{\"0\":{\"1063\":1}}],[\"可以和\",{\"0\":{\"1054\":1}}],[\"可以和面试官唠唠\",{\"1\":{\"101\":1}}],[\"可以查看官方网站\",{\"1\":{\"1161\":1}}],[\"可以查\",{\"0\":{\"1048\":1}}],[\"可以查linux内存占用\",{\"1\":{\"782\":1}}],[\"可以对服务进行更加细粒度的控制\",{\"1\":{\"1041\":1}}],[\"可以跨盘cd\",{\"1\":{\"1041\":1}}],[\"可以添加注释\",{\"1\":{\"1038\":1}}],[\"可以添加以下指令来设置\",{\"1\":{\"48\":1}}],[\"可以esc\",{\"1\":{\"1038\":1}}],[\"可以丢到一个目录\",{\"1\":{\"1037\":1}}],[\"可以到头\",{\"1\":{\"1037\":1}}],[\"可以到web管理后台发一发消息\",{\"1\":{\"823\":1}}],[\"可以到windows下用cmd命令启动mysql啦\",{\"1\":{\"805\":1}}],[\"可以复用\",{\"1\":{\"1019\":1}}],[\"可以复用上面的结果\",{\"1\":{\"959\":1}}],[\"可以依赖运行时环境提供的版本\",{\"1\":{\"1012\":1}}],[\"可以依赖于另一个\",{\"1\":{\"543\":1}}],[\"可以减小最终部署包的大小\",{\"1\":{\"1012\":1}}],[\"可以减少锁等待个数\",{\"1\":{\"932\":1}}],[\"可以减少对后端存储系统\",{\"1\":{\"849\":1}}],[\"可以减少虚拟机在运行期间的代价\",{\"1\":{\"715\":1}}],[\"可以临时切换显示隐藏文件\",{\"1\":{\"998\":1}}],[\"可以临时把死锁检测关掉\",{\"1\":{\"932\":1}}],[\"可以输出\",{\"1\":{\"997\":1}}],[\"可以被理解为\",{\"1\":{\"997\":1}}],[\"可以搜文件里面的内容\",{\"1\":{\"996\":1}}],[\"可以跑个\",{\"1\":{\"994\":1}}],[\"可以放个\",{\"1\":{\"994\":1}}],[\"可以围绕自己的仓库做一些流程自动化\",{\"1\":{\"994\":1}}],[\"可以先运行第一行确定好路径\",{\"1\":{\"1001\":1}}],[\"可以先创建新的分支\",{\"1\":{\"987\":1}}],[\"可以先用二分法找到\",{\"1\":{\"915\":1}}],[\"可以当密码auth的时候\",{\"1\":{\"985\":1}}],[\"可以当做redis的乐观锁操作\",{\"1\":{\"856\":1}}],[\"可以停一段时间\",{\"1\":{\"980\":1}}],[\"可以为这行数据形成一条版本链\",{\"1\":{\"972\":1}}],[\"可以更好地处理windows服务的异常情况\",{\"1\":{\"1041\":1}}],[\"可以更快切除应用\",{\"1\":{\"1006\":1}}],[\"可以更清晰地组织和重用查询逻辑\",{\"1\":{\"959\":1}}],[\"可以更加灵活地控制异步执行的方式\",{\"1\":{\"372\":1}}],[\"可以低价预售一年内所有的电影票\",{\"1\":{\"931\":1}}],[\"可以去浙大的看看\",{\"1\":{\"1150\":1}}],[\"可以去掉\",{\"1\":{\"925\":1}}],[\"可以去mybaits的项目地址\",{\"1\":{\"451\":1}}],[\"可以少维护一个索引\",{\"1\":{\"923\":1}}],[\"可以快速跳转到方法大括号的起止位置\",{\"0\":{\"1053\":1}}],[\"可以快速定位到\",{\"1\":{\"923\":1}}],[\"可以快速的将一个lambda表达式的实现指向一个已经实现的方法\",{\"1\":{\"761\":1}}],[\"可以快速的根据表生成对应的映射文件\",{\"1\":{\"465\":1}}],[\"可以达到省空间的目的\",{\"1\":{\"919\":1}}],[\"可以避免每次查询需要搜索两棵树\",{\"1\":{\"918\":1}}],[\"可以避免类的重复加载\",{\"1\":{\"382\":1}}],[\"可以保证数据库表中每一行数据的唯一性\",{\"1\":{\"911\":1}}],[\"可以保证在try和catch语句执行完后\",{\"1\":{\"686\":1}}],[\"可以保证在多机器节点下对共享资源的排他性\",{\"1\":{\"86\":1,\"114\":1}}],[\"可以确定的说\",{\"1\":{\"898\":1}}],[\"可以确保methodb方法被aop代理捕获\",{\"1\":{\"179\":1}}],[\"可以确保一组数据库操作要么全部成功提交\",{\"1\":{\"78\":1}}],[\"可以恢复到半个月内任意一秒的状态\",{\"1\":{\"898\":1}}],[\"可以定位到是哪一条语句查询比较慢\",{\"1\":{\"897\":1}}],[\"可以封装成工具类\",{\"1\":{\"865\":1,\"876\":1}}],[\"可以贴一下图\",{\"1\":{\"865\":1}}],[\"可以很多人抢\",{\"1\":{\"855\":1}}],[\"可以很多人都来监听\",{\"1\":{\"830\":1}}],[\"可以很多个接收者\",{\"1\":{\"817\":1}}],[\"可以给mq收发消息\",{\"1\":{\"828\":1}}],[\"可以绑定\",{\"1\":{\"823\":1}}],[\"可以精简为\",{\"1\":{\"754\":1,\"755\":1,\"756\":1,\"757\":1,\"758\":1}}],[\"可以精确唤醒\",{\"1\":{\"352\":1}}],[\"可以解决使用数据库进行模糊搜索时存在的性能问题\",{\"1\":{\"736\":1}}],[\"可以代替\",{\"1\":{\"726\":1}}],[\"可以代理非\",{\"1\":{\"182\":1}}],[\"可以印证上面的理论\",{\"1\":{\"725\":1}}],[\"可以直观的对比一下源代码和反编译后的字节码文件\",{\"1\":{\"725\":1}}],[\"可以直接生成电子书的一个开源工具\",{\"1\":{\"1145\":1}}],[\"可以直接用\",{\"1\":{\"823\":1}}],[\"可以直接通过\",{\"1\":{\"521\":1}}],[\"可以直接使用\",{\"1\":{\"229\":1}}],[\"可以分为\",{\"1\":{\"892\":1}}],[\"可以分为两种情况\",{\"1\":{\"723\":1}}],[\"可以分为以下三步进行完成\",{\"1\":{\"301\":1}}],[\"可以强制将\",{\"1\":{\"723\":1}}],[\"可以自定义多种表格\",{\"1\":{\"736\":1}}],[\"可以自定义异常类\",{\"1\":{\"686\":1}}],[\"可以自己查看\",{\"1\":{\"725\":1}}],[\"可以自行去\",{\"1\":{\"713\":1}}],[\"可以做的事情\",{\"1\":{\"713\":1}}],[\"可以做一点定时任务\",{\"1\":{\"200\":1}}],[\"可以极大地简化\",{\"1\":{\"713\":1}}],[\"可以同时监控多个通道的状态\",{\"1\":{\"712\":1}}],[\"可以包含普通文本\",{\"1\":{\"706\":1}}],[\"可以这样\",{\"1\":{\"987\":1}}],[\"可以这样理解\",{\"1\":{\"688\":1}}],[\"可以这样操作\",{\"0\":{\"89\":1}}],[\"可以赋值给l1\",{\"1\":{\"688\":2}}],[\"可以按照添加顺序遍历\",{\"1\":{\"688\":1}}],[\"可以按照添加的对象的指定属性进行排序\",{\"1\":{\"688\":1}}],[\"可以按照添加的顺序遍历\",{\"1\":{\"688\":1}}],[\"可以有返回值\",{\"1\":{\"687\":1}}],[\"可以有效的防止\",{\"1\":{\"411\":1}}],[\"可以有效地避免多线程环境下的竞态条件和线程安全问题\",{\"1\":{\"156\":1}}],[\"可以lambda\",{\"1\":{\"686\":1}}],[\"可以拆解问题复杂度\",{\"1\":{\"678\":1}}],[\"可以修饰接口\",{\"1\":{\"669\":1}}],[\"可以修改请求和响应内容\",{\"1\":{\"156\":1}}],[\"可以显示的将强引用赋值为null\",{\"1\":{\"660\":1}}],[\"可以等同于\",{\"1\":{\"643\":1}}],[\"可以提供更加友善的界面\",{\"1\":{\"640\":1}}],[\"可以让你充分的掌握一本书的核心\",{\"1\":{\"1144\":1}}],[\"可以让对象豁免一些垃圾收集\",{\"1\":{\"636\":1}}],[\"可以让业务以异步的方式\",{\"1\":{\"202\":1}}],[\"可以是成为某一个领域的大牛\",{\"1\":{\"1144\":1}}],[\"可以是一天一备\",{\"1\":{\"901\":1}}],[\"可以是其它权限修饰符\",{\"1\":{\"661\":1}}],[\"可以是人员\",{\"1\":{\"630\":1}}],[\"可以是ftp从ftp服务器拿文件塞进interation\",{\"1\":{\"613\":1}}],[\"可以是任何东西\",{\"1\":{\"605\":1}}],[\"可以独立出来\",{\"1\":{\"599\":1}}],[\"可以选择对应的命名空间\",{\"1\":{\"598\":1}}],[\"可以选择使用\",{\"1\":{\"216\":1}}],[\"可以切换中英文标点\",{\"1\":{\"1037\":1}}],[\"可以切换\",{\"1\":{\"594\":1}}],[\"可以想想我们前面赊账记录的例子\",{\"1\":{\"899\":1}}],[\"可以想象成微信订阅号\",{\"1\":{\"594\":1}}],[\"可以想成是一道墙\",{\"1\":{\"334\":1}}],[\"可以结合实际案例说下不\",{\"1\":{\"571\":1}}],[\"可以结合业务场景去说\",{\"1\":{\"380\":1}}],[\"可以粗鄙的理解为\",{\"1\":{\"553\":1}}],[\"可以不实现\",{\"1\":{\"543\":1,\"1081\":1}}],[\"可以不实现所以重心其实就两个类\",{\"1\":{\"543\":1,\"1081\":1}}],[\"可以不用\",{\"1\":{\"229\":1}}],[\"可以检查你的应用程序或thymeleaf的资源管理配置\",{\"1\":{\"539\":1}}],[\"可以根据指定的算法进行信息的加密和解密\",{\"1\":{\"617\":1}}],[\"可以根据\",{\"1\":{\"583\":1}}],[\"可以根据需要获取其他\",{\"1\":{\"538\":1,\"1082\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"8\":1}}],[\"可以正常装配usermapper组件com\",{\"1\":{\"531\":1}}],[\"可以整理出这么一张依赖关系图\",{\"1\":{\"499\":1}}],[\"可以开始使用\",{\"1\":{\"489\":1}}],[\"可以帮你用构造器注入\",{\"1\":{\"488\":1}}],[\"可以帮助开发者更加容易地构建分布式应用\",{\"1\":{\"112\":1}}],[\"可以找找各个第三方jar包里面的\",{\"1\":{\"483\":1}}],[\"可以细看心里解读解读\",{\"1\":{\"473\":1}}],[\"可以禁用一级缓存\",{\"1\":{\"449\":1}}],[\"可以将其结果存储在临时表或使用\",{\"1\":{\"959\":1}}],[\"可以将后续的是实现更改为已定义的\",{\"1\":{\"760\":1}}],[\"可以将两个交替执行的线程合并为顺序执行的线程\",{\"1\":{\"650\":1}}],[\"可以将符号位和数值域统一处理\",{\"1\":{\"648\":1}}],[\"可以将观察者模式看作是发布订阅模式的一个特例\",{\"1\":{\"498\":1}}],[\"可以将ognl表达式的值绑定到一个变量中\",{\"1\":{\"438\":1}}],[\"可以将负载均衡到多个节点上\",{\"1\":{\"103\":1}}],[\"可以foreach遍历\",{\"1\":{\"437\":1}}],[\"可以控制对象在各个内存区域的流动\",{\"1\":{\"389\":1}}],[\"可以指定不同的参数对运行模式进行选择\",{\"1\":{\"635\":1}}],[\"可以指定线程信息去实现选择性通知\",{\"1\":{\"380\":1}}],[\"可以指定一个不同于uri的文件系统路径\",{\"1\":{\"73\":1}}],[\"可以感知异常\",{\"1\":{\"374\":1}}],[\"可以处理异常\",{\"1\":{\"354\":1}}],[\"可以拿返回值\",{\"1\":{\"357\":1}}],[\"可以拿到返回结果\",{\"1\":{\"354\":1}}],[\"可以拿httpentity响应体的json内容\",{\"1\":{\"139\":1}}],[\"可以理解为行号指示器\",{\"1\":{\"778\":1}}],[\"可以理解为将\",{\"1\":{\"722\":1}}],[\"可以理解为最原始的那根管道\",{\"1\":{\"688\":1}}],[\"可以理解为\",{\"1\":{\"388\":1,\"712\":1,\"740\":1}}],[\"可以理解为一个完整的linux\",{\"1\":{\"210\":1,\"789\":1}}],[\"可以理解成系统级别的一些参数配置\",{\"1\":{\"598\":1}}],[\"可以理解成\",{\"1\":{\"268\":1}}],[\"可以多装几台\",{\"1\":{\"265\":1}}],[\"可以多看下代码\",{\"1\":{\"243\":1}}],[\"可以非常容易的创建出高性能\",{\"1\":{\"261\":1,\"466\":1}}],[\"可以利用索引的\",{\"1\":{\"923\":1}}],[\"可以利用idea功能\",{\"1\":{\"256\":1,\"594\":1}}],[\"可以利用缓存的原子性操作\",{\"1\":{\"79\":1}}],[\"可以加上下文路径\",{\"1\":{\"229\":1}}],[\"可以加分布式锁\",{\"1\":{\"171\":1}}],[\"可以访问dom元素\",{\"1\":{\"225\":1}}],[\"可以访问当前this实例\",{\"1\":{\"225\":1}}],[\"可以监听键盘\",{\"1\":{\"220\":1}}],[\"可以监控一个或者多个key的值\",{\"1\":{\"85\":1}}],[\"可以把一个cpu当作多个cpu使用\",{\"1\":{\"1095\":1}}],[\"可以把所选代码提取出来当方法\",{\"0\":{\"1065\":1}}],[\"可以把这些消息状态放到数据库\",{\"1\":{\"833\":1}}],[\"可以把它恢复成原来的java对象\",{\"1\":{\"688\":1}}],[\"可以把\",{\"0\":{\"939\":1},\"1\":{\"219\":1,\"903\":1}}],[\"可以把任意的二进制\",{\"1\":{\"58\":1}}],[\"可以声明多次\",{\"1\":{\"216\":1}}],[\"可以看这个网址\",{\"1\":{\"1078\":1}}],[\"可以看这个类有哪些属性\",{\"0\":{\"1071\":1}}],[\"可以看这个四个属性的类型\",{\"1\":{\"872\":1}}],[\"可以看titile那篇文章\",{\"1\":{\"961\":1}}],[\"可以看出按顺序加锁可以避免不正确的资源竞争和循环依赖\",{\"1\":{\"933\":1}}],[\"可以看查询缓存参数\",{\"1\":{\"894\":1}}],[\"可以看下防火墙\",{\"1\":{\"853\":1}}],[\"可以看作是行级锁的一个升级\",{\"1\":{\"906\":1}}],[\"可以看作是\",{\"1\":{\"712\":1}}],[\"可以看我前段时间写过的一篇相关的文章\",{\"1\":{\"571\":1}}],[\"可以看到\",{\"1\":{\"721\":1,\"805\":1,\"901\":1,\"921\":1,\"923\":2,\"927\":1}}],[\"可以看到各个注册服务的信息\",{\"1\":{\"568\":1}}],[\"可以看到请求头也有这个属性\",{\"1\":{\"48\":1}}],[\"可以看自己写的代码\",{\"1\":{\"543\":1,\"1081\":1}}],[\"可以看\",{\"1\":{\"216\":1}}],[\"可以登录\",{\"1\":{\"208\":1}}],[\"可以考虑这些途径\",{\"1\":{\"1128\":1}}],[\"可以考虑在中间件实现\",{\"1\":{\"932\":1}}],[\"可以考虑放在多条记录上\",{\"1\":{\"932\":2}}],[\"可以考虑采取这种方式\",{\"1\":{\"208\":1}}],[\"可以考虑使用本地服务器来提供这些文件\",{\"1\":{\"706\":1}}],[\"可以考虑使用\",{\"1\":{\"182\":1}}],[\"可以由全自动部署机制独立部署\",{\"1\":{\"202\":1,\"554\":1}}],[\"可以执行了\",{\"1\":{\"309\":1}}],[\"可以执行\",{\"1\":{\"186\":1,\"686\":1}}],[\"可以实现限制请求处理速率的功能\",{\"1\":{\"849\":1}}],[\"可以实现叫\",{\"1\":{\"657\":1}}],[\"可以实现自动版的一个动态刷新\",{\"1\":{\"594\":1}}],[\"可以实现服务调用\",{\"1\":{\"563\":1}}],[\"可以实现更强大的切面功能\",{\"1\":{\"182\":1}}],[\"可以实现多点登录\",{\"1\":{\"70\":1}}],[\"可以综合考虑使用过滤器和拦截器来满足功能和性能的要求\",{\"1\":{\"156\":1}}],[\"可以拦截请求\",{\"1\":{\"156\":1}}],[\"可以设置每秒只准访问一次\",{\"1\":{\"600\":1}}],[\"可以设置默认值\",{\"1\":{\"505\":1}}],[\"可以设置超时方法\",{\"1\":{\"352\":1}}],[\"可以设置一段时间后执行代码\",{\"1\":{\"128\":1}}],[\"可以设置中文\",{\"1\":{\"100\":1}}],[\"可以满足更加复杂的分布式应用场景\",{\"1\":{\"112\":1}}],[\"可以适应不同的部署需求\",{\"1\":{\"112\":1}}],[\"可以往\",{\"1\":{\"98\":1,\"536\":1}}],[\"可以搞个匿名内部类实现\",{\"1\":{\"85\":1}}],[\"可以创建一个专门的表来存储锁状态\",{\"1\":{\"79\":1}}],[\"可以搭配\",{\"1\":{\"79\":1}}],[\"可以使用鼠标在打开的项目之间切换\",{\"0\":{\"1035\":1}}],[\"可以使用全表扫描的方式来查找行数据\",{\"1\":{\"966\":1}}],[\"可以使用通配符来指定模式\",{\"1\":{\"959\":1}}],[\"可以使用from子句来指定要进行连接的表\",{\"1\":{\"938\":1}}],[\"可以使用这个命令\",{\"1\":{\"927\":1}}],[\"可以使用索引\",{\"1\":{\"923\":2}}],[\"可以使用刷新令牌来获取新的访问令牌\",{\"1\":{\"890\":1}}],[\"可以使用以下命令\",{\"1\":{\"1038\":1}}],[\"可以使用以下命令来查看当前使用的shell\",{\"1\":{\"782\":1}}],[\"可以使用以下命令行参数来设置元空间的最大大小为\",{\"1\":{\"383\":1}}],[\"可以使用default对接口方法进行修饰\",{\"1\":{\"747\":1}}],[\"可以使用位运算替换一般简单的乘除法来提升系统性能\",{\"1\":{\"686\":1}}],[\"可以使用正则匹配式\",{\"1\":{\"685\":1}}],[\"可以使用无符号右移解决\",{\"1\":{\"648\":1}}],[\"可以使用system\",{\"1\":{\"547\":1}}],[\"可以使用延迟加载\",{\"1\":{\"424\":1}}],[\"可以使用带有版本号的原子引用或其他适当的同步机制\",{\"1\":{\"309\":1}}],[\"可以使用volatile关键字解决\",{\"1\":{\"297\":1}}],[\"可以使用在线的cron表达式生成器\",{\"1\":{\"201\":1}}],[\"可以使用nginx设置每一个请求的唯一id\",{\"1\":{\"174\":1}}],[\"可以使用一致性哈希算法将键哈希为一个值\",{\"1\":{\"103\":1}}],[\"可以使用一致性哈希算法来实现\",{\"1\":{\"103\":1}}],[\"可以使用\",{\"1\":{\"78\":1,\"107\":1,\"283\":2,\"520\":1,\"534\":1,\"713\":1,\"729\":1,\"934\":1,\"1010\":1,\"1038\":1}}],[\"可以用于提高读写效率的数据结构很多\",{\"1\":{\"913\":1}}],[\"可以用于检测系统的健康情况\",{\"1\":{\"567\":1}}],[\"可以用一张图来描述它们各自所处的位置\",{\"1\":{\"722\":1}}],[\"可以用来记录新的操作\",{\"1\":{\"899\":1}}],[\"可以用来做限流\",{\"1\":{\"849\":1}}],[\"可以用来创造\",{\"1\":{\"828\":1}}],[\"可以用来定义应用级别的\",{\"1\":{\"598\":1}}],[\"可以用来解决completablefuture丢失threadlocal的问题\",{\"1\":{\"157\":2}}],[\"可以用api\",{\"1\":{\"261\":1}}],[\"可以用正则表达式校验\",{\"1\":{\"240\":1}}],[\"可以用\",{\"1\":{\"78\":1,\"229\":1,\"894\":1,\"928\":1}}],[\"可以\",{\"0\":{\"1070\":1},\"1\":{\"76\":1,\"118\":1,\"799\":1,\"985\":1,\"1041\":2}}],[\"可以发送一个icmp回显请求\",{\"1\":{\"76\":1}}],[\"可以通过读取两次\",{\"1\":{\"1093\":1}}],[\"可以通过查询\",{\"1\":{\"974\":1}}],[\"可以通过explain解析\",{\"1\":{\"897\":1}}],[\"可以通过特定的配置或第三方工具来扩展这些限制\",{\"1\":{\"785\":1}}],[\"可以通过在终端中输入\",{\"1\":{\"782\":1}}],[\"可以通过在url中添加哈希值来创建一个唯一的url\",{\"1\":{\"539\":1}}],[\"可以通过svn的全局配置文件给忽略掉不显示\",{\"1\":{\"993\":1}}],[\"可以通过spi\",{\"1\":{\"740\":1}}],[\"可以通过setter注入或构造函数注入的方式来注入依赖项\",{\"1\":{\"488\":1}}],[\"可以通过创建对象\",{\"1\":{\"679\":1}}],[\"可以通过编译\",{\"0\":{\"667\":1}}],[\"可以通过webcallbackmanager\",{\"1\":{\"600\":1}}],[\"可以通过服务发现来获得该服务的信息\",{\"1\":{\"568\":1}}],[\"可以通过参数一xx\",{\"1\":{\"385\":1}}],[\"可以通过他对java中的对象加锁\",{\"1\":{\"329\":1}}],[\"可以通过分页的方式\",{\"1\":{\"91\":1}}],[\"可以通过延迟加载技术\",{\"1\":{\"91\":1}}],[\"可以通过一次性读取多条记录\",{\"1\":{\"91\":1}}],[\"可以通过这个访问日志拿到所有访问者的ip地址\",{\"1\":{\"72\":1}}],[\"可以通过简单比对token来快速处理外部应用访问\",{\"1\":{\"70\":1}}],[\"可以通过\",{\"1\":{\"61\":1,\"491\":1,\"591\":1,\"890\":1}}],[\"可以在github\",{\"1\":{\"1145\":1}}],[\"可以在知乎上搜索一下\",{\"1\":{\"1117\":1}}],[\"可以在\",{\"1\":{\"1003\":1}}],[\"可以在后续的查询中使用\",{\"1\":{\"959\":1}}],[\"可以在后面附加参数\",{\"1\":{\"49\":1}}],[\"可以在索引遍历过程中\",{\"1\":{\"924\":1}}],[\"可以在每次执行一个比较大的操作后\",{\"1\":{\"893\":1}}],[\"可以在任何地方手动获取\",{\"1\":{\"884\":1}}],[\"可以在任何场景\",{\"1\":{\"687\":1}}],[\"可以在接口中添加新的方法并提供默认实现\",{\"1\":{\"686\":1}}],[\"可以在运行时通过控制台实时修改限流降级规则\",{\"1\":{\"594\":1}}],[\"可以在请求被路由前或者之后对请求进行修改\",{\"1\":{\"590\":1}}],[\"可以在idea的vm\",{\"1\":{\"549\":1}}],[\"可以在idea的program\",{\"1\":{\"548\":1}}],[\"可以在idea的idea\",{\"1\":{\"547\":1}}],[\"可以在内部方法上使用\",{\"1\":{\"179\":1}}],[\"可以在同一线程内的多个请求之间共享数据\",{\"1\":{\"156\":1}}],[\"可以在spring\",{\"1\":{\"60\":1}}],[\"可以读取该信息发送到服务器端\",{\"1\":{\"47\":1}}],[\"但工具还是整的明明白白的\",{\"1\":{\"1162\":1}}],[\"但平板和另一台又好看又自动显示中文\",{\"1\":{\"1162\":1}}],[\"但肯定会被打而已hh~\",{\"1\":{\"1160\":1}}],[\"但成功与否取决于字典\",{\"1\":{\"1155\":1}}],[\"但加班少\",{\"1\":{\"1114\":1}}],[\"但用新技术有利于你下一次跳槽\",{\"1\":{\"1111\":1}}],[\"但你的引导依然是有必要的\",{\"1\":{\"1134\":1}}],[\"但你需要对工资的构成有一个全面的了解\",{\"1\":{\"1108\":1}}],[\"但你仍然需要确保在部署和运行时\",{\"1\":{\"1012\":1}}],[\"但被\",{\"1\":{\"1077\":1}}],[\"但今后等待着你们那的会是一个\",{\"1\":{\"1077\":1}}],[\"但原始文本是小写的\",{\"0\":{\"1046\":1}}],[\"但又在项目代码中使用它\",{\"1\":{\"1012\":1}}],[\"但又比较重要\",{\"1\":{\"688\":1}}],[\"但发现只包含文档\",{\"1\":{\"1005\":1}}],[\"但发送消息\",{\"1\":{\"829\":1}}],[\"但简单\",{\"1\":{\"1005\":1}}],[\"但也可以指定为非聚簇索引\",{\"1\":{\"978\":1}}],[\"但也可以使用其他的存储方式\",{\"1\":{\"153\":1}}],[\"但可以对最终的结果集进行排序\",{\"1\":{\"947\":1}}],[\"但可以采用适当的采取弱一致性\",{\"1\":{\"571\":1}}],[\"但其实这类方案需要根据业务逻辑做详细设计\",{\"1\":{\"932\":1}}],[\"但整个数据库每秒就执行不到\",{\"1\":{\"931\":1}}],[\"但考虑一下这个场景\",{\"1\":{\"928\":1}}],[\"但却是你不能忽略的一个机制\",{\"1\":{\"928\":1}}],[\"但我还是有疑问\",{\"1\":{\"1162\":1}}],[\"但我还是会建议你用\",{\"1\":{\"927\":1}}],[\"但我们又想看到期中一些目录\",{\"1\":{\"210\":1}}],[\"但前提是引擎要支持这个隔离级别\",{\"1\":{\"927\":1}}],[\"但总不能让它走全表扫描吧\",{\"1\":{\"923\":1}}],[\"但无法使用索引来完成排序\",{\"1\":{\"923\":1}}],[\"但无论是jdk动态代理还是cglib代理\",{\"1\":{\"182\":1}}],[\"但事无绝对\",{\"1\":{\"919\":1}}],[\"但缺点是\",{\"1\":{\"914\":1}}],[\"但没关系\",{\"1\":{\"914\":1}}],[\"但没有一个标志让\",{\"1\":{\"899\":2}}],[\"但到底什么是索引\",{\"1\":{\"909\":1}}],[\"但查询无结果时\",{\"1\":{\"906\":1}}],[\"但通常情况下\",{\"1\":{\"871\":1}}],[\"但通常有登录限制\",{\"1\":{\"785\":1}}],[\"但只能一个人支付成功\",{\"1\":{\"855\":1}}],[\"但在别人手机却不仅仅只能打游戏还能挣钱写代码p图一样\",{\"1\":{\"1162\":1}}],[\"但在别人手里却能发挥出它80\",{\"1\":{\"1162\":1}}],[\"但在部署和运行阶段\",{\"1\":{\"1012\":1}}],[\"但在实际应用中可能需要根据具体需求进行适当的调整和扩展\",{\"1\":{\"852\":1}}],[\"但在运行期\",{\"0\":{\"699\":1}}],[\"但为抵达queue\",{\"1\":{\"846\":1}}],[\"但库存锁定成功\",{\"1\":{\"844\":1}}],[\"但web一看5个却都ack置为0了\",{\"1\":{\"837\":1}}],[\"但求把每一篇都搞懂\",{\"1\":{\"740\":1}}],[\"但问题是一个\",{\"1\":{\"739\":1}}],[\"但使用的不是常量表达式\",{\"1\":{\"725\":1}}],[\"但java可以称为准动态语言\",{\"1\":{\"688\":1}}],[\"但别给我卡在那\",{\"1\":{\"688\":1}}],[\"但对于c就不能向里添加数据了\",{\"1\":{\"688\":1}}],[\"但运行时依旧是错的\",{\"1\":{\"686\":1}}],[\"但如果年终奖发得太晚\",{\"1\":{\"1122\":1}}],[\"但如果不是死锁\",{\"1\":{\"932\":1}}],[\"但如果某天赊账的特别多\",{\"1\":{\"899\":1}}],[\"但如果赊账的人多了\",{\"1\":{\"899\":1}}],[\"但如果一个汽车类可以实现跑\",{\"1\":{\"657\":1}}],[\"但如果网络中存在问题\",{\"1\":{\"76\":1}}],[\"但循环变量可能不会相应地更新\",{\"1\":{\"645\":1}}],[\"但您可以在servlet中将它们传递给其他方法或对象\",{\"1\":{\"632\":1}}],[\"但它的配置却是重量级的\",{\"1\":{\"726\":1}}],[\"但它通过减少线程或进程的数量和上下文切换的开销\",{\"1\":{\"712\":1}}],[\"但它并不是\",{\"1\":{\"712\":1}}],[\"但它同一时候有加热功能\",{\"1\":{\"657\":1}}],[\"但它不是必需的\",{\"1\":{\"625\":1}}],[\"但它们的作用范围和使用方式不同\",{\"1\":{\"1014\":1}}],[\"但它们在功能和使用方式上有一些区别\",{\"1\":{\"156\":1}}],[\"但它们之间存在一些区别\",{\"1\":{\"73\":1}}],[\"但需要经过一系列\",{\"1\":{\"590\":1}}],[\"但需要额外的复制操作\",{\"1\":{\"385\":1}}],[\"但这种信息一般都是个例\",{\"1\":{\"1117\":1}}],[\"但这样可能会导致你的密码泄露\",{\"1\":{\"893\":1}}],[\"但这两者是会产生新对象所以\",{\"1\":{\"780\":1}}],[\"但这里不整了就简单弄基础功能\",{\"1\":{\"1100\":1}}],[\"但这里是中国\",{\"1\":{\"581\":1}}],[\"但这里会产生额外的问题\",{\"1\":{\"531\":1}}],[\"但这并不是http协议本身的限制\",{\"1\":{\"581\":1}}],[\"但订单却创建了\",{\"1\":{\"572\":1}}],[\"但由于出现故障\",{\"1\":{\"572\":1}}],[\"但有时太快也不好\",{\"1\":{\"1005\":1}}],[\"但有下面问题\",{\"1\":{\"872\":1}}],[\"但有个节点还没同步好是7\",{\"1\":{\"571\":1}}],[\"但有几种可能的原因导致ping不通\",{\"1\":{\"76\":1}}],[\"但还得写实现挺麻烦的\",{\"1\":{\"451\":1}}],[\"但建议只要指定resultmap就把全部的映射规则都写上\",{\"1\":{\"423\":1}}],[\"但id定义主键会底层有优化\",{\"1\":{\"419\":1}}],[\"但经常要使用\",{\"1\":{\"410\":1}}],[\"但并不是不需要了就立刻释放\",{\"1\":{\"931\":1}}],[\"但并不是所有的引擎都支持行锁\",{\"1\":{\"930\":1}}],[\"但并不是所有的引擎都支持事务\",{\"1\":{\"904\":1}}],[\"但并不是mybatis默认的方式\",{\"1\":{\"393\":1}}],[\"但并不会关系多线程间的语义一致性\",{\"1\":{\"301\":1}}],[\"但属于不稳定的选项\",{\"1\":{\"383\":1}}],[\"但第一个车辆抢占到停车位后\",{\"1\":{\"342\":1}}],[\"但一个线程收集到了的时候\",{\"1\":{\"338\":1}}],[\"但中途太子受到了伤害\",{\"1\":{\"309\":1}}],[\"但中途有猫腻被改过\",{\"1\":{\"309\":1}}],[\"但真的没问题吗\",{\"1\":{\"309\":1}}],[\"但此时\",{\"1\":{\"302\":1,\"779\":1}}],[\"但此时a线程工作内存中的共享比那里x对线程b来说并不不可见\",{\"1\":{\"288\":1}}],[\"但他们并发进行\",{\"1\":{\"290\":1}}],[\"但他就是刚性事务\",{\"1\":{\"183\":1}}],[\"但线程对变量的操作\",{\"1\":{\"287\":1}}],[\"但明明属性是数组\",{\"1\":{\"241\":1}}],[\"但报错不符合业务规定\",{\"1\":{\"240\":1}}],[\"但不返回任何值\",{\"1\":{\"748\":1}}],[\"但不包括静态方法\",{\"1\":{\"697\":2}}],[\"但不会实际改变显示器的物理分辨率\",{\"1\":{\"998\":1}}],[\"但不会自动merge\",{\"1\":{\"990\":1}}],[\"但不会被覆盖\",{\"1\":{\"543\":1}}],[\"但不会导致容器的停止\",{\"1\":{\"212\":1}}],[\"但不向后兼容oauth\",{\"1\":{\"136\":1}}],[\"但实际没有完成初始化\",{\"1\":{\"301\":1}}],[\"但实际执行成功\",{\"1\":{\"176\":1}}],[\"但实际上\",{\"1\":{\"48\":1,\"972\":1}}],[\"但返回给订单服务出现了问题\",{\"1\":{\"170\":1}}],[\"但仍有问题\",{\"1\":{\"147\":1}}],[\"但本地锁只能锁住当前服务\",{\"1\":{\"109\":1}}],[\"但当进行压力测试时后期会出现\",{\"0\":{\"107\":1}}],[\"但能查\",{\"0\":{\"82\":1}}],[\"但\",{\"1\":{\"76\":1,\"589\":1,\"726\":1,\"899\":2}}],[\"但现在https加密\",{\"1\":{\"70\":1}}],[\"但是毕竟不是混迹职场多年的人\",{\"1\":{\"1150\":1}}],[\"但是正是因为厚\",{\"1\":{\"1150\":1}}],[\"但是认真学了收获会很大\",{\"1\":{\"1150\":1}}],[\"但是买的人很多\",{\"1\":{\"1150\":1}}],[\"但是每个人口味不一样\",{\"1\":{\"1150\":1}}],[\"但是每秒却执行不了几个事务\",{\"1\":{\"932\":1}}],[\"但是效果是很好的\",{\"1\":{\"1150\":1}}],[\"但是视频就好多了\",{\"1\":{\"1150\":1}}],[\"但是那些都是基础中的基础\",{\"1\":{\"1150\":1}}],[\"但是同时\",{\"1\":{\"1148\":1}}],[\"但是同类中的方法相互调用\",{\"1\":{\"182\":1}}],[\"但是同类中的方法互相调用\",{\"1\":{\"179\":1}}],[\"但是微信的好处就是\",{\"1\":{\"1145\":1}}],[\"但是一般大一只会学一门语言\",{\"1\":{\"1150\":1}}],[\"但是一般不这样写\",{\"1\":{\"706\":1}}],[\"但是一定要记得\",{\"1\":{\"1150\":1}}],[\"但是一句代码不会写依然没有什么用\",{\"1\":{\"1144\":1}}],[\"但是至少大方向是有的\",{\"1\":{\"1144\":1}}],[\"但是能够做出正确的选择的人\",{\"1\":{\"1139\":1}}],[\"但是能支持的数据量比较少\",{\"1\":{\"87\":1}}],[\"但是逻辑处理器是8个\",{\"1\":{\"1095\":1}}],[\"但是逻辑功能上还是单体应用\",{\"1\":{\"553\":1}}],[\"但是地址总线一般大于等于数据总线\",{\"1\":{\"1093\":1}}],[\"但是项目代码又要用\",{\"1\":{\"1012\":1}}],[\"但是还要cd到目录\",{\"1\":{\"994\":1}}],[\"但是还是加上了这一问\",{\"1\":{\"492\":1}}],[\"但是合并时候发现不兼容\",{\"1\":{\"994\":1}}],[\"但是新功能做到了一半你又不想提交\",{\"1\":{\"990\":1}}],[\"但是新版本java对synchronized进行了很多优化\",{\"1\":{\"380\":1}}],[\"但是突然之间\",{\"1\":{\"977\":1}}],[\"但是确实大多数业务都会考虑把这种合并操作放到service层\",{\"1\":{\"970\":1}}],[\"但是建议为每个表指定一个主键\",{\"1\":{\"965\":1}}],[\"但是此时\",{\"1\":{\"961\":1}}],[\"但是此时单元测试也拿了3个消息\",{\"1\":{\"831\":1}}],[\"但是访问的用户很少\",{\"1\":{\"961\":1}}],[\"但是之后\",{\"1\":{\"935\":1}}],[\"但是之后所有要在表\",{\"1\":{\"928\":1}}],[\"但是代码还没升级\",{\"1\":{\"929\":1}}],[\"但是上面的请求很频繁\",{\"1\":{\"928\":1}}],[\"但是上面这个注解不会\",{\"1\":{\"568\":1}}],[\"但是语句结束后并不会马上释放\",{\"1\":{\"928\":1}}],[\"但是细想一下\",{\"1\":{\"927\":1}}],[\"但是让整库都只读\",{\"1\":{\"927\":1}}],[\"但是is\",{\"1\":{\"923\":1}}],[\"但是c不可以\",{\"1\":{\"923\":1}}],[\"但是也千万别死板的都按照这个过程来\",{\"1\":{\"1144\":1}}],[\"但是也不是完全一样\",{\"1\":{\"998\":1}}],[\"但是也会引入诸如查询数据必须带上分区键\",{\"1\":{\"961\":1}}],[\"但是也把好几个\",{\"1\":{\"908\":1}}],[\"但是也正是因为这些资源缓存\",{\"1\":{\"539\":1,\"1083\":1}}],[\"但是有的开发同学会纠结\",{\"1\":{\"907\":1}}],[\"但是结果已经被\",{\"1\":{\"905\":1}}],[\"但是执行的效率会有不同\",{\"1\":{\"896\":1}}],[\"但是大多数情况下我会建议你不要使用查询缓存\",{\"1\":{\"894\":1}}],[\"但是会将连接恢复到刚刚创建完时的状态\",{\"1\":{\"893\":1}}],[\"但是全部使用长连接后\",{\"1\":{\"893\":1}}],[\"但是全局的数据一致性问题没法保证\",{\"1\":{\"606\":1}}],[\"但是必须发生请求才行\",{\"1\":{\"890\":1}}],[\"但是真实环境更推荐使用\",{\"1\":{\"883\":1}}],[\"但是你还是忍不住的打开它瞅几眼\",{\"1\":{\"1148\":1}}],[\"但是你还是需要从1楼走到17楼去找他\",{\"1\":{\"1090\":1}}],[\"但是你一定要有自己的资料来源\",{\"1\":{\"1144\":1}}],[\"但是你不会\",{\"1\":{\"1135\":2}}],[\"但是你想给一个默认值\",{\"1\":{\"876\":1}}],[\"但是你默认连接的存活时间是五分钟\",{\"1\":{\"260\":1}}],[\"但是空间省了\",{\"1\":{\"875\":1}}],[\"但是是手动完成的\",{\"1\":{\"864\":1}}],[\"但是最后终于成功的输出了结果的那种喜悦\",{\"1\":{\"1150\":1}}],[\"但是最后一次持久化后的数据可能丢失\",{\"1\":{\"859\":1}}],[\"但是最好还是在方法中先写会有提示\",{\"1\":{\"361\":1}}],[\"但是事务不保证原子性\",{\"1\":{\"854\":1,\"868\":1}}],[\"但是ack时宕机\",{\"1\":{\"847\":1}}],[\"但是aspect能够做到方法级更细的操作\",{\"1\":{\"156\":1}}],[\"但是挂载的这些其他目录还是空的改没东西还是没东西\",{\"1\":{\"795\":1}}],[\"但是把这行单独放到一个\",{\"1\":{\"787\":1}}],[\"但是多用户不可以同时在线操作\",{\"1\":{\"785\":1}}],[\"但是懒汉不是\",{\"1\":{\"779\":1}}],[\"但是又不满足前端判断重复请求的条件\",{\"1\":{\"889\":1}}],[\"但是又被i++的返回值给重新赋值了\",{\"1\":{\"778\":1}}],[\"但是又有问题\",{\"1\":{\"124\":1}}],[\"但是现在不知道person谁大谁小无法排序\",{\"1\":{\"766\":1}}],[\"但是并不是所有的接口都可以用lambda表达式来实现\",{\"1\":{\"747\":1}}],[\"但是并不是立即就创建对象并驻留了引用\",{\"1\":{\"722\":1}}],[\"但是给出来的结果是一样的\",{\"1\":{\"740\":1}}],[\"但是给一个基本类型变量赋值时不需要使用new关键字\",{\"1\":{\"725\":1}}],[\"但是初始化时没有使用常量表达式\",{\"1\":{\"725\":1}}],[\"但是我没有看过\",{\"1\":{\"1150\":1}}],[\"但是我建议大家用一个月的时间学完\",{\"1\":{\"1150\":1}}],[\"但是我还是希望你能够认真的去对待它\",{\"1\":{\"1142\":1}}],[\"但是我觉得\",{\"1\":{\"1139\":1,\"1150\":1}}],[\"但是我直接操作数组里的元素还是可以的\",{\"1\":{\"721\":1}}],[\"但是我们一般不会采用这种方式\",{\"1\":{\"625\":1}}],[\"但是我们本次还是大规模的学习使用配置和注解的方式\",{\"1\":{\"599\":1}}],[\"但是我们通过上面的三个步骤\",{\"1\":{\"301\":1}}],[\"但是我们不能这样用\",{\"1\":{\"80\":1}}],[\"但是我们需要重新加载配置文件\",{\"1\":{\"71\":1}}],[\"但是下面这段代码却能够正常的运行\",{\"1\":{\"721\":1}}],[\"但是数组本身内的值可以被修改\",{\"1\":{\"721\":1}}],[\"但是运行时异常检查不出来\",{\"1\":{\"705\":1}}],[\"但是运行起来修改的这个timeout却还是原先的没有改变\",{\"1\":{\"107\":1}}],[\"但是为什么呢\",{\"1\":{\"700\":1}}],[\"但是更新链表头指针时\",{\"1\":{\"694\":1}}],[\"但是mongdb\",{\"1\":{\"689\":1}}],[\"但是brain用string这种又差点意思\",{\"1\":{\"686\":1}}],[\"但是比\",{\"1\":{\"681\":1}}],[\"但是比jsonp更强大\",{\"1\":{\"232\":1}}],[\"但是引用的内容是可变的\",{\"1\":{\"662\":1}}],[\"但是常见的\",{\"1\":{\"634\":1}}],[\"但是shell中批量总是报错\",{\"1\":{\"799\":1,\"985\":1}}],[\"但是stock\",{\"1\":{\"606\":1}}],[\"但是spring\",{\"1\":{\"559\":1}}],[\"但是实际上大多数的数据库存储却并不使用二叉树\",{\"1\":{\"916\":1}}],[\"但是实际点击源码看没看到\",{\"1\":{\"743\":1,\"1101\":1}}],[\"但是实现索引的方式却有很多种\",{\"1\":{\"913\":1}}],[\"但是实测会报错\",{\"1\":{\"594\":1}}],[\"但是实例内容已经重新加载\",{\"1\":{\"124\":1}}],[\"但是3355客户端是没有修改需要重启才生效\",{\"1\":{\"594\":1}}],[\"但是因为死锁检测是默认开启的有额外负担\",{\"1\":{\"932\":1}}],[\"但是因为提供了类似反射等机制\",{\"1\":{\"637\":1}}],[\"但是因为某些故障\",{\"1\":{\"571\":1}}],[\"但是因为太快了\",{\"1\":{\"290\":1}}],[\"但是用户课程表里面已经多了一门课\",{\"1\":{\"927\":1}}],[\"但是用户可能没进这个成功页面\",{\"1\":{\"192\":1}}],[\"但是用的少\",{\"1\":{\"570\":1}}],[\"但是分布式部署的应用不一定是微服务架构的\",{\"1\":{\"553\":1}}],[\"但是分布式锁有更专业的框架\",{\"1\":{\"111\":1}}],[\"但是子必须自己导入并加个\",{\"1\":{\"546\":1}}],[\"但是按规范注释来说希望所有的事件类都最好实现\",{\"1\":{\"543\":1,\"1081\":1}}],[\"但是却又带来了新的麻烦\",{\"1\":{\"539\":1,\"1083\":1}}],[\"但是tomxxx的条件注解依赖的是user01\",{\"1\":{\"517\":1}}],[\"但是本\",{\"1\":{\"506\":1}}],[\"但是加上上面注解\",{\"1\":{\"503\":1}}],[\"但是表连接\",{\"1\":{\"465\":1}}],[\"但是不同行业的程序员待遇和前途是不同的\",{\"1\":{\"1114\":1}}],[\"但是不能待超过两年\",{\"1\":{\"1110\":1}}],[\"但是不是说内存地址也必须32位\",{\"1\":{\"1093\":1}}],[\"但是不连续的主键插入会导致严重的页分裂\",{\"1\":{\"961\":1}}],[\"但是不建议这样用\",{\"0\":{\"667\":1}}],[\"但是不会释放当前线程持有的锁资源\",{\"1\":{\"650\":1}}],[\"但是不聪明\",{\"1\":{\"584\":1}}],[\"但是不影响\",{\"1\":{\"421\":1}}],[\"但是不代表这个过程就是没有问题的\",{\"1\":{\"309\":1}}],[\"但是推荐只要指定resultmap就把全部的映射规则都写上\",{\"1\":{\"419\":1}}],[\"但是虚拟机不一定真正去执行\",{\"1\":{\"389\":1}}],[\"但是直到给a赋值之后\",{\"1\":{\"388\":1}}],[\"但是很麻烦\",{\"1\":{\"352\":1}}],[\"但是当方法\",{\"1\":{\"321\":1}}],[\"但是发现这个值被别人改过了\",{\"1\":{\"312\":1}}],[\"但是这个库又依赖于另外一个库\",{\"1\":{\"1010\":1}}],[\"但是这个cas有没有问题呢\",{\"1\":{\"312\":1}}],[\"但是这种行标识符并不是真正的主键\",{\"1\":{\"965\":1}}],[\"但是这种操作本身带有一定的风险\",{\"1\":{\"932\":1}}],[\"但是这期间要消耗大量的\",{\"1\":{\"932\":1}}],[\"但是这些等待的客户能够对商家带来利润\",{\"1\":{\"346\":1}}],[\"但是这些技术的引入就会导致有序性问题\",{\"1\":{\"329\":1}}],[\"但是这样的话就整个代码都锁了\",{\"1\":{\"299\":1}}],[\"但是这样会增加\",{\"1\":{\"156\":1}}],[\"但是预期为z3\",{\"1\":{\"310\":1}}],[\"但是对于\",{\"1\":{\"922\":1}}],[\"但是对于多个共享变量操作时\",{\"1\":{\"307\":1}}],[\"但是对象还没有初始化完成\",{\"1\":{\"301\":1}}],[\"但是需要注意\",{\"1\":{\"871\":1,\"1010\":1}}],[\"但是需要注意的是\",{\"1\":{\"543\":1}}],[\"但是需要多次比较\",{\"1\":{\"307\":1}}],[\"但是需要我们手动实现更多的代码\",{\"1\":{\"186\":1}}],[\"但是另外一个线程已经执行到d处\",{\"1\":{\"302\":1}}],[\"但是由于电脑的使用习惯没到位就想到了win\",{\"1\":{\"1160\":1}}],[\"但是由于变基只改变当前分支的历史记录\",{\"1\":{\"990\":1}}],[\"但是由于变量声明为父类类型\",{\"1\":{\"686\":1}}],[\"但是由于\",{\"1\":{\"302\":1,\"779\":1,\"901\":1}}],[\"但是在这个版本的\",{\"1\":{\"1010\":1}}],[\"但是在\",{\"1\":{\"1006\":1}}],[\"但是在大数据的时候\",{\"1\":{\"936\":1}}],[\"但是在查询这条记录的时候\",{\"1\":{\"906\":1}}],[\"但是在当前目录下没有匹配的文件时\",{\"1\":{\"787\":1}}],[\"但是在jdk9中这个char数组已经被替换成了byte数组\",{\"1\":{\"721\":1}}],[\"但是在java中\",{\"1\":{\"329\":1}}],[\"但是在servlet3\",{\"1\":{\"590\":1}}],[\"但是在经过编译器\",{\"1\":{\"295\":1}}],[\"但是在多线程环境下会导致一个线程获得还没有初始化的实例\",{\"1\":{\"302\":1,\"779\":1}}],[\"但是在多线程环境下\",{\"1\":{\"293\":1}}],[\"但是如果要深度触控的话还是蛮好\",{\"1\":{\"1164\":1}}],[\"但是如果你具有了直接寻址技术\",{\"1\":{\"1090\":1}}],[\"但是如果数据库的数据量不大\",{\"1\":{\"911\":1}}],[\"但是如果一个线程想去写共享资源\",{\"1\":{\"326\":1}}],[\"但是如果在多线程环境下\",{\"1\":{\"295\":1}}],[\"但是如果不关心这些数据有点延迟也没关系那就不加锁没事\",{\"1\":{\"118\":1}}],[\"但是指令重排也是有限制的\",{\"1\":{\"293\":1}}],[\"但是依旧会产生并发\",{\"1\":{\"286\":1}}],[\"但是几分钟之后就会报错\",{\"1\":{\"260\":1}}],[\"但是性能差等原因\",{\"1\":{\"229\":1}}],[\"但是服务之间不可避免的需要互相调用\",{\"1\":{\"208\":1}}],[\"但是改了后还是不行搞了几个小时搞不好\",{\"1\":{\"198\":1}}],[\"但是没办法\",{\"1\":{\"543\":1}}],[\"但是没办法保证请求幂等性\",{\"1\":{\"174\":1}}],[\"但是没法修改返回数据\",{\"1\":{\"374\":1}}],[\"但是没想到什么场景会产生危害\",{\"1\":{\"309\":1}}],[\"但是没有显式声明它\",{\"1\":{\"1010\":1}}],[\"但是没有跟着敲代码\",{\"1\":{\"687\":1}}],[\"但是没有输出日志想着怎么配又回来回顾\",{\"1\":{\"229\":1}}],[\"但是没有解决的\",{\"1\":{\"107\":1}}],[\"但是f5刷新的话就不一样了\",{\"1\":{\"167\":1}}],[\"但是它也是有额外负担的\",{\"1\":{\"932\":1}}],[\"但是它也有对应的缺点\",{\"1\":{\"866\":1}}],[\"但是它们是针对不同的操作系统而设计的\",{\"1\":{\"1037\":1}}],[\"但是它们都是利用非常粗粒度的同步方式\",{\"1\":{\"641\":1}}],[\"但是它们的作用和使用场景有所不同\",{\"1\":{\"156\":1}}],[\"但是它却有一个别名叫做\",{\"1\":{\"386\":1}}],[\"但是它集群的话不同服务器也不能共享\",{\"1\":{\"141\":1}}],[\"但是中途总是不生效\",{\"1\":{\"150\":1}}],[\"但是远程调用还是不好解决\",{\"1\":{\"144\":1}}],[\"但是都能\",{\"1\":{\"133\":1}}],[\"但是光零零一个md5\",{\"1\":{\"132\":1}}],[\"但是\",{\"0\":{\"1135\":1},\"1\":{\"113\":1,\"155\":1,\"183\":1,\"329\":1,\"494\":2,\"581\":1,\"630\":1,\"650\":1,\"658\":2,\"711\":1,\"712\":1,\"727\":1,\"739\":1,\"785\":1,\"824\":1,\"900\":1,\"901\":1,\"905\":1,\"911\":1,\"915\":1,\"916\":1,\"919\":1,\"923\":1,\"925\":1,\"927\":1,\"931\":1,\"932\":2,\"933\":1,\"934\":1,\"990\":1,\"1001\":1,\"1038\":1,\"1140\":2,\"1150\":2,\"1151\":1}}],[\"但是他是利用的session原理\",{\"1\":{\"98\":1,\"130\":1,\"536\":1}}],[\"但是连上没有网络\",{\"1\":{\"77\":1}}],[\"但是网上教程大部分为\",{\"1\":{\"70\":1}}],[\"但是要让jwt失效依然很简单\",{\"1\":{\"70\":1}}],[\"但是url路径和查询参数部分可能会受到服务器的影响\",{\"1\":{\"60\":1}}],[\"编译期间直接添加会报错\",{\"1\":{\"715\":1}}],[\"编译时表现为base类特性\",{\"1\":{\"697\":1}}],[\"编译时就写死了\",{\"1\":{\"688\":1}}],[\"编译时确定不下来造哪个对象\",{\"1\":{\"688\":1}}],[\"编译时的异常用try\",{\"1\":{\"686\":1}}],[\"编译错误\",{\"1\":{\"686\":1}}],[\"编译不通过\",{\"1\":{\"685\":1,\"688\":1}}],[\"编译通过\",{\"1\":{\"662\":1,\"688\":1}}],[\"编译\",{\"1\":{\"635\":1,\"699\":1}}],[\"编译成为字节码\",{\"1\":{\"634\":1}}],[\"编译器能够在编译期就得到s1的值是hello\",{\"1\":{\"725\":1}}],[\"编译器通过语法分析\",{\"1\":{\"725\":1}}],[\"编译器通过擦除将泛型类转化\",{\"1\":{\"715\":1}}],[\"编译器会对string字符串相加的操作进行优化\",{\"1\":{\"720\":1}}],[\"编译器会在编译期间会动态地将泛型\",{\"1\":{\"715\":1}}],[\"编译器要求必须处置的异常\",{\"0\":{\"705\":1}}],[\"编译器优化方式\",{\"1\":{\"635\":1}}],[\"编译器优化的重排\",{\"1\":{\"292\":1}}],[\"编译器\",{\"1\":{\"634\":1}}],[\"编译器和处理器常常会对指令重排\",{\"1\":{\"292\":1}}],[\"编码才是重中之重\",{\"1\":{\"1144\":1}}],[\"编码后的字符串长度通常会比原始数据增加约\",{\"1\":{\"1081\":1}}],[\"编码后的长度要是4的倍数\",{\"1\":{\"58\":1}}],[\"编码将每\",{\"1\":{\"1081\":1}}],[\"编码问题看尚硅谷p602\",{\"1\":{\"688\":1}}],[\"编码\",{\"1\":{\"554\":1,\"599\":1,\"1144\":1}}],[\"编辑器推荐\",{\"1\":{\"1150\":1}}],[\"编辑或删除系统或用户级别的环境变量\",{\"1\":{\"1038\":1}}],[\"编辑配置\",{\"1\":{\"537\":1,\"1005\":1}}],[\"编辑此页链接\",{\"1\":{\"2\":1}}],[\"编程最大的魅力\",{\"1\":{\"1150\":1}}],[\"编程字体我用\",{\"1\":{\"1005\":1}}],[\"编程语言通常有各种不同的分类角度\",{\"1\":{\"637\":1}}],[\"编程时方式创建\",{\"1\":{\"486\":1}}],[\"编程模式\",{\"1\":{\"228\":1}}],[\"编写一个接口\",{\"1\":{\"576\":1}}],[\"编写拦截器\",{\"1\":{\"534\":1}}],[\"编写interceptor的实现类\",{\"1\":{\"465\":1}}],[\"编写代码\",{\"0\":{\"401\":1}}],[\"编写两个方法\",{\"1\":{\"179\":1}}],[\"原意是我们做贫贱夫妻的每一件事情都会让我特别悲哀\",{\"1\":{\"1076\":1}}],[\"原本我以为自己把握的住结果还是着了它的道\",{\"1\":{\"1153\":1}}],[\"原本要20s\",{\"1\":{\"959\":1}}],[\"原本放在一个页的数据\",{\"1\":{\"918\":1}}],[\"原则三\",{\"0\":{\"1121\":1},\"1\":{\"1130\":1}}],[\"原则二\",{\"0\":{\"1120\":1},\"1\":{\"1130\":1}}],[\"原则一\",{\"0\":{\"1119\":1},\"1\":{\"1130\":1}}],[\"原则\",{\"0\":{\"1125\":1},\"1\":{\"918\":1}}],[\"原码才可以对应为正常的整数\",{\"1\":{\"685\":1}}],[\"原=\",{\"1\":{\"648\":1}}],[\"原先\",{\"1\":{\"569\":1}}],[\"原始的\",{\"1\":{\"560\":1}}],[\"原始数据\",{\"1\":{\"216\":1}}],[\"原生的\",{\"1\":{\"892\":1,\"904\":1}}],[\"原生方式获取的\",{\"1\":{\"885\":1}}],[\"原生\",{\"1\":{\"504\":1}}],[\"原生jdbc不支持占位符的地方我们就可以使用$\",{\"1\":{\"411\":1}}],[\"原语属于操作系统用于范畴\",{\"1\":{\"303\":1}}],[\"原语一旦开始执行\",{\"1\":{\"302\":1}}],[\"原\",{\"1\":{\"228\":1,\"648\":5}}],[\"原来还可以这样\",{\"1\":{\"1150\":1}}],[\"原来的配置文件夹里\",{\"1\":{\"1005\":1}}],[\"原来的三个模块被拆分成三个独立的应用\",{\"1\":{\"606\":1}}],[\"原来是这么回事\",{\"1\":{\"866\":1}}],[\"原来是abc\",{\"1\":{\"694\":1}}],[\"原来可以直接sout这个map\",{\"1\":{\"415\":1}}],[\"原来提到的比较并交换\",{\"1\":{\"324\":1}}],[\"原来\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"原子引用其实和原子包装类是差不多的概念\",{\"1\":{\"310\":1}}],[\"原子引用\",{\"0\":{\"310\":1},\"1\":{\"309\":1}}],[\"原子引用更新\",{\"1\":{\"309\":1}}],[\"原子解锁\",{\"1\":{\"111\":1}}],[\"原子加锁\",{\"1\":{\"111\":1}}],[\"原子操作\",{\"1\":{\"89\":1,\"304\":1}}],[\"原子性\",{\"0\":{\"289\":1},\"1\":{\"79\":1,\"87\":1,\"284\":1,\"962\":2}}],[\"原因在上面说过了\",{\"1\":{\"1130\":1}}],[\"原因在于\",{\"1\":{\"648\":1}}],[\"原因也很简单\",{\"1\":{\"715\":1}}],[\"原因绕过了代理对象\",{\"1\":{\"179\":2}}],[\"原因是没有提交一个对象\",{\"1\":{\"987\":1}}],[\"原因是没有用到\",{\"1\":{\"179\":1}}],[\"原因是内存模型允许无序写入\",{\"1\":{\"302\":1}}],[\"原因是在某一个线程执行到第一次检测的时候\",{\"1\":{\"301\":1}}],[\"原因是锁的时序问题具体看资料图\",{\"1\":{\"108\":1}}],[\"原因是我在chrome\",{\"1\":{\"76\":1}}],[\"原因\",{\"1\":{\"87\":1,\"132\":1,\"353\":1,\"644\":1,\"646\":1,\"671\":4,\"688\":1,\"858\":1,\"938\":1,\"987\":1,\"988\":1,\"1010\":1}}],[\"原理先行\",{\"1\":{\"891\":1}}],[\"原理面试前整\",{\"1\":{\"870\":1}}],[\"原理采用到了\",{\"1\":{\"380\":1}}],[\"原理伪装成mysql的一个从服务器\",{\"1\":{\"119\":1}}],[\"原理是什么\",{\"0\":{\"114\":1}}],[\"原理\",{\"0\":{\"195\":1},\"1\":{\"58\":1,\"140\":1,\"619\":1,\"866\":1}}],[\"原文链接\",{\"1\":{\"47\":1,\"302\":2,\"378\":1,\"494\":1,\"722\":1,\"724\":1,\"739\":1,\"740\":1,\"779\":1,\"911\":1}}],[\"转行等\",{\"1\":{\"1123\":1}}],[\"转账者和收款人的总额应该是不变的\",{\"1\":{\"962\":1}}],[\"转账过程具体到程序里会有一系列的操作\",{\"1\":{\"904\":1}}],[\"转发到哪个地址\",{\"1\":{\"810\":1}}],[\"转发会丢失这个\",{\"1\":{\"47\":1}}],[\"转化为红黑树\",{\"1\":{\"703\":1}}],[\"转圈圈\",{\"1\":{\"689\":1}}],[\"转为对应java对象\",{\"1\":{\"502\":1}}],[\"转念一想\",{\"1\":{\"482\":1}}],[\"转换流\",{\"1\":{\"688\":1}}],[\"转换为字节码文件一探究竟\",{\"1\":{\"290\":1}}],[\"转换会按照这个规则\",{\"1\":{\"247\":1}}],[\"转\",{\"1\":{\"105\":1}}],[\"转成\",{\"1\":{\"92\":1,\"253\":1}}],[\"转成可打印的字符\",{\"1\":{\"58\":1}}],[\"字数统计等等功能\",{\"1\":{\"1161\":1}}],[\"字典文件\",{\"1\":{\"802\":1}}],[\"字面量不止在字符串常量池中有\",{\"1\":{\"723\":1}}],[\"字面量\",{\"1\":{\"723\":1}}],[\"字体文件\",{\"1\":{\"706\":1}}],[\"字节啊\",{\"1\":{\"1092\":1}}],[\"字节流\",{\"1\":{\"688\":1}}],[\"字节码验证\",{\"1\":{\"679\":1}}],[\"字节码可以来自文件\",{\"1\":{\"679\":1}}],[\"字节码\",{\"1\":{\"658\":1}}],[\"字节码三步\",{\"0\":{\"644\":1}}],[\"字节代表数据包的大小\",{\"1\":{\"76\":1}}],[\"字符集\",{\"1\":{\"688\":1}}],[\"字符流处理文本\",{\"1\":{\"688\":1}}],[\"字符流\",{\"1\":{\"688\":1}}],[\"字符型\",{\"1\":{\"686\":1}}],[\"字符\",{\"1\":{\"685\":1}}],[\"字符编码characterencodingfilter\",{\"1\":{\"480\":1}}],[\"字符编码过滤器\",{\"1\":{\"459\":1}}],[\"字符串匹配指定字串\",{\"0\":{\"959\":1}}],[\"字符串常量池就已经移到了堆中\",{\"1\":{\"724\":1}}],[\"字符串常量池中并没有驻留一个内容等于\",{\"1\":{\"724\":1}}],[\"字符串常量池中已经存在内容等于\",{\"1\":{\"723\":1}}],[\"字符串常量池是全局共享的\",{\"1\":{\"723\":1}}],[\"字符串常量池以及堆栈的结构如下图所示\",{\"1\":{\"722\":1}}],[\"字符串常量池stringtable的本质是一张hashtable\",{\"1\":{\"722\":1}}],[\"字符串常量池\",{\"1\":{\"722\":1}}],[\"字符串的值\",{\"1\":{\"721\":1}}],[\"字符串格式\",{\"1\":{\"688\":1}}],[\"字符串截取\",{\"1\":{\"430\":1}}],[\"字符串转换为\",{\"1\":{\"105\":1}}],[\"字符串中需要转义的特殊字符\",{\"1\":{\"61\":1}}],[\"字符串\",{\"1\":{\"58\":1,\"1081\":2}}],[\"字段来拆分\",{\"1\":{\"961\":1}}],[\"字段来了解客户端的连接偏好\",{\"1\":{\"48\":1}}],[\"字段相等时\",{\"1\":{\"959\":1}}],[\"字段相等\",{\"1\":{\"959\":1}}],[\"字段的值相同\",{\"1\":{\"959\":1}}],[\"字段的类型为\",{\"1\":{\"156\":1}}],[\"字段名\",{\"0\":{\"946\":1}}],[\"字段名=新值\",{\"1\":{\"938\":1}}],[\"字段过滤成\",{\"0\":{\"939\":1}}],[\"字段大的\",{\"1\":{\"923\":1}}],[\"字段中的数据一般只显示\",{\"1\":{\"920\":1}}],[\"字段没有索引\",{\"1\":{\"897\":1}}],[\"字段信息\",{\"1\":{\"722\":1}}],[\"字段或方法在内存中的实际数据\",{\"1\":{\"679\":1}}],[\"字段或方法的名称和类型等信息\",{\"1\":{\"679\":1}}],[\"字段或方法的名称和描述符等\",{\"1\":{\"679\":1}}],[\"字段和方法的符号引用转换为直接引用\",{\"1\":{\"679\":1}}],[\"字段加1\",{\"1\":{\"900\":1}}],[\"字段加\",{\"1\":{\"240\":1,\"900\":1}}],[\"字段是比\",{\"1\":{\"923\":1}}],[\"字段是\",{\"1\":{\"156\":1}}],[\"字段\",{\"1\":{\"156\":1,\"241\":1,\"252\":1,\"265\":1,\"901\":1,\"956\":1}}],[\"字段使用了线程封闭设计模式\",{\"1\":{\"156\":1}}],[\"音频文件\",{\"1\":{\"706\":1,\"1084\":1}}],[\"音频\",{\"1\":{\"58\":1}}],[\"能和所有设备无缝衔接\",{\"1\":{\"1164\":1}}],[\"能指定版本是因为ubuntu里全装了\",{\"1\":{\"994\":1}}],[\"能不能从设计上优化这个问题呢\",{\"1\":{\"932\":1}}],[\"能力\",{\"1\":{\"900\":1,\"902\":1}}],[\"能力的\",{\"1\":{\"900\":1}}],[\"能说一下i\",{\"1\":{\"849\":1}}],[\"能解答一切的答案\",{\"1\":{\"740\":1}}],[\"能的话就放\",{\"1\":{\"703\":1}}],[\"能否沉下心来去学习\",{\"1\":{\"1139\":1}}],[\"能否执行\",{\"1\":{\"609\":1}}],[\"能否拖拽的实现思路是自己简单一个\",{\"1\":{\"234\":1}}],[\"能干嘛\",{\"1\":{\"594\":1}}],[\"能干什么\",{\"1\":{\"101\":1}}],[\"能拿到\",{\"1\":{\"512\":1}}],[\"能快速创建出生产级别的spring应用\",{\"1\":{\"473\":1}}],[\"能支持springmvc更高级的一些功能\",{\"1\":{\"460\":1}}],[\"能简单且高效地构造出应用广泛的大量的同步器\",{\"1\":{\"378\":1}}],[\"能提升系统的性能和吞吐量\",{\"1\":{\"372\":1}}],[\"能传接口就传接口\",{\"1\":{\"359\":1}}],[\"能实现\",{\"1\":{\"352\":1}}],[\"能共存\",{\"1\":{\"326\":1}}],[\"能够看到所有已经提交的事务结果\",{\"1\":{\"935\":1}}],[\"能够有信息可以直接拿到它\",{\"1\":{\"935\":1}}],[\"能够帮助你对\",{\"1\":{\"934\":1}}],[\"能够后台监控主机是否故障\",{\"1\":{\"865\":1}}],[\"能够提高运算效率\",{\"1\":{\"739\":1}}],[\"能够使\",{\"1\":{\"721\":1}}],[\"能够保证指向该数组地址的引用不能修改\",{\"1\":{\"721\":1}}],[\"能够保证原子性\",{\"1\":{\"304\":1}}],[\"能够在运行时将热点代码编译成机器码\",{\"1\":{\"634\":1}}],[\"能够非常容易地获得跨平台能力\",{\"1\":{\"634\":1}}],[\"能够引用就可以了\",{\"1\":{\"559\":1}}],[\"能够发现\",{\"1\":{\"301\":1}}],[\"能保证两个\",{\"1\":{\"283\":1}}],[\"能使用\",{\"1\":{\"240\":1}}],[\"能编译到\",{\"1\":{\"107\":1}}],[\"能用就行\",{\"1\":{\"92\":1}}],[\"能想到的大概是请求带accesstoken\",{\"1\":{\"70\":1}}],[\"能帮助双方同步初始化序列号\",{\"1\":{\"57\":1}}],[\"能减少双方不必要的资源开销\",{\"1\":{\"57\":1}}],[\"建表的时候\",{\"1\":{\"892\":1}}],[\"建module\",{\"1\":{\"558\":1}}],[\"建一个异常类集中处理所有异常\",{\"1\":{\"240\":1}}],[\"建立一个远程仓库\",{\"1\":{\"987\":1}}],[\"建立一张临时的中间表\",{\"1\":{\"941\":1}}],[\"建立连接的过程通常是比较复杂的\",{\"1\":{\"893\":1}}],[\"建立连接时\",{\"1\":{\"57\":1}}],[\"建立认证服务器\",{\"1\":{\"153\":1}}],[\"建议苹果可以在新版本中修改这句让人误解的话\",{\"1\":{\"998\":1}}],[\"建议不要使用外键与级联\",{\"0\":{\"971\":1}}],[\"建议在表中定义主键或者合适的索引来支持查询操作\",{\"1\":{\"967\":1}}],[\"建议在创建表时明确指定varchar类型的长度\",{\"1\":{\"963\":1}}],[\"建议明确指定\",{\"1\":{\"959\":1}}],[\"建议使用适当的反向代理服务器\",{\"1\":{\"883\":1}}],[\"建议再优化目录\",{\"1\":{\"642\":1}}],[\"建议配合服务名\",{\"1\":{\"591\":1}}],[\"建议看这个\",{\"1\":{\"950\":1}}],[\"建议看这个例子\",{\"1\":{\"220\":1}}],[\"建议看文档\",{\"1\":{\"603\":1}}],[\"建议看代码\",{\"1\":{\"243\":1}}],[\"建议看看\",{\"1\":{\"208\":1}}],[\"建议结合自己的这篇seata笔记看\",{\"1\":{\"183\":1}}],[\"建议将用户信息存储到\",{\"1\":{\"156\":1}}],[\"建议一个公共的登陆点server\",{\"1\":{\"153\":1}}],[\"建议先来个单元测试\",{\"1\":{\"105\":1}}],[\"建议搭配食用\",{\"1\":{\"90\":1}}],[\"建议检查网络配置\",{\"1\":{\"76\":1}}],[\"建议\",{\"1\":{\"52\":1,\"78\":1}}],[\"滑动窗口\",{\"1\":{\"56\":1}}],[\"发个\",{\"1\":{\"1103\":1}}],[\"发起死锁检测\",{\"1\":{\"932\":1}}],[\"发起cas操作又失败了\",{\"1\":{\"312\":1}}],[\"发行版通常支持多个用户同时在线操作\",{\"1\":{\"785\":1}}],[\"发电报\",{\"1\":{\"688\":1}}],[\"发短信\",{\"1\":{\"688\":1}}],[\"发布订阅\",{\"1\":{\"823\":2,\"849\":1}}],[\"发布者\",{\"1\":{\"817\":1}}],[\"发布\",{\"1\":{\"543\":1,\"817\":1,\"1081\":1}}],[\"发布应用程序事件\",{\"1\":{\"538\":1,\"1082\":1}}],[\"发布应用程序事件等\",{\"1\":{\"538\":1,\"1082\":1}}],[\"发生冲突了\",{\"1\":{\"572\":1}}],[\"发生更改时\",{\"1\":{\"539\":1}}],[\"发生死锁的四个条件\",{\"1\":{\"377\":1}}],[\"发生传场景包含\",{\"1\":{\"46\":1}}],[\"发出xmlhttprequest请求\",{\"1\":{\"231\":1}}],[\"发送3个消息\",{\"1\":{\"842\":1}}],[\"发送消息时同时将消息持久化到mq中并插入db\",{\"1\":{\"846\":1}}],[\"发送消息触发confirmcallback回调\",{\"1\":{\"836\":2}}],[\"发送消息到主题\",{\"1\":{\"817\":1}}],[\"发送者\",{\"1\":{\"817\":1}}],[\"发送端确认\",{\"0\":{\"833\":1}}],[\"发送端确认+消费端确认\",{\"1\":{\"832\":1}}],[\"发送端\",{\"1\":{\"688\":1}}],[\"发送请求进行执行\",{\"1\":{\"580\":1}}],[\"发送\",{\"1\":{\"158\":1}}],[\"发送认证请求\",{\"1\":{\"153\":1}}],[\"发送给客户端\",{\"1\":{\"152\":1}}],[\"发送验证码\",{\"1\":{\"128\":1}}],[\"发送一个请求直接跳转到一个页面\",{\"1\":{\"97\":1}}],[\"发送方根据确认应答确定是否需要重传丢失的数据包\",{\"1\":{\"56\":1}}],[\"发请求是得益于\",{\"1\":{\"92\":1}}],[\"发现不能\",{\"1\":{\"1160\":1}}],[\"发现早就有人学会了\",{\"1\":{\"1140\":1}}],[\"发现工具类中\",{\"1\":{\"1082\":1}}],[\"发现有一列明明不一样还高亮\",{\"1\":{\"1051\":1}}],[\"发现把tomcat9\",{\"1\":{\"1041\":1}}],[\"发现把里面的\",{\"1\":{\"60\":1}}],[\"发现\",{\"1\":{\"1017\":1,\"1022\":1,\"1041\":1}}],[\"发现一个不错的软件\",{\"1\":{\"996\":1}}],[\"发现一开始我就错了\",{\"1\":{\"125\":1}}],[\"发现只有最外层包有用\",{\"1\":{\"959\":1}}],[\"发现函数的下标都是从\",{\"0\":{\"958\":1}}],[\"发现死锁后\",{\"1\":{\"932\":1}}],[\"发现没有\",{\"1\":{\"905\":1}}],[\"发现了一个bug\",{\"1\":{\"889\":1}}],[\"发现使用\",{\"1\":{\"884\":1}}],[\"发现还是按照预期来了的\",{\"1\":{\"876\":1}}],[\"发现计算后插槽范围在6380中\",{\"1\":{\"865\":1}}],[\"发现字符串常量池中已经驻留这个字符串\",{\"1\":{\"724\":1}}],[\"发现这一列高亮的在其他列也有这个值\",{\"1\":{\"1051\":1}}],[\"发现这两个刚好匹配上了\",{\"1\":{\"688\":1}}],[\"发现这条语句有异常\",{\"1\":{\"686\":1}}],[\"发现这道题完全没头绪\",{\"1\":{\"660\":1}}],[\"发现它只有一个构造函数和一个\",{\"1\":{\"660\":1}}],[\"发现子\",{\"1\":{\"556\":1}}],[\"发现post请求的话只能用这个来拿参数\",{\"0\":{\"512\":1}}],[\"发现下面这些不写的话\",{\"1\":{\"422\":1}}],[\"发现被占用的是重量级锁直接将自己挂起\",{\"1\":{\"379\":1}}],[\"发现instance不为空\",{\"1\":{\"301\":1}}],[\"发现input有个\",{\"1\":{\"61\":1}}],[\"发现上面说的并不是这么回事\",{\"1\":{\"157\":1}}],[\"发现会有死锁问题\",{\"1\":{\"110\":1}}],[\"计组原\",{\"0\":{\"1087\":1}}],[\"计数器\",{\"1\":{\"334\":1}}],[\"计数器了\",{\"1\":{\"334\":1}}],[\"计数器倒计数为0就执行\",{\"1\":{\"331\":1}}],[\"计算md5值\",{\"1\":{\"1084\":1}}],[\"计算md5放入redis的set\",{\"1\":{\"172\":1}}],[\"计算出\",{\"1\":{\"935\":1}}],[\"计算出来的\",{\"1\":{\"935\":1}}],[\"计算插槽时按这个组名来\",{\"1\":{\"865\":1}}],[\"计算1\",{\"1\":{\"689\":1}}],[\"计算机网络\",{\"1\":{\"1150\":1}}],[\"计算机专业的每天看剧打游戏\",{\"1\":{\"1141\":1}}],[\"计算机也不是学校很好的专业\",{\"1\":{\"1140\":1}}],[\"计算机结构分为5大部分\",{\"1\":{\"709\":1}}],[\"计算机底层都以补码的方式来存储数据\",{\"1\":{\"685\":1}}],[\"计算机在执行程序时\",{\"1\":{\"292\":1}}],[\"计算机名称\",{\"1\":{\"76\":1}}],[\"计算机名称和用户名称不冲突\",{\"1\":{\"76\":1}}],[\"计算属性\",{\"1\":{\"220\":1}}],[\"计时功能可以使用js的timing计时时间\",{\"1\":{\"128\":1}}],[\"计网面试题\",{\"0\":{\"55\":1}}],[\"计划可能赶不上变化\",{\"1\":{\"1144\":1}}],[\"计划\",{\"1\":{\"21\":2}}],[\"策略又是速度极快\",{\"1\":{\"969\":1}}],[\"策略模式\",{\"1\":{\"498\":1}}],[\"策略\",{\"1\":{\"54\":1,\"76\":1}}],[\"它还提供许多非常强大的可定制的内容\",{\"1\":{\"1161\":1}}],[\"它劫持后给的域名统一是\",{\"1\":{\"1154\":1}}],[\"它带给我们方便\",{\"1\":{\"1148\":1}}],[\"它实际上是1个二进制的数字啊\",{\"1\":{\"1091\":1}}],[\"它并不进行数据压缩\",{\"1\":{\"1081\":1}}],[\"它默认会保持替换的文本与原始文本的大小写一致\",{\"0\":{\"1046\":1}}],[\"它表示当前批处理文件所在的目录的完整路径\",{\"1\":{\"1041\":1}}],[\"它位于maven安装目录下的conf文件夹中\",{\"1\":{\"1014\":1}}],[\"它定义了项目的基本信息\",{\"1\":{\"1014\":1}}],[\"它已经针对spring\",{\"1\":{\"1012\":1}}],[\"它已经获取了方法\",{\"1\":{\"321\":1}}],[\"它告诉maven在编译和打包项目时不需要将这个依赖包含进来\",{\"1\":{\"1012\":1}}],[\"它代表着你期望该依赖在运行时环境中被提供\",{\"1\":{\"1012\":1}}],[\"它代表的是在该二维数组中有多少个一维数组\",{\"1\":{\"666\":1}}],[\"它自带了\",{\"1\":{\"1010\":1}}],[\"它自己还是要认的\",{\"1\":{\"935\":1}}],[\"它结合了\",{\"1\":{\"990\":1}}],[\"它对数据库中数据的改变是持久的\",{\"1\":{\"962\":1}}],[\"它对这些类封装成了分布式可用的\",{\"1\":{\"108\":1,\"112\":1}}],[\"它与任何具体的值进行拼接都无法确定其结果\",{\"1\":{\"959\":1}}],[\"它接受多个参数\",{\"1\":{\"959\":1}}],[\"它执行时返回检索到的行数的计数\",{\"1\":{\"956\":1}}],[\"它没有物理结构\",{\"1\":{\"934\":1}}],[\"它读到的值又是什么呢\",{\"1\":{\"934\":1}}],[\"它又不能这么超然了\",{\"1\":{\"934\":1}}],[\"它做的变更才会被其他事务看到\",{\"1\":{\"905\":1}}],[\"它做的变更就能被别的事务看到\",{\"1\":{\"905\":1}}],[\"它影响了这个数据库系统的哪个指标\",{\"1\":{\"902\":1}}],[\"它主要做的是\",{\"1\":{\"900\":1}}],[\"它主要关注于sql映射和数据库操作的框架\",{\"1\":{\"393\":1}}],[\"它扫描了9万多行数据\",{\"1\":{\"897\":1}}],[\"它也占据了我们大量的时间\",{\"1\":{\"1148\":1}}],[\"它也会在小问题发展成重大灾难之前及早地发现它们\",{\"1\":{\"994\":1}}],[\"它也是自增的\",{\"1\":{\"972\":1}}],[\"它也是一个int类型\",{\"1\":{\"671\":1}}],[\"它也要把字符串\",{\"1\":{\"895\":1}}],[\"它从\",{\"1\":{\"892\":1}}],[\"它由消息头和消息体组成\",{\"1\":{\"823\":1}}],[\"它由id\",{\"1\":{\"590\":1}}],[\"它允许我们以更紧凑的方式编写匿名函数\",{\"1\":{\"741\":1}}],[\"它允许浏览器向跨源服务器\",{\"1\":{\"231\":1}}],[\"它需要读取并解析\",{\"1\":{\"722\":1}}],[\"它需要以\",{\"1\":{\"547\":1}}],[\"它极大地简化并优化了\",{\"1\":{\"713\":1}}],[\"它支持一次查询多个系统调用的可用状态\",{\"1\":{\"712\":1}}],[\"它支持面向缓冲的\",{\"1\":{\"712\":1}}],[\"它具有特定的语法和结构\",{\"1\":{\"706\":1}}],[\"它具有更好的性能\",{\"1\":{\"677\":1}}],[\"它为多态的一种表现形式\",{\"1\":{\"697\":1}}],[\"它包含了许多功能和类库\",{\"1\":{\"1012\":1}}],[\"它包含当前正在执行的指令的地址\",{\"1\":{\"664\":1}}],[\"它包括左外连接\",{\"1\":{\"964\":1}}],[\"它包的这个方法\",{\"1\":{\"299\":1}}],[\"它随时可能会被回收\",{\"1\":{\"660\":1}}],[\"它就会默认帮你截取当前窗口\",{\"0\":{\"1037\":1}}],[\"它就会一直存在于内存中\",{\"1\":{\"660\":1}}],[\"它就需要往叶子结点的中间找\",{\"1\":{\"972\":1}}],[\"它就是找引擎拿到了两条记录\",{\"1\":{\"922\":1}}],[\"它就神奇地出现了\",{\"1\":{\"905\":1}}],[\"它就可以继承动物抽象类吗\",{\"1\":{\"657\":1}}],[\"它就像是一种魔法\",{\"1\":{\"639\":1}}],[\"它到底是解决什么问题\",{\"1\":{\"640\":1}}],[\"它被频繁问到\",{\"1\":{\"637\":1}}],[\"它同样是很多缓存实现的选择\",{\"1\":{\"636\":1}}],[\"它通常以\",{\"1\":{\"548\":1}}],[\"它通过消除数据中的冗余和重复信息来减小数据的大小\",{\"1\":{\"1081\":1}}],[\"它通过生成目标对象的子类来实现对方法的拦截和增强\",{\"1\":{\"182\":1}}],[\"它通过运行时生成代理对象的方式来实现对目标对象方法的拦截和增强\",{\"1\":{\"182\":1}}],[\"它只有在队列层面才是保证有序\",{\"1\":{\"824\":1}}],[\"它只会让当前线程等待被调用的线程执行完毕\",{\"1\":{\"650\":1}}],[\"它只会让当前线程从运行状态转变为就绪状态\",{\"1\":{\"650\":1}}],[\"它只会用唯一的工作线程来执行任务\",{\"1\":{\"365\":1}}],[\"它只包含当前\",{\"1\":{\"543\":1}}],[\"它在模板运行期会重写资源链接\",{\"1\":{\"539\":1}}],[\"它必须实现接口中的\",{\"1\":{\"538\":1,\"1082\":1}}],[\"它将默认使用\",{\"1\":{\"522\":1}}],[\"它将自动读取该环境变量的值\",{\"1\":{\"522\":1}}],[\"它将映射到路径\",{\"1\":{\"60\":1}}],[\"它不会自动传递给这些模块\",{\"1\":{\"1010\":1}}],[\"它不会导致丢失请求头的情况\",{\"1\":{\"581\":1}}],[\"它不是null\",{\"1\":{\"959\":1}}],[\"它不支持使用\",{\"1\":{\"743\":1,\"1101\":1}}],[\"它不仅会处理异常\",{\"1\":{\"520\":1}}],[\"它不需要在服务端去保留用户的认证信息或者会话信息\",{\"1\":{\"54\":1}}],[\"它用于管理和跟踪数据库结构的变化\",{\"1\":{\"1079\":1}}],[\"它用于将流中的每个元素映射为一个流\",{\"1\":{\"775\":1}}],[\"它用于将请求映射到文件系统中的不同位置\",{\"1\":{\"73\":1}}],[\"它用于指定在对象创建完成后需要立即执行的方法\",{\"1\":{\"501\":1}}],[\"它比\",{\"1\":{\"494\":1}}],[\"它都帮你考虑好了\",{\"1\":{\"451\":1}}],[\"它都封装成了\",{\"1\":{\"268\":1}}],[\"它首先不会自己去尝试加载这个类\",{\"1\":{\"382\":1}}],[\"它要求做的事情是\",{\"1\":{\"337\":1}}],[\"它的原理也是通过中间表\",{\"1\":{\"976\":1}}],[\"它的低水位是\",{\"1\":{\"935\":1}}],[\"它的关键点就是先写日志\",{\"1\":{\"899\":1}}],[\"它的key和value的序列化方式默认就是string方式\",{\"1\":{\"875\":1}}],[\"它的传递性也会被取消\",{\"1\":{\"871\":1,\"1010\":2}}],[\"它的运行结果应该是什么\",{\"1\":{\"723\":1}}],[\"它的下一个指针指向元素\",{\"1\":{\"694\":3}}],[\"它的实现类\",{\"1\":{\"620\":1}}],[\"它的作用是将多个流扁平化为一个流\",{\"1\":{\"775\":1}}],[\"它的作用仅仅是为了重新打包生成一个\",{\"1\":{\"559\":1}}],[\"它的作用有两个\",{\"1\":{\"296\":1}}],[\"它的不同实现类\",{\"1\":{\"498\":1}}],[\"它的两个常用方法分别是await\",{\"1\":{\"352\":1}}],[\"它的功能是判断内存某个位置的值是否为预期值\",{\"1\":{\"302\":1}}],[\"它的值就不能被改变\",{\"1\":{\"125\":1}}],[\"它描述的是一组规则或规范通过规范定制了程序中各个变量\",{\"1\":{\"284\":1}}],[\"它本身是和\",{\"1\":{\"283\":1}}],[\"它分为三个阶段\",{\"1\":{\"183\":1,\"186\":1}}],[\"它无法代理目标对象中的非\",{\"1\":{\"182\":1}}],[\"它有什么优势\",{\"1\":{\"157\":1}}],[\"它们已经存在于运行时环境中\",{\"1\":{\"1012\":1}}],[\"它们之间的主要区别在于合并后代码库的提交历史记录以及合并冲突的处理方式\",{\"1\":{\"990\":1}}],[\"它们仍然会按照相同的顺序获取锁\",{\"1\":{\"933\":1}}],[\"它们都可以用于创建\",{\"1\":{\"1041\":1}}],[\"它们都是不断迭代\",{\"1\":{\"916\":1}}],[\"它们都无法代理非public方法\",{\"1\":{\"182\":1}}],[\"它们分别是哈希表\",{\"1\":{\"913\":1}}],[\"它们正是我们今天要讨论的主角\",{\"1\":{\"898\":1}}],[\"它们通常限制了同时登录的用户数\",{\"1\":{\"785\":1}}],[\"它们同时在对同一个桶的链表进行操作\",{\"1\":{\"694\":1}}],[\"它们可以选择重写默认方法以提供自定义的实现\",{\"1\":{\"686\":1}}],[\"它们绝大部分都不是线程安全的\",{\"1\":{\"640\":1}}],[\"它们的作用类似\",{\"1\":{\"1037\":1}}],[\"它们的作用域仅限于当前请求的处理过程中\",{\"1\":{\"632\":1}}],[\"它们的选择取决于具体的需求和情况\",{\"1\":{\"990\":1}}],[\"它们的区别在于\",{\"1\":{\"482\":1}}],[\"它们不会被本地配置覆盖\",{\"1\":{\"593\":1}}],[\"它们不能直接相互替代\",{\"1\":{\"78\":1}}],[\"它们将以这个根目录为基准\",{\"1\":{\"537\":1}}],[\"它们看到的值是不同的\",{\"1\":{\"156\":1}}],[\"它们也提供了单点登录功能\",{\"1\":{\"153\":1}}],[\"它提供了更高级的功能和易用性的接口\",{\"1\":{\"1084\":1}}],[\"它提供了更方便和最简单的方式来使用\",{\"1\":{\"112\":1}}],[\"它提供了一种简单的方式来跟踪代码块的执行时间\",{\"1\":{\"1081\":1}}],[\"它提供了一种在内存中压缩数据的方式\",{\"1\":{\"1081\":1}}],[\"它提供了一系列的分布式java对象\",{\"1\":{\"112\":1}}],[\"它提供了快速的读写操作和灵活的键值操作\",{\"1\":{\"849\":1}}],[\"它提供了\",{\"1\":{\"641\":1}}],[\"它是按照从右向左的顺序依次切换\",{\"1\":{\"1036\":1}}],[\"它是个6字节的隐藏列\",{\"1\":{\"972\":1}}],[\"它是被\",{\"1\":{\"935\":1}}],[\"它是在事务开始的时候向\",{\"1\":{\"935\":1}}],[\"它是消息的容器\",{\"1\":{\"823\":1}}],[\"它是异步\",{\"1\":{\"713\":1}}],[\"它是服务注册中心\",{\"1\":{\"564\":1}}],[\"它是把相同应用复制到不同服务器上\",{\"1\":{\"553\":1}}],[\"它是属于\",{\"1\":{\"261\":1,\"466\":1}}],[\"它是由浏览器的同源策略造成的\",{\"1\":{\"230\":1}}],[\"它是\",{\"1\":{\"156\":1,\"302\":1}}],[\"它是一个用查询语句定义的虚拟表\",{\"1\":{\"934\":1}}],[\"它是一个复合注解真正去实现自动装配的注解是\",{\"1\":{\"731\":1}}],[\"它是一个int类型\",{\"1\":{\"671\":1}}],[\"它是一个环\",{\"1\":{\"648\":1}}],[\"它是一个代理机制\",{\"1\":{\"640\":1}}],[\"它是一个读写融为一体的锁\",{\"1\":{\"326\":1}}],[\"它是一个独立的微服务应用\",{\"1\":{\"591\":1}}],[\"它是一个独立的\",{\"1\":{\"182\":1}}],[\"它是一个\",{\"1\":{\"156\":1,\"321\":1}}],[\"它是一个很长的字符串\",{\"1\":{\"70\":1}}],[\"它是底层基于redis实现了一系列的工具\",{\"1\":{\"112\":1}}],[\"它使用\",{\"1\":{\"1081\":1}}],[\"它使用了\",{\"1\":{\"712\":1}}],[\"它使用netty进行网络通信\",{\"1\":{\"107\":1}}],[\"它使web上的状态编程变为可能\",{\"1\":{\"49\":1}}],[\"它可以帮助你将原本必须由开发人员手动完成的事情自动化\",{\"1\":{\"994\":1}}],[\"它可以在线修改表结\",{\"1\":{\"976\":1}}],[\"它可以在后续的查询中像表一样引用\",{\"1\":{\"959\":1}}],[\"它可以在这个高频请求上用到覆盖索引\",{\"1\":{\"922\":1}}],[\"它可以解决读写冲突的问题\",{\"1\":{\"906\":1}}],[\"它可以用来进行条件判断\",{\"1\":{\"748\":1}}],[\"它可以用来对数据进行转换\",{\"1\":{\"748\":1}}],[\"它可以用来对数据进行消费\",{\"1\":{\"748\":1}}],[\"它可以用来创建和返回对象\",{\"1\":{\"748\":1}}],[\"它可以快速地储存\",{\"1\":{\"262\":1}}],[\"它可以为每个线程维护一个独立的变量副本\",{\"1\":{\"156\":1}}],[\"它可以扩展\",{\"1\":{\"103\":1}}],[\"它可能会对网络性能和用户体验产生负面影响\",{\"1\":{\"77\":1}}],[\"它可能无法正确路由icmp数据包到目标主机\",{\"1\":{\"76\":1}}],[\"它会自动检测和加载所需的依赖项\",{\"1\":{\"1012\":1}}],[\"它会自动重传该数据包\",{\"1\":{\"56\":1}}],[\"它会从指定日期值中获取月份值\",{\"1\":{\"951\":1}}],[\"它会将链表的头部指针指向自己插入的元素\",{\"1\":{\"694\":1}}],[\"它会将icmp消息封装在ip数据包中\",{\"1\":{\"76\":1}}],[\"它会根据id去判断密码的加密方式\",{\"1\":{\"625\":1}}],[\"它会扫描指定的包及其子包中的所有类\",{\"1\":{\"482\":1}}],[\"它应该保存在请求头里\",{\"1\":{\"54\":1}}],[\"把四级pdf卷子放上加上欧陆词典简直不要太方便\",{\"1\":{\"1164\":1}}],[\"把问题解决\",{\"1\":{\"1150\":1}}],[\"把手机静音\",{\"1\":{\"1148\":1}}],[\"把面试官往你的项目\",{\"1\":{\"1134\":1}}],[\"把多个标记分在同一组并创建一个捕获分组\",{\"1\":{\"1019\":1}}],[\"把所有\",{\"1\":{\"1005\":1}}],[\"把所有字符串转成二进制然后每6位一个转成base64\",{\"1\":{\"58\":1}}],[\"把老电脑的\",{\"1\":{\"1005\":1}}],[\"把刚才那条规则的\",{\"1\":{\"1005\":1}}],[\"把自己的一套使用环境搭起来也蛮快\",{\"1\":{\"1160\":1}}],[\"把自己目录做好的\",{\"1\":{\"998\":1}}],[\"把自己总结的\",{\"1\":{\"642\":1}}],[\"把一些重要的数据在表中做冗余\",{\"1\":{\"970\":1}}],[\"把重复的用delete\",{\"1\":{\"942\":1}}],[\"把值放在数组里\",{\"1\":{\"914\":1}}],[\"把粉板中的一部分赊账记录更新到账本中\",{\"1\":{\"899\":1}}],[\"把字符串\",{\"1\":{\"895\":1}}],[\"把数据按顺序插入\",{\"1\":{\"919\":1}}],[\"把数据经过某种hash算法\",{\"1\":{\"866\":1}}],[\"把数据直接写成形参\",{\"1\":{\"689\":1}}],[\"把命令放队列中\",{\"1\":{\"854\":1}}],[\"把公钥加到git\",{\"1\":{\"799\":1,\"985\":1}}],[\"把对象从数据源拿到内存\",{\"1\":{\"688\":1}}],[\"把对象存到数据源\",{\"1\":{\"688\":1}}],[\"把资源释放或状态还原的代码放到finally块中\",{\"1\":{\"686\":1}}],[\"把token校验过滤器添加到过滤器链中\",{\"1\":{\"627\":1}}],[\"把精力放到主要矛盾上面\",{\"1\":{\"601\":1}}],[\"把流量作为切入点\",{\"1\":{\"594\":1}}],[\"把图片放大看\",{\"1\":{\"554\":1}}],[\"把单一应用程序划分成一组小的服务\",{\"1\":{\"553\":1}}],[\"把请求参数传递给\",{\"1\":{\"543\":1}}],[\"把last\",{\"1\":{\"429\":2}}],[\"把累加后的值写回主内存\",{\"1\":{\"290\":1}}],[\"把知识点穿插写到你的其他项目里就行了\",{\"1\":{\"261\":1}}],[\"把每种不同对象按照功能进行了不同的划分\",{\"1\":{\"250\":1}}],[\"把\",{\"1\":{\"227\":1,\"489\":2,\"686\":1,\"694\":1,\"706\":1,\"797\":1,\"899\":1,\"901\":1,\"908\":2,\"934\":1,\"981\":1,\"983\":1,\"1005\":2,\"1006\":4}}],[\"把正常的业务代码按照框架要求拆成z和三部分就行\",{\"1\":{\"183\":1,\"607\":1}}],[\"把购物车临时用户\",{\"1\":{\"156\":1}}],[\"把session放到redis中\",{\"1\":{\"145\":1}}],[\"把session数据放在redis中\",{\"1\":{\"52\":1}}],[\"把盐交给\",{\"0\":{\"133\":1}}],[\"把这个值加上\",{\"1\":{\"900\":1}}],[\"把这个删了就行\",{\"1\":{\"61\":1}}],[\"把这次赊的账加上去或者扣除掉\",{\"1\":{\"899\":1}}],[\"把这些标签组合起来搜\",{\"1\":{\"126\":1}}],[\"把写的dsl语句转成java执行\",{\"1\":{\"126\":1}}],[\"把redis\",{\"1\":{\"108\":1}}],[\"把判断和更新等语句合成一个语句\",{\"0\":{\"81\":1}}],[\"把旧表的结构完全复制过去\",{\"1\":{\"976\":1}}],[\"把旧\",{\"1\":{\"70\":1}}],[\"把过期时间存入本地缓存中然后在axios拦截器里\",{\"1\":{\"70\":1}}],[\"把连接它的客户端ip\",{\"1\":{\"46\":1}}],[\"相信不少小伙伴在面试中都遇到过这道经典面试题\",{\"1\":{\"722\":1}}],[\"相信你会得到答案\",{\"1\":{\"712\":1}}],[\"相等\",{\"1\":{\"691\":1}}],[\"相等就舍弃此元素不存\",{\"0\":{\"691\":1}}],[\"相比之下\",{\"1\":{\"899\":1}}],[\"相比run\",{\"1\":{\"687\":1}}],[\"相比与另外一个安全框架shiro\",{\"1\":{\"615\":1}}],[\"相比于同步阻塞\",{\"1\":{\"712\":1}}],[\"相比于\",{\"1\":{\"494\":1}}],[\"相互发消息\",{\"1\":{\"612\":1}}],[\"相互配合\",{\"1\":{\"553\":1}}],[\"相同内容的字符串对象\",{\"1\":{\"723\":1}}],[\"相同为0\",{\"1\":{\"706\":1}}],[\"相同点\",{\"1\":{\"603\":1}}],[\"相同的类文件被不同的类加载器加载产生的是两个不同的类\",{\"1\":{\"382\":1}}],[\"相对于mysql来\",{\"1\":{\"849\":1}}],[\"相对于其他消息的优先权\",{\"1\":{\"823\":1}}],[\"相对于\",{\"1\":{\"739\":1}}],[\"相对于runnable的优势\",{\"1\":{\"687\":1}}],[\"相对\",{\"1\":{\"570\":1,\"722\":1}}],[\"相对的还有lite即false模式\",{\"1\":{\"517\":1}}],[\"相对的手动写代码开事务关事务\",{\"1\":{\"497\":1}}],[\"相对来说更简单\",{\"1\":{\"494\":1}}],[\"相对上面可以\",{\"0\":{\"374\":1}}],[\"相关书籍\",{\"1\":{\"1145\":1}}],[\"相关阅读\",{\"1\":{\"972\":1}}],[\"相关函数\",{\"1\":{\"950\":1}}],[\"相关库的依赖非常让人头疼\",{\"1\":{\"726\":1}}],[\"相关\",{\"1\":{\"490\":1,\"705\":1}}],[\"相关的配\",{\"1\":{\"597\":1}}],[\"相关的都是2\",{\"1\":{\"556\":1}}],[\"相关的\",{\"1\":{\"381\":1,\"713\":1,\"1005\":3}}],[\"相关的知识点\",{\"1\":{\"381\":1}}],[\"相关信息\",{\"1\":{\"10\":1}}],[\"相当于清空仓库把本地的再给push上\",{\"1\":{\"987\":1}}],[\"相当于一个代理帮你去请求了8080的后端服务\",{\"1\":{\"883\":1}}],[\"相当于字符串拼接\",{\"1\":{\"878\":1}}],[\"相当于重载拿不同的实体对象\",{\"1\":{\"831\":1}}],[\"相当于当前主机和你的账号做了一个关联\",{\"1\":{\"798\":1,\"984\":1}}],[\"相当于对真实对象进行封装\",{\"1\":{\"688\":1}}],[\"相当于将某个字节码文件\",{\"1\":{\"688\":1}}],[\"相当于管道外面再包一层\",{\"1\":{\"688\":1}}],[\"相当于把接口里的getperson\",{\"1\":{\"763\":1}}],[\"相当于把编译时的可能出现的异常\",{\"1\":{\"686\":1}}],[\"相当于把使用\",{\"1\":{\"507\":1}}],[\"相当于调用valueof\",{\"1\":{\"686\":1}}],[\"相当于只是在认证的基础上\",{\"1\":{\"628\":1}}],[\"相当于登陆接口只会一次查库\",{\"1\":{\"627\":1}}],[\"相当于网站上的关于我\",{\"1\":{\"568\":1}}],[\"相当于给httpclient\",{\"1\":{\"560\":1}}],[\"相当于这些功能就有了\",{\"1\":{\"485\":1}}],[\"相当于之前的wait\",{\"1\":{\"352\":1}}],[\"相当于后端的\",{\"1\":{\"222\":1}}],[\"相当于\",{\"1\":{\"215\":1,\"219\":1,\"222\":1,\"681\":1}}],[\"相当于部署到了一台隔离的虚拟的\",{\"1\":{\"210\":1}}],[\"相当于3pc的手动版\",{\"1\":{\"183\":1,\"607\":1}}],[\"相当于this\",{\"1\":{\"179\":1,\"182\":1}}],[\"相当于jdk留的后门\",{\"1\":{\"89\":1,\"304\":1}}],[\"相反\",{\"1\":{\"76\":1}}],[\"相差不足20分钟\",{\"1\":{\"67\":1}}],[\"相应的限制了负载均衡器的能力\",{\"1\":{\"52\":1}}],[\"因\",{\"1\":{\"976\":1}}],[\"因count++是先返回count的本身值再自加1的\",{\"1\":{\"670\":1}}],[\"因而分布式系统实现中\",{\"1\":{\"572\":1}}],[\"因调用await方法被阻塞的线程会被唤醒\",{\"1\":{\"332\":1}}],[\"因redis不保证原子性\",{\"1\":{\"87\":1}}],[\"因为学校有些地方没网\",{\"1\":{\"1164\":1}}],[\"因为学生的时间大把大把的\",{\"1\":{\"1144\":1}}],[\"因为嫌搭环境麻烦\",{\"1\":{\"1160\":1}}],[\"因为自己是一个他律的人不想呆在寝室\",{\"1\":{\"1160\":1}}],[\"因为老师会亲自演示给你看\",{\"1\":{\"1150\":1}}],[\"因为并不是所有的人都适合通过游戏来培养兴趣\",{\"1\":{\"1150\":1}}],[\"因为简书可以创建文集\",{\"1\":{\"1145\":1}}],[\"因为轻易得到的东西你是不会珍惜的\",{\"1\":{\"1144\":1}}],[\"因为受益的有且只有你自己\",{\"1\":{\"1142\":1}}],[\"因为每个人的情况不同\",{\"1\":{\"1142\":1}}],[\"因为每次测试类都需要写很多重复代理\",{\"1\":{\"402\":1}}],[\"因为每次请求nginx都会生成一个新的id\",{\"1\":{\"174\":1}}],[\"因为如果你一旦完不成\",{\"1\":{\"1142\":1}}],[\"因为已经开始找工作了\",{\"1\":{\"1140\":1}}],[\"因为已经消耗人的精力了\",{\"1\":{\"980\":1}}],[\"因为你以后很难再找到这么多你可以自由支配的时间了\",{\"1\":{\"1150\":1}}],[\"因为你已经入了这个坑了\",{\"1\":{\"1150\":1}}],[\"因为你要不断的去尝试\",{\"1\":{\"1142\":1}}],[\"因为你愿意去做它\",{\"1\":{\"1139\":1}}],[\"因为你还会碰到接下来我们要介绍的表级锁\",{\"1\":{\"927\":1}}],[\"因为相同位置的人会自我带入\",{\"1\":{\"1123\":1}}],[\"因为地址不够用啊\",{\"1\":{\"1092\":1}}],[\"因为他压根儿就没有梦想\",{\"1\":{\"1076\":1}}],[\"因为他们所拥有的锁\",{\"1\":{\"322\":1}}],[\"因为缺少了\",{\"1\":{\"1010\":1}}],[\"因为和我的\",{\"1\":{\"1005\":1}}],[\"因为本来下班到睡觉的时间都是被别人占据的时间\",{\"1\":{\"980\":1}}],[\"因为本地\",{\"1\":{\"593\":1}}],[\"因为索引文件是单独存在的文件\",{\"1\":{\"975\":1}}],[\"因为按道理\",{\"1\":{\"961\":1}}],[\"因为交集部分\",{\"1\":{\"961\":1}}],[\"因为select\",{\"1\":{\"959\":1}}],[\"因为下划线\",{\"1\":{\"959\":1}}],[\"因为下面是\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"因为数据库资源要比应用服务器资源更加珍贵\",{\"1\":{\"947\":1}}],[\"因为数据库用的\",{\"1\":{\"229\":1}}],[\"因为之后的更新\",{\"1\":{\"935\":1}}],[\"因为客户端很多\",{\"1\":{\"932\":1}}],[\"因为业务设计的时候一般不会把死锁当做一个严重错误\",{\"1\":{\"932\":1}}],[\"因为新的请求马上就来了\",{\"1\":{\"928\":1}}],[\"因为新生代的对象产生和销毁非常频繁\",{\"1\":{\"385\":1}}],[\"因为可以支持最左前缀\",{\"1\":{\"923\":1}}],[\"因为可用\",{\"1\":{\"239\":1}}],[\"因为c不能在范围之后\",{\"1\":{\"923\":1}}],[\"因为catch里如果又发生异常了又会产生一样的场景\",{\"1\":{\"686\":1}}],[\"因为树高过高\",{\"1\":{\"916\":1}}],[\"因为最开始\",{\"1\":{\"900\":1}}],[\"因为前者操作实在是太麻烦了\",{\"1\":{\"899\":1}}],[\"因为前面事务提交了没办法回滚了\",{\"1\":{\"606\":1}}],[\"因为查询缓存往往弊大于利\",{\"1\":{\"894\":1}}],[\"因为查询数据库是一段函数\",{\"1\":{\"876\":1}}],[\"因为data\",{\"1\":{\"871\":1}}],[\"因为没法计算插槽范围\",{\"1\":{\"865\":1}}],[\"因为重启后自己变成了主服务器\",{\"1\":{\"862\":1}}],[\"因为无法判断消息延迟的具体时间\",{\"1\":{\"844\":1}}],[\"因为无需调用\",{\"1\":{\"813\":1}}],[\"因为订单还处于未支付状态\",{\"1\":{\"844\":1}}],[\"因为正常逻辑订单延时队列先到\",{\"1\":{\"844\":1}}],[\"因为正数补码是本身\",{\"1\":{\"685\":1}}],[\"因为启动单元测试就相当于是启动了springboot\",{\"1\":{\"831\":1}}],[\"因为对于操作系统来说建立和销毁tcp都是非常昂贵的开销\",{\"1\":{\"823\":1}}],[\"因为对象的初始化还没有完成\",{\"1\":{\"301\":1}}],[\"因为其他都用习惯了就不改了\",{\"1\":{\"1005\":1}}],[\"因为其它mq根本没这个那么多复杂概念\",{\"1\":{\"818\":1}}],[\"因为其采用的虚拟机机制\",{\"1\":{\"558\":1}}],[\"因为一个服务器一般会有很多个服务要跑\",{\"1\":{\"810\":1}}],[\"因为一般我们的共享资源在服务外部\",{\"1\":{\"79\":1}}],[\"因为mq是惰性\",{\"1\":{\"842\":1}}],[\"因为mysql默认必须修改密码之后才能操作数据库\",{\"1\":{\"802\":1}}],[\"因为maven项目中的jar是保存在本地仓库中的\",{\"1\":{\"456\":1}}],[\"因为upupor的mysql数据库服务部署在docker容器中\",{\"1\":{\"800\":1}}],[\"因为配置的时候是把当前主机的公钥放到了你的github账号下\",{\"1\":{\"798\":1,\"984\":1}}],[\"因为是在学校里\",{\"1\":{\"1164\":1}}],[\"因为是在内部类加载和初始化时\",{\"1\":{\"779\":1}}],[\"因为是无中心化集群\",{\"1\":{\"865\":1}}],[\"因为是基于cookie来进行用户识别的\",{\"1\":{\"52\":1}}],[\"因为多个线程可以突破第一个\",{\"1\":{\"779\":1}}],[\"因为虽然这里字符串h2被final修饰\",{\"1\":{\"725\":1}}],[\"因为从\",{\"1\":{\"724\":1}}],[\"因为在\",{\"1\":{\"722\":1}}],[\"因为不会有排序的效果\",{\"1\":{\"947\":1}}],[\"因为不是有序的\",{\"1\":{\"914\":1}}],[\"因为不能使用\",{\"1\":{\"718\":1}}],[\"因为不清楚是不是还有比student小的类\",{\"1\":{\"688\":1}}],[\"因为基本类型不是\",{\"1\":{\"717\":1}}],[\"因为基本都依赖启动\",{\"1\":{\"124\":1}}],[\"因为链表头部指针\",{\"1\":{\"694\":1}}],[\"因为头插法打乱了链表的顺序\",{\"1\":{\"694\":1}}],[\"因为负无穷大\",{\"1\":{\"688\":1}}],[\"因为t只是类型\",{\"1\":{\"688\":1}}],[\"因为arraylist可以通过工具类collections的synchronizedlist转成一个线程安全的\",{\"1\":{\"688\":1}}],[\"因为abstractmap重写了tostring\",{\"1\":{\"415\":1}}],[\"因为上面都是以字面量的形式赋值tom\",{\"1\":{\"687\":1}}],[\"因为上面的代码\",{\"1\":{\"294\":1}}],[\"因为像数据库连接\",{\"1\":{\"686\":1}}],[\"因为integer作为常量时\",{\"1\":{\"686\":1}}],[\"因为2是int\",{\"1\":{\"685\":1}}],[\"因为用了修饰方法的\",{\"1\":{\"661\":1}}],[\"因为咱们这里是正在创建son对象\",{\"1\":{\"658\":1}}],[\"因为bootstrap\",{\"1\":{\"593\":1}}],[\"因为http请求头是在每个请求中明确发送的\",{\"1\":{\"581\":1}}],[\"因为需要和前台做一些交互\",{\"1\":{\"1150\":1}}],[\"因为需要\",{\"0\":{\"570\":1}}],[\"因为需要映射文件名字要和接口文件相同\",{\"1\":{\"400\":1}}],[\"因为使用注册中心管理每个服务与服务之间的一个依赖关系\",{\"1\":{\"564\":1}}],[\"因为加了上下文路径\",{\"1\":{\"546\":1}}],[\"因为加入了cpu指令\",{\"1\":{\"283\":1}}],[\"因为此时springboot已经把该类当成一个独立的测试类了\",{\"1\":{\"531\":1}}],[\"因为此命令会退出容器终端\",{\"1\":{\"212\":1}}],[\"因为测试类包名得和主启动类一致才能跑测试类\",{\"1\":{\"531\":1}}],[\"因为实现了\",{\"1\":{\"486\":1}}],[\"因为字段名是dept\",{\"1\":{\"422\":1}}],[\"因为线程\",{\"1\":{\"694\":1}}],[\"因为线程池中的线程数没有超过线程池的最大上限时\",{\"1\":{\"367\":1}}],[\"因为线程不可以直接越过高速缓存\",{\"1\":{\"305\":1}}],[\"因为有\",{\"1\":{\"1006\":1}}],[\"因为有了\",{\"1\":{\"906\":1,\"1150\":1}}],[\"因为有三种注入方式\",{\"1\":{\"488\":1}}],[\"因为有as\",{\"1\":{\"329\":1}}],[\"因为有指令重排\",{\"1\":{\"301\":1}}],[\"因为这一年你将决定是否考研\",{\"1\":{\"1150\":1}}],[\"因为这一切blockingqueue都帮你一手包办了\",{\"1\":{\"347\":1}}],[\"因为这关系到你能够够选对学习方向\",{\"1\":{\"1139\":1}}],[\"因为这样你敲\",{\"1\":{\"1005\":1}}],[\"因为这里自动拆箱有可能null\",{\"1\":{\"876\":1}}],[\"因为这里封装的是已经认证过的了\",{\"1\":{\"627\":1}}],[\"因为这不是真正的宕机\",{\"1\":{\"837\":1}}],[\"因为这些都是比较危险的操作\",{\"1\":{\"709\":1}}],[\"因为这些特性\",{\"1\":{\"132\":1}}],[\"因为这将导致所有实现类都需要修改以实现新的方法\",{\"1\":{\"686\":1}}],[\"因为这个bean是启动时加载的\",{\"1\":{\"546\":1}}],[\"因为这个类没有\",{\"1\":{\"507\":1}}],[\"因为这是这道题的第一个关键词\",{\"1\":{\"329\":1}}],[\"因为非公平锁的优点在于吞吐量比公平锁大\",{\"1\":{\"319\":1}}],[\"因为执行的是do\",{\"1\":{\"307\":1}}],[\"因为变量value被volatile修饰\",{\"1\":{\"305\":1}}],[\"因为java中的cas操作的执行依赖于unsafe类的方法\",{\"1\":{\"304\":1}}],[\"因为jwt一般会放在redis或者mysql表\",{\"1\":{\"70\":1}}],[\"因为volatile关键字的另一个作用就是禁止重排序优化\",{\"1\":{\"297\":1}}],[\"因为version已经变为2了\",{\"1\":{\"170\":1}}],[\"因为方法1\",{\"1\":{\"295\":1}}],[\"因为步骤\",{\"1\":{\"293\":1}}],[\"因为处理器在进行重排时候\",{\"1\":{\"293\":1}}],[\"因为就一个人\",{\"1\":{\"292\":1}}],[\"因为天然支持分布式\",{\"1\":{\"265\":1}}],[\"因为放在内存中\",{\"1\":{\"263\":1}}],[\"因为平时有工作\",{\"1\":{\"261\":1}}],[\"因为所有类类型都可以赋值为null\",{\"1\":{\"688\":1}}],[\"因为所有\",{\"1\":{\"231\":1}}],[\"因为继承泛型是\",{\"1\":{\"229\":1}}],[\"因为要通过配置文件启动\",{\"1\":{\"213\":1}}],[\"因为要通用用泛型的\",{\"1\":{\"148\":1}}],[\"因为两个制约了\",{\"1\":{\"201\":1}}],[\"因为它将在java\",{\"1\":{\"1012\":1}}],[\"因为它将在运行时环境中被提供\",{\"1\":{\"1012\":1}}],[\"因为它的存在\",{\"1\":{\"727\":1}}],[\"因为它违背了面向对象设计中的开闭原则\",{\"1\":{\"686\":1}}],[\"因为它们入门超级简单\",{\"1\":{\"1150\":1}}],[\"因为它们要更新同一个影院账户的余额\",{\"1\":{\"931\":1}}],[\"因为它们不能实例化\",{\"1\":{\"686\":1}}],[\"因为它们无法达到一致的状态\",{\"1\":{\"571\":1}}],[\"因为它们相互依赖\",{\"1\":{\"543\":1}}],[\"因为它在编译时织入切面\",{\"1\":{\"182\":1}}],[\"因为它是通过生成目标对象的子类来实现代理的\",{\"1\":{\"182\":1}}],[\"因为接口中的方法默认为\",{\"1\":{\"182\":1}}],[\"因为只有这样\",{\"1\":{\"1139\":1}}],[\"因为只有spring定义的bean才接受事务\",{\"1\":{\"182\":1}}],[\"因为只能一个进行写\",{\"1\":{\"290\":1}}],[\"因为只锁当前服务\",{\"1\":{\"108\":1}}],[\"因为看了上面笔记\",{\"1\":{\"179\":1}}],[\"因为123456的md5不可变我就把这个放数据库\",{\"1\":{\"132\":1}}],[\"因为rediscacheconfiguration\",{\"1\":{\"125\":1}}],[\"因为会有集群环境\",{\"1\":{\"108\":1}}],[\"因为fastjson的漏洞解决\",{\"1\":{\"105\":1}}],[\"因为我都是裸笔+类纸膜\",{\"1\":{\"1164\":1}}],[\"因为我就是这么学的\",{\"1\":{\"1150\":1}}],[\"因为我们执行\",{\"1\":{\"1005\":1}}],[\"因为我发现自己并没有那么想学\",{\"1\":{\"876\":1}}],[\"因为我是把studentmapper\",{\"1\":{\"397\":1}}],[\"因为我es查的是product\",{\"1\":{\"125\":1}}],[\"因为我这个项目\",{\"1\":{\"101\":1}}],[\"因为我实在想不到refreshtoken存\",{\"1\":{\"70\":1}}],[\"因为总是在内旋重试\",{\"1\":{\"83\":1}}],[\"因为\",{\"1\":{\"76\":1,\"182\":1,\"192\":1,\"208\":1,\"210\":1,\"229\":1,\"301\":1,\"681\":2,\"713\":1,\"718\":1,\"883\":1,\"997\":1,\"1005\":1,\"1010\":1}}],[\"因为现在绝大多数路由器的消耗时间都小于1s\",{\"1\":{\"76\":1}}],[\"因此数据库sql文件维护在upupor\",{\"1\":{\"1079\":1}}],[\"因此解决冲突的方式也更加直观和简单\",{\"1\":{\"990\":1}}],[\"因此使用时需要谨慎\",{\"1\":{\"990\":1}}],[\"因此会修改目标分支的提交历史记录\",{\"1\":{\"990\":1}}],[\"因此会涉及到跨域请求\",{\"1\":{\"883\":1}}],[\"因此rowid的值不是稳定的\",{\"1\":{\"967\":1}}],[\"因此在进行全表扫描时\",{\"1\":{\"967\":2}}],[\"因此将浪费1个字节的存储空间\",{\"1\":{\"963\":1}}],[\"因此将创建总共\",{\"1\":{\"724\":1}}],[\"因此varchar类型的存储空间是根据实际存储的数据长度来动态分配的\",{\"1\":{\"963\":1}}],[\"因此判断语句就无法生效\",{\"1\":{\"948\":1}}],[\"因此它的\",{\"1\":{\"935\":1}}],[\"因此它也不是编译期常量\",{\"1\":{\"725\":1}}],[\"因此只能被阻塞\",{\"1\":{\"928\":1}}],[\"因此你可以有多个线程同时对一张表增删改查\",{\"1\":{\"928\":1}}],[\"因此你不再需要为永久代或元空间单独分配内存\",{\"1\":{\"383\":1}}],[\"因此对于一些从\",{\"1\":{\"905\":1}}],[\"因此对系统性能的影响更小\",{\"1\":{\"156\":1}}],[\"因此很多时候\",{\"1\":{\"905\":1}}],[\"因此很可能你费劲地把结果存起来\",{\"1\":{\"894\":1}}],[\"因此需要对\",{\"1\":{\"895\":1}}],[\"因此出现空指针问题\",{\"1\":{\"876\":1}}],[\"因此是跨语言的\",{\"1\":{\"818\":1}}],[\"因此我们先退出mysql\",{\"1\":{\"805\":1}}],[\"因此我们非常欢迎他们阻塞\",{\"1\":{\"346\":1}}],[\"因此线程安全\",{\"1\":{\"779\":1}}],[\"因此执行i\",{\"1\":{\"778\":1}}],[\"因此执行单例模式的代码时候\",{\"1\":{\"301\":1}}],[\"因此哈希值的范围是\",{\"1\":{\"739\":1}}],[\"因此s1属于编译期常量\",{\"1\":{\"725\":1}}],[\"因此s1和s2指向的是相同的对象\",{\"1\":{\"724\":1}}],[\"因此s2==\",{\"1\":{\"723\":1}}],[\"因此file对象也有slice\",{\"1\":{\"708\":1}}],[\"因此final修饰的可以改变属性\",{\"1\":{\"662\":1}}],[\"因此这个式子无意义\",{\"1\":{\"670\":1}}],[\"因此这种重排优化是允许的\",{\"1\":{\"301\":1}}],[\"因此不属于编译期常量\",{\"1\":{\"725\":1}}],[\"因此不可以再指向其他对象\",{\"1\":{\"662\":1}}],[\"因此不同的线程无法访问对方的工作内存\",{\"1\":{\"287\":1}}],[\"因此子项目需要显示的声明需要用的依赖\",{\"1\":{\"556\":1}}],[\"因此一般不需要单独使用这两个注解\",{\"1\":{\"482\":1}}],[\"因此导入aspectjweaver\",{\"1\":{\"458\":1}}],[\"因此班长是需要最后一个走的\",{\"1\":{\"333\":1}}],[\"因此交换失败\",{\"1\":{\"310\":1}}],[\"因此返回结果为否\",{\"1\":{\"948\":1}}],[\"因此返回\",{\"1\":{\"302\":1,\"723\":1,\"779\":1}}],[\"因此任何cpu上的线程都能读取到这些数据的最新版本\",{\"1\":{\"296\":1}}],[\"因此原先的顺序可能是\",{\"1\":{\"295\":1}}],[\"因此为了防止这种结果出现\",{\"1\":{\"294\":1}}],[\"因此编译器可能对数据进行重排\",{\"1\":{\"294\":1}}],[\"因此即便你只有一个节点\",{\"1\":{\"265\":1}}],[\"因此可以正常执行\",{\"1\":{\"928\":1}}],[\"因此可以直接提供查询结果\",{\"1\":{\"922\":1}}],[\"因此可以很方便地添加全局异常处理逻辑\",{\"1\":{\"520\":1}}],[\"因此可以在该方法中对请求数据进行处理或修改\",{\"1\":{\"157\":1}}],[\"因此可以将用户信息存储在\",{\"1\":{\"156\":1}}],[\"因此可以借助于\",{\"1\":{\"11\":1}}],[\"因此适合存储一些需要在多个页面或请求之间共享的数据\",{\"1\":{\"156\":1}}],[\"因此适合存储一些只有在当前线程中使用的数据\",{\"1\":{\"156\":1}}],[\"因此购物车应该以用户的作为key\",{\"1\":{\"155\":1}}],[\"因此系统内存的大小也会影响可以创建的线程数\",{\"1\":{\"99\":1}}],[\"因此\",{\"1\":{\"8\":1,\"46\":1,\"76\":2,\"125\":3,\"152\":1,\"156\":1,\"182\":1,\"378\":1,\"383\":1,\"539\":1,\"543\":4,\"550\":1,\"572\":2,\"677\":1,\"688\":2,\"694\":3,\"709\":1,\"711\":1,\"712\":1,\"715\":1,\"720\":1,\"787\":1,\"849\":1,\"897\":1,\"901\":1,\"905\":1,\"907\":1,\"917\":1,\"922\":2,\"923\":2,\"924\":1,\"927\":1,\"928\":2,\"932\":2,\"935\":1,\"959\":2,\"963\":2,\"990\":2,\"997\":1,\"1012\":1,\"1014\":1,\"1166\":1}}],[\"服务不会自动更新\",{\"1\":{\"1161\":1}}],[\"服务优先级等\",{\"1\":{\"1041\":1}}],[\"服务重启策略\",{\"1\":{\"1041\":1}}],[\"服务死锁等\",{\"1\":{\"1041\":1}}],[\"服务自启动\",{\"1\":{\"998\":1}}],[\"服务自治\",{\"1\":{\"554\":1}}],[\"服务需要的所有依赖\",{\"1\":{\"727\":1}}],[\"服务或\",{\"1\":{\"727\":1}}],[\"服务里的方法\",{\"1\":{\"605\":1}}],[\"服务总线\",{\"1\":{\"594\":1}}],[\"服务注册\",{\"1\":{\"608\":1}}],[\"服务注册中心\",{\"1\":{\"594\":1}}],[\"服务注册与发现标准\",{\"1\":{\"594\":1}}],[\"服务注册与发现\",{\"1\":{\"594\":1}}],[\"服务配置\",{\"1\":{\"591\":1,\"594\":1}}],[\"服务提供者\",{\"1\":{\"585\":1,\"740\":1}}],[\"服务提供方对外提供服务\",{\"1\":{\"562\":1}}],[\"服务限流降级\",{\"1\":{\"594\":1}}],[\"服务限流\",{\"1\":{\"582\":1}}],[\"服务熔断的实现效果\",{\"1\":{\"586\":1}}],[\"服务熔断触发服务降级\",{\"1\":{\"582\":1}}],[\"服务熔断\",{\"0\":{\"586\":1},\"1\":{\"582\":1,\"586\":1,\"599\":1}}],[\"服务降级指的是当服务器压力剧增的情况下\",{\"1\":{\"603\":1}}],[\"服务降级后兜底方法执行了很多次占比请求超过默认10秒内超过50\",{\"1\":{\"586\":1}}],[\"服务降级\",{\"0\":{\"583\":1},\"1\":{\"582\":1,\"585\":1,\"586\":1,\"599\":1}}],[\"服务雪崩\",{\"1\":{\"581\":1}}],[\"服务名\",{\"1\":{\"576\":1}}],[\"服务只能在一致性和可用性之间取舍\",{\"1\":{\"572\":1}}],[\"服务\",{\"1\":{\"572\":1,\"605\":1}}],[\"服务可以使用不同的语言\",{\"1\":{\"554\":1}}],[\"服务围绕业务功能拆分\",{\"1\":{\"554\":1}}],[\"服务之间使用轻量级http交互\",{\"1\":{\"554\":1}}],[\"服务之间相互协调\",{\"1\":{\"553\":1}}],[\"服务与服务间采用轻量级的通信机制相互写作\",{\"1\":{\"553\":1}}],[\"服务接收请求后分发请求等\",{\"1\":{\"543\":1,\"1081\":1}}],[\"服务过多\",{\"0\":{\"254\":1}}],[\"服务容错\",{\"1\":{\"228\":1}}],[\"服务发现\",{\"0\":{\"568\":1},\"1\":{\"228\":1}}],[\"服务商\",{\"0\":{\"197\":1}}],[\"服务治理概念\",{\"1\":{\"564\":1}}],[\"服务治理\",{\"1\":{\"183\":1}}],[\"服务把session也复制到别的机器上\",{\"1\":{\"143\":1}}],[\"服务端消息自动删除\",{\"1\":{\"837\":1}}],[\"服务端再将这些文件分片进行合并即可\",{\"1\":{\"708\":1}}],[\"服务端\",{\"1\":{\"688\":1}}],[\"服务端作用\",{\"1\":{\"592\":1}}],[\"服务端也称为分布式配置中心\",{\"1\":{\"591\":1}}],[\"服务端超过了1秒钟\",{\"1\":{\"577\":1}}],[\"服务端sdk在上传方面主要提供两种功能\",{\"1\":{\"238\":1}}],[\"服务端不用做很多的额外工作\",{\"1\":{\"70\":1}}],[\"服务端要支持cors\",{\"1\":{\"54\":1}}],[\"服务端验证token值\",{\"1\":{\"54\":1}}],[\"服务端将cookie写到客户端后\",{\"1\":{\"52\":1}}],[\"服务端做认证记录\",{\"1\":{\"52\":1}}],[\"服务端的开销会明显增大\",{\"1\":{\"52\":1}}],[\"服务器得等第一个5min的过期并扔给死信路由才会检查第二个\",{\"1\":{\"842\":1}}],[\"服务器将响应传输给客户端\",{\"1\":{\"738\":1}}],[\"服务器将请求交给\",{\"1\":{\"737\":1}}],[\"服务器可要以处理常见的\",{\"1\":{\"713\":1}}],[\"服务器可以解析请求头中的\",{\"1\":{\"48\":1}}],[\"服务器的话\",{\"1\":{\"713\":1}}],[\"服务器来进行\",{\"1\":{\"706\":1}}],[\"服务器上\",{\"1\":{\"706\":1}}],[\"服务器一样\",{\"1\":{\"706\":1}}],[\"服务器不会保留任何关于客户端的状态信息\",{\"1\":{\"581\":1}}],[\"服务器拿\",{\"1\":{\"238\":1}}],[\"服务器redis\",{\"1\":{\"167\":1}}],[\"服务器已删除令牌\",{\"1\":{\"167\":1}}],[\"服务器接收请求后会匹配令牌\",{\"1\":{\"167\":1}}],[\"服务器存储了一个令牌\",{\"1\":{\"167\":1}}],[\"服务器\",{\"1\":{\"76\":1,\"192\":1,\"713\":2,\"737\":2,\"785\":1}}],[\"服务器通过验证发送给用户一个token\",{\"1\":{\"54\":1}}],[\"服务器进行验证用户的信息\",{\"1\":{\"54\":1}}],[\"服务器使用\",{\"1\":{\"49\":1}}],[\"服务器会保存该用户的信息\",{\"1\":{\"49\":1}}],[\"服务器会在响应头中包含\",{\"1\":{\"48\":1}}],[\"服务器就会做出响应\",{\"1\":{\"49\":1}}],[\"缺点就是\",{\"1\":{\"1145\":1}}],[\"缺点是循环会消耗cpu\",{\"1\":{\"324\":1}}],[\"缺点又加了个中间件\",{\"1\":{\"119\":1}}],[\"缺点\",{\"0\":{\"50\":1,\"52\":1},\"1\":{\"85\":1,\"154\":1,\"325\":1,\"864\":1,\"865\":1,\"911\":1}}],[\"4千\",{\"1\":{\"1141\":1}}],[\"4px\",{\"1\":{\"1022\":2}}],[\"4gb\",{\"1\":{\"899\":1,\"1092\":1}}],[\"4294967296\",{\"1\":{\"1092\":1}}],[\"426547\",{\"1\":{\"973\":2}}],[\"42000\",{\"1\":{\"895\":1,\"897\":1}}],[\"42h\",{\"1\":{\"869\":1}}],[\"42b9\",{\"1\":{\"598\":1}}],[\"45950109\",{\"1\":{\"865\":1}}],[\"4531\",{\"1\":{\"676\":1}}],[\"4369\",{\"1\":{\"825\":3}}],[\"43<\",{\"1\":{\"476\":1}}],[\"443961913\",{\"1\":{\"998\":1}}],[\"443\",{\"1\":{\"795\":2}}],[\"4+2+1\",{\"1\":{\"786\":2}}],[\"48\",{\"1\":{\"762\":1}}],[\"4层\",{\"1\":{\"688\":1}}],[\"41h\",{\"1\":{\"1096\":1}}],[\"4181\",{\"1\":{\"986\":1}}],[\"41\",{\"1\":{\"959\":1}}],[\"414902\",{\"1\":{\"959\":1}}],[\"41da09da\",{\"1\":{\"676\":1}}],[\"411\",{\"1\":{\"102\":1}}],[\"4<\",{\"1\":{\"458\":1}}],[\"46<\",{\"1\":{\"458\":1}}],[\"465219671411773440\",{\"1\":{\"379\":1,\"380\":1,\"773\":1}}],[\"4天重新过一遍\",{\"1\":{\"393\":1}}],[\"408\",{\"0\":{\"1168\":1,\"1183\":1}}],[\"404\",{\"1\":{\"1167\":1}}],[\"40k\",{\"1\":{\"1104\":1}}],[\"40\",{\"1\":{\"739\":2}}],[\"403\",{\"1\":{\"627\":1}}],[\"4096\",{\"1\":{\"540\":1}}],[\"40a8\",{\"1\":{\"387\":1}}],[\"400\",{\"1\":{\"239\":1,\"918\":1}}],[\"40265247\",{\"1\":{\"105\":1}}],[\"401就表示无权限就是已经过期了\",{\"1\":{\"70\":1}}],[\"401\",{\"1\":{\"65\":1,\"67\":1}}],[\"47ffaf4670384e34a925e294fcd686c0\",{\"1\":{\"662\":1}}],[\"4734\",{\"1\":{\"598\":1}}],[\"4706\",{\"1\":{\"587\":1}}],[\"47<\",{\"1\":{\"105\":1,\"397\":1}}],[\"4799\",{\"1\":{\"66\":1}}],[\"4的操作\",{\"1\":{\"87\":1}}],[\"4\",{\"0\":{\"113\":1,\"134\":1,\"145\":1,\"149\":1,\"153\":1,\"173\":1,\"176\":1,\"177\":1,\"178\":1,\"180\":1,\"182\":1,\"198\":1,\"218\":1,\"222\":1,\"223\":1,\"224\":2,\"225\":1,\"234\":1,\"276\":1,\"280\":1,\"298\":1,\"306\":1,\"326\":1,\"344\":1,\"354\":1,\"364\":1,\"365\":1,\"376\":1,\"400\":1,\"409\":1,\"410\":1,\"412\":1,\"413\":1,\"414\":1,\"415\":1,\"416\":1,\"424\":1,\"428\":1,\"433\":1,\"449\":1,\"462\":1,\"490\":1,\"550\":1,\"566\":1,\"579\":1,\"580\":1,\"581\":1,\"619\":1,\"626\":1,\"723\":1,\"757\":1,\"768\":1,\"794\":1,\"804\":1,\"833\":1,\"837\":1,\"844\":1,\"864\":1,\"895\":1,\"901\":1,\"907\":1,\"918\":1,\"924\":1,\"929\":1,\"933\":1,\"1046\":1,\"1092\":1,\"1100\":1,\"1144\":1,\"1145\":1},\"1\":{\"49\":1,\"70\":1,\"87\":1,\"109\":1,\"115\":1,\"146\":1,\"196\":1,\"231\":1,\"242\":1,\"261\":2,\"267\":4,\"293\":5,\"334\":2,\"352\":1,\"354\":1,\"357\":1,\"359\":1,\"366\":1,\"372\":1,\"388\":4,\"389\":1,\"397\":1,\"458\":3,\"459\":3,\"476\":2,\"477\":2,\"483\":2,\"608\":2,\"621\":1,\"647\":1,\"658\":5,\"660\":2,\"685\":3,\"686\":1,\"687\":2,\"688\":1,\"691\":1,\"697\":1,\"712\":1,\"713\":1,\"720\":1,\"757\":1,\"767\":1,\"775\":1,\"780\":2,\"786\":1,\"802\":1,\"845\":2,\"877\":1,\"899\":1,\"906\":4,\"916\":1,\"918\":1,\"920\":2,\"921\":1,\"923\":8,\"924\":4,\"925\":6,\"929\":2,\"935\":1,\"947\":1,\"959\":1,\"961\":1,\"1001\":1,\"1003\":1,\"1005\":3,\"1006\":3,\"1009\":1,\"1019\":1,\"1081\":1,\"1092\":1,\"1095\":1,\"1129\":1}}],[\"甚至生硬的一个个重新添加回来\",{\"1\":{\"1154\":1}}],[\"甚至可以自己写一个博客专栏\",{\"1\":{\"1150\":1}}],[\"甚至可以运行时修改类定义\",{\"1\":{\"638\":1}}],[\"甚至出现全表扫描的情况\",{\"1\":{\"967\":1}}],[\"甚至在不同的机房\",{\"1\":{\"606\":1}}],[\"甚至是一段代码\",{\"1\":{\"605\":1}}],[\"甚至\",{\"1\":{\"49\":1}}],[\"值剩下你push\",{\"1\":{\"987\":1}}],[\"值2\",{\"1\":{\"959\":1}}],[\"值1\",{\"1\":{\"959\":1}}],[\"值store1在store这个字段名\",{\"1\":{\"947\":1}}],[\"值为\",{\"1\":{\"918\":2}}],[\"值为2\",{\"1\":{\"242\":1}}],[\"值分别为\",{\"1\":{\"917\":1}}],[\"值经过哈希函数的换算\",{\"1\":{\"914\":1}}],[\"值是\",{\"1\":{\"905\":1}}],[\"值是不是\",{\"1\":{\"897\":1}}],[\"值是购物项数据\",{\"1\":{\"155\":1}}],[\"值关联到\",{\"1\":{\"896\":1}}],[\"值关联到表\",{\"1\":{\"896\":1}}],[\"值的范围值\",{\"1\":{\"739\":1}}],[\"值传递\",{\"0\":{\"670\":1}}],[\"值得注意的是\",{\"1\":{\"1010\":1}}],[\"值得一看corsconfig\",{\"1\":{\"231\":1}}],[\"值得学习\",{\"1\":{\"130\":1,\"208\":1}}],[\"值\",{\"1\":{\"49\":1,\"681\":1,\"896\":2,\"914\":1,\"918\":1,\"959\":1}}],[\"值对\",{\"1\":{\"49\":1}}],[\"已上传\",{\"1\":{\"1084\":1}}],[\"已存在\",{\"1\":{\"1084\":1}}],[\"已删除个人敏感信息\",{\"1\":{\"1005\":1}}],[\"已解锁则无操作\",{\"1\":{\"847\":1}}],[\"已知在一个arraylist中有若干各person对象\",{\"1\":{\"765\":1}}],[\"已下这两个不构成重载\",{\"1\":{\"680\":1}}],[\"已被引用\",{\"1\":{\"660\":1}}],[\"已踩坑\",{\"1\":{\"593\":1}}],[\"已经全部帮忙踩过一遍坑了\",{\"1\":{\"1157\":1}}],[\"已经合并了\",{\"1\":{\"928\":1}}],[\"已经秒光\",{\"1\":{\"858\":1}}],[\"已经无数次\",{\"1\":{\"780\":1}}],[\"已经定义了参数的数量类型\",{\"1\":{\"754\":1}}],[\"已经被广泛应用在数据库引擎中了\",{\"1\":{\"916\":1}}],[\"已经被线程\",{\"1\":{\"694\":1}}],[\"已经被锁住了\",{\"1\":{\"321\":1}}],[\"已经集成了\",{\"1\":{\"494\":1}}],[\"已经占用了该车位\",{\"1\":{\"342\":1,\"343\":1}}],[\"已经\",{\"1\":{\"210\":1,\"922\":1}}],[\"已命名数据元素\",{\"1\":{\"49\":1}}],[\"已弃用\",{\"1\":{\"47\":1}}],[\"非常方便\",{\"0\":{\"1037\":1}}],[\"非常适合步需要大量数据存储的会话应用\",{\"1\":{\"49\":1}}],[\"非集\",{\"0\":{\"1018\":1}}],[\"非root用户是无法使用小于1024的常用端口的\",{\"1\":{\"998\":1}}],[\"非必要\",{\"1\":{\"986\":1}}],[\"非必须\",{\"1\":{\"795\":1}}],[\"非主键索引也被称为二级索引\",{\"1\":{\"917\":1}}],[\"非主键索引的叶子节点内容是主键的值\",{\"1\":{\"917\":1}}],[\"非事务的\",{\"1\":{\"902\":1}}],[\"非阻塞io\",{\"1\":{\"849\":1}}],[\"非手写\",{\"1\":{\"716\":1}}],[\"非运行时异常\",{\"1\":{\"705\":1}}],[\"非static的\",{\"1\":{\"695\":1}}],[\"非static\",{\"1\":{\"686\":1}}],[\"非静态属性\",{\"1\":{\"697\":2}}],[\"非静态同步方法\",{\"1\":{\"687\":1}}],[\"非静态方法前面其实有一个默认的对象this\",{\"1\":{\"658\":1}}],[\"非静态对象和非静态代码块\",{\"1\":{\"658\":1}}],[\"非宕机节点\",{\"1\":{\"571\":1}}],[\"非只读\",{\"1\":{\"448\":1}}],[\"非堆\",{\"1\":{\"386\":1}}],[\"非商业转载请注明出处\",{\"1\":{\"383\":1,\"998\":1}}],[\"非标准vm选项\",{\"1\":{\"383\":1}}],[\"非公平锁比较粗鲁\",{\"1\":{\"318\":1}}],[\"非公平锁\",{\"0\":{\"316\":1},\"1\":{\"318\":1,\"342\":1,\"352\":1}}],[\"非\",{\"1\":{\"277\":1}}],[\"非连续的\",{\"1\":{\"49\":1}}],[\"当一天过去以后\",{\"1\":{\"1142\":1}}],[\"当一个依赖被设置为可选依赖时\",{\"1\":{\"1010\":1}}],[\"当一个表中的数据量过大时\",{\"1\":{\"960\":1}}],[\"当一个方法被调用时\",{\"1\":{\"778\":1}}],[\"当一个或多个通道就绪时\",{\"1\":{\"712\":1}}],[\"当一个或多个线程调用await方法时\",{\"1\":{\"332\":1}}],[\"当一个通道不能立即写入数据时\",{\"1\":{\"712\":1}}],[\"当一个类实现了\",{\"1\":{\"538\":1,\"1082\":1}}],[\"当一个共享的标志位需要在多个线程之间进行读写操作时\",{\"1\":{\"283\":1}}],[\"当一个事务方法\",{\"1\":{\"179\":1}}],[\"当一个\",{\"1\":{\"152\":1,\"543\":1}}],[\"当一个线程成功获取到分布式锁后\",{\"1\":{\"113\":1}}],[\"当一个请求到达时\",{\"1\":{\"73\":1}}],[\"当一个客户在多个页面间切换时\",{\"1\":{\"49\":1}}],[\"当我看完一本书以后\",{\"1\":{\"1144\":1}}],[\"当我今年开始准备春招准备校招的时候\",{\"1\":{\"1140\":1}}],[\"当我们说驻留一个字符串到字符串常量池时\",{\"1\":{\"722\":1}}],[\"当我们使用tcc模式的时候\",{\"1\":{\"186\":1}}],[\"当代计算机还实现了1个逆天的技术\",{\"1\":{\"1090\":1}}],[\"当代码执行到该变量被赋值的代码时才被创建\",{\"1\":{\"388\":1}}],[\"当基准值位于左边时\",{\"1\":{\"1085\":1}}],[\"当把maven中的<scope>provided<\",{\"1\":{\"1012\":1}}],[\"当这个依赖被其他模块引用时\",{\"1\":{\"1010\":1}}],[\"当您只打开两个或三个窗口时\",{\"1\":{\"1036\":1}}],[\"当您连接一台4k分辨率的显示器到mac\",{\"1\":{\"998\":1}}],[\"当您使用\",{\"1\":{\"60\":1}}],[\"当线上的数据库数据量到达几百万\",{\"1\":{\"976\":1}}],[\"当null值与任何其他值进行拼接时\",{\"1\":{\"959\":1}}],[\"当涉及复杂的查询或需要多次使用相同的子查询结果时\",{\"1\":{\"959\":1}}],[\"当涉及多个资源的并发访问时\",{\"1\":{\"933\":1}}],[\"当涉及到使用redis在java中实现限流\",{\"1\":{\"849\":1}}],[\"当并发系统中不同线程出现循环资源依赖\",{\"1\":{\"932\":1}}],[\"当要对表做结构变更操作的时候\",{\"1\":{\"928\":1}}],[\"当查询执行使用了using\",{\"1\":{\"923\":1}}],[\"当创建index\",{\"1\":{\"923\":1}}],[\"当相邻两个页由于删除了数据\",{\"1\":{\"918\":1}}],[\"当没有事务再需要用到这些回滚日志时\",{\"1\":{\"906\":1}}],[\"当出现死锁以后\",{\"1\":{\"932\":2}}],[\"当出现并发访问的时候\",{\"1\":{\"926\":1}}],[\"当出现读写锁冲突的时候\",{\"1\":{\"905\":1}}],[\"当出现异常时在catch处修改消息状态为错误抵达\",{\"1\":{\"846\":1}}],[\"当试图更新这条不存在的记录时\",{\"1\":{\"905\":1}}],[\"当数值小于分界值时持续遍历\",{\"1\":{\"1085\":1}}],[\"当数据库上有多个事务同时执行的时候\",{\"1\":{\"905\":1}}],[\"当数组中放了12个元素\",{\"1\":{\"703\":1}}],[\"当数组的某一个索引位置上的元素以链表形式存在的数据个数\",{\"1\":{\"703\":1}}],[\"当数组长度\",{\"1\":{\"688\":1}}],[\"当有一条记录需要更新的时候\",{\"1\":{\"899\":1}}],[\"当有注解的方法被调用的时候\",{\"1\":{\"179\":1}}],[\"当令牌即将过期时\",{\"1\":{\"890\":1}}],[\"当需要恢复到指定的某一秒时\",{\"1\":{\"901\":1}}],[\"当需要存储java对象时\",{\"1\":{\"875\":1}}],[\"当需要将数据存储到\",{\"1\":{\"103\":1}}],[\"当消息发送者发送消息以后\",{\"1\":{\"816\":1}}],[\"当方法执行结束后\",{\"1\":{\"778\":1}}],[\"当第一个stream流调用完毕方法\",{\"1\":{\"772\":1}}],[\"当接口存在于调用方这边时\",{\"1\":{\"740\":1}}],[\"当hashmap的长度为2的幂次方时\",{\"1\":{\"739\":1}}],[\"当日志量比较多的时候\",{\"1\":{\"734\":1}}],[\"当执行string\",{\"1\":{\"724\":1}}],[\"当执行s1\",{\"1\":{\"723\":1}}],[\"当调用\",{\"1\":{\"723\":1}}],[\"当字符串常量池已经驻留过某个字符串引用\",{\"1\":{\"722\":1}}],[\"当字符串常量池没有相等的字符串时\",{\"1\":{\"722\":1}}],[\"当虚拟机要使用一个类时\",{\"1\":{\"722\":1}}],[\"当后台处理完成\",{\"1\":{\"713\":1}}],[\"当客户端数据到了之后\",{\"1\":{\"712\":1}}],[\"当客户端发送请求时\",{\"1\":{\"152\":1}}],[\"当面对十万甚至百万级连接的时候\",{\"1\":{\"711\":1}}],[\"当应用程序发起\",{\"1\":{\"709\":1}}],[\"当想要执行\",{\"1\":{\"709\":1}}],[\"当浏览器遇到\",{\"1\":{\"706\":1}}],[\"当程序中可能出现这类异常\",{\"1\":{\"705\":1}}],[\"当程序运行时被加载到内存后\",{\"1\":{\"386\":1}}],[\"当红黑树的节点小于或等于\",{\"1\":{\"703\":1}}],[\"当byte\",{\"1\":{\"702\":1}}],[\"当容量小的数据类型的变量与容量大的数据类型的变量做运算时\",{\"1\":{\"702\":1}}],[\"当子类覆盖了父类的方法后\",{\"1\":{\"697\":1}}],[\"当其他程序获取到这种二进制流\",{\"1\":{\"688\":1}}],[\"当超过范围就是new\",{\"1\":{\"686\":1}}],[\"当再创建a2时\",{\"1\":{\"686\":1}}],[\"当再次加锁\",{\"1\":{\"86\":1,\"114\":1}}],[\"当内存充足时需要保留\",{\"1\":{\"660\":1}}],[\"当内存不足时清理掉\",{\"1\":{\"636\":1}}],[\"当内部方法调用完成后\",{\"1\":{\"179\":1}}],[\"当认证或授权出现报错时\",{\"1\":{\"630\":1}}],[\"当某个用户登录之后\",{\"1\":{\"627\":1}}],[\"当某个线程执行到一段被synchronized修饰的代码之前\",{\"1\":{\"329\":1}}],[\"当开启的时候\",{\"1\":{\"587\":1}}],[\"当失败率达到一定的时候\",{\"1\":{\"587\":1}}],[\"当满足一定的阀值的时候\",{\"1\":{\"587\":1}}],[\"当被调用的服务经常失败到达某个阈值\",{\"1\":{\"582\":1}}],[\"当系统处于高峰期\",{\"1\":{\"582\":1}}],[\"当服务不可用时\",{\"1\":{\"603\":1}}],[\"当服务器启动的时候\",{\"1\":{\"564\":1}}],[\"当服务数量比较少时\",{\"1\":{\"562\":1}}],[\"当所有\",{\"1\":{\"543\":1}}],[\"当所有事务参与者的\",{\"1\":{\"186\":1}}],[\"当资源发生更改时\",{\"1\":{\"539\":1}}],[\"当静态资源\",{\"1\":{\"539\":1}}],[\"当使用\",{\"1\":{\"501\":1,\"959\":1}}],[\"当使用双重检查锁定来确保只有一个实例被创建时\",{\"1\":{\"283\":1}}],[\"当切面太多的话\",{\"1\":{\"494\":1}}],[\"当时的情况是这样的\",{\"1\":{\"658\":1}}],[\"当时的回答\",{\"1\":{\"493\":1}}],[\"当时错误的回答\",{\"1\":{\"380\":1}}],[\"当它的年龄增加到一定程度\",{\"1\":{\"385\":1}}],[\"当持有锁的线程长期不释放锁的时候\",{\"1\":{\"380\":1}}],[\"当任务来时无需创建新的线程就能执行\",{\"1\":{\"367\":1}}],[\"当synchronized代码执行后\",{\"1\":{\"352\":1}}],[\"当蛋糕店的柜子满的时候\",{\"1\":{\"345\":1}}],[\"当蛋糕店的柜子空的时候\",{\"1\":{\"345\":1}}],[\"当阻塞队列是满时\",{\"1\":{\"345\":1}}],[\"当阻塞队列是空时\",{\"1\":{\"345\":1}}],[\"当计数器的值变成零时\",{\"1\":{\"332\":1}}],[\"当不断自旋的线程越来越多的时候\",{\"1\":{\"325\":1}}],[\"当当当当\",{\"1\":{\"312\":1}}],[\"当对一个表做增删改查操作的时候\",{\"1\":{\"928\":1}}],[\"当对一个共享变量执行操作时\",{\"1\":{\"307\":1}}],[\"当对表中的数据进行==增删改==的时候\",{\"1\":{\"911\":1}}],[\"当对象不再被任何引用所指向时\",{\"1\":{\"125\":1}}],[\"当了文件服务器\",{\"1\":{\"282\":1}}],[\"当正则表达式保持不变时\",{\"1\":{\"216\":1}}],[\"当目标对象没有实现接口时\",{\"1\":{\"182\":1}}],[\"当method01方法调用bookshopservice\",{\"1\":{\"179\":1}}],[\"当前目录\",{\"1\":{\"1041\":1}}],[\"当前行输错了\",{\"1\":{\"1038\":1}}],[\"当前分支的修改历史记录与指定分支的修改历史记录合并为一个线性历史记录\",{\"1\":{\"990\":1}}],[\"当前push的东西和仓库的东西不匹配\",{\"1\":{\"987\":1}}],[\"当前系统里面已经创建过的事务\",{\"1\":{\"935\":1}}],[\"当前正在\",{\"1\":{\"935\":1}}],[\"当前最新版本是\",{\"1\":{\"935\":1}}],[\"当前值是\",{\"1\":{\"906\":1}}],[\"当前拒签消息是否发回服务器重新入队\",{\"1\":{\"837\":1}}],[\"当前解锁失败需要重复解锁\",{\"1\":{\"837\":1}}],[\"当前消息的唯一关联数据\",{\"1\":{\"836\":1}}],[\"当前传输数据的通道\",{\"1\":{\"830\":1}}],[\"当前用户是否拥有访问当前资源所需的权限\",{\"1\":{\"629\":1}}],[\"当前的beans\",{\"1\":{\"567\":1}}],[\"当前会话的所有数据保存在会话缓存中\",{\"1\":{\"449\":1}}],[\"当前一级缓存中还没有这个数据\",{\"1\":{\"444\":1}}],[\"当前章节没达到老师的效果不要继续往下做\",{\"1\":{\"261\":1}}],[\"当前工程要用\",{\"1\":{\"219\":1}}],[\"当前方法是使用原来的事务还是开启一个新的事务\",{\"1\":{\"178\":1}}],[\"当前域\",{\"1\":{\"147\":1}}],[\"当订单服务传的version还是1\",{\"1\":{\"170\":1}}],[\"当多个线程访问同一个\",{\"1\":{\"156\":1}}],[\"当文档载入完成的时候执行的\",{\"1\":{\"128\":1}}],[\"当\",{\"1\":{\"87\":1,\"182\":1,\"520\":1,\"543\":1,\"546\":1,\"682\":1,\"906\":5,\"927\":1,\"1166\":1}}],[\"当业务处理时间比锁的过期时间长\",{\"1\":{\"87\":1}}],[\"当value为0或者宕机\",{\"1\":{\"86\":1,\"114\":1}}],[\"当你收获一个又一个的star时\",{\"1\":{\"1150\":1}}],[\"当你觉得你一无所知\",{\"1\":{\"1150\":1}}],[\"当你工作或者学习的时候\",{\"1\":{\"1148\":1}}],[\"当你有了一个清晰的目标的时候\",{\"1\":{\"1144\":1}}],[\"当你尝试替换文本时\",{\"0\":{\"1046\":1}}],[\"当你运行\",{\"1\":{\"990\":1}}],[\"当你运行这个配置时\",{\"1\":{\"537\":1}}],[\"当你的工作换一个刚毕业的学生都能做的时候\",{\"1\":{\"1139\":1}}],[\"当你的逻辑需求是查到所有名字是\",{\"1\":{\"923\":1}}],[\"当你的应用程序或网站收到认证服务器的认证结果时\",{\"1\":{\"153\":1}}],[\"当你理解了索引的模型后\",{\"1\":{\"916\":1}}],[\"当你需要让整个库处于只读状态的时候\",{\"1\":{\"927\":1}}],[\"当你需要扩容的时候\",{\"1\":{\"901\":1}}],[\"当你需要在本地加载特定文件类型时\",{\"1\":{\"706\":1}}],[\"当你在docker容器中进行文件挂载时\",{\"1\":{\"789\":1}}],[\"当你在浏览器中输入github\",{\"1\":{\"77\":1}}],[\"当你将这行命令放入一个\",{\"1\":{\"787\":1}}],[\"当你通过\",{\"1\":{\"706\":1}}],[\"当你使用\",{\"1\":{\"645\":1}}],[\"当你向集群添加新数据时\",{\"1\":{\"265\":1}}],[\"当你请求像github\",{\"1\":{\"77\":1}}],[\"当cdn\",{\"1\":{\"77\":1}}],[\"当然了\",{\"1\":{\"1161\":1}}],[\"当然也有耿直的面试官直接下一题\",{\"1\":{\"1135\":1}}],[\"当然也是给程序员看的\",{\"1\":{\"688\":1,\"890\":1}}],[\"当然面试官可能依然按自己的思路问你\",{\"1\":{\"1134\":1}}],[\"当然还有一种取巧的办法是拿美国的工资\",{\"1\":{\"1106\":1}}],[\"当然你如果只是\",{\"1\":{\"1009\":1}}],[\"当然你得到的这个就是剩余的生存时间\",{\"1\":{\"76\":1}}],[\"当然是判断其他条件是否满足\",{\"1\":{\"924\":1}}],[\"当然事无绝对\",{\"1\":{\"918\":1}}],[\"当然有分裂就有合并\",{\"1\":{\"918\":1}}],[\"当然为了维持\",{\"1\":{\"916\":1}}],[\"当然在可重复读隔离级别下\",{\"1\":{\"905\":1}}],[\"当然\",{\"1\":{\"900\":1,\"922\":1,\"924\":1,\"930\":1,\"931\":1,\"935\":1,\"1144\":1,\"1145\":2,\"1150\":2,\"1161\":1}}],[\"当然解决跨域也可以在后端处理\",{\"1\":{\"882\":1}}],[\"当然想设简单一点的密码也可以\",{\"1\":{\"802\":1}}],[\"当然这部分属于\",{\"1\":{\"929\":1}}],[\"当然这里不要混淆了\",{\"1\":{\"798\":1,\"984\":1}}],[\"当然这30分钟可以根据产品灵活设定\",{\"1\":{\"70\":1}}],[\"当然如果发生异常\",{\"0\":{\"701\":1}}],[\"当然具体回收时机还是要看垃圾收集策略\",{\"1\":{\"636\":1}}],[\"当然主键也可以用column\",{\"1\":{\"419\":1}}],[\"当源主机希望测试与目标主机的连接是否正常时\",{\"1\":{\"76\":1}}],[\"当主机发送一个icmp回显请求\",{\"1\":{\"76\":1}}],[\"当请求http\",{\"1\":{\"73\":2}}],[\"当用户再次访问时就不需要再次请求这些资源了\",{\"1\":{\"539\":1,\"1083\":1}}],[\"当用户点击登录按钮时\",{\"1\":{\"153\":1}}],[\"当用户访问其他应用程序或网站时\",{\"1\":{\"153\":1}}],[\"当用户访问\",{\"1\":{\"73\":2}}],[\"当用户在同一网站的多个页面之间转换时\",{\"1\":{\"49\":1}}],[\"当成匹配规则了\",{\"1\":{\"71\":1}}],[\"每学一个模式\",{\"1\":{\"1150\":1}}],[\"每学一个小的知识点\",{\"1\":{\"1144\":1}}],[\"每学完一章一定要用git提交一次\",{\"1\":{\"261\":1}}],[\"每周提供数小时时间与家人团聚\",{\"1\":{\"1104\":1}}],[\"每样细说咱就伤感情了\",{\"1\":{\"1104\":1}}],[\"每1个地址对应内存里的1个byte字节\",{\"1\":{\"1091\":1}}],[\"每10秒钟检查一次\",{\"1\":{\"113\":1}}],[\"每10秒检查一次\",{\"1\":{\"86\":1,\"114\":1}}],[\"每当一个事务被锁的时候\",{\"1\":{\"932\":1}}],[\"每当用户进行会话操作时\",{\"1\":{\"152\":1}}],[\"每当用户发出请求时\",{\"1\":{\"49\":1}}],[\"每碰到一个新数据库\",{\"1\":{\"916\":1}}],[\"每set一个值会有算法计算对应的插槽值\",{\"1\":{\"865\":1}}],[\"每秒限制10个请求\",{\"1\":{\"850\":1}}],[\"每使用一台新主机进行git远程操作\",{\"1\":{\"798\":1,\"984\":1}}],[\"每使用一台主机都要配\",{\"1\":{\"798\":1,\"984\":1}}],[\"每种身份\",{\"1\":{\"786\":1}}],[\"每打开一个终端就可以用一个新的用户登录\",{\"1\":{\"785\":1}}],[\"每5秒执行一次\",{\"1\":{\"730\":1}}],[\"每加一个数据源就重写一遍放到\",{\"1\":{\"551\":1}}],[\"每一天\",{\"1\":{\"1142\":1}}],[\"每一种分布式锁解决方案都有各自的优缺点\",{\"1\":{\"868\":1}}],[\"每一集一道面试题\",{\"1\":{\"777\":1}}],[\"每一次都从容器中拿\",{\"1\":{\"517\":1}}],[\"每一个表的数据量都很大\",{\"1\":{\"960\":1}}],[\"每一个虚线箭头表示回表一次\",{\"1\":{\"924\":1}}],[\"每一个索引在\",{\"1\":{\"917\":1}}],[\"每一个远程的小事务用\",{\"1\":{\"608\":1}}],[\"每一个微服务都导入actuator\",{\"1\":{\"600\":1}}],[\"每一个nacos都有自己嵌入式数据库就会数据不一致\",{\"1\":{\"599\":1}}],[\"每一个应用都应该有名字\",{\"1\":{\"595\":1}}],[\"每一个model都有一个\",{\"1\":{\"591\":1}}],[\"每一个模块都有一样的\",{\"1\":{\"561\":1}}],[\"每一个商品都有它的参与秒杀的库存信号量\",{\"1\":{\"202\":1}}],[\"每一个需要缓存的数据我们都来指定要放到那个名字的缓存\",{\"1\":{\"123\":1}}],[\"每导入一个\",{\"1\":{\"466\":1}}],[\"每天提交的都会actions跑看有没有问题\",{\"1\":{\"994\":1}}],[\"每天的生活像抱着一个空罐子赛跑\",{\"1\":{\"980\":1}}],[\"每天\",{\"1\":{\"283\":1}}],[\"每隔一段时间触发读的主动更新即可\",{\"1\":{\"118\":1}}],[\"每隔10s续期续成30s看下行\",{\"1\":{\"115\":1}}],[\"每层楼都有路由器\",{\"1\":{\"77\":1}}],[\"每次上传更新代码\",{\"1\":{\"1161\":1}}],[\"每次数据插入或删除都可能会导致rowid的变化\",{\"1\":{\"967\":1}}],[\"每次事务更新数据的时候\",{\"1\":{\"935\":1}}],[\"每次插入一条新记录\",{\"1\":{\"918\":1}}],[\"每次记账都得翻账本\",{\"1\":{\"899\":1}}],[\"每次需要查看日志\",{\"1\":{\"734\":1}}],[\"每次查询之后都会清空缓存\",{\"1\":{\"449\":1}}],[\"每次都会将数据加在\",{\"1\":{\"972\":1}}],[\"每次都要从主内存拿到最新的值到自己的本地内存\",{\"1\":{\"305\":1}}],[\"每次都那样写缓存太麻烦了\",{\"1\":{\"121\":1}}],[\"每次使用它都到主存中进行读取\",{\"1\":{\"283\":2}}],[\"每次处理数据\",{\"1\":{\"172\":1}}],[\"每次执行结果不一样\",{\"1\":{\"164\":1}}],[\"每次请求进来从spring\",{\"1\":{\"157\":1}}],[\"每次请求的时候走过滤器判断token是否过期\",{\"1\":{\"70\":1}}],[\"每次通过jsessionid取出保存的数据\",{\"1\":{\"140\":1}}],[\"每次重新赋值config时\",{\"1\":{\"125\":1}}],[\"每次调用方法时都会返回一个新的rediscacheconfiguration对象\",{\"1\":{\"125\":1}}],[\"每次调用需要缓存功能的方法时\",{\"1\":{\"122\":1}}],[\"每次更新accesstoken都会刷新refresh\",{\"1\":{\"70\":1}}],[\"每次操作都前端直接检验下token有效期\",{\"1\":{\"70\":1}}],[\"每个知识点\",{\"1\":{\"1150\":1}}],[\"每个学校应该都有相关的网站吧\",{\"1\":{\"1150\":1}}],[\"每个人都应该有一套自己的计划\",{\"1\":{\"1142\":1}}],[\"每个人都有购物车\",{\"1\":{\"155\":1}}],[\"每个公司不同\",{\"1\":{\"1108\":1}}],[\"每个依赖项都有一个对应的\",{\"1\":{\"1012\":1}}],[\"每个版本有自己的\",{\"1\":{\"935\":1}}],[\"每个新来的被堵住的线程\",{\"1\":{\"932\":1}}],[\"每个块包含两个数据\",{\"1\":{\"916\":1}}],[\"每个叶子结点就是一个块\",{\"1\":{\"916\":1}}],[\"每个节点的左儿子小于父节点\",{\"1\":{\"916\":1}}],[\"每个事务都可以读取到自己所需要的数据版本\",{\"1\":{\"906\":1}}],[\"每个文件的大小是\",{\"1\":{\"899\":1}}],[\"每个分身检查一个学生的答案是否正确\",{\"1\":{\"849\":1}}],[\"每个虚拟主机的配置是不一样的\",{\"1\":{\"823\":1}}],[\"每个一套环境的感觉\",{\"1\":{\"823\":1}}],[\"每个用户可以通过登录到其自己的用户账户\",{\"1\":{\"785\":1}}],[\"每个用户经过我们的应用认证之后\",{\"1\":{\"52\":1}}],[\"每个方法在运行时都会创建一个对应的栈帧\",{\"1\":{\"778\":1}}],[\"每个方法都要到业务里处理异常太繁琐了\",{\"1\":{\"240\":1}}],[\"每个十六进制位对应4个二进制位\",{\"1\":{\"685\":1}}],[\"每个角色都被分配了一组权限\",{\"1\":{\"630\":1}}],[\"每个权限定义了对系统资源的访问规则\",{\"1\":{\"630\":1}}],[\"每个微服务\",{\"1\":{\"608\":1}}],[\"每个微服务创建自己的命名空间\",{\"1\":{\"598\":1}}],[\"每个微服务都可能存在不同的机器上\",{\"1\":{\"183\":1}}],[\"每个业务方法对应一个兜底的方法\",{\"1\":{\"584\":1}}],[\"每个服务运行在自己的进程内\",{\"1\":{\"554\":1}}],[\"每个服务运行在其独立的进程中\",{\"1\":{\"553\":1}}],[\"每个服务放的机器还不一样\",{\"1\":{\"183\":1}}],[\"每个数据库或数据表的数据量都比较小\",{\"1\":{\"960\":1}}],[\"每个数据库都要设好自己对应的事务管理器\",{\"1\":{\"551\":1,\"1166\":1}}],[\"每个数据包大小限制在64k内\",{\"1\":{\"688\":1}}],[\"每个数据片段存储在一个单独的\",{\"1\":{\"103\":1}}],[\"每个参数使用空格分隔\",{\"1\":{\"547\":1}}],[\"每个自动配置类按照条件进行生效\",{\"1\":{\"485\":1}}],[\"每个创建出来的对象不是直接返回的\",{\"1\":{\"465\":1}}],[\"每个增删改标签的\",{\"1\":{\"449\":1}}],[\"每个select标签都有usecache=\",{\"1\":{\"449\":1}}],[\"每个元素之间的分隔符\",{\"1\":{\"436\":1}}],[\"每个车停3秒\",{\"1\":{\"342\":1,\"343\":1}}],[\"每个阶段由业务代码控制\",{\"1\":{\"186\":1}}],[\"每个线程在获取锁时会先查看此锁维护的等待队列\",{\"1\":{\"318\":1}}],[\"每个线程对象都有自己的\",{\"1\":{\"156\":1}}],[\"每个线程可以维护自己的局部变量\",{\"1\":{\"156\":1}}],[\"每个线程都有自己的虚拟机栈\",{\"1\":{\"778\":1}}],[\"每个线程都有自己的\",{\"1\":{\"156\":1}}],[\"每个线程拥有自己的一个变量副本\",{\"1\":{\"156\":1}}],[\"每个请求会经过过滤器进行权限校验\",{\"1\":{\"887\":1}}],[\"每个请求都由一个独立的线程处理\",{\"1\":{\"156\":1}}],[\"每个请求的都是一个单独的对象\",{\"1\":{\"80\":1}}],[\"每个键也被映射到一个哈希值\",{\"1\":{\"103\":1}}],[\"每个\",{\"1\":{\"30\":1,\"103\":1,\"477\":1,\"520\":1,\"823\":1}}],[\"会做为主页内容渲染\",{\"1\":{\"1161\":1}}],[\"会想尽办法压低工资\",{\"1\":{\"1130\":1}}],[\"会跳到下面任务栏指定的应用\",{\"1\":{\"1037\":1}}],[\"会跳到这个框架会自带一个登陆静态页面\",{\"1\":{\"616\":1}}],[\"会增加部署包的大小\",{\"1\":{\"1012\":1}}],[\"会直接先从\",{\"1\":{\"1009\":1}}],[\"会直到事务提交才释放\",{\"1\":{\"929\":1}}],[\"会让你无意间地快速切过去\",{\"1\":{\"1005\":1}}],[\"会让其中一个请求进行转发\",{\"1\":{\"587\":1}}],[\"会从1024开始\",{\"1\":{\"998\":1}}],[\"会更高效\",{\"1\":{\"980\":1}}],[\"会消耗更多的\",{\"1\":{\"969\":1}}],[\"会统计该字段在表中出现的次数\",{\"1\":{\"956\":1}}],[\"会人为造成锁冲突\",{\"1\":{\"933\":1}}],[\"会怎么样呢\",{\"1\":{\"924\":1,\"927\":1}}],[\"会扫描多少行\",{\"1\":{\"921\":1}}],[\"会扫描指定的包及其子包中的所有类\",{\"1\":{\"482\":1}}],[\"会占用\",{\"1\":{\"920\":1}}],[\"会适用n叉树\",{\"1\":{\"916\":1}}],[\"会使得查询操作的时间复杂度从\",{\"1\":{\"916\":1}}],[\"会使用默认的filtersecurityinterceptor来进行权限校验\",{\"1\":{\"629\":1}}],[\"会使用\",{\"1\":{\"11\":1}}],[\"会出现很多误伤\",{\"1\":{\"932\":1}}],[\"会出现同一个值的情况\",{\"1\":{\"914\":1}}],[\"会出现什么情况呢\",{\"1\":{\"901\":1}}],[\"会降低增\",{\"1\":{\"975\":1}}],[\"会降低\",{\"1\":{\"911\":1}}],[\"会记录所有的逻辑操作\",{\"1\":{\"901\":1}}],[\"会记录事务日志并持久化事务日志到某种存储介质上比如本地文件\",{\"1\":{\"186\":1}}],[\"会检查jwt令牌的有效性和过期时间\",{\"1\":{\"890\":1}}],[\"会以流的形式转成图片给前端\",{\"1\":{\"878\":1}}],[\"会写入\",{\"1\":{\"878\":1}}],[\"会加\",{\"1\":{\"905\":2}}],[\"会加上业务前缀做区分\",{\"1\":{\"876\":1}}],[\"会加载\",{\"1\":{\"543\":1}}],[\"会发现\",{\"1\":{\"1005\":1}}],[\"会发现数据库为\",{\"1\":{\"860\":1}}],[\"会发现8001和8002交替出现\",{\"1\":{\"591\":1}}],[\"会单独fork一个子进程来进行持久化\",{\"1\":{\"859\":1}}],[\"会由\",{\"1\":{\"837\":1}}],[\"会不停监听这个队列中的消息进行消费\",{\"1\":{\"831\":1}}],[\"会判断这是两个元素是相同的\",{\"1\":{\"766\":1}}],[\"会创建一个新的栈帧并压入虚拟机栈顶\",{\"1\":{\"778\":1}}],[\"会创建一个statementhandler对象\",{\"1\":{\"465\":1}}],[\"会创建\",{\"1\":{\"724\":1}}],[\"会保存该字符串的引用\",{\"1\":{\"722\":1}}],[\"会保存到token里面\",{\"1\":{\"626\":1}}],[\"会通知应用程序进行相应的处理\",{\"1\":{\"712\":1}}],[\"会通过类加载器\",{\"1\":{\"635\":1}}],[\"会一直阻塞\",{\"1\":{\"711\":1}}],[\"会经历两个步骤\",{\"1\":{\"709\":1}}],[\"会尝试将其解析为有效的\",{\"1\":{\"706\":1}}],[\"会影响主线程\",{\"0\":{\"701\":1}}],[\"会默认的在studytest默认的构造函数中\",{\"1\":{\"691\":1}}],[\"会默认将拦截器添加到拦截器链中\",{\"1\":{\"534\":1}}],[\"会缓存一定的时间\",{\"1\":{\"688\":1}}],[\"会看成是不是有个类叫e\",{\"1\":{\"688\":1}}],[\"会释放同步监视器\",{\"1\":{\"687\":1}}],[\"会进行去重\",{\"1\":{\"766\":1}}],[\"会进行缓存\",{\"1\":{\"686\":1}}],[\"会进行重试\",{\"1\":{\"186\":1}}],[\"会改变列表的大小\",{\"1\":{\"645\":1}}],[\"会很有帮助\",{\"1\":{\"637\":1}}],[\"会确保在抛出\",{\"1\":{\"636\":1}}],[\"会拦截你所有\",{\"1\":{\"616\":1}}],[\"会报错\",{\"1\":{\"593\":1,\"771\":1,\"787\":1,\"959\":1}}],[\"会去请求该微服务的相关信息\",{\"1\":{\"576\":1}}],[\"会把两个结果集的所有数据放到临时表中后再进行去重操作\",{\"1\":{\"947\":1}}],[\"会把拼接优化成stringbuilder的append方法\",{\"1\":{\"724\":1}}],[\"会把这一过程转化为stringbuilder的append方法\",{\"1\":{\"720\":1}}],[\"会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上\",{\"1\":{\"564\":1}}],[\"会把一个个单词分开\",{\"1\":{\"281\":1}}],[\"会接收到请求并转发给handlermapping\",{\"1\":{\"543\":1}}],[\"会抛出异常\",{\"1\":{\"543\":1}}],[\"会先到查询缓存看看\",{\"1\":{\"894\":1}}],[\"会先为依赖的\",{\"1\":{\"543\":1}}],[\"会先进行加锁\",{\"1\":{\"329\":1}}],[\"会调用\",{\"1\":{\"543\":1}}],[\"会调用方法\",{\"1\":{\"123\":1}}],[\"会为\",{\"1\":{\"543\":1}}],[\"会为临时用户生成一个name为user\",{\"1\":{\"156\":1}}],[\"会继续创建依赖于当前\",{\"1\":{\"543\":1}}],[\"会在查询缓存返回结果的时候\",{\"1\":{\"897\":1}}],[\"会在字符串常量池创建一个引用\",{\"1\":{\"724\":1}}],[\"会在第一次引用该项的\",{\"1\":{\"722\":1}}],[\"会在堆中创建对应这些\",{\"1\":{\"722\":1}}],[\"会在注册中心上获取注册信息服务列表之后缓存到\",{\"1\":{\"573\":1}}],[\"会在容器中查找并注入该\",{\"1\":{\"543\":1}}],[\"会在初始化时自动注册一个拦截器\",{\"1\":{\"534\":1}}],[\"会在其前面加上\",{\"1\":{\"417\":1}}],[\"会依赖导入\",{\"1\":{\"525\":1}}],[\"会根据路由键匹配的来找\",{\"1\":{\"823\":1}}],[\"会根据\",{\"1\":{\"609\":1}}],[\"会根据不同的策略\",{\"1\":{\"498\":1}}],[\"会根据请求中携带的\",{\"1\":{\"152\":1}}],[\"会将数据页做合并\",{\"1\":{\"918\":1}}],[\"会将常量表达式计算求值\",{\"1\":{\"725\":1}}],[\"会将它的下一个指针指向原来的第一个元素\",{\"1\":{\"694\":1}}],[\"会将它自己插入的元素\",{\"1\":{\"694\":1}}],[\"会将依赖的jar包全部打包进去\",{\"1\":{\"559\":1}}],[\"会将\",{\"1\":{\"411\":1}}],[\"会将这个\",{\"1\":{\"152\":1}}],[\"会阻塞\",{\"1\":{\"372\":1}}],[\"会因为执行while循环不断的消耗cpu资源\",{\"1\":{\"325\":1}}],[\"会得到null\",{\"1\":{\"301\":1}}],[\"会用只是\",{\"1\":{\"283\":1}}],[\"会对通配符\",{\"1\":{\"787\":1}}],[\"会对于查询条件进行分词\",{\"1\":{\"276\":1}}],[\"会对key对应的value加1\",{\"1\":{\"86\":1,\"114\":1}}],[\"会挨锤的\",{\"1\":{\"252\":1}}],[\"会变成\",{\"1\":{\"220\":1}}],[\"会变量提升\",{\"1\":{\"216\":1}}],[\"会的\",{\"1\":{\"186\":1}}],[\"会执行类中的静态初始化器\",{\"1\":{\"679\":1}}],[\"会执行\",{\"1\":{\"186\":2,\"658\":1}}],[\"会跟着a\",{\"1\":{\"179\":1}}],[\"会导致主从延迟\",{\"1\":{\"927\":1}}],[\"会导致这把锁一直不会释放\",{\"1\":{\"868\":1}}],[\"会导致问题\",{\"1\":{\"546\":1}}],[\"会导致\",{\"1\":{\"539\":1,\"635\":1}}],[\"会导致数据库性能损失\",{\"1\":{\"431\":1}}],[\"会导致应用程序的暂停\",{\"1\":{\"389\":1}}],[\"会导致事务设置失效\",{\"1\":{\"179\":1}}],[\"会导致业务代码不间断的重试\",{\"1\":{\"82\":1}}],[\"会有哪些不同的返回结果\",{\"1\":{\"905\":1}}],[\"会有什么问题\",{\"1\":{\"694\":1}}],[\"会有很多流量上来\",{\"1\":{\"602\":1}}],[\"会有新的token产生\",{\"1\":{\"167\":1}}],[\"会有一个提示码\",{\"1\":{\"76\":1}}],[\"会自动选取系统认为的词组\",{\"1\":{\"998\":1}}],[\"会自动处理\",{\"1\":{\"990\":1}}],[\"会自动释放这个全局锁\",{\"1\":{\"927\":1}}],[\"会自动带上\",{\"1\":{\"608\":1}}],[\"会自动执行\",{\"1\":{\"546\":1,\"1166\":1}}],[\"会自动调用\",{\"1\":{\"538\":1,\"1082\":1}}],[\"会自动调用该方法\",{\"1\":{\"501\":1}}],[\"会自动切换到使用\",{\"1\":{\"182\":1}}],[\"会自动更新\",{\"1\":{\"152\":1}}],[\"会自动将\",{\"1\":{\"152\":1}}],[\"会自动将容器中已经有的对象传入到\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"会话id\",{\"1\":{\"581\":1}}],[\"会话就会自动续期\",{\"1\":{\"152\":1}}],[\"会话过期时间重置\",{\"1\":{\"152\":1}}],[\"会话跟踪技术就可以解决这个问题\",{\"1\":{\"49\":1}}],[\"会话跟踪是一种灵活\",{\"1\":{\"49\":1}}],[\"会被\",{\"1\":{\"928\":1}}],[\"会被锁住\",{\"1\":{\"905\":1,\"934\":1}}],[\"会被用来作为\",{\"1\":{\"152\":1}}],[\"会被别人恶意调用\",{\"1\":{\"129\":1}}],[\"会生成一个或多个字节码文件\",{\"1\":{\"688\":1}}],[\"会生成一个虚拟dom树\",{\"1\":{\"218\":1}}],[\"会生成一个唯一的\",{\"1\":{\"152\":1}}],[\"会生成一个icmp回显回复\",{\"1\":{\"76\":1}}],[\"会拼个code\",{\"1\":{\"138\":1}}],[\"会请求到真实的github服务器吗\",{\"1\":{\"77\":1}}],[\"会返回表中的所有列\",{\"1\":{\"969\":1}}],[\"会返回一个\",{\"1\":{\"543\":1}}],[\"会返回\",{\"1\":{\"73\":2,\"503\":1}}],[\"会访问不到\",{\"1\":{\"73\":1}}],[\"会过期\",{\"1\":{\"70\":1}}],[\"就去接触一下\",{\"1\":{\"1150\":1}}],[\"就去查了一下\",{\"1\":{\"660\":1}}],[\"就跟着视频一步一步来\",{\"1\":{\"1150\":1}}],[\"就抽时间先搞定\",{\"1\":{\"1150\":1}}],[\"就和一台电脑到你手里只能打游戏\",{\"1\":{\"1162\":1}}],[\"就和文件夹似的\",{\"1\":{\"1145\":1}}],[\"就和平时一样静态方法属于类\",{\"1\":{\"686\":1}}],[\"就自己绘制一个该知识点的脑图\",{\"1\":{\"1144\":1}}],[\"就在下一题中补回来\",{\"1\":{\"1135\":1}}],[\"就在title网站去学\",{\"1\":{\"1015\":1}}],[\"就没有资格否定你\",{\"1\":{\"1132\":1}}],[\"就值这个价\",{\"1\":{\"1132\":1}}],[\"就说明他默认你可以走\",{\"1\":{\"1119\":1}}],[\"就你一个前端\",{\"1\":{\"1109\":1}}],[\"就到资源监视器中搜索句柄搜这个文件夹名字\",{\"1\":{\"1041\":1}}],[\"就全回来了\",{\"1\":{\"1005\":1}}],[\"就尽量一次到位\",{\"1\":{\"961\":1}}],[\"就得到了分表后的索引值\",{\"1\":{\"961\":1}}],[\"就得要求这个对象是可序列化的\",{\"1\":{\"688\":1}}],[\"就组成了当前事务的一致性视图\",{\"1\":{\"935\":1}}],[\"就认\",{\"1\":{\"935\":1}}],[\"就认为是true\",{\"1\":{\"653\":1}}],[\"就回滚\",{\"1\":{\"932\":1}}],[\"就挂了\",{\"1\":{\"931\":1}}],[\"就已经包含了三个字段了呀\",{\"1\":{\"925\":1}}],[\"就发现\",{\"1\":{\"927\":1}}],[\"就发现自己接手维护的库里面\",{\"1\":{\"925\":1}}],[\"就发送给redis执行脚本\",{\"1\":{\"115\":1}}],[\"就只需要回表\",{\"1\":{\"924\":1}}],[\"就只会在这个位置才放入二级缓存\",{\"1\":{\"447\":1}}],[\"就只会捕获\",{\"1\":{\"49\":1}}],[\"就相对麻烦了\",{\"1\":{\"918\":1}}],[\"就相当于这台服务器挂掉了\",{\"1\":{\"862\":1}}],[\"就相当于一台经过这4层一层层数据封装\",{\"1\":{\"688\":1}}],[\"就相当于事务b把a的事又干一遍\",{\"1\":{\"80\":1}}],[\"就找到大于\",{\"1\":{\"915\":1}}],[\"就找对应的兜底降级方法\",{\"1\":{\"604\":1}}],[\"就必须让查询过程访问尽量少的数据块\",{\"1\":{\"916\":1}}],[\"就必须全部扫描一遍了\",{\"1\":{\"914\":1}}],[\"就必须将当前值依次执行图中所有的回滚操作得到\",{\"1\":{\"906\":1}}],[\"就导致了意外的长事务\",{\"1\":{\"907\":1}}],[\"就有了\",{\"1\":{\"905\":1}}],[\"就有可能出现死锁的现象\",{\"1\":{\"352\":1}}],[\"就可能会什么都不想做\",{\"1\":{\"1147\":1}}],[\"就可能出现脏读\",{\"1\":{\"905\":1}}],[\"就可以计划离职了\",{\"1\":{\"1118\":1}}],[\"就可以开多少个线程\",{\"1\":{\"1095\":1}}],[\"就可以将这个库设置为可选依赖\",{\"1\":{\"1010\":1}}],[\"就可以将哈希码映射到数组的索引上\",{\"1\":{\"739\":1}}],[\"就可以看到所有自己定义的命令了\",{\"1\":{\"1005\":1}}],[\"就可以把userdb切分为结构相同的多个userdb\",{\"1\":{\"960\":1}}],[\"就可以利用索引来加速检索\",{\"1\":{\"923\":1}}],[\"就可以存\",{\"1\":{\"916\":1}}],[\"就可以找到其对应的值即\",{\"1\":{\"914\":1}}],[\"就可以保证即使数据库发生异常重启\",{\"1\":{\"899\":1}}],[\"就可以保证30分钟内有操作就可以无感刷新\",{\"1\":{\"70\":1}}],[\"就可以直接返回结果\",{\"1\":{\"894\":1}}],[\"就可以直接在本80调用8001的\",{\"1\":{\"576\":1}}],[\"就可以绕过浏览器的同源策略\",{\"1\":{\"883\":1}}],[\"就可以再\",{\"1\":{\"810\":1}}],[\"就可以实时看到这个\",{\"1\":{\"782\":1}}],[\"就可以去实现自动装配\",{\"1\":{\"731\":1}}],[\"就可以暂时保留缓存\",{\"1\":{\"636\":1}}],[\"就可以在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json\",{\"1\":{\"630\":1}}],[\"就可以参照二级缓存中的内容\",{\"1\":{\"446\":1}}],[\"就可以避免出现这种死锁的问题\",{\"1\":{\"321\":1}}],[\"就可以删除对应的事务日志\",{\"1\":{\"186\":1}}],[\"就可以通过这个认证令牌来验证用户的身份\",{\"1\":{\"153\":1}}],[\"就打开表继续执行\",{\"1\":{\"897\":1}}],[\"就知道你要做什么了\",{\"1\":{\"896\":1}}],[\"就要提前做好准备\",{\"1\":{\"1150\":1}}],[\"就要拷贝\",{\"1\":{\"935\":1}}],[\"就要看看它所依赖的线程有没有被别人锁住\",{\"1\":{\"932\":1}}],[\"就要遍历20个块\",{\"1\":{\"916\":1}}],[\"就要想到主从复制\",{\"1\":{\"900\":1}}],[\"就要做\",{\"1\":{\"895\":1}}],[\"就要开始真正执行语句了\",{\"1\":{\"895\":1}}],[\"就要连续执行完\",{\"1\":{\"302\":1}}],[\"就被一个更新全清空了\",{\"1\":{\"894\":1}}],[\"就表示现在系统里面有一个空闲连接\",{\"1\":{\"893\":1}}],[\"就进行请求拦截\",{\"1\":{\"888\":1}}],[\"就修正为\",{\"1\":{\"887\":1}}],[\"就这个错误\",{\"1\":{\"876\":1}}],[\"就学自己想学感兴趣的时间片小的东西吧\",{\"1\":{\"876\":1}}],[\"就活用泛型+lambda写这个工具类\",{\"1\":{\"865\":1,\"876\":1}}],[\"就活该过期重登录\",{\"1\":{\"70\":1}}],[\"就2主一从了\",{\"1\":{\"864\":1}}],[\"就都被锁住\",{\"1\":{\"928\":1}}],[\"就都不会成功\",{\"1\":{\"854\":1}}],[\"就都会直接更新不会对比数据\",{\"1\":{\"271\":1}}],[\"就触发这个失败回调\",{\"1\":{\"836\":1}}],[\"就等同于\",{\"0\":{\"784\":1}}],[\"就成了单例\",{\"1\":{\"779\":1}}],[\"就按照标准交付自家特色的芯片\",{\"1\":{\"740\":1}}],[\"就违反了开闭原则\",{\"1\":{\"740\":1}}],[\"就\",{\"1\":{\"722\":1}}],[\"就上场了\",{\"1\":{\"712\":1}}],[\"就行\",{\"1\":{\"706\":1,\"1022\":1}}],[\"就行了\",{\"1\":{\"628\":1}}],[\"就形成了一个链表\",{\"1\":{\"694\":1}}],[\"就类似sql执行数据库查询\",{\"1\":{\"689\":1}}],[\"就作为class的一个实例\",{\"1\":{\"688\":1}}],[\"就作废了\",{\"1\":{\"70\":1}}],[\"就加在链表的最后\",{\"1\":{\"688\":1}}],[\"就直接下一题\",{\"1\":{\"1135\":1}}],[\"就直接强制push了\",{\"1\":{\"987\":1}}],[\"就直接返回给执行器\",{\"1\":{\"900\":1}}],[\"就直接取出来赋值给a2\",{\"1\":{\"686\":1}}],[\"就直接开新线程执行\",{\"1\":{\"363\":1}}],[\"就无法在接口中添加新的方法\",{\"1\":{\"686\":1}}],[\"就因为没有继承关系的约束\",{\"1\":{\"657\":1}}],[\"就像书的目录一样\",{\"1\":{\"909\":1}}],[\"就像这里的数组时\",{\"1\":{\"721\":1}}],[\"就像我之前提到的在本地运行时使用\",{\"1\":{\"706\":1}}],[\"就像我前面提到的\",{\"1\":{\"635\":1}}],[\"就像以后自己有孩子了不可能学语言让他从甲骨文开始\",{\"1\":{\"688\":1}}],[\"就像一个出水口一个入水口\",{\"1\":{\"601\":1}}],[\"就像volatile中使用内存屏障一样\",{\"1\":{\"329\":1}}],[\"就后面学alibaba\",{\"1\":{\"594\":1}}],[\"就略过这节\",{\"1\":{\"594\":1}}],[\"就算你能把一个知识点吹得天花乱坠\",{\"1\":{\"1144\":1}}],[\"就算是有现成的图\",{\"1\":{\"1144\":1}}],[\"就算了吧\",{\"1\":{\"1122\":1}}],[\"就算给你加薪\",{\"1\":{\"1120\":1}}],[\"就算地址总线有36个\",{\"1\":{\"1093\":1}}],[\"就算配了超时时间\",{\"1\":{\"576\":1}}],[\"就算属性和查询后起的别名一样也不行\",{\"1\":{\"422\":1}}],[\"就如我第二句说的\",{\"1\":{\"568\":1}}],[\"就好了\",{\"1\":{\"1001\":1}}],[\"就好比arraylist也是线程不安全的\",{\"1\":{\"694\":1}}],[\"就好\",{\"1\":{\"556\":1}}],[\"就取不到容器中的\",{\"1\":{\"529\":1}}],[\"就给调成false\",{\"1\":{\"517\":1}}],[\"就给你纠正过来\",{\"1\":{\"483\":1}}],[\"就使用notepad++\",{\"1\":{\"1150\":1}}],[\"就使用它\",{\"1\":{\"636\":1}}],[\"就使用到了模板模式\",{\"1\":{\"498\":1}}],[\"就使用30\",{\"1\":{\"115\":1}}],[\"就势来一句\",{\"1\":{\"492\":1}}],[\"就搞完\",{\"1\":{\"489\":1}}],[\"就某种场景\",{\"1\":{\"477\":1}}],[\"就简单的测了一下\",{\"1\":{\"465\":1}}],[\"就能直接到内存的对应位置去访问数据\",{\"1\":{\"1090\":1}}],[\"就能直接跳到17楼\",{\"1\":{\"1090\":1}}],[\"就能秒级\",{\"1\":{\"935\":1}}],[\"就能表明对象还\",{\"1\":{\"636\":1}}],[\"就能取出变量的值也就是当前遍历出的元素\",{\"1\":{\"436\":1}}],[\"就能够正常提交\",{\"1\":{\"303\":1}}],[\"就把最可能造成锁冲突放后面\",{\"1\":{\"931\":1}}],[\"就把部门信息查询出来\",{\"1\":{\"429\":1}}],[\"就把map对象转一下\",{\"1\":{\"105\":1}}],[\"就将再进来的任务放入阻塞队列中\",{\"1\":{\"363\":1}}],[\"就让计数器的值减1\",{\"1\":{\"334\":1}}],[\"就再采用类似公平锁那种方式\",{\"1\":{\"318\":1}}],[\"就占用锁\",{\"1\":{\"318\":1}}],[\"就来到最大的类\",{\"1\":{\"240\":1}}],[\"就一个options请求过去后\",{\"1\":{\"230\":1}}],[\"就代表这个包下面所有的\",{\"1\":{\"229\":1}}],[\"就需要进行页分裂\",{\"1\":{\"972\":1}}],[\"就需要重连\",{\"1\":{\"893\":1}}],[\"就需要配置ssh\",{\"1\":{\"798\":1,\"984\":1}}],[\"就需要先创好文件\",{\"1\":{\"794\":1}}],[\"就需要修改代码\",{\"1\":{\"740\":1}}],[\"就需要我们理解怎么排查幻象引用的堆积问题\",{\"1\":{\"637\":1}}],[\"就需要使用构造函数来创建正则表达式\",{\"1\":{\"216\":1}}],[\"就需要人工介入处理了\",{\"1\":{\"186\":1}}],[\"就参考这个例子\",{\"1\":{\"208\":1}}],[\"就不乱说了\",{\"1\":{\"1150\":1}}],[\"就不能用this\",{\"1\":{\"667\":1}}],[\"就不会出现这个问题\",{\"1\":{\"932\":1}}],[\"就不会有一个中文劈成两半的情况\",{\"1\":{\"688\":1}}],[\"就不会被security拦截\",{\"1\":{\"627\":1}}],[\"就不会执行\",{\"1\":{\"170\":1}}],[\"就不需要适配器类了\",{\"1\":{\"471\":1}}],[\"就不应该再有其它线程可以对该资源进行读或写\",{\"1\":{\"326\":1}}],[\"就不用我们手动转换\",{\"1\":{\"830\":1}}],[\"就不用\",{\"1\":{\"589\":1}}],[\"就不用显示\",{\"1\":{\"247\":1}}],[\"就不用再花时间成本学了\",{\"1\":{\"115\":1}}],[\"就应该查数据库\",{\"1\":{\"118\":1}}],[\"就会影响自己的信心\",{\"1\":{\"1142\":1}}],[\"就会影响查询性能\",{\"1\":{\"916\":1}}],[\"就会有第二家\",{\"1\":{\"1130\":1}}],[\"就会有统计信息\",{\"1\":{\"600\":1}}],[\"就会创建相应的表以及执行相应的sql\",{\"1\":{\"1079\":1}}],[\"就会出现类似于\",{\"1\":{\"1010\":1}}],[\"就会出现不生效的情况\",{\"1\":{\"517\":1}}],[\"就会\",{\"1\":{\"998\":1}}],[\"就会从\",{\"1\":{\"935\":1}}],[\"就会一直占着\",{\"1\":{\"928\":1}}],[\"就会导致这几个线程都进入无限等待的状态\",{\"1\":{\"932\":1}}],[\"就会导致你的线上出现主从数据库不一致的情况\",{\"1\":{\"901\":1}}],[\"就会导致数据不一致\",{\"1\":{\"609\":1}}],[\"就会返回没有权限的错误\",{\"1\":{\"897\":1}}],[\"就会收到\",{\"1\":{\"895\":1}}],[\"就会收到一个错误提醒\",{\"1\":{\"893\":1}}],[\"就会继续后面的执行阶段\",{\"1\":{\"894\":1}}],[\"就会被直接返回给客户端\",{\"1\":{\"894\":1}}],[\"就会被晋升到老年代中\",{\"1\":{\"385\":1}}],[\"就会切换到6380做这个set操作\",{\"1\":{\"865\":1}}],[\"就会变成主服务器\",{\"1\":{\"864\":1}}],[\"就会异步发送优先回调returnfirm\",{\"1\":{\"832\":1}}],[\"就会传入容器\",{\"1\":{\"790\":1}}],[\"就会关闭了\",{\"1\":{\"772\":1}}],[\"就会抛出类型转化异常\",{\"1\":{\"682\":1}}],[\"就会回收这些对象的内存\",{\"1\":{\"660\":1}}],[\"就会阻塞\",{\"1\":{\"609\":1}}],[\"就会产生分布式事务问题\",{\"1\":{\"606\":1}}],[\"就会发现在分析问题的时候会有一个更清晰的视角\",{\"1\":{\"916\":1}}],[\"就会发现配置已经刷新\",{\"1\":{\"598\":1}}],[\"就会发现springboot真的舒服\",{\"1\":{\"451\":1}}],[\"就会按照顺序执行拦截器里面的\",{\"1\":{\"543\":1}}],[\"就会直接返回json数据\",{\"1\":{\"503\":1}}],[\"就会使用reject\",{\"1\":{\"363\":1}}],[\"就会自己去阻塞队列获取任务执行\",{\"1\":{\"363\":1}}],[\"就会去队列里面取出新的任务继续执行\",{\"1\":{\"362\":1}}],[\"就会将目前多的任务放在队列里面\",{\"1\":{\"362\":1}}],[\"就会将数据分片存储\",{\"1\":{\"265\":1}}],[\"就会重新在创建一个instance实例\",{\"1\":{\"301\":1}}],[\"就会对比原来的数据\",{\"1\":{\"271\":1}}],[\"就会执行\",{\"1\":{\"186\":1}}],[\"就会每个线程都不一样\",{\"1\":{\"161\":1}}],[\"就会启动一个定时任务\",{\"1\":{\"115\":1}}],[\"就会在后台启用一个线程\",{\"1\":{\"86\":1,\"114\":1}}],[\"就会在\",{\"1\":{\"86\":1,\"114\":1}}],[\"就换了一个序列化\",{\"1\":{\"105\":1}}],[\"就重置key的生存时间为30秒\",{\"1\":{\"86\":1,\"114\":1}}],[\"就锁住了\",{\"0\":{\"82\":1}}],[\"就是同一样东西在你手里只能用出它50\",{\"1\":{\"1162\":1}}],[\"就是国内访问的速度更快一点\",{\"1\":{\"1161\":1}}],[\"就是培养兴趣\",{\"1\":{\"1150\":1}}],[\"就是当你成功的时候的那种发自内心的成就感\",{\"1\":{\"1150\":1}}],[\"就是当系统里没有比这个回滚日志更早的\",{\"1\":{\"906\":1}}],[\"就是运行在服务端的\",{\"1\":{\"1099\":1}}],[\"就是4g\",{\"1\":{\"1092\":1}}],[\"就是这样得来的了\",{\"1\":{\"1091\":1}}],[\"就是直接寻址了\",{\"1\":{\"1090\":1}}],[\"就是内存里的数据能被cpu直接访问\",{\"1\":{\"1089\":1}}],[\"就是单纯被占用了\",{\"1\":{\"1041\":1}}],[\"就是和win10一样只是调大了系统的字体\",{\"1\":{\"998\":1}}],[\"就是推送就执行\",{\"1\":{\"994\":1}}],[\"就是为了避免下面的问题\",{\"1\":{\"994\":1}}],[\"就是基于数据的\",{\"1\":{\"935\":1}}],[\"就是通过\",{\"1\":{\"935\":1}}],[\"就是控制访问相同资源的并发事务量\",{\"1\":{\"933\":1}}],[\"就是如果你能确保这个业务一定不会出现死锁\",{\"1\":{\"932\":1}}],[\"就是进入了死锁状态\",{\"1\":{\"932\":1}}],[\"就是进内存的为输入\",{\"1\":{\"688\":1}}],[\"就是在可重复读隔离级别下开启一个事务\",{\"1\":{\"927\":1}}],[\"就是在上面的基础上加\",{\"1\":{\"779\":1}}],[\"就是最左优先\",{\"1\":{\"923\":1}}],[\"就是数据库的多版本并发控制\",{\"1\":{\"906\":1}}],[\"就是那个点开个视图\",{\"1\":{\"905\":1}}],[\"就是给集群中某一台服务器加一把锁\",{\"1\":{\"868\":1}}],[\"就是乐观锁导致很多请求都失败\",{\"1\":{\"858\":1}}],[\"就是提供了这样一个机制\",{\"1\":{\"740\":1}}],[\"就是对应字符串常量池中的变量\",{\"1\":{\"723\":1}}],[\"就是认为静态块一定是最先初始化的\",{\"1\":{\"658\":1}}],[\"就是用动态代理验证的\",{\"1\":{\"639\":1}}],[\"就是用注解的方式\",{\"1\":{\"497\":1}}],[\"就是主要利用了上面提到的反射机制\",{\"1\":{\"638\":1}}],[\"就是不同类型变量赋值时\",{\"1\":{\"637\":1}}],[\"就是所谓强类型和弱类型\",{\"1\":{\"637\":1}}],[\"就是可以被垃圾收集的了\",{\"1\":{\"636\":1}}],[\"就是告诉\",{\"1\":{\"635\":1}}],[\"就是微服务的实例\",{\"1\":{\"598\":1}}],[\"就是搞改上面这个\",{\"1\":{\"597\":1}}],[\"就是启动项目换下配置\",{\"1\":{\"595\":1}}],[\"就是配置总控中心连\",{\"1\":{\"591\":1}}],[\"就是改配置\",{\"1\":{\"569\":1}}],[\"就是下面这个\",{\"1\":{\"477\":1}}],[\"就是把数据从硬盘读到内存的过程啊\",{\"1\":{\"1089\":1}}],[\"就是把$\",{\"1\":{\"411\":1}}],[\"就是把它展示到商品介绍上\",{\"1\":{\"244\":1}}],[\"就是再专门写个类\",{\"1\":{\"410\":1}}],[\"就是替代对象监视器了\",{\"1\":{\"352\":1}}],[\"就是禁止处理器优化和指令重排\",{\"1\":{\"329\":1}}],[\"就是一个记录被多个事务连续更新后的状态\",{\"1\":{\"935\":1}}],[\"就是一个\",{\"1\":{\"737\":1}}],[\"就是一个抽象类\",{\"1\":{\"378\":1}}],[\"就是一个典型的可重入锁\",{\"1\":{\"321\":1}}],[\"就是一句话\",{\"1\":{\"49\":1}}],[\"就是很公平\",{\"1\":{\"318\":1}}],[\"就是公平的\",{\"1\":{\"315\":1}}],[\"就是将一个java类\",{\"1\":{\"310\":1}}],[\"就是某个线程一直取到的值和预期值都不一样\",{\"1\":{\"307\":1}}],[\"就是我们最常见的普通对象引用\",{\"1\":{\"636\":1}}],[\"就是我们从主内存中拷贝到工作内存中的值\",{\"1\":{\"305\":1}}],[\"就是我们经常看到的供应商直接把商品买个\",{\"1\":{\"206\":1}}],[\"就是说说而已\",{\"1\":{\"1104\":1}}],[\"就是说eden区与survivor区的大小比值为3\",{\"1\":{\"383\":1}}],[\"就是说使用使用cms内存收集算法\",{\"1\":{\"383\":1}}],[\"就是说设置持久代\",{\"1\":{\"383\":1}}],[\"就是说年轻代大小是500m\",{\"1\":{\"383\":1}}],[\"就是说最大堆大小为2g\",{\"1\":{\"383\":1}}],[\"就是说初始堆大小为1g\",{\"1\":{\"383\":1}}],[\"就是说\",{\"1\":{\"301\":1,\"1150\":1}}],[\"就是iphone\",{\"1\":{\"244\":1}}],[\"就是cv\",{\"1\":{\"223\":1}}],[\"就是无法代理被\",{\"1\":{\"182\":1}}],[\"就是开启的\",{\"1\":{\"178\":1}}],[\"就是咱们这个不是一个单体项目嘛\",{\"1\":{\"112\":1}}],[\"就是\",{\"0\":{\"664\":1},\"1\":{\"93\":1,\"177\":1,\"244\":1,\"268\":1,\"740\":1,\"935\":3}}],[\"就是no\",{\"1\":{\"87\":1}}],[\"就是调用refreshtokenα\",{\"1\":{\"70\":1}}],[\"就是有点不安全哈\",{\"1\":{\"70\":1}}],[\"指空格出现\",{\"1\":{\"1016\":1}}],[\"指的就是\",{\"1\":{\"935\":1}}],[\"指的是寄存器位数\",{\"1\":{\"1093\":1}}],[\"指的是寄存器是32位\",{\"1\":{\"1093\":1}}],[\"指的是任何实现了\",{\"1\":{\"738\":1}}],[\"指的是创\",{\"1\":{\"722\":1}}],[\"指的是spring框架中gatewayfilter的实例\",{\"1\":{\"590\":1}}],[\"指的是建立连接后从服务器读取到可用资源所用的时间\",{\"1\":{\"577\":1}}],[\"指的是建立连接所用的时间\",{\"1\":{\"577\":1}}],[\"指的是同一线程外层函数获得锁之后\",{\"1\":{\"321\":1}}],[\"指的是浏览器不能执行其他网站的脚本\",{\"1\":{\"230\":1}}],[\"指出该消息可能需要持久性存储\",{\"1\":{\"823\":1}}],[\"指数组的长度\",{\"1\":{\"681\":1}}],[\"指当前项目的resources目录\",{\"1\":{\"542\":1}}],[\"指当前项目根目录\",{\"1\":{\"542\":1}}],[\"指向该行的\",{\"1\":{\"908\":1}}],[\"指向的仍是这一个\",{\"1\":{\"725\":1}}],[\"指向的对象不会被回收吗\",{\"1\":{\"125\":1}}],[\"指向前面stringbuilder创建的那个字符串\",{\"1\":{\"724\":1}}],[\"指向了自己的\",{\"1\":{\"694\":1}}],[\"指向各种不同的对象\",{\"1\":{\"635\":1}}],[\"指向服务提供者payment\",{\"1\":{\"576\":1}}],[\"指向分配的内存地址\",{\"1\":{\"302\":1,\"779\":1}}],[\"指定主表达式后无法匹配的组\",{\"1\":{\"1021\":1}}],[\"指定主键列的封装规则\",{\"1\":{\"419\":1}}],[\"指定要查询的表\",{\"1\":{\"963\":1}}],[\"指定要遍历的集合\",{\"1\":{\"436\":1}}],[\"指定能够显示的数值中数字的个数\",{\"1\":{\"920\":1}}],[\"指定key\",{\"1\":{\"889\":1}}],[\"指定密码的强度验证等级\",{\"1\":{\"802\":1}}],[\"指定密码验证的文件路径\",{\"1\":{\"802\":1}}],[\"指定结构中重中之重是方法\",{\"1\":{\"688\":1}}],[\"指定兜底的方法\",{\"1\":{\"583\":1}}],[\"指定\",{\"1\":{\"537\":1,\"635\":1}}],[\"指定先后顺序\",{\"1\":{\"491\":1}}],[\"指定sqlsessionfactory\",{\"1\":{\"462\":1}}],[\"指定sqlsessionfactorybean配置在spring中的id值\",{\"1\":{\"462\":1}}],[\"指定minio服务器的数据存储路径为\",{\"1\":{\"796\":1}}],[\"指定mapper接口所在包\",{\"1\":{\"462\":1}}],[\"指定mybatis全局配置文件的位置\",{\"1\":{\"462\":1}}],[\"指定mybatis\",{\"1\":{\"454\":1,\"462\":1}}],[\"指定数据源\",{\"1\":{\"462\":1}}],[\"指定数据库主键的列名\",{\"1\":{\"404\":1}}],[\"指定自定义缓存的全类名\",{\"1\":{\"448\":1}}],[\"指定封装的结果类型\",{\"1\":{\"429\":1}}],[\"指定判定的列名\",{\"1\":{\"429\":1}}],[\"指定集合里面元素的类型\",{\"1\":{\"426\":1}}],[\"指定将哪一列的值传给这个方法\",{\"1\":{\"423\":1}}],[\"指定这个属性对象的类型\",{\"1\":{\"422\":1}}],[\"指定哪个属性是联合的对象\",{\"1\":{\"422\":1}}],[\"指定哪一列\",{\"1\":{\"419\":1}}],[\"指定对应的javabean属性\",{\"1\":{\"419\":1}}],[\"指定对应的主键属性\",{\"1\":{\"404\":1}}],[\"指定参数的\",{\"1\":{\"408\":1}}],[\"指定的拒绝策略进行处理\",{\"1\":{\"363\":1}}],[\"指定的时间后自动销毁\",{\"1\":{\"363\":1}}],[\"指定的数量\",{\"1\":{\"363\":1}}],[\"指定第八个线程\",{\"1\":{\"331\":1}}],[\"指定用什么校验\",{\"1\":{\"243\":1}}],[\"指定容器自动启动\",{\"1\":{\"210\":1}}],[\"指定缓存的数据的存活时间\",{\"1\":{\"123\":1}}],[\"指定缓存类型为redis\",{\"1\":{\"123\":1}}],[\"指定生成缓存的key\",{\"1\":{\"123\":1}}],[\"指用户发出请求或者指令到系统做出反应\",{\"1\":{\"100\":2}}],[\"指令被第一次执行到的时候才会\",{\"1\":{\"722\":1}}],[\"指令\",{\"1\":{\"295\":1,\"302\":2}}],[\"指令重排在单线程环境下不会出现问题\",{\"1\":{\"302\":1,\"779\":1}}],[\"指令重排只会保证串行语义的执行一致性\",{\"1\":{\"301\":1}}],[\"指令重排\",{\"0\":{\"293\":1,\"295\":1},\"1\":{\"328\":1}}],[\"指令并行的重排\",{\"1\":{\"292\":1}}],[\"指令指定了一个别名路径\",{\"1\":{\"73\":1}}],[\"指令指定的路径是与uri拼接的\",{\"1\":{\"73\":1}}],[\"指令用于指定一个别名路径\",{\"1\":{\"73\":1}}],[\"指令用于定义一个目录作为请求的根目录\",{\"1\":{\"73\":1}}],[\"指示客户端保持持久连接的时间为60秒\",{\"1\":{\"48\":1}}],[\"指南\",{\"0\":{\"33\":1},\"2\":{\"6\":1}}],[\"重构你之前的代码能让你有一个很高的进步\",{\"1\":{\"1150\":1}}],[\"重构\",{\"1\":{\"1150\":1}}],[\"重庆等\",{\"1\":{\"1106\":1}}],[\"重装系统坑\",{\"0\":{\"1027\":1}}],[\"重放\",{\"1\":{\"990\":1}}],[\"重放到中午误删表之前的那个时刻\",{\"1\":{\"901\":1}}],[\"重建主键的过程不合理\",{\"1\":{\"919\":1}}],[\"重建索引\",{\"1\":{\"919\":1}}],[\"重建索引的过程会创建一个新的索引\",{\"1\":{\"919\":1}}],[\"重建整个库\",{\"1\":{\"906\":1}}],[\"重做日志\",{\"1\":{\"898\":1}}],[\"重复相同的判断逻辑\",{\"1\":{\"897\":1}}],[\"重置环境变量\",{\"1\":{\"800\":1}}],[\"重载区分不同类型的消息\",{\"0\":{\"831\":1}}],[\"重载不要求返回类型\",{\"1\":{\"680\":1}}],[\"重载发生在一个类中\",{\"1\":{\"680\":1}}],[\"重载是编译时多态性\",{\"1\":{\"680\":1}}],[\"重载是在同一个类中\",{\"1\":{\"652\":1}}],[\"重载和重写\",{\"0\":{\"680\":1}}],[\"重载只看参数列表\",{\"0\":{\"652\":1}}],[\"重头戏\",{\"0\":{\"462\":1}}],[\"重启下mysql\",{\"1\":{\"805\":1}}],[\"重启mysql服务\",{\"1\":{\"793\":1,\"803\":1}}],[\"重启失效\",{\"1\":{\"600\":1}}],[\"重启\",{\"1\":{\"282\":1,\"998\":1}}],[\"重启指定\",{\"1\":{\"211\":1}}],[\"重新跑这些\",{\"1\":{\"977\":1}}],[\"重新进行用户身份验证或刷新令牌操作\",{\"1\":{\"890\":1}}],[\"重新发送失败的消息\",{\"1\":{\"846\":1}}],[\"重新载入\",{\"1\":{\"804\":1}}],[\"重新设计源码架构\",{\"1\":{\"471\":1}}],[\"重新\",{\"1\":{\"219\":1}}],[\"重新注册同名实例\",{\"1\":{\"124\":1}}],[\"重新给锁设置过期时间\",{\"1\":{\"115\":1}}],[\"重新启动服务器以使更改生效\",{\"1\":{\"48\":1}}],[\"重要内容放在醒目位置\",{\"1\":{\"1125\":1}}],[\"重要用的多\",{\"1\":{\"688\":1}}],[\"重要概念\",{\"0\":{\"582\":1}}],[\"重要的都是使用xml\",{\"1\":{\"462\":1}}],[\"重要的内容\",{\"1\":{\"20\":1}}],[\"重要\",{\"0\":{\"599\":1},\"1\":{\"305\":1,\"929\":1}}],[\"重要指标\",{\"1\":{\"100\":3}}],[\"重定向\",{\"1\":{\"848\":1}}],[\"重定向也可以保留数据\",{\"1\":{\"130\":1}}],[\"重定向登录页面\",{\"1\":{\"130\":1}}],[\"重定向携带数据\",{\"1\":{\"98\":1,\"130\":1,\"536\":1}}],[\"重定向视图\",{\"1\":{\"98\":1,\"536\":1}}],[\"重定向到\",{\"1\":{\"65\":1}}],[\"重试的次数通常为\",{\"1\":{\"186\":1}}],[\"重试\",{\"1\":{\"87\":1}}],[\"重点还能调试模拟postman发请求\",{\"1\":{\"1097\":1}}],[\"重点来了\",{\"1\":{\"739\":1,\"798\":1,\"984\":1}}],[\"重点懒汉式和饿汉式手写\",{\"0\":{\"700\":1}}],[\"重点多线程没同步\",{\"1\":{\"694\":1}}],[\"重点就是这三个类\",{\"1\":{\"543\":1,\"1081\":1}}],[\"重点第五点\",{\"1\":{\"477\":1}}],[\"重点看里面的两幅图\",{\"1\":{\"786\":1}}],[\"重点看源码讲解的视频\",{\"1\":{\"466\":1}}],[\"重点看一下秒杀系统设计的那一集\",{\"1\":{\"198\":1}}],[\"重点是排它\",{\"1\":{\"110\":1}}],[\"重点是理解alias与root的区别\",{\"1\":{\"73\":1}}],[\"重点\",{\"1\":{\"73\":1,\"105\":1,\"126\":1,\"329\":1,\"598\":1,\"621\":1,\"688\":1,\"810\":1,\"1041\":1,\"1125\":1}}],[\"重点在前端\",{\"1\":{\"70\":1}}],[\"重传机制\",{\"1\":{\"56\":1}}],[\"重写成new\",{\"1\":{\"763\":1}}],[\"重写thread的run方法\",{\"1\":{\"687\":1}}],[\"重写的返回类型不要求完全一样\",{\"1\":{\"680\":1}}],[\"重写要求返回类型相同\",{\"1\":{\"680\":1}}],[\"重写发生在子类和父类之间\",{\"1\":{\"680\":1}}],[\"重写是运行时多态性\",{\"1\":{\"680\":1}}],[\"重写好loaduserbyusername方法之后\",{\"1\":{\"624\":1}}],[\"重写流程图\",{\"1\":{\"624\":1,\"626\":1}}],[\"重写三个bean\",{\"1\":{\"551\":1,\"1166\":1}}],[\"重写\",{\"1\":{\"49\":1,\"690\":1,\"877\":1}}],[\"以国内前端\",{\"1\":{\"1107\":1}}],[\"以减小数据的大小\",{\"1\":{\"1081\":1}}],[\"以矩形的形式选取内容\",{\"0\":{\"1051\":1}}],[\"以字母排序\",{\"1\":{\"1003\":2}}],[\"以字面量的方式创建\",{\"1\":{\"722\":1}}],[\"以获得更高的清晰度和细节\",{\"1\":{\"998\":1}}],[\"以获得一个更均匀的分布\",{\"1\":{\"681\":1}}],[\"以行为单位\",{\"0\":{\"992\":1}}],[\"以适应更高或更低的分辨率\",{\"1\":{\"998\":1}}],[\"以适应增长的数据量\",{\"1\":{\"960\":1}}],[\"以适应网络的拥塞情况\",{\"1\":{\"56\":1}}],[\"以免出现不必要的问题\",{\"1\":{\"959\":1}}],[\"以免对线上服务造成影响\",{\"1\":{\"928\":1}}],[\"以第一个sql\",{\"1\":{\"947\":1}}],[\"以我启动的时刻为准\",{\"1\":{\"935\":1}}],[\"以最左边的为起点任何连续的索引都能匹配上\",{\"1\":{\"923\":1}}],[\"以最左原则进行where检索\",{\"1\":{\"923\":1}}],[\"以age=1\",{\"1\":{\"923\":1}}],[\"以commit为界\",{\"1\":{\"905\":1}}],[\"以页作为磁盘和内存交互的基本单位\",{\"1\":{\"903\":1}}],[\"以日志的形式来记录每个写操作\",{\"1\":{\"860\":1}}],[\"以空字符\",{\"1\":{\"849\":1}}],[\"以空格分隔\",{\"1\":{\"547\":1,\"548\":1}}],[\"以空格分割\",{\"1\":{\"88\":2}}],[\"以复用一条\",{\"1\":{\"823\":1}}],[\"以单词为单位不是字母\",{\"1\":{\"823\":1}}],[\"以使配置生效\",{\"1\":{\"789\":1}}],[\"以阻止shell扩展通配符\",{\"1\":{\"787\":1}}],[\"以支持多个用户同时登录\",{\"1\":{\"785\":1}}],[\"以提高数据库的可扩展性和稳定性\",{\"1\":{\"960\":1}}],[\"以提供更加便捷的语法\",{\"1\":{\"743\":1,\"1101\":1}}],[\"以提升性能\",{\"1\":{\"598\":1}}],[\"以防止潜在的安全风险\",{\"1\":{\"706\":1}}],[\"以防止外界使用该构造方法创建新的实例\",{\"1\":{\"700\":1}}],[\"以数据报形式发送\",{\"1\":{\"688\":1}}],[\"以java8为准\",{\"1\":{\"671\":1}}],[\"以json为载体\",{\"1\":{\"70\":1}}],[\"以警后世\",{\"1\":{\"658\":1}}],[\"以注册中心上微服务名为路径创建动态路由进行转发\",{\"1\":{\"591\":1}}],[\"以该别名的方式去注册中心上获取到实际的服务通讯地址\",{\"1\":{\"564\":1}}],[\"以此类推\",{\"1\":{\"970\":1}}],[\"以此类推的形式来发布迭代版本\",{\"1\":{\"554\":1}}],[\"以此释放服务器资源以保证核心任务的正常运行\",{\"1\":{\"603\":1}}],[\"以此也是提升了用户体验\",{\"1\":{\"539\":1,\"1083\":1}}],[\"以program\",{\"1\":{\"548\":1}}],[\"以满足当前\",{\"1\":{\"543\":1}}],[\"以满足大规模应用程序的需求\",{\"1\":{\"103\":1}}],[\"以替换配置文件中的\",{\"1\":{\"522\":1}}],[\"以较简单的user对象接收前端传过来的ison数据\",{\"1\":{\"502\":1}}],[\"以自定义\",{\"1\":{\"492\":1}}],[\"以\",{\"0\":{\"1136\":1},\"1\":{\"492\":1,\"549\":1,\"916\":1,\"1017\":2,\"1150\":1}}],[\"以声明式方式创建\",{\"1\":{\"486\":1}}],[\"以mysql\",{\"0\":{\"485\":1},\"1\":{\"481\":1}}],[\"以get开始的方法设置只读事务\",{\"1\":{\"462\":1}}],[\"以确保mysql为该字段分配足够的存储空间来存储实际数据\",{\"1\":{\"963\":1}}],[\"以确保数据的一致性\",{\"1\":{\"571\":2}}],[\"以确保cas操作同时考虑值的变化和状态的变化\",{\"1\":{\"309\":1}}],[\"以确定导致问题的根本原因\",{\"1\":{\"76\":1}}],[\"以避免结果集中出现重复的行\",{\"1\":{\"959\":1}}],[\"以避免多次执行相同的子查询\",{\"1\":{\"959\":1}}],[\"以避免由于指令重排序导致的潜在问题\",{\"1\":{\"283\":1}}],[\"以避免频繁地访问\",{\"1\":{\"156\":1}}],[\"以root身份进入mysql容器内部\",{\"1\":{\"210\":1}}],[\"以及是否执行成功\",{\"1\":{\"1079\":1}}],[\"以及服务的部署\",{\"1\":{\"1078\":1}}],[\"以及指定分支的修改合并到一个新的基底分支上\",{\"1\":{\"990\":1}}],[\"以及那些个与分区键映射表从而达到先拿分区键再拿完整数据的目的\",{\"1\":{\"961\":1}}],[\"以及两个线程\",{\"1\":{\"933\":1}}],[\"以及提供了三个方案\",{\"1\":{\"933\":1}}],[\"以及在什么时候释放\",{\"1\":{\"931\":1}}],[\"以及如何通过减少锁冲突来提升业务并发度\",{\"1\":{\"930\":1}}],[\"以及如何用正确的方式避免长事务\",{\"1\":{\"908\":1}}],[\"以及为什么\",{\"1\":{\"919\":1}}],[\"以及它们的适用场景\",{\"1\":{\"916\":1}}],[\"以及适配磁盘的访问模式\",{\"1\":{\"916\":1}}],[\"以及所有的内置函数\",{\"1\":{\"892\":1}}],[\"以及运算时\",{\"1\":{\"780\":1}}],[\"以及一个\",{\"1\":{\"725\":1}}],[\"以及各种二进制和基于文本的传统协议\",{\"1\":{\"713\":1}}],[\"以及使用非阻塞的方式进行读写操作\",{\"1\":{\"712\":1}}],[\"以及每一个可能出现异常而导致程序跳转的地方\",{\"1\":{\"686\":1}}],[\"以及变量等\",{\"1\":{\"646\":1}}],[\"以及与业务相关的配置内容\",{\"1\":{\"591\":1}}],[\"以及spring\",{\"1\":{\"543\":1}}],[\"以及discriminator鉴别器\",{\"1\":{\"419\":1}}],[\"以及\",{\"1\":{\"381\":1,\"388\":1,\"465\":2}}],[\"以及lua脚本去保证它的原子性\",{\"1\":{\"380\":1}}],[\"以及自己是不是要return\",{\"1\":{\"375\":1}}],[\"以及自己有篇笔记\",{\"1\":{\"109\":1}}],[\"以及期望版本号和当前版本号\",{\"1\":{\"311\":1}}],[\"以及x的申明\",{\"1\":{\"293\":1}}],[\"以及p69\",{\"1\":{\"243\":1}}],[\"以及可以向不支持cors的网站请求数据\",{\"1\":{\"232\":1}}],[\"以及具体失败在哪一步\",{\"1\":{\"186\":1}}],[\"以解决同一个对象内事务方法互调时默认失效的问题\",{\"1\":{\"179\":1}}],[\"以为是同一个类的两个方法\",{\"1\":{\"179\":1}}],[\"以后我甚至完全可以看自己的笔记而不需要再看书了\",{\"1\":{\"1144\":1}}],[\"以后碰到什么问题先查\",{\"1\":{\"552\":1}}],[\"以后\",{\"1\":{\"543\":1,\"568\":1,\"636\":1}}],[\"以后如果需要获取相同的数据\",{\"1\":{\"443\":1}}],[\"以后的条件都and\",{\"1\":{\"431\":1}}],[\"以后还是写resultmap还是写全\",{\"1\":{\"426\":1}}],[\"以后安装fifo的规则从队列中取到自己\",{\"1\":{\"318\":1}}],[\"以后再外面装好插件重启即可\",{\"1\":{\"267\":1}}],[\"以后再回顾\",{\"1\":{\"109\":1}}],[\"以后想改配置到外部的\",{\"1\":{\"210\":1}}],[\"以后有空可以试着做做微信的\",{\"1\":{\"189\":1}}],[\"以后所有的动态代理都是aspectj\",{\"1\":{\"179\":1}}],[\"以上排序是以互联网岗位数量大略排序的\",{\"1\":{\"1106\":1}}],[\"以上面这个图为例\",{\"1\":{\"918\":1}}],[\"以上功能在redis中是通过使用不同的数据结构和命令来实现的\",{\"1\":{\"849\":1}}],[\"以上三个的属性都是\",{\"1\":{\"779\":1}}],[\"以上操作的先后顺序\",{\"1\":{\"696\":1}}],[\"以上error\",{\"1\":{\"686\":1}}],[\"以上可以看出\",{\"1\":{\"388\":1}}],[\"以上\",{\"1\":{\"169\":1,\"388\":1}}],[\"以上配置示例仅供参考\",{\"1\":{\"48\":1}}],[\"以用于后续的分析和监控\",{\"1\":{\"156\":1}}],[\"以验证用户的身份\",{\"1\":{\"153\":1}}],[\"以前不能理解那些每个月花钱订阅服务的人\",{\"1\":{\"1165\":1}}],[\"以前我都是在网页上码\",{\"1\":{\"1164\":1}}],[\"以前看书的时候\",{\"1\":{\"1143\":1}}],[\"以前觉得很多知识等工作了再去学也不迟\",{\"1\":{\"1140\":1}}],[\"以前觉得自己会的东西\",{\"1\":{\"1140\":1}}],[\"以前的问题\",{\"1\":{\"994\":1}}],[\"以前有一种做法\",{\"1\":{\"927\":1}}],[\"以前碰过\",{\"1\":{\"788\":1}}],[\"以前没这么用过\",{\"0\":{\"632\":1}}],[\"以前要搞一个配置类\",{\"1\":{\"576\":1}}],[\"以前是\",{\"1\":{\"576\":1}}],[\"以前是自旋\",{\"1\":{\"115\":1}}],[\"以前竟然不知道\",{\"1\":{\"532\":1}}],[\"以前得io流拿properties里的k\",{\"1\":{\"508\":1}}],[\"以前一直不懂\",{\"1\":{\"488\":1}}],[\"以前这个错误我踩过两次坑\",{\"1\":{\"454\":1,\"462\":1}}],[\"以前光用mybatis时\",{\"1\":{\"453\":1}}],[\"以前总觉得\",{\"1\":{\"240\":1}}],[\"以前正常写法\",{\"1\":{\"229\":1}}],[\"以前还傻傻的自己copy工具类\",{\"1\":{\"132\":1}}],[\"以前都不知道这东西\",{\"1\":{\"101\":1}}],[\"以学习为目的都自己搞一下\",{\"1\":{\"112\":1}}],[\"以增加安全性或减少暴露\",{\"1\":{\"76\":1}}],[\"以下操作系统通常允许多个用户同时在线\",{\"1\":{\"785\":1}}],[\"以下几种方式都可以被\",{\"1\":{\"546\":1}}],[\"以下是nssm相对于sc的一些优势\",{\"1\":{\"1041\":1}}],[\"以下是我的\",{\"1\":{\"1003\":1}}],[\"以下是我可以用\",{\"1\":{\"1003\":1}}],[\"以下是我不熟的知识点\",{\"1\":{\"686\":1}}],[\"以下是\",{\"1\":{\"959\":2}}],[\"以下是通配符的一些常见用法\",{\"1\":{\"959\":1}}],[\"以下是常见的几个查询\",{\"1\":{\"923\":1}}],[\"以下是默认情况\",{\"1\":{\"691\":1}}],[\"以下是在\",{\"1\":{\"537\":1}}],[\"以下是一个使用悲观锁解决写写冲突的实例语句\",{\"1\":{\"906\":1}}],[\"以下是一个示例\",{\"1\":{\"73\":2}}],[\"以下是一些示例代码\",{\"1\":{\"849\":1}}],[\"以下是一些拦截器处理响应的典型使用场景\",{\"1\":{\"156\":1}}],[\"以下是一种可能的场景\",{\"1\":{\"694\":1}}],[\"以下代码是否能编译\",{\"0\":{\"718\":1}}],[\"以下代码演示了如何使用\",{\"1\":{\"520\":1}}],[\"以下代码可用于将列表转储到新分配的string数组中\",{\"1\":{\"249\":1}}],[\"以下摘自官网\",{\"1\":{\"473\":1}}],[\"以下语句也可替换成线程池版本\",{\"1\":{\"357\":1}}],[\"以下解释很清白了\",{\"1\":{\"302\":1}}],[\"以下简称\",{\"1\":{\"262\":1}}],[\"以下两个方法分别属于不同的类\",{\"1\":{\"178\":1}}],[\"以下两种方式是\",{\"1\":{\"79\":1}}],[\"以下例子视频\",{\"1\":{\"178\":1}}],[\"以下url在地址栏中是等效的\",{\"1\":{\"60\":1}}],[\"以方便用户下次请求的鉴别\",{\"1\":{\"52\":1}}],[\"以便将其放到基准值左边的子数组中\",{\"1\":{\"1085\":1}}],[\"以便于构建和管理大规模的分布式搜索应用程序\",{\"1\":{\"1084\":1}}],[\"以便于后面扩展有机会创建代理对象\",{\"1\":{\"543\":1}}],[\"以便其他模块能够正常使用mybatis\",{\"1\":{\"1012\":1}}],[\"以便可以与容器进行交互\",{\"1\":{\"790\":1}}],[\"以便服务器可以了解客户端的状态\",{\"1\":{\"581\":2}}],[\"以便在传输或保存时能够处理二进制数据\",{\"1\":{\"1081\":1}}],[\"以便在编译和运行时引入mybatis\",{\"1\":{\"1012\":1}}],[\"以便在编译代码和执行测试时使用\",{\"1\":{\"1012\":1}}],[\"以便在下次运行时不再显示安全警告\",{\"1\":{\"999\":1}}],[\"以便在首次运行时显示安全警告\",{\"1\":{\"999\":1}}],[\"以便在并发读写操作时\",{\"1\":{\"906\":1}}],[\"以便在请求处理过程中共享和操作它们的内容\",{\"1\":{\"632\":1}}],[\"以便在需要时进行访问\",{\"1\":{\"538\":1,\"1082\":1}}],[\"以便在整个请求处理过程中都可以访问这些信息\",{\"1\":{\"156\":1}}],[\"以便线程能够及时获取最新的状态\",{\"1\":{\"283\":1}}],[\"以便让spring能够在当前线程中暴露代理对象\",{\"1\":{\"179\":1}}],[\"以便与认证服务器进行通信\",{\"1\":{\"153\":1}}],[\"以便\",{\"1\":{\"8\":1}}],[\"通配符用于匹配字符串中的特定字符或字符序列\",{\"1\":{\"959\":1}}],[\"通配符将被视为字符串的一部分\",{\"1\":{\"787\":1}}],[\"通配符不会引发错误\",{\"1\":{\"787\":1}}],[\"通配符模式的文件或目录\",{\"1\":{\"787\":1}}],[\"通配符\",{\"1\":{\"688\":2}}],[\"通用的和独享的各自分开\",{\"1\":{\"584\":1}}],[\"通知1号去干活了\",{\"1\":{\"352\":1}}],[\"通知2号去干活了\",{\"1\":{\"352\":2}}],[\"通俗易懂\",{\"1\":{\"1150\":1}}],[\"通俗解释\",{\"0\":{\"798\":1,\"984\":1}}],[\"通俗来讲\",{\"1\":{\"569\":1}}],[\"通俗来说过滤器和拦截器的区别\",{\"1\":{\"156\":1}}],[\"通俗的说\",{\"1\":{\"301\":1,\"599\":1}}],[\"通常会提供mybatis\",{\"1\":{\"1012\":1}}],[\"通常会在一个组织或者项目的最顶层的\",{\"1\":{\"556\":1}}],[\"通常会在启动类上使用\",{\"1\":{\"482\":1}}],[\"通常主键索引就是聚簇索引\",{\"1\":{\"978\":1}}],[\"通常使用git\",{\"1\":{\"990\":2}}],[\"通常使用中间件\",{\"1\":{\"960\":1}}],[\"通常使用\",{\"1\":{\"959\":1}}],[\"通常运行在另一个服务器上\",{\"1\":{\"883\":1}}],[\"通常只允许一个用户登录\",{\"1\":{\"785\":1}}],[\"通常支持多个远程用户同时登录和操作系统\",{\"1\":{\"785\":1}}],[\"通常返回一个32位的整数作为哈希值\",{\"1\":{\"739\":1}}],[\"通常拿最后一个数\",{\"1\":{\"706\":1}}],[\"通常用于不同的场景和目的\",{\"1\":{\"1081\":1}}],[\"通常用127\",{\"1\":{\"688\":1}}],[\"通常用来做所谓的\",{\"1\":{\"636\":1}}],[\"通常认为\",{\"1\":{\"637\":1}}],[\"通常情况下调用方模块是不会感知到被调用方模块的内部具体实现\",{\"1\":{\"740\":1}}],[\"通常情况下\",{\"1\":{\"156\":1,\"546\":1,\"1166\":1}}],[\"通常是出于以下几个原因\",{\"1\":{\"1012\":1}}],[\"通常是显示器的原生分辨率\",{\"1\":{\"998\":1}}],[\"通常是由于误用所致\",{\"1\":{\"907\":1}}],[\"通常是基于http协议的restful\",{\"1\":{\"553\":1}}],[\"通常是年轻代的eden区和存活区域\",{\"1\":{\"385\":1}}],[\"通常是\",{\"1\":{\"48\":1}}],[\"通过大二一年的努力\",{\"1\":{\"1150\":1}}],[\"通过让一些学生做游戏来学习c语言\",{\"1\":{\"1150\":1}}],[\"通过设置文件中的<repository>标签\",{\"1\":{\"1014\":1}}],[\"通过设置事务的传播行为为propagation\",{\"1\":{\"179\":1}}],[\"通过排除mybatis\",{\"1\":{\"1012\":1}}],[\"通过其他渠道安装额外\",{\"1\":{\"1003\":1}}],[\"通过运行该命令\",{\"1\":{\"999\":1}}],[\"通过运行时类的对象\",{\"1\":{\"688\":1}}],[\"通过运行时操作元数据或对象\",{\"1\":{\"639\":1}}],[\"通过中间表转换过去\",{\"1\":{\"976\":1}}],[\"通过分表可以提高表的访问效率\",{\"1\":{\"960\":1}}],[\"通过分散数据到多个数据库或数据表中\",{\"1\":{\"960\":1}}],[\"通过分析器知道了你要做什么\",{\"1\":{\"897\":1}}],[\"通过这个字段\",{\"1\":{\"972\":1}}],[\"通过这种方式\",{\"1\":{\"959\":1}}],[\"通过这些属性\",{\"1\":{\"897\":1}}],[\"通过union连接的sql它们分别单独取出的列数必须相同\",{\"1\":{\"947\":1}}],[\"通过userdetailsservice根据用户名获取处理的用户信息要封装成userdetails对象返回\",{\"1\":{\"620\":1}}],[\"通过哈希函数算出\",{\"1\":{\"914\":1}}],[\"通过创建唯一性索引\",{\"1\":{\"911\":1}}],[\"通过显式语句的方式来启动事务\",{\"1\":{\"907\":1}}],[\"通过回滚操作\",{\"1\":{\"906\":1}}],[\"通过优化器知道了该怎么做\",{\"1\":{\"897\":1}}],[\"通过执行\",{\"1\":{\"893\":1}}],[\"通过vue的代理配置\",{\"1\":{\"883\":1}}],[\"通过反向代理映射到后端\",{\"1\":{\"882\":1}}],[\"通过反射我们可以直接操作类或者对象\",{\"1\":{\"638\":1}}],[\"通过命令\",{\"1\":{\"861\":1}}],[\"通过获取锁的客户端可以执行临界区代码\",{\"1\":{\"849\":1}}],[\"通过利用redis的数据结构和操作\",{\"1\":{\"849\":1}}],[\"通过默认密码进入数据库\",{\"1\":{\"802\":1}}],[\"通过如下命令可以在日志文件中找出密码\",{\"1\":{\"802\":1}}],[\"通过rabbittemplate对象发送消息到交换机\",{\"1\":{\"827\":1}}],[\"通过runnable\",{\"1\":{\"769\":1}}],[\"通过requestcontextholder\",{\"1\":{\"157\":1}}],[\"通过person的有参构造实现\",{\"1\":{\"763\":1}}],[\"通过person的无参构造实现\",{\"1\":{\"763\":1}}],[\"通过与运算\",{\"1\":{\"739\":1}}],[\"通过前面的介绍\",{\"1\":{\"723\":1}}],[\"通过前面对jmm的介绍\",{\"1\":{\"288\":1}}],[\"通过选择器进行\",{\"1\":{\"712\":1}}],[\"通过它\",{\"1\":{\"712\":1}}],[\"通过它实现了原子操作\",{\"1\":{\"303\":1}}],[\"通过减少无效的系统调用\",{\"1\":{\"712\":1}}],[\"通过轮询操作\",{\"1\":{\"712\":1}}],[\"通过数组来引用\",{\"1\":{\"698\":1}}],[\"通过class对象获取构造对象\",{\"1\":{\"688\":1}}],[\"通过context\",{\"1\":{\"157\":1}}],[\"通过new\",{\"1\":{\"687\":1}}],[\"通过字面量定义的方式\",{\"1\":{\"687\":1}}],[\"通过引入接口的默认方法\",{\"1\":{\"686\":1}}],[\"通过类的全限定名\",{\"1\":{\"679\":1}}],[\"通过匿名内部类方式初始化会有内存泄漏问题\",{\"0\":{\"673\":1}}],[\"通过查看这个类的源码\",{\"1\":{\"660\":1}}],[\"通过代理\",{\"1\":{\"640\":1}}],[\"通过代理可以让调用者与实现者之间解耦\",{\"1\":{\"640\":1}}],[\"通过垃圾收集器\",{\"1\":{\"634\":1}}],[\"通过为用户分配适当的角色\",{\"1\":{\"630\":1}}],[\"通过event到消息总线\",{\"1\":{\"612\":1}}],[\"通过接口远程方法调用怕\",{\"1\":{\"612\":1}}],[\"通过文件传输的形式\",{\"1\":{\"612\":1}}],[\"通过消息队列或者异步任务来处理请求\",{\"1\":{\"603\":1}}],[\"通过定义绑定器binder作为中间层\",{\"1\":{\"594\":1}}],[\"通过上述示例\",{\"1\":{\"933\":1}}],[\"通过上述例子的分析\",{\"1\":{\"76\":1}}],[\"通过上者的\",{\"1\":{\"551\":1,\"1166\":1}}],[\"通过项目中配置文件bootstrap\",{\"0\":{\"550\":1}}],[\"通过在pom文件中定义<repository>标签\",{\"1\":{\"1014\":1}}],[\"通过在\",{\"1\":{\"546\":1}}],[\"通过在事务中对该表进行操作来获取和释放锁\",{\"1\":{\"79\":1}}],[\"通过三级缓存解决了循环依赖\",{\"1\":{\"543\":1}}],[\"通过三次握手能防止历史连接的建立\",{\"1\":{\"57\":1}}],[\"通过实现\",{\"1\":{\"538\":1,\"1082\":1}}],[\"通过实现该接口\",{\"1\":{\"538\":1,\"1082\":1}}],[\"通过该方法\",{\"1\":{\"538\":1,\"1082\":1}}],[\"通过配置代理\",{\"1\":{\"883\":1}}],[\"通过配置\",{\"1\":{\"523\":1}}],[\"通过调整新生代的大小\",{\"1\":{\"389\":1}}],[\"通过javap命令分析java汇编指令\",{\"1\":{\"388\":1}}],[\"通过根对象开始\",{\"1\":{\"385\":1}}],[\"通过重复利用已经创建好的线程降低线程的创建和销毁带来的损耗\",{\"1\":{\"367\":1}}],[\"通过atomic\",{\"1\":{\"306\":1}}],[\"通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化\",{\"1\":{\"296\":1}}],[\"通过spring\",{\"1\":{\"231\":1,\"543\":3}}],[\"通过改parent的boot版本解决\",{\"1\":{\"227\":1}}],[\"通过循环的遍历item\",{\"1\":{\"220\":1}}],[\"通过容器的\",{\"1\":{\"212\":1}}],[\"通过事务执行状态可以判断出事务是提交成功了还是提交失败了\",{\"1\":{\"186\":1}}],[\"通过使用\",{\"1\":{\"849\":1}}],[\"通过使用aopcontext\",{\"1\":{\"179\":1}}],[\"通过使用inheritablethreadlocal\",{\"1\":{\"157\":1}}],[\"通过将其排除在构建和打包过程之外\",{\"1\":{\"1012\":1}}],[\"通过将依赖的作用域设置为provided\",{\"1\":{\"1012\":1}}],[\"通过将数据存储在redis中\",{\"1\":{\"849\":1}}],[\"通过将数据分散存储在多个节点上\",{\"1\":{\"103\":1}}],[\"通过将请求上下文存储到requestcontextholder中\",{\"1\":{\"157\":1}}],[\"通过拦截器可以对feign发送的请求进行拦截\",{\"1\":{\"157\":1}}],[\"通过认证令牌\",{\"1\":{\"153\":1}}],[\"通过则删\",{\"1\":{\"134\":1}}],[\"通过订阅\",{\"1\":{\"119\":1}}],[\"通过加锁保证并发读写\",{\"1\":{\"118\":1}}],[\"通过撰写栏同时执行\",{\"1\":{\"110\":1}}],[\"通过第三方服务比如\",{\"1\":{\"86\":1,\"114\":1}}],[\"通过login\",{\"0\":{\"67\":1}}],[\"通过\",{\"1\":{\"10\":1,\"13\":1,\"69\":1,\"156\":1,\"162\":1,\"520\":1,\"627\":1,\"634\":1,\"688\":1,\"696\":1,\"713\":1,\"723\":1,\"829\":1,\"887\":1,\"908\":2,\"935\":1,\"1041\":1}}],[\">60\",{\"1\":{\"907\":1}}],[\">ready\",{\"1\":{\"837\":1}}],[\">num\",{\"1\":{\"771\":1}}],[\">new\",{\"1\":{\"763\":2}}],[\">void\",{\"1\":{\"770\":3}}],[\">ele\",{\"1\":{\"768\":1}}],[\">1000\",{\"1\":{\"985\":1}}],[\">10\",{\"1\":{\"757\":1}}],[\">system\",{\"1\":{\"756\":1}}],[\">survivor\",{\"1\":{\"385\":1}}],[\">用户空间\",{\"1\":{\"712\":1}}],[\">x\",{\"1\":{\"694\":5}}],[\">xxxxproperties里面拿值\",{\"1\":{\"485\":1}}],[\">=\",{\"1\":{\"688\":1,\"703\":1,\"954\":1,\"959\":1,\"1085\":3}}],[\">当前类本身\",{\"1\":{\"687\":1}}],[\">this\",{\"1\":{\"687\":1}}],[\">容量大\",{\"1\":{\"685\":1}}],[\">change\",{\"1\":{\"762\":1}}],[\">c\",{\"1\":{\"603\":1}}],[\">caching\",{\"1\":{\"468\":1}}],[\">cache负责缓存的读写\",{\"1\":{\"122\":1}}],[\">cache\",{\"1\":{\"122\":1}}],[\">组\",{\"1\":{\"598\":1}}],[\">命名空间\",{\"1\":{\"598\":1}}],[\">重量级锁\",{\"1\":{\"379\":1}}],[\">轻量级锁\",{\"1\":{\"379\":1}}],[\">偏向锁\",{\"1\":{\"379\":1}}],[\">a+b\",{\"1\":{\"758\":1,\"760\":2}}],[\">a\",{\"1\":{\"321\":1,\"694\":4,\"762\":3}}],[\">b\",{\"1\":{\"321\":1,\"603\":1,\"694\":5}}],[\">2\",{\"1\":{\"302\":1,\"779\":1}}],[\">3\",{\"1\":{\"302\":1,\"779\":1}}],[\">>>进行位移操作\",{\"1\":{\"725\":1}}],[\">>>\",{\"1\":{\"648\":2,\"681\":1,\"685\":1}}],[\">>\",{\"1\":{\"267\":1,\"725\":1,\"784\":1,\"799\":1,\"800\":1,\"985\":1,\"1005\":2,\"1085\":5}}],[\">我被点击了\",{\"1\":{\"221\":3}}],[\"><\",{\"1\":{\"220\":6,\"221\":1,\"226\":1,\"427\":1,\"428\":1,\"429\":1,\"437\":1,\"448\":2,\"451\":1,\"462\":2,\"487\":2,\"539\":1}}],[\"><br\",{\"1\":{\"220\":1}}],[\">去百度<\",{\"1\":{\"220\":1}}],[\">取消<\",{\"1\":{\"220\":1}}],[\">点赞<\",{\"1\":{\"220\":1}}],[\">就会应用到当前rediscachemanager管理的所有缓存分区中\",{\"1\":{\"125\":1}}],[\">想改缓存的配置\",{\"1\":{\"125\":1}}],[\">如果rediscacheconfiguration有就用已有的\",{\"1\":{\"125\":1}}],[\">每个缓存决定使用什么配置\",{\"1\":{\"125\":1}}],[\">初始化所有的缓存\",{\"1\":{\"125\":1}}],[\">\",{\"0\":{\"105\":1,\"133\":1,\"376\":1,\"415\":2,\"416\":2,\"516\":1,\"784\":2,\"836\":1,\"882\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1050\":2},\"1\":{\"48\":1,\"63\":2,\"70\":3,\"92\":1,\"97\":1,\"101\":1,\"103\":2,\"105\":5,\"110\":1,\"111\":1,\"123\":1,\"125\":4,\"129\":1,\"130\":1,\"132\":2,\"138\":1,\"157\":2,\"183\":1,\"202\":1,\"220\":21,\"221\":1,\"223\":1,\"224\":1,\"229\":7,\"240\":1,\"241\":3,\"244\":4,\"258\":3,\"261\":1,\"263\":1,\"283\":1,\"292\":4,\"309\":5,\"334\":1,\"335\":1,\"338\":2,\"339\":2,\"343\":1,\"352\":3,\"362\":1,\"372\":1,\"374\":3,\"375\":1,\"397\":4,\"400\":25,\"404\":2,\"408\":1,\"415\":3,\"416\":4,\"419\":11,\"421\":8,\"422\":13,\"423\":7,\"424\":4,\"426\":12,\"427\":8,\"428\":1,\"429\":20,\"430\":11,\"432\":9,\"433\":5,\"434\":10,\"436\":3,\"437\":10,\"438\":9,\"440\":7,\"448\":3,\"454\":4,\"458\":13,\"459\":12,\"460\":13,\"462\":49,\"464\":9,\"466\":1,\"471\":1,\"481\":2,\"485\":5,\"487\":3,\"489\":4,\"546\":8,\"553\":1,\"554\":2,\"556\":4,\"560\":1,\"566\":1,\"571\":1,\"572\":2,\"576\":1,\"593\":2,\"594\":1,\"599\":2,\"610\":7,\"613\":1,\"619\":5,\"685\":2,\"686\":1,\"687\":5,\"688\":29,\"689\":1,\"693\":3,\"694\":3,\"702\":4,\"703\":1,\"718\":2,\"750\":2,\"752\":7,\"754\":2,\"755\":2,\"756\":1,\"757\":1,\"758\":1,\"765\":1,\"766\":2,\"767\":1,\"769\":1,\"770\":12,\"771\":2,\"776\":3,\"782\":1,\"784\":7,\"787\":2,\"800\":3,\"823\":2,\"835\":2,\"836\":3,\"837\":1,\"839\":2,\"840\":2,\"864\":1,\"865\":1,\"867\":1,\"876\":2,\"877\":1,\"878\":3,\"879\":2,\"882\":1,\"887\":1,\"889\":1,\"895\":1,\"916\":3,\"923\":1,\"941\":2,\"952\":1,\"959\":6,\"963\":1,\"993\":1,\"1005\":4,\"1009\":4,\"1013\":1,\"1016\":1,\"1021\":3,\"1022\":1,\"1041\":1,\"1085\":5,\"1095\":1,\"1097\":1,\"1100\":1}}],[\"不断提高自己\",{\"1\":{\"1150\":1}}],[\"不断优化的产物或者解决方案\",{\"1\":{\"916\":1}}],[\"不解释\",{\"1\":{\"1150\":1}}],[\"不光教你怎么用\",{\"1\":{\"1150\":1}}],[\"不做评价\",{\"1\":{\"1150\":2}}],[\"不信可以自己去百度一下\",{\"1\":{\"1150\":1}}],[\"不去看它\",{\"1\":{\"1148\":1}}],[\"不轻易被影响\",{\"1\":{\"1147\":1}}],[\"不执着于得失\",{\"1\":{\"1147\":1}}],[\"不执行这行下面的\",{\"1\":{\"219\":1}}],[\"不想学习\",{\"1\":{\"1147\":1}}],[\"不想工作\",{\"1\":{\"1147\":1}}],[\"不想再纠结了\",{\"1\":{\"105\":1}}],[\"不宜久留\",{\"1\":{\"1113\":1}}],[\"不代表城市综合实力\",{\"1\":{\"1106\":1}}],[\"不好意思写出来\",{\"1\":{\"1104\":1}}],[\"不好检索\",{\"1\":{\"936\":1}}],[\"不强制加班\",{\"1\":{\"1104\":1}}],[\"不被版本控制就行\",{\"1\":{\"1080\":1}}],[\"不被篡改\",{\"1\":{\"382\":1}}],[\"不知不觉时间就溜走了\",{\"1\":{\"1148\":1}}],[\"不知刺痛了多少人的心\",{\"1\":{\"1076\":1}}],[\"不知道如何继续下去\",{\"1\":{\"1150\":1}}],[\"不知道大家还记不记得第一次写\",{\"1\":{\"1150\":1}}],[\"不知道的可以了解一下\",{\"1\":{\"1145\":1}}],[\"不知道最近应该做什么\",{\"1\":{\"1144\":1}}],[\"不知道学什么\",{\"1\":{\"1142\":1}}],[\"不知道做什么好\",{\"1\":{\"1142\":1}}],[\"不知道怎么处理\",{\"1\":{\"1021\":1}}],[\"不知道是否该转战brew\",{\"1\":{\"998\":1}}],[\"不知道你还记不记得\",{\"1\":{\"899\":1}}],[\"不知道对不对\",{\"1\":{\"686\":1}}],[\"不知道为什么这两样都行\",{\"1\":{\"241\":1}}],[\"不知道能用aop实现不\",{\"1\":{\"156\":1}}],[\"不知道这个参数是不是\",{\"1\":{\"107\":1}}],[\"不怕找不到方法在哪儿分割了\",{\"0\":{\"1053\":1}}],[\"不区分大小写\",{\"1\":{\"1039\":1}}],[\"不显示\",{\"1\":{\"1017\":1}}],[\"不显示隐藏文件\",{\"1\":{\"998\":2}}],[\"不\",{\"1\":{\"1014\":1}}],[\"不从本地路径获取\",{\"1\":{\"1009\":1}}],[\"不必要的全关掉\",{\"1\":{\"1006\":1}}],[\"不必要强迫自己要5am项目\",{\"1\":{\"980\":1}}],[\"不包含插件\",{\"1\":{\"1005\":1}}],[\"不包括++和\",{\"1\":{\"725\":1}}],[\"不包括实例变量\",{\"1\":{\"679\":1}}],[\"不依赖于用户登录\",{\"1\":{\"998\":1}}],[\"不依赖cookie就没有跨域的问题了\",{\"1\":{\"52\":1}}],[\"不保留原始分支的修改历史记录\",{\"1\":{\"990\":1}}],[\"不保证所有vm支持\",{\"1\":{\"383\":1}}],[\"不保证原子性\",{\"1\":{\"87\":1,\"283\":1}}],[\"不如他人评价\",{\"1\":{\"1127\":1}}],[\"不如无书\",{\"0\":{\"1093\":1}}],[\"不如把黄金时间留给自己\",{\"1\":{\"980\":1}}],[\"不如自己动手做一次\",{\"1\":{\"740\":1}}],[\"不得使用外键与级联\",{\"1\":{\"971\":1}}],[\"不适合\",{\"1\":{\"959\":1}}],[\"不适合高并发\",{\"1\":{\"608\":1}}],[\"不将任何列是否null列入统计标准\",{\"1\":{\"956\":1}}],[\"不了解笛卡尔积的读者可以先阅读文章末尾部分\",{\"1\":{\"937\":1}}],[\"不了解的小伙伴\",{\"1\":{\"571\":1}}],[\"不在数组中\",{\"1\":{\"935\":1}}],[\"不在就一定不在\",{\"1\":{\"866\":1}}],[\"不按顺序加锁的情况\",{\"1\":{\"933\":1}}],[\"不论你怎样安排语句顺序\",{\"1\":{\"931\":1}}],[\"不论是后续修改表结构还是进行分库分表\",{\"1\":{\"970\":1}}],[\"不论是哪种方法\",{\"1\":{\"927\":1}}],[\"不论是删除主键还是创建主键\",{\"1\":{\"919\":1}}],[\"不论是你面试也好\",{\"1\":{\"571\":1}}],[\"不满足条件\",{\"1\":{\"921\":1}}],[\"不就乱了么\",{\"1\":{\"904\":1}}],[\"不丢失\",{\"1\":{\"902\":1}}],[\"不丢弃和按序传输\",{\"1\":{\"57\":1}}],[\"不仅事务的更新操作会记录在\",{\"1\":{\"902\":1}}],[\"不仅包含class路径\",{\"1\":{\"454\":1}}],[\"不只是要会用\",{\"1\":{\"1150\":1}}],[\"不只是索引的全部定义\",{\"1\":{\"923\":1}}],[\"不只是误操作后需要用这个过程来恢复数据\",{\"1\":{\"901\":1}}],[\"不只是方法传递过来的参数可以被用来判断\",{\"1\":{\"438\":1}}],[\"不具备\",{\"1\":{\"899\":1}}],[\"不受外界影响\",{\"1\":{\"934\":1}}],[\"不受其他事务更新的影响\",{\"1\":{\"905\":1}}],[\"不受\",{\"1\":{\"884\":1}}],[\"不明不白\",{\"1\":{\"879\":1}}],[\"不搞懂前端运转就会\",{\"1\":{\"879\":1}}],[\"不改就只能本机连接redis\",{\"1\":{\"853\":1}}],[\"不改变源代码增加原功能\",{\"1\":{\"519\":1}}],[\"不足\",{\"1\":{\"849\":1}}],[\"不手动确认\",{\"1\":{\"837\":1}}],[\"不分路由键消息交给所有和它绑定的队列\",{\"1\":{\"823\":1}}],[\"不规定实现方式\",{\"1\":{\"818\":1}}],[\"不关心这三个接口怎么写的\",{\"1\":{\"813\":1}}],[\"不关注原理只要只要jwt能做就行\",{\"1\":{\"627\":1}}],[\"不理解这里husbands1怎么就绑上了wives1\",{\"1\":{\"776\":1}}],[\"不清楚怎么弄的\",{\"1\":{\"743\":1,\"1101\":1}}],[\"不清楚的点\",{\"1\":{\"156\":1}}],[\"不单纯是\",{\"1\":{\"712\":1}}],[\"不等则散列到其他地址\",{\"0\":{\"691\":1}}],[\"不等同于随机性\",{\"1\":{\"688\":1}}],[\"不等于3\",{\"1\":{\"352\":1}}],[\"不等于2\",{\"1\":{\"352\":1}}],[\"不等于1\",{\"1\":{\"352\":1}}],[\"不止一个数量级\",{\"1\":{\"686\":1}}],[\"不报错\",{\"1\":{\"662\":1}}],[\"不对代码进行编译\",{\"1\":{\"635\":1}}],[\"不使用默认的消费端确认\",{\"1\":{\"832\":1,\"837\":1}}],[\"不使用高版本的stata也可以\",{\"1\":{\"608\":1}}],[\"不使用缓存\",{\"1\":{\"449\":1}}],[\"不写死一个地址\",{\"1\":{\"591\":1}}],[\"不写空方法了\",{\"1\":{\"97\":1}}],[\"不影响效果\",{\"1\":{\"577\":1}}],[\"不影响其他逻辑的执行\",{\"1\":{\"357\":1}}],[\"不夸张地说\",{\"1\":{\"571\":1}}],[\"不一定用新技术就是好的\",{\"1\":{\"1111\":1}}],[\"不一定内存逃逸\",{\"1\":{\"389\":1}}],[\"不一致\",{\"1\":{\"901\":1}}],[\"不一样\",{\"1\":{\"899\":2}}],[\"不一样这个需要\",{\"1\":{\"570\":1}}],[\"不提供给开发人员进行使用\",{\"1\":{\"486\":1}}],[\"不熟\",{\"1\":{\"483\":1}}],[\"不生效\",{\"1\":{\"483\":1}}],[\"不生成token直接生成一个guid当token用\",{\"1\":{\"70\":1}}],[\"不安全\",{\"1\":{\"448\":1}}],[\"不推荐\",{\"1\":{\"431\":1}}],[\"不推荐jvm本地锁\",{\"1\":{\"80\":1}}],[\"不指定的列会自动封装\",{\"1\":{\"419\":1}}],[\"不应该依赖于rowid进行数据访问和操作\",{\"1\":{\"967\":1}}],[\"不应该再使用resulttype配置返回值类型\",{\"1\":{\"419\":1}}],[\"不应该存本地服务器\",{\"1\":{\"103\":1}}],[\"不建议\",{\"1\":{\"844\":1}}],[\"不建议使用这种方式\",{\"1\":{\"389\":1}}],[\"不建议在同步回调直接修改订单状态\",{\"1\":{\"192\":1}}],[\"不停地循环判断是否能够成功获取锁\",{\"1\":{\"379\":1}}],[\"不填默认\",{\"1\":{\"363\":1}}],[\"不抛\",{\"1\":{\"362\":1}}],[\"不管这些行是否包含null值\",{\"1\":{\"956\":1}}],[\"不管是哈希还是有序数组\",{\"1\":{\"916\":1}}],[\"不管是发布消息\",{\"1\":{\"823\":1}}],[\"不管你是否需要这个对象都会创建\",{\"1\":{\"779\":1}}],[\"不管当前内存空间足够与否\",{\"1\":{\"660\":1}}],[\"不管怎么排序\",{\"1\":{\"329\":1}}],[\"不管什么指令都不能和这条memory\",{\"1\":{\"296\":1}}],[\"不允许为空\",{\"1\":{\"967\":1}}],[\"不允许分割\",{\"1\":{\"962\":1}}],[\"不允许在应用中自行显式创建线程\",{\"1\":{\"366\":1}}],[\"不允许中断\",{\"1\":{\"302\":1}}],[\"不允许第七位的年份\",{\"1\":{\"202\":1}}],[\"不为空\",{\"1\":{\"302\":1,\"779\":1}}],[\"不为null\",{\"1\":{\"301\":1}}],[\"不存在任何问题\",{\"1\":{\"906\":1}}],[\"不存在这个列\",{\"1\":{\"897\":1}}],[\"不存在线程安全问题\",{\"1\":{\"779\":1}}],[\"不存在数据的依赖性\",{\"1\":{\"294\":1}}],[\"不存在变量提升\",{\"1\":{\"216\":1}}],[\"不见得非得按卷子题目顺序来\",{\"1\":{\"292\":1}}],[\"不带发\",{\"1\":{\"271\":1}}],[\"不带直接弹回还省的浪费数据库资源\",{\"1\":{\"241\":1}}],[\"不进行操作\",{\"1\":{\"271\":1}}],[\"不懂得学习是没有办法在这个行业混下去的\",{\"1\":{\"1141\":1}}],[\"不懂\",{\"1\":{\"240\":1,\"543\":1,\"1081\":1}}],[\"不再需要回表查整行记录\",{\"1\":{\"922\":1}}],[\"不再是\",{\"1\":{\"688\":1}}],[\"不再请求一次页面数据怎么是最新的\",{\"1\":{\"229\":1}}],[\"不再推荐此功能\",{\"1\":{\"47\":1}}],[\"不行\",{\"1\":{\"219\":1,\"937\":1}}],[\"不支持行锁意味着并发控制只能使用表锁\",{\"1\":{\"930\":1}}],[\"不支持\",{\"1\":{\"201\":1,\"906\":1,\"923\":1}}],[\"不可全信\",{\"1\":{\"1117\":1}}],[\"不可见\",{\"1\":{\"935\":1}}],[\"不可避免地\",{\"1\":{\"914\":1}}],[\"不可重复读是指\",{\"1\":{\"905\":1}}],[\"不可重复读\",{\"1\":{\"905\":3,\"906\":1}}],[\"不可重复\",{\"1\":{\"688\":2}}],[\"不可变性\",{\"1\":{\"687\":1}}],[\"不可变性所以没关系\",{\"1\":{\"683\":1}}],[\"不可被继承\",{\"1\":{\"687\":1}}],[\"不可达代码\",{\"1\":{\"686\":1}}],[\"不可以由应用程序乱来\",{\"1\":{\"709\":1}}],[\"不可以再导入包里面的包中的类\",{\"1\":{\"665\":1}}],[\"不可以直接写\",{\"1\":{\"261\":1}}],[\"不可中断\",{\"1\":{\"352\":1}}],[\"不可靠的\",{\"1\":{\"183\":1}}],[\"不可逆更合理一些\",{\"1\":{\"131\":1}}],[\"不可逆\",{\"1\":{\"131\":1,\"132\":1}}],[\"不开则都不成功\",{\"1\":{\"178\":1}}],[\"不采用\",{\"1\":{\"173\":1}}],[\"不太好\",{\"1\":{\"846\":1}}],[\"不太理解\",{\"0\":{\"171\":1}}],[\"不太重要\",{\"1\":{\"48\":1}}],[\"不够优雅\",{\"1\":{\"156\":1}}],[\"不需要你学的多厉害\",{\"1\":{\"1150\":1}}],[\"不需要你有多么大的成就\",{\"1\":{\"1150\":1}}],[\"不需要的内容\",{\"1\":{\"1127\":1}}],[\"不需要在你的应用程序中显式地包含它们\",{\"1\":{\"1012\":1}}],[\"不需要系统帮忙改\",{\"1\":{\"1006\":1}}],[\"不需要ci服务器了\",{\"1\":{\"994\":1}}],[\"不需要显式使用\",{\"1\":{\"928\":1}}],[\"不需要显示声明同步监视器\",{\"1\":{\"687\":1}}],[\"不需要回表\",{\"1\":{\"922\":1}}],[\"不需要执行后面的复杂操作\",{\"1\":{\"894\":1}}],[\"不需要开发人员再去写bean相关的配置\",{\"1\":{\"731\":1}}],[\"不需要等到程序的运行期间\",{\"1\":{\"725\":1}}],[\"不需要调用new类实例的时候就执行了\",{\"1\":{\"697\":1}}],[\"不需要建立连接\",{\"1\":{\"688\":1}}],[\"不需要额外的硬件电路\",{\"1\":{\"648\":1}}],[\"不需要额外的配置和管理\",{\"1\":{\"550\":1,\"1166\":1}}],[\"不需要\",{\"1\":{\"506\":1,\"1005\":1,\"1006\":1}}],[\"不需要用户去手动释放锁\",{\"1\":{\"352\":1}}],[\"不需要涉及复杂的业务逻辑\",{\"1\":{\"156\":1}}],[\"不需要担心对象的内存泄漏问题\",{\"1\":{\"125\":1}}],[\"不同之一就是alt+esc没有缩略图预览\",{\"1\":{\"1036\":1}}],[\"不同之处在于它的\",{\"1\":{\"546\":1,\"1166\":1}}],[\"不同时刻启动的事务会有不同的\",{\"1\":{\"906\":1}}],[\"不同存储引擎的表数据存取方式不同\",{\"1\":{\"892\":1}}],[\"不同类型的exchange转发消息的策略有所区别\",{\"1\":{\"823\":1}}],[\"不同库之间的版本冲突也非常常见\",{\"1\":{\"726\":1}}],[\"不同服务节点的通信是如何做的呢\",{\"1\":{\"713\":1}}],[\"不同服务节点之间经常需要相互调用\",{\"1\":{\"713\":1}}],[\"不同为1\",{\"1\":{\"706\":1}}],[\"不同点\",{\"1\":{\"603\":1,\"680\":1,\"686\":1}}],[\"不同是这个是上面提到的\",{\"1\":{\"570\":1}}],[\"不同namespace查出的数据会放在自己对应的缓存中\",{\"1\":{\"446\":1}}],[\"不同\",{\"1\":{\"213\":1}}],[\"不同数据库\",{\"1\":{\"176\":1}}],[\"不同线程之间不会相互影响\",{\"1\":{\"156\":1}}],[\"不同域\",{\"1\":{\"141\":1}}],[\"不同的行业差距还是很大的\",{\"1\":{\"1150\":1}}],[\"不同的应用场景对应不同的分库分表方法\",{\"1\":{\"961\":1}}],[\"不同的存储引擎共用一个\",{\"1\":{\"892\":1}}],[\"不同的存储技术\",{\"1\":{\"554\":1}}],[\"不同的引用类型\",{\"1\":{\"636\":1}}],[\"不同的namespace之间是隔离的\",{\"1\":{\"598\":1}}],[\"不同的操作系统默认下ttl是不同的\",{\"1\":{\"76\":1}}],[\"不同的是\",{\"1\":{\"73\":1}}],[\"不能说\",{\"1\":{\"1121\":1}}],[\"不能\",{\"1\":{\"1051\":1,\"1089\":1}}],[\"不能使用索引\",{\"1\":{\"923\":1}}],[\"不能使用\",{\"1\":{\"717\":1,\"923\":1}}],[\"不能使用这种方式\",{\"1\":{\"440\":1}}],[\"不能实现这样的方案\",{\"1\":{\"932\":1}}],[\"不能实现两个不同泛型参数的同一接口\",{\"1\":{\"717\":1}}],[\"不能实例化泛型数组\",{\"1\":{\"717\":1}}],[\"不能实例化泛型参数的数组\",{\"1\":{\"717\":1}}],[\"不能实例化\",{\"1\":{\"686\":1}}],[\"不能的话就考虑扩容\",{\"1\":{\"703\":1}}],[\"不能把add\",{\"1\":{\"688\":1}}],[\"不能赋值给\",{\"1\":{\"688\":1}}],[\"不能通过编译\",{\"1\":{\"685\":1}}],[\"不能在方法中定义\",{\"0\":{\"663\":1}}],[\"不能理解为文件级整体覆盖\",{\"1\":{\"543\":1}}],[\"不能理解为什么会默认拦截所有请求\",{\"1\":{\"534\":1}}],[\"不能缺少\",{\"1\":{\"429\":1}}],[\"不能省略\",{\"1\":{\"422\":1}}],[\"不能共存\",{\"1\":{\"326\":2}}],[\"不能直接操作主内存中的变量\",{\"1\":{\"287\":1}}],[\"不能工作\",{\"1\":{\"229\":1}}],[\"不能加\",{\"1\":{\"192\":1}}],[\"不能跨不同域名共享\",{\"1\":{\"141\":1}}],[\"不能狭义的理解为数据库的事务\",{\"1\":{\"100\":1}}],[\"不然容易成为无头苍蝇\",{\"1\":{\"1144\":1}}],[\"不然面试的意义是什么\",{\"1\":{\"1132\":1}}],[\"不然启动报错\",{\"1\":{\"1010\":1}}],[\"不然会很慢\",{\"1\":{\"1003\":1}}],[\"不然会报错\",{\"1\":{\"192\":1,\"566\":1}}],[\"不然我老是觉得没有生效\",{\"1\":{\"993\":1}}],[\"不然我手机苹果电脑华为平板小米直接协调的话就会麻烦\",{\"1\":{\"553\":1}}],[\"不然老是报错\",{\"1\":{\"981\":1}}],[\"不然太乱了\",{\"1\":{\"936\":1}}],[\"不然等程序查完之后\",{\"1\":{\"904\":1}}],[\"不然不能配置成功\",{\"1\":{\"792\":1,\"802\":1}}],[\"不然不好对照\",{\"1\":{\"261\":1}}],[\"不然就是从环境变量找了\",{\"1\":{\"784\":1}}],[\"不然就会出现上述问题\",{\"1\":{\"111\":1}}],[\"不然都默认用的是object类中的方法\",{\"1\":{\"688\":1}}],[\"不然一开始只是一个常量\",{\"1\":{\"688\":1}}],[\"不然要一直投票\",{\"1\":{\"572\":1}}],[\"不然报错\",{\"1\":{\"523\":1}}],[\"不然光在属性中写点方法没提示不说左边也不给自动生成\",{\"1\":{\"361\":1}}],[\"不然后续排错会令人崩溃\",{\"1\":{\"261\":1}}],[\"不然前端列表显示一片空白\",{\"1\":{\"247\":1}}],[\"不然跨域请求会丢失携带的cookies\",{\"1\":{\"231\":1}}],[\"不然\",{\"1\":{\"229\":1,\"625\":1}}],[\"不然里面div点一下弹两个\",{\"1\":{\"220\":1}}],[\"不然支付宝服务器还会通知\",{\"1\":{\"192\":1}}],[\"不然默认都是用同一个事务\",{\"1\":{\"179\":1}}],[\"不然可能造成锁表的结果\",{\"1\":{\"169\":1}}],[\"不然配置文件写的过期时间之类的失效\",{\"1\":{\"125\":1}}],[\"不完全是这样的\",{\"1\":{\"125\":1}}],[\"不像demo中entity直接绑yaml没有代码处理\",{\"1\":{\"123\":1}}],[\"不用考虑这些途径\",{\"1\":{\"1128\":1}}],[\"不用考虑这个问题\",{\"1\":{\"118\":1}}],[\"不用追求一定要去用新技术的团队\",{\"1\":{\"1111\":1}}],[\"不用鼠标滚轮\",{\"1\":{\"998\":1}}],[\"不用的索引的存在会造成不必要的性能损耗\",{\"1\":{\"974\":1}}],[\"不用的两种方案\",{\"1\":{\"142\":1}}],[\"不用去\",{\"1\":{\"899\":1}}],[\"不用自己代码层面转来转去了\",{\"1\":{\"872\":1}}],[\"不用自己写类\",{\"1\":{\"706\":1}}],[\"不用自己手动组装电脑了\",{\"1\":{\"472\":1}}],[\"不用对\",{\"1\":{\"621\":1}}],[\"不用像\",{\"1\":{\"594\":1}}],[\"不用配\",{\"1\":{\"480\":1}}],[\"不用手动\",{\"1\":{\"242\":1}}],[\"不用\",{\"1\":{\"240\":1,\"305\":1,\"713\":1}}],[\"不用占带宽\",{\"1\":{\"238\":1}}],[\"不用全局的逻辑删除\",{\"1\":{\"236\":1}}],[\"不用注入\",{\"1\":{\"229\":1}}],[\"不用编写一大堆的模式代码了\",{\"1\":{\"121\":1}}],[\"不用管缓存\",{\"1\":{\"119\":1}}],[\"不用担心\",{\"1\":{\"115\":1}}],[\"不会生效或者表现奇怪\",{\"1\":{\"1005\":1}}],[\"不会\",{\"1\":{\"1005\":1}}],[\"不会影响其他的数据库\",{\"1\":{\"960\":1}}],[\"不会忽略列值为null的行\",{\"1\":{\"956\":1}}],[\"不会再对结果集进行去重操作\",{\"1\":{\"947\":1}}],[\"不会使用索引\",{\"1\":{\"923\":1}}],[\"不会加行锁\",{\"1\":{\"906\":1}}],[\"不会把整个channel中所有消息给一棒子打死\",{\"1\":{\"837\":1}}],[\"不会把依赖的jar包也打包进去的\",{\"1\":{\"559\":1}}],[\"不会在getnumber\",{\"1\":{\"771\":1}}],[\"不会在使用期间过期\",{\"1\":{\"152\":1}}],[\"不会进入全局的字符串常量池\",{\"1\":{\"722\":1}}],[\"不会堵塞在那里\",{\"1\":{\"713\":1}}],[\"不会初始化子类的几种\",{\"0\":{\"698\":1}}],[\"不会释放同步监视器\",{\"1\":{\"687\":1}}],[\"不会执行\",{\"1\":{\"686\":1}}],[\"不会去回收\",{\"1\":{\"660\":1}}],[\"不会耗尽内存\",{\"1\":{\"636\":1}}],[\"不会出现用户操作不允许等用户体验不好的情况\",{\"1\":{\"571\":1}}],[\"不会修改数据\",{\"1\":{\"448\":1}}],[\"不会自动封装了\",{\"1\":{\"422\":1}}],[\"不会自动续期\",{\"1\":{\"115\":1}}],[\"不会等待各个线程运行结束\",{\"1\":{\"353\":1}}],[\"不会阻塞的状态就是自旋\",{\"1\":{\"324\":1}}],[\"不会造成所谓的数据不一致的问题\",{\"1\":{\"303\":1}}],[\"不会造成所谓的数据不一致问题\",{\"1\":{\"302\":1}}],[\"不会调试通过试用期堪忧\",{\"1\":{\"261\":1}}],[\"不会一直持有各个业务资源的锁\",{\"1\":{\"184\":1}}],[\"不会过期\",{\"1\":{\"152\":1}}],[\"不会丢失\",{\"1\":{\"130\":1}}],[\"不会导致死锁\",{\"1\":{\"83\":1}}],[\"不要成为各个领域的杂牌军\",{\"1\":{\"1150\":1}}],[\"不要成为被手机支配的人\",{\"1\":{\"1148\":1}}],[\"不要学校安排什么你就学什么\",{\"1\":{\"1150\":1}}],[\"不要使用集成开发环境\",{\"1\":{\"1150\":1}}],[\"不要小看配置环境变量这个过程\",{\"1\":{\"1150\":1}}],[\"不要小看这个\",{\"1\":{\"985\":1}}],[\"不要问我为什么\",{\"1\":{\"1150\":1}}],[\"不要灰心\",{\"1\":{\"1150\":1}}],[\"不要变成下一个我\",{\"1\":{\"1150\":1}}],[\"不要当一个彻头彻尾的伸手党\",{\"1\":{\"1144\":1}}],[\"不要担心计划完不成\",{\"1\":{\"1144\":1}}],[\"不要今天学\",{\"1\":{\"1144\":1}}],[\"不要把你的计划当摆设\",{\"1\":{\"1142\":1}}],[\"不要给自己太多的任务\",{\"1\":{\"1142\":1}}],[\"不要太盲目自信\",{\"1\":{\"1142\":1}}],[\"不要因为某一个方向火\",{\"1\":{\"1139\":1}}],[\"不要浪费时间\",{\"1\":{\"1135\":1}}],[\"不要相信挽留\",{\"0\":{\"1120\":1}}],[\"不要先离职再找工作\",{\"1\":{\"1119\":1}}],[\"不要逞强\",{\"1\":{\"1077\":1}}],[\"不要奇怪\",{\"1\":{\"1005\":1}}],[\"不要写带versioned的有关的路径了\",{\"1\":{\"993\":1}}],[\"不要漏了\",{\"1\":{\"959\":1}}],[\"不要求合并的表列名称相同时\",{\"1\":{\"947\":1}}],[\"不要对经常变动的数据加索引\",{\"1\":{\"936\":1}}],[\"不要删除消息\",{\"1\":{\"837\":1}}],[\"不要构造参数给值\",{\"1\":{\"779\":1}}],[\"不要搞文件夹\",{\"1\":{\"706\":1}}],[\"不要过于深究\",{\"1\":{\"688\":1}}],[\"不要想复杂了\",{\"1\":{\"686\":1}}],[\"不要进行解释执行\",{\"1\":{\"635\":1}}],[\"不要混在一起看\",{\"1\":{\"627\":1}}],[\"不要花精力在这些工具上面\",{\"1\":{\"601\":1}}],[\"不要被各种高大上的词汇唬住了\",{\"1\":{\"552\":1}}],[\"不要一听就会一动手就废\",{\"1\":{\"552\":1}}],[\"不要用\",{\"1\":{\"426\":1}}],[\"不要用微博的\",{\"1\":{\"261\":1}}],[\"不要再\",{\"1\":{\"229\":1}}],[\"不要做锤子之神\",{\"1\":{\"203\":1}}],[\"不要忘了第二个网址告诉的需要配置类加\",{\"1\":{\"147\":1}}],[\"不要很多都公用一把锁\",{\"1\":{\"115\":1}}],[\"不要直接使用\",{\"1\":{\"107\":1}}],[\"不局限于\",{\"1\":{\"92\":1}}],[\"不加锁的话\",{\"1\":{\"927\":1}}],[\"不加会有指令重排问题\",{\"1\":{\"779\":1}}],[\"不加会有以下情况\",{\"1\":{\"688\":1}}],[\"不加会编译报错\",{\"1\":{\"688\":1}}],[\"不加countdownlatch的执行结果\",{\"1\":{\"334\":1}}],[\"不加\",{\"1\":{\"73\":1,\"505\":1,\"529\":1}}],[\"不是你之前学的简单的html\",{\"1\":{\"1150\":1}}],[\"不是你走到巅峰了\",{\"1\":{\"1140\":1}}],[\"不是简单的范例\",{\"1\":{\"1144\":1}}],[\"不是简单请求的都需要发送一个预检请求\",{\"1\":{\"230\":1}}],[\"不是为了凌驾于没有享受过同等资源的人们之上\",{\"1\":{\"1077\":1}}],[\"不是一列列比\",{\"1\":{\"1051\":1}}],[\"不是一个方法\",{\"1\":{\"125\":1}}],[\"不是二选一\",{\"1\":{\"932\":1}}],[\"不是随机是跟hash一样固定的\",{\"1\":{\"865\":1}}],[\"不是字符串常量池\",{\"1\":{\"725\":1}}],[\"不是类\",{\"1\":{\"688\":1}}],[\"不是原子性\",{\"0\":{\"644\":1}}],[\"不是所谓的\",{\"0\":{\"572\":1}}],[\"不是自己本身的模块\",{\"1\":{\"556\":1}}],[\"不是阻止请求发送\",{\"1\":{\"543\":1}}],[\"不是\",{\"1\":{\"493\":1,\"568\":1,\"599\":1,\"773\":1}}],[\"不是局部变量在该方法被执行\",{\"1\":{\"388\":1}}],[\"不是废话\",{\"1\":{\"182\":1}}],[\"不是像md5那样的非对称的加密算法能够讲任意长度字符加密后长固定长度\",{\"1\":{\"131\":1}}],[\"不是很认可所谓的双token方案\",{\"1\":{\"70\":1}}],[\"不是则需最后补上一个等号\",{\"1\":{\"58\":1}}],[\"不过这些信息仅供参考\",{\"1\":{\"1116\":1}}],[\"不过这里如果有配置拦截器\",{\"1\":{\"543\":1}}],[\"不过这里我看只是setcacheobject\",{\"1\":{\"69\":1}}],[\"不过计算机里面所有的东西都是二进制了\",{\"1\":{\"1091\":1}}],[\"不过它是让我们在没有最小化的窗口之间快速切换\",{\"0\":{\"1036\":1}}],[\"不过你要注意\",{\"1\":{\"961\":1}}],[\"不过你可以使用resourceurlprovider自定义模块宏或帮助类\",{\"1\":{\"539\":1}}],[\"不过话说回来\",{\"1\":{\"898\":1}}],[\"不过要想进入mysql还得先找出此时root用户的密码\",{\"1\":{\"802\":1}}],[\"不过自己写的这篇很多东西还可以借鉴\",{\"1\":{\"800\":1}}],[\"不过又放弃了\",{\"1\":{\"713\":1}}],[\"不过一般序列化传值很少传person这种\",{\"1\":{\"688\":1}}],[\"不过\",{\"1\":{\"609\":1,\"892\":1,\"947\":1,\"970\":1,\"972\":1,\"1152\":1}}],[\"不过vue里可以\",{\"1\":{\"220\":1}}],[\"不过还是根据不同情况选择合适的\",{\"1\":{\"156\":1}}],[\"不过期\",{\"0\":{\"66\":1}}],[\"不过需要注意的是\",{\"1\":{\"60\":1}}],[\"返回字符substr在str中第n次出现位置之前的字符串\",{\"1\":{\"959\":1}}],[\"返回指定date对应的月份\",{\"1\":{\"951\":1}}],[\"返回带有来自一个组的连接的非null值的字符串结果\",{\"1\":{\"946\":1}}],[\"返回boolean时可以指向\",{\"1\":{\"770\":1}}],[\"返回同一个数字\",{\"1\":{\"686\":1}}],[\"返回类型使用父类的子类\",{\"1\":{\"680\":1}}],[\"返回自定义的\",{\"1\":{\"625\":1}}],[\"返回相同结果\",{\"1\":{\"590\":1}}],[\"返回null\",{\"1\":{\"582\":1}}],[\"返回json数据\",{\"1\":{\"503\":1}}],[\"返回一个数学表达式类似于\",{\"1\":{\"877\":1}}],[\"返回一个布尔值\",{\"1\":{\"748\":1}}],[\"返回一个值\",{\"1\":{\"748\":1}}],[\"返回一个ioc容器\",{\"1\":{\"480\":1}}],[\"返回一个defaultsqlsession对象\",{\"1\":{\"465\":1}}],[\"返回target包装后的对象\",{\"1\":{\"465\":1}}],[\"返回包含configuration的defaultsqlsession\",{\"1\":{\"465\":1}}],[\"返回map集合\",{\"1\":{\"416\":1}}],[\"返回list和map\",{\"0\":{\"412\":1}}],[\"返回\",{\"1\":{\"388\":1}}],[\"返回的线程池对象的弊端如下\",{\"1\":{\"366\":1}}],[\"返回的数据等\",{\"1\":{\"156\":1}}],[\"返回了一个寂寞\",{\"1\":{\"301\":1}}],[\"返回instance\",{\"1\":{\"301\":1}}],[\"返回数据\",{\"1\":{\"252\":1}}],[\"返回数据又放入缓存\",{\"1\":{\"103\":1}}],[\"返回访问令牌\",{\"1\":{\"136\":1}}],[\"返回值就是i自增前的值\",{\"1\":{\"778\":1}}],[\"返回值就在常量池中\",{\"1\":{\"687\":1}}],[\"返回值t\",{\"1\":{\"770\":1}}],[\"返回值boolean\",{\"1\":{\"770\":1}}],[\"返回值的类型也一定要和接口中的方法一致\",{\"1\":{\"761\":1}}],[\"返回值是\",{\"1\":{\"752\":2}}],[\"返回值\",{\"1\":{\"688\":1,\"770\":4}}],[\"返回值封装成对象\",{\"1\":{\"126\":1}}],[\"返回值r\",{\"1\":{\"92\":1,\"770\":1}}],[\"返回值如果不重要的话\",{\"1\":{\"48\":1}}],[\"返回顶部按钮\",{\"1\":{\"2\":1,\"5\":1}}],[\"o服务端javascript环境\",{\"1\":{\"1099\":1}}],[\"oxffffffff\",{\"1\":{\"1092\":1}}],[\"ox00000000\",{\"1\":{\"1092\":1}}],[\"ox0ff0f0f0\",{\"1\":{\"1091\":1}}],[\"octet\",{\"1\":{\"1084\":1}}],[\"ocr\",{\"1\":{\"1005\":1}}],[\"oh\",{\"1\":{\"1005\":5}}],[\"ohmyzsh\",{\"1\":{\"1005\":2}}],[\"omz\",{\"1\":{\"1005\":1}}],[\"omi\",{\"1\":{\"996\":1}}],[\"obsidian\",{\"1\":{\"1003\":1,\"1005\":5}}],[\"obs\",{\"1\":{\"1003\":1}}],[\"obj\",{\"1\":{\"49\":1,\"660\":2,\"688\":2,\"1084\":3}}],[\"object类中\",{\"1\":{\"687\":1}}],[\"object对象就不会被回收\",{\"1\":{\"660\":1}}],[\"objects\",{\"1\":{\"624\":1}}],[\"objectwrapperfactory\",{\"1\":{\"400\":1}}],[\"objectfactory\",{\"1\":{\"400\":1}}],[\"object>>\",{\"1\":{\"105\":1,\"157\":2}}],[\"object>\",{\"1\":{\"105\":1,\"157\":3,\"252\":2,\"415\":3,\"876\":1}}],[\"objectmapper\",{\"1\":{\"105\":8,\"125\":5,\"492\":2}}],[\"object\",{\"0\":{\"238\":1,\"251\":1},\"1\":{\"49\":1,\"157\":4,\"229\":2,\"251\":1,\"410\":1,\"465\":2,\"492\":2,\"496\":1,\"543\":3,\"594\":1,\"660\":2,\"688\":3,\"706\":1,\"715\":8,\"716\":2,\"717\":3,\"718\":2,\"987\":1,\"1012\":1,\"1014\":1,\"1081\":3,\"1084\":2}}],[\"oid\",{\"1\":{\"938\":3,\"959\":5}}],[\"o事件准备好时进行通知\",{\"1\":{\"849\":1}}],[\"o流\",{\"1\":{\"849\":1}}],[\"o复用模型\",{\"1\":{\"849\":1}}],[\"o多路复用\",{\"1\":{\"849\":1}}],[\"o多路复用吗\",{\"1\":{\"849\":1}}],[\"owner\",{\"1\":{\"786\":2}}],[\"o2\",{\"1\":{\"765\":2,\"766\":3}}],[\"o2o\",{\"1\":{\"204\":1}}],[\"o1\",{\"1\":{\"765\":2,\"766\":4}}],[\"osascript\",{\"1\":{\"1005\":1}}],[\"os中\",{\"1\":{\"998\":1}}],[\"osi参考模型\",{\"1\":{\"688\":1}}],[\"os\",{\"1\":{\"540\":7,\"1084\":2}}],[\"ossobjectname\",{\"1\":{\"1084\":3}}],[\"osstargetdic\",{\"1\":{\"1084\":2}}],[\"ossstatic\",{\"1\":{\"539\":2}}],[\"oss\",{\"0\":{\"238\":1},\"1\":{\"238\":2,\"594\":2,\"677\":1}}],[\"ok\",{\"1\":{\"537\":1,\"576\":1,\"687\":1,\"688\":2,\"691\":1,\"851\":1,\"1161\":2}}],[\"ognl会进行字符串与数字的转换判断\",{\"1\":{\"430\":1,\"432\":1}}],[\"ognl参照ppt或者官方文档\",{\"1\":{\"430\":1}}],[\"ognl\",{\"1\":{\"430\":1}}],[\"o\",{\"0\":{\"711\":1,\"712\":1,\"713\":1,\"1071\":1},\"1\":{\"387\":1,\"430\":1,\"676\":1,\"685\":2,\"709\":4,\"711\":1,\"712\":19,\"713\":1,\"849\":1,\"915\":1,\"916\":6,\"932\":1,\"972\":2}}],[\"old\",{\"1\":{\"385\":2,\"1155\":1}}],[\"oldval\",{\"1\":{\"220\":1}}],[\"oom常见原因\",{\"0\":{\"391\":1}}],[\"oom\",{\"1\":{\"362\":1,\"366\":2,\"637\":1,\"893\":1}}],[\"oauth\",{\"1\":{\"136\":1}}],[\"oauth2\",{\"0\":{\"136\":1},\"1\":{\"136\":1}}],[\"others=\",{\"1\":{\"786\":1}}],[\"others\",{\"1\":{\"786\":1}}],[\"otherwise>\",{\"1\":{\"433\":1}}],[\"otherwise\",{\"1\":{\"430\":1,\"433\":1}}],[\"other\",{\"0\":{\"250\":1,\"388\":1,\"1000\":1,\"1023\":1},\"1\":{\"126\":1,\"846\":1,\"929\":2,\"1076\":1}}],[\"offer\",{\"1\":{\"1103\":7}}],[\"officeaddr\",{\"1\":{\"1005\":1}}],[\"office\",{\"1\":{\"996\":1}}],[\"official\",{\"1\":{\"477\":2}}],[\"off\",{\"1\":{\"894\":1,\"1038\":1}}],[\"oftype=\",{\"1\":{\"426\":1}}],[\"oftype\",{\"1\":{\"426\":2}}],[\"of\",{\"1\":{\"125\":1,\"157\":2,\"260\":1,\"317\":2,\"362\":3,\"642\":1,\"689\":1,\"717\":1,\"876\":1,\"1005\":2,\"1006\":3,\"1009\":1,\"1081\":1}}],[\"opsforvalue\",{\"1\":{\"876\":1}}],[\"opsforhash\",{\"1\":{\"876\":1}}],[\"opinionated\",{\"1\":{\"473\":1}}],[\"opration\",{\"1\":{\"271\":1}}],[\"opt\",{\"1\":{\"1001\":3,\"1005\":4}}],[\"opts=\",{\"1\":{\"267\":2}}],[\"option>\",{\"1\":{\"610\":2}}],[\"optional类可以避免空指针异\",{\"1\":{\"689\":1}}],[\"optional>\",{\"1\":{\"546\":1,\"1010\":2}}],[\"optional\",{\"1\":{\"546\":1}}],[\"options中为准\",{\"1\":{\"549\":1}}],[\"options中配置\",{\"1\":{\"547\":1}}],[\"options有一个变量和environment\",{\"1\":{\"549\":1}}],[\"options其实就是我们在程序中需要的运行时环境变量\",{\"1\":{\"547\":1}}],[\"options\",{\"0\":{\"547\":1},\"1\":{\"229\":1,\"230\":1,\"383\":1,\"549\":1}}],[\"option\",{\"1\":{\"101\":1,\"793\":1,\"803\":1}}],[\"operation=\",{\"1\":{\"955\":1}}],[\"operations\",{\"1\":{\"260\":1,\"849\":1}}],[\"operator\",{\"1\":{\"594\":1,\"1005\":1}}],[\"open=\",{\"1\":{\"436\":1}}],[\"open\",{\"1\":{\"436\":1,\"540\":1,\"678\":1,\"686\":1,\"1084\":1}}],[\"opensession\",{\"1\":{\"402\":1,\"444\":1}}],[\"openfeign可以通过设置请求头来发送这些状态信息\",{\"1\":{\"581\":1}}],[\"openfeign是一个基于http协议的java\",{\"1\":{\"581\":1}}],[\"openfeign会有丢失请求头的情况是因为它是基于http请求\",{\"1\":{\"581\":1}}],[\"openfeign日志增强\",{\"0\":{\"578\":1}}],[\"openfeign默认支持ribbon\",{\"1\":{\"577\":1}}],[\"openfeign默认等待1秒钟\",{\"1\":{\"577\":1}}],[\"openfeign超时控制\",{\"0\":{\"577\":1}}],[\"openfeign服务调用\",{\"0\":{\"576\":1}}],[\"openfeign\",{\"1\":{\"178\":1,\"251\":1,\"576\":1,\"594\":1}}],[\"openapi获取用户信息\",{\"1\":{\"138\":1}}],[\"openai\",{\"1\":{\"112\":1}}],[\"oplatform\",{\"1\":{\"136\":1}}],[\"overview\",{\"1\":{\"554\":1,\"594\":1}}],[\"overflow\",{\"1\":{\"262\":1}}],[\"override\",{\"1\":{\"97\":1,\"157\":3,\"229\":1,\"486\":1,\"538\":1,\"624\":2,\"683\":1,\"890\":1,\"1082\":1}}],[\"over\",{\"1\":{\"76\":1,\"281\":1}}],[\"onhand\",{\"1\":{\"959\":2}}],[\"onenote\",{\"1\":{\"1145\":1}}],[\"one\",{\"1\":{\"721\":2,\"864\":1,\"1003\":1}}],[\"one=two\",{\"1\":{\"721\":1}}],[\"one=\",{\"1\":{\"721\":2}}],[\"one规则\",{\"1\":{\"88\":1}}],[\"online\",{\"1\":{\"976\":2}}],[\"only=\",{\"1\":{\"462\":1}}],[\"only\",{\"0\":{\"860\":1},\"1\":{\"362\":1}}],[\"onload=\",{\"1\":{\"63\":1}}],[\"once\",{\"1\":{\"633\":1,\"634\":1}}],[\"once=\",{\"1\":{\"220\":1}}],[\"onceperrequestfilter\",{\"1\":{\"69\":1,\"890\":1}}],[\"on\",{\"1\":{\"153\":1,\"220\":5,\"221\":3,\"421\":1,\"426\":1,\"459\":2,\"793\":1,\"803\":1,\"894\":1,\"932\":3,\"937\":3,\"938\":3,\"959\":9,\"961\":1,\"964\":1,\"994\":6,\"1006\":2,\"1009\":1,\"1084\":1}}],[\"orm框架\",{\"1\":{\"1150\":1}}],[\"oracle\",{\"1\":{\"438\":2,\"440\":1,\"609\":1,\"634\":1,\"800\":2,\"905\":3}}],[\"oray\",{\"1\":{\"197\":1}}],[\"order`\",{\"1\":{\"973\":4}}],[\"orderby\",{\"1\":{\"887\":1}}],[\"orderto\",{\"1\":{\"846\":1}}],[\"orderitemserviceimpl\",{\"1\":{\"831\":1}}],[\"orderitemservice\",{\"1\":{\"831\":1}}],[\"ordering\",{\"1\":{\"317\":1}}],[\"orderreturnreasonentity\",{\"1\":{\"830\":2}}],[\"order成功了\",{\"1\":{\"606\":1}}],[\"order80\",{\"1\":{\"575\":1}}],[\"orderservice\",{\"1\":{\"179\":6}}],[\"orderserviceimpl\",{\"1\":{\"179\":5}}],[\"order\",{\"0\":{\"946\":1},\"1\":{\"172\":1,\"411\":2,\"491\":1,\"844\":2,\"846\":2,\"868\":2,\"923\":2,\"925\":3,\"946\":1,\"949\":1,\"959\":1,\"963\":1}}],[\"org\",{\"0\":{\"133\":1},\"1\":{\"123\":1,\"125\":1,\"132\":1,\"139\":2,\"140\":1,\"178\":2,\"227\":1,\"397\":1,\"399\":1,\"400\":5,\"402\":5,\"403\":1,\"404\":1,\"408\":1,\"423\":1,\"427\":2,\"428\":1,\"429\":3,\"430\":1,\"436\":1,\"448\":1,\"451\":1,\"459\":4,\"460\":13,\"462\":22,\"463\":1,\"464\":3,\"489\":3,\"538\":2,\"559\":1,\"568\":1,\"828\":1,\"830\":1,\"876\":1,\"883\":1,\"1010\":1,\"1082\":2,\"1155\":1,\"1161\":1}}],[\"or\",{\"1\":{\"63\":1,\"151\":1,\"430\":1,\"432\":1,\"473\":1,\"647\":1,\"959\":4}}],[\"origins<\",{\"1\":{\"706\":1}}],[\"original的改变不会影响deepcopy\",{\"1\":{\"683\":1}}],[\"original\",{\"1\":{\"559\":1}}],[\"original文件吗\",{\"1\":{\"559\":1}}],[\"origin\",{\"1\":{\"46\":2,\"47\":1,\"54\":1,\"231\":1,\"799\":3,\"985\":2,\"987\":6,\"988\":1,\"1005\":2}}],[\"outer\",{\"1\":{\"964\":4}}],[\"out的类型为printstream\",{\"1\":{\"688\":1}}],[\"outofmemoryerror\",{\"1\":{\"636\":1}}],[\"out\",{\"1\":{\"48\":1,\"133\":3,\"176\":1,\"295\":3,\"302\":1,\"310\":2,\"334\":2,\"335\":2,\"338\":2,\"339\":2,\"343\":2,\"352\":3,\"357\":1,\"374\":3,\"403\":2,\"415\":2,\"419\":1,\"427\":2,\"429\":1,\"430\":1,\"436\":1,\"443\":3,\"480\":1,\"517\":2,\"529\":1,\"577\":1,\"647\":1,\"650\":1,\"653\":1,\"658\":15,\"670\":1,\"685\":2,\"686\":7,\"687\":3,\"688\":5,\"689\":2,\"691\":4,\"715\":1,\"716\":2,\"720\":1,\"721\":2,\"723\":3,\"724\":1,\"725\":3,\"750\":1,\"752\":7,\"754\":2,\"755\":2,\"756\":2,\"763\":2,\"765\":2,\"766\":1,\"767\":2,\"768\":1,\"769\":1,\"771\":4,\"775\":1,\"776\":2,\"778\":3,\"780\":5,\"782\":1,\"784\":1,\"836\":2,\"857\":1,\"1019\":1}}],[\"68\",{\"1\":{\"959\":1}}],[\"6867\",{\"1\":{\"48\":1}}],[\"6k\",{\"1\":{\"959\":1,\"1104\":2}}],[\"6381\",{\"1\":{\"865\":1}}],[\"6380\",{\"1\":{\"865\":1}}],[\"6379\",{\"1\":{\"213\":2,\"794\":2,\"861\":2,\"865\":2}}],[\"61614\",{\"1\":{\"825\":1}}],[\"61613\",{\"1\":{\"825\":1}}],[\"618用另外一组\",{\"1\":{\"598\":1}}],[\"6版本以前用户可以使用如下命令\",{\"1\":{\"792\":1,\"802\":1}}],[\"6ca0b218112d\",{\"1\":{\"676\":1}}],[\"6997930907227127838\",{\"1\":{\"499\":1}}],[\"64=1024\",{\"1\":{\"961\":1}}],[\"64时\",{\"1\":{\"703\":1}}],[\"64\",{\"1\":{\"688\":1,\"703\":1,\"961\":4}}],[\"649bec2e\",{\"1\":{\"489\":1}}],[\"64m\",{\"1\":{\"383\":1}}],[\"6<\",{\"1\":{\"397\":1}}],[\"6a8997560b05\",{\"1\":{\"388\":1}}],[\"67\",{\"1\":{\"76\":1}}],[\"6\",{\"0\":{\"121\":1,\"122\":1,\"188\":1,\"238\":1,\"278\":1,\"308\":1,\"366\":1,\"418\":1,\"419\":1,\"420\":1,\"421\":1,\"422\":1,\"423\":1,\"424\":1,\"425\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"435\":1,\"436\":1,\"437\":1,\"451\":1,\"464\":1,\"498\":1,\"534\":1,\"569\":1,\"628\":1,\"796\":1,\"806\":1,\"897\":1,\"1150\":1,\"1151\":1},\"1\":{\"70\":1,\"186\":1,\"216\":1,\"261\":1,\"267\":1,\"290\":1,\"295\":1,\"334\":4,\"335\":1,\"343\":1,\"372\":1,\"383\":1,\"388\":1,\"389\":1,\"458\":1,\"567\":1,\"614\":1,\"658\":4,\"666\":2,\"688\":1,\"691\":1,\"697\":1,\"703\":1,\"712\":1,\"752\":1,\"767\":1,\"775\":1,\"778\":1,\"802\":1,\"849\":1,\"908\":1,\"917\":1,\"921\":1,\"924\":2,\"928\":1,\"961\":1,\"1005\":2,\"1006\":1}}],[\"6020\",{\"1\":{\"1154\":1}}],[\"600\",{\"1\":{\"917\":1,\"921\":1,\"932\":1}}],[\"60000\",{\"1\":{\"448\":1,\"577\":2}}],[\"600吞吐\",{\"0\":{\"80\":1,\"82\":1}}],[\"6036475\",{\"1\":{\"49\":1}}],[\"60s\",{\"1\":{\"48\":2,\"907\":1}}],[\"60\",{\"1\":{\"48\":2,\"128\":2,\"586\":1,\"685\":1,\"1107\":1}}],[\"告诉\",{\"1\":{\"576\":1}}],[\"告诉springboot这是一个配置类\",{\"0\":{\"517\":1}}],[\"告诉我们支付成功的信息\",{\"1\":{\"192\":1}}],[\"告诉你采用的是哪个\",{\"1\":{\"48\":1}}],[\"告诉服务器\",{\"1\":{\"46\":1}}],[\"并没有这样的公司规定\",{\"1\":{\"1131\":1}}],[\"并没有对a就行任何操作\",{\"1\":{\"388\":1}}],[\"并说这是公司规定\",{\"1\":{\"1131\":1}}],[\"并可以用于性能分析\",{\"1\":{\"1081\":1}}],[\"并可能导致图形性能下降\",{\"1\":{\"998\":1}}],[\"并确保它们在编译和运行时可用\",{\"1\":{\"1012\":1}}],[\"并确保项目代码与该版本兼容\",{\"1\":{\"1012\":1}}],[\"并确保你对服务器配置有足够的了解\",{\"1\":{\"48\":1}}],[\"并软链到\",{\"1\":{\"1005\":1}}],[\"并希望将其设置为\",{\"1\":{\"998\":1}}],[\"并对所有用户有效\",{\"1\":{\"998\":1}}],[\"并创建一个新的提交\",{\"1\":{\"990\":2}}],[\"并创建同等数量的组件\",{\"1\":{\"220\":1}}],[\"并综合考虑其他死锁预防和处理机制来确保系统的稳定性\",{\"1\":{\"933\":1}}],[\"并\",{\"1\":{\"931\":1}}],[\"并用他安装\",{\"1\":{\"1003\":1}}],[\"并用这个索引支持\",{\"1\":{\"923\":1}}],[\"并用求出的值来替换表达式\",{\"1\":{\"725\":1}}],[\"并基于原理给出相应的实践建议\",{\"1\":{\"904\":1}}],[\"并更好地使用\",{\"1\":{\"908\":1}}],[\"并更新内存\",{\"1\":{\"899\":1}}],[\"并更改它们的文件名\",{\"1\":{\"540\":1}}],[\"并设置了一个有效期\",{\"1\":{\"890\":1}}],[\"并设置默认初始值\",{\"1\":{\"679\":1}}],[\"并进行相应的配置\",{\"1\":{\"871\":1}}],[\"并进行绑定\",{\"1\":{\"827\":1}}],[\"并进行统一的异常处理\",{\"1\":{\"156\":1}}],[\"并使用\",{\"1\":{\"782\":1}}],[\"并使用content\",{\"1\":{\"47\":1}}],[\"并实例化一个treeset对象\",{\"1\":{\"766\":1}}],[\"并实现加热接\",{\"1\":{\"657\":1}}],[\"并根据\",{\"1\":{\"731\":1}}],[\"并最终调用tostring方法返回一个\",{\"1\":{\"724\":1}}],[\"并把两个版本的以橙黄显示在上面对比\",{\"1\":{\"993\":1}}],[\"并把\",{\"1\":{\"722\":1,\"900\":1}}],[\"并把用户信息放到指定class里面\",{\"1\":{\"156\":1}}],[\"并驻留到字符串常量池中\",{\"1\":{\"722\":1}}],[\"并遵循浏览器的安全策略和同源策略\",{\"1\":{\"706\":1}}],[\"并正常加载和解析\",{\"1\":{\"706\":1}}],[\"并通过spi机制自动加载和注册这些实现类\",{\"1\":{\"740\":1}}],[\"并通过合适的\",{\"1\":{\"706\":1}}],[\"并通过\",{\"1\":{\"706\":1,\"738\":1}}],[\"并通过代理对象调用methodb方法\",{\"1\":{\"179\":1}}],[\"并允许从同一个源加载该资源\",{\"1\":{\"706\":1}}],[\"并复制其内的成员变量\",{\"1\":{\"683\":1}}],[\"并提供了对服务的监控和报警机制\",{\"1\":{\"1041\":1}}],[\"并提供一个passwordencoder\",{\"1\":{\"625\":1}}],[\"并提高可读性\",{\"1\":{\"959\":1}}],[\"并提高查找的效率\",{\"1\":{\"681\":1}}],[\"并行操作\",{\"1\":{\"689\":1}}],[\"并行流\",{\"1\":{\"689\":1}}],[\"并行是真正意义上\",{\"1\":{\"675\":1}}],[\"并行\",{\"1\":{\"675\":1}}],[\"并无本质上的联系\",{\"1\":{\"657\":1}}],[\"并让出\",{\"1\":{\"650\":1}}],[\"并让用户重新输入\",{\"1\":{\"153\":1}}],[\"并驱动分支事务提交或回滚\",{\"1\":{\"606\":1}}],[\"并配合management\",{\"1\":{\"600\":1}}],[\"并做一些初始化操作\",{\"1\":{\"576\":1}}],[\"并由地铁站名称字母\",{\"1\":{\"554\":1}}],[\"并合理设计\",{\"1\":{\"543\":1}}],[\"并附加上哈希值\",{\"1\":{\"539\":1}}],[\"并打开你的项目\",{\"1\":{\"537\":1}}],[\"并为\",{\"1\":{\"522\":1}}],[\"并回调原对象的方法\",{\"1\":{\"493\":1}}],[\"并指定事务管理器\",{\"1\":{\"462\":1}}],[\"并指出了更专业的\",{\"1\":{\"111\":1}}],[\"并封装给property指定的属性\",{\"1\":{\"423\":1}}],[\"并归纳总结为笔记\",{\"1\":{\"393\":1}}],[\"并针对不同代采用不同的收集算法\",{\"1\":{\"385\":1}}],[\"并后续新增\",{\"1\":{\"345\":1}}],[\"并执行一些操作\",{\"1\":{\"309\":4}}],[\"并执行了compareandswapint方法\",{\"1\":{\"305\":1}}],[\"并返回第一个非\",{\"1\":{\"959\":2}}],[\"并返回给客户端\",{\"1\":{\"890\":1}}],[\"并返回相应的错误响应给客户端\",{\"1\":{\"890\":1}}],[\"并返回一个结果\",{\"1\":{\"748\":1}}],[\"并返回一个响应\",{\"1\":{\"738\":1}}],[\"并返回true\",{\"1\":{\"305\":1}}],[\"并返回数据\",{\"1\":{\"54\":1}}],[\"并发访问数据库时\",{\"1\":{\"962\":1}}],[\"并发量的问题\",{\"1\":{\"961\":1}}],[\"并发写\",{\"1\":{\"865\":1}}],[\"并发\",{\"1\":{\"675\":1}}],[\"并发和并行有什么区别\",{\"0\":{\"675\":1}}],[\"并发包内提供的容器通用场景\",{\"1\":{\"641\":1}}],[\"并发包中reentrantlock的创建可以指定析构函数的boolean类型来得到公平锁或者非公平锁\",{\"1\":{\"317\":1}}],[\"并发进来怎么分配的\",{\"0\":{\"364\":1}}],[\"并发编程有序性问题\",{\"1\":{\"328\":1}}],[\"并发性就下降了\",{\"1\":{\"299\":1}}],[\"并发与同步\",{\"1\":{\"99\":1}}],[\"并不像传闻中那么普遍\",{\"1\":{\"1113\":1}}],[\"并不能限制取值范围和占用空间\",{\"1\":{\"920\":1}}],[\"并不能使对象豁免垃圾收集\",{\"1\":{\"636\":1}}],[\"并不会被打包到最终的构建结果中\",{\"1\":{\"1012\":1}}],[\"并不会浪费存储空间\",{\"1\":{\"963\":1}}],[\"并不会去看\",{\"1\":{\"924\":1}}],[\"并不会覆盖以前的日志\",{\"1\":{\"900\":1}}],[\"并不会真的设置ttl\",{\"1\":{\"867\":1}}],[\"并不会改变程序在实际部署或运行环境中的行为\",{\"1\":{\"537\":1}}],[\"并不包括其子包下的类\",{\"1\":{\"665\":1}}],[\"并不实现引入\",{\"1\":{\"556\":1}}],[\"并不是唯一键\",{\"1\":{\"961\":1}}],[\"并不是物理上真实存在的\",{\"1\":{\"935\":1}}],[\"并不是完全相同的\",{\"1\":{\"897\":1}}],[\"并不是所有的引擎都支持事务\",{\"1\":{\"892\":1}}],[\"并不是所有都生效\",{\"1\":{\"483\":1}}],[\"并不是一个常见或推荐的做法\",{\"1\":{\"883\":1}}],[\"并不是说每个账号配一次就够了\",{\"1\":{\"798\":1,\"984\":1}}],[\"并不是说泛型擦除这件事情本身能够有这个效果\",{\"1\":{\"715\":1}}],[\"并不是实际意义上的对象\",{\"1\":{\"722\":1}}],[\"并不是均匀的概念\",{\"1\":{\"681\":1}}],[\"并不是静态块最先初始化\",{\"1\":{\"658\":1}}],[\"并不是运行时候实时拿\",{\"1\":{\"546\":1}}],[\"并不是按照申请锁的顺序\",{\"1\":{\"316\":1}}],[\"并不是加密算法\",{\"1\":{\"58\":1}}],[\"并不真实存在\",{\"1\":{\"284\":1}}],[\"并预留好必需的业务资源\",{\"1\":{\"186\":1}}],[\"并在应用程序启动时进行适当的配置\",{\"1\":{\"1012\":1}}],[\"并在终端中以管理员权限\",{\"1\":{\"999\":1}}],[\"并在提交时显示每个文件的\",{\"1\":{\"990\":1}}],[\"并在set子句中更新目标表的列\",{\"1\":{\"938\":1}}],[\"并在转发请求时修改请求头等信息\",{\"1\":{\"883\":1}}],[\"并在有\",{\"1\":{\"849\":1}}],[\"并在同一时间内使用计算机的资源\",{\"1\":{\"785\":1}}],[\"并在同一时间内使用服务器的资源\",{\"1\":{\"785\":2}}],[\"并在字符串常量池中驻留其引用\",{\"1\":{\"722\":1}}],[\"并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息\",{\"1\":{\"591\":1}}],[\"并在url中附加上下文路径\",{\"1\":{\"539\":1}}],[\"并在项目启动时读取这些环境变量\",{\"1\":{\"522\":1}}],[\"并在子线程中使用context\",{\"1\":{\"157\":1}}],[\"并在业务逻辑中直接从\",{\"1\":{\"156\":1}}],[\"并在请求到达服务器之前进行预处理\",{\"1\":{\"156\":1}}],[\"并在每次请求时附送上这个token值\",{\"1\":{\"54\":1}}],[\"并将后端服务的响应返回给前端应用\",{\"1\":{\"883\":1}}],[\"并将其值设置为\",{\"1\":{\"1038\":1}}],[\"并将其中定义的环境变量应用于开发环境\",{\"1\":{\"881\":1}}],[\"并将其与容器的标准输入\",{\"1\":{\"790\":1}}],[\"并将其注册为\",{\"1\":{\"482\":2}}],[\"并将应用程序上下文作为参数传递给该方法\",{\"1\":{\"538\":1,\"1082\":1}}],[\"并将对象年龄设为\",{\"1\":{\"385\":1}}],[\"并将stock的值从10减少到7\",{\"1\":{\"309\":1}}],[\"并将这个令牌存储在用户的浏览器上\",{\"1\":{\"153\":1}}],[\"并将从服务器上得到的结果返回给internet上请求连接的客户端\",{\"1\":{\"72\":1,\"809\":1}}],[\"并检查\",{\"1\":{\"152\":1}}],[\"并支持使用jcache\",{\"1\":{\"121\":1}}],[\"并关闭缓存\",{\"1\":{\"96\":1}}],[\"并且右上角标注github图标\",{\"1\":{\"1161\":1}}],[\"并且依旧要不断提高自己的水平\",{\"1\":{\"1150\":1}}],[\"并且至少做一个拿得出手的项目\",{\"1\":{\"1150\":1}}],[\"并且也比书有趣多了\",{\"1\":{\"1150\":1}}],[\"并且愿意在编程这条路上走下去\",{\"1\":{\"1150\":1}}],[\"并且光标移到新行\",{\"0\":{\"1070\":1}}],[\"并且使用了servlet\",{\"1\":{\"1012\":1}}],[\"并且信任该应用程序\",{\"1\":{\"999\":1}}],[\"并且每个\",{\"1\":{\"959\":1}}],[\"并且每个微服务可能都有一个单独的数据库供自己使用\",{\"1\":{\"183\":1}}],[\"并且连接条件是\",{\"1\":{\"959\":2}}],[\"并且这两个表中的\",{\"1\":{\"959\":1}}],[\"并且这个字符串就是驻留在字符串常量池中的那一个\",{\"1\":{\"725\":1}}],[\"并且这个\",{\"1\":{\"152\":1}}],[\"并且把\",{\"1\":{\"935\":1}}],[\"并且时间顺序上是在事务\",{\"1\":{\"934\":1}}],[\"并且允许的最大值也不会是\",{\"1\":{\"920\":1}}],[\"并且是采用\",{\"1\":{\"901\":1}}],[\"并且请求间隔小于1000ms\",{\"1\":{\"888\":1}}],[\"并且消息已经确认\",{\"1\":{\"844\":1}}],[\"并且您将无法继续在该终端中执行其他命令\",{\"1\":{\"790\":1}}],[\"并且需要完整满足下面的要求\",{\"1\":{\"725\":1}}],[\"并且两个都是在堆上创建的\",{\"1\":{\"722\":1}}],[\"并且相比于直接使用\",{\"1\":{\"713\":1}}],[\"并且性能以及安全性等很多方面甚至都要更好\",{\"1\":{\"713\":1}}],[\"并且性能以及安全性等很多方面都非常优秀\",{\"1\":{\"713\":1}}],[\"并且它的下一个指针指向它自己\",{\"1\":{\"694\":1}}],[\"并且token值认证通过\",{\"1\":{\"627\":1}}],[\"并且如果你想让用户的密码是明文存储\",{\"1\":{\"625\":1}}],[\"并且要确认具体是哪个用户\",{\"1\":{\"615\":1}}],[\"并且能够用自己的理解给别人讲出来\",{\"1\":{\"571\":1}}],[\"并且能被\",{\"1\":{\"385\":1}}],[\"并且在这个过程中\",{\"1\":{\"1150\":1}}],[\"并且在新的数据版本中\",{\"1\":{\"935\":1}}],[\"并且在\",{\"1\":{\"917\":1}}],[\"并且在声明时就已经初始化\",{\"1\":{\"725\":1}}],[\"并且在字符串常量池中驻留了stringobject2\",{\"1\":{\"723\":1}}],[\"并且在解析过程中也可能出现一些不可预测的问题\",{\"1\":{\"543\":1}}],[\"并且在查询过程中\",{\"1\":{\"276\":1}}],[\"并且只拦截部分请求\",{\"1\":{\"534\":1}}],[\"并且只能代理接口中定义的方法\",{\"1\":{\"182\":1}}],[\"并且改名为\",{\"1\":{\"393\":1}}],[\"并且可以更方便地处理集合数据\",{\"1\":{\"741\":1}}],[\"并且可以通过git客户端工具来方便的管理和访问配置内容\",{\"1\":{\"591\":1}}],[\"并且可以根据需要自动扩展\",{\"1\":{\"383\":1}}],[\"并且可以独立于外部方法的事务运行\",{\"1\":{\"179\":1}}],[\"并且丢弃掉任务\",{\"1\":{\"363\":1}}],[\"并且他是一种排他的\",{\"1\":{\"329\":1}}],[\"并且中间不会被打断\",{\"1\":{\"326\":1}}],[\"并且原语的执行必须是连续的\",{\"1\":{\"303\":1}}],[\"并且不会对通配符进行扩展\",{\"1\":{\"787\":1}}],[\"并且不需要通过特定的解析器来处理\",{\"1\":{\"706\":1}}],[\"并且不再受到固定大小的限制\",{\"1\":{\"383\":1}}],[\"并且不希望过滤条件影响评分\",{\"1\":{\"278\":1}}],[\"并且不能被修改\",{\"1\":{\"125\":1}}],[\"并且配置好了基本的webpack打包规则\",{\"1\":{\"222\":1}}],[\"并且没有在线程执行结束后手动清理threadlocal变量\",{\"1\":{\"157\":1}}],[\"并且线程之间的局部变量不会相互干扰\",{\"1\":{\"156\":1}}],[\"并且定时任务成功续约了锁的过期时间\",{\"1\":{\"113\":1}}],[\"并且对编程功底要求比较高\",{\"1\":{\"713\":1}}],[\"并且对\",{\"1\":{\"112\":1}}],[\"并且\",{\"1\":{\"86\":1,\"114\":1,\"682\":1,\"697\":1,\"709\":1,\"734\":1,\"739\":1,\"905\":1,\"1144\":1,\"1150\":1}}],[\"并且key的过期时间默认为30秒\",{\"1\":{\"86\":1,\"114\":1}}],[\"并存储了网站的静态资源\",{\"1\":{\"77\":1}}],[\"并相应地处理连接的保持与关闭\",{\"1\":{\"48\":1}}],[\"响应式开发\",{\"1\":{\"466\":1}}],[\"响应式编程\",{\"0\":{\"470\":1},\"1\":{\"261\":1,\"466\":1}}],[\"响应的异常处理\",{\"1\":{\"156\":1}}],[\"响应的日志记录\",{\"1\":{\"156\":1}}],[\"响应的一部分传送到客户端\",{\"1\":{\"49\":1}}],[\"响应结果的处理\",{\"1\":{\"156\":1}}],[\"响应数据格式化\",{\"1\":{\"156\":1}}],[\"响应时间上的损失\",{\"1\":{\"572\":1}}],[\"响应时间\",{\"1\":{\"100\":1,\"102\":2,\"107\":2,\"156\":1,\"496\":1}}],[\"响应\",{\"1\":{\"100\":2}}],[\"响应拦截器调用刷新2个token\",{\"1\":{\"70\":1}}],[\"响应拦截器\",{\"1\":{\"65\":1,\"69\":1,\"70\":1}}],[\"响应值丢了就丢了\",{\"1\":{\"48\":1}}],[\"响应正文响应正文就是服务器返回的html页面或者json数据\",{\"1\":{\"48\":1}}],[\"响应状态码\",{\"1\":{\"46\":1}}],[\"l+r\",{\"1\":{\"1085\":1}}],[\"lzay\",{\"0\":{\"1020\":1}}],[\"ll=\",{\"1\":{\"1005\":1}}],[\"ll\",{\"1\":{\"1005\":1}}],[\"ll命令发现多了aof文件大小为0字节\",{\"1\":{\"860\":1}}],[\"ln\",{\"1\":{\"985\":1,\"998\":1}}],[\"lx\",{\"1\":{\"985\":1}}],[\"lgn\",{\"1\":{\"972\":1}}],[\"ls=\",{\"1\":{\"1005\":1}}],[\"ls\",{\"1\":{\"1005\":2}}],[\"lsm\",{\"1\":{\"916\":1}}],[\"lsof\",{\"1\":{\"782\":1}}],[\"lucene和elasticsearch之间存在密切的关联\",{\"1\":{\"1084\":1}}],[\"lucene\",{\"0\":{\"1084\":1}}],[\"lucence\",{\"1\":{\"736\":1}}],[\"lunar\",{\"1\":{\"996\":1}}],[\"lua脚本解决库存遗留问题\",{\"0\":{\"858\":1}}],[\"lua脚本字符串\",{\"1\":{\"88\":1}}],[\"lua脚本\",{\"0\":{\"88\":1},\"1\":{\"87\":1,\"167\":1}}],[\"lua写的\",{\"1\":{\"87\":1}}],[\"lua\",{\"0\":{\"85\":1},\"1\":{\"86\":1,\"87\":2,\"111\":1,\"114\":1,\"868\":1,\"887\":1}}],[\"l10\",{\"1\":{\"985\":1}}],[\"l1\",{\"1\":{\"688\":2}}],[\"lru\",{\"1\":{\"448\":2}}],[\"l4\",{\"1\":{\"310\":4}}],[\"lt\",{\"1\":{\"278\":1}}],[\"lte\",{\"1\":{\"278\":2}}],[\"ldf\",{\"1\":{\"1001\":1}}],[\"ldc\",{\"1\":{\"722\":1}}],[\"ld\",{\"1\":{\"174\":1}}],[\"launch\",{\"1\":{\"998\":4}}],[\"launchagents\",{\"1\":{\"998\":3}}],[\"launchdaemons\",{\"1\":{\"998\":4}}],[\"laoyeye\",{\"1\":{\"539\":1}}],[\"lastly\",{\"1\":{\"1009\":1}}],[\"last\",{\"1\":{\"419\":1,\"421\":1,\"422\":1,\"426\":3,\"429\":3,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"434\":2,\"437\":1,\"438\":2,\"440\":2,\"954\":1}}],[\"lastname\",{\"1\":{\"277\":1,\"419\":1,\"422\":1,\"426\":1,\"429\":2,\"430\":3,\"432\":3,\"433\":2,\"434\":4,\"437\":2,\"438\":3}}],[\"layout\",{\"1\":{\"399\":1,\"463\":1}}],[\"layout=org\",{\"1\":{\"399\":1,\"463\":1}}],[\"lazygit\",{\"1\":{\"1003\":1}}],[\"lazyloadingenabled\",{\"1\":{\"400\":1,\"424\":1}}],[\"lazy\",{\"1\":{\"281\":1,\"427\":1,\"428\":3,\"722\":1}}],[\"latest\",{\"1\":{\"213\":1,\"267\":1,\"994\":2}}],[\"lang中的class类和java\",{\"1\":{\"688\":1}}],[\"lang=\",{\"1\":{\"220\":1}}],[\"lang\",{\"1\":{\"156\":1,\"660\":2,\"687\":1,\"688\":3,\"1010\":1}}],[\"language\",{\"1\":{\"47\":1,\"48\":1,\"216\":1,\"272\":2,\"1006\":1}}],[\"lambda的闭包会提升包围变量的生命周期\",{\"1\":{\"771\":1}}],[\"lambda的基础语法\",{\"0\":{\"749\":1}}],[\"lambda闭包\",{\"0\":{\"771\":1}}],[\"lambda实现\",{\"1\":{\"768\":1}}],[\"lambda语法进阶\",{\"0\":{\"759\":1}}],[\"lambda6返回值是\",{\"1\":{\"752\":2}}],[\"lambda6=\",{\"1\":{\"752\":1}}],[\"lambda5返回值是\",{\"1\":{\"752\":2}}],[\"lambda5\",{\"1\":{\"752\":1}}],[\"lambda5=syntax3\",{\"1\":{\"762\":1}}],[\"lambda5=\",{\"1\":{\"752\":1,\"758\":1}}],[\"lambda4\",{\"1\":{\"752\":2}}],[\"lambda4=a\",{\"1\":{\"762\":1}}],[\"lambda4=\",{\"1\":{\"752\":1,\"757\":2,\"758\":1}}],[\"lambda3\",{\"1\":{\"752\":1}}],[\"lambda3=a\",{\"1\":{\"756\":2,\"762\":1}}],[\"lambda3=\",{\"1\":{\"752\":1}}],[\"lambda2\",{\"1\":{\"752\":1}}],[\"lambda2=a\",{\"1\":{\"762\":1}}],[\"lambda2=\",{\"1\":{\"752\":1,\"755\":2,\"760\":1}}],[\"lambda1\",{\"1\":{\"752\":1}}],[\"lambda1=a\",{\"1\":{\"762\":1}}],[\"lambda1=\",{\"1\":{\"752\":1,\"754\":2,\"760\":1}}],[\"lambdasinglereturnmutipleparmeter\",{\"1\":{\"751\":1,\"752\":1,\"758\":1,\"760\":2}}],[\"lambdasinglereturnsingleparmeter\",{\"1\":{\"751\":1,\"752\":1,\"762\":6}}],[\"lambdasinglereturnnoneparmeter\",{\"1\":{\"751\":1,\"752\":1,\"757\":2,\"758\":1}}],[\"lambdanonereturnmutipleparmeter\",{\"1\":{\"751\":1,\"752\":1,\"754\":2}}],[\"lambdanonereturnsingleparmeter\",{\"1\":{\"751\":1,\"752\":1,\"755\":2,\"756\":2}}],[\"lambdanonereturnnoneparmeter\",{\"1\":{\"751\":1,\"752\":1}}],[\"lambda运算符\",{\"1\":{\"750\":1,\"752\":1}}],[\"lambda对接口的要求\",{\"0\":{\"747\":1}}],[\"lambda是一个匿名函数\",{\"1\":{\"745\":1,\"750\":1,\"752\":1}}],[\"lambda是java\",{\"1\":{\"745\":1}}],[\"lambdaquerywrapper\",{\"1\":{\"743\":3,\"1101\":3}}],[\"lambdaquerywrapper<role>\",{\"1\":{\"743\":1,\"1101\":1}}],[\"lambdaquerywrapper<>\",{\"1\":{\"624\":1,\"743\":1,\"1101\":1}}],[\"lambdaquerywrapper<user>\",{\"1\":{\"624\":1}}],[\"lambda表达式的基础语法\",{\"1\":{\"750\":1,\"752\":1}}],[\"lambda表达式简介\",{\"0\":{\"744\":1}}],[\"lambda表达式可以作为参数传递给方法或函数式接口\",{\"1\":{\"741\":1}}],[\"lambda表达式是一种简洁而强大的语法特性\",{\"1\":{\"741\":1}}],[\"lambda表达式\",{\"1\":{\"688\":1}}],[\"lambda\",{\"0\":{\"741\":1},\"1\":{\"130\":1,\"229\":1,\"540\":1,\"741\":1,\"743\":3,\"1101\":4}}],[\"lemon\",{\"1\":{\"996\":1,\"998\":1}}],[\"leetcode应用支持代码\",{\"1\":{\"1164\":1}}],[\"leetcode的示例\",{\"1\":{\"994\":1}}],[\"leetcode\",{\"1\":{\"994\":1,\"1017\":1,\"1150\":1}}],[\"leetcode常用当模拟栈\",{\"1\":{\"642\":1}}],[\"lens\",{\"1\":{\"1005\":1}}],[\"len\",{\"1\":{\"849\":1}}],[\"length=6\",{\"1\":{\"802\":1}}],[\"length==hash\",{\"1\":{\"739\":1}}],[\"length\",{\"1\":{\"48\":1,\"681\":2,\"739\":2,\"802\":1,\"1085\":1}}],[\"learn\",{\"1\":{\"752\":2,\"762\":2,\"765\":1,\"766\":1,\"768\":1}}],[\"leader\",{\"1\":{\"572\":1}}],[\"leftpanel\",{\"0\":{\"886\":1}}],[\"left\",{\"1\":{\"426\":1,\"648\":3,\"937\":1,\"939\":1,\"945\":1,\"959\":3,\"961\":1,\"964\":1,\"1005\":1}}],[\"level\",{\"1\":{\"229\":1,\"257\":2,\"523\":3,\"578\":1,\"906\":1,\"929\":1}}],[\"let\",{\"1\":{\"216\":6}}],[\"lettuce一样都是\",{\"1\":{\"112\":1}}],[\"lettuce的bug导致netty堆外内存溢出\",{\"1\":{\"107\":1}}],[\"lettuce\",{\"1\":{\"107\":1,\"871\":1,\"1010\":2}}],[\"lettuce和jedis是操作redis的底层客户端\",{\"1\":{\"106\":1}}],[\"lettuce堆外内存溢出bug\",{\"0\":{\"106\":1}}],[\"lb\",{\"1\":{\"72\":2,\"591\":7}}],[\"light\",{\"1\":{\"1005\":1}}],[\"licecap\",{\"1\":{\"1003\":1}}],[\"literals\",{\"1\":{\"725\":1}}],[\"literal\",{\"1\":{\"722\":1}}],[\"limiting\",{\"1\":{\"600\":1,\"604\":1}}],[\"limit\",{\"1\":{\"495\":1,\"689\":2,\"887\":1,\"925\":2,\"933\":6,\"949\":1,\"963\":4,\"1085\":1}}],[\"life\",{\"1\":{\"1005\":1}}],[\"lifetime\",{\"1\":{\"260\":1}}],[\"lifo\",{\"1\":{\"365\":1,\"778\":1}}],[\"li>\",{\"1\":{\"220\":5}}],[\"li\",{\"1\":{\"220\":2}}],[\"library\",{\"1\":{\"998\":1,\"1005\":2}}],[\"libraries\",{\"1\":{\"473\":1}}],[\"lib\",{\"1\":{\"210\":2,\"223\":1,\"791\":1,\"800\":2,\"996\":1}}],[\"line\",{\"1\":{\"895\":1,\"938\":1,\"1005\":2}}],[\"linux中yum与rpm区别\",{\"1\":{\"810\":1}}],[\"linux的多用户是指可多用户同时在线\",{\"1\":{\"785\":1}}],[\"linux就是典型的多用户系统\",{\"1\":{\"785\":1}}],[\"linux是多用户操作系统\",{\"0\":{\"785\":1}}],[\"linuxref\",{\"0\":{\"781\":1}}],[\"linux和url是\",{\"1\":{\"688\":1}}],[\"linux有\",{\"1\":{\"210\":1,\"789\":1}}],[\"linux\",{\"0\":{\"788\":1,\"806\":1,\"1176\":1},\"1\":{\"210\":4,\"391\":1,\"392\":1,\"570\":2,\"599\":1,\"712\":1,\"713\":1,\"734\":1,\"782\":3,\"784\":2,\"785\":4,\"786\":1,\"789\":1,\"790\":1,\"800\":2,\"808\":1,\"1006\":1,\"1039\":1,\"1041\":1,\"1080\":1}}],[\"linux系统的ttl值为64或255\",{\"1\":{\"76\":1}}],[\"linkedhashmap\",{\"1\":{\"688\":2}}],[\"linkedhashset\",{\"1\":{\"688\":1}}],[\"linkedlist或者vector等等\",{\"1\":{\"1074\":1}}],[\"linkedlist\",{\"1\":{\"688\":1,\"1074\":2}}],[\"linkedblockingqueue<>\",{\"1\":{\"363\":1}}],[\"links\",{\"1\":{\"283\":1}}],[\"link\",{\"1\":{\"157\":2,\"161\":1,\"178\":1,\"473\":1,\"546\":1,\"688\":1,\"869\":2,\"1083\":1,\"1166\":1}}],[\"live\",{\"1\":{\"123\":1,\"546\":1}}],[\"listiterator\",{\"1\":{\"768\":1}}],[\"listiterator<person>\",{\"1\":{\"768\":1}}],[\"list=new\",{\"1\":{\"765\":1,\"767\":1,\"768\":1}}],[\"list>\",{\"1\":{\"610\":1,\"715\":1}}],[\"listpage\",{\"1\":{\"511\":1}}],[\"list类型的参数会特殊处理封装在map中\",{\"1\":{\"436\":1}}],[\"listvalue\",{\"1\":{\"243\":1}}],[\"listwithtree\",{\"1\":{\"229\":1}}],[\"list<list<integer>>\",{\"1\":{\"775\":1}}],[\"list<integer>\",{\"1\":{\"715\":3,\"775\":1}}],[\"list<person>\",{\"1\":{\"688\":2}}],[\"list<\",{\"1\":{\"688\":3}}],[\"list<object>不行\",{\"1\":{\"688\":1}}],[\"list<object>\",{\"1\":{\"688\":2}}],[\"list<e>\",{\"1\":{\"688\":1}}],[\"list<employee>\",{\"1\":{\"427\":1,\"430\":1,\"436\":1,\"437\":1,\"438\":1}}],[\"list<categoryentity>\",{\"1\":{\"229\":7,\"247\":1}}],[\"list<catelog2vo>>>\",{\"1\":{\"105\":1}}],[\"list<catelog2vo>>\",{\"1\":{\"103\":2}}],[\"list<student>不行\",{\"1\":{\"688\":1}}],[\"list<student>\",{\"1\":{\"688\":1}}],[\"list<string>\",{\"1\":{\"249\":1,\"534\":1,\"688\":1,\"715\":2,\"1019\":1}}],[\"list<string>>\",{\"1\":{\"155\":1,\"483\":1}}],[\"list<skuesmodel>\",{\"1\":{\"92\":1}}],[\"list\",{\"0\":{\"413\":1,\"885\":1},\"1\":{\"92\":1,\"125\":2,\"249\":5,\"430\":2,\"436\":2,\"495\":1,\"576\":2,\"591\":2,\"628\":1,\"688\":1,\"715\":9,\"765\":8,\"767\":4,\"768\":10,\"775\":1,\"776\":2,\"876\":1,\"884\":2,\"887\":1,\"889\":2,\"1074\":3,\"1084\":3}}],[\"listener就会消费几次\",{\"1\":{\"543\":1,\"1081\":1}}],[\"listener>\",{\"1\":{\"459\":1}}],[\"listener\",{\"1\":{\"459\":1,\"521\":1,\"543\":1,\"832\":1,\"837\":1,\"1081\":1}}],[\"listen\",{\"1\":{\"71\":1,\"72\":1,\"73\":2,\"810\":1}}],[\"like的用法\",{\"1\":{\"959\":1}}],[\"like\",{\"1\":{\"47\":1,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"438\":2,\"439\":1,\"657\":2,\"743\":2,\"802\":1,\"894\":1,\"897\":2,\"902\":2,\"903\":1,\"905\":1,\"923\":5,\"924\":1,\"932\":2,\"951\":1,\"959\":7,\"1006\":1,\"1101\":2}}],[\"lookup\",{\"1\":{\"1009\":1}}],[\"loop\",{\"1\":{\"970\":1}}],[\"loss\",{\"1\":{\"955\":1}}],[\"lost\",{\"1\":{\"893\":1}}],[\"low\",{\"1\":{\"648\":1,\"802\":1}}],[\"lower\",{\"1\":{\"540\":1,\"945\":2,\"1084\":1}}],[\"lombook\",{\"1\":{\"488\":1}}],[\"lombok\",{\"1\":{\"458\":1,\"513\":1,\"546\":1}}],[\"loadfactor\",{\"1\":{\"682\":1}}],[\"loading\",{\"1\":{\"679\":1}}],[\"loaduserbyusername\",{\"1\":{\"624\":1}}],[\"loadbalacer替代\",{\"1\":{\"573\":1}}],[\"loadbalanced返回一个resttemplate的bean\",{\"1\":{\"576\":1}}],[\"loadbalanced\",{\"1\":{\"566\":1}}],[\"loadbalanced注解赋予resttemplate负载均衡的能力\",{\"1\":{\"566\":2}}],[\"loadspringfactories\",{\"1\":{\"483\":1}}],[\"load\",{\"1\":{\"459\":1,\"591\":1,\"703\":1,\"779\":1,\"1005\":1}}],[\"loadclass\",{\"1\":{\"382\":2}}],[\"loader\",{\"1\":{\"229\":2,\"559\":1,\"635\":1,\"679\":3}}],[\"longtodoublefunction\",{\"1\":{\"770\":1}}],[\"longtointfunction\",{\"1\":{\"770\":1}}],[\"longfunction<r>\",{\"1\":{\"770\":1}}],[\"longconsumer\",{\"1\":{\"770\":1}}],[\"longcache\",{\"1\":{\"647\":1}}],[\"longpredicate\",{\"1\":{\"770\":1}}],[\"longadder\",{\"1\":{\"312\":1}}],[\"long\",{\"0\":{\"647\":1},\"1\":{\"113\":1,\"229\":1,\"352\":1,\"492\":1,\"647\":2,\"661\":2,\"685\":1,\"686\":1,\"702\":1,\"770\":7,\"850\":3,\"851\":1,\"876\":1,\"897\":1}}],[\"locktimeout\",{\"1\":{\"851\":3}}],[\"locked\",{\"1\":{\"837\":1,\"851\":1}}],[\"lock的区别\",{\"1\":{\"352\":1}}],[\"lockinterrupible\",{\"1\":{\"352\":1}}],[\"locking\",{\"1\":{\"283\":1,\"779\":1}}],[\"lock是具体类\",{\"1\":{\"352\":1}}],[\"lockproduct\",{\"1\":{\"115\":1}}],[\"lock接口\",{\"1\":{\"115\":2}}],[\"locks\",{\"1\":{\"115\":2,\"352\":4,\"378\":1}}],[\"lockkey\",{\"1\":{\"115\":1,\"851\":6}}],[\"lockwatchdogtimeout看门狗的默认时间\",{\"1\":{\"115\":1}}],[\"lockwatchdogtimeout\",{\"1\":{\"113\":1}}],[\"lock\",{\"0\":{\"301\":1,\"352\":1,\"1170\":1},\"1\":{\"87\":2,\"108\":1,\"115\":13,\"222\":1,\"317\":3,\"326\":2,\"350\":1,\"352\":17,\"608\":1,\"867\":1,\"906\":1,\"927\":1,\"928\":6,\"929\":2,\"932\":3,\"1005\":3}}],[\"locator\",{\"1\":{\"591\":1}}],[\"location\",{\"1\":{\"71\":1,\"72\":3,\"73\":4,\"95\":1,\"810\":1,\"1009\":1}}],[\"location=global\",{\"1\":{\"219\":1}}],[\"location=\",{\"1\":{\"63\":1,\"462\":1}}],[\"localfile\",{\"1\":{\"1084\":5}}],[\"localcachescope\",{\"1\":{\"449\":1}}],[\"localhost\",{\"1\":{\"229\":1,\"398\":1,\"461\":1,\"566\":1,\"590\":2,\"591\":7,\"594\":2,\"616\":2,\"792\":1,\"802\":2,\"880\":1,\"882\":1,\"883\":2,\"884\":1,\"897\":1,\"993\":1,\"994\":1,\"1161\":1}}],[\"localdatetime`\",{\"1\":{\"125\":1}}],[\"localdatetime\",{\"1\":{\"125\":4,\"876\":1,\"1081\":1}}],[\"local\",{\"1\":{\"70\":1,\"88\":1,\"392\":1,\"1005\":1,\"1009\":2,\"1084\":3}}],[\"logn\",{\"1\":{\"916\":1}}],[\"log是顺序写\",{\"1\":{\"899\":1}}],[\"log写一段脚本\",{\"1\":{\"866\":1}}],[\"logimpl\",{\"1\":{\"400\":1,\"464\":1}}],[\"logins\",{\"1\":{\"954\":1}}],[\"logininfor\",{\"1\":{\"884\":1}}],[\"logininterceptor\",{\"1\":{\"157\":1}}],[\"loginrules\",{\"1\":{\"879\":1}}],[\"loginform\",{\"1\":{\"879\":2}}],[\"loginpage\",{\"1\":{\"97\":1}}],[\"loginuser\",{\"0\":{\"67\":1},\"1\":{\"67\":7,\"68\":1,\"156\":1,\"624\":2}}],[\"login\",{\"1\":{\"65\":1,\"66\":1,\"97\":4,\"136\":1,\"147\":1,\"539\":1,\"626\":1,\"688\":1,\"879\":2,\"883\":1,\"1005\":1}}],[\"loggerfactory\",{\"1\":{\"492\":1,\"730\":1}}],[\"logger\",{\"1\":{\"399\":5,\"463\":5,\"492\":11,\"578\":1,\"730\":1}}],[\"logging\",{\"1\":{\"229\":1,\"523\":3,\"740\":1,\"899\":1}}],[\"log4j2\",{\"1\":{\"740\":1}}],[\"log4j\",{\"0\":{\"399\":1,\"463\":1},\"1\":{\"397\":2,\"399\":11,\"400\":1,\"463\":11,\"464\":1,\"740\":1}}],[\"logback\",{\"1\":{\"229\":1,\"740\":1,\"1084\":1}}],[\"logoutsuccesshandlerr\",{\"1\":{\"631\":1}}],[\"logout\",{\"1\":{\"616\":1}}],[\"logo\",{\"1\":{\"73\":4}}],[\"logstash\",{\"1\":{\"736\":5}}],[\"logs\",{\"1\":{\"71\":1,\"810\":1}}],[\"log\",{\"0\":{\"784\":1,\"899\":1},\"1\":{\"71\":2,\"72\":2,\"202\":1,\"210\":4,\"216\":2,\"229\":3,\"233\":2,\"606\":1,\"688\":1,\"730\":3,\"782\":1,\"791\":2,\"795\":4,\"799\":1,\"800\":1,\"802\":2,\"810\":2,\"897\":1,\"898\":2,\"899\":13,\"900\":9,\"901\":8,\"902\":7,\"906\":1,\"908\":4,\"915\":1,\"916\":3,\"935\":5,\"985\":1,\"993\":3,\"1001\":2,\"1005\":2,\"1078\":1,\"1084\":1}}],[\"l\",{\"0\":{\"1069\":1},\"1\":{\"62\":1,\"720\":2,\"1005\":1,\"1085\":16}}],[\"kylewh\",{\"1\":{\"1127\":1}}],[\"knife4j\",{\"0\":{\"1097\":1},\"1\":{\"1097\":1}}],[\"know\",{\"0\":{\"1039\":1}}],[\"knowledge\",{\"0\":{\"999\":1},\"1\":{\"494\":1}}],[\"kk\",{\"1\":{\"923\":4}}],[\"kali镜像\",{\"1\":{\"1155\":1}}],[\"kali\",{\"0\":{\"1155\":1},\"1\":{\"1155\":2}}],[\"karabiner\",{\"1\":{\"996\":2,\"1003\":1,\"1005\":5}}],[\"kaptcha的验证码组件\",{\"1\":{\"877\":2}}],[\"kafka\",{\"1\":{\"594\":1}}],[\"kv\",{\"1\":{\"876\":1,\"918\":1}}],[\"killall\",{\"1\":{\"998\":1,\"1005\":2}}],[\"kill掉进程重启\",{\"1\":{\"860\":1}}],[\"kill\",{\"1\":{\"782\":2,\"908\":2,\"928\":2,\"977\":1}}],[\"kibana\",{\"1\":{\"262\":1,\"267\":4,\"736\":3}}],[\"k=6\",{\"1\":{\"921\":1}}],[\"k=3\",{\"1\":{\"921\":1}}],[\"k=5\",{\"1\":{\"917\":1,\"921\":1}}],[\"k=1\",{\"1\":{\"897\":1}}],[\"k=\",{\"1\":{\"778\":1}}],[\"kl\",{\"1\":{\"715\":1}}],[\"k8s服务和dns服务则适用于cp模式\",{\"1\":{\"594\":1}}],[\"k\",{\"0\":{\"1042\":1,\"1043\":1},\"1\":{\"110\":1,\"415\":2,\"721\":1,\"778\":2,\"876\":1,\"897\":2,\"917\":6,\"919\":4,\"921\":8,\"922\":5,\"923\":1,\"934\":3,\"935\":1,\"1092\":1}}],[\"krjrhukw\",{\"1\":{\"68\":1}}],[\"kettanaito\",{\"1\":{\"1005\":1}}],[\"kernel\",{\"1\":{\"709\":1}}],[\"key=\",{\"1\":{\"1084\":2}}],[\"key=minioadmin\",{\"1\":{\"796\":2}}],[\"key+tab在打开的窗口之间切换\",{\"1\":{\"1036\":1}}],[\"keyboard\",{\"1\":{\"1005\":2,\"1006\":2}}],[\"keybindings\",{\"1\":{\"1005\":1}}],[\"keychain\",{\"1\":{\"1005\":2}}],[\"keycastr\",{\"1\":{\"1003\":1}}],[\"keycolumn\",{\"1\":{\"404\":1}}],[\"key关键字来设置\",{\"1\":{\"936\":1}}],[\"key表示该语句实际用到的索引\",{\"1\":{\"897\":1}}],[\"key删\",{\"1\":{\"887\":1}}],[\"keyprefix\",{\"1\":{\"876\":1}}],[\"keyproperty=\",{\"1\":{\"404\":1}}],[\"keyproperty\",{\"1\":{\"404\":1}}],[\"key建立关联\",{\"1\":{\"823\":1}}],[\"key公钥内容\",{\"1\":{\"797\":1,\"983\":1}}],[\"keygen\",{\"1\":{\"797\":1,\"983\":1,\"986\":1,\"1005\":1}}],[\"key所在的类要重写hashcode\",{\"1\":{\"688\":1}}],[\"key2=column2\",{\"1\":{\"428\":1}}],[\"key1=column1\",{\"1\":{\"428\":1}}],[\"keyup\",{\"1\":{\"220\":2}}],[\"keyword\",{\"1\":{\"148\":1}}],[\"key属性指定\",{\"1\":{\"123\":1}}],[\"key的配置是针对每台主机的\",{\"1\":{\"798\":1,\"984\":1}}],[\"key的cookie临时标识\",{\"1\":{\"156\":1}}],[\"key的生成\",{\"1\":{\"123\":1}}],[\"key的值发生变化则取消事务执行\",{\"1\":{\"85\":1}}],[\"key是用来标识和存储临时购物车数据的\",{\"1\":{\"156\":1}}],[\"key是默认生成的\",{\"1\":{\"123\":1}}],[\"key是spel表达式如果是字符串\",{\"1\":{\"123\":1}}],[\"keys表示该语句可能会用到的索引\",{\"1\":{\"897\":1}}],[\"keys\",{\"1\":{\"88\":1,\"849\":1,\"897\":1}}],[\"key列表\",{\"1\":{\"88\":1}}],[\"key列表的元素数量\",{\"1\":{\"88\":1}}],[\"key加锁了一次\",{\"1\":{\"86\":1,\"114\":1}}],[\"key对应\",{\"0\":{\"67\":1}}],[\"key\",{\"0\":{\"415\":1,\"416\":1},\"1\":{\"66\":1,\"86\":1,\"87\":2,\"88\":2,\"105\":1,\"114\":1,\"123\":5,\"152\":1,\"155\":3,\"156\":2,\"157\":5,\"408\":1,\"416\":1,\"476\":1,\"495\":1,\"681\":2,\"682\":1,\"688\":3,\"797\":1,\"798\":1,\"823\":3,\"850\":6,\"852\":6,\"867\":1,\"876\":3,\"887\":1,\"894\":3,\"897\":1,\"898\":1,\"914\":4,\"917\":1,\"918\":1,\"919\":2,\"921\":1,\"922\":3,\"925\":6,\"934\":1,\"936\":3,\"956\":2,\"959\":1,\"983\":1,\"984\":1,\"986\":1,\"1005\":3,\"1006\":1}}],[\"keepingyouawake\",{\"1\":{\"1003\":1}}],[\"keeping\",{\"1\":{\"244\":1}}],[\"keepalivetime\",{\"1\":{\"362\":2,\"363\":1}}],[\"keepalive\",{\"1\":{\"48\":2}}],[\"keep\",{\"1\":{\"47\":2,\"48\":4,\"362\":1}}],[\"khtml\",{\"1\":{\"47\":1}}],[\"5年了\",{\"1\":{\"1162\":1}}],[\"5月\",{\"1\":{\"1150\":1}}],[\"5k\",{\"1\":{\"1130\":1}}],[\"51job\",{\"1\":{\"1128\":1}}],[\"51cto\",{\"1\":{\"124\":1}}],[\"59\",{\"1\":{\"771\":1,\"954\":2}}],[\"59957834\",{\"1\":{\"383\":1}}],[\"52\",{\"1\":{\"767\":1}}],[\"5开始改名5\",{\"1\":{\"691\":1}}],[\"5版本中添加的一项新特性\",{\"1\":{\"686\":1}}],[\"5ce602538d784f51a531bf9760592773\",{\"1\":{\"670\":1}}],[\"5c871507df08\",{\"1\":{\"66\":1}}],[\"5注意\",{\"1\":{\"505\":1}}],[\"5<\",{\"1\":{\"458\":1}}],[\"547061946\",{\"1\":{\"403\":1,\"782\":1,\"861\":1,\"865\":1}}],[\"5p\",{\"1\":{\"399\":1,\"463\":1}}],[\"5s\",{\"1\":{\"372\":2,\"936\":1}}],[\"5672\",{\"1\":{\"825\":3}}],[\"5671\",{\"1\":{\"825\":3}}],[\"5601\",{\"1\":{\"262\":1,\"267\":2}}],[\"56=9个路由器\",{\"1\":{\"76\":1}}],[\"571\",{\"1\":{\"102\":1}}],[\"50s\",{\"1\":{\"932\":3}}],[\"500\",{\"1\":{\"909\":1,\"917\":2,\"921\":1,\"933\":4,\"985\":1}}],[\"5000\",{\"1\":{\"730\":1}}],[\"500m和\",{\"1\":{\"383\":1}}],[\"500m\",{\"1\":{\"383\":2}}],[\"50\",{\"0\":{\"364\":1},\"1\":{\"102\":13,\"107\":1,\"364\":1,\"543\":1,\"918\":1,\"994\":1,\"1005\":1}}],[\"504\",{\"1\":{\"48\":1}}],[\"5的情况\",{\"1\":{\"87\":1}}],[\"55\",{\"1\":{\"71\":1,\"796\":1,\"810\":1}}],[\"5af2\",{\"1\":{\"66\":1}}],[\"537\",{\"1\":{\"47\":2}}],[\"5\",{\"0\":{\"73\":1,\"116\":1,\"119\":1,\"174\":1,\"187\":1,\"225\":1,\"226\":1,\"235\":1,\"277\":1,\"281\":1,\"299\":1,\"307\":1,\"327\":1,\"349\":1,\"365\":1,\"417\":1,\"429\":1,\"434\":1,\"450\":1,\"463\":1,\"497\":1,\"533\":1,\"568\":1,\"589\":1,\"627\":1,\"725\":1,\"758\":1,\"769\":1,\"795\":1,\"805\":1,\"845\":1,\"846\":1,\"847\":1,\"848\":1,\"865\":1,\"896\":1,\"902\":1,\"908\":1,\"919\":1,\"925\":1,\"979\":1,\"1147\":1,\"1148\":1},\"1\":{\"47\":1,\"70\":1,\"76\":1,\"107\":1,\"202\":3,\"210\":2,\"243\":1,\"261\":2,\"267\":1,\"283\":1,\"290\":1,\"293\":1,\"295\":4,\"334\":2,\"352\":2,\"363\":1,\"372\":1,\"383\":1,\"388\":4,\"389\":1,\"458\":1,\"466\":1,\"477\":1,\"539\":1,\"552\":1,\"572\":1,\"658\":4,\"685\":2,\"687\":1,\"688\":1,\"691\":1,\"697\":1,\"726\":1,\"767\":1,\"775\":1,\"780\":2,\"791\":2,\"802\":1,\"808\":1,\"877\":1,\"892\":3,\"893\":1,\"906\":3,\"908\":1,\"917\":1,\"921\":3,\"922\":1,\"923\":4,\"924\":2,\"928\":3,\"932\":1,\"961\":1,\"970\":1,\"974\":1,\"980\":1,\"1005\":1,\"1006\":1,\"1010\":1,\"1041\":3,\"1130\":1}}],[\"u盘买了很久了也不贵\",{\"1\":{\"1160\":1}}],[\"u盘\",{\"0\":{\"1160\":1}}],[\"u盘一类都是外部存储器\",{\"1\":{\"1089\":1}}],[\"umi\",{\"1\":{\"1005\":4}}],[\"umijs\",{\"1\":{\"1005\":2}}],[\"umi=\",{\"1\":{\"1005\":1}}],[\"ugit\",{\"1\":{\"1003\":1}}],[\"ubuntu\",{\"1\":{\"994\":2}}],[\"u2\",{\"1\":{\"935\":1}}],[\"u3\",{\"1\":{\"935\":2}}],[\"u$user\",{\"1\":{\"893\":1}}],[\"u>\",{\"1\":{\"770\":2}}],[\"udp\",{\"1\":{\"688\":3,\"713\":2}}],[\"udp适合播放视频\",{\"1\":{\"688\":1}}],[\"u0000\",{\"1\":{\"686\":1}}],[\"usage\",{\"1\":{\"679\":1}}],[\"usually\",{\"1\":{\"283\":1}}],[\"usr\",{\"1\":{\"267\":3,\"282\":1,\"782\":2,\"795\":1,\"810\":1,\"1003\":1,\"1005\":1}}],[\"using\",{\"1\":{\"260\":1,\"317\":1,\"477\":2,\"896\":1,\"937\":1,\"959\":1}}],[\"usepingmethod\",{\"1\":{\"1081\":1}}],[\"usekeychain\",{\"1\":{\"1005\":1}}],[\"uses\",{\"1\":{\"994\":4}}],[\"usessl=false\",{\"1\":{\"398\":1,\"461\":1}}],[\"used\",{\"1\":{\"959\":3}}],[\"usedtrays\",{\"1\":{\"959\":5}}],[\"usecompression=true\",{\"1\":{\"637\":1}}],[\"usegeneratedkeys=\",{\"1\":{\"404\":2}}],[\"useunicode=true\",{\"1\":{\"398\":1,\"461\":1}}],[\"use\",{\"0\":{\"371\":1},\"1\":{\"223\":1,\"317\":1,\"362\":3,\"460\":1,\"806\":1,\"895\":2,\"938\":1,\"941\":1,\"1005\":4,\"1006\":3}}],[\"user=sa\",{\"1\":{\"1001\":1}}],[\"user3\",{\"1\":{\"973\":2}}],[\"user1用户可使用密码111111验证\",{\"1\":{\"1158\":1}}],[\"user1\",{\"1\":{\"973\":2,\"1158\":1}}],[\"usertable1等\",{\"1\":{\"960\":1}}],[\"usertableo\",{\"1\":{\"960\":1}}],[\"userf\",{\"1\":{\"916\":1}}],[\"userc\",{\"1\":{\"916\":1}}],[\"usera\",{\"1\":{\"916\":1}}],[\"user4\",{\"1\":{\"914\":1}}],[\"user2用户可使用密码aaaaaa验证\",{\"1\":{\"1158\":1}}],[\"user2\",{\"1\":{\"914\":2,\"916\":1,\"973\":2,\"1158\":1}}],[\"userdto\",{\"1\":{\"876\":1}}],[\"userdetails\",{\"1\":{\"624\":3}}],[\"userdetailsserviceimpl\",{\"1\":{\"624\":1}}],[\"userdetailsservice\",{\"0\":{\"624\":1},\"1\":{\"624\":1}}],[\"userdetailsservice接口\",{\"1\":{\"620\":1}}],[\"userdetails接口\",{\"1\":{\"620\":1}}],[\"usermap\",{\"1\":{\"876\":2}}],[\"usermapper\",{\"1\":{\"624\":3}}],[\"user01是被定义的配置类中的\",{\"1\":{\"517\":1}}],[\"usernamehw\",{\"1\":{\"1005\":1}}],[\"usernamepasswordauthenticationtoken\",{\"1\":{\"626\":1}}],[\"usernamepasswordauthenticationfilteruserdetailsservice\",{\"1\":{\"620\":1}}],[\"usernamepasswordauthenticationfilter\",{\"1\":{\"619\":1,\"627\":2}}],[\"usernamenotfoundexception\",{\"1\":{\"624\":1}}],[\"username\",{\"1\":{\"400\":2,\"462\":2,\"513\":1,\"616\":1,\"624\":2,\"625\":1,\"627\":1,\"879\":2,\"986\":2,\"1005\":3}}],[\"username=root\",{\"1\":{\"398\":1,\"461\":1}}],[\"user这个接口\",{\"1\":{\"261\":1}}],[\"userid\",{\"1\":{\"165\":2}}],[\"userinfothreadlocal\",{\"1\":{\"157\":3}}],[\"userinfo\",{\"1\":{\"69\":2,\"157\":3}}],[\"userregistervo\",{\"1\":{\"130\":1}}],[\"userservice\",{\"1\":{\"392\":2}}],[\"users\",{\"1\":{\"73\":2,\"1001\":1,\"1005\":8,\"1037\":1}}],[\"userkey\",{\"1\":{\"67\":2}}],[\"user\",{\"0\":{\"67\":1},\"1\":{\"47\":2,\"65\":1,\"66\":1,\"105\":1,\"147\":1,\"156\":1,\"165\":2,\"227\":2,\"233\":1,\"310\":4,\"408\":3,\"483\":1,\"502\":2,\"513\":1,\"616\":1,\"618\":1,\"624\":6,\"626\":1,\"629\":1,\"683\":7,\"709\":1,\"792\":1,\"802\":2,\"884\":2,\"893\":1,\"897\":1,\"914\":1,\"915\":2,\"954\":2,\"959\":5,\"986\":2,\"994\":1,\"1005\":3}}],[\"ui框架学习没啥成本\",{\"1\":{\"223\":1}}],[\"ui\",{\"0\":{\"223\":1,\"248\":1},\"1\":{\"223\":5,\"539\":2}}],[\"uid\",{\"1\":{\"105\":1}}],[\"ul>\",{\"1\":{\"220\":2}}],[\"urd\",{\"1\":{\"887\":1}}],[\"uri\",{\"1\":{\"591\":5,\"1013\":1}}],[\"uroot\",{\"1\":{\"212\":2,\"787\":1,\"800\":1}}],[\"url文件写入\",{\"1\":{\"1041\":1}}],[\"url和其他相关信息\",{\"1\":{\"1014\":1}}],[\"url>\",{\"1\":{\"1013\":3}}],[\"url有大小限制\",{\"1\":{\"512\":1}}],[\"url是这样的\",{\"1\":{\"511\":2}}],[\"url=jdbc\",{\"1\":{\"398\":1,\"461\":1}}],[\"url=http\",{\"1\":{\"63\":1,\"1041\":1}}],[\"urldecode\",{\"1\":{\"60\":1}}],[\"urlencoded\",{\"1\":{\"857\":1}}],[\"urlencode\",{\"1\":{\"60\":1}}],[\"url地址栏通常是不区分大小写的\",{\"1\":{\"60\":1}}],[\"url地址栏区分大小写吗\",{\"1\":{\"60\":1}}],[\"url重写\",{\"1\":{\"49\":1}}],[\"url\",{\"0\":{\"60\":1},\"1\":{\"46\":1,\"49\":2,\"60\":2,\"192\":1,\"400\":3,\"459\":3,\"462\":2,\"492\":2,\"505\":1,\"591\":1,\"594\":1,\"629\":1,\"706\":2,\"799\":2,\"882\":1,\"889\":4,\"981\":1,\"985\":2,\"1037\":1}}],[\"utf\",{\"1\":{\"220\":1,\"400\":1,\"459\":1,\"460\":1,\"462\":1,\"464\":1,\"632\":1,\"687\":1}}],[\"utf8\",{\"1\":{\"211\":2}}],[\"utools也可以内网穿透\",{\"1\":{\"197\":1}}],[\"utils\",{\"1\":{\"1081\":2,\"1084\":1}}],[\"util\",{\"1\":{\"115\":1,\"139\":1,\"352\":4,\"378\":1,\"392\":1,\"402\":1,\"590\":1,\"640\":1,\"765\":1,\"766\":1,\"767\":2,\"768\":1,\"770\":1,\"771\":2,\"1006\":1}}],[\"u\",{\"1\":{\"124\":1,\"720\":1,\"721\":1,\"748\":1,\"770\":4,\"927\":2,\"942\":4,\"987\":4,\"1005\":1,\"1160\":2}}],[\"unzip\",{\"1\":{\"1081\":1}}],[\"unused\",{\"1\":{\"974\":1}}],[\"unkeyed\",{\"1\":{\"965\":1}}],[\"unknown\",{\"1\":{\"223\":1,\"486\":1,\"543\":1,\"897\":1,\"1081\":1}}],[\"unacked\",{\"1\":{\"837\":1}}],[\"unaryoperator<t>\",{\"1\":{\"689\":1,\"770\":1}}],[\"unexpected\",{\"1\":{\"646\":3}}],[\"undolog\",{\"1\":{\"908\":1}}],[\"undo\",{\"1\":{\"606\":1,\"902\":2,\"906\":1,\"908\":2,\"935\":5}}],[\"understand\",{\"1\":{\"606\":1,\"961\":1}}],[\"undertow\",{\"1\":{\"473\":1}}],[\"undefinedbackup\",{\"1\":{\"1084\":1}}],[\"undefined\",{\"1\":{\"216\":6,\"879\":1}}],[\"unless\",{\"1\":{\"362\":1}}],[\"unlockstock\",{\"1\":{\"837\":1}}],[\"unlock\",{\"1\":{\"115\":1,\"326\":2,\"352\":4,\"928\":2,\"929\":1,\"1006\":1}}],[\"unpkg\",{\"1\":{\"220\":1}}],[\"unsupported\",{\"1\":{\"219\":1}}],[\"unsafe自旋\",{\"1\":{\"712\":1}}],[\"unsafe就是根据内存偏移地址获取数据的\",{\"1\":{\"304\":1}}],[\"unsafe相当于一个后门\",{\"1\":{\"304\":1}}],[\"unsafe是cas的核心类\",{\"1\":{\"304\":1}}],[\"unsafe类中的compareandswapint是一个本地方法\",{\"1\":{\"306\":1}}],[\"unsafe类存在sun\",{\"1\":{\"304\":1}}],[\"unsafe类的各个方法\",{\"1\":{\"303\":1}}],[\"unsafe类\",{\"1\":{\"291\":1,\"305\":1}}],[\"unsafe\",{\"0\":{\"304\":1},\"1\":{\"89\":1,\"302\":2,\"304\":2,\"309\":1}}],[\"unifiedjs\",{\"1\":{\"1005\":1}}],[\"union会自动将完全重复的数据去除掉\",{\"1\":{\"947\":1}}],[\"union语句注意事项\",{\"1\":{\"947\":1}}],[\"union去重且排序\",{\"1\":{\"947\":1}}],[\"union\",{\"1\":{\"947\":10,\"956\":1,\"959\":3}}],[\"unique\",{\"1\":{\"936\":1}}],[\"uniqueinstance\",{\"1\":{\"302\":8,\"779\":8}}],[\"unix\",{\"1\":{\"810\":1}}],[\"unix主机的ttl值为255\",{\"1\":{\"76\":1}}],[\"unit\",{\"1\":{\"244\":2,\"352\":1,\"362\":2,\"876\":1,\"897\":1}}],[\"unicode\",{\"1\":{\"211\":2,\"685\":1}}],[\"uncommitted是隔离级别最低的一种事务级别\",{\"1\":{\"905\":1}}],[\"uncommitted\",{\"1\":{\"80\":1,\"257\":2,\"905\":2}}],[\"up\",{\"1\":{\"1005\":2,\"1015\":1}}],[\"upic\",{\"1\":{\"1003\":1,\"1005\":1}}],[\"upper\",{\"1\":{\"945\":2}}],[\"upuporwebapplication\",{\"1\":{\"1081\":2}}],[\"upuporlimitertest\",{\"1\":{\"1081\":1}}],[\"upupor使用了flyway\",{\"1\":{\"1079\":1}}],[\"upuporstudy\",{\"0\":{\"1078\":1}}],[\"upupor$\",{\"1\":{\"787\":4,\"800\":4}}],[\"upupor博主处理方式为\",{\"1\":{\"540\":1}}],[\"upupor\",{\"0\":{\"496\":1,\"1182\":1},\"1\":{\"486\":1,\"490\":1,\"539\":1,\"787\":1,\"796\":3,\"799\":3,\"800\":1,\"985\":2,\"1078\":4,\"1081\":4,\"1084\":6}}],[\"up=\",{\"1\":{\"220\":1}}],[\"update=1\",{\"1\":{\"1005\":1}}],[\"update==给数据加锁的时候\",{\"1\":{\"81\":1}}],[\"update给数据加锁的时候\",{\"1\":{\"936\":1}}],[\"updater\",{\"1\":{\"810\":1}}],[\"update>\",{\"1\":{\"434\":1}}],[\"updateemp\",{\"1\":{\"434\":1}}],[\"updategroup这些空接口\",{\"1\":{\"241\":1}}],[\"updated\",{\"1\":{\"225\":1}}],[\"update的方式进行加锁\",{\"1\":{\"169\":1}}],[\"update\",{\"0\":{\"82\":1,\"271\":1,\"938\":1},\"1\":{\"81\":1,\"82\":1,\"169\":3,\"170\":1,\"210\":1,\"236\":2,\"268\":1,\"271\":2,\"434\":2,\"540\":1,\"825\":1,\"898\":1,\"900\":2,\"901\":2,\"902\":1,\"906\":12,\"931\":4,\"934\":1,\"938\":4,\"940\":1,\"959\":4,\"1005\":2,\"1084\":1}}],[\"upstream\",{\"1\":{\"72\":2,\"1005\":3}}],[\"upgrade\",{\"1\":{\"47\":1}}],[\"uuid\",{\"1\":{\"65\":3,\"69\":2,\"86\":1,\"114\":1,\"587\":1,\"878\":1,\"879\":3,\"961\":1,\"972\":1}}],[\"ua\",{\"1\":{\"47\":3,\"220\":1}}],[\"398231563\",{\"1\":{\"1157\":1}}],[\"3946684\",{\"1\":{\"124\":1}}],[\"35k\",{\"1\":{\"1107\":1}}],[\"3=14\",{\"1\":{\"1096\":1}}],[\"3=9\",{\"1\":{\"877\":1}}],[\"3em\",{\"1\":{\"1022\":2}}],[\"3️⃣可以是一件特别不同的事情\",{\"1\":{\"980\":1}}],[\"3种5am\",{\"1\":{\"980\":1}}],[\"37\",{\"1\":{\"766\":1}}],[\"38\",{\"1\":{\"731\":1}}],[\"38fc34fd`\",{\"1\":{\"517\":1}}],[\"3c\",{\"1\":{\"685\":1}}],[\"3w法\",{\"1\":{\"552\":1}}],[\"3w的数据以此类推\",{\"1\":{\"103\":1}}],[\"33\",{\"1\":{\"752\":1,\"973\":2,\"1081\":1}}],[\"3355不改成\",{\"1\":{\"593\":1}}],[\"3355\",{\"1\":{\"591\":1,\"594\":1}}],[\"3344配置中心刷新是修改的\",{\"1\":{\"594\":1}}],[\"3344\",{\"1\":{\"591\":2}}],[\"337\",{\"1\":{\"543\":1,\"1081\":1}}],[\"3306\",{\"1\":{\"210\":6,\"398\":1,\"461\":1,\"791\":2}}],[\"3以及之后的版本内置了lombok插件\",{\"1\":{\"523\":1}}],[\"3rd\",{\"1\":{\"473\":1}}],[\"3<\",{\"1\":{\"458\":2}}],[\"3中\",{\"1\":{\"388\":1}}],[\"3+1+1\",{\"1\":{\"383\":1}}],[\"3个停车位\",{\"1\":{\"342\":1}}],[\"3个系统即使域名不一样\",{\"1\":{\"153\":1}}],[\"3pc\",{\"1\":{\"184\":3}}],[\"305723736c7c\",{\"1\":{\"987\":1}}],[\"30m\",{\"1\":{\"839\":1}}],[\"300\",{\"1\":{\"688\":4,\"917\":1,\"921\":2,\"1085\":1}}],[\"30000\",{\"1\":{\"851\":1}}],[\"3000\",{\"1\":{\"202\":1,\"932\":1,\"1161\":1}}],[\"30多个model\",{\"1\":{\"552\":1}}],[\"30l\",{\"1\":{\"260\":1}}],[\"30秒\",{\"1\":{\"113\":1}}],[\"30\",{\"0\":{\"1131\":1},\"1\":{\"102\":1,\"113\":1,\"115\":1,\"179\":1,\"364\":1,\"751\":1,\"866\":1,\"951\":2,\"952\":2,\"963\":2,\"1131\":1}}],[\"304\",{\"1\":{\"46\":1}}],[\"310\",{\"1\":{\"102\":1}}],[\"3126\",{\"1\":{\"102\":1}}],[\"31\",{\"0\":{\"957\":1},\"1\":{\"102\":1,\"688\":1,\"866\":1,\"951\":1,\"954\":1}}],[\"3k\",{\"1\":{\"92\":1}}],[\"3是很难避免的\",{\"0\":{\"80\":1}}],[\"34\",{\"1\":{\"71\":1,\"796\":1,\"810\":1}}],[\"3\",{\"0\":{\"108\":1,\"109\":1,\"131\":1,\"140\":1,\"141\":1,\"142\":1,\"144\":1,\"146\":2,\"147\":2,\"148\":2,\"149\":1,\"156\":1,\"171\":1,\"172\":1,\"182\":1,\"197\":1,\"208\":1,\"212\":1,\"217\":1,\"222\":1,\"223\":1,\"228\":1,\"272\":1,\"275\":1,\"292\":1,\"305\":1,\"324\":1,\"340\":1,\"357\":1,\"363\":1,\"375\":1,\"377\":1,\"399\":1,\"408\":1,\"411\":1,\"423\":1,\"425\":1,\"426\":1,\"427\":1,\"432\":1,\"445\":1,\"446\":1,\"447\":1,\"448\":2,\"460\":1,\"461\":1,\"465\":1,\"483\":1,\"484\":1,\"489\":1,\"527\":1,\"549\":1,\"561\":1,\"565\":1,\"572\":1,\"575\":1,\"578\":1,\"586\":1,\"594\":1,\"599\":1,\"604\":1,\"617\":1,\"624\":1,\"625\":1,\"696\":1,\"710\":1,\"722\":1,\"752\":1,\"756\":1,\"767\":1,\"791\":1,\"800\":1,\"803\":1,\"815\":1,\"819\":1,\"829\":1,\"839\":1,\"840\":1,\"841\":1,\"842\":1,\"843\":2,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"848\":2,\"863\":1,\"868\":1,\"885\":1,\"886\":1,\"894\":1,\"900\":1,\"906\":1,\"916\":1,\"917\":1,\"923\":1,\"928\":1,\"932\":1,\"993\":1,\"1045\":1,\"1084\":1,\"1091\":1,\"1099\":1},\"1\":{\"49\":1,\"70\":1,\"71\":1,\"81\":1,\"87\":1,\"108\":1,\"109\":1,\"111\":1,\"115\":1,\"123\":1,\"126\":1,\"156\":1,\"169\":1,\"178\":1,\"179\":1,\"196\":1,\"197\":1,\"202\":3,\"210\":1,\"220\":1,\"242\":2,\"252\":2,\"261\":1,\"283\":1,\"293\":4,\"301\":2,\"302\":1,\"334\":2,\"342\":2,\"343\":2,\"352\":4,\"354\":1,\"359\":1,\"366\":1,\"372\":1,\"383\":2,\"385\":1,\"388\":2,\"389\":2,\"400\":2,\"423\":1,\"436\":1,\"440\":1,\"459\":1,\"464\":2,\"468\":1,\"476\":3,\"477\":2,\"483\":2,\"488\":1,\"517\":1,\"576\":1,\"594\":1,\"621\":1,\"626\":1,\"646\":1,\"648\":1,\"658\":10,\"685\":2,\"686\":3,\"687\":7,\"688\":6,\"691\":1,\"697\":1,\"713\":1,\"722\":1,\"726\":1,\"736\":1,\"752\":1,\"756\":1,\"767\":1,\"775\":1,\"778\":1,\"779\":2,\"780\":2,\"798\":1,\"802\":1,\"830\":1,\"866\":1,\"867\":1,\"869\":1,\"899\":1,\"905\":1,\"906\":1,\"916\":2,\"917\":1,\"920\":1,\"921\":4,\"922\":1,\"923\":13,\"924\":4,\"925\":15,\"927\":1,\"929\":2,\"931\":1,\"932\":1,\"934\":3,\"935\":1,\"947\":1,\"948\":1,\"956\":1,\"959\":3,\"961\":1,\"977\":2,\"980\":1,\"984\":1,\"994\":1,\"1003\":1,\"1005\":5,\"1006\":3,\"1009\":1,\"1010\":3,\"1013\":1,\"1019\":1,\"1081\":1,\"1160\":1}}],[\"362c\",{\"1\":{\"387\":1}}],[\"365\",{\"1\":{\"102\":2}}],[\"36\",{\"1\":{\"47\":2}}],[\"32位操作系统\",{\"1\":{\"1093\":1}}],[\"32个bit位\",{\"1\":{\"739\":1}}],[\"32\",{\"1\":{\"47\":1,\"283\":1,\"922\":2}}],[\"svn版本库中\",{\"1\":{\"991\":1}}],[\"svn\",{\"1\":{\"987\":1}}],[\"svg+xml\",{\"1\":{\"1084\":1}}],[\"svg\",{\"1\":{\"540\":1,\"1078\":1,\"1084\":3}}],[\"snapshots>\",{\"1\":{\"1013\":1}}],[\"snapshot\",{\"1\":{\"929\":2,\"934\":2}}],[\"snailclimb\",{\"1\":{\"868\":1}}],[\"sn字段\",{\"1\":{\"172\":1}}],[\"sds\",{\"1\":{\"849\":3}}],[\"sb\",{\"1\":{\"1005\":1}}],[\"sbin\",{\"1\":{\"782\":1,\"1005\":1}}],[\"sbqmea\",{\"1\":{\"197\":1}}],[\"s+\",{\"1\":{\"721\":2,\"1017\":1}}],[\"s==\",{\"1\":{\"725\":1}}],[\"s=\",{\"1\":{\"720\":1,\"721\":3,\"725\":1}}],[\"s5\",{\"1\":{\"687\":1}}],[\"s4\",{\"1\":{\"687\":3}}],[\"s3\",{\"1\":{\"687\":2}}],[\"s2=uuid\",{\"1\":{\"725\":1}}],[\"s2指向的就是驻留在字符串常量池的stringobject2\",{\"1\":{\"723\":1}}],[\"s2+s1\",{\"1\":{\"685\":1}}],[\"s2\",{\"1\":{\"685\":1,\"687\":3,\"720\":1,\"722\":1,\"723\":5,\"724\":3,\"725\":2}}],[\"swagger2\",{\"1\":{\"1097\":1}}],[\"swap\",{\"1\":{\"302\":1,\"1085\":5}}],[\"switch语句只支持int类型\",{\"1\":{\"671\":1}}],[\"switch语句中的参数\",{\"0\":{\"671\":1}}],[\"switch支持10种类型\",{\"1\":{\"671\":1}}],[\"switches\",{\"1\":{\"594\":1}}],[\"sweep\",{\"1\":{\"385\":1}}],[\"s1=\",{\"1\":{\"725\":1}}],[\"s1进行了折叠而s2没有\",{\"1\":{\"725\":1}}],[\"s1和s2指向的是两个不同的\",{\"1\":{\"723\":1}}],[\"s1和s2没有经过初始化所以都是空对象null\",{\"1\":{\"720\":1}}],[\"s1+s2\",{\"1\":{\"720\":1}}],[\"s1\",{\"0\":{\"724\":1},\"1\":{\"383\":1,\"685\":3,\"687\":4,\"720\":1,\"723\":9,\"724\":3,\"725\":2}}],[\"s0\",{\"1\":{\"383\":1}}],[\"smtp\",{\"1\":{\"713\":1}}],[\"smart\",{\"1\":{\"281\":1}}],[\"sms\",{\"1\":{\"126\":2,\"128\":3,\"594\":1}}],[\"sse2\",{\"1\":{\"1003\":1}}],[\"ssms\",{\"1\":{\"959\":1}}],[\"ssl\",{\"1\":{\"795\":2}}],[\"sshconfig=\",{\"1\":{\"1005\":1}}],[\"ssh配置里\",{\"1\":{\"797\":1,\"983\":1}}],[\"ssh\",{\"1\":{\"785\":1,\"797\":4,\"983\":4,\"986\":5,\"1005\":10}}],[\"ss\",{\"1\":{\"247\":1,\"517\":2,\"730\":1}}],[\"ssoserver\",{\"1\":{\"153\":1}}],[\"sso\",{\"0\":{\"153\":1},\"1\":{\"153\":3}}],[\"src\",{\"1\":{\"222\":2,\"223\":1,\"229\":1,\"522\":1,\"531\":1,\"994\":1,\"1079\":1,\"1084\":1}}],[\"src=\",{\"1\":{\"220\":4,\"221\":1,\"539\":1}}],[\"slow\",{\"1\":{\"897\":1}}],[\"slaveof\",{\"1\":{\"861\":1,\"864\":1}}],[\"slice\",{\"1\":{\"708\":1}}],[\"sleuth监控\",{\"1\":{\"594\":1}}],[\"sleuth\",{\"1\":{\"228\":1,\"594\":1}}],[\"sleepwindowinmilliseconds\",{\"1\":{\"586\":1}}],[\"sleep\",{\"1\":{\"202\":1,\"342\":1,\"343\":1,\"687\":4,\"851\":1,\"893\":1,\"1005\":1}}],[\"slf4j\",{\"1\":{\"202\":1,\"740\":1}}],[\"sum\",{\"1\":{\"955\":1,\"959\":10}}],[\"summary\",{\"1\":{\"494\":1}}],[\"sublime中\",{\"1\":{\"1019\":1}}],[\"sublime\",{\"0\":{\"1046\":1,\"1054\":1},\"1\":{\"996\":1,\"1041\":1,\"1150\":1}}],[\"subject\",{\"1\":{\"953\":1}}],[\"substr\",{\"1\":{\"945\":1,\"959\":2}}],[\"substring\",{\"1\":{\"945\":1,\"951\":1,\"959\":2}}],[\"subscribe\",{\"1\":{\"817\":1,\"849\":1}}],[\"sub\",{\"1\":{\"697\":1,\"952\":1}}],[\"submitted\",{\"1\":{\"362\":1}}],[\"submit\",{\"1\":{\"357\":1}}],[\"support\",{\"1\":{\"1005\":1}}],[\"supplier=\",{\"1\":{\"771\":1}}],[\"supplier<integer>\",{\"1\":{\"771\":1}}],[\"supplier<t>\",{\"1\":{\"688\":1,\"689\":1,\"748\":1,\"770\":2}}],[\"supplier\",{\"1\":{\"771\":3}}],[\"supplyasync\",{\"1\":{\"157\":2,\"374\":1}}],[\"super是指向父类的引用\",{\"1\":{\"686\":1}}],[\"super\",{\"1\":{\"658\":4,\"683\":1,\"686\":2,\"688\":3,\"691\":1,\"716\":2,\"767\":1}}],[\"sucking\",{\"1\":{\"1041\":1}}],[\"such\",{\"1\":{\"473\":1}}],[\"success\",{\"1\":{\"192\":1,\"706\":1,\"959\":1}}],[\"suffix\",{\"1\":{\"460\":1,\"1084\":5}}],[\"suffixoverrides=\",{\"1\":{\"432\":2,\"434\":1}}],[\"suffix给拼串后的整个字符串加一个后缀\",{\"1\":{\"432\":1}}],[\"suffix=\",{\"1\":{\"432\":1}}],[\"survivor区的比例等参数\",{\"1\":{\"389\":1}}],[\"survivor\",{\"1\":{\"385\":4}}],[\"survivor1的比例是8\",{\"1\":{\"383\":1,\"385\":1}}],[\"survivorratio=3可以直接计算得出\",{\"1\":{\"383\":1}}],[\"survivorratio=3\",{\"1\":{\"383\":1}}],[\"sudo\",{\"1\":{\"208\":4,\"782\":2,\"998\":1,\"999\":2}}],[\"sun\",{\"1\":{\"202\":1}}],[\"sky\",{\"1\":{\"1017\":2}}],[\"skuinfoserviceimpl\",{\"1\":{\"377\":1}}],[\"sku\",{\"0\":{\"244\":1},\"1\":{\"202\":1,\"244\":1}}],[\"skuesmodels\",{\"1\":{\"92\":1}}],[\"skip\",{\"1\":{\"153\":1,\"211\":2}}],[\"sorrycc\",{\"1\":{\"1005\":3}}],[\"sort会依据结果的正负进行降序排列\",{\"1\":{\"765\":1}}],[\"sort进行自动排序\",{\"1\":{\"688\":1}}],[\"sort或者collectoins\",{\"1\":{\"688\":1}}],[\"sort\",{\"1\":{\"237\":1,\"765\":2}}],[\"sorted\",{\"1\":{\"229\":2,\"849\":1,\"868\":2}}],[\"sogouinput\",{\"1\":{\"1003\":1}}],[\"sout试一下还有\",{\"0\":{\"1059\":1}}],[\"sound\",{\"1\":{\"1005\":1}}],[\"soundsource\",{\"1\":{\"996\":1}}],[\"sourcedir=请输入源文件夹路径\",{\"1\":{\"1038\":1}}],[\"source失败\",{\"1\":{\"1012\":1}}],[\"sourcetree\",{\"1\":{\"996\":5,\"1003\":1,\"1005\":1}}],[\"sources\",{\"1\":{\"993\":2,\"1006\":1}}],[\"sourcessr=users\",{\"1\":{\"379\":1,\"380\":1,\"773\":1}}],[\"source命令\",{\"1\":{\"800\":1}}],[\"source\",{\"1\":{\"260\":1,\"800\":1,\"806\":1,\"1005\":6,\"1081\":4,\"1157\":1}}],[\"source=0f3bf62c50d57c4a7d85b89b4d2633e0\",{\"1\":{\"69\":1,\"543\":2,\"1081\":2}}],[\"some\",{\"1\":{\"987\":1}}],[\"soid\",{\"1\":{\"959\":1}}],[\"solution\",{\"1\":{\"686\":2,\"1085\":2}}],[\"solid\",{\"1\":{\"220\":2}}],[\"sonwlake\",{\"1\":{\"961\":1}}],[\"son1\",{\"1\":{\"658\":1}}],[\"son\",{\"1\":{\"658\":7}}],[\"socket\",{\"1\":{\"688\":2,\"849\":1}}],[\"socket网络编程等资源jvm是无法自动回收的\",{\"1\":{\"686\":1}}],[\"sockettimeoutexception\",{\"1\":{\"577\":1}}],[\"socialuser\",{\"1\":{\"105\":1,\"139\":3}}],[\"sobot\",{\"1\":{\"531\":3}}],[\"softreference类来表示软引用\",{\"1\":{\"660\":1}}],[\"softreference\",{\"1\":{\"636\":1}}],[\"soft\",{\"1\":{\"448\":1,\"572\":1,\"660\":1,\"1154\":1}}],[\"softwareconfiguration\",{\"1\":{\"1001\":1,\"1004\":2,\"1005\":3}}],[\"software\",{\"0\":{\"996\":1},\"1\":{\"393\":1}}],[\"so\",{\"1\":{\"385\":1,\"658\":1,\"993\":1,\"1003\":1}}],[\"sc\",{\"1\":{\"1041\":1}}],[\"scm0426002\",{\"1\":{\"1001\":1}}],[\"scm\",{\"1\":{\"1001\":3}}],[\"scm7\",{\"1\":{\"1001\":3}}],[\"screenshots\",{\"1\":{\"1006\":1}}],[\"screenshot\",{\"1\":{\"1005\":2}}],[\"screencapture\",{\"1\":{\"1005\":5}}],[\"screen\",{\"1\":{\"1005\":1}}],[\"scrolling\",{\"1\":{\"1005\":1}}],[\"scroll\",{\"1\":{\"998\":1,\"1006\":1}}],[\"scripts\",{\"1\":{\"222\":1}}],[\"script>\",{\"1\":{\"220\":8,\"221\":2,\"539\":1}}],[\"script\",{\"1\":{\"88\":2,\"219\":1,\"1005\":2,\"1037\":1}}],[\"scene\",{\"0\":{\"787\":1}}],[\"scanbasepackages\",{\"0\":{\"516\":1}}],[\"scan>\",{\"1\":{\"460\":1,\"462\":1}}],[\"scan\",{\"1\":{\"460\":1,\"462\":1,\"923\":1}}],[\"scale=1\",{\"1\":{\"220\":1}}],[\"schema\",{\"1\":{\"460\":9,\"462\":12,\"893\":2,\"907\":2,\"908\":1,\"928\":1,\"974\":1,\"976\":2,\"1005\":1,\"1079\":1}}],[\"schemalocation=\",{\"1\":{\"459\":1,\"460\":1,\"462\":1}}],[\"schedule\",{\"1\":{\"994\":2}}],[\"scheduler\",{\"1\":{\"887\":1}}],[\"schedulerx\",{\"1\":{\"594\":2}}],[\"scheduleutils\",{\"1\":{\"887\":1}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"883\":1}}],[\"scheduledtasks\",{\"1\":{\"730\":2}}],[\"scheduled\",{\"1\":{\"202\":1,\"730\":4}}],[\"scheduled开启一个定时任务\",{\"1\":{\"202\":1}}],[\"scheduling\",{\"1\":{\"202\":1,\"613\":1}}],[\"score\",{\"1\":{\"959\":11}}],[\"scotykyiokchppd\",{\"1\":{\"133\":2}}],[\"scope>应用于一个依赖时\",{\"1\":{\"1012\":1}}],[\"scope>来避免maven打包结果臃肿\",{\"1\":{\"1012\":1}}],[\"scope>一下\",{\"1\":{\"1012\":1}}],[\"scope>\",{\"1\":{\"238\":2,\"397\":1,\"458\":1,\"477\":1,\"556\":1,\"1010\":1}}],[\"scopedproxymode\",{\"1\":{\"80\":1,\"504\":1}}],[\"scope\",{\"0\":{\"504\":1,\"1012\":1},\"1\":{\"80\":1,\"504\":2}}],[\"symbols\",{\"1\":{\"1005\":1}}],[\"syp74sw7tn17owmzgpyfpndbexasjw44tplj\",{\"1\":{\"985\":1}}],[\"syntax4\",{\"1\":{\"763\":1}}],[\"syntax3\",{\"1\":{\"762\":1}}],[\"syntax1\",{\"1\":{\"752\":1}}],[\"syntax\",{\"1\":{\"752\":1,\"762\":1,\"895\":3,\"938\":2,\"1005\":4}}],[\"synchroinzed升级过程\",{\"1\":{\"379\":1}}],[\"synchronousqueue\",{\"1\":{\"641\":1}}],[\"synchronousqueue等等皆是基于\",{\"1\":{\"378\":1}}],[\"synchronizedmap\",{\"1\":{\"641\":1}}],[\"synchronized的锁是非公平的\",{\"1\":{\"380\":1}}],[\"synchronized不可中断\",{\"1\":{\"380\":1}}],[\"synchronized与reentrantlock大致相同\",{\"1\":{\"380\":1}}],[\"synchronized是jvm实现的关键字\",{\"1\":{\"380\":1}}],[\"synchronized用轻量级锁\",{\"1\":{\"379\":1}}],[\"synchronized属于jvm层面\",{\"1\":{\"352\":1}}],[\"synchronized和lock的区别\",{\"0\":{\"349\":1}}],[\"synchronized通过排他锁的方式就保证了同一时间内\",{\"1\":{\"329\":1}}],[\"synchronized锁\",{\"1\":{\"328\":1}}],[\"synchronized那么第一步就可能存在着\",{\"1\":{\"290\":1}}],[\"synchronized\",{\"0\":{\"80\":1,\"352\":1},\"1\":{\"79\":1,\"108\":1,\"283\":1,\"291\":1,\"301\":1,\"302\":1,\"305\":1,\"321\":3,\"322\":2,\"350\":1,\"352\":7,\"641\":1,\"674\":2,\"740\":2,\"779\":3}}],[\"syncandreentrantlockdemo\",{\"1\":{\"352\":1}}],[\"sync\",{\"1\":{\"123\":2,\"317\":2,\"902\":2,\"1005\":2}}],[\"sync表示该方法的缓存被读取时会加锁\",{\"1\":{\"123\":1}}],[\"sysdm\",{\"1\":{\"1039\":1}}],[\"sysconfigresult\",{\"1\":{\"878\":1}}],[\"sysconfig\",{\"1\":{\"878\":1}}],[\"sys\",{\"1\":{\"878\":2,\"974\":1,\"1084\":1}}],[\"sysusercontroller\",{\"1\":{\"495\":1,\"887\":1}}],[\"systemctl\",{\"1\":{\"208\":2,\"789\":2,\"802\":2,\"804\":3,\"810\":2}}],[\"system\",{\"1\":{\"67\":1,\"133\":3,\"295\":3,\"302\":1,\"310\":2,\"334\":2,\"335\":2,\"338\":2,\"339\":2,\"343\":2,\"352\":3,\"357\":1,\"374\":3,\"403\":2,\"415\":2,\"419\":1,\"427\":2,\"429\":1,\"430\":1,\"436\":1,\"443\":3,\"480\":1,\"492\":2,\"494\":1,\"495\":1,\"517\":2,\"529\":1,\"647\":1,\"650\":1,\"653\":1,\"658\":15,\"670\":1,\"685\":2,\"686\":7,\"687\":3,\"688\":6,\"689\":2,\"691\":4,\"715\":1,\"716\":2,\"720\":1,\"721\":2,\"723\":3,\"724\":1,\"725\":3,\"728\":1,\"731\":1,\"750\":1,\"752\":7,\"754\":2,\"755\":2,\"756\":1,\"763\":2,\"765\":2,\"766\":1,\"767\":2,\"768\":1,\"769\":1,\"771\":4,\"775\":1,\"776\":2,\"778\":3,\"780\":5,\"784\":3,\"810\":1,\"836\":2,\"850\":1,\"851\":2,\"884\":1,\"887\":1,\"1005\":3,\"1006\":1,\"1019\":1,\"1039\":1,\"1081\":1}}],[\"sychronized\",{\"1\":{\"299\":1,\"301\":1}}],[\"sql脚本文件有固定命名规则\",{\"1\":{\"1079\":1}}],[\"sql查询语句优化\",{\"1\":{\"959\":1}}],[\"sqlserver这种\",{\"1\":{\"996\":1}}],[\"sqlserver这部分语法有区别\",{\"1\":{\"938\":1}}],[\"sqlserver\",{\"0\":{\"1001\":1},\"1\":{\"959\":2,\"1001\":2}}],[\"sqlserver怎么做\",{\"1\":{\"959\":1}}],[\"sqlsessiontemplate\",{\"1\":{\"462\":1}}],[\"sqlsession1\",{\"1\":{\"447\":3}}],[\"sqlsession=departmentmapper=>department\",{\"1\":{\"446\":1}}],[\"sqlsession=employeemapper>employee\",{\"1\":{\"446\":1}}],[\"sqlsession相同\",{\"1\":{\"444\":3}}],[\"sqlsession不同\",{\"1\":{\"444\":1}}],[\"sqlsession级别的一个map\",{\"1\":{\"443\":1}}],[\"sqlsession级别的缓存\",{\"1\":{\"443\":1}}],[\"sqlsessionfactorybeanname\",{\"1\":{\"462\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"462\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"402\":2}}],[\"sqlsessionfactory\",{\"1\":{\"402\":5,\"462\":1}}],[\"sqlsession\",{\"1\":{\"402\":2,\"403\":6,\"415\":4,\"419\":4,\"427\":4,\"429\":4,\"430\":4,\"436\":4,\"443\":4,\"447\":6,\"449\":1}}],[\"sql语句要操作的表不只是sql字面上那些\",{\"1\":{\"897\":1}}],[\"sql语句\",{\"1\":{\"897\":1}}],[\"sqlwheresearch\",{\"1\":{\"878\":1}}],[\"sql基于磁盘\",{\"1\":{\"849\":1}}],[\"sql文件名多换行\",{\"1\":{\"787\":1}}],[\"sqlbackup\",{\"1\":{\"787\":4,\"800\":7}}],[\"sqlexception也是\",{\"1\":{\"686\":1}}],[\"sql映射\",{\"1\":{\"465\":1}}],[\"sql>\",{\"1\":{\"440\":1}}],[\"sql标签内部就能使用自定义的属性\",{\"1\":{\"440\":1}}],[\"sql抽取\",{\"1\":{\"440\":1}}],[\"sql报错是因为mybatis\",{\"1\":{\"236\":1}}],[\"sql\",{\"0\":{\"440\":1,\"800\":1,\"968\":1,\"1178\":1,\"1180\":1},\"1\":{\"78\":1,\"81\":1,\"105\":1,\"229\":1,\"399\":4,\"411\":2,\"430\":2,\"463\":4,\"465\":1,\"484\":1,\"705\":1,\"787\":4,\"800\":4,\"806\":1,\"892\":1,\"894\":3,\"895\":5,\"898\":2,\"905\":3,\"906\":1,\"909\":1,\"911\":1,\"919\":1,\"921\":1,\"923\":1,\"924\":1,\"936\":1,\"938\":1,\"959\":2,\"961\":1,\"963\":1,\"970\":1,\"977\":5,\"1001\":4,\"1079\":1}}],[\"s\",{\"1\":{\"71\":1,\"102\":1,\"105\":1,\"107\":1,\"128\":1,\"133\":2,\"330\":1,\"359\":1,\"361\":1,\"685\":3,\"687\":1,\"689\":1,\"691\":3,\"720\":5,\"721\":2,\"722\":2,\"725\":1,\"780\":2,\"782\":2,\"789\":1,\"895\":1,\"897\":1,\"921\":1,\"959\":13,\"998\":1,\"1001\":1,\"1005\":5,\"1008\":1,\"1016\":1,\"1017\":1,\"1020\":2,\"1021\":2,\"1022\":4,\"1023\":4}}],[\"spotlight\",{\"1\":{\"1006\":1}}],[\"spdisplaysdatatype\",{\"1\":{\"1005\":1}}],[\"split\",{\"1\":{\"1005\":1,\"1017\":2,\"1084\":2}}],[\"splitext\",{\"1\":{\"540\":1}}],[\"sp\",{\"1\":{\"929\":3}}],[\"spark\",{\"1\":{\"713\":1}}],[\"space\",{\"1\":{\"709\":2,\"1005\":1}}],[\"span>\",{\"1\":{\"220\":2}}],[\"spi机制允许开发者在类路径下的特定位置提供自定义的实现类\",{\"1\":{\"740\":1}}],[\"spi\",{\"1\":{\"740\":6}}],[\"spirng\",{\"1\":{\"493\":1}}],[\"spinlock\",{\"1\":{\"324\":1}}],[\"special\",{\"1\":{\"802\":1}}],[\"specialized\",{\"1\":{\"272\":1}}],[\"specified\",{\"1\":{\"537\":1}}],[\"specific\",{\"1\":{\"272\":2}}],[\"spu\",{\"0\":{\"244\":1},\"1\":{\"244\":1,\"257\":2}}],[\"spm\",{\"1\":{\"69\":1,\"543\":1,\"1081\":1}}],[\"springutils\",{\"1\":{\"884\":2}}],[\"spring默认提供了一个stringredistemplate类\",{\"1\":{\"875\":1}}],[\"spring会帮我们自动转换\",{\"1\":{\"830\":1}}],[\"spring会检查检查指定参数的指定的目标方法是否已经被调用过\",{\"1\":{\"122\":1}}],[\"spring支持\",{\"0\":{\"820\":1}}],[\"springsecutiry\",{\"1\":{\"618\":1}}],[\"springsecurity过滤器链\",{\"1\":{\"627\":1}}],[\"springsecurity要求这个配置类要继承websecurityconfigureradapter\",{\"1\":{\"625\":1}}],[\"springsecurity就会使用该passwordencoder来进行密码校验\",{\"1\":{\"625\":1}}],[\"springsecurity的原理其实就是一个过滤器链\",{\"1\":{\"619\":1}}],[\"springsecurity的权限管理\",{\"1\":{\"617\":1}}],[\"springsecurity原理\",{\"0\":{\"619\":1},\"1\":{\"620\":1}}],[\"springsecurity框架用于web应用的需要进行认证和授权\",{\"1\":{\"615\":1}}],[\"springsecurity提供了更丰富的功能\",{\"1\":{\"615\":1}}],[\"springsecurity是安全框架\",{\"1\":{\"615\":1}}],[\"springsecurity\",{\"0\":{\"614\":1},\"1\":{\"614\":1,\"616\":1}}],[\"springsession\",{\"1\":{\"146\":1,\"153\":1}}],[\"springsession整合redis\",{\"0\":{\"146\":1},\"1\":{\"123\":1}}],[\"springintegration\",{\"0\":{\"611\":1}}],[\"spring抽象出了这基本的三个\",{\"1\":{\"543\":1,\"1081\":1}}],[\"spring事件驱动最基本的使用\",{\"1\":{\"543\":1,\"1081\":1}}],[\"spring事务管理器会忽略内部方法的事务设置\",{\"1\":{\"179\":1}}],[\"spring版本控制yaml+minio+thymeleaf\",{\"1\":{\"539\":1}}],[\"spring注解\",{\"1\":{\"740\":1}}],[\"spring注解驱动\",{\"1\":{\"499\":1}}],[\"spring注入属性\",{\"1\":{\"487\":1}}],[\"spring中有一个resource接口\",{\"1\":{\"498\":1}}],[\"spring使用的就是动态代理\",{\"1\":{\"493\":1}}],[\"spring方式\",{\"1\":{\"487\":1}}],[\"spring创建对象\",{\"1\":{\"487\":1}}],[\"spring提供的ioc容器实现的两种方式\",{\"0\":{\"486\":1}}],[\"springapplication\",{\"1\":{\"480\":1}}],[\"spring整合springmvc的帖子发现xml会配一大堆东西\",{\"1\":{\"480\":1}}],[\"spring能做什么\",{\"0\":{\"467\":1}}],[\"spring5基于jdk8\",{\"1\":{\"471\":1}}],[\"spring5重大升级\",{\"0\":{\"469\":1}}],[\"spring5\",{\"1\":{\"466\":1,\"487\":1}}],[\"spring声明式事务\",{\"1\":{\"462\":1}}],[\"spring用来管理事务\",{\"1\":{\"462\":1}}],[\"spring管理所有组件\",{\"1\":{\"462\":1}}],[\"spring配置文件\",{\"1\":{\"462\":1}}],[\"spring<\",{\"1\":{\"458\":1}}],[\"springrunner\",{\"1\":{\"227\":1,\"529\":1}}],[\"springcontextutils\",{\"1\":{\"486\":3,\"538\":1,\"1082\":2}}],[\"springcloud的注解\",{\"1\":{\"607\":1}}],[\"springcloud\",{\"0\":{\"552\":1},\"1\":{\"208\":1,\"228\":9,\"553\":1,\"576\":1,\"591\":1}}],[\"springcache\",{\"1\":{\"146\":1}}],[\"springcache+redis\",{\"1\":{\"72\":1}}],[\"spring在扫描bean的时候会自动为标注了\",{\"1\":{\"179\":1}}],[\"spring的注解\",{\"1\":{\"607\":1}}],[\"spring的\",{\"1\":{\"496\":1,\"1081\":1}}],[\"spring的能力\",{\"0\":{\"468\":1}}],[\"spring的aop代理机制默认只会代理public方法\",{\"1\":{\"182\":1}}],[\"spring的aop本质上就是为类做了一个代理\",{\"1\":{\"179\":1}}],[\"spring的声明式事务本质上是通过aop来增强了类的功能\",{\"1\":{\"179\":1}}],[\"spring类\",{\"1\":{\"156\":1,\"160\":1,\"581\":1}}],[\"springboot上手是非常容易的\",{\"1\":{\"740\":1}}],[\"springboot就是一个花架子\",{\"1\":{\"740\":1}}],[\"springboot拿到所有第三方jar包里面声明的配置类以后\",{\"1\":{\"731\":1}}],[\"springboot使用importselector去导入这些配置类\",{\"1\":{\"731\":1}}],[\"springboot基于约定去starter组件的路径下\",{\"1\":{\"731\":1}}],[\"springboot自动配置原理\",{\"0\":{\"731\":1},\"1\":{\"731\":1}}],[\"springboot常用注解总结\",{\"0\":{\"728\":1}}],[\"springboot常用扩展特性之事件驱动\",{\"1\":{\"543\":1,\"1081\":1}}],[\"springboottest\",{\"1\":{\"531\":1}}],[\"springboot项目同时有application\",{\"1\":{\"543\":1}}],[\"springboot项目中\",{\"1\":{\"492\":1}}],[\"springboot项目启动开始可以访问数据库\",{\"1\":{\"260\":1}}],[\"springboot先加载所有的自动配置类\",{\"1\":{\"485\":1}}],[\"springbootconfiguration\",{\"1\":{\"478\":1}}],[\"springbootapplication注解\",{\"1\":{\"731\":1}}],[\"springbootapplicationconfigurationtype\",{\"1\":{\"610\":1}}],[\"springbootapplication\",{\"0\":{\"506\":1,\"516\":1},\"1\":{\"478\":1,\"482\":1}}],[\"springboot所有支持的场景\",{\"1\":{\"477\":1}}],[\"springboot是简化spring技术栈的快速开发脚手架\",{\"1\":{\"473\":1}}],[\"springboot是整合spring技术栈的一站式框架\",{\"1\":{\"473\":1}}],[\"springboot\",{\"0\":{\"559\":1},\"1\":{\"227\":1,\"261\":1,\"466\":1,\"482\":1,\"504\":1,\"529\":1,\"531\":1,\"546\":1,\"553\":1,\"582\":1,\"614\":1,\"730\":1,\"740\":1,\"1080\":1,\"1083\":1,\"1166\":1}}],[\"springboot的拦截器handlerinterceptor\",{\"1\":{\"156\":1}}],[\"springboot重新加载bean\",{\"1\":{\"124\":2}}],[\"springboot2核心技术\",{\"1\":{\"499\":1}}],[\"springboot2\",{\"0\":{\"466\":1},\"1\":{\"107\":1}}],[\"springframework<\",{\"1\":{\"458\":2}}],[\"springframework\",{\"0\":{\"133\":1},\"1\":{\"123\":1,\"125\":1,\"178\":2,\"238\":1,\"459\":4,\"460\":11,\"462\":14,\"476\":2,\"477\":1,\"492\":1,\"538\":2,\"546\":3,\"556\":1,\"559\":1,\"568\":1,\"589\":1,\"594\":1,\"828\":2,\"830\":1,\"876\":1,\"1010\":1,\"1082\":2}}],[\"spring从3\",{\"1\":{\"121\":1}}],[\"springmvc等都是基于servlet\",{\"1\":{\"590\":1}}],[\"springmvc会智能的将符合要求的数据装配进该user对象中\",{\"1\":{\"502\":1}}],[\"springmvc自动将请求体的数据\",{\"1\":{\"502\":1}}],[\"springmvc配置文件只是控制网站跳转逻辑\",{\"1\":{\"460\":1}}],[\"springmvc的前端控制器\",{\"1\":{\"459\":1}}],[\"springmvc\",{\"1\":{\"92\":1,\"97\":1,\"483\":1}}],[\"spring\",{\"0\":{\"133\":1,\"202\":1,\"460\":1,\"494\":1,\"497\":1,\"539\":1,\"610\":1,\"726\":1,\"727\":1,\"728\":1,\"729\":1,\"730\":1,\"821\":1,\"826\":1,\"1166\":1,\"1187\":1},\"1\":{\"60\":1,\"105\":1,\"120\":1,\"121\":1,\"123\":1,\"126\":1,\"146\":1,\"147\":1,\"152\":7,\"153\":4,\"178\":2,\"179\":1,\"182\":5,\"200\":1,\"201\":1,\"202\":1,\"227\":1,\"229\":1,\"231\":1,\"238\":2,\"239\":1,\"247\":2,\"252\":1,\"261\":1,\"458\":4,\"459\":1,\"460\":3,\"462\":7,\"466\":1,\"468\":9,\"473\":4,\"474\":1,\"477\":6,\"478\":1,\"481\":3,\"482\":5,\"483\":4,\"492\":1,\"493\":2,\"494\":8,\"497\":1,\"498\":7,\"499\":1,\"501\":2,\"504\":1,\"505\":1,\"520\":1,\"522\":4,\"523\":2,\"528\":1,\"534\":2,\"537\":1,\"538\":3,\"539\":2,\"543\":25,\"546\":7,\"548\":1,\"551\":1,\"554\":5,\"556\":2,\"559\":1,\"563\":1,\"567\":3,\"573\":1,\"574\":2,\"590\":1,\"591\":1,\"593\":1,\"594\":15,\"597\":4,\"598\":12,\"608\":1,\"625\":2,\"688\":1,\"691\":1,\"713\":2,\"726\":7,\"727\":4,\"728\":2,\"729\":1,\"731\":4,\"738\":1,\"820\":2,\"832\":4,\"835\":3,\"837\":1,\"871\":1,\"877\":1,\"884\":4,\"1009\":1,\"1010\":5,\"1012\":1,\"1081\":3,\"1082\":3,\"1100\":1,\"1150\":1,\"1166\":4}}],[\"shanghai\",{\"1\":{\"1081\":1}}],[\"shadowrocket\",{\"1\":{\"981\":1}}],[\"sharding\",{\"1\":{\"960\":1,\"961\":1}}],[\"sharelist\",{\"1\":{\"1157\":1,\"1159\":1}}],[\"sharelist挂载阿里云盘\",{\"0\":{\"1156\":1}}],[\"shareresource\",{\"1\":{\"352\":7}}],[\"share\",{\"1\":{\"267\":3,\"282\":1,\"795\":1}}],[\"shared\",{\"1\":{\"150\":1,\"543\":1,\"598\":1}}],[\"sharing\",{\"1\":{\"231\":1,\"1006\":1}}],[\"shutdown\",{\"1\":{\"864\":1}}],[\"sh文件中并执行该文件时\",{\"1\":{\"787\":1}}],[\"sh文件运行就又可以\",{\"1\":{\"787\":1}}],[\"sh\",{\"0\":{\"784\":2},\"1\":{\"799\":2,\"800\":1,\"985\":1,\"1003\":1,\"1005\":6}}],[\"shell和cmd都是命令行界面下的解释器\",{\"1\":{\"1037\":1}}],[\"shell会将整个命令作为字符串传递给解释器\",{\"1\":{\"787\":1}}],[\"shell会报错并显示\",{\"1\":{\"787\":1}}],[\"shell\",{\"0\":{\"782\":1},\"1\":{\"785\":1,\"790\":3,\"996\":1,\"998\":1,\"1037\":2}}],[\"shznum\",{\"1\":{\"220\":3}}],[\"shzprice\",{\"1\":{\"220\":3}}],[\"shift\",{\"0\":{\"1042\":1,\"1057\":1,\"1064\":3,\"1065\":1,\"1066\":1,\"1068\":2,\"1070\":1},\"1\":{\"1005\":1}}],[\"shift+alt+左键\",{\"0\":{\"1054\":1}}],[\"shift+entry\",{\"0\":{\"1044\":1}}],[\"shift+esc\",{\"1\":{\"62\":1}}],[\"shift+\",{\"1\":{\"997\":1}}],[\"shiphead\",{\"1\":{\"959\":1}}],[\"shiro\",{\"1\":{\"153\":1}}],[\"shottr\",{\"1\":{\"1003\":1,\"1005\":1}}],[\"should\",{\"1\":{\"277\":2,\"317\":1}}],[\"shortcut\",{\"0\":{\"1045\":1},\"1\":{\"1037\":2}}],[\"shortcuts\",{\"1\":{\"1005\":3,\"1006\":1}}],[\"shortcutkey\",{\"0\":{\"62\":1}}],[\"shortkey\",{\"0\":{\"997\":1}}],[\"short三种类型的变量做运算时\",{\"1\":{\"702\":1}}],[\"short\",{\"1\":{\"647\":1,\"671\":4,\"685\":3,\"686\":1,\"702\":1,\"1006\":1}}],[\"shorter\",{\"1\":{\"260\":1}}],[\"showfiles=\",{\"1\":{\"1005\":1}}],[\"showstatus\",{\"1\":{\"236\":1}}],[\"showeslinterrorsinoverlay\",{\"1\":{\"229\":1}}],[\"show\",{\"1\":{\"220\":2,\"236\":3,\"270\":1,\"802\":1,\"893\":2,\"894\":1,\"897\":2,\"902\":2,\"903\":1,\"905\":2,\"929\":2,\"932\":2,\"977\":1,\"1005\":3,\"1006\":1}}],[\"shopjson\",{\"1\":{\"876\":2}}],[\"shop\",{\"1\":{\"123\":2,\"876\":1}}],[\"se\",{\"0\":{\"1175\":1}}],[\"see\",{\"1\":{\"1005\":1}}],[\"seed\",{\"1\":{\"689\":1}}],[\"semester\",{\"1\":{\"953\":1}}],[\"semantic\",{\"1\":{\"539\":4}}],[\"semaphore\",{\"0\":{\"340\":1},\"1\":{\"202\":1,\"342\":5,\"343\":5,\"378\":1}}],[\"sex\",{\"1\":{\"940\":2}}],[\"self\",{\"1\":{\"784\":3}}],[\"selected\",{\"1\":{\"1006\":2}}],[\"selectconfigvo\",{\"1\":{\"878\":1}}],[\"selectconfig\",{\"1\":{\"878\":1}}],[\"selectcaptchaenabled\",{\"1\":{\"878\":1}}],[\"selectone\",{\"1\":{\"624\":1}}],[\"selector\",{\"1\":{\"61\":1,\"712\":5}}],[\"select=\",{\"1\":{\"423\":1,\"427\":1,\"428\":1,\"429\":1}}],[\"select>\",{\"1\":{\"408\":1,\"415\":1,\"416\":1,\"419\":1,\"421\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":2,\"429\":2,\"430\":1,\"432\":1,\"433\":1,\"436\":1,\"438\":1,\"878\":1}}],[\"selectlist\",{\"1\":{\"229\":2}}],[\"select\",{\"0\":{\"82\":1,\"969\":1},\"1\":{\"81\":1,\"82\":1,\"169\":2,\"257\":1,\"408\":1,\"411\":2,\"415\":1,\"416\":1,\"419\":1,\"421\":1,\"422\":1,\"423\":2,\"426\":1,\"427\":2,\"429\":2,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"436\":1,\"438\":2,\"712\":5,\"849\":1,\"893\":1,\"894\":2,\"895\":2,\"896\":1,\"897\":3,\"906\":9,\"907\":2,\"908\":1,\"917\":2,\"921\":1,\"922\":1,\"924\":1,\"925\":2,\"927\":1,\"929\":1,\"937\":2,\"939\":1,\"941\":4,\"943\":2,\"947\":3,\"948\":2,\"949\":2,\"951\":2,\"953\":1,\"954\":1,\"955\":1,\"959\":29,\"963\":1,\"964\":1,\"969\":5,\"1006\":1}}],[\"segment<k\",{\"1\":{\"674\":1}}],[\"segment\",{\"1\":{\"591\":2,\"740\":3}}],[\"segmentfault\",{\"1\":{\"546\":1}}],[\"sever作为服务注册功能的服务器\",{\"1\":{\"564\":1}}],[\"separator=\",{\"1\":{\"436\":1,\"437\":2}}],[\"separator\",{\"0\":{\"946\":1},\"1\":{\"436\":1,\"946\":1}}],[\"seq\",{\"1\":{\"269\":2}}],[\"sendemail\",{\"1\":{\"543\":1,\"1081\":1}}],[\"sendemailevent\",{\"1\":{\"543\":2,\"1081\":2}}],[\"sendcode\",{\"1\":{\"128\":7}}],[\"sentinelresource\",{\"1\":{\"604\":1}}],[\"sentinelresource配置\",{\"0\":{\"604\":1}}],[\"sentinel流控\",{\"0\":{\"601\":1,\"602\":1}}],[\"sentinel是面向分布式服务架构的流量控制组件\",{\"1\":{\"599\":1}}],[\"sentinel后面都是一些细节和配置\",{\"1\":{\"581\":1}}],[\"sentinel\",{\"1\":{\"228\":1,\"588\":1,\"589\":1,\"594\":1,\"599\":1,\"600\":1,\"604\":2,\"605\":2,\"865\":2}}],[\"seata支持很多模式\",{\"1\":{\"607\":1}}],[\"seata是这个的一个变形\",{\"1\":{\"605\":1,\"607\":1}}],[\"seata好像借助了表\",{\"1\":{\"184\":1}}],[\"seata\",{\"1\":{\"183\":3,\"227\":2,\"228\":1,\"594\":1,\"606\":1,\"607\":1,\"608\":5,\"838\":1}}],[\"searcher\",{\"1\":{\"1003\":1}}],[\"search\",{\"0\":{\"263\":1},\"1\":{\"125\":2,\"273\":1,\"274\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"279\":1,\"543\":1,\"789\":1,\"1081\":1}}],[\"serial语义保证\",{\"1\":{\"329\":1}}],[\"serial语义的一个关键前提\",{\"1\":{\"329\":1}}],[\"serial语义的编译器\",{\"1\":{\"329\":1}}],[\"serial语义使单线程程序员无需担心重排序会\",{\"1\":{\"329\":1}}],[\"serial语义把单线程程序保护了起来\",{\"1\":{\"329\":1}}],[\"serial语义\",{\"1\":{\"328\":1,\"329\":3}}],[\"serial\",{\"1\":{\"327\":1}}],[\"serializable\",{\"1\":{\"905\":2}}],[\"serializationpair\",{\"1\":{\"125\":3}}],[\"serialize\",{\"1\":{\"156\":1}}],[\"serializevalueswith\",{\"1\":{\"125\":2}}],[\"serializekeyswith\",{\"1\":{\"125\":1}}],[\"serve\",{\"1\":{\"219\":1,\"1161\":2}}],[\"server中merge语句的语法形式\",{\"1\":{\"959\":1}}],[\"server中\",{\"1\":{\"938\":1}}],[\"serversocket\",{\"1\":{\"688\":1}}],[\"server来监控系统中各个微服务是否正常运行\",{\"1\":{\"564\":1}}],[\"server并维持\",{\"1\":{\"564\":1}}],[\"server和eureka\",{\"1\":{\"561\":1}}],[\"serverless\",{\"1\":{\"474\":1}}],[\"server=utf8mb4\",{\"1\":{\"805\":2}}],[\"server=utf8\",{\"1\":{\"211\":2}}],[\"server\",{\"1\":{\"48\":1,\"71\":3,\"72\":5,\"73\":4,\"153\":1,\"213\":1,\"229\":1,\"256\":1,\"260\":1,\"520\":2,\"546\":1,\"547\":1,\"548\":1,\"565\":1,\"574\":1,\"591\":1,\"594\":1,\"595\":1,\"606\":1,\"608\":2,\"713\":1,\"782\":1,\"785\":4,\"796\":2,\"801\":1,\"810\":2,\"892\":3,\"893\":1,\"895\":1,\"900\":3,\"905\":1,\"922\":1,\"938\":1}}],[\"servletexception\",{\"1\":{\"890\":1}}],[\"servletutils\",{\"1\":{\"885\":3}}],[\"servletcomponentscan\",{\"0\":{\"521\":1}}],[\"servletrequestattributes\",{\"1\":{\"492\":2}}],[\"servlet>\",{\"1\":{\"459\":1}}],[\"servlet<\",{\"1\":{\"458\":2}}],[\"servlet\",{\"0\":{\"738\":1},\"1\":{\"140\":1,\"229\":1,\"458\":2,\"459\":5,\"460\":3,\"466\":1,\"521\":1,\"543\":1,\"546\":1,\"726\":2,\"737\":6,\"738\":8}}],[\"services\",{\"1\":{\"785\":1}}],[\"service就是微服务\",{\"1\":{\"598\":1}}],[\"servicename是spring\",{\"1\":{\"591\":1}}],[\"service==>dao\",{\"1\":{\"462\":1}}],[\"service接收controller传来的数据\",{\"1\":{\"252\":1}}],[\"serviceimpl<m\",{\"1\":{\"229\":1}}],[\"serviceimpl<categorydao\",{\"1\":{\"229\":1}}],[\"serviceimpl\",{\"1\":{\"229\":2}}],[\"service\",{\"0\":{\"238\":1,\"566\":1},\"1\":{\"67\":2,\"156\":1,\"252\":1,\"377\":1,\"462\":1,\"482\":1,\"517\":1,\"566\":2,\"575\":1,\"576\":1,\"583\":1,\"585\":1,\"591\":4,\"594\":2,\"608\":1,\"624\":1,\"740\":2,\"793\":1,\"802\":2,\"803\":1,\"805\":1,\"818\":1,\"831\":1,\"880\":1,\"887\":1,\"1041\":5}}],[\"sessin\",{\"0\":{\"52\":1}}],[\"sessiontemplate\",{\"1\":{\"462\":1}}],[\"sessionfactory\",{\"1\":{\"462\":3}}],[\"session一般会借助\",{\"1\":{\"156\":1}}],[\"sessionid\",{\"1\":{\"153\":1}}],[\"session的增删改查封装类\",{\"1\":{\"152\":1}}],[\"session的yaml配置每个model都要\",{\"0\":{\"150\":1}}],[\"session的实现\",{\"1\":{\"147\":1}}],[\"session复制\",{\"0\":{\"143\":1}}],[\"session有domain限定\",{\"1\":{\"141\":1}}],[\"session存储在服务端\",{\"1\":{\"140\":1}}],[\"session里面的数据就会删掉\",{\"1\":{\"98\":1,\"130\":1,\"536\":1}}],[\"sessioncallback<t>\",{\"1\":{\"85\":1}}],[\"session问题\",{\"1\":{\"72\":1}}],[\"session可以存储对象\",{\"1\":{\"51\":1}}],[\"session可以解决cookie解决不了的事情\",{\"1\":{\"51\":1}}],[\"session比cookie使用方便\",{\"1\":{\"51\":1}}],[\"session\",{\"0\":{\"50\":1,\"66\":1,\"141\":1},\"1\":{\"49\":2,\"52\":1,\"65\":3,\"68\":1,\"70\":1,\"123\":1,\"141\":5,\"147\":2,\"152\":21,\"156\":6,\"157\":1,\"402\":3,\"468\":1,\"565\":1,\"618\":1,\"928\":8,\"929\":1,\"977\":2,\"1005\":1}}],[\"setproperty\",{\"1\":{\"1081\":1}}],[\"setpagesize\",{\"1\":{\"885\":1}}],[\"setpagenum\",{\"1\":{\"885\":1}}],[\"setinterval\",{\"1\":{\"1084\":1}}],[\"setifabsent\",{\"1\":{\"876\":1}}],[\"setignorenullvalue\",{\"1\":{\"876\":1}}],[\"setfieldvalueeditor优先级要高于ignorenullvalue导致前者首先被触发\",{\"1\":{\"876\":1}}],[\"setfieldvalueeditor\",{\"1\":{\"876\":1}}],[\"set机制实现事务的\",{\"1\":{\"855\":1}}],[\"setreasonable\",{\"1\":{\"887\":2}}],[\"setreturncallback\",{\"1\":{\"836\":1}}],[\"setrequestattributes\",{\"1\":{\"157\":1,\"161\":1}}],[\"set=new\",{\"1\":{\"766\":2}}],[\"set=utf8mb4\",{\"1\":{\"805\":1}}],[\"set=utf8\",{\"1\":{\"211\":2}}],[\"setdata\",{\"1\":{\"716\":8}}],[\"sets\",{\"1\":{\"849\":1}}],[\"setstuno\",{\"1\":{\"662\":1}}],[\"setstuname\",{\"1\":{\"662\":1}}],[\"setstatus\",{\"1\":{\"632\":1}}],[\"setsocial\",{\"1\":{\"105\":1}}],[\"seturlblockhandler\",{\"1\":{\"600\":1}}],[\"setup\",{\"1\":{\"530\":1,\"994\":3,\"1005\":1,\"1007\":2}}],[\"setupmethod\",{\"1\":{\"530\":1}}],[\"setnickname\",{\"1\":{\"576\":1}}],[\"setnx\",{\"1\":{\"87\":2,\"111\":1,\"849\":1,\"867\":1}}],[\"setters\",{\"1\":{\"683\":1}}],[\"setter方法或构造函数\",{\"1\":{\"488\":1}}],[\"setter\",{\"1\":{\"488\":1,\"543\":1}}],[\"setter注入等\",{\"1\":{\"489\":1}}],[\"setter注入\",{\"0\":{\"488\":1}}],[\"setting文件都有那个标签repository\",{\"0\":{\"1014\":1}}],[\"setting\",{\"1\":{\"993\":1,\"1013\":1}}],[\"settings文件中的<repository>标签用于配置全局的仓库设置\",{\"1\":{\"1014\":1}}],[\"settings文件是maven的全局配置文件\",{\"1\":{\"1014\":1}}],[\"settings>\",{\"1\":{\"400\":1,\"464\":1}}],[\"settings\",{\"1\":{\"400\":1,\"1005\":1}}],[\"settimeout\",{\"1\":{\"128\":2,\"1005\":1}}],[\"set方法注入\",{\"1\":{\"488\":1}}],[\"set方法注入属性\",{\"1\":{\"487\":1}}],[\"set方式注入\",{\"1\":{\"487\":1}}],[\"setbname\",{\"1\":{\"487\":1}}],[\"set>\",{\"1\":{\"434\":1,\"610\":1}}],[\"set标签的使用\",{\"1\":{\"434\":1}}],[\"setapp\",{\"1\":{\"1003\":2}}],[\"setapplicationcontext\",{\"1\":{\"486\":1,\"538\":3,\"1082\":3}}],[\"setaccessible\",{\"1\":{\"721\":1}}],[\"setaddress\",{\"1\":{\"683\":1}}],[\"setauthentication\",{\"1\":{\"627\":1}}],[\"setattrname\",{\"1\":{\"252\":1}}],[\"setattribute\",{\"1\":{\"49\":1,\"140\":1,\"147\":1}}],[\"setallowcredentials\",{\"1\":{\"231\":1}}],[\"setcharacterencoding\",{\"1\":{\"632\":1}}],[\"setchildren\",{\"1\":{\"229\":2}}],[\"setconfirmcallback\",{\"1\":{\"836\":1}}],[\"setconfirmcallback用于设置确认回调\",{\"1\":{\"510\":1}}],[\"setcontenttype\",{\"1\":{\"632\":1}}],[\"setcacheobject\",{\"1\":{\"67\":1}}],[\"set防重\",{\"1\":{\"172\":1}}],[\"set过滤器增强的地方\",{\"1\":{\"161\":1}}],[\"set也放到这个synchronized块里\",{\"1\":{\"108\":1}}],[\"setviewname\",{\"1\":{\"97\":2}}],[\"setexpiretime\",{\"1\":{\"67\":1}}],[\"setlogintime\",{\"1\":{\"67\":1}}],[\"set\",{\"0\":{\"434\":1},\"1\":{\"48\":1,\"49\":1,\"71\":4,\"72\":1,\"87\":3,\"110\":1,\"157\":4,\"164\":1,\"165\":1,\"169\":1,\"170\":1,\"174\":1,\"211\":4,\"213\":1,\"236\":2,\"252\":1,\"257\":2,\"310\":1,\"359\":1,\"362\":1,\"430\":1,\"434\":1,\"489\":1,\"628\":1,\"629\":2,\"688\":1,\"721\":1,\"766\":8,\"782\":2,\"792\":1,\"794\":1,\"799\":2,\"802\":3,\"805\":1,\"810\":3,\"851\":1,\"852\":2,\"868\":2,\"869\":1,\"898\":1,\"906\":2,\"907\":3,\"908\":2,\"927\":1,\"929\":1,\"938\":3,\"940\":1,\"959\":2,\"985\":2,\"1005\":1,\"1038\":4,\"1041\":1,\"1080\":1}}],[\"secrets\",{\"1\":{\"994\":2}}],[\"secret\",{\"1\":{\"796\":1,\"1084\":1}}],[\"secure=false\",{\"1\":{\"1084\":1}}],[\"secure\",{\"1\":{\"785\":1}}],[\"security框架的拦截器实现的\",{\"1\":{\"890\":1}}],[\"security的异常处理机制\",{\"1\":{\"630\":1}}],[\"securitycontextholder\",{\"1\":{\"627\":2,\"629\":1}}],[\"securityconfig\",{\"1\":{\"625\":1,\"626\":1,\"889\":1}}],[\"security官方的userdetailsservice接口\",{\"1\":{\"624\":1}}],[\"security\",{\"0\":{\"133\":1},\"1\":{\"153\":4,\"625\":1,\"877\":1,\"1006\":1,\"1100\":1}}],[\"secondhighestsalary\",{\"1\":{\"949\":1}}],[\"secondary\",{\"1\":{\"917\":1}}],[\"seconds\",{\"1\":{\"115\":2,\"342\":1,\"343\":1,\"363\":1,\"852\":2,\"876\":1}}],[\"second\",{\"1\":{\"100\":2}}],[\"sec\",{\"1\":{\"47\":7,\"907\":1}}],[\"sa=1024320u\",{\"1\":{\"1157\":1}}],[\"sa\",{\"1\":{\"1001\":1}}],[\"sales\",{\"1\":{\"959\":1}}],[\"salescte\",{\"1\":{\"959\":2}}],[\"salary\",{\"1\":{\"411\":1,\"939\":1,\"940\":1,\"949\":2}}],[\"safe\",{\"1\":{\"899\":4,\"900\":3,\"902\":1}}],[\"safari\",{\"1\":{\"47\":1}}],[\"saga\",{\"1\":{\"608\":1}}],[\"savepoint\",{\"1\":{\"929\":3}}],[\"saveattr\",{\"1\":{\"252\":1}}],[\"save功能\",{\"1\":{\"250\":1}}],[\"save\",{\"1\":{\"233\":1,\"240\":1,\"241\":1,\"1006\":1,\"1084\":1}}],[\"sampler\",{\"1\":{\"594\":1}}],[\"sample2\",{\"1\":{\"153\":1}}],[\"sample1\",{\"1\":{\"153\":1}}],[\"same\",{\"0\":{\"1042\":1},\"1\":{\"47\":1,\"941\":1}}],[\"siri\",{\"1\":{\"1006\":1}}],[\"silver\",{\"1\":{\"1003\":1}}],[\"sip\",{\"1\":{\"999\":1,\"1003\":1,\"1005\":1}}],[\"similar\",{\"1\":{\"477\":1}}],[\"simple\",{\"1\":{\"740\":1,\"832\":1,\"837\":1,\"849\":1}}],[\"simpledateformat\",{\"1\":{\"730\":2}}],[\"simpleuuid\",{\"1\":{\"587\":2}}],[\"simplekey\",{\"1\":{\"123\":1}}],[\"simplify\",{\"1\":{\"473\":1}}],[\"size=\",{\"1\":{\"448\":1}}],[\"size\",{\"1\":{\"202\":2,\"249\":1,\"383\":1,\"448\":1,\"885\":1,\"903\":1,\"1005\":1}}],[\"signal\",{\"1\":{\"350\":1,\"352\":3}}],[\"signature\",{\"1\":{\"70\":1,\"887\":2}}],[\"sign\",{\"1\":{\"153\":1}}],[\"singlethreadpool\",{\"1\":{\"366\":1}}],[\"singleton6\",{\"1\":{\"779\":5}}],[\"singleton5\",{\"1\":{\"779\":6}}],[\"singleton4\",{\"1\":{\"779\":5}}],[\"singleton3\",{\"1\":{\"779\":5}}],[\"singleton2\",{\"1\":{\"779\":1}}],[\"singleton1\",{\"1\":{\"779\":4}}],[\"singleton单例模式\",{\"0\":{\"779\":1}}],[\"singleton<t>\",{\"1\":{\"718\":2}}],[\"singletonfactories\",{\"1\":{\"543\":1}}],[\"singletonobjects\",{\"1\":{\"543\":1}}],[\"singleton\",{\"1\":{\"302\":1,\"700\":4,\"779\":1}}],[\"singletondemo\",{\"1\":{\"301\":5,\"302\":5}}],[\"single\",{\"1\":{\"153\":1,\"779\":1,\"787\":1,\"800\":1,\"927\":2,\"929\":2,\"1006\":1}}],[\"since\",{\"1\":{\"47\":1}}],[\"sites\",{\"1\":{\"48\":1}}],[\"site\",{\"1\":{\"47\":1,\"1001\":1}}],[\"steps\",{\"1\":{\"994\":2}}],[\"stereotype\",{\"1\":{\"460\":1,\"462\":1}}],[\"stderr\",{\"1\":{\"784\":2}}],[\"stdout\",{\"1\":{\"784\":2,\"1084\":1}}],[\"stdin\",{\"1\":{\"784\":2,\"790\":1}}],[\"studio\",{\"1\":{\"1003\":1,\"1005\":1}}],[\"study\",{\"1\":{\"1161\":1}}],[\"studytest\",{\"1\":{\"691\":3}}],[\"studynotes\",{\"0\":{\"1169\":1},\"1\":{\"73\":2}}],[\"studentid=s\",{\"1\":{\"959\":3}}],[\"studentid\",{\"1\":{\"959\":3}}],[\"student>\",{\"1\":{\"416\":2}}],[\"student\",{\"1\":{\"403\":6,\"404\":2,\"415\":1,\"416\":2,\"662\":4,\"688\":1,\"959\":3}}],[\"studentmapper接口\",{\"1\":{\"415\":1,\"416\":1}}],[\"studentmapper\",{\"1\":{\"400\":1,\"403\":3,\"415\":3,\"416\":1}}],[\"styled\",{\"1\":{\"1005\":2}}],[\"style>\",{\"1\":{\"224\":1}}],[\"style=\",{\"1\":{\"220\":2}}],[\"stash命令先把当前进度保存起来\",{\"1\":{\"990\":1}}],[\"stash\",{\"1\":{\"990\":2}}],[\"starship\",{\"1\":{\"1005\":7}}],[\"stars\",{\"1\":{\"985\":1}}],[\"startbusinessdate\",{\"1\":{\"1021\":3,\"1022\":1}}],[\"started\",{\"1\":{\"907\":1,\"994\":1}}],[\"starter在使用时可以正常工作\",{\"1\":{\"1012\":1}}],[\"starter时\",{\"1\":{\"1012\":1}}],[\"starter的依赖\",{\"1\":{\"1012\":1}}],[\"starter的功能\",{\"1\":{\"1012\":1}}],[\"starter内部已经配置了spring\",{\"1\":{\"1012\":1}}],[\"starter是一个用于集成mybatis\",{\"1\":{\"1012\":1}}],[\"starter为什么能使用\",{\"1\":{\"1012\":1}}],[\"starter提供的功能\",{\"1\":{\"1012\":1}}],[\"starter依赖通常是由一个模块来提供运行时环境\",{\"1\":{\"1012\":1}}],[\"starter<\",{\"1\":{\"477\":1}}],[\"starters\",{\"0\":{\"727\":1},\"1\":{\"477\":1,\"727\":3}}],[\"starter场景启动器\",{\"0\":{\"477\":1}}],[\"starter导入报错的问题\",{\"1\":{\"238\":1}}],[\"starter\",{\"1\":{\"178\":2,\"179\":2,\"239\":1,\"466\":1,\"473\":1,\"476\":1,\"477\":3,\"481\":2,\"492\":1,\"567\":1,\"574\":5,\"589\":1,\"594\":1,\"608\":1,\"727\":1,\"828\":1,\"871\":1,\"1010\":5,\"1012\":3}}],[\"startpage\",{\"1\":{\"887\":1}}],[\"starttimestamp\",{\"1\":{\"851\":2}}],[\"starttime\",{\"1\":{\"492\":2}}],[\"start==========================================\",{\"1\":{\"492\":1}}],[\"starts\",{\"1\":{\"477\":1}}],[\"startup>\",{\"1\":{\"459\":1}}],[\"startup>1<\",{\"1\":{\"459\":1}}],[\"startup\",{\"1\":{\"383\":1,\"594\":1,\"998\":1,\"1037\":1}}],[\"start\",{\"0\":{\"1040\":1},\"1\":{\"123\":1,\"222\":1,\"334\":1,\"335\":1,\"338\":1,\"339\":1,\"343\":1,\"352\":3,\"354\":1,\"355\":1,\"356\":1,\"357\":1,\"554\":1,\"614\":1,\"650\":2,\"687\":1,\"688\":1,\"769\":1,\"789\":1,\"802\":1,\"804\":1,\"810\":1,\"854\":1,\"906\":1,\"907\":1,\"929\":1,\"934\":3,\"1037\":1}}],[\"start好处什么都配好了\",{\"1\":{\"112\":1}}],[\"stamp\",{\"0\":{\"954\":1},\"1\":{\"954\":5}}],[\"staea0\",{\"1\":{\"608\":1}}],[\"standalone\",{\"1\":{\"594\":1}}],[\"standard\",{\"1\":{\"244\":1,\"281\":2,\"782\":1}}],[\"stand\",{\"1\":{\"473\":2}}],[\"stack是较早版本的类\",{\"1\":{\"677\":1}}],[\"stack\",{\"1\":{\"262\":1,\"383\":1,\"640\":1,\"778\":1}}],[\"stats\",{\"1\":{\"996\":1}}],[\"statement\",{\"1\":{\"449\":1,\"900\":1}}],[\"statement=debug\",{\"1\":{\"399\":1,\"463\":1}}],[\"state\",{\"1\":{\"276\":1,\"572\":1}}],[\"state或者address中包含mill\",{\"1\":{\"276\":1}}],[\"static为界的实例变量和静态变量\",{\"1\":{\"696\":1}}],[\"static<t>\",{\"1\":{\"689\":2}}],[\"static表示类方法\",{\"1\":{\"667\":1}}],[\"static\",{\"1\":{\"72\":1,\"73\":4,\"124\":1,\"128\":1,\"156\":1,\"157\":5,\"301\":2,\"302\":2,\"335\":1,\"339\":1,\"343\":1,\"352\":1,\"361\":1,\"374\":1,\"388\":2,\"402\":3,\"486\":1,\"492\":1,\"538\":1,\"546\":2,\"632\":1,\"647\":1,\"650\":1,\"658\":14,\"679\":1,\"686\":7,\"687\":1,\"688\":5,\"691\":3,\"696\":1,\"700\":1,\"717\":1,\"718\":4,\"720\":3,\"721\":1,\"722\":1,\"723\":1,\"725\":2,\"730\":2,\"752\":1,\"762\":2,\"763\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":3,\"779\":10,\"780\":2,\"799\":1,\"1019\":1,\"1081\":6,\"1082\":1,\"1084\":2}}],[\"statusdashboardgroupingrule\",{\"1\":{\"610\":1}}],[\"status=\",{\"1\":{\"236\":1}}],[\"status=1\",{\"1\":{\"236\":2}}],[\"status\",{\"1\":{\"46\":1,\"210\":1,\"236\":1,\"239\":1,\"520\":1,\"802\":1,\"804\":1,\"903\":1,\"990\":1,\"1005\":1}}],[\"stomp协议端口\",{\"1\":{\"825\":1}}],[\"stop\",{\"1\":{\"804\":1}}],[\"stopwatch\",{\"1\":{\"496\":1,\"1081\":2}}],[\"stop=\",{\"1\":{\"220\":2}}],[\"store3\",{\"1\":{\"947\":3}}],[\"store2\",{\"1\":{\"947\":3}}],[\"store1\",{\"1\":{\"947\":4}}],[\"store\",{\"0\":{\"263\":1},\"1\":{\"947\":4,\"1003\":1,\"1005\":2,\"1084\":1}}],[\"storagenum\",{\"1\":{\"938\":1}}],[\"storagenum=1\",{\"1\":{\"938\":1}}],[\"storage\",{\"0\":{\"238\":1},\"1\":{\"70\":1,\"594\":1}}],[\"stocks\",{\"1\":{\"955\":1}}],[\"stock的值为10\",{\"1\":{\"309\":1}}],[\"stock\",{\"1\":{\"89\":1,\"202\":1,\"244\":1,\"829\":2,\"844\":2,\"955\":2}}],[\"stree\",{\"1\":{\"1005\":1}}],[\"stream上的操作并不会立即执行\",{\"1\":{\"773\":1}}],[\"stream是否已经被操作了\",{\"0\":{\"773\":1}}],[\"stream是什么\",{\"1\":{\"594\":1}}],[\"stream属于管道流\",{\"1\":{\"772\":1}}],[\"stream<t>\",{\"1\":{\"689\":2}}],[\"stream关注的数据的运算\",{\"1\":{\"689\":1}}],[\"stream有并发流\",{\"1\":{\"689\":1,\"741\":1}}],[\"stream流属于惰式执行\",{\"1\":{\"773\":1}}],[\"stream流可以收集多次吗\",{\"0\":{\"772\":1}}],[\"stream流可以看作是for循环的一个语法糖\",{\"1\":{\"689\":1,\"741\":1}}],[\"stream流和for的区别\",{\"0\":{\"689\":1}}],[\"stream\",{\"0\":{\"773\":1,\"774\":1},\"1\":{\"103\":1,\"130\":1,\"229\":2,\"258\":1,\"480\":1,\"594\":1,\"688\":1,\"689\":5,\"741\":1,\"775\":3,\"776\":3,\"1084\":1}}],[\"strutil\",{\"1\":{\"876\":1}}],[\"struts2\",{\"1\":{\"590\":1}}],[\"str=\",{\"1\":{\"780\":2}}],[\"strong\",{\"1\":{\"636\":1,\"660\":1,\"802\":1}}],[\"strategy\",{\"1\":{\"539\":2}}],[\"strategy=ant\",{\"1\":{\"60\":1}}],[\"str3\",{\"1\":{\"216\":5}}],[\"str2\",{\"1\":{\"216\":5}}],[\"str1\",{\"1\":{\"216\":5}}],[\"str\",{\"1\":{\"49\":1,\"128\":2,\"687\":6,\"691\":5,\"720\":2,\"780\":3,\"959\":1,\"1084\":1}}],[\"strikethrough\",{\"1\":{\"1005\":1}}],[\"string处理\",{\"1\":{\"951\":1}}],[\"stringbuffer\",{\"1\":{\"887\":2}}],[\"stringtable\",{\"1\":{\"722\":1}}],[\"stringtest\",{\"1\":{\"687\":3}}],[\"string的不可变性我又没理解\",{\"1\":{\"780\":1}}],[\"string的不可变性\",{\"1\":{\"687\":1}}],[\"string对象的创建\",{\"1\":{\"687\":1}}],[\"string可以和boolean拼接\",{\"1\":{\"685\":1}}],[\"string底层char\",{\"1\":{\"685\":1}}],[\"string是否过期\",{\"1\":{\"626\":1}}],[\"stringutils\",{\"1\":{\"252\":1}}],[\"strings1\",{\"1\":{\"249\":1}}],[\"strings\",{\"1\":{\"249\":1}}],[\"string>>\",{\"1\":{\"155\":1}}],[\"string>\",{\"1\":{\"130\":1,\"876\":1}}],[\"string好一些\",{\"1\":{\"125\":1}}],[\"stringredisserializer\",{\"1\":{\"125\":1}}],[\"stringredistemplate\",{\"0\":{\"873\":1},\"1\":{\"105\":1,\"875\":1,\"876\":3}}],[\"string\",{\"0\":{\"719\":1,\"721\":1,\"724\":2},\"1\":{\"49\":1,\"67\":1,\"97\":1,\"105\":3,\"115\":1,\"125\":1,\"128\":1,\"130\":1,\"133\":1,\"139\":2,\"157\":2,\"192\":1,\"229\":1,\"243\":1,\"249\":6,\"334\":1,\"335\":2,\"338\":1,\"339\":2,\"343\":2,\"352\":1,\"388\":2,\"402\":1,\"408\":2,\"429\":1,\"454\":1,\"480\":1,\"487\":2,\"492\":2,\"502\":1,\"511\":2,\"512\":2,\"515\":1,\"546\":1,\"587\":2,\"624\":2,\"632\":4,\"650\":1,\"658\":3,\"671\":2,\"683\":1,\"685\":2,\"686\":2,\"687\":21,\"688\":4,\"691\":7,\"720\":6,\"721\":12,\"722\":16,\"723\":12,\"724\":5,\"725\":17,\"743\":1,\"752\":1,\"762\":1,\"763\":4,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"779\":2,\"780\":4,\"849\":1,\"850\":4,\"851\":4,\"852\":6,\"872\":1,\"876\":3,\"877\":3,\"1019\":5,\"1081\":1,\"1101\":1}}],[\"strict\",{\"1\":{\"46\":1}}],[\"d+\",{\"1\":{\"1019\":1}}],[\"dhdgffkkebhmkfjojejmpbldmpobfkfo\",{\"1\":{\"1005\":1}}],[\"dploy\",{\"1\":{\"994\":1}}],[\"dverid\",{\"1\":{\"959\":2}}],[\"d1\",{\"1\":{\"959\":6}}],[\"d2\",{\"1\":{\"959\":12}}],[\"dml\",{\"1\":{\"927\":1}}],[\"dmaven\",{\"1\":{\"153\":1}}],[\"d=20\",{\"1\":{\"896\":2}}],[\"d=`date\",{\"1\":{\"787\":1,\"800\":1}}],[\"d的答案\",{\"1\":{\"849\":1}}],[\"d举手\",{\"1\":{\"849\":1}}],[\"dynamic\",{\"1\":{\"849\":1}}],[\"dlx死信路由\",{\"1\":{\"840\":1}}],[\"df\",{\"1\":{\"782\":1,\"1005\":1}}],[\"df2b\",{\"1\":{\"587\":1}}],[\"d781\",{\"1\":{\"676\":1}}],[\"d选项\",{\"1\":{\"662\":1,\"790\":1}}],[\"dkey=value设定系统属性值\",{\"1\":{\"547\":1}}],[\"d或\",{\"1\":{\"547\":1}}],[\"ds\",{\"1\":{\"1005\":2,\"1084\":1}}],[\"dspring\",{\"1\":{\"547\":1,\"548\":1}}],[\"dserver\",{\"1\":{\"547\":1}}],[\"dsl\",{\"0\":{\"272\":1},\"1\":{\"272\":3}}],[\"dsl转java书写\",{\"1\":{\"126\":1}}],[\"dtd\",{\"1\":{\"400\":3,\"464\":3}}],[\"drop\",{\"1\":{\"919\":2}}],[\"dra\",{\"1\":{\"724\":2}}],[\"driven>\",{\"1\":{\"460\":1}}],[\"driven><\",{\"1\":{\"460\":1}}],[\"driverclassname\",{\"1\":{\"462\":2,\"551\":1,\"1166\":1}}],[\"driverclassname=com\",{\"1\":{\"461\":1}}],[\"driver\",{\"1\":{\"398\":1,\"400\":2,\"461\":1,\"740\":1}}],[\"driver=com\",{\"1\":{\"398\":1}}],[\"druiddatasource\",{\"1\":{\"462\":1}}],[\"druid\",{\"1\":{\"393\":1,\"458\":1,\"462\":1,\"1012\":1,\"1081\":1}}],[\"durability\",{\"1\":{\"905\":1,\"962\":1}}],[\"during\",{\"1\":{\"893\":1}}],[\"dubbo™\",{\"1\":{\"594\":1}}],[\"dubbo\",{\"1\":{\"594\":2,\"713\":1}}],[\"dump6379\",{\"1\":{\"861\":1}}],[\"dump\",{\"1\":{\"392\":2}}],[\"duplicate\",{\"1\":{\"959\":1}}],[\"dup\",{\"1\":{\"290\":1}}],[\"d3837c925b83\",{\"1\":{\"387\":1}}],[\"dcl\",{\"0\":{\"301\":1}}],[\"ddl\",{\"1\":{\"927\":1,\"928\":3,\"929\":5}}],[\"dd\",{\"1\":{\"247\":1}}],[\"d后台运行\",{\"1\":{\"210\":1}}],[\"dank\",{\"1\":{\"1005\":1}}],[\"dash\",{\"1\":{\"996\":1}}],[\"dashboard<\",{\"1\":{\"589\":1}}],[\"day\",{\"1\":{\"951\":1,\"952\":2,\"953\":1,\"1006\":1}}],[\"dafengdeai\",{\"1\":{\"543\":1,\"1081\":1}}],[\"dao\",{\"1\":{\"229\":1,\"523\":1}}],[\"daemons\",{\"1\":{\"998\":2}}],[\"daemon\",{\"1\":{\"208\":2,\"789\":1,\"790\":1}}],[\"data为验证内容\",{\"1\":{\"1158\":1}}],[\"databinding>\",{\"1\":{\"1021\":1}}],[\"database\",{\"1\":{\"806\":1,\"1001\":1}}],[\"databaseid==\",{\"1\":{\"438\":2,\"440\":2}}],[\"databaseid\",{\"1\":{\"438\":1}}],[\"databaseid就是代表当前数据库的别名oracle\",{\"1\":{\"438\":1}}],[\"databaseid就是代表当前数据库的别名\",{\"1\":{\"438\":1}}],[\"databaseidprovider\",{\"1\":{\"400\":1}}],[\"databases\",{\"1\":{\"265\":1,\"270\":1,\"787\":1,\"800\":1}}],[\"data部分直接给值\",{\"1\":{\"878\":1}}],[\"data这三个字段\",{\"1\":{\"630\":1}}],[\"datasource自动装配mysql数据源\",{\"1\":{\"546\":1,\"1166\":1}}],[\"datasourceautoconfiguration\",{\"1\":{\"485\":1}}],[\"datasourceproperties\",{\"0\":{\"485\":1},\"1\":{\"481\":1,\"485\":1,\"551\":1,\"1166\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"462\":1}}],[\"datasource\",{\"1\":{\"462\":6,\"551\":1,\"1166\":1}}],[\"datasource>\",{\"1\":{\"400\":1}}],[\"dataform\",{\"1\":{\"237\":1}}],[\"data具体数据\",{\"1\":{\"229\":1}}],[\"dataids\",{\"1\":{\"150\":1,\"598\":1}}],[\"data\",{\"0\":{\"221\":1},\"1\":{\"123\":2,\"128\":3,\"147\":1,\"210\":2,\"213\":2,\"220\":4,\"221\":3,\"225\":1,\"226\":1,\"229\":4,\"233\":1,\"260\":1,\"267\":3,\"370\":1,\"468\":2,\"474\":1,\"598\":3,\"716\":14,\"765\":1,\"766\":1,\"768\":1,\"787\":4,\"791\":1,\"794\":2,\"796\":6,\"799\":3,\"800\":6,\"867\":1,\"871\":2,\"878\":1,\"879\":2,\"928\":1,\"985\":2,\"1001\":3,\"1010\":5,\"1158\":1}}],[\"date可以当\",{\"1\":{\"951\":1}}],[\"date学习\",{\"1\":{\"951\":1}}],[\"datediff\",{\"0\":{\"950\":1},\"1\":{\"937\":1,\"951\":2,\"952\":1}}],[\"dateformat\",{\"1\":{\"730\":2}}],[\"date\",{\"0\":{\"951\":1},\"1\":{\"48\":1,\"247\":1,\"730\":1,\"751\":6,\"752\":1,\"762\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"950\":1,\"951\":10,\"952\":5,\"953\":1,\"959\":3,\"1005\":3}}],[\"dimming\",{\"1\":{\"1005\":1}}],[\"diff\",{\"1\":{\"990\":2,\"1003\":1}}],[\"diffdate\",{\"1\":{\"951\":2}}],[\"dict\",{\"1\":{\"959\":2}}],[\"dictionary\",{\"1\":{\"802\":1,\"1155\":1}}],[\"diy\",{\"1\":{\"576\":1}}],[\"dir\",{\"1\":{\"1084\":1}}],[\"dirname\",{\"1\":{\"1005\":3}}],[\"dirty\",{\"1\":{\"905\":3}}],[\"dirs\",{\"1\":{\"540\":1}}],[\"direction\",{\"1\":{\"1006\":1}}],[\"direct\",{\"1\":{\"823\":2}}],[\"directory\",{\"1\":{\"537\":2,\"1005\":2}}],[\"directory>\",{\"1\":{\"397\":1}}],[\"directly\",{\"1\":{\"473\":1}}],[\"did\",{\"1\":{\"223\":1,\"421\":1,\"426\":2}}],[\"div>\",{\"1\":{\"220\":6,\"221\":1}}],[\"digest\",{\"1\":{\"539\":1}}],[\"digestutils类\",{\"1\":{\"132\":1}}],[\"digestutils\",{\"1\":{\"132\":2}}],[\"digital\",{\"1\":{\"219\":1}}],[\"disk=\",{\"1\":{\"1001\":1}}],[\"dispatch\",{\"1\":{\"994\":1}}],[\"dispatcherserlvet\",{\"1\":{\"543\":1}}],[\"dispatcherservlet\",{\"1\":{\"483\":1,\"619\":1}}],[\"dispatcherservlet<\",{\"1\":{\"459\":1}}],[\"display\",{\"1\":{\"220\":1,\"224\":1}}],[\"discriminator>\",{\"1\":{\"429\":2}}],[\"discuss\",{\"1\":{\"379\":1,\"380\":1,\"773\":1}}],[\"discard\",{\"1\":{\"854\":1}}],[\"discardpolicy\",{\"1\":{\"362\":1}}],[\"discardoldestpolicy\",{\"1\":{\"362\":1}}],[\"discoveryclient\",{\"1\":{\"568\":1}}],[\"discovery\",{\"0\":{\"568\":1},\"1\":{\"267\":1,\"568\":1,\"591\":1,\"597\":1}}],[\"distinct\",{\"0\":{\"946\":1},\"1\":{\"946\":1,\"949\":1,\"963\":1}}],[\"dist\",{\"1\":{\"219\":1,\"220\":4,\"221\":1}}],[\"distributed\",{\"0\":{\"1170\":1},\"1\":{\"867\":1}}],[\"distributedlock\",{\"0\":{\"78\":1},\"1\":{\"523\":1,\"851\":2}}],[\"distribute\",{\"1\":{\"115\":1}}],[\"disable\",{\"1\":{\"999\":1,\"1005\":1}}],[\"disabled\",{\"1\":{\"128\":3}}],[\"disablekeyprefix\",{\"1\":{\"125\":1}}],[\"disablecachingnullvalues\",{\"1\":{\"125\":1}}],[\"dio\",{\"1\":{\"107\":2}}],[\"dbaeumer\",{\"1\":{\"1005\":1}}],[\"dba\",{\"1\":{\"898\":1,\"901\":1,\"922\":1,\"925\":1,\"927\":1,\"928\":1}}],[\"dbfallback\",{\"1\":{\"876\":2}}],[\"dbfilename\",{\"1\":{\"861\":1}}],[\"db消息状态为已抵达\",{\"1\":{\"846\":1}}],[\"dbconfig\",{\"0\":{\"461\":1},\"1\":{\"462\":1}}],[\"dbcp\",{\"1\":{\"393\":1}}],[\"db慢\",{\"1\":{\"173\":1}}],[\"db\",{\"1\":{\"102\":3,\"229\":1,\"908\":3,\"1079\":1}}],[\"dnh\",{\"1\":{\"133\":2}}],[\"dns污染是一种恶意行为\",{\"1\":{\"77\":1}}],[\"dns服务器吗\",{\"1\":{\"76\":1}}],[\"dns\",{\"1\":{\"76\":5,\"688\":1,\"981\":3,\"1041\":2}}],[\"dnt\",{\"1\":{\"47\":1}}],[\"d\",{\"1\":{\"62\":1,\"71\":1,\"72\":1,\"210\":1,\"213\":1,\"267\":2,\"302\":1,\"399\":1,\"421\":5,\"426\":6,\"427\":1,\"437\":1,\"440\":1,\"463\":1,\"547\":1,\"671\":1,\"685\":1,\"721\":1,\"782\":1,\"787\":6,\"790\":2,\"791\":1,\"794\":1,\"795\":5,\"796\":2,\"800\":5,\"810\":3,\"825\":1,\"849\":1,\"896\":1,\"925\":7,\"959\":2,\"962\":1,\"999\":1,\"1001\":1,\"1005\":5,\"1022\":2,\"1038\":1,\"1041\":2}}],[\"deepl\",{\"1\":{\"1005\":1}}],[\"deeplx\",{\"1\":{\"1005\":1}}],[\"deno\",{\"1\":{\"1003\":1}}],[\"denied\",{\"1\":{\"893\":1,\"897\":1}}],[\"deadlock\",{\"1\":{\"932\":3}}],[\"demand\",{\"1\":{\"894\":1}}],[\"demo8路径下测试类\",{\"1\":{\"531\":1}}],[\"demo7路径下测试类\",{\"1\":{\"531\":1}}],[\"demo7\",{\"1\":{\"531\":1}}],[\"demo来查看执行原理\",{\"1\":{\"388\":1}}],[\"demo\",{\"1\":{\"388\":11,\"492\":1,\"506\":1,\"547\":1,\"548\":1}}],[\"democontroller\",{\"1\":{\"124\":1}}],[\"democonfiguration\",{\"1\":{\"124\":2}}],[\"debian\",{\"1\":{\"784\":2}}],[\"debug走到一步\",{\"1\":{\"543\":1,\"1081\":1}}],[\"debug\",{\"1\":{\"124\":1,\"229\":1,\"523\":2,\"725\":1,\"837\":1}}],[\"deque\",{\"1\":{\"641\":1}}],[\"decorator\",{\"1\":{\"640\":1}}],[\"detail\",{\"1\":{\"883\":1}}],[\"details\",{\"1\":{\"105\":1,\"238\":1,\"348\":1,\"398\":1,\"691\":1,\"865\":1,\"959\":1}}],[\"detect\",{\"1\":{\"483\":1,\"932\":3}}],[\"depositcollecthead\",{\"1\":{\"1021\":1}}],[\"deployment\",{\"1\":{\"994\":1}}],[\"deploy\",{\"1\":{\"473\":1}}],[\"departmentmapper\",{\"1\":{\"423\":1,\"427\":3,\"429\":1}}],[\"departmentname\",{\"1\":{\"421\":1,\"422\":2,\"426\":1,\"427\":1,\"429\":1}}],[\"department\",{\"1\":{\"421\":1,\"422\":2,\"426\":1,\"427\":3,\"429\":1}}],[\"deptbyidstep\",{\"1\":{\"427\":3}}],[\"deptid\",{\"1\":{\"427\":2}}],[\"deptid=id\",{\"1\":{\"427\":1,\"428\":1}}],[\"dept\",{\"1\":{\"421\":6,\"422\":5,\"423\":1,\"426\":4,\"427\":3,\"429\":3,\"437\":2}}],[\"dependencies里面规定当前依赖的版本\",{\"1\":{\"476\":1}}],[\"dependencies\",{\"1\":{\"473\":1,\"546\":1,\"994\":1,\"1166\":1}}],[\"dependencies>\",{\"1\":{\"458\":1,\"556\":1}}],[\"dependencies<\",{\"1\":{\"238\":2,\"476\":1,\"556\":1}}],[\"dependencymanagement里只是声明依赖\",{\"1\":{\"556\":1}}],[\"dependencymanagement\",{\"0\":{\"556\":1},\"1\":{\"556\":1}}],[\"dependencymanagement>\",{\"1\":{\"238\":1,\"556\":1}}],[\"dependency\",{\"0\":{\"1012\":1},\"1\":{\"477\":1}}],[\"dependency>\",{\"1\":{\"105\":1,\"238\":2,\"242\":1,\"397\":5,\"458\":14,\"477\":1,\"492\":1,\"546\":2,\"556\":3,\"589\":1,\"594\":1,\"828\":1,\"1010\":3}}],[\"desktop\",{\"1\":{\"785\":1,\"1003\":1,\"1006\":1}}],[\"design\",{\"1\":{\"494\":1,\"728\":1,\"731\":1}}],[\"designed\",{\"1\":{\"272\":1}}],[\"desc\",{\"0\":{\"946\":1},\"1\":{\"492\":1,\"949\":1,\"959\":1}}],[\"description\",{\"1\":{\"386\":1,\"985\":1,\"1103\":1}}],[\"destination\",{\"1\":{\"816\":1}}],[\"destroy\",{\"1\":{\"489\":2}}],[\"destroy调用自定义销毁的方法\",{\"1\":{\"489\":1}}],[\"destroyed\",{\"1\":{\"225\":1}}],[\"destroysingleton\",{\"1\":{\"124\":1}}],[\"dest\",{\"1\":{\"47\":1}}],[\"devutils\",{\"1\":{\"1003\":1}}],[\"devops的核心实践之一是持续集成\",{\"1\":{\"994\":1}}],[\"devserver\",{\"1\":{\"883\":1}}],[\"devsuite\",{\"1\":{\"787\":1}}],[\"devsuite命令时\",{\"1\":{\"787\":1}}],[\"devsuite会报以下错误zsh\",{\"1\":{\"787\":1}}],[\"dev命令启动开发服务器时\",{\"1\":{\"881\":1}}],[\"dev\",{\"1\":{\"215\":1,\"219\":1,\"222\":1,\"229\":1,\"543\":1,\"598\":2,\"782\":1,\"784\":6,\"787\":3,\"801\":1,\"880\":2,\"882\":1,\"883\":1,\"884\":1,\"994\":1,\"1005\":3,\"1013\":2}}],[\"development文件的配置\",{\"1\":{\"881\":1}}],[\"development\",{\"0\":{\"881\":1},\"1\":{\"136\":1,\"400\":2,\"881\":1,\"1007\":1}}],[\"developers\",{\"1\":{\"136\":1}}],[\"delay\",{\"1\":{\"844\":2,\"1005\":2,\"1006\":1}}],[\"delete\",{\"1\":{\"165\":1,\"183\":1,\"607\":1,\"933\":6,\"938\":1,\"941\":2,\"942\":1,\"943\":1}}],[\"del\",{\"1\":{\"87\":1,\"851\":1,\"1005\":1}}],[\"deliverytag\",{\"1\":{\"837\":2}}],[\"delivery\",{\"1\":{\"77\":1,\"823\":1}}],[\"definition\",{\"1\":{\"929\":1}}],[\"defintion\",{\"1\":{\"547\":1}}],[\"def\",{\"1\":{\"540\":2,\"1084\":1}}],[\"defaults\",{\"1\":{\"998\":2,\"1005\":2,\"1006\":1}}],[\"defaultsqlsession\",{\"1\":{\"465\":3}}],[\"default方法\",{\"1\":{\"686\":1}}],[\"defaultzone\",{\"1\":{\"591\":1}}],[\"defaultfallback\",{\"1\":{\"584\":1}}],[\"defaultproperties\",{\"1\":{\"584\":1}}],[\"default=\",{\"1\":{\"400\":1}}],[\"defaultthreadfactory\",{\"1\":{\"363\":1}}],[\"defaultmessage\",{\"1\":{\"240\":1}}],[\"defaultcacheconfig\",{\"1\":{\"125\":1}}],[\"defaultlistablebeanfactory\",{\"1\":{\"124\":5}}],[\"default\",{\"1\":{\"69\":1,\"211\":2,\"229\":1,\"241\":1,\"242\":1,\"243\":1,\"460\":3,\"543\":8,\"668\":1,\"669\":1,\"686\":2,\"703\":2,\"747\":1,\"795\":1,\"805\":1,\"906\":1,\"921\":2,\"922\":4,\"934\":1,\"1005\":2,\"1006\":1,\"1081\":1}}],[\"deflater\",{\"1\":{\"1081\":7,\"1084\":2}}],[\"deflaterutils\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"deflate\",{\"1\":{\"47\":1,\"1081\":2,\"1084\":1}}],[\"done\",{\"1\":{\"1005\":3}}],[\"don\",{\"1\":{\"961\":1}}],[\"dofilterinternal\",{\"1\":{\"890\":1}}],[\"doseckill\",{\"1\":{\"857\":1}}],[\"door\",{\"1\":{\"678\":4}}],[\"down\",{\"1\":{\"1005\":2}}],[\"downie\",{\"1\":{\"1003\":1}}],[\"download\",{\"1\":{\"522\":1,\"1012\":1}}],[\"down=\",{\"1\":{\"220\":1}}],[\"doaround\",{\"1\":{\"492\":1,\"496\":1,\"1081\":1}}],[\"doafter\",{\"1\":{\"492\":1}}],[\"dobefore\",{\"1\":{\"492\":1,\"495\":1,\"887\":1}}],[\"dog\",{\"1\":{\"281\":1}}],[\"doew\",{\"1\":{\"271\":1}}],[\"does\",{\"1\":{\"60\":1}}],[\"domain\",{\"1\":{\"272\":1,\"1005\":2}}],[\"dom\",{\"1\":{\"218\":3}}],[\"doubletointfunction\",{\"1\":{\"770\":1}}],[\"doubletolongfunction\",{\"1\":{\"770\":1}}],[\"doublefunction<r>\",{\"1\":{\"770\":1}}],[\"doubleconsumer\",{\"1\":{\"770\":1}}],[\"doublepredicate\",{\"1\":{\"770\":1}}],[\"double\",{\"0\":{\"301\":1},\"1\":{\"171\":1,\"283\":1,\"685\":3,\"686\":1,\"702\":1,\"770\":7,\"779\":1,\"998\":1,\"1006\":1}}],[\"docket\",{\"1\":{\"1097\":3}}],[\"dockerfile\",{\"1\":{\"796\":2}}],[\"docker容器\",{\"1\":{\"210\":1,\"789\":1}}],[\"docker容器内部\",{\"1\":{\"210\":1}}],[\"dockerhub\",{\"1\":{\"208\":1}}],[\"docker\",{\"0\":{\"266\":1,\"788\":1},\"1\":{\"208\":5,\"210\":10,\"211\":4,\"212\":4,\"213\":4,\"267\":6,\"787\":1,\"789\":8,\"790\":3,\"791\":3,\"794\":3,\"795\":3,\"796\":8,\"800\":1,\"825\":3,\"994\":1,\"1001\":3,\"1003\":1}}],[\"docs表示启动当前目录下的docs目录\",{\"1\":{\"1161\":1}}],[\"docsify\",{\"1\":{\"1161\":7}}],[\"docsify快速部署优美的在线文档\",{\"0\":{\"1161\":1}}],[\"docs\",{\"1\":{\"477\":2,\"567\":2}}],[\"doctype\",{\"1\":{\"220\":1,\"400\":1,\"464\":1}}],[\"doc\",{\"1\":{\"136\":1,\"271\":2,\"1097\":1}}],[\"documented\",{\"1\":{\"492\":1}}],[\"documents\",{\"1\":{\"73\":2,\"1001\":1,\"1004\":1,\"1005\":5,\"1006\":1}}],[\"document\",{\"1\":{\"47\":1,\"265\":1}}],[\"doh\",{\"1\":{\"76\":1}}],[\"do\",{\"1\":{\"47\":1,\"1005\":3,\"1085\":4}}],[\"客户端再次发送请求的话\",{\"1\":{\"893\":1}}],[\"客户端如果太长时间没动静\",{\"1\":{\"893\":1}}],[\"客户端可以使用新的访问令牌继续进行后续请求\",{\"1\":{\"890\":1}}],[\"客户端可以使用新的令牌继续进行后续请求\",{\"1\":{\"890\":1}}],[\"客户端可以根据错误响应中的提示信息\",{\"1\":{\"890\":1}}],[\"客户端可以处理的编码方式\",{\"1\":{\"47\":1}}],[\"客户端可以处理的内容类型\",{\"1\":{\"47\":1}}],[\"客户端服务器\",{\"1\":{\"713\":1}}],[\"客户端则是通过指定的配置中心来管理应用资源\",{\"1\":{\"591\":1}}],[\"客户端去调用服务端\",{\"1\":{\"585\":1}}],[\"客户端只等1秒钟\",{\"1\":{\"577\":1}}],[\"客户端所有请求都会交给nginx\",{\"1\":{\"573\":1}}],[\"客户端的软件负载均衡算法和服务调用\",{\"1\":{\"573\":1}}],[\"客户端负载均衡的工具\",{\"1\":{\"573\":1}}],[\"客户端是\",{\"1\":{\"136\":1}}],[\"客户端库用于解决分布式环境中的线程并发访问问题\",{\"1\":{\"78\":1}}],[\"客户端\",{\"1\":{\"72\":1,\"112\":1,\"228\":1,\"688\":1}}],[\"客户端请求到香港的一台服务器\",{\"1\":{\"72\":1,\"809\":1}}],[\"客户端请求时\",{\"1\":{\"47\":1}}],[\"客户端存储token\",{\"1\":{\"54\":1}}],[\"客户端对cookie进行解析\",{\"1\":{\"52\":1}}],[\"客户端被请求保存\",{\"1\":{\"49\":1}}],[\"客户端与服务器之间的联系是离散的\",{\"1\":{\"49\":1}}],[\"effevtive\",{\"1\":{\"1150\":1}}],[\"effects\",{\"1\":{\"1005\":1}}],[\"eclipse\",{\"1\":{\"1150\":1}}],[\"eco\",{\"1\":{\"1078\":2}}],[\"echo\",{\"1\":{\"267\":1,\"782\":3,\"787\":1,\"994\":1,\"1005\":2,\"1038\":1}}],[\"eject\",{\"1\":{\"1005\":1}}],[\"eula=1\",{\"1\":{\"1001\":1}}],[\"eureka7001\",{\"1\":{\"591\":1}}],[\"eureka要建个springboot\",{\"1\":{\"570\":1}}],[\"eurekaserver不会立刻将eurekaclient服务剔除\",{\"1\":{\"569\":1}}],[\"eureka不会立刻清理\",{\"1\":{\"569\":1}}],[\"eureka自我保护理论知识\",{\"0\":{\"569\":1}}],[\"eureka采用了cs的设计架构\",{\"1\":{\"564\":1}}],[\"eureka\",{\"0\":{\"565\":1,\"595\":1},\"1\":{\"561\":1,\"564\":2,\"565\":3,\"566\":1,\"568\":1,\"570\":3,\"572\":1,\"574\":2,\"589\":1,\"591\":3,\"594\":2}}],[\"eureka包含两个组件\",{\"1\":{\"561\":1}}],[\"e1\",{\"1\":{\"939\":2}}],[\"ee容器\",{\"1\":{\"1012\":1}}],[\"ee容器中提供\",{\"1\":{\"1012\":1}}],[\"ee容器的实现\",{\"1\":{\"1012\":1}}],[\"ee的web应用程序\",{\"1\":{\"1012\":1}}],[\"ee=\",{\"1\":{\"1005\":1}}],[\"ee\",{\"1\":{\"921\":1}}],[\"e|grep\",{\"1\":{\"782\":1}}],[\"e>\",{\"1\":{\"767\":1}}],[\"epoll等\",{\"1\":{\"849\":1}}],[\"epoll\",{\"1\":{\"712\":2}}],[\"e=next\",{\"1\":{\"693\":1}}],[\"e3\",{\"1\":{\"688\":1}}],[\"e2\",{\"1\":{\"688\":1,\"939\":1}}],[\"ers\",{\"1\":{\"1020\":1}}],[\"er\",{\"1\":{\"1020\":1}}],[\"erlang发现\",{\"1\":{\"825\":1}}],[\"err\",{\"1\":{\"784\":1}}],[\"errorlens\",{\"1\":{\"1005\":1}}],[\"errorthresholdpercentage\",{\"1\":{\"586\":1}}],[\"error\",{\"1\":{\"233\":2,\"239\":1,\"503\":1,\"520\":2,\"625\":1,\"706\":1,\"895\":3,\"897\":1,\"938\":1,\"959\":1,\"981\":1,\"987\":1,\"1005\":1}}],[\"errors\",{\"1\":{\"130\":3}}],[\"erp通过xml\",{\"1\":{\"612\":1}}],[\"eagle\",{\"1\":{\"1003\":1,\"1004\":1,\"1005\":3}}],[\"eager\",{\"1\":{\"428\":1}}],[\"earlysingletonobjects\",{\"1\":{\"543\":1}}],[\"easydict\",{\"1\":{\"996\":1}}],[\"easy\",{\"1\":{\"473\":1}}],[\"ehcache\",{\"1\":{\"448\":1,\"451\":1}}],[\"ehcachecache\",{\"1\":{\"122\":1,\"448\":1,\"451\":1}}],[\"eid\",{\"1\":{\"426\":3}}],[\"ed25519\",{\"1\":{\"1005\":1}}],[\"edit\",{\"1\":{\"537\":1}}],[\"eden区通过复制\",{\"1\":{\"385\":1}}],[\"eden区和survivor0\",{\"1\":{\"383\":1,\"385\":1}}],[\"eden\",{\"1\":{\"385\":4}}],[\"edge\",{\"1\":{\"76\":1,\"1001\":2}}],[\"equals\",{\"0\":{\"690\":1},\"1\":{\"688\":3,\"690\":1,\"776\":1,\"851\":1}}],[\"equivalent\",{\"1\":{\"317\":1}}],[\"equiv=\",{\"1\":{\"63\":1,\"220\":1}}],[\"eq\",{\"1\":{\"236\":1,\"624\":1}}],[\"emoji\",{\"1\":{\"1037\":1}}],[\"emp\",{\"1\":{\"437\":10}}],[\"emps\",{\"0\":{\"426\":1},\"1\":{\"426\":1,\"427\":1,\"428\":1,\"437\":4}}],[\"empbyid1\",{\"1\":{\"443\":3,\"447\":1}}],[\"empbyidstep\",{\"1\":{\"429\":2}}],[\"empbyid\",{\"1\":{\"419\":2,\"443\":3,\"447\":1}}],[\"employees\",{\"1\":{\"438\":1,\"440\":1,\"939\":1}}],[\"employeemapperdynamicsql\",{\"1\":{\"430\":2,\"436\":2}}],[\"employeemapperplus\",{\"1\":{\"419\":2,\"427\":2,\"428\":1,\"429\":4,\"443\":2,\"447\":4}}],[\"employee==>dept\",{\"1\":{\"424\":1}}],[\"employee===department\",{\"1\":{\"421\":1}}],[\"employee\",{\"1\":{\"411\":1,\"419\":4,\"421\":2,\"422\":1,\"423\":2,\"426\":2,\"427\":2,\"429\":5,\"430\":7,\"431\":1,\"432\":2,\"433\":2,\"434\":2,\"436\":2,\"437\":2,\"438\":4,\"440\":1,\"443\":2,\"447\":2,\"686\":1,\"939\":1,\"949\":1}}],[\"empty\",{\"1\":{\"247\":1}}],[\"emailevent\",{\"1\":{\"543\":2,\"1081\":2}}],[\"email=\",{\"1\":{\"430\":2,\"431\":1,\"432\":1,\"434\":2}}],[\"email\",{\"1\":{\"404\":2,\"419\":2,\"422\":2,\"426\":4,\"429\":3,\"430\":3,\"432\":3,\"433\":3,\"434\":4,\"437\":3,\"440\":2,\"941\":4,\"942\":2,\"943\":1,\"986\":2,\"1005\":3}}],[\"emitwarning\",{\"1\":{\"229\":1}}],[\"embed\",{\"1\":{\"140\":3,\"473\":1}}],[\"el7\",{\"1\":{\"801\":2}}],[\"elect\",{\"1\":{\"895\":2}}],[\"ele=it\",{\"1\":{\"768\":1}}],[\"ele\",{\"1\":{\"767\":3,\"768\":2,\"771\":1}}],[\"elem\",{\"1\":{\"715\":2}}],[\"elements\",{\"1\":{\"1003\":1,\"1005\":2}}],[\"elementtype\",{\"1\":{\"492\":1}}],[\"elementui\",{\"1\":{\"223\":2}}],[\"element\",{\"0\":{\"223\":1,\"248\":1},\"1\":{\"223\":6,\"400\":1,\"1005\":1}}],[\"elk\",{\"0\":{\"735\":1,\"736\":1},\"1\":{\"735\":1,\"736\":5}}],[\"elastic\",{\"1\":{\"262\":1,\"735\":1}}],[\"elasticsearch是建立在lucene之上的分布式搜索和分析引擎\",{\"1\":{\"1084\":1}}],[\"elasticsearch提供了一个可以执行查询的json风格的dsl\",{\"1\":{\"272\":1}}],[\"elasticsearch默认也会对你的数据进行分片和副本操作\",{\"1\":{\"265\":1}}],[\"elasticsearch本身就是分布式的\",{\"1\":{\"265\":1}}],[\"elasticsearch也是基于lucene的全文检索库\",{\"1\":{\"265\":1}}],[\"elasticsearch\",{\"0\":{\"262\":1,\"263\":1},\"1\":{\"262\":1,\"267\":17,\"713\":1,\"736\":7,\"786\":2}}],[\"el\",{\"1\":{\"220\":4,\"221\":1}}],[\"else\",{\"1\":{\"88\":1,\"128\":2,\"220\":3,\"241\":1,\"766\":1,\"948\":1,\"955\":1,\"959\":2}}],[\"elseif条件\",{\"1\":{\"88\":1}}],[\"e\",{\"1\":{\"210\":2,\"215\":1,\"240\":3,\"267\":4,\"338\":4,\"339\":2,\"342\":2,\"343\":2,\"352\":6,\"402\":2,\"421\":2,\"426\":5,\"439\":1,\"503\":2,\"580\":1,\"632\":2,\"686\":2,\"687\":1,\"688\":1,\"721\":1,\"779\":2,\"782\":1,\"791\":1,\"796\":2,\"799\":1,\"837\":1,\"846\":1,\"851\":1,\"985\":1,\"1001\":4,\"1020\":1}}],[\"e设置mysql参数\",{\"1\":{\"210\":1}}],[\"eof\",{\"1\":{\"208\":2,\"1005\":1}}],[\"everyone\",{\"1\":{\"1041\":1}}],[\"everything\",{\"1\":{\"996\":1}}],[\"event包下的类\",{\"1\":{\"665\":1}}],[\"eventual\",{\"1\":{\"572\":1}}],[\"event\",{\"1\":{\"543\":3,\"665\":1,\"846\":1,\"1081\":3}}],[\"eventpublisher\",{\"1\":{\"543\":2,\"1081\":2}}],[\"eventlistener注解\",{\"1\":{\"543\":1,\"1081\":1}}],[\"eventlistener\",{\"0\":{\"1081\":1},\"1\":{\"543\":2,\"1081\":2}}],[\"even\",{\"1\":{\"362\":1}}],[\"eviction\",{\"1\":{\"448\":1}}],[\"eviction=\",{\"1\":{\"448\":1}}],[\"evict\",{\"1\":{\"123\":1}}],[\"eval\",{\"1\":{\"88\":1,\"89\":1,\"1005\":2}}],[\"esbenp\",{\"1\":{\"1005\":1}}],[\"esc如果您打开的窗口超过三个\",{\"1\":{\"1036\":1}}],[\"esc\",{\"1\":{\"1005\":1}}],[\"espanso\",{\"1\":{\"996\":1,\"1003\":1,\"1004\":1,\"1005\":3,\"1037\":1}}],[\"es我这里学的非常模糊\",{\"1\":{\"263\":1}}],[\"es的内存分配不要128mb\",{\"1\":{\"261\":1}}],[\"establishment\",{\"1\":{\"260\":1}}],[\"eslint\",{\"1\":{\"229\":2,\"1005\":1}}],[\"es6\",{\"0\":{\"216\":1},\"1\":{\"215\":1,\"216\":1}}],[\"es\",{\"0\":{\"266\":1},\"1\":{\"92\":1,\"265\":2,\"267\":4,\"268\":1,\"270\":1,\"282\":3}}],[\"etcd实现\",{\"1\":{\"87\":1}}],[\"etc\",{\"1\":{\"71\":1,\"206\":1,\"208\":2,\"210\":2,\"211\":1,\"213\":2,\"216\":1,\"240\":1,\"789\":1,\"791\":1,\"794\":1,\"795\":3,\"800\":3,\"805\":1,\"810\":4,\"865\":1,\"1005\":2}}],[\"eyjsb2dpbl91c2vyx2tlesi6imi1ownlotuylwqwotctngnmoc1hyzywltu1mzdlotbhndg5zsj9\",{\"1\":{\"68\":1}}],[\"eyjhbgcioijiuzuxmij9\",{\"1\":{\"68\":1}}],[\"exit\",{\"1\":{\"790\":1}}],[\"exists\",{\"1\":{\"959\":5}}],[\"exist=false\",{\"1\":{\"229\":1}}],[\"exist\",{\"1\":{\"87\":1,\"247\":1,\"1084\":1}}],[\"examined\",{\"1\":{\"897\":2}}],[\"exam4\",{\"1\":{\"780\":1}}],[\"example\",{\"0\":{\"293\":1,\"295\":1,\"516\":2},\"1\":{\"60\":3,\"71\":1,\"73\":4,\"400\":3,\"402\":1,\"403\":1,\"404\":1,\"423\":1,\"427\":2,\"428\":1,\"429\":3,\"430\":1,\"436\":1,\"460\":1,\"462\":4,\"464\":1,\"481\":1,\"489\":3,\"509\":1,\"517\":1,\"523\":1,\"587\":1,\"688\":1,\"691\":4}}],[\"exe能做成服务\",{\"1\":{\"1041\":1}}],[\"exe变成服务启动不了\",{\"1\":{\"1041\":1}}],[\"exercise5\",{\"1\":{\"769\":1}}],[\"exercise4\",{\"1\":{\"768\":1}}],[\"exercise3\",{\"1\":{\"767\":1}}],[\"exercise2\",{\"1\":{\"766\":1}}],[\"exercise1\",{\"1\":{\"765\":1}}],[\"exercise\",{\"1\":{\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1}}],[\"exe\",{\"0\":{\"701\":1},\"1\":{\"1041\":1}}],[\"exe可以执行js文件\",{\"1\":{\"688\":1}}],[\"exe命令对某个字节码文件进行解释运行\",{\"1\":{\"688\":1}}],[\"exe命令以后\",{\"1\":{\"688\":1}}],[\"execution\",{\"1\":{\"362\":1,\"462\":1,\"650\":1,\"908\":1}}],[\"executortype\",{\"1\":{\"462\":1}}],[\"executor\",{\"1\":{\"359\":1,\"362\":1,\"371\":1,\"465\":2}}],[\"executors\",{\"0\":{\"361\":1,\"365\":1,\"366\":1},\"1\":{\"359\":2,\"360\":1,\"361\":1,\"363\":1,\"366\":2,\"374\":1}}],[\"executorservice\",{\"1\":{\"357\":1,\"359\":1,\"361\":1,\"374\":1}}],[\"executeanddecode\",{\"1\":{\"580\":2}}],[\"executed\",{\"1\":{\"362\":1}}],[\"execute是上文注解过的实例名称\",{\"1\":{\"124\":1}}],[\"execute是我逻辑中需要的类\",{\"1\":{\"124\":1}}],[\"execute\",{\"1\":{\"85\":1,\"124\":11,\"202\":1,\"361\":2,\"362\":1}}],[\"exec\",{\"1\":{\"85\":2,\"210\":2,\"211\":1,\"212\":4,\"213\":1,\"787\":1,\"790\":1,\"791\":1,\"794\":1,\"800\":1,\"854\":1}}],[\"extract\",{\"1\":{\"1005\":1}}],[\"ext=$\",{\"1\":{\"1005\":1}}],[\"ext\",{\"1\":{\"540\":3,\"598\":10,\"800\":1,\"1005\":1}}],[\"extension指定\",{\"1\":{\"543\":1}}],[\"extensions\",{\"1\":{\"540\":2}}],[\"extension\",{\"1\":{\"382\":1,\"543\":1,\"597\":2,\"679\":1,\"1005\":1}}],[\"extends\",{\"1\":{\"69\":1,\"229\":3,\"250\":1,\"252\":1,\"658\":1,\"674\":1,\"686\":1,\"688\":3,\"691\":2,\"715\":4,\"716\":1,\"890\":1}}],[\"externalized\",{\"1\":{\"473\":1}}],[\"external\",{\"1\":{\"268\":1}}],[\"expert\",{\"1\":{\"1003\":1}}],[\"explorer\",{\"0\":{\"1041\":1},\"1\":{\"990\":1}}],[\"explain\",{\"1\":{\"897\":1}}],[\"expr3\",{\"0\":{\"940\":2}}],[\"expr2\",{\"0\":{\"940\":2}}],[\"expr1\",{\"0\":{\"940\":3}}],[\"expressions\",{\"1\":{\"959\":1}}],[\"expression=\",{\"1\":{\"460\":1,\"462\":2}}],[\"expression\",{\"0\":{\"1015\":1},\"1\":{\"430\":1}}],[\"expiration\",{\"1\":{\"849\":1}}],[\"expire\",{\"1\":{\"87\":2,\"110\":1,\"852\":2}}],[\"expiretime\",{\"1\":{\"67\":2,\"867\":1}}],[\"expandedkey\",{\"1\":{\"229\":1}}],[\"expose\",{\"1\":{\"796\":1}}],[\"exposeproxy=true\",{\"1\":{\"179\":2}}],[\"exposure\",{\"1\":{\"600\":1}}],[\"exposing\",{\"1\":{\"567\":1}}],[\"export\",{\"1\":{\"782\":4,\"800\":3,\"1003\":1,\"1005\":6,\"1080\":1}}],[\"export不仅可以导出对象\",{\"1\":{\"217\":1}}],[\"export命令用于规定模块的对外接口\",{\"1\":{\"217\":1}}],[\"export和import\",{\"1\":{\"217\":1}}],[\"exclusive\",{\"1\":{\"906\":1}}],[\"exclude\",{\"1\":{\"462\":1,\"506\":1}}],[\"excange\",{\"1\":{\"835\":1}}],[\"exchange都会自动创建\",{\"1\":{\"829\":1}}],[\"exchange和queue都有自己的名字通过routing\",{\"1\":{\"823\":1}}],[\"exchange有4种类型\",{\"1\":{\"823\":1}}],[\"exchange\",{\"1\":{\"823\":2,\"828\":1,\"829\":2,\"835\":1,\"836\":3,\"846\":1}}],[\"exceeded\",{\"1\":{\"1085\":1}}],[\"excess\",{\"1\":{\"362\":1}}],[\"exceptiontranslationfilter\",{\"1\":{\"619\":1}}],[\"exceptionally\",{\"1\":{\"374\":1}}],[\"exception异常\",{\"1\":{\"240\":1}}],[\"exceptionhandler\",{\"1\":{\"240\":2,\"503\":1,\"520\":3,\"729\":1}}],[\"exception\",{\"0\":{\"373\":1,\"374\":1},\"1\":{\"157\":3,\"240\":3,\"339\":1,\"352\":3,\"374\":1,\"503\":2,\"686\":9,\"837\":1,\"846\":1}}],[\"excute是我自己逻辑中的类\",{\"1\":{\"124\":1}}],[\"ex\",{\"1\":{\"87\":2,\"157\":1,\"520\":1,\"687\":6,\"691\":9}}],[\"e5\",{\"1\":{\"47\":1}}],[\"e67884e45c464d418284441ab707b7b6\",{\"1\":{\"878\":1}}],[\"e6\",{\"1\":{\"47\":2}}],[\"e8\",{\"1\":{\"47\":1}}],[\"en1\",{\"1\":{\"1005\":1}}],[\"en0\",{\"1\":{\"1005\":2}}],[\"engine=innodb\",{\"1\":{\"905\":1,\"917\":1,\"919\":1,\"921\":1,\"922\":1,\"925\":1,\"934\":1}}],[\"engine=memory\",{\"1\":{\"892\":1}}],[\"ensurecapacityinternal\",{\"1\":{\"720\":1}}],[\"enum类型\",{\"1\":{\"671\":1}}],[\"enum\",{\"1\":{\"671\":1,\"779\":1}}],[\"env\",{\"0\":{\"881\":1},\"1\":{\"796\":3,\"880\":2,\"881\":2,\"883\":2}}],[\"environment>\",{\"1\":{\"400\":1}}],[\"environments>\",{\"1\":{\"400\":1}}],[\"environments\",{\"1\":{\"400\":1}}],[\"environment\",{\"0\":{\"549\":1},\"1\":{\"256\":1,\"522\":1,\"546\":1,\"549\":2,\"800\":1,\"1080\":2}}],[\"envelope\",{\"1\":{\"219\":1}}],[\"enforce\",{\"1\":{\"229\":1}}],[\"enablerabbit\",{\"1\":{\"828\":1}}],[\"enablerabbit开启支持\",{\"1\":{\"820\":1}}],[\"enableredishttpsession导入redishttpsessionconfiguration配置\",{\"1\":{\"152\":1}}],[\"enableredishttpsession\",{\"1\":{\"147\":1}}],[\"enablejms\",{\"1\":{\"820\":1}}],[\"enable\",{\"1\":{\"810\":1,\"959\":2,\"1005\":1}}],[\"enableglobalmethodsecurity\",{\"1\":{\"629\":1}}],[\"enablefeignclients\",{\"1\":{\"576\":2}}],[\"enableeurekaclient\",{\"1\":{\"568\":1}}],[\"enabled>\",{\"1\":{\"1013\":1}}],[\"enablediscoveryclient\",{\"1\":{\"568\":1,\"595\":1}}],[\"enabled\",{\"1\":{\"539\":2,\"586\":1,\"591\":1}}],[\"enableautoconfiguration这样一个注解\",{\"1\":{\"731\":1}}],[\"enableautoconfiguration\",{\"1\":{\"478\":1}}],[\"enableasync\",{\"1\":{\"202\":2,\"543\":1,\"1081\":1}}],[\"enableaspectjautoproxy\",{\"1\":{\"179\":2}}],[\"enablescheduling\",{\"1\":{\"202\":2,\"730\":2}}],[\"enablecircuitbreaker\",{\"1\":{\"583\":1}}],[\"enableconfigurationproperties才可以注入到容器\",{\"1\":{\"507\":1}}],[\"enableconfigurationproperties\",{\"1\":{\"125\":1}}],[\"enablecaching\",{\"1\":{\"123\":1,\"125\":1}}],[\"encode\",{\"1\":{\"133\":1}}],[\"encoder\",{\"1\":{\"133\":4}}],[\"encoding=\",{\"1\":{\"400\":1,\"459\":1,\"460\":1,\"462\":1,\"464\":1}}],[\"encoding\",{\"1\":{\"47\":1,\"48\":1,\"60\":1}}],[\"entrypoint\",{\"1\":{\"796\":1}}],[\"entry\",{\"0\":{\"1044\":1},\"1\":{\"688\":1,\"883\":1}}],[\"entry也是用set存\",{\"1\":{\"688\":1}}],[\"entry<k\",{\"1\":{\"688\":1}}],[\"entry=servermode\",{\"1\":{\"594\":1}}],[\"entryttl\",{\"1\":{\"125\":1}}],[\"entities\",{\"1\":{\"229\":3}}],[\"entity02\",{\"1\":{\"831\":1}}],[\"entity01\",{\"1\":{\"831\":1}}],[\"entity\",{\"0\":{\"1074\":1},\"1\":{\"229\":9,\"240\":1,\"251\":1}}],[\"entityutils\",{\"1\":{\"139\":2}}],[\"enter\",{\"0\":{\"1070\":1},\"1\":{\"62\":2,\"646\":1,\"1005\":1}}],[\"end+++\",{\"1\":{\"1096\":1}}],[\"endpoint=\",{\"1\":{\"1084\":1}}],[\"endpoint是算filters\",{\"1\":{\"613\":1}}],[\"endpoint\",{\"1\":{\"613\":1}}],[\"endpoints\",{\"1\":{\"567\":1,\"600\":1}}],[\"end===========================================\",{\"1\":{\"492\":1}}],[\"end\",{\"1\":{\"88\":1,\"374\":1,\"948\":1,\"955\":1,\"959\":3,\"1005\":3}}],[\"en\",{\"1\":{\"47\":1,\"220\":1,\"400\":1,\"464\":1}}],[\"enhance\",{\"1\":{\"13\":1}}],[\"nn\",{\"1\":{\"1074\":1}}],[\"nvm\",{\"1\":{\"1003\":1,\"1005\":5}}],[\"n2\",{\"1\":{\"914\":2,\"915\":1,\"916\":1}}],[\"n+1\",{\"1\":{\"900\":1}}],[\"n++这条命令\",{\"1\":{\"290\":1}}],[\"n++\",{\"1\":{\"290\":1}}],[\"nroutingkey\",{\"1\":{\"836\":1}}],[\"nreplytext\",{\"1\":{\"836\":1}}],[\"nreplycode\",{\"1\":{\"836\":1}}],[\"nmessage\",{\"1\":{\"836\":1}}],[\"ncause\",{\"1\":{\"836\":1}}],[\"ncorrelationdata\",{\"1\":{\"836\":1}}],[\"n个括号\",{\"0\":{\"1047\":1}}],[\"n个\",{\"1\":{\"823\":1}}],[\"n个单词\",{\"1\":{\"823\":1}}],[\"nlp\",{\"1\":{\"782\":1}}],[\"nlogn\",{\"1\":{\"685\":1}}],[\"n=getnumber\",{\"1\":{\"771\":1}}],[\"n=n+1可推出n=\",{\"1\":{\"685\":1}}],[\"nio\",{\"0\":{\"712\":1},\"1\":{\"712\":15,\"713\":13,\"1150\":1}}],[\"n^2\",{\"1\":{\"685\":1}}],[\"n除了个别重要核心业务有专属\",{\"1\":{\"584\":1}}],[\"nssm相对于sc具有更加稳定\",{\"1\":{\"1041\":1}}],[\"nssm相对sc有什么优势\",{\"1\":{\"1041\":1}}],[\"nssm支持服务的自动重启\",{\"1\":{\"1041\":1}}],[\"nssm提供了可视化的用户界面\",{\"1\":{\"1041\":1}}],[\"nssm提供了更多的选项和配置\",{\"1\":{\"1041\":1}}],[\"nssm比sc更加稳定\",{\"1\":{\"1041\":1}}],[\"nssm\",{\"1\":{\"1041\":3}}],[\"nswindowshoulddragongesture\",{\"1\":{\"1006\":1}}],[\"ns\",{\"1\":{\"459\":3,\"594\":1}}],[\"n值\",{\"1\":{\"290\":1}}],[\"npm\",{\"1\":{\"215\":4,\"219\":7,\"222\":5,\"223\":2,\"233\":1,\"1005\":1,\"1161\":1}}],[\"never\",{\"1\":{\"1005\":1}}],[\"near\",{\"1\":{\"895\":2,\"938\":1}}],[\"nexus\",{\"1\":{\"1013\":2}}],[\"nexchange\",{\"1\":{\"836\":1}}],[\"next\",{\"1\":{\"768\":1}}],[\"negative\",{\"1\":{\"483\":1}}],[\"needs\",{\"1\":{\"1005\":1}}],[\"need\",{\"1\":{\"473\":1}}],[\"nestedlist\",{\"1\":{\"775\":2}}],[\"nested\",{\"0\":{\"280\":1},\"1\":{\"970\":1}}],[\"netbeans等\",{\"1\":{\"1150\":1}}],[\"net=host\",{\"1\":{\"796\":2}}],[\"netstat\",{\"1\":{\"782\":1,\"1041\":1}}],[\"netscape\",{\"1\":{\"543\":1}}],[\"netflix项目进入维护模式\",{\"1\":{\"594\":1}}],[\"netflix\",{\"1\":{\"574\":3,\"589\":1,\"590\":1}}],[\"netty\",{\"1\":{\"107\":2,\"466\":1,\"713\":19}}],[\"netty如果没有指定堆外内存\",{\"1\":{\"107\":1}}],[\"net\",{\"1\":{\"105\":1,\"238\":1,\"348\":1,\"398\":1,\"559\":1,\"577\":1,\"691\":1,\"865\":1,\"959\":1}}],[\"networking\",{\"1\":{\"825\":1}}],[\"network\",{\"0\":{\"74\":1,\"1168\":1},\"1\":{\"47\":1,\"77\":1}}],[\"newtable\",{\"1\":{\"693\":1}}],[\"newinstance\",{\"1\":{\"688\":5}}],[\"new的时候没有创建长度为16的数组\",{\"1\":{\"688\":1}}],[\"new出自己写的那个类\",{\"1\":{\"687\":1}}],[\"new创建的对象一定在java堆吗\",{\"1\":{\"389\":1}}],[\"news\",{\"1\":{\"823\":1}}],[\"newsize\",{\"1\":{\"383\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"365\":1}}],[\"newscheduledthreadpool\",{\"1\":{\"365\":1}}],[\"newcachedthreadpool\",{\"1\":{\"365\":1}}],[\"newcondition\",{\"1\":{\"352\":3}}],[\"newfixedthreadpool\",{\"1\":{\"361\":1,\"365\":1,\"374\":1}}],[\"newval>=3\",{\"1\":{\"220\":1}}],[\"newval\",{\"1\":{\"220\":1}}],[\"new\",{\"0\":{\"362\":1,\"712\":1,\"724\":1},\"1\":{\"105\":5,\"125\":5,\"133\":1,\"156\":1,\"157\":3,\"178\":3,\"179\":9,\"182\":1,\"216\":1,\"220\":4,\"221\":1,\"249\":3,\"252\":1,\"283\":2,\"301\":2,\"302\":2,\"310\":3,\"317\":4,\"326\":1,\"334\":2,\"335\":2,\"338\":2,\"339\":2,\"342\":1,\"343\":2,\"352\":6,\"355\":1,\"356\":2,\"357\":3,\"361\":1,\"362\":2,\"363\":3,\"383\":1,\"388\":2,\"402\":1,\"403\":1,\"430\":1,\"486\":1,\"489\":1,\"492\":2,\"534\":1,\"540\":4,\"543\":1,\"566\":1,\"576\":1,\"624\":3,\"625\":1,\"650\":2,\"658\":7,\"660\":1,\"662\":3,\"666\":1,\"686\":6,\"687\":11,\"688\":6,\"691\":4,\"697\":1,\"700\":2,\"712\":2,\"715\":1,\"718\":1,\"721\":1,\"722\":2,\"723\":2,\"724\":2,\"730\":2,\"743\":1,\"763\":2,\"765\":7,\"766\":7,\"768\":7,\"779\":8,\"780\":1,\"792\":2,\"802\":2,\"850\":1,\"851\":1,\"852\":1,\"876\":1,\"906\":1,\"1005\":1,\"1007\":1,\"1019\":1,\"1074\":3,\"1081\":1,\"1101\":1}}],[\"nursery\",{\"1\":{\"383\":1}}],[\"nums\",{\"0\":{\"1050\":1},\"1\":{\"1085\":10}}],[\"num=\",{\"1\":{\"780\":2}}],[\"num=10\",{\"1\":{\"220\":1,\"771\":1}}],[\"num在getnumber\",{\"1\":{\"771\":1}}],[\"num+=2\",{\"1\":{\"220\":1}}],[\"num++\",{\"1\":{\"220\":1}}],[\"number>\",{\"1\":{\"715\":1}}],[\"number=\",{\"1\":{\"237\":1}}],[\"number\",{\"1\":{\"220\":3,\"237\":1,\"274\":1,\"352\":10,\"362\":3,\"715\":3,\"802\":1}}],[\"num\",{\"1\":{\"128\":5,\"220\":5,\"771\":1,\"780\":3,\"885\":1}}],[\"numkeys\",{\"1\":{\"88\":2}}],[\"nullnull\",{\"0\":{\"720\":1},\"1\":{\"720\":1}}],[\"nullable\",{\"1\":{\"483\":1}}],[\"null的不改\",{\"1\":{\"434\":1}}],[\"null\",{\"0\":{\"939\":1},\"1\":{\"103\":1,\"125\":2,\"156\":1,\"229\":4,\"301\":5,\"302\":3,\"403\":1,\"430\":3,\"505\":1,\"529\":1,\"625\":1,\"632\":1,\"636\":1,\"660\":1,\"686\":2,\"688\":2,\"718\":2,\"720\":5,\"779\":3,\"866\":1,\"917\":1,\"918\":1,\"921\":2,\"922\":5,\"923\":6,\"925\":4,\"934\":2,\"947\":3,\"948\":2,\"956\":1,\"959\":9,\"1005\":1,\"1074\":4}}],[\"nx\",{\"1\":{\"87\":2,\"110\":1,\"851\":1}}],[\"nojekyll\",{\"1\":{\"1161\":1}}],[\"noclassdeffounderror\",{\"1\":{\"1010\":1}}],[\"noarch\",{\"1\":{\"801\":2}}],[\"nohup\",{\"1\":{\"782\":2}}],[\"nosuchfieldexception\",{\"1\":{\"721\":1}}],[\"nosql\",{\"1\":{\"87\":1,\"914\":1,\"961\":2}}],[\"now=$\",{\"1\":{\"1005\":3}}],[\"nowait\",{\"1\":{\"928\":2}}],[\"nowdatamap\",{\"1\":{\"889\":2}}],[\"now\",{\"1\":{\"594\":1,\"730\":1,\"907\":1,\"1081\":1}}],[\"nowcoder\",{\"1\":{\"379\":1,\"380\":1,\"662\":1,\"670\":1,\"671\":1,\"696\":1,\"773\":1}}],[\"noop\",{\"1\":{\"271\":1,\"625\":2}}],[\"no=0\",{\"1\":{\"269\":1}}],[\"nonblocking\",{\"1\":{\"712\":1}}],[\"nonfairsync\",{\"1\":{\"317\":2,\"343\":1}}],[\"non\",{\"0\":{\"712\":1},\"1\":{\"247\":1,\"386\":1,\"905\":2,\"993\":1,\"1041\":1}}],[\"none\",{\"1\":{\"224\":1,\"229\":1}}],[\"node<integer>\",{\"1\":{\"716\":1}}],[\"node<t>\",{\"1\":{\"716\":2}}],[\"nodes\",{\"1\":{\"270\":1}}],[\"nodejs\",{\"1\":{\"215\":1}}],[\"node\",{\"0\":{\"1099\":1},\"1\":{\"215\":2,\"219\":3,\"220\":3,\"221\":1,\"222\":1,\"226\":4,\"229\":1,\"267\":1,\"674\":1,\"716\":2,\"740\":1,\"994\":4,\"1005\":2,\"1099\":2}}],[\"no\",{\"0\":{\"1178\":1},\"1\":{\"87\":1,\"105\":1,\"111\":1,\"117\":2,\"260\":1,\"269\":1,\"271\":1,\"473\":3,\"608\":1,\"625\":1,\"787\":2,\"864\":1,\"993\":1,\"1005\":3,\"1080\":1}}],[\"notability\",{\"1\":{\"1164\":1}}],[\"notation\",{\"1\":{\"706\":1}}],[\"notification\",{\"1\":{\"1006\":1}}],[\"notifyall\",{\"1\":{\"687\":1}}],[\"notify等方法\",{\"1\":{\"352\":1}}],[\"notify等方法也依赖于monitor对象\",{\"1\":{\"352\":1}}],[\"notify\",{\"1\":{\"192\":1,\"350\":1,\"687\":1}}],[\"notused\",{\"1\":{\"959\":3}}],[\"notusedtrays\",{\"1\":{\"959\":5}}],[\"notes\",{\"1\":{\"1161\":1}}],[\"notepad++\",{\"1\":{\"1150\":1}}],[\"notepad\",{\"0\":{\"1031\":1}}],[\"note\",{\"1\":{\"876\":1}}],[\"notblank\",{\"1\":{\"240\":1}}],[\"notnull\",{\"1\":{\"240\":1,\"1074\":1}}],[\"not\",{\"0\":{\"1042\":1},\"1\":{\"47\":2,\"87\":1,\"125\":1,\"277\":2,\"876\":1,\"917\":1,\"918\":1,\"921\":2,\"922\":1,\"923\":3,\"925\":4,\"934\":1,\"943\":1,\"947\":3,\"948\":1,\"959\":5,\"981\":1,\"987\":1,\"1167\":1}}],[\"n\",{\"0\":{\"1047\":1},\"1\":{\"61\":1,\"290\":3,\"399\":1,\"463\":1,\"646\":2,\"658\":1,\"681\":3,\"685\":4,\"686\":2,\"712\":1,\"720\":1,\"721\":1,\"739\":3,\"751\":2,\"752\":1,\"771\":1,\"780\":2,\"857\":1,\"869\":1,\"900\":1,\"914\":3,\"915\":1,\"916\":12,\"923\":2,\"928\":2,\"932\":1,\"959\":1}}],[\"nginx针对用户和前端\",{\"1\":{\"590\":1}}],[\"nginx是服务器负载均衡\",{\"1\":{\"573\":1}}],[\"nginx服务端负载均衡区别\",{\"1\":{\"573\":1}}],[\"nginx可以不用部署在服务器上\",{\"1\":{\"261\":1}}],[\"nginx+gateway\",{\"1\":{\"102\":1}}],[\"nginx代理\",{\"1\":{\"94\":1}}],[\"nginx配置记得set\",{\"1\":{\"94\":1}}],[\"nginx反向代理流程\",{\"0\":{\"94\":1}}],[\"nginx将尝试找到并返回\",{\"1\":{\"73\":1}}],[\"nginx将在\",{\"1\":{\"73\":2}}],[\"nginx将在指定的根目录下查找相应的文件\",{\"1\":{\"73\":1}}],[\"nginx\",{\"0\":{\"71\":1,\"93\":1,\"95\":1,\"232\":1,\"795\":1},\"1\":{\"48\":2,\"71\":6,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"99\":1,\"102\":1,\"282\":2,\"782\":8,\"795\":24,\"810\":9,\"866\":1,\"882\":1,\"883\":2,\"994\":1}}],[\"ngixn\",{\"1\":{\"47\":1}}],[\"nt\",{\"1\":{\"47\":1,\"76\":1}}],[\"nako\",{\"1\":{\"1005\":2}}],[\"nan\",{\"1\":{\"959\":1}}],[\"nack\",{\"1\":{\"836\":1}}],[\"nacos采用了集中式存储的方式来支持集群化部署\",{\"1\":{\"599\":1}}],[\"nacos集群和持久化配置\",{\"0\":{\"599\":1}}],[\"nacos默认cluster是default\",{\"1\":{\"598\":1}}],[\"nacos默认的namespace是public\",{\"1\":{\"598\":1}}],[\"nacos中的dataid\",{\"1\":{\"597\":1}}],[\"nacos直接可以在网站中配置\",{\"1\":{\"596\":1}}],[\"nacos致力于帮助您发现\",{\"1\":{\"594\":1}}],[\"nacos配置中心该服务\",{\"1\":{\"543\":1}}],[\"nacos配置中心该服务配置\",{\"1\":{\"543\":1}}],[\"nacos配置中心共享配置\",{\"1\":{\"543\":1}}],[\"nacos\",{\"1\":{\"46\":1,\"228\":2,\"525\":1,\"543\":5,\"554\":1,\"568\":1,\"570\":1,\"591\":1,\"594\":4,\"595\":1,\"597\":3,\"598\":13}}],[\"naming\",{\"1\":{\"477\":1}}],[\"named\",{\"1\":{\"483\":1}}],[\"name>hiddenhttpmethodfilter<\",{\"1\":{\"459\":2}}],[\"name>forceresponseencoding<\",{\"1\":{\"459\":1}}],[\"name>forcerequestencoding<\",{\"1\":{\"459\":1}}],[\"name>encoding<\",{\"1\":{\"459\":1}}],[\"name>cors\",{\"1\":{\"706\":1}}],[\"name>corsfilter<\",{\"1\":{\"706\":2}}],[\"name>contextconfiglocation<\",{\"1\":{\"459\":2}}],[\"name>characterencodingfilter<\",{\"1\":{\"459\":2}}],[\"name>dispatcherservlet<\",{\"1\":{\"459\":2}}],[\"name>\",{\"1\":{\"459\":11,\"706\":3,\"990\":2}}],[\"name这一列的值赋值给email\",{\"1\":{\"429\":2}}],[\"nameserver\",{\"1\":{\"824\":1}}],[\"namespace=ed042b3b\",{\"1\":{\"598\":1}}],[\"namespace=e53d5e82\",{\"1\":{\"598\":1}}],[\"namespace=public\",{\"1\":{\"598\":1}}],[\"namespace主要用来实现配置隔离\",{\"1\":{\"598\":1}}],[\"namespace\",{\"1\":{\"598\":1}}],[\"names\",{\"1\":{\"211\":1,\"480\":2}}],[\"name指定容器名字\",{\"1\":{\"210\":1}}],[\"name=ossobjectname\",{\"1\":{\"1084\":1}}],[\"name=upupor\",{\"1\":{\"796\":1}}],[\"name=\",{\"1\":{\"124\":2,\"220\":1,\"400\":10,\"424\":2,\"434\":2,\"438\":1,\"440\":1,\"448\":1,\"460\":2,\"462\":14,\"464\":3,\"487\":2,\"489\":1,\"610\":5,\"923\":1,\"959\":2,\"1084\":1}}],[\"name\",{\"1\":{\"71\":2,\"72\":1,\"73\":2,\"123\":1,\"139\":2,\"165\":1,\"210\":1,\"211\":1,\"213\":1,\"216\":5,\"227\":2,\"267\":2,\"271\":1,\"404\":2,\"408\":4,\"411\":1,\"419\":1,\"421\":3,\"422\":4,\"426\":6,\"427\":2,\"429\":4,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"437\":1,\"438\":2,\"440\":2,\"483\":2,\"487\":1,\"492\":1,\"540\":2,\"575\":2,\"586\":4,\"591\":1,\"594\":1,\"595\":1,\"597\":1,\"610\":2,\"679\":1,\"683\":2,\"687\":2,\"743\":3,\"763\":5,\"782\":1,\"790\":2,\"791\":1,\"794\":1,\"795\":1,\"796\":1,\"810\":2,\"825\":1,\"877\":1,\"885\":1,\"905\":1,\"917\":1,\"923\":6,\"924\":5,\"928\":2,\"945\":3,\"955\":2,\"959\":12,\"985\":1,\"986\":1,\"987\":3,\"990\":2,\"994\":8,\"1001\":1,\"1005\":6,\"1006\":1,\"1084\":7,\"1101\":3}}],[\"natural\",{\"1\":{\"1006\":1}}],[\"native\",{\"1\":{\"304\":1}}],[\"natapp\",{\"1\":{\"197\":2}}],[\"navigation\",{\"1\":{\"869\":1}}],[\"navigate\",{\"1\":{\"47\":1}}],[\"navicat连接\",{\"1\":{\"796\":1}}],[\"navicat\",{\"0\":{\"793\":1},\"1\":{\"267\":1,\"996\":1,\"1041\":1}}],[\"navicat要在加一行select\",{\"1\":{\"257\":1}}],[\"j+1\",{\"1\":{\"1085\":1}}],[\"j++\",{\"0\":{\"643\":1},\"1\":{\"643\":2}}],[\"jq\",{\"1\":{\"1003\":1}}],[\"j=r+1\",{\"1\":{\"1085\":1}}],[\"j=\",{\"1\":{\"778\":1}}],[\"jjs\",{\"1\":{\"688\":1}}],[\"jb51\",{\"1\":{\"559\":1}}],[\"jpg\",{\"1\":{\"540\":1,\"1005\":9,\"1084\":2,\"1154\":1}}],[\"jpeg\",{\"1\":{\"540\":1,\"1084\":2}}],[\"jpa\",{\"1\":{\"468\":1}}],[\"jetbrains\",{\"1\":{\"998\":1,\"1005\":1}}],[\"jetty\",{\"1\":{\"473\":1}}],[\"jedispool\",{\"1\":{\"871\":1}}],[\"jedis\",{\"1\":{\"530\":1,\"850\":8,\"851\":8,\"852\":9,\"871\":2}}],[\"jerry11112\",{\"1\":{\"348\":1}}],[\"jcp\",{\"1\":{\"459\":3}}],[\"jconsole\",{\"1\":{\"101\":2}}],[\"jit\",{\"1\":{\"386\":1,\"634\":2,\"635\":2}}],[\"jianshu\",{\"1\":{\"242\":1,\"388\":1,\"987\":1}}],[\"jobl\",{\"1\":{\"994\":1}}],[\"jobs\",{\"1\":{\"994\":2}}],[\"job\",{\"1\":{\"887\":1,\"1103\":1}}],[\"joins\",{\"1\":{\"961\":1}}],[\"join会导致锁表\",{\"1\":{\"959\":1}}],[\"join把指定的线程加入到当前线程\",{\"1\":{\"650\":1}}],[\"joinpoint\",{\"1\":{\"492\":5,\"495\":2,\"887\":2}}],[\"join\",{\"0\":{\"650\":1,\"970\":1},\"1\":{\"377\":1,\"421\":1,\"426\":1,\"540\":2,\"650\":4,\"687\":1,\"896\":3,\"937\":5,\"938\":3,\"939\":1,\"959\":12,\"961\":3,\"963\":2,\"964\":4,\"970\":7,\"1084\":1}}],[\"john\",{\"1\":{\"271\":1}}],[\"jmsautoconfiguration\",{\"1\":{\"821\":1}}],[\"jmslistener\",{\"1\":{\"820\":1}}],[\"jms提供了对jms的支持\",{\"1\":{\"820\":1}}],[\"jms提供为例\",{\"0\":{\"817\":1}}],[\"jms规定了两种消息模式\",{\"1\":{\"818\":1}}],[\"jms限定了必须使用java语言\",{\"1\":{\"818\":1}}],[\"jms是定义了统一的接口\",{\"1\":{\"818\":1}}],[\"jms\",{\"1\":{\"818\":2,\"820\":1}}],[\"jmap\",{\"1\":{\"391\":1}}],[\"jmm\",{\"0\":{\"284\":1},\"1\":{\"284\":2}}],[\"jmeter\",{\"0\":{\"79\":1},\"1\":{\"100\":3,\"107\":1,\"254\":1,\"601\":1}}],[\"juejin\",{\"1\":{\"499\":1}}],[\"just\",{\"1\":{\"473\":1,\"634\":1}}],[\"jumps\",{\"1\":{\"281\":1}}],[\"juneq\",{\"1\":{\"261\":1}}],[\"juneqs\",{\"1\":{\"261\":1}}],[\"jun1\",{\"1\":{\"238\":1}}],[\"junit总是为每个\",{\"1\":{\"689\":1}}],[\"junit是自动化的测试\",{\"1\":{\"689\":1}}],[\"junit源码可见\",{\"1\":{\"353\":1}}],[\"junit在运行时\",{\"1\":{\"353\":1}}],[\"junit5\",{\"1\":{\"227\":1,\"528\":1}}],[\"junit4\",{\"1\":{\"227\":1,\"528\":1}}],[\"junit\",{\"1\":{\"227\":2}}],[\"jupiter\",{\"1\":{\"227\":1}}],[\"juc\",{\"0\":{\"283\":1,\"1172\":1},\"1\":{\"108\":1,\"115\":2,\"126\":1,\"298\":1,\"352\":1,\"779\":1}}],[\"jre\",{\"1\":{\"800\":2}}],[\"jrebel+devtools\",{\"1\":{\"123\":1,\"546\":1}}],[\"jredis\",{\"1\":{\"112\":1}}],[\"jdbc时需要修改代码\",{\"1\":{\"960\":1}}],[\"jdbc是一个jar包\",{\"1\":{\"960\":1}}],[\"jdbc作为java平台中用于与数据库进行交互的api\",{\"1\":{\"740\":1}}],[\"jdbc的各类实现\",{\"1\":{\"740\":1}}],[\"jdbctemplate\",{\"1\":{\"498\":1,\"560\":1}}],[\"jdbc<\",{\"1\":{\"458\":1}}],[\"jdbc\",{\"0\":{\"398\":1},\"1\":{\"260\":1,\"398\":1,\"400\":2,\"458\":1,\"461\":5,\"462\":5,\"468\":1,\"594\":1,\"740\":1,\"960\":1}}],[\"jdk与openjdk的区别\",{\"1\":{\"800\":1}}],[\"jdk提供的hashmap从来就不是给多线程用的\",{\"1\":{\"694\":1}}],[\"jdk7的hashmap头插法循环的问题\",{\"0\":{\"693\":1}}],[\"jdk7\",{\"1\":{\"688\":1,\"724\":1}}],[\"jdk代理\",{\"1\":{\"504\":1}}],[\"jdk的代理效率会高一些\",{\"1\":{\"493\":1}}],[\"jdk自带的和cglib\",{\"1\":{\"493\":1}}],[\"jdk动态代理在设计和实现上与cglib等方式有什么不同\",{\"1\":{\"639\":1}}],[\"jdk动态代理\",{\"1\":{\"493\":1}}],[\"jdk动态代理只能代理实现接口的类的方法\",{\"1\":{\"182\":1}}],[\"jdk1\",{\"1\":{\"386\":1,\"660\":4,\"674\":2,\"686\":1,\"722\":1,\"740\":4}}],[\"jdk\",{\"0\":{\"740\":2},\"1\":{\"179\":1,\"182\":5,\"200\":1,\"383\":4,\"634\":1,\"635\":1,\"660\":1,\"687\":1,\"713\":1,\"740\":2,\"789\":1,\"1150\":1}}],[\"jdk8u312\",{\"1\":{\"800\":1}}],[\"jdk8实现与7的区别\",{\"1\":{\"688\":1}}],[\"jdk8接口除了可以定义全局常量和抽象方法外\",{\"1\":{\"686\":1}}],[\"jdk8特性多了接口的默认实现\",{\"1\":{\"471\":1}}],[\"jdk8\",{\"1\":{\"125\":2}}],[\"jd\",{\"1\":{\"119\":1,\"154\":1,\"1103\":2}}],[\"j\",{\"0\":{\"643\":2},\"1\":{\"88\":1,\"637\":1,\"643\":4,\"658\":4,\"680\":2,\"778\":2,\"780\":2,\"1085\":33}}],[\"jvm规范\",{\"0\":{\"695\":1}}],[\"jvm就可以适时的回收对象了\",{\"1\":{\"660\":1}}],[\"jvm也会直接抛出outofmemoryerror\",{\"1\":{\"660\":1}}],[\"jvm笔记\",{\"1\":{\"389\":1}}],[\"jvm堆内存详细说说\",{\"1\":{\"389\":1}}],[\"jvm会帮我们实现出cas汇编指令\",{\"1\":{\"303\":1}}],[\"jvm本地锁机制\",{\"0\":{\"84\":1}}],[\"jvm\",{\"0\":{\"80\":1,\"283\":1,\"381\":1,\"1173\":1},\"1\":{\"79\":1,\"101\":1,\"254\":1,\"283\":1,\"302\":1,\"381\":5,\"382\":1,\"573\":1,\"634\":3,\"635\":5,\"636\":2,\"660\":1,\"679\":2,\"722\":5,\"724\":1,\"779\":1,\"1150\":1}}],[\"jvisualvm\",{\"1\":{\"79\":1,\"100\":1,\"101\":3,\"391\":1,\"392\":1}}],[\"j5pltvmsmvl1v6h1pzuzcsxpcsinnp3bt1okt48dj\",{\"1\":{\"68\":1}}],[\"jwttokenrefreshfilter\",{\"1\":{\"890\":1}}],[\"jwt令牌包含了用户的身份信息和权限\",{\"1\":{\"890\":1}}],[\"jwt认证过滤器上\",{\"1\":{\"628\":1}}],[\"jwtutil\",{\"1\":{\"626\":1}}],[\"jwt里面会有一个特有的秘钥\",{\"1\":{\"626\":1}}],[\"jwt不叫加密\",{\"1\":{\"626\":1}}],[\"jwt是登录校验的时候用的技术\",{\"1\":{\"617\":1}}],[\"jwt颁发后\",{\"1\":{\"70\":1}}],[\"jwt最大特点不就是状态存储在客户端么\",{\"1\":{\"70\":1}}],[\"jwtauthenticationtokenfilter\",{\"1\":{\"69\":1,\"627\":1}}],[\"jwt\",{\"0\":{\"64\":1,\"626\":1},\"1\":{\"54\":1,\"65\":1,\"70\":1,\"614\":1,\"621\":2,\"627\":1,\"877\":1}}],[\"jack\",{\"1\":{\"216\":1,\"765\":1,\"766\":1,\"768\":1}}],[\"jackson是最流行的json解析器之一\",{\"1\":{\"247\":1}}],[\"jackson社区相对比较活跃\",{\"1\":{\"247\":1}}],[\"jackson通常是默认集成的\",{\"1\":{\"105\":1}}],[\"jackson\",{\"1\":{\"105\":1,\"125\":2,\"247\":2,\"727\":1}}],[\"jackson笔记官方的\",{\"1\":{\"105\":1}}],[\"jackson都是操作objectmapper这个对象进行序列化\",{\"1\":{\"105\":1}}],[\"jackson也有这个类\",{\"1\":{\"105\":1}}],[\"jar的话\",{\"1\":{\"796\":1}}],[\"jar之前的export步骤\",{\"1\":{\"796\":1}}],[\"jar里的class\",{\"1\":{\"509\":1}}],[\"jar包里面也有\",{\"1\":{\"483\":1}}],[\"jar\",{\"0\":{\"304\":1},\"1\":{\"140\":1,\"522\":2,\"546\":3,\"547\":2,\"548\":2,\"556\":1,\"559\":1,\"782\":3,\"796\":4,\"800\":1,\"1150\":1}}],[\"java性能权威指南\",{\"1\":{\"1150\":1}}],[\"java9都要出来了\",{\"1\":{\"1150\":1}}],[\"java8实战\",{\"1\":{\"1150\":1}}],[\"java8两个重要的改变\",{\"1\":{\"688\":1}}],[\"java并发编程实战\",{\"1\":{\"1150\":1}}],[\"java核心技术卷1\",{\"1\":{\"1150\":1}}],[\"java程序员必读书籍\",{\"1\":{\"1150\":1}}],[\"java编程思想\",{\"1\":{\"1150\":1}}],[\"java从入门到精通\",{\"1\":{\"1150\":1}}],[\"java从1\",{\"1\":{\"691\":1}}],[\"javaweb\",{\"1\":{\"1150\":2}}],[\"java基础搞定\",{\"1\":{\"1150\":1}}],[\"java基本语法\",{\"0\":{\"684\":1}}],[\"java版本\",{\"1\":{\"1085\":1}}],[\"java层面\",{\"1\":{\"932\":1}}],[\"java只知道存储的对象是一个object而已\",{\"1\":{\"717\":1}}],[\"javaio模型常见面试题总结\",{\"0\":{\"709\":1}}],[\"java内置的4大核心函数式接口\",{\"1\":{\"688\":1}}],[\"java内存模型\",{\"1\":{\"328\":1}}],[\"java内存模型java\",{\"1\":{\"284\":1}}],[\"java不是动态语言\",{\"1\":{\"688\":1}}],[\"java反射机制\",{\"1\":{\"688\":1}}],[\"java常用类\",{\"1\":{\"687\":1,\"1150\":1}}],[\"java高级部分\",{\"0\":{\"687\":1}}],[\"java发现缓存中存在127这个数了\",{\"1\":{\"686\":1}}],[\"java虚拟机提供了三种内建的类加载器\",{\"1\":{\"679\":1}}],[\"java中表示\",{\"1\":{\"784\":2}}],[\"java中arraydeque和stack类哪个用来实现栈方便一些\",{\"1\":{\"677\":1}}],[\"java中的线程池是通过executor框架实现的\",{\"1\":{\"359\":1}}],[\"java中的对象是有垃圾回收机制的\",{\"1\":{\"125\":1}}],[\"java的自动拆箱机制\",{\"1\":{\"671\":1}}],[\"java实际只能支持int类型的switch语句\",{\"1\":{\"671\":1}}],[\"java跟c的区别\",{\"1\":{\"653\":1}}],[\"java提供了不同层面的线程安全支持\",{\"1\":{\"641\":1}}],[\"java可以灵活地操作运行时才能确定的信息\",{\"1\":{\"639\":1}}],[\"javase\",{\"0\":{\"642\":1}}],[\"javassist等\",{\"1\":{\"638\":1}}],[\"javascript\",{\"1\":{\"61\":1,\"125\":1,\"216\":1,\"706\":2,\"1084\":1,\"1099\":1}}],[\"java是静态的强类型语言\",{\"1\":{\"637\":1}}],[\"javac\",{\"1\":{\"634\":1}}],[\"javacopy\",{\"1\":{\"157\":1}}],[\"javabean\",{\"1\":{\"624\":1,\"629\":1}}],[\"java代码\",{\"1\":{\"591\":1}}],[\"java代码体现得有两行\",{\"1\":{\"110\":1}}],[\"javaeehadoop\",{\"1\":{\"687\":1}}],[\"javaee\",{\"1\":{\"459\":3,\"687\":6}}],[\"javatype=\",{\"1\":{\"422\":1,\"429\":2}}],[\"javatype\",{\"1\":{\"422\":1,\"426\":1,\"429\":1}}],[\"javatimemodule\",{\"1\":{\"125\":1}}],[\"java<\",{\"1\":{\"397\":2,\"458\":1,\"556\":2}}],[\"java来生成demo\",{\"1\":{\"388\":1}}],[\"java有哪些类加载器\",{\"1\":{\"382\":1}}],[\"javap\",{\"1\":{\"352\":1}}],[\"java锁之公平锁和非公平锁\",{\"0\":{\"313\":1}}],[\"java面试指北\",{\"1\":{\"183\":1,\"707\":1}}],[\"javax\",{\"1\":{\"140\":1}}],[\"java对象实现了java\",{\"1\":{\"115\":1}}],[\"java\",{\"0\":{\"369\":1,\"370\":1,\"384\":1,\"710\":1,\"790\":1,\"819\":1,\"1136\":1,\"1174\":1,\"1175\":1},\"1\":{\"78\":1,\"79\":1,\"85\":1,\"92\":1,\"108\":1,\"111\":1,\"112\":2,\"125\":1,\"148\":1,\"153\":3,\"156\":1,\"216\":1,\"217\":1,\"240\":1,\"253\":1,\"267\":2,\"302\":3,\"312\":1,\"319\":1,\"352\":4,\"366\":1,\"378\":3,\"381\":1,\"382\":1,\"383\":4,\"386\":2,\"392\":2,\"397\":1,\"399\":4,\"402\":2,\"463\":4,\"494\":1,\"522\":1,\"537\":1,\"546\":2,\"547\":1,\"548\":1,\"549\":1,\"577\":1,\"594\":1,\"633\":5,\"634\":5,\"635\":5,\"636\":1,\"640\":1,\"642\":2,\"650\":1,\"660\":2,\"665\":2,\"672\":1,\"677\":2,\"685\":2,\"686\":2,\"688\":3,\"690\":1,\"712\":9,\"713\":4,\"715\":2,\"717\":1,\"722\":1,\"724\":3,\"725\":1,\"726\":3,\"736\":1,\"738\":1,\"739\":2,\"740\":4,\"741\":1,\"765\":1,\"766\":1,\"767\":2,\"768\":1,\"770\":1,\"771\":2,\"775\":1,\"779\":2,\"782\":2,\"787\":1,\"790\":8,\"796\":3,\"818\":1,\"823\":2,\"830\":1,\"831\":1,\"868\":1,\"876\":1,\"970\":1,\"971\":1,\"993\":1,\"1010\":1,\"1019\":1,\"1081\":1,\"1114\":1,\"1139\":1,\"1144\":1,\"1150\":18,\"1152\":3}}],[\"java能做到获取访问我这台服务器的用户使用的是哪一个\",{\"1\":{\"76\":1}}],[\"javaguide\",{\"0\":{\"707\":1},\"1\":{\"47\":1,\"183\":1,\"254\":1,\"302\":4,\"378\":2,\"382\":1,\"494\":1,\"639\":1,\"677\":2,\"722\":2,\"724\":2,\"728\":1,\"731\":1,\"739\":2,\"740\":2,\"779\":2,\"811\":1,\"945\":1}}],[\"jan\",{\"1\":{\"48\":1}}],[\"js是一个事件驱动i\",{\"1\":{\"1099\":1}}],[\"js会自动处理这些细节\",{\"1\":{\"881\":1}}],[\"js会自动加载\",{\"1\":{\"881\":1}}],[\"js和\",{\"1\":{\"706\":1}}],[\"jstl\",{\"1\":{\"458\":1}}],[\"jsp需要手动配置\",{\"1\":{\"539\":1}}],[\"jsp<\",{\"1\":{\"458\":1}}],[\"jsp\",{\"1\":{\"458\":1,\"460\":1,\"1012\":1}}],[\"js中配置\",{\"1\":{\"233\":1}}],[\"js|vue\",{\"1\":{\"229\":1}}],[\"js里确实不行\",{\"1\":{\"220\":1}}],[\"jsessionid这个cookie默认是当前系统域名的\",{\"1\":{\"141\":1}}],[\"jsessionid存在客户端\",{\"1\":{\"140\":1}}],[\"jsessionid=bf468917a7a82eb64d8e913d8f4457f5\",{\"1\":{\"47\":1}}],[\"jsessionid=b4717473f69fd975072100c7e181e807\",{\"1\":{\"47\":1}}],[\"jsr303校验\",{\"1\":{\"460\":1}}],[\"jsr303\",{\"0\":{\"130\":1},\"1\":{\"134\":1}}],[\"jsr\",{\"1\":{\"121\":1}}],[\"js如何给td标签设置值\",{\"1\":{\"61\":1}}],[\"js\",{\"0\":{\"59\":1,\"61\":1,\"128\":1,\"882\":1,\"1099\":1},\"1\":{\"61\":1,\"69\":1,\"100\":1,\"125\":1,\"215\":1,\"216\":2,\"217\":1,\"218\":2,\"220\":4,\"221\":1,\"222\":1,\"223\":2,\"229\":1,\"240\":1,\"539\":2,\"540\":1,\"706\":2,\"879\":3,\"888\":1,\"1005\":1,\"1084\":4,\"1099\":1,\"1150\":1,\"1161\":1}}],[\"jsonutil\",{\"1\":{\"876\":2}}],[\"json串的格式\",{\"1\":{\"876\":1}}],[\"jsontoobject\",{\"1\":{\"830\":1}}],[\"json文件\",{\"1\":{\"706\":1}}],[\"json文件而不报错\",{\"1\":{\"706\":1}}],[\"json文件时\",{\"1\":{\"706\":2}}],[\"json文件是一种特殊的文件类型\",{\"1\":{\"706\":1}}],[\"json文件会报错\",{\"1\":{\"706\":1}}],[\"jsoninclude\",{\"1\":{\"247\":2}}],[\"json下载后端是pom\",{\"1\":{\"215\":1,\"219\":1}}],[\"jsonobject\",{\"1\":{\"139\":3}}],[\"json对象\",{\"1\":{\"105\":1}}],[\"jsonnode1\",{\"1\":{\"105\":1}}],[\"jsonnode\",{\"1\":{\"105\":13}}],[\"jsonweb\",{\"1\":{\"70\":1}}],[\"json\",{\"1\":{\"48\":1,\"54\":1,\"92\":2,\"105\":7,\"125\":1,\"139\":5,\"208\":1,\"219\":1,\"222\":3,\"223\":1,\"230\":1,\"247\":1,\"253\":2,\"502\":1,\"503\":1,\"612\":1,\"617\":1,\"632\":2,\"706\":7,\"789\":1,\"876\":1,\"890\":1,\"1005\":2}}],[\"js文件\",{\"1\":{\"46\":1,\"219\":1}}],[\"同ctrl+\",{\"0\":{\"1072\":1}}],[\"同路由菜单一样\",{\"1\":{\"886\":1}}],[\"同上\",{\"1\":{\"925\":1}}],[\"同上是一样的\",{\"1\":{\"779\":1}}],[\"同上用时间戳校验\",{\"1\":{\"129\":1}}],[\"同等地位\",{\"1\":{\"658\":1}}],[\"同1的文件传输类似通过外部\",{\"1\":{\"612\":1}}],[\"同源政策由\",{\"1\":{\"543\":1}}],[\"同源策略\",{\"1\":{\"230\":1}}],[\"同事告诉他\",{\"1\":{\"925\":1}}],[\"同事说\",{\"1\":{\"898\":1}}],[\"同事\",{\"1\":{\"492\":1}}],[\"同运维有很大关系\",{\"1\":{\"474\":1}}],[\"同步非阻塞\",{\"1\":{\"712\":4}}],[\"同步监视器是\",{\"1\":{\"687\":2}}],[\"同步阻塞\",{\"1\":{\"609\":1,\"711\":1}}],[\"同步\",{\"1\":{\"362\":1}}],[\"同步代码段的时候\",{\"1\":{\"301\":1}}],[\"同步代码块\",{\"1\":{\"301\":1}}],[\"同理\",{\"1\":{\"345\":1}}],[\"同一张表上任何时刻只能有一个更新在执行\",{\"1\":{\"930\":1}}],[\"同一条记录在系统中可以存在多个版本\",{\"1\":{\"906\":1}}],[\"同一时刻做多件事情\",{\"1\":{\"675\":1}}],[\"同一行\",{\"1\":{\"646\":1}}],[\"同一无法连接\",{\"1\":{\"608\":1}}],[\"同一用户在同一浏览器中访问同一网站期间的所有请求\",{\"1\":{\"156\":1}}],[\"同一个表不同列放一列\",{\"1\":{\"947\":1}}],[\"同一个消息\",{\"1\":{\"830\":1}}],[\"同一个线程在获取同一个锁的时候\",{\"1\":{\"321\":1}}],[\"同一个线程共享\",{\"1\":{\"156\":1}}],[\"同一个对象内事务方法互调默认失效可以通过代理对象调用解决\",{\"1\":{\"179\":1}}],[\"同一个对象内事务方法互调默认失效\",{\"1\":{\"179\":2}}],[\"同一个数据库中的表分布在了不同的数据库中\",{\"1\":{\"183\":1}}],[\"同一个数据库\",{\"1\":{\"176\":1}}],[\"同一个用户的accesstoken一段时间是不会变化的\",{\"1\":{\"136\":1}}],[\"同一个商品有多条库存记录\",{\"1\":{\"81\":1}}],[\"同时可以改下\",{\"1\":{\"1006\":1}}],[\"同时观察\",{\"1\":{\"977\":1}}],[\"同时记录主键\",{\"1\":{\"925\":2}}],[\"同时很显然\",{\"1\":{\"915\":1}}],[\"同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中\",{\"1\":{\"907\":1}}],[\"同时你会发现\",{\"1\":{\"906\":1}}],[\"同时系统会定期做整库备份\",{\"1\":{\"901\":1}}],[\"同时将这个更新操作记录到\",{\"1\":{\"900\":1}}],[\"同时具有更高的性能和稳定性\",{\"1\":{\"883\":1}}],[\"同时是消费者和生产者\",{\"1\":{\"844\":1}}],[\"同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象\",{\"1\":{\"688\":1}}],[\"同时这也会给我们开发带来预想不到的陷阱\",{\"1\":{\"686\":1}}],[\"同时还允许实现类选择性地适应新的接口功能\",{\"1\":{\"686\":1}}],[\"同时还可以兼容以前的实现类\",{\"1\":{\"686\":1}}],[\"同时对node\",{\"1\":{\"682\":1}}],[\"同时对这些信息进行加工处理后流向下个环节\",{\"1\":{\"158\":1}}],[\"同时有些\",{\"1\":{\"635\":1}}],[\"同时提供分布式的任务执行模型\",{\"1\":{\"594\":1}}],[\"同时也会创建出parameterhandler和resultsethandler\",{\"1\":{\"465\":1}}],[\"同时清除已经复制的对象\",{\"1\":{\"385\":1}}],[\"同时返回默认值\",{\"1\":{\"374\":1}}],[\"同时车辆假设需要等待3秒后\",{\"1\":{\"342\":1}}],[\"同时读一个资源类没有任何问题\",{\"1\":{\"326\":1}}],[\"同时配置\",{\"1\":{\"229\":1}}],[\"同时\",{\"1\":{\"152\":1,\"520\":1,\"648\":1,\"688\":1,\"852\":1,\"899\":1,\"928\":1,\"935\":1,\"1005\":1,\"1012\":1,\"1150\":4}}],[\"同时每个页面包含\",{\"1\":{\"5\":1}}],[\"同域名\",{\"1\":{\"141\":1}}],[\"同样耗费性能\",{\"1\":{\"899\":1}}],[\"同样\",{\"1\":{\"899\":1,\"909\":1}}],[\"同样需要在\",{\"1\":{\"726\":1}}],[\"同样有加锁\",{\"1\":{\"112\":1}}],[\"同样将其封装在ip数据包中进行传输\",{\"1\":{\"76\":1}}],[\"同样的\",{\"1\":{\"47\":1}}],[\"即有挑战性\",{\"1\":{\"1150\":1}}],[\"即逻辑cpu\",{\"1\":{\"1095\":1}}],[\"即批处理文件的名称\",{\"1\":{\"1041\":1}}],[\"即空值\",{\"1\":{\"1009\":1}}],[\"即将表按照功能模块\",{\"1\":{\"960\":1}}],[\"即将线程\",{\"1\":{\"694\":1}}],[\"即一个可以在查询中被引用的临时结果集\",{\"1\":{\"959\":1}}],[\"即先获取\",{\"1\":{\"933\":1}}],[\"即加锁顺序\",{\"1\":{\"932\":1}}],[\"即普通索引查询方式\",{\"1\":{\"917\":1}}],[\"即主键查询方式\",{\"1\":{\"917\":1}}],[\"即主内存中atomicinteger的\",{\"1\":{\"305\":1}}],[\"即不统计字段为\",{\"1\":{\"956\":1}}],[\"即不同存储引擎的索引的工作方式并不一样\",{\"1\":{\"916\":1}}],[\"即不会出现下面的顺序\",{\"1\":{\"293\":1}}],[\"即原子性\",{\"1\":{\"905\":1}}],[\"即便我们只查询一条记录\",{\"1\":{\"903\":1}}],[\"即物理日志\",{\"1\":{\"902\":1}}],[\"即时编译器编译后的代码缓存等数据\",{\"1\":{\"722\":1}}],[\"即时性\",{\"1\":{\"108\":1}}],[\"即成员变量\",{\"1\":{\"704\":1}}],[\"即为平时提到的栈结构\",{\"1\":{\"695\":1}}],[\"即对扩展开放\",{\"1\":{\"686\":1}}],[\"即在\",{\"1\":{\"722\":1}}],[\"即在使用到类时才会进行加载\",{\"1\":{\"679\":1}}],[\"即在请求头中加入connection\",{\"1\":{\"47\":1}}],[\"即接口与实现类的关系只是实现了定义的行为\",{\"1\":{\"657\":1}}],[\"即父类和派生子类在概念上的本质是相同的\",{\"1\":{\"657\":1}}],[\"即二进制的10000001在补码表示中解释为\",{\"1\":{\"648\":1}}],[\"即所谓的混合模式\",{\"1\":{\"635\":1}}],[\"即访问其他接口会判断你这里存的用户信息有没有\",{\"1\":{\"627\":1}}],[\"即响应时间\",{\"1\":{\"603\":1}}],[\"即写上对应环境的命名空间id\",{\"1\":{\"598\":1}}],[\"即网站配置文件的名字\",{\"1\":{\"597\":1}}],[\"即负载均衡是由服务端实现的\",{\"1\":{\"573\":1}}],[\"即最终一致性\",{\"1\":{\"571\":1}}],[\"即如果vm\",{\"1\":{\"549\":1}}],[\"即会从springboot启动时的main方法的string\",{\"1\":{\"548\":1}}],[\"即跟随当前时间点上出现的事件\",{\"1\":{\"543\":1,\"1081\":1}}],[\"即大部分对象很快变成垃圾\",{\"1\":{\"385\":1}}],[\"即阻塞\",{\"1\":{\"346\":1}}],[\"即内部执行顺序\",{\"1\":{\"293\":1}}],[\"即分布式事务解决方案\",{\"1\":{\"228\":1}}],[\"即需要分布式事务\",{\"1\":{\"176\":1}}],[\"即可把所有检索点放vo实体类\",{\"1\":{\"1098\":1}}],[\"即可\",{\"1\":{\"1006\":1,\"1051\":1}}],[\"即可提交\",{\"1\":{\"990\":1}}],[\"即可看到\",{\"1\":{\"796\":1}}],[\"即可在\",{\"1\":{\"538\":1,\"1082\":1}}],[\"即可完成响应\",{\"1\":{\"372\":1}}],[\"即可识别\",{\"1\":{\"282\":1}}],[\"即可diy个拦截器把原requset\",{\"1\":{\"160\":1}}],[\"即可打开\",{\"1\":{\"101\":1}}],[\"即截器定义好了\",{\"1\":{\"156\":1}}],[\"即diy\",{\"1\":{\"156\":1,\"581\":1}}],[\"即使使用了排除了mybatis\",{\"1\":{\"1012\":1}}],[\"即使数据库发生故障也不应该对其有任何影响\",{\"1\":{\"962\":1}}],[\"即使有其他事务修改了数据\",{\"1\":{\"934\":1}}],[\"即使有用户发生了一笔新的交易\",{\"1\":{\"905\":1}}],[\"即使两个线程同时竞争资源\",{\"1\":{\"933\":1}}],[\"即使是小表\",{\"1\":{\"928\":1}}],[\"即使是单体应用\",{\"1\":{\"141\":1}}],[\"即使没有被全局锁住\",{\"1\":{\"927\":1}}],[\"即使没有接口也可以创建动态代理\",{\"1\":{\"179\":1}}],[\"即使长事务最终提交\",{\"1\":{\"906\":1}}],[\"即使现在有另外一个事务正在将\",{\"1\":{\"906\":1}}],[\"即使你不做数据库内核开发\",{\"1\":{\"902\":1}}],[\"即使你用管理员账号对这个用户的权限做了修改\",{\"1\":{\"893\":1}}],[\"即使consumer宕机消息也不会丢失\",{\"1\":{\"837\":1}}],[\"即使处理速度慢一点也无所谓\",{\"1\":{\"814\":1}}],[\"即使用普通querywrapper的缺陷\",{\"1\":{\"743\":1,\"1101\":1}}],[\"即使能熟练使用\",{\"1\":{\"740\":1}}],[\"即使被final修饰\",{\"1\":{\"721\":1}}],[\"即使该文件位于你的计算机上\",{\"1\":{\"706\":1}}],[\"即使我们没有在拦截器中调用\",{\"1\":{\"534\":1}}],[\"即使他是默认的\",{\"1\":{\"400\":1,\"424\":1}}],[\"即使多次获取\",{\"1\":{\"136\":1}}],[\"即使上一次\",{\"1\":{\"125\":1}}],[\"即使它所引用的对象被回收了\",{\"1\":{\"125\":1}}],[\"即使慢点\",{\"1\":{\"118\":1}}],[\"即使icmp协议正常工作\",{\"1\":{\"76\":1}}],[\"即使icmp协议可用\",{\"1\":{\"76\":2}}],[\"即名字可以细致一点\",{\"1\":{\"115\":1}}],[\"即每个应用一把锁\",{\"1\":{\"108\":1}}],[\"即用\",{\"1\":{\"73\":2}}],[\"即\",{\"1\":{\"60\":1,\"111\":1,\"206\":1,\"231\":1,\"589\":1,\"597\":1,\"627\":1,\"694\":6,\"932\":1,\"933\":3,\"934\":1,\"1005\":1,\"1013\":1}}],[\"即你的上网机器ip\",{\"1\":{\"46\":1}}],[\"有兴趣的小伙伴可以戳一戳\",{\"1\":{\"1161\":1}}],[\"有能力的可以继续延伸自己的广度\",{\"1\":{\"1150\":1}}],[\"有区别\",{\"1\":{\"1150\":1}}],[\"有趣的案例驱动\",{\"1\":{\"1150\":1}}],[\"有视频\",{\"1\":{\"1150\":1}}],[\"有必要的话可以看看\",{\"1\":{\"1150\":1}}],[\"有必要说明的是\",{\"1\":{\"47\":1}}],[\"有各个平台的客户端\",{\"1\":{\"1145\":1}}],[\"有收费的也有免费的\",{\"1\":{\"1145\":1}}],[\"有流程图\",{\"1\":{\"1144\":1}}],[\"有脑图\",{\"1\":{\"1144\":1}}],[\"有其他专业的朋友会羡慕的和我说\",{\"1\":{\"1141\":1}}],[\"有年终奖和没有年终奖能一样吗\",{\"1\":{\"1130\":1}}],[\"有下家之后再提出离职\",{\"1\":{\"1119\":1}}],[\"有活力的技术团队\",{\"1\":{\"1104\":1}}],[\"有竞争力的薪酬\",{\"1\":{\"1104\":1}}],[\"有多少个逻辑处理器\",{\"1\":{\"1095\":1}}],[\"有多个的话会出现数据冗余\",{\"1\":{\"978\":1}}],[\"有多个参数的接口\",{\"1\":{\"751\":1}}],[\"有多个方法名相同\",{\"1\":{\"652\":1}}],[\"有1个很重要的特性\",{\"1\":{\"1089\":1}}],[\"有15个字符没有找到匹配项\",{\"1\":{\"1017\":1}}],[\"有人鼓励你\",{\"1\":{\"1077\":1}}],[\"有人可能会问\",{\"1\":{\"785\":1}}],[\"有关详细信息\",{\"1\":{\"1027\":1}}],[\"有关的代码\",{\"1\":{\"222\":1}}],[\"有批处理解决\",{\"1\":{\"1025\":1}}],[\"有道云支持\",{\"1\":{\"1145\":1}}],[\"有道云笔记\",{\"1\":{\"1145\":1}}],[\"有道云笔记有效\",{\"1\":{\"1074\":1}}],[\"有道\",{\"1\":{\"1005\":1}}],[\"有问题就\",{\"1\":{\"1150\":1}}],[\"有问题就会马上显示出来\",{\"1\":{\"994\":1}}],[\"有问题及时反馈\",{\"1\":{\"539\":1,\"1083\":1}}],[\"有大量的\",{\"1\":{\"977\":1}}],[\"有大量硬件级别的\",{\"1\":{\"89\":1,\"304\":1}}],[\"有哪些风险\",{\"1\":{\"1116\":1}}],[\"有哪些人是主动内卷\",{\"1\":{\"1076\":1}}],[\"有哪些场景不建议自增\",{\"1\":{\"972\":1}}],[\"有哪些常见的\",{\"0\":{\"968\":1}}],[\"有较强的运维能力\",{\"1\":{\"961\":1}}],[\"有如下table\",{\"1\":{\"959\":1}}],[\"有以下几种可能\",{\"1\":{\"935\":1}}],[\"有以下三种方法可以做到\",{\"1\":{\"933\":1}}],[\"有这么一个表\",{\"1\":{\"925\":1}}],[\"有这个注解会导致\",{\"1\":{\"546\":1}}],[\"有同学问到为什么要重建索引\",{\"1\":{\"919\":1}}],[\"有线程安全问题\",{\"1\":{\"906\":2}}],[\"有单个参数的接口\",{\"1\":{\"751\":1}}],[\"有类似问题的小伙伴可以看看我写的这篇文章\",{\"1\":{\"731\":1}}],[\"有啥缺点\",{\"0\":{\"726\":1}}],[\"有三个\",{\"1\":{\"688\":1}}],[\"有难度\",{\"1\":{\"688\":1}}],[\"有限制条件的通配符使用\",{\"1\":{\"688\":1}}],[\"有两种拆分方法\",{\"1\":{\"960\":1}}],[\"有两种策略\",{\"1\":{\"932\":1}}],[\"有两种模式\",{\"1\":{\"900\":1}}],[\"有两种错误类型是\",{\"1\":{\"99\":1}}],[\"有两个稍微有点经验的程序员\",{\"1\":{\"1104\":1}}],[\"有两个\",{\"1\":{\"688\":1,\"934\":1,\"961\":1}}],[\"有序数组就是最好的数据结构了\",{\"1\":{\"915\":1}}],[\"有序数组\",{\"0\":{\"915\":1}}],[\"有序数组和搜索树\",{\"1\":{\"913\":1}}],[\"有序数组索引只适用于静态存储引擎\",{\"1\":{\"913\":1,\"915\":1}}],[\"有序集合\",{\"1\":{\"868\":1}}],[\"有序\",{\"1\":{\"688\":1}}],[\"有序性\",{\"1\":{\"284\":1}}],[\"有空多看看源码\",{\"1\":{\"687\":1}}],[\"有模板\",{\"1\":{\"687\":1}}],[\"有了多核技术\",{\"1\":{\"1095\":1}}],[\"有了这技术其实去网吧都可以实现免费上网了\",{\"1\":{\"1160\":1}}],[\"有了这层兜底机制保证\",{\"1\":{\"972\":1}}],[\"有了这个声明后\",{\"1\":{\"935\":1}}],[\"有了这个功能\",{\"1\":{\"927\":1}}],[\"有了对这两个日志的概念性理解\",{\"1\":{\"900\":1}}],[\"有了对象的多态性以后\",{\"0\":{\"699\":1},\"1\":{\"686\":1}}],[\"有了消息队列\",{\"1\":{\"813\":1}}],[\"有了\",{\"1\":{\"727\":1,\"899\":1}}],[\"有了它就可以很方便的看数据库的变化了\",{\"1\":{\"257\":1}}],[\"有点搞混\",{\"1\":{\"866\":1}}],[\"有点抽风\",{\"1\":{\"797\":1,\"983\":1}}],[\"有点像工具类靠\",{\"1\":{\"686\":1}}],[\"有点强类型语言的意思\",{\"1\":{\"216\":1}}],[\"有没有很眼熟\",{\"1\":{\"972\":1}}],[\"有没有可能经过索引优化\",{\"1\":{\"921\":1}}],[\"有没有可能选择错等等\",{\"1\":{\"896\":1}}],[\"有没有什么场景适合用业务字段直接做主键的呢\",{\"1\":{\"918\":1}}],[\"有没有执行查询的权限\",{\"1\":{\"897\":1}}],[\"有没有这个环境可以看下src目录有没有redis\",{\"1\":{\"865\":1}}],[\"有没有解决办法呢\",{\"1\":{\"708\":1}}],[\"有没有\",{\"1\":{\"686\":2}}],[\"有没有一种新的技术诞生\",{\"1\":{\"594\":1}}],[\"有a\",{\"1\":{\"656\":1}}],[\"有时候你想push一个文件\",{\"1\":{\"987\":1}}],[\"有时候也翻译成虚引用\",{\"1\":{\"636\":1}}],[\"有时可以省略\",{\"1\":{\"750\":1}}],[\"有时间再回过头看视频\",{\"1\":{\"688\":1}}],[\"有时不生效\",{\"1\":{\"71\":1}}],[\"有test权限才能访问指定接口\",{\"1\":{\"629\":1}}],[\"有ttl默认30s\",{\"1\":{\"115\":1}}],[\"有太过深入的了解\",{\"1\":{\"621\":1}}],[\"有一种感觉\",{\"1\":{\"1162\":1}}],[\"有一定概率宕机的设备\",{\"1\":{\"572\":1}}],[\"有一个用户\",{\"1\":{\"927\":1}}],[\"有一个参数一个返回值\",{\"1\":{\"876\":1}}],[\"有一个api\",{\"1\":{\"868\":1}}],[\"有一个home的环境变量\",{\"1\":{\"782\":1}}],[\"有一个非常重要的选择器\",{\"1\":{\"712\":1}}],[\"有一个注册中心\",{\"1\":{\"564\":1}}],[\"有一个工具类\",{\"1\":{\"252\":1}}],[\"有就是有没有就是没有\",{\"1\":{\"570\":1}}],[\"有向图\",{\"1\":{\"565\":1}}],[\"有的公司招聘的时候会要求你在这个行业有过经验啥的\",{\"1\":{\"1150\":1}}],[\"有的人也许会在一开始就陷入困境\",{\"1\":{\"1150\":1}}],[\"有的人是被家庭裹挟着内卷\",{\"1\":{\"1076\":1}}],[\"有的时候这些事情会影响到自己的情绪和心情\",{\"1\":{\"1147\":1}}],[\"有的时候看完一本书再从头看\",{\"1\":{\"1144\":1}}],[\"有的是一周一备\",{\"1\":{\"902\":1}}],[\"有的是一天一备\",{\"1\":{\"902\":1}}],[\"有的小伙伴就要问了\",{\"1\":{\"725\":1}}],[\"有的用ga来表示\",{\"1\":{\"554\":1}}],[\"有的线程处于等待分配任务的状态\",{\"1\":{\"367\":1}}],[\"有相对于的方法监听消费这个事件\",{\"1\":{\"543\":1,\"1081\":1}}],[\"有数据源\",{\"1\":{\"506\":1}}],[\"有参构造函数注入\",{\"1\":{\"487\":1}}],[\"有参构造没用看门狗\",{\"1\":{\"115\":1}}],[\"有需要就去读文档就好\",{\"1\":{\"465\":1}}],[\"有第二个线程加入锁竞争\",{\"1\":{\"379\":1}}],[\"有返回值\",{\"0\":{\"758\":1},\"1\":{\"361\":1,\"751\":3,\"752\":3}}],[\"有什么作用\",{\"0\":{\"738\":1}}],[\"有什么问题优先看官网\",{\"1\":{\"394\":1}}],[\"有什么区别\",{\"0\":{\"352\":1,\"494\":1},\"1\":{\"352\":1}}],[\"有什么应用场景\",{\"1\":{\"144\":1}}],[\"有个活动监视器\",{\"1\":{\"959\":1}}],[\"有个问题不太明白\",{\"1\":{\"897\":1}}],[\"有个问题\",{\"1\":{\"876\":1}}],[\"有个\",{\"1\":{\"647\":1}}],[\"有个虚假唤醒问题\",{\"1\":{\"348\":1}}],[\"有个开源demo\",{\"1\":{\"153\":1}}],[\"有可能造成系统创建大量同类线程而导致消耗完内存或者\",{\"1\":{\"366\":1}}],[\"有可能造成优先级翻转\",{\"1\":{\"316\":1}}],[\"有可能申请的线程比先申请的线程优先获取锁\",{\"1\":{\"316\":1}}],[\"有可以把\",{\"1\":{\"253\":1}}],[\"有些公司的\",{\"1\":{\"1130\":1}}],[\"有些福利并不是每个月发放的\",{\"1\":{\"1130\":1}}],[\"有些福利并不是以金钱形式发放的\",{\"1\":{\"1130\":1}}],[\"有些补贴则是每个月都有\",{\"1\":{\"1108\":1}}],[\"有些业务的场景需求是这样的\",{\"1\":{\"918\":1}}],[\"有些框架会习惯不管什么语句先用\",{\"1\":{\"908\":1}}],[\"有些客户端连接框架会默认连接成功后先执行一个\",{\"1\":{\"907\":1}}],[\"有些时候\",{\"1\":{\"893\":1,\"897\":1}}],[\"有些系统也有这个功能\",{\"1\":{\"887\":1}}],[\"有些人可能觉得\",{\"1\":{\"740\":1}}],[\"有些东西封装好了直接用就好了\",{\"1\":{\"688\":1}}],[\"有些什么配置一目了然\",{\"1\":{\"466\":1}}],[\"有些数据还需要远程调用\",{\"1\":{\"372\":1}}],[\"有些地方成为栈空间\",{\"1\":{\"287\":1}}],[\"有些复杂我暂时略过了\",{\"1\":{\"87\":1}}],[\"有几个构造器就有几个<init>方法\",{\"1\":{\"658\":1}}],[\"有几个核心就会执行几个线程\",{\"1\":{\"286\":1}}],[\"有几种方式可以给\",{\"1\":{\"522\":1}}],[\"有几种解决方案\",{\"1\":{\"52\":1}}],[\"有windows版可以本地运行\",{\"1\":{\"261\":1}}],[\"有利于面试\",{\"1\":{\"261\":1}}],[\"有bug\",{\"1\":{\"202\":1}}],[\"有所不同\",{\"1\":{\"182\":1}}],[\"有拦截器\",{\"1\":{\"157\":1}}],[\"有很多有趣的东西等着我们去发现\",{\"1\":{\"1160\":1}}],[\"有很多更厉害的人\",{\"1\":{\"1140\":1}}],[\"有很多图标被版本控制的操作没显示出来\",{\"1\":{\"990\":1}}],[\"有很多人并没有真正从根本上搞懂为什么要拆分\",{\"1\":{\"961\":1}}],[\"有很多复杂概念\",{\"1\":{\"818\":1}}],[\"有很多爆红的类其实导入相应的dependency就不会爆红了\",{\"1\":{\"481\":1}}],[\"有很多加密算法\",{\"1\":{\"132\":1}}],[\"有很大局限性\",{\"1\":{\"81\":1}}],[\"有解决方案但是要多写个接口调用一下\",{\"1\":{\"124\":1}}],[\"有简单的方式处理这些\",{\"1\":{\"121\":1}}],[\"有看门狗\",{\"1\":{\"115\":1}}],[\"有中文\",{\"1\":{\"112\":1}}],[\"有错误不要蒙头瞎搞\",{\"1\":{\"72\":1}}],[\"有\",{\"1\":{\"65\":1,\"267\":1,\"574\":1,\"627\":3,\"712\":1,\"715\":2,\"884\":1,\"932\":1}}],[\"有四种方法可以实现会话跟踪技术\",{\"1\":{\"49\":1}}],[\"有八种\",{\"1\":{\"46\":1}}],[\"770\",{\"1\":{\"786\":2}}],[\"777\",{\"1\":{\"267\":1,\"786\":1}}],[\"75kg\",{\"1\":{\"959\":1}}],[\"75可能是通过统计学的泊松分布算出来的0\",{\"1\":{\"703\":1}}],[\"75\",{\"1\":{\"703\":4}}],[\"7层\",{\"1\":{\"688\":1}}],[\"7类似单例的饿汉式\",{\"1\":{\"688\":1}}],[\"7不支持批量保存\",{\"1\":{\"608\":1}}],[\"7代表周一到周日\",{\"1\":{\"202\":1}}],[\"7890\",{\"1\":{\"198\":1,\"782\":1,\"1003\":3}}],[\"7s\",{\"1\":{\"179\":1}}],[\"7ur\",{\"1\":{\"133\":2}}],[\"70分钟\",{\"1\":{\"807\":1}}],[\"70bab9b529ec42ebafd850cd5877dcdd\",{\"1\":{\"671\":1}}],[\"7001\",{\"1\":{\"591\":1}}],[\"700\",{\"1\":{\"102\":1,\"918\":1,\"921\":1}}],[\"70\",{\"1\":{\"76\":1}}],[\"7\",{\"0\":{\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"279\":1,\"364\":1,\"367\":1,\"438\":1,\"499\":1,\"535\":1,\"536\":1,\"674\":1,\"740\":1,\"1071\":1},\"1\":{\"47\":1,\"102\":1,\"210\":2,\"216\":1,\"261\":1,\"267\":4,\"290\":1,\"331\":1,\"335\":1,\"338\":2,\"339\":2,\"364\":1,\"386\":1,\"415\":1,\"574\":1,\"608\":2,\"625\":1,\"658\":4,\"674\":1,\"688\":2,\"703\":1,\"713\":1,\"722\":1,\"740\":2,\"767\":1,\"775\":1,\"786\":2,\"791\":2,\"792\":1,\"802\":1,\"808\":1,\"893\":1,\"921\":1,\"951\":1,\"961\":1,\"974\":1,\"994\":1,\"1005\":3,\"1006\":1}}],[\"gn作草稿和做四级卷子可以和欧路搭配收藏生词其他时候主力军还是nb\",{\"1\":{\"1164\":1}}],[\"gmail\",{\"1\":{\"1005\":1}}],[\"gmt\",{\"1\":{\"47\":1,\"48\":1}}],[\"gp=\",{\"1\":{\"1005\":1}}],[\"gpt\",{\"1\":{\"152\":1,\"182\":1,\"321\":1,\"540\":1,\"890\":1}}],[\"gh\",{\"1\":{\"1003\":1,\"1005\":2}}],[\"ghp\",{\"1\":{\"985\":1}}],[\"gyswm\",{\"1\":{\"959\":1}}],[\"gysfhhz\",{\"1\":{\"959\":1}}],[\"gqk\",{\"1\":{\"959\":2}}],[\"gg\",{\"1\":{\"921\":1}}],[\"g<\",{\"1\":{\"688\":1}}],[\"g<a>和g<b>是没有任何关系的\",{\"1\":{\"688\":1}}],[\"gbk一个汉字2个字节\",{\"1\":{\"687\":1}}],[\"gz\",{\"1\":{\"598\":1,\"787\":1,\"800\":1}}],[\"gzip\",{\"1\":{\"47\":1,\"48\":1,\"787\":1,\"800\":1}}],[\"grant\",{\"1\":{\"793\":2,\"803\":2}}],[\"gradle\",{\"1\":{\"499\":1}}],[\"grade\",{\"1\":{\"473\":1}}],[\"grpc\",{\"1\":{\"713\":1}}],[\"grebase=\",{\"1\":{\"1005\":1}}],[\"grep\",{\"1\":{\"734\":1,\"802\":1,\"808\":1,\"1005\":1}}],[\"greenwich\",{\"1\":{\"594\":2}}],[\"greater\",{\"1\":{\"362\":1}}],[\"groups\",{\"1\":{\"1013\":2}}],[\"group=dev\",{\"1\":{\"598\":4}}],[\"group=default\",{\"1\":{\"598\":1}}],[\"group可以把不同的微服务划分到同一个分组里面去\",{\"1\":{\"598\":1}}],[\"group默认是default\",{\"1\":{\"598\":1}}],[\"group\",{\"0\":{\"946\":1,\"1019\":1},\"1\":{\"123\":1,\"594\":1,\"598\":3,\"608\":2,\"786\":2,\"943\":1,\"946\":2,\"953\":2,\"954\":1,\"955\":1,\"959\":12,\"963\":1,\"1005\":1,\"1019\":1}}],[\"groupid>\",{\"1\":{\"105\":1,\"238\":2,\"242\":1,\"397\":5,\"458\":14,\"476\":2,\"477\":1,\"492\":1,\"546\":3,\"556\":3,\"589\":1,\"594\":1,\"828\":1,\"1010\":3}}],[\"gif\",{\"1\":{\"879\":1}}],[\"given\",{\"1\":{\"317\":1}}],[\"gitbook\",{\"1\":{\"1145\":1}}],[\"gitignore\",{\"1\":{\"1005\":2}}],[\"gitignore放到项目里\",{\"1\":{\"987\":1}}],[\"git=hub\",{\"1\":{\"1005\":1}}],[\"gitconfig\",{\"1\":{\"1005\":1}}],[\"gitconfig=\",{\"1\":{\"1005\":1}}],[\"git的变基\",{\"1\":{\"990\":1}}],[\"git中的变基\",{\"1\":{\"990\":1}}],[\"git新建分支出现fatal\",{\"1\":{\"987\":1}}],[\"git也有很多场景示例\",{\"1\":{\"607\":1}}],[\"git\",{\"0\":{\"982\":1},\"1\":{\"591\":2,\"593\":1,\"596\":1,\"797\":2,\"799\":10,\"983\":2,\"985\":7,\"986\":5,\"987\":16,\"988\":3,\"989\":1,\"990\":18,\"994\":1,\"996\":2,\"1003\":1,\"1005\":36}}],[\"gitee\",{\"1\":{\"153\":1,\"261\":1,\"594\":1,\"986\":3,\"987\":2,\"1161\":1}}],[\"githubusercontent\",{\"1\":{\"1003\":1,\"1005\":1}}],[\"github考虑到了用下面的省事\",{\"1\":{\"994\":1}}],[\"github的官方用户\",{\"1\":{\"994\":1}}],[\"github新功能actions全方位讲解\",{\"1\":{\"994\":1}}],[\"github\",{\"0\":{\"77\":1,\"994\":1},\"1\":{\"261\":1,\"262\":1,\"393\":1,\"594\":4,\"677\":1,\"713\":1,\"797\":3,\"799\":2,\"983\":3,\"985\":2,\"994\":5,\"1005\":18,\"1127\":1,\"1145\":1,\"1155\":1,\"1159\":1,\"1161\":1}}],[\"gitrepo\",{\"1\":{\"73\":2}}],[\"gt=\",{\"1\":{\"1005\":1}}],[\"gt\",{\"1\":{\"278\":1}}],[\"gte\",{\"1\":{\"278\":2}}],[\"ga=\",{\"1\":{\"1005\":1}}],[\"gas\",{\"1\":{\"1003\":1}}],[\"gain\",{\"1\":{\"955\":1}}],[\"garbage\",{\"1\":{\"634\":2}}],[\"ga\",{\"1\":{\"554\":1}}],[\"gao\",{\"1\":{\"238\":1}}],[\"gateway在微服务中自动为我们创建的负载均衡uri\",{\"1\":{\"591\":1}}],[\"gateway针对前端和后台服务\",{\"1\":{\"590\":1}}],[\"gateway是原\",{\"1\":{\"590\":1}}],[\"gateway跨域解决方案\",{\"1\":{\"231\":1}}],[\"gateway+简单服务\",{\"1\":{\"102\":1}}],[\"gateway\",{\"1\":{\"48\":1,\"102\":1,\"228\":1,\"231\":1,\"261\":1,\"466\":1,\"589\":1,\"590\":1,\"591\":3,\"594\":1,\"713\":1}}],[\"globaltransactional\",{\"1\":{\"594\":1,\"605\":1,\"607\":1,\"608\":1}}],[\"globalexceptionhandler\",{\"1\":{\"520\":1}}],[\"global\",{\"1\":{\"229\":1,\"584\":1,\"608\":1,\"802\":2,\"927\":2,\"986\":2,\"993\":2,\"1005\":5}}],[\"g\",{\"1\":{\"222\":2,\"691\":2,\"1005\":2,\"1006\":1,\"1092\":1,\"1161\":1}}],[\"guli\",{\"0\":{\"1171\":1}}],[\"gulimall未解决不做了\",{\"1\":{\"546\":1}}],[\"gulimall的时候雷神好像是用的拦截器\",{\"1\":{\"157\":1}}],[\"gulimallsessionconfig\",{\"0\":{\"151\":1},\"1\":{\"148\":1}}],[\"gulimallwebconfig\",{\"1\":{\"97\":1,\"534\":2}}],[\"gulimall\",{\"0\":{\"579\":1},\"1\":{\"72\":3,\"78\":2,\"79\":1,\"87\":1,\"94\":2,\"125\":1,\"141\":2,\"147\":2,\"156\":1,\"229\":1,\"240\":1,\"352\":1,\"370\":1,\"377\":1,\"523\":1,\"534\":2,\"576\":3,\"591\":1,\"597\":1,\"605\":1,\"858\":1,\"876\":1}}],[\"guiqp2022\",{\"1\":{\"731\":1}}],[\"guide\",{\"1\":{\"136\":1}}],[\"gclean=\",{\"1\":{\"1005\":1}}],[\"gcr=\",{\"1\":{\"1005\":1}}],[\"gcroot\",{\"1\":{\"392\":1}}],[\"gc=\",{\"1\":{\"1005\":1}}],[\"gc垃圾回收线程\",{\"1\":{\"687\":1}}],[\"gc对程序的影响\",{\"1\":{\"389\":1}}],[\"gc后仍然能够存活\",{\"1\":{\"385\":1}}],[\"gc\",{\"0\":{\"701\":1},\"1\":{\"101\":2,\"389\":5,\"634\":1}}],[\"go来弥补\",{\"1\":{\"1160\":1}}],[\"goodnotes\",{\"1\":{\"723\":1,\"1164\":1}}],[\"good\",{\"1\":{\"170\":1,\"687\":2,\"691\":2,\"906\":1}}],[\"goods\",{\"1\":{\"170\":1,\"906\":1}}],[\"google到的笔记很详细\",{\"1\":{\"203\":1}}],[\"google\",{\"1\":{\"47\":1,\"62\":1,\"90\":1,\"147\":1,\"393\":1,\"1003\":1,\"1005\":6,\"1006\":1,\"1145\":1,\"1150\":4}}],[\"go\",{\"0\":{\"1160\":1},\"1\":{\"76\":1,\"1150\":2}}],[\"geekbang\",{\"0\":{\"1187\":1}}],[\"geek\",{\"1\":{\"925\":2}}],[\"geospatial\",{\"1\":{\"869\":1}}],[\"geronimo\",{\"1\":{\"458\":1}}],[\"gender=\",{\"1\":{\"430\":1,\"432\":1,\"434\":2}}],[\"gender==1\",{\"1\":{\"430\":1,\"432\":1}}],[\"gender==0\",{\"1\":{\"430\":1,\"432\":1}}],[\"gender\",{\"1\":{\"277\":1,\"419\":2,\"421\":1,\"422\":2,\"426\":4,\"429\":5,\"430\":1,\"432\":1,\"433\":1,\"434\":4,\"437\":3,\"440\":1}}],[\"generated\",{\"1\":{\"993\":2}}],[\"generate\",{\"1\":{\"689\":2}}],[\"generator\",{\"1\":{\"458\":1,\"465\":1}}],[\"generator<\",{\"1\":{\"458\":1}}],[\"generational\",{\"1\":{\"385\":1}}],[\"generation\",{\"1\":{\"383\":1,\"385\":3,\"473\":1}}],[\"general\",{\"0\":{\"46\":1},\"1\":{\"554\":1,\"805\":1,\"908\":3,\"1005\":1,\"1006\":1}}],[\"genericobjectpoolconfig\",{\"1\":{\"1010\":1}}],[\"generic\",{\"1\":{\"715\":1}}],[\"generic<t>\",{\"1\":{\"715\":1}}],[\"genericfastjsonredisserializer\",{\"1\":{\"148\":1}}],[\"genericjackson2jsonredisserializer\",{\"1\":{\"125\":2}}],[\"gecko\",{\"1\":{\"47\":1}}],[\"getfamilyid\",{\"1\":{\"776\":2}}],[\"getfield\",{\"1\":{\"130\":1,\"290\":1}}],[\"getfielderrors\",{\"1\":{\"130\":1}}],[\"getnumber\",{\"1\":{\"771\":1}}],[\"getname\",{\"1\":{\"302\":1,\"334\":2,\"335\":2,\"338\":1,\"339\":1,\"343\":2,\"352\":3,\"374\":2,\"492\":1,\"730\":1,\"887\":2}}],[\"getrouters\",{\"1\":{\"883\":1}}],[\"getrolename\",{\"1\":{\"743\":2,\"1101\":2}}],[\"getresttemplate\",{\"1\":{\"566\":1}}],[\"getresource\",{\"1\":{\"454\":1}}],[\"getresourceasstream\",{\"1\":{\"402\":1,\"779\":1}}],[\"getremoteaddr\",{\"1\":{\"492\":1}}],[\"getrequesturl\",{\"1\":{\"492\":1}}],[\"getrequest\",{\"1\":{\"492\":1,\"885\":1}}],[\"getrequestattributes\",{\"1\":{\"161\":1,\"492\":1,\"885\":1}}],[\"getredis\",{\"1\":{\"125\":1}}],[\"getwriter\",{\"1\":{\"632\":1}}],[\"getheaders\",{\"1\":{\"613\":1}}],[\"getdeliverytag\",{\"1\":{\"837\":2}}],[\"getdeclaringclass\",{\"1\":{\"887\":1}}],[\"getdeclaringtypename\",{\"1\":{\"492\":1}}],[\"getdeclaredfield\",{\"1\":{\"721\":1}}],[\"getdeclaredmethod\",{\"1\":{\"715\":1}}],[\"getdepartmentname\",{\"1\":{\"427\":1}}],[\"getdeptbyidstep\",{\"1\":{\"427\":3}}],[\"getdeptbyidplus\",{\"1\":{\"426\":3}}],[\"getdeptbyid\",{\"1\":{\"422\":1,\"423\":1,\"429\":2}}],[\"getdefaultmessage\",{\"1\":{\"130\":1}}],[\"getifaddr\",{\"1\":{\"1005\":3}}],[\"getinfo\",{\"1\":{\"883\":1}}],[\"getinstance\",{\"1\":{\"301\":1,\"302\":1,\"718\":1,\"779\":3}}],[\"getid\",{\"1\":{\"403\":1}}],[\"getuuid\",{\"1\":{\"1081\":1}}],[\"geturls\",{\"1\":{\"889\":1}}],[\"getusername\",{\"1\":{\"624\":1,\"776\":2}}],[\"getusers\",{\"1\":{\"392\":1}}],[\"getuniqueinstance\",{\"1\":{\"302\":1,\"779\":1}}],[\"getperson\",{\"1\":{\"763\":4}}],[\"getproperty\",{\"1\":{\"547\":1,\"779\":1}}],[\"getpassword\",{\"1\":{\"624\":2}}],[\"getpayload\",{\"1\":{\"613\":1}}],[\"getparameter\",{\"1\":{\"512\":1,\"885\":3}}],[\"getparentcid\",{\"1\":{\"229\":2}}],[\"getpath\",{\"1\":{\"454\":1}}],[\"getpool\",{\"1\":{\"369\":1}}],[\"getargs\",{\"1\":{\"492\":1}}],[\"getannoparam\",{\"1\":{\"408\":2}}],[\"getandincrement\",{\"1\":{\"304\":1}}],[\"getattrname\",{\"1\":{\"252\":1}}],[\"getautowirecapablebeanfactory\",{\"1\":{\"124\":1}}],[\"getmd5\",{\"1\":{\"1084\":2}}],[\"getmessageproperties\",{\"1\":{\"837\":2}}],[\"getmethod\",{\"1\":{\"492\":1,\"887\":1}}],[\"getmenus\",{\"1\":{\"229\":2}}],[\"getmapprimarytoentity\",{\"1\":{\"416\":3}}],[\"getmapper\",{\"1\":{\"403\":1,\"415\":1,\"419\":1,\"427\":1,\"429\":1,\"430\":1,\"436\":1,\"443\":1,\"447\":2,\"465\":2}}],[\"getmapping\",{\"0\":{\"515\":1},\"1\":{\"60\":4,\"97\":1,\"492\":1,\"511\":1,\"515\":1}}],[\"getcodeimg\",{\"1\":{\"879\":1}}],[\"getcodeimg方法封装到login\",{\"1\":{\"879\":1}}],[\"getcode\",{\"1\":{\"879\":1}}],[\"getconstructor\",{\"1\":{\"688\":1}}],[\"getcontext\",{\"1\":{\"627\":1}}],[\"getcwd\",{\"1\":{\"540\":1}}],[\"getcandidateconfigurations\",{\"1\":{\"483\":1}}],[\"getcatid\",{\"1\":{\"229\":1}}],[\"getcatalogjson\",{\"1\":{\"123\":1}}],[\"getclassloader\",{\"1\":{\"454\":1,\"779\":1}}],[\"getclass\",{\"1\":{\"240\":1,\"688\":1,\"715\":1,\"717\":1}}],[\"getchildrens\",{\"1\":{\"229\":3}}],[\"getsum\",{\"1\":{\"680\":2}}],[\"getsourceargs\",{\"1\":{\"546\":1}}],[\"getsort\",{\"1\":{\"229\":6}}],[\"getsignature\",{\"1\":{\"492\":2,\"887\":1}}],[\"getstudentbyidreturnmap\",{\"1\":{\"415\":4}}],[\"getstring\",{\"1\":{\"139\":1}}],[\"getsqlsession\",{\"1\":{\"402\":1,\"403\":1,\"415\":1,\"419\":1,\"427\":1,\"429\":1,\"430\":1,\"436\":1,\"443\":1,\"447\":2}}],[\"getshowstatus\",{\"1\":{\"236\":1}}],[\"getsemaphore\",{\"1\":{\"202\":1}}],[\"getenv\",{\"1\":{\"549\":1}}],[\"getentity\",{\"1\":{\"139\":1}}],[\"getempsbyconditionforeach\",{\"1\":{\"436\":2}}],[\"getempsbyconditionchoose\",{\"1\":{\"433\":1}}],[\"getempsbyconditiontrim\",{\"1\":{\"432\":1}}],[\"getempsbydeptid\",{\"1\":{\"427\":3,\"428\":1}}],[\"getempstestinnerparameter\",{\"1\":{\"430\":2,\"438\":2}}],[\"getemps\",{\"1\":{\"427\":1}}],[\"getempanddept2\",{\"1\":{\"422\":1}}],[\"getempanddept\",{\"1\":{\"421\":3}}],[\"getempbyidstep\",{\"1\":{\"423\":3,\"429\":2}}],[\"getempbyid\",{\"1\":{\"419\":3,\"443\":2,\"447\":2}}],[\"getelementbyid\",{\"1\":{\"61\":1}}],[\"getbrandid\",{\"1\":{\"236\":1}}],[\"getbalance\",{\"1\":{\"182\":1}}],[\"getbytes\",{\"1\":{\"132\":1,\"687\":1}}],[\"getbeandefinitionnames\",{\"1\":{\"480\":1}}],[\"getbean\",{\"1\":{\"124\":2,\"486\":1,\"517\":1,\"538\":3,\"884\":2,\"1082\":4}}],[\"getkeyprefix\",{\"1\":{\"125\":2}}],[\"getting\",{\"1\":{\"994\":1}}],[\"gettimetolive\",{\"1\":{\"125\":2}}],[\"getters\",{\"1\":{\"683\":1}}],[\"gettoken\",{\"1\":{\"67\":1}}],[\"gettokenkey\",{\"1\":{\"67\":1}}],[\"getversion\",{\"1\":{\"124\":1}}],[\"getlevel1category\",{\"1\":{\"123\":1}}],[\"getlogger\",{\"1\":{\"492\":1,\"730\":1}}],[\"getlogintime\",{\"1\":{\"67\":1}}],[\"getloginuser\",{\"1\":{\"67\":1}}],[\"getlock\",{\"1\":{\"115\":1}}],[\"get\",{\"0\":{\"743\":1,\"1101\":1},\"1\":{\"46\":1,\"89\":1,\"103\":2,\"105\":1,\"128\":1,\"157\":6,\"233\":1,\"270\":4,\"273\":1,\"274\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"279\":1,\"310\":2,\"357\":2,\"372\":1,\"374\":1,\"462\":1,\"576\":1,\"590\":2,\"591\":1,\"660\":2,\"688\":1,\"713\":1,\"771\":2,\"789\":1,\"801\":1,\"852\":2,\"994\":1,\"1084\":6}}],[\"用了很久很久了估摸着也有4\",{\"1\":{\"1162\":1}}],[\"用了宝塔\",{\"1\":{\"1157\":1}}],[\"用了docker\",{\"1\":{\"1157\":1}}],[\"用了自定义图床\",{\"1\":{\"1005\":1}}],[\"用记事本把自己刚刚学的的东西写一下\",{\"1\":{\"1144\":1}}],[\"用过\",{\"1\":{\"1134\":2}}],[\"用wepe自带安装器\",{\"1\":{\"1027\":1}}],[\"用cmd+上下滚动\",{\"1\":{\"998\":1}}],[\"用pt\",{\"1\":{\"976\":1}}],[\"用它来做路由\",{\"1\":{\"961\":1}}],[\"用index\",{\"1\":{\"936\":1}}],[\"用ip代替\",{\"1\":{\"793\":1,\"803\":1}}],[\"用二分法就可以快速得到\",{\"1\":{\"915\":1}}],[\"用一个哈希函数把\",{\"1\":{\"914\":1}}],[\"用一用exchange\",{\"1\":{\"823\":1}}],[\"用注解简化\",{\"1\":{\"876\":1}}],[\"用就好了啊\",{\"1\":{\"740\":1}}],[\"用之前还要先做对数组的长度取模运算\",{\"1\":{\"739\":1}}],[\"用官方的总结就是\",{\"1\":{\"713\":1}}],[\"用java\",{\"1\":{\"660\":1}}],[\"用full模式\",{\"1\":{\"517\":1}}],[\"用法二\",{\"0\":{\"437\":1}}],[\"用法一\",{\"0\":{\"436\":1}}],[\"用单据号作为分布式锁的key\",{\"1\":{\"380\":1}}],[\"用新的lock有什么好处\",{\"0\":{\"352\":1},\"1\":{\"352\":1}}],[\"用原子引用类进行包装起来\",{\"1\":{\"310\":1}}],[\"用该对象当前的值与var5比较\",{\"1\":{\"305\":1}}],[\"用var1和var2找到的内存中的真实值\",{\"1\":{\"305\":1}}],[\"用好数据库连接池\",{\"0\":{\"260\":1}}],[\"用个枚举类囊括\",{\"1\":{\"240\":1}}],[\"用updatewrapper也是不行的\",{\"1\":{\"236\":1}}],[\"用到上面\",{\"1\":{\"626\":1}}],[\"用到的时候再回头看别人笔记\",{\"1\":{\"348\":1}}],[\"用到\",{\"1\":{\"229\":1}}],[\"用构造函数创建的正则表达式会被编译\",{\"1\":{\"216\":1}}],[\"用反引号\",{\"1\":{\"216\":1}}],[\"用map接参的\",{\"1\":{\"252\":1}}],[\"用mq保证最终一致性\",{\"1\":{\"838\":1}}],[\"用mq\",{\"1\":{\"183\":1,\"607\":1,\"608\":1}}],[\"用mime类型来表示\",{\"1\":{\"47\":1}}],[\"用泛型来放我们的to对象\",{\"1\":{\"156\":1}}],[\"用key=\",{\"1\":{\"123\":1}}],[\"用于阻止\",{\"1\":{\"1161\":1}}],[\"用于执行命令和脚本\",{\"1\":{\"1037\":1}}],[\"用于快速打开网站\",{\"1\":{\"1005\":1}}],[\"用于存代码\",{\"1\":{\"1004\":1}}],[\"用于存储局部变量\",{\"1\":{\"778\":1}}],[\"用于存储\",{\"1\":{\"156\":1}}],[\"用于存储线程的局部变量\",{\"1\":{\"156\":1}}],[\"用于标识从互联网或其他不可信来源下载的应用程序\",{\"1\":{\"999\":1}}],[\"用于删除\",{\"1\":{\"999\":1}}],[\"用于记录当前这一行数据行是被哪个事务修改的\",{\"1\":{\"972\":1}}],[\"用于唯一标识表中每一行数据的物理地址\",{\"1\":{\"967\":1}}],[\"用于合并\",{\"1\":{\"959\":1}}],[\"用于指定公共表表达式的列名\",{\"1\":{\"959\":1}}],[\"用于指定字符集合之外的任意一个字符\",{\"1\":{\"959\":1}}],[\"用于指定字符集合中的任意一个字符\",{\"1\":{\"959\":1}}],[\"用于匹配任意单个字符\",{\"1\":{\"959\":1}}],[\"用于匹配任意字符\",{\"1\":{\"959\":1}}],[\"用于支持数据的物理存储和访问\",{\"1\":{\"967\":1}}],[\"用于支持\",{\"1\":{\"934\":1}}],[\"用于查找持续时间超过\",{\"1\":{\"907\":1}}],[\"用于保证\",{\"1\":{\"902\":1}}],[\"用于保存各种软件配置\",{\"1\":{\"1004\":1}}],[\"用于保存\",{\"1\":{\"543\":1}}],[\"用于保存实例化完成的\",{\"1\":{\"543\":1}}],[\"用于保存实例化\",{\"1\":{\"543\":1}}],[\"用于回滚事务\",{\"1\":{\"902\":1}}],[\"用于自己复习\",{\"1\":{\"891\":1}}],[\"用于客户端发送刷新令牌的请求\",{\"1\":{\"890\":1}}],[\"用于统一管理我们项目中各种数据的交互和重用\",{\"1\":{\"883\":1}}],[\"用于统一处理所有\",{\"1\":{\"520\":1}}],[\"用于方便地进行开发和调试\",{\"1\":{\"883\":1}}],[\"用于接收队列中的消息并进行处理\",{\"1\":{\"827\":1}}],[\"用于创建交换机和队列\",{\"1\":{\"827\":1}}],[\"用于消息队列和交换器之间的关联\",{\"1\":{\"823\":1}}],[\"用于生成\",{\"1\":{\"808\":1}}],[\"用于返回两个person对象\",{\"1\":{\"763\":1}}],[\"用于继承泛型类时保证多态\",{\"1\":{\"716\":1}}],[\"用于提升性能和节省内存\",{\"1\":{\"686\":1}}],[\"用于直接访问类\",{\"1\":{\"679\":1}}],[\"用于描述类\",{\"1\":{\"679\":1}}],[\"用于在已排序的数组中进行二分查找\",{\"1\":{\"672\":1}}],[\"用于在应用启动后执行一些特定的任务\",{\"1\":{\"546\":1,\"1166\":1}}],[\"用于定义一组相似权限的集合\",{\"1\":{\"630\":1}}],[\"用于配置和自定义安全相关的设置\",{\"1\":{\"625\":1}}],[\"用于获取用户密码\",{\"1\":{\"624\":1}}],[\"用于简化http\",{\"1\":{\"581\":1}}],[\"用于对由外部事件驱动系统业务逻辑这类应用程序进行建模\",{\"1\":{\"543\":1,\"1081\":1}}],[\"用于将二进制数据转换为可打印的\",{\"1\":{\"1081\":1}}],[\"用于将任意长度的数据映射为固定长度的哈希值\",{\"1\":{\"539\":1}}],[\"用于将请求映射到文件系统中的不同位置\",{\"1\":{\"73\":1}}],[\"用于拦截所有请求\",{\"1\":{\"534\":1}}],[\"用于使注解在运行时可以通过反射来访问和处理\",{\"1\":{\"500\":1}}],[\"用于实现自动装配\",{\"1\":{\"488\":1}}],[\"用于完成某个功能的一个过程\",{\"1\":{\"303\":1}}],[\"用于改完配置后重启\",{\"1\":{\"211\":1}}],[\"用于管理该线程的局部变量\",{\"1\":{\"156\":1}}],[\"用于检查请求和响应\",{\"1\":{\"156\":1}}],[\"用于反序列化\",{\"1\":{\"123\":1}}],[\"用带参参构造就不会用看门狗\",{\"1\":{\"115\":1}}],[\"用来做笔记也不错\",{\"1\":{\"1145\":1}}],[\"用来创建子串或引用\",{\"1\":{\"1019\":1}}],[\"用来保存这个事务启动瞬间\",{\"1\":{\"935\":1}}],[\"用来保存消息直到发送给消费者\",{\"1\":{\"823\":1}}],[\"用来保证变更表结构操作的安全性\",{\"1\":{\"928\":1}}],[\"用来跟服务端建立连接\",{\"1\":{\"893\":1}}],[\"用来解决\",{\"1\":{\"849\":1}}],[\"用来接收生产者发送的消息并将这些消息路由给服务器中的队列\",{\"1\":{\"823\":1}}],[\"用来描述方法体\",{\"1\":{\"750\":1,\"752\":1}}],[\"用来描述参数列表\",{\"1\":{\"750\":1,\"752\":1}}],[\"用来连接配置服务器并为客户端提供获取配置信息\",{\"1\":{\"591\":1}}],[\"用来实现分组唤醒需要唤醒的线程\",{\"1\":{\"352\":1}}],[\"用来实现某个特定功能\",{\"1\":{\"302\":1}}],[\"用来序列化和反序列化json的java开源框架\",{\"1\":{\"247\":1}}],[\"用来辨别当前锁是不是自己拿着\",{\"1\":{\"111\":1}}],[\"用来线程id+重入次数\",{\"1\":{\"87\":1,\"115\":1}}],[\"用hps\",{\"1\":{\"100\":1}}],[\"用\",{\"0\":{\"1070\":1},\"1\":{\"100\":1,\"208\":1,\"223\":1,\"229\":1,\"301\":1,\"363\":1,\"391\":2,\"493\":1,\"601\":1,\"660\":2,\"715\":1,\"813\":1,\"907\":1,\"1003\":3,\"1005\":4,\"1006\":7,\"1079\":1}}],[\"用这种方法放到\",{\"1\":{\"507\":1}}],[\"用这种方式\",{\"1\":{\"97\":1}}],[\"用这个方法连\",{\"1\":{\"530\":1}}],[\"用这个util存的值都不一样\",{\"1\":{\"133\":1}}],[\"用这个语句查\",{\"0\":{\"82\":1}}],[\"用的比较少\",{\"1\":{\"1164\":1}}],[\"用的sharelist技术\",{\"1\":{\"1156\":1}}],[\"用的过程\",{\"1\":{\"712\":1}}],[\"用的最多\",{\"1\":{\"688\":1}}],[\"用的多\",{\"1\":{\"685\":1}}],[\"用的是mq柔性事务\",{\"1\":{\"609\":1}}],[\"用的是支付宝的沙盒\",{\"1\":{\"190\":1}}],[\"用的\",{\"1\":{\"476\":1,\"887\":1}}],[\"用的垃圾回收算法\",{\"1\":{\"389\":1}}],[\"用的学校的\",{\"1\":{\"76\":1}}],[\"用的vue\",{\"1\":{\"72\":1}}],[\"用其他的就进不了\",{\"1\":{\"76\":1}}],[\"用双token很多时候是给自己找麻烦\",{\"1\":{\"70\":1}}],[\"用户前台一个\",{\"1\":{\"1097\":1}}],[\"用户～\",{\"1\":{\"998\":1}}],[\"用户目录\",{\"1\":{\"997\":1}}],[\"用户信息根据token\",{\"1\":{\"887\":1}}],[\"用户手动取消\",{\"1\":{\"844\":1}}],[\"用户可以通过\",{\"1\":{\"785\":1}}],[\"用户可以获得与角色相关联的权限\",{\"1\":{\"630\":1}}],[\"用户线程再发起\",{\"1\":{\"712\":1}}],[\"用户进程想要执行\",{\"1\":{\"709\":1}}],[\"用户空间的程序不能直接访问内核空间\",{\"1\":{\"709\":1}}],[\"用户空间\",{\"1\":{\"709\":1}}],[\"用户名密码错误\",{\"1\":{\"624\":1}}],[\"用户提交账号密码时候提交到我们自己的\",{\"1\":{\"621\":1}}],[\"用户最终都是体验到某个功能不可用\",{\"1\":{\"603\":1}}],[\"用户向节点1写入一个值\",{\"1\":{\"572\":1}}],[\"用户发起请求\",{\"1\":{\"543\":1}}],[\"用户去看这个组件是获取的配置文件什么值就去修改\",{\"1\":{\"485\":1}}],[\"用户直接自己\",{\"1\":{\"485\":1}}],[\"用户配的优先\",{\"1\":{\"483\":1}}],[\"用户查询数据就不用从数据库中查询\",{\"1\":{\"441\":1}}],[\"用户需要访问系统资源\",{\"1\":{\"630\":1}}],[\"用户需要\",{\"1\":{\"372\":1}}],[\"用户\",{\"1\":{\"206\":1,\"630\":3,\"927\":2,\"998\":1}}],[\"用户页面回退再次提交\",{\"1\":{\"164\":1}}],[\"用户多次点击按钮\",{\"1\":{\"164\":1}}],[\"用户登录后得到session后\",{\"1\":{\"143\":1}}],[\"用户本人\",{\"1\":{\"136\":1}}],[\"用户主动点击授权\",{\"1\":{\"135\":1}}],[\"用户注册\",{\"1\":{\"130\":1}}],[\"用户数据表等\",{\"1\":{\"960\":1}}],[\"用户数据库userdb等\",{\"1\":{\"960\":1}}],[\"用户数据\",{\"1\":{\"118\":1}}],[\"用户请求一个网站是先到cdn服务器吗\",{\"1\":{\"77\":1}}],[\"用户使用用户名密码来请求服务器\",{\"1\":{\"54\":1}}],[\"用户认证之后\",{\"1\":{\"52\":1}}],[\"用户就会很容易受到跨站请求伪造的攻击\",{\"1\":{\"52\":1}}],[\"用户在访问当前资源之前的位置\",{\"1\":{\"46\":1}}],[\"用户的真实ip会丢失\",{\"1\":{\"46\":1}}],[\"8k\",{\"1\":{\"1107\":1,\"1130\":1}}],[\"81017671\",{\"1\":{\"959\":1}}],[\"8=\",{\"1\":{\"877\":1}}],[\"8容器中进行交互式操作\",{\"1\":{\"790\":1}}],[\"8添加的新特性\",{\"1\":{\"745\":1}}],[\"8函数式编程\",{\"1\":{\"741\":1}}],[\"8时\",{\"1\":{\"688\":1}}],[\"8一个字符3个字节\",{\"1\":{\"687\":1}}],[\"8位所以只关注后面8位就行\",{\"1\":{\"685\":1}}],[\"8的hashmap也是线程不安全的\",{\"1\":{\"694\":1}}],[\"8的源码是在调用add\",{\"1\":{\"688\":1}}],[\"8的实现方式\",{\"1\":{\"685\":1}}],[\"8的dns服务解析的\",{\"1\":{\"76\":1}}],[\"8<\",{\"1\":{\"459\":1}}],[\"8468a0af\",{\"1\":{\"387\":1}}],[\"8推出了一个新的类\",{\"1\":{\"312\":1}}],[\"896\",{\"1\":{\"102\":1}}],[\"8883\",{\"1\":{\"825\":1}}],[\"8859\",{\"1\":{\"688\":1}}],[\"88\",{\"1\":{\"72\":1,\"102\":1,\"591\":1}}],[\"8848\",{\"1\":{\"46\":2,\"47\":1,\"594\":1}}],[\"8002\",{\"1\":{\"574\":1,\"591\":1}}],[\"8001\",{\"1\":{\"566\":1,\"574\":1,\"577\":1,\"583\":2,\"585\":1,\"590\":1,\"591\":2}}],[\"800\",{\"1\":{\"102\":1}}],[\"8082\",{\"1\":{\"153\":1}}],[\"8081\",{\"1\":{\"72\":1,\"153\":1}}],[\"8080`\",{\"1\":{\"883\":1}}],[\"8080\",{\"1\":{\"48\":1,\"71\":1,\"72\":1,\"153\":1,\"229\":1,\"616\":2,\"782\":1,\"810\":1,\"857\":1,\"883\":1,\"994\":1}}],[\"80\",{\"1\":{\"71\":1,\"72\":1,\"73\":2,\"566\":1,\"583\":1,\"585\":1,\"782\":1,\"795\":2,\"810\":1,\"1107\":1}}],[\"83d6\",{\"1\":{\"66\":1}}],[\"8f\",{\"1\":{\"47\":1}}],[\"8e\",{\"1\":{\"47\":1}}],[\"8\",{\"0\":{\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"244\":1,\"368\":1,\"439\":1,\"537\":1,\"538\":1,\"674\":1,\"740\":1},\"1\":{\"47\":3,\"48\":1,\"76\":3,\"102\":3,\"156\":1,\"178\":1,\"220\":1,\"238\":1,\"261\":1,\"283\":1,\"383\":4,\"388\":1,\"400\":1,\"458\":1,\"459\":1,\"460\":1,\"462\":1,\"464\":1,\"546\":1,\"632\":1,\"635\":1,\"658\":4,\"674\":1,\"686\":2,\"688\":1,\"691\":1,\"703\":2,\"740\":4,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"775\":1,\"790\":3,\"796\":1,\"805\":1,\"893\":1,\"894\":2,\"918\":1,\"923\":1,\"961\":1,\"1005\":2,\"1006\":1,\"1010\":1,\"1095\":2,\"1107\":1}}],[\"9十个数字助记符书签的快速添加\",{\"0\":{\"1068\":1}}],[\"9411\",{\"1\":{\"594\":1}}],[\"944\",{\"1\":{\"102\":1}}],[\"93797529\",{\"1\":{\"398\":1}}],[\"9300\",{\"1\":{\"267\":2}}],[\"9201\",{\"1\":{\"282\":1}}],[\"9200\",{\"1\":{\"262\":1,\"267\":3,\"268\":1}}],[\"98337005\",{\"1\":{\"388\":1}}],[\"98\",{\"1\":{\"220\":2}}],[\"98系统的ttl值为32\",{\"1\":{\"76\":1}}],[\"996\",{\"1\":{\"1113\":3}}],[\"999\",{\"1\":{\"920\":1}}],[\"99e54d8e467b26ef66ff560393a00091是一个哈希值\",{\"1\":{\"539\":1}}],[\"99e54d8e467b26ef66ff560393a00091\",{\"1\":{\"539\":1}}],[\"99\",{\"1\":{\"102\":1,\"107\":1,\"220\":1}}],[\"9090\",{\"1\":{\"796\":6}}],[\"9090是web网页后台\",{\"1\":{\"796\":1}}],[\"9000\",{\"1\":{\"796\":5,\"1041\":3}}],[\"9000是url请求地址\",{\"1\":{\"796\":1}}],[\"90\",{\"1\":{\"87\":1,\"100\":2,\"102\":1,\"107\":1,\"1162\":1}}],[\"9527\",{\"1\":{\"590\":1,\"591\":4}}],[\"95\",{\"1\":{\"76\":1,\"197\":1}}],[\"96\",{\"1\":{\"47\":1}}],[\"9e\",{\"1\":{\"47\":1}}],[\"9\",{\"0\":{\"245\":1,\"440\":1,\"539\":1,\"540\":1},\"1\":{\"47\":2,\"140\":2,\"197\":1,\"261\":1,\"283\":1,\"658\":7,\"685\":2,\"767\":1,\"775\":1,\"782\":1,\"877\":1,\"961\":1,\"1005\":1,\"1006\":1}}],[\"xue51\",{\"1\":{\"1154\":1}}],[\"x509\",{\"1\":{\"981\":1}}],[\"xhr\",{\"1\":{\"883\":1}}],[\"xhtml+xml\",{\"1\":{\"47\":1}}],[\"xyzabc\",{\"1\":{\"959\":1}}],[\"xyz\",{\"1\":{\"786\":1}}],[\"xyjnum\",{\"1\":{\"220\":5}}],[\"xyjprice\",{\"1\":{\"220\":3}}],[\"xftp软件上传文件不到云服务器\",{\"1\":{\"782\":1}}],[\"xcomp\",{\"1\":{\"635\":2}}],[\"xattr\",{\"1\":{\"999\":1}}],[\"xa\",{\"1\":{\"608\":1}}],[\"xint\",{\"1\":{\"635\":1}}],[\"xid在微服务调用链路的上下文中传播\",{\"1\":{\"606\":1}}],[\"xid\",{\"1\":{\"606\":1}}],[\"xiaohuochai\",{\"1\":{\"49\":1}}],[\"x版的替代\",{\"1\":{\"590\":1}}],[\"x版本时\",{\"1\":{\"123\":1}}],[\"x或\",{\"1\":{\"547\":1}}],[\"xsd\",{\"1\":{\"459\":1,\"460\":3,\"462\":4}}],[\"xsi\",{\"1\":{\"459\":1,\"460\":1,\"462\":1}}],[\"xsi=\",{\"1\":{\"459\":1,\"460\":1,\"462\":1}}],[\"xss\",{\"1\":{\"383\":1}}],[\"xs\",{\"1\":{\"244\":2}}],[\"xshell多窗口同时输入命令\",{\"1\":{\"110\":1}}],[\"xshell多开\",{\"1\":{\"110\":1}}],[\"xshell\",{\"1\":{\"83\":1,\"789\":1}}],[\"xmind\",{\"1\":{\"1145\":1}}],[\"xmixed\",{\"1\":{\"635\":1}}],[\"xmn\",{\"1\":{\"383\":3}}],[\"xms1024m\",{\"1\":{\"547\":1}}],[\"xms\",{\"1\":{\"383\":2,\"389\":1}}],[\"xms64m\",{\"1\":{\"267\":2}}],[\"xmx256m\",{\"1\":{\"267\":1}}],[\"xmx512m\",{\"1\":{\"267\":1}}],[\"xmx100m\",{\"1\":{\"254\":1}}],[\"xmx\",{\"1\":{\"101\":1,\"383\":2,\"389\":1}}],[\"xml文件\",{\"1\":{\"1012\":1}}],[\"xml里看过配这个的原因\",{\"1\":{\"960\":1}}],[\"xml开启事务底层使用的是\",{\"1\":{\"497\":1}}],[\"xmlschema\",{\"1\":{\"459\":1,\"460\":1,\"462\":1}}],[\"xmlns\",{\"1\":{\"459\":4,\"460\":3,\"462\":4}}],[\"xmlns=\",{\"1\":{\"459\":1,\"460\":1,\"462\":1}}],[\"xml中使用自定义缓存\",{\"1\":{\"451\":1}}],[\"xml中配置使用二级缓存\",{\"1\":{\"448\":1}}],[\"xml<\",{\"1\":{\"397\":1,\"459\":2}}],[\"xml放在java目录下的\",{\"1\":{\"397\":1}}],[\"xmlhttprequest\",{\"1\":{\"49\":1}}],[\"xml\",{\"0\":{\"400\":1,\"459\":1,\"460\":1,\"462\":1,\"464\":1,\"518\":1},\"1\":{\"47\":1,\"48\":1,\"156\":1,\"215\":1,\"219\":1,\"222\":1,\"229\":1,\"400\":3,\"402\":1,\"415\":1,\"416\":1,\"419\":1,\"427\":2,\"429\":2,\"430\":1,\"454\":2,\"459\":4,\"460\":1,\"462\":5,\"464\":1,\"473\":1,\"486\":1,\"489\":1,\"610\":1,\"726\":6,\"738\":1,\"828\":1,\"1009\":4,\"1010\":2,\"1013\":1,\"1084\":1}}],[\"xxuser\",{\"1\":{\"624\":2}}],[\"xx开头\",{\"1\":{\"547\":1}}],[\"xxl\",{\"1\":{\"153\":1}}],[\"xx\",{\"1\":{\"87\":1,\"383\":14,\"806\":3,\"831\":2,\"876\":1,\"948\":5,\"953\":1}}],[\"xxxx\",{\"1\":{\"906\":1,\"1084\":1}}],[\"xxxxproperties里面拿\",{\"1\":{\"485\":1}}],[\"xxxxxx\",{\"1\":{\"1084\":1}}],[\"xxxxxx`\",{\"1\":{\"1005\":1}}],[\"xxxxxworld\",{\"1\":{\"1020\":1}}],[\"xxxxx\",{\"1\":{\"986\":2}}],[\"xxxxxcustomizer\",{\"1\":{\"483\":1}}],[\"xxxxxautoconfiguration\",{\"1\":{\"483\":1,\"485\":2}}],[\"xxxproperties和配置文件进行了绑定\",{\"1\":{\"483\":1,\"485\":1}}],[\"xxx\",{\"0\":{\"626\":1},\"1\":{\"48\":1,\"169\":1,\"210\":1,\"229\":1,\"376\":1,\"411\":1,\"424\":1,\"431\":1,\"531\":1,\"580\":1,\"700\":1,\"715\":2,\"794\":1,\"795\":1,\"797\":2,\"800\":1,\"861\":1,\"983\":2,\"985\":3,\"994\":1,\"1005\":1}}],[\"xp系统的ttl值为128\",{\"1\":{\"76\":1}}],[\"xd再学习\",{\"1\":{\"947\":1}}],[\"xd均已实践以下两点\",{\"1\":{\"782\":1}}],[\"xd\",{\"0\":{\"171\":1,\"742\":1},\"1\":{\"73\":2,\"92\":1,\"105\":1,\"156\":2,\"178\":1,\"182\":2,\"184\":1,\"229\":1,\"283\":1,\"302\":1,\"379\":1,\"383\":1,\"393\":2,\"486\":1,\"488\":2,\"496\":1,\"543\":2,\"546\":1,\"609\":1,\"626\":1,\"628\":1,\"639\":1,\"648\":1,\"658\":1,\"681\":1,\"686\":3,\"691\":1,\"693\":1,\"694\":1,\"712\":1,\"722\":1,\"723\":2,\"725\":1,\"739\":2,\"740\":2,\"778\":2,\"779\":2,\"780\":1,\"790\":1,\"849\":2,\"866\":2,\"878\":2,\"880\":1,\"883\":2,\"884\":1,\"905\":1,\"906\":1,\"923\":1,\"932\":1,\"975\":1,\"980\":1,\"993\":1,\"996\":1,\"998\":1,\"1001\":1,\"1012\":1,\"1015\":1,\"1080\":1,\"1081\":2,\"1085\":1}}],[\"x\",{\"1\":{\"71\":3,\"174\":1,\"220\":1,\"249\":1,\"293\":5,\"294\":5,\"383\":1,\"504\":1,\"594\":2,\"686\":9,\"688\":9,\"694\":7,\"718\":4,\"786\":2,\"810\":2,\"857\":1,\"914\":1,\"915\":4,\"918\":1,\"1003\":4,\"1005\":2,\"1084\":1,\"1085\":12,\"1107\":2}}],[\"x64\",{\"1\":{\"47\":1}}],[\"二是\",{\"1\":{\"927\":1}}],[\"二叉树是搜索效率最高的\",{\"1\":{\"916\":1}}],[\"二叉查找树由于存在退化成链表的可能性\",{\"1\":{\"916\":1}}],[\"二叉搜索树的特点是\",{\"1\":{\"916\":1}}],[\"二叉搜索树也是课本里的经典数据结构了\",{\"1\":{\"916\":1}}],[\"二者共同的父类是\",{\"1\":{\"688\":1}}],[\"二分查找\",{\"1\":{\"1085\":1}}],[\"二分\",{\"0\":{\"672\":1},\"1\":{\"915\":1,\"1085\":1}}],[\"二维数组中第一个中括号中必须要有值\",{\"1\":{\"666\":1}}],[\"二维数组命名\",{\"0\":{\"666\":1}}],[\"二级也会被清除\",{\"1\":{\"449\":1}}],[\"二级缓存不使用\",{\"1\":{\"449\":1}}],[\"二级缓存关闭\",{\"1\":{\"449\":1}}],[\"二级缓存\",{\"0\":{\"445\":1},\"1\":{\"543\":1}}],[\"二级域名扩大到一级域名\",{\"1\":{\"147\":1}}],[\"二阶提交\",{\"1\":{\"183\":1}}],[\"二楼有个弱电箱\",{\"1\":{\"77\":1}}],[\"二\",{\"0\":{\"47\":1,\"370\":1,\"749\":1,\"1141\":1,\"1158\":1},\"1\":{\"231\":1,\"375\":1,\"619\":1,\"630\":2,\"660\":1,\"980\":1}}],[\"加班多\",{\"1\":{\"1121\":1}}],[\"加班太累\",{\"1\":{\"1118\":1}}],[\"加班\",{\"0\":{\"1113\":1},\"1\":{\"1105\":1}}],[\"加进去\",{\"1\":{\"1005\":1}}],[\"加深印象\",{\"1\":{\"1150\":1}}],[\"加深理解\",{\"1\":{\"993\":1}}],[\"加深你对数据库索引的理解\",{\"1\":{\"909\":1}}],[\"加字段也不是就能一帆风顺的\",{\"1\":{\"927\":1}}],[\"加随机值\",{\"1\":{\"868\":1}}],[\"加随机时间\",{\"1\":{\"108\":1}}],[\"加法和减法也可以统一处理\",{\"1\":{\"648\":1}}],[\"加actuator\",{\"1\":{\"594\":1}}],[\"加密类型id\",{\"1\":{\"625\":1}}],[\"加密\",{\"1\":{\"591\":1}}],[\"加个权重\",{\"1\":{\"543\":1,\"1081\":1}}],[\"加载类时字符串字面量会进入到运行时常量池\",{\"1\":{\"722\":1}}],[\"加载在堆空间中\",{\"1\":{\"695\":1}}],[\"加载在对空间中\",{\"1\":{\"695\":1}}],[\"加载到内存中的运行时类\",{\"1\":{\"688\":1}}],[\"加载到内存中的类\",{\"1\":{\"688\":1}}],[\"加载到内存中\",{\"1\":{\"688\":1}}],[\"加载到栈空间\",{\"1\":{\"686\":1}}],[\"加载到堆空间中\",{\"1\":{\"686\":1}}],[\"加载\",{\"1\":{\"679\":1}}],[\"加载字节码\",{\"1\":{\"635\":1}}],[\"加载用户特定数据的核心接口\",{\"1\":{\"620\":1}}],[\"加载多配置集\",{\"1\":{\"598\":1}}],[\"加载位置与顺序\",{\"0\":{\"542\":1}}],[\"加载配置文件时候就会把在配置文件对象进行创建\",{\"1\":{\"486\":1}}],[\"加载配置文件时候不会创建对象\",{\"1\":{\"486\":1}}],[\"加载图片\",{\"1\":{\"46\":1}}],[\"加到某个值的时候就执行\",{\"1\":{\"337\":1}}],[\"加到这个头信息里\",{\"1\":{\"46\":1}}],[\"加入我们\",{\"1\":{\"1104\":1}}],[\"加入和你\",{\"1\":{\"1005\":1}}],[\"加入开机启动\",{\"1\":{\"810\":1}}],[\"加入屏障\",{\"1\":{\"296\":1}}],[\"加入缓存就可以支持更多数据\",{\"1\":{\"87\":1}}],[\"加了索引之后的效果\",{\"1\":{\"936\":1}}],[\"加了个时间字段记录过期时间\",{\"1\":{\"867\":1}}],[\"加了个算法生成盐\",{\"1\":{\"133\":1}}],[\"加了配置文件全局的逻辑删除\",{\"1\":{\"236\":1}}],[\"加一个字段就没那么简单\",{\"1\":{\"976\":1}}],[\"加一个\",{\"1\":{\"229\":1,\"928\":1}}],[\"加配置\",{\"1\":{\"213\":1}}],[\"加商品随机码\",{\"1\":{\"202\":1}}],[\"加本地锁\",{\"1\":{\"108\":1}}],[\"加索引\",{\"1\":{\"102\":1}}],[\"加\",{\"1\":{\"96\":1,\"271\":1,\"928\":2}}],[\"加锁是一种解决方案把其它挡外面\",{\"1\":{\"867\":1}}],[\"加锁是否公平\",{\"1\":{\"352\":1}}],[\"加锁前后都进行了一次判断\",{\"1\":{\"301\":1}}],[\"加锁写数据和写缓存锁一起\",{\"1\":{\"117\":1}}],[\"加锁解锁都是这段代码可以封装工具类\",{\"1\":{\"111\":1}}],[\"加锁问题\",{\"1\":{\"108\":1}}],[\"加锁初体验\",{\"1\":{\"108\":1}}],[\"加锁\",{\"0\":{\"110\":1},\"1\":{\"87\":1,\"108\":1,\"867\":1}}],[\"加锁顺序要一致\",{\"1\":{\"82\":1}}],[\"加上英文后续\",{\"1\":{\"905\":1}}],[\"加上\",{\"1\":{\"73\":1,\"219\":1,\"503\":1}}],[\"c语言\",{\"1\":{\"1150\":1}}],[\"c语⾔实现\",{\"1\":{\"849\":1}}],[\"certificate\",{\"1\":{\"981\":2}}],[\"centerpanel\",{\"0\":{\"885\":1}}],[\"centos\",{\"1\":{\"810\":1}}],[\"centos7安装mysql\",{\"1\":{\"808\":1}}],[\"cte\",{\"1\":{\"959\":7}}],[\"ctrl=\",{\"1\":{\"220\":1}}],[\"ctrl+alt+left\",{\"1\":{\"1074\":1}}],[\"ctrl+alt+tab\",{\"0\":{\"1035\":1}}],[\"ctrl+alt复制该行\",{\"0\":{\"1061\":1}}],[\"ctrl+o查看类中所有的方法\",{\"0\":{\"1058\":1}}],[\"ctrl+m\",{\"0\":{\"1055\":1}}],[\"ctrl+l\",{\"1\":{\"1041\":1}}],[\"ctrl+\",{\"1\":{\"1037\":1}}],[\"ctrl+esc\",{\"1\":{\"1037\":1}}],[\"ctrl+d\",{\"0\":{\"1032\":1,\"1074\":1}}],[\"ctrl+左键看不到\",{\"1\":{\"743\":1,\"1101\":1}}],[\"ctrl+p方法签名里面有annotationfunction\",{\"1\":{\"743\":1,\"1101\":1}}],[\"ctrl+f\",{\"1\":{\"148\":1}}],[\"ctrl+shift+a\",{\"1\":{\"1074\":1}}],[\"ctrl+shift+p\",{\"0\":{\"1050\":1}}],[\"ctrl+shift+f\",{\"0\":{\"1048\":1}}],[\"ctrl+shift+i\",{\"1\":{\"62\":1}}],[\"ctrl+shift+delete\",{\"1\":{\"62\":1}}],[\"ctrl\",{\"0\":{\"1042\":1,\"1043\":1,\"1057\":1,\"1060\":1,\"1063\":1,\"1067\":2,\"1068\":1,\"1069\":1,\"1071\":1,\"1072\":1},\"1\":{\"62\":2,\"215\":2,\"1005\":1,\"1037\":1,\"1038\":1,\"1046\":1,\"1051\":2}}],[\"cb\",{\"1\":{\"925\":3}}],[\"c不能用在范围之后\",{\"1\":{\"923\":1}}],[\"c不加volitale关键字的话有可能会出现尚未完全初始化就获取到的情况\",{\"1\":{\"302\":1}}],[\"ccutils\",{\"1\":{\"1081\":1}}],[\"cc\",{\"1\":{\"921\":1,\"1005\":1}}],[\"ccemailutils\",{\"1\":{\"538\":1,\"1082\":1}}],[\"c=\",{\"1\":{\"1005\":1}}],[\"c=n\",{\"1\":{\"925\":2}}],[\"c=5\",{\"1\":{\"923\":1}}],[\"c=c+1\",{\"1\":{\"898\":1}}],[\"c=10\",{\"1\":{\"896\":2}}],[\"c=ele\",{\"1\":{\"771\":1}}],[\"c>都行\",{\"1\":{\"688\":1}}],[\"c++\",{\"1\":{\"720\":4,\"1150\":3}}],[\"c+\",{\"1\":{\"685\":1}}],[\"c中赋值后会与0进行比较\",{\"1\":{\"653\":1}}],[\"c是不可用的过3s才执行到业务的错误点返回给b不可用\",{\"1\":{\"603\":1}}],[\"c要怎么实现保持同步呢\",{\"1\":{\"571\":1}}],[\"c3p0\",{\"1\":{\"393\":1}}],[\"c3\",{\"1\":{\"377\":1,\"923\":1}}],[\"c16039e8\",{\"1\":{\"1078\":1}}],[\"c1\",{\"1\":{\"377\":1}}],[\"cyclic\",{\"1\":{\"337\":1}}],[\"cyclicbarrier的字面意思就是可循环\",{\"1\":{\"337\":1}}],[\"cyclicbarrier\",{\"0\":{\"336\":1},\"1\":{\"338\":4,\"339\":2}}],[\"cpl\",{\"1\":{\"1039\":1}}],[\"cp架构\",{\"1\":{\"572\":1}}],[\"cp\",{\"1\":{\"571\":1,\"572\":1,\"594\":1,\"787\":3}}],[\"cpp中\",{\"1\":{\"306\":1}}],[\"cpu能不能直接访问硬盘的数据呢\",{\"1\":{\"1089\":1}}],[\"cpu底层的指令原语的原子性是在修改的时候保证不受其他线程抢断\",{\"1\":{\"309\":1}}],[\"cpu并发原语\",{\"1\":{\"283\":1,\"302\":1}}],[\"cpu\",{\"0\":{\"977\":1},\"1\":{\"99\":2,\"101\":2,\"286\":1,\"302\":2,\"650\":1,\"656\":2,\"712\":2,\"931\":1,\"932\":4,\"947\":1,\"969\":1,\"977\":2,\"1095\":3}}],[\"cpu核心数和线程数量没什么必然的关系\",{\"1\":{\"99\":1}}],[\"cmatrix\",{\"1\":{\"1003\":1}}],[\"cmpxchg实现比较替换\",{\"1\":{\"306\":1}}],[\"cmpxchg\",{\"1\":{\"302\":2}}],[\"cmd+`\",{\"1\":{\"998\":1}}],[\"cmd+opt+v\",{\"1\":{\"997\":1}}],[\"cmd+ctrl+f\",{\"1\":{\"997\":1}}],[\"cmd+shift+\",{\"1\":{\"997\":1}}],[\"cmd+shift+h\",{\"1\":{\"997\":1}}],[\"cmd启动完后项目一般就是三步\",{\"1\":{\"595\":1}}],[\"cmdlet\",{\"1\":{\"219\":1}}],[\"cmd\",{\"1\":{\"76\":1,\"101\":1,\"153\":1,\"594\":2,\"782\":1,\"804\":3,\"1005\":1,\"1041\":2}}],[\"c选项中\",{\"1\":{\"283\":1}}],[\"cj\",{\"1\":{\"260\":1}}],[\"cdf\",{\"1\":{\"1005\":1}}],[\"cdtmp=\",{\"1\":{\"1005\":1}}],[\"cd会持续集成\",{\"1\":{\"994\":1}}],[\"cd提供了如下两个主要的好处\",{\"1\":{\"994\":1}}],[\"cd代表持续集成和持续交付\",{\"1\":{\"994\":1}}],[\"cd\",{\"1\":{\"211\":1,\"219\":1,\"799\":1,\"994\":1,\"1005\":12,\"1041\":3}}],[\"cdn服务器位于全球各个地理位置\",{\"1\":{\"77\":1}}],[\"cdn遭到dns污染\",{\"1\":{\"77\":1}}],[\"cdn\",{\"1\":{\"77\":2}}],[\"cip\",{\"1\":{\"1005\":1}}],[\"cip=\",{\"1\":{\"1005\":1}}],[\"cicd\",{\"1\":{\"994\":1}}],[\"circuitbreaker\",{\"1\":{\"586\":4}}],[\"ci\",{\"1\":{\"211\":2,\"805\":1,\"994\":4}}],[\"c2\",{\"1\":{\"377\":1,\"923\":1}}],[\"c2c\",{\"1\":{\"204\":1}}],[\"c2bfb1512dfa4a7eab773a5871a52402\",{\"1\":{\"696\":1}}],[\"c2b\",{\"1\":{\"204\":1}}],[\"cglib是动态代码生成库\",{\"1\":{\"493\":1}}],[\"cglib\",{\"1\":{\"179\":1,\"182\":5,\"493\":1,\"504\":1,\"638\":1}}],[\"c做任何设置都没用\",{\"1\":{\"179\":1}}],[\"c\",{\"1\":{\"179\":5,\"249\":1,\"352\":2,\"374\":2,\"388\":3,\"399\":1,\"430\":1,\"463\":1,\"571\":1,\"572\":2,\"671\":1,\"685\":2,\"686\":1,\"688\":3,\"691\":1,\"720\":3,\"721\":2,\"725\":1,\"771\":1,\"787\":1,\"797\":1,\"800\":1,\"801\":1,\"849\":2,\"857\":1,\"865\":2,\"896\":1,\"898\":2,\"900\":2,\"901\":6,\"905\":2,\"906\":2,\"923\":17,\"925\":8,\"928\":4,\"931\":1,\"934\":1,\"959\":11,\"962\":1,\"983\":1,\"986\":1,\"1003\":1,\"1005\":3,\"1037\":1,\"1038\":1,\"1134\":1,\"1150\":3}}],[\"curl\",{\"1\":{\"591\":2,\"594\":2,\"789\":1,\"1003\":1,\"1005\":3,\"1041\":3}}],[\"curd\",{\"1\":{\"283\":1,\"887\":1}}],[\"currently\",{\"1\":{\"1009\":1}}],[\"current\",{\"1\":{\"477\":1,\"540\":2,\"730\":1,\"1005\":1}}],[\"currenttimestamp\",{\"1\":{\"850\":5}}],[\"currenttimemillis\",{\"1\":{\"67\":1,\"492\":2,\"850\":1,\"851\":2}}],[\"currentthread\",{\"1\":{\"302\":1,\"334\":2,\"335\":2,\"338\":1,\"339\":1,\"343\":2,\"352\":3,\"374\":2,\"730\":1,\"851\":1}}],[\"currentproxy\",{\"1\":{\"179\":4}}],[\"currentrequestattributes\",{\"1\":{\"157\":2}}],[\"customer\",{\"1\":{\"268\":1}}],[\"custom\",{\"1\":{\"223\":1,\"1005\":6}}],[\"customize\",{\"1\":{\"148\":1}}],[\"cv\",{\"1\":{\"92\":1,\"188\":1,\"844\":1}}],[\"crash\",{\"1\":{\"899\":3,\"900\":3,\"901\":3,\"902\":1}}],[\"crond\",{\"1\":{\"782\":1}}],[\"crontab\",{\"1\":{\"782\":1,\"799\":1,\"985\":1}}],[\"cron的两点区别\",{\"1\":{\"202\":1}}],[\"cron\",{\"0\":{\"201\":1},\"1\":{\"202\":1,\"594\":2,\"994\":1}}],[\"crossorigin\",{\"1\":{\"546\":1}}],[\"cross\",{\"1\":{\"46\":1,\"231\":1,\"937\":4}}],[\"createimage\",{\"1\":{\"877\":1}}],[\"createtext\",{\"1\":{\"877\":2}}],[\"createtoken\",{\"1\":{\"68\":1}}],[\"creater2=person\",{\"1\":{\"763\":1}}],[\"creater1=person\",{\"1\":{\"763\":1}}],[\"creater=\",{\"1\":{\"763\":1}}],[\"createschedulejob\",{\"1\":{\"887\":2}}],[\"creates\",{\"1\":{\"317\":2,\"362\":1}}],[\"createlintingrule\",{\"1\":{\"229\":2}}],[\"created\",{\"1\":{\"225\":1,\"267\":1,\"483\":1}}],[\"create\",{\"1\":{\"219\":1,\"295\":1,\"473\":2,\"551\":1,\"580\":1,\"806\":1,\"876\":1,\"880\":1,\"892\":2,\"898\":1,\"905\":1,\"917\":1,\"921\":1,\"922\":1,\"925\":1,\"929\":2,\"934\":2,\"1166\":1}}],[\"createconfiguration\",{\"1\":{\"125\":1}}],[\"cls\",{\"1\":{\"1041\":2}}],[\"clustered\",{\"1\":{\"917\":1}}],[\"cluster是对指定微服务的一个虚拟划分\",{\"1\":{\"598\":1}}],[\"cllas\",{\"1\":{\"688\":1}}],[\"cl\",{\"1\":{\"658\":1}}],[\"clashx\",{\"0\":{\"1002\":1}}],[\"clash的\",{\"1\":{\"981\":1}}],[\"clash\",{\"0\":{\"981\":1},\"1\":{\"981\":2,\"996\":1}}],[\"classname\",{\"1\":{\"761\":1}}],[\"classcastexception\",{\"1\":{\"705\":1}}],[\"class的实例就对应着一个运行时类\",{\"1\":{\"688\":1}}],[\"class结尾\",{\"1\":{\"688\":1}}],[\"class类的理解\",{\"1\":{\"688\":1}}],[\"class类是用来描述class类的类\",{\"1\":{\"688\":1}}],[\"class类型bean到spring容器才能修改springsecurity的默认密码规则吗\",{\"1\":{\"625\":1}}],[\"class先\",{\"1\":{\"658\":1}}],[\"class下不能进行逻辑语句的书写\",{\"1\":{\"646\":1}}],[\"classloader\",{\"1\":{\"483\":2,\"551\":1,\"679\":1,\"688\":1,\"1166\":1}}],[\"class=\",{\"1\":{\"460\":1,\"462\":5,\"487\":1,\"489\":2}}],[\"class>\",{\"1\":{\"459\":4,\"706\":1}}],[\"class>org\",{\"1\":{\"459\":4,\"706\":1}}],[\"classes\",{\"1\":{\"454\":1,\"531\":1,\"993\":1}}],[\"class路径\",{\"1\":{\"454\":1}}],[\"classpath=$jre\",{\"1\":{\"800\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"486\":1,\"489\":2}}],[\"classpath路径是来引用文件的\",{\"1\":{\"454\":1}}],[\"classpath\",{\"0\":{\"518\":1},\"1\":{\"454\":5,\"462\":4,\"542\":3,\"688\":1}}],[\"class文件\",{\"1\":{\"388\":1}}],[\"class<r>\",{\"1\":{\"876\":1}}],[\"class<t>\",{\"1\":{\"538\":1,\"1082\":1}}],[\"class<\",{\"1\":{\"241\":1,\"688\":2,\"715\":1,\"887\":1}}],[\"class中的属性都是final\",{\"1\":{\"125\":1}}],[\"class\",{\"0\":{\"67\":1,\"304\":1,\"483\":1},\"1\":{\"80\":1,\"97\":1,\"105\":2,\"124\":2,\"125\":2,\"128\":3,\"139\":1,\"148\":2,\"156\":2,\"157\":2,\"161\":1,\"200\":1,\"202\":1,\"227\":1,\"229\":2,\"240\":2,\"241\":4,\"252\":1,\"290\":1,\"295\":1,\"301\":1,\"302\":1,\"352\":2,\"370\":1,\"388\":2,\"402\":1,\"403\":1,\"415\":1,\"419\":1,\"427\":1,\"429\":1,\"430\":1,\"436\":1,\"443\":1,\"447\":2,\"454\":1,\"478\":2,\"480\":1,\"483\":1,\"486\":2,\"487\":1,\"488\":1,\"489\":1,\"492\":3,\"495\":1,\"503\":1,\"504\":1,\"517\":1,\"520\":2,\"529\":1,\"531\":1,\"534\":2,\"538\":3,\"543\":1,\"545\":1,\"575\":1,\"624\":2,\"625\":1,\"626\":1,\"627\":1,\"635\":2,\"646\":1,\"647\":1,\"658\":5,\"661\":1,\"674\":1,\"679\":3,\"683\":1,\"686\":4,\"687\":1,\"688\":18,\"691\":5,\"700\":1,\"715\":3,\"716\":2,\"718\":2,\"720\":1,\"721\":1,\"722\":6,\"730\":2,\"752\":1,\"762\":1,\"763\":2,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"779\":8,\"780\":2,\"831\":1,\"850\":1,\"851\":1,\"852\":1,\"876\":1,\"877\":1,\"884\":3,\"887\":2,\"889\":1,\"890\":1,\"993\":1,\"1081\":2,\"1082\":4,\"1085\":1,\"1097\":1}}],[\"clause\",{\"1\":{\"897\":1}}],[\"clazz3\",{\"1\":{\"688\":3}}],[\"clazz2\",{\"1\":{\"688\":2}}],[\"clazz1\",{\"1\":{\"688\":2}}],[\"clazz\",{\"1\":{\"538\":2,\"688\":5,\"715\":2,\"1082\":2}}],[\"clear\",{\"1\":{\"1041\":2}}],[\"clearcache\",{\"1\":{\"444\":1,\"449\":1}}],[\"cleanshotx\",{\"1\":{\"1005\":1}}],[\"cleanshot\",{\"1\":{\"1003\":1}}],[\"cleanmymac\",{\"1\":{\"1003\":1}}],[\"cleaner\",{\"1\":{\"636\":1}}],[\"clean\",{\"1\":{\"153\":1,\"1005\":1}}],[\"closuredemo2\",{\"1\":{\"771\":1}}],[\"closuredemo\",{\"1\":{\"771\":1}}],[\"closure\",{\"1\":{\"771\":2}}],[\"close=\",{\"1\":{\"436\":1}}],[\"closed\",{\"1\":{\"260\":1,\"686\":1}}],[\"close\",{\"1\":{\"47\":1,\"403\":1,\"415\":1,\"419\":1,\"427\":1,\"429\":1,\"430\":1,\"436\":2,\"443\":1,\"447\":3,\"489\":1,\"678\":1,\"1084\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"683\":1}}],[\"cloneable\",{\"1\":{\"683\":1}}],[\"clone\",{\"1\":{\"683\":5,\"987\":1,\"994\":1,\"1005\":4}}],[\"cloak\",{\"1\":{\"224\":2}}],[\"cloudaemon\",{\"1\":{\"981\":1}}],[\"cloud团队将不会再向模块添加新功能\",{\"1\":{\"594\":1}}],[\"cloud会创建一个bootstrap\",{\"1\":{\"593\":1}}],[\"cloud封装了netflix\",{\"1\":{\"563\":1}}],[\"cloud<\",{\"1\":{\"238\":1,\"589\":1,\"594\":1}}],[\"cloud\",{\"1\":{\"126\":1,\"178\":2,\"468\":2,\"474\":1,\"543\":5,\"554\":3,\"566\":1,\"568\":2,\"573\":2,\"574\":5,\"575\":1,\"589\":1,\"590\":1,\"591\":6,\"594\":18,\"597\":1,\"598\":13,\"608\":2,\"713\":2,\"877\":1}}],[\"clipboard\",{\"1\":{\"1006\":1}}],[\"cli连接要用集群的方式连接\",{\"1\":{\"865\":1}}],[\"cli和webpack是什么关系\",{\"1\":{\"222\":1}}],[\"cli是vue的命令行工具\",{\"1\":{\"222\":1}}],[\"cli是什么\",{\"1\":{\"222\":1}}],[\"cli\",{\"0\":{\"782\":1,\"1003\":1},\"1\":{\"213\":1,\"219\":1,\"222\":3,\"865\":1,\"883\":1,\"996\":1,\"1003\":3,\"1161\":2}}],[\"clients\",{\"1\":{\"850\":1,\"851\":1,\"852\":1}}],[\"client自带了spring\",{\"1\":{\"574\":1}}],[\"client\",{\"1\":{\"211\":2,\"529\":2,\"561\":1,\"568\":1,\"591\":1,\"594\":1,\"606\":1,\"713\":1,\"805\":1,\"1084\":3}}],[\"client2\",{\"1\":{\"153\":1}}],[\"client1\",{\"1\":{\"153\":1}}],[\"client全部刷新一次也基本是无感知的\",{\"1\":{\"70\":1}}],[\"clicking\",{\"1\":{\"1006\":1}}],[\"click=\",{\"1\":{\"220\":4,\"221\":3,\"226\":1}}],[\"click\",{\"1\":{\"69\":1,\"128\":1,\"220\":4,\"226\":2,\"543\":1,\"553\":1,\"554\":1,\"998\":2,\"1081\":1}}],[\"ca\",{\"1\":{\"925\":3}}],[\"cause\",{\"1\":{\"836\":3}}],[\"card`\",{\"1\":{\"922\":3}}],[\"card\",{\"1\":{\"543\":1,\"914\":5,\"915\":7,\"916\":1,\"1081\":1}}],[\"cartintercept\",{\"1\":{\"156\":1,\"534\":2}}],[\"cart\",{\"1\":{\"156\":1,\"534\":2}}],[\"calc\",{\"0\":{\"1031\":1}}],[\"calculate\",{\"1\":{\"540\":2}}],[\"calendar\",{\"1\":{\"1006\":1}}],[\"callerrunspolicy\",{\"1\":{\"362\":1}}],[\"callable01\",{\"1\":{\"357\":1}}],[\"callable+futuretask\",{\"0\":{\"357\":1}}],[\"callable\",{\"1\":{\"126\":1,\"354\":1,\"357\":1}}],[\"call\",{\"1\":{\"89\":1}}],[\"caps\",{\"1\":{\"1005\":3}}],[\"capital\",{\"1\":{\"955\":1}}],[\"capturing\",{\"0\":{\"1019\":1}}],[\"capture\",{\"1\":{\"1005\":1}}],[\"captchaimage\",{\"1\":{\"880\":1,\"882\":1}}],[\"captcha\",{\"1\":{\"878\":1}}],[\"captchaenabled\",{\"1\":{\"878\":1,\"879\":4}}],[\"captchaproducermath\",{\"1\":{\"877\":3}}],[\"captext\",{\"1\":{\"877\":1}}],[\"cap理论的核心是\",{\"1\":{\"572\":1}}],[\"cap是一种理论\",{\"1\":{\"571\":1}}],[\"capacity\",{\"1\":{\"363\":1,\"703\":2}}],[\"capacities\",{\"1\":{\"362\":1}}],[\"cap\",{\"1\":{\"183\":2,\"571\":5,\"572\":1}}],[\"candidate\",{\"1\":{\"572\":1}}],[\"can\",{\"1\":{\"473\":1,\"941\":1}}],[\"cancle\",{\"1\":{\"220\":2}}],[\"cancel\",{\"1\":{\"183\":2,\"186\":11,\"607\":1}}],[\"cannot\",{\"1\":{\"125\":1,\"721\":1,\"876\":1}}],[\"canal\",{\"0\":{\"119\":1},\"1\":{\"119\":2}}],[\"cachingconnectionfactory\",{\"1\":{\"828\":1}}],[\"caching\",{\"1\":{\"120\":1,\"123\":1}}],[\"cache技术整合redis\",{\"1\":{\"876\":1}}],[\"caches\",{\"1\":{\"448\":1,\"451\":1}}],[\"cache>\",{\"1\":{\"448\":3,\"451\":1}}],[\"cacheenabled=true\",{\"1\":{\"449\":1}}],[\"cacheenabled\",{\"1\":{\"448\":1}}],[\"cacheevict\",{\"1\":{\"123\":3}}],[\"cachedthreadpool\",{\"1\":{\"366\":1}}],[\"cacheproperties\",{\"1\":{\"125\":7,\"514\":4,\"532\":4}}],[\"cacheautoconfiguration\",{\"1\":{\"125\":1}}],[\"cacheable缓存key值时默认会给vlue或cachenames后加上双引号\",{\"1\":{\"123\":1}}],[\"cacheable\",{\"1\":{\"123\":3}}],[\"cache的cachemanager接口提供的putifabsent方法来更新缓存的过期时间\",{\"1\":{\"123\":1}}],[\"cachekeyprefix\",{\"1\":{\"123\":1}}],[\"cache接口的实现包括rediscache\",{\"1\":{\"122\":1}}],[\"cache则是管自己的crud\",{\"1\":{\"122\":1}}],[\"cachemanager\",{\"1\":{\"122\":2}}],[\"cachemanager接口来统一不同的缓存技术\",{\"1\":{\"121\":1}}],[\"cache可以通过简单的几个注解把缓存功能跑起来\",{\"1\":{\"121\":1}}],[\"cache\",{\"1\":{\"47\":1,\"103\":2,\"108\":1,\"112\":1,\"122\":1,\"123\":6,\"125\":1,\"128\":1,\"286\":1,\"441\":1,\"468\":1,\"546\":2,\"852\":2,\"894\":5}}],[\"catalina\",{\"1\":{\"706\":1,\"1037\":1}}],[\"catalogjson\",{\"1\":{\"103\":3,\"105\":1,\"115\":1}}],[\"cat\",{\"0\":{\"270\":1},\"1\":{\"270\":4,\"509\":1,\"782\":1,\"797\":2,\"983\":2,\"986\":1}}],[\"catch语句捕获它\",{\"1\":{\"705\":1}}],[\"catch语句来完成\",{\"1\":{\"352\":1}}],[\"catch包起来就不会爆红了\",{\"1\":{\"686\":1}}],[\"catch处理完后继续往下运行\",{\"1\":{\"686\":1}}],[\"catch块中的return\",{\"1\":{\"649\":1}}],[\"catch\",{\"0\":{\"1066\":1},\"1\":{\"233\":1,\"338\":2,\"339\":1,\"342\":1,\"343\":1,\"352\":3,\"402\":1,\"580\":1,\"632\":1,\"686\":4,\"687\":1,\"705\":2,\"779\":1,\"837\":1,\"846\":2,\"851\":1}}],[\"catid\",{\"1\":{\"229\":2}}],[\"catic\",{\"1\":{\"48\":1}}],[\"categoryentity\",{\"1\":{\"229\":1}}],[\"categoryentity>\",{\"1\":{\"229\":1}}],[\"categorydao\",{\"1\":{\"229\":4}}],[\"categoryservice\",{\"1\":{\"229\":1}}],[\"categoryserviceimpl\",{\"1\":{\"229\":1}}],[\"category>\",{\"1\":{\"226\":1}}],[\"category\",{\"1\":{\"123\":4,\"236\":1,\"244\":1,\"591\":2}}],[\"cask\",{\"1\":{\"1003\":2}}],[\"cas+synchronized\",{\"1\":{\"674\":1}}],[\"case的使用\",{\"0\":{\"948\":1}}],[\"case\",{\"1\":{\"430\":1,\"433\":1,\"802\":1,\"948\":1,\"955\":1,\"959\":3,\"1046\":1}}],[\"case>\",{\"1\":{\"429\":2}}],[\"cas的好处就是保证的数据一致性的同时\",{\"1\":{\"309\":1}}],[\"cas的全称是compare\",{\"1\":{\"302\":1}}],[\"cas操作可以成功\",{\"1\":{\"309\":1}}],[\"cas底层思想\",{\"1\":{\"309\":1}}],[\"cas不加锁\",{\"1\":{\"307\":1}}],[\"cas缺点\",{\"0\":{\"307\":1}}],[\"cas思想\",{\"1\":{\"305\":1}}],[\"cascade\",{\"1\":{\"250\":1}}],[\"cascader\",{\"0\":{\"248\":1}}],[\"cas\",{\"0\":{\"83\":1,\"304\":1},\"1\":{\"89\":1,\"283\":4,\"291\":1,\"298\":1,\"302\":2,\"304\":1,\"305\":1,\"309\":1,\"740\":1}}],[\"chencheng\",{\"1\":{\"1001\":1,\"1005\":3,\"1007\":1}}],[\"checkout\",{\"1\":{\"987\":1,\"990\":1,\"994\":3,\"1005\":1}}],[\"checkpoint\",{\"1\":{\"899\":4}}],[\"checks\",{\"1\":{\"473\":1}}],[\"checked\",{\"1\":{\"283\":1,\"686\":3,\"779\":1}}],[\"check\",{\"0\":{\"301\":1},\"1\":{\"171\":1,\"895\":1,\"938\":1,\"998\":1}}],[\"chongt\",{\"1\":{\"1005\":1}}],[\"chore\",{\"1\":{\"1005\":1}}],[\"chown\",{\"1\":{\"998\":1}}],[\"chocolate=chip\",{\"1\":{\"591\":1}}],[\"choose>\",{\"1\":{\"433\":1}}],[\"choose\",{\"0\":{\"433\":1},\"1\":{\"430\":1,\"433\":1}}],[\"chunk\",{\"1\":{\"540\":2}}],[\"chmod\",{\"1\":{\"267\":1,\"786\":4}}],[\"china\",{\"1\":{\"1128\":1}}],[\"chidren\",{\"1\":{\"247\":1}}],[\"childrenlist\",{\"1\":{\"229\":2}}],[\"children\",{\"1\":{\"229\":1,\"247\":1}}],[\"childvalue\",{\"1\":{\"157\":1}}],[\"chqac97z\",{\"1\":{\"208\":1}}],[\"changelist\",{\"1\":{\"993\":1}}],[\"changed\",{\"1\":{\"929\":1}}],[\"changeorigin\",{\"1\":{\"883\":1}}],[\"change2\",{\"1\":{\"691\":2}}],[\"change\",{\"1\":{\"687\":2,\"691\":4,\"762\":2,\"780\":2,\"976\":2,\"1005\":1}}],[\"channel\",{\"1\":{\"512\":1,\"613\":2,\"712\":1,\"823\":2,\"830\":3,\"837\":5}}],[\"chain\",{\"1\":{\"539\":2,\"907\":2}}],[\"chalk\",{\"1\":{\"223\":1}}],[\"char对应一个ascii码两个char相加就是ascii码相加\",{\"1\":{\"685\":1}}],[\"char无论中英文数字都占用2字节\",{\"1\":{\"685\":1}}],[\"char\",{\"1\":{\"671\":2,\"685\":6,\"686\":1,\"687\":3,\"691\":3,\"702\":2,\"720\":1,\"721\":5,\"725\":1,\"802\":1,\"918\":1,\"1017\":1}}],[\"chartgpt\",{\"1\":{\"552\":1}}],[\"charset=\",{\"1\":{\"220\":1}}],[\"charset=utf\",{\"1\":{\"48\":1}}],[\"characterencodingfilter<\",{\"1\":{\"459\":1}}],[\"characterencoding=utf8\",{\"1\":{\"398\":1,\"461\":1}}],[\"character\",{\"1\":{\"211\":4,\"647\":1,\"671\":2,\"805\":2}}],[\"chatgpt\",{\"1\":{\"153\":1,\"156\":1,\"482\":1,\"1003\":1,\"1010\":1}}],[\"chromium\",{\"1\":{\"47\":1}}],[\"chrome书签被劫持\",{\"0\":{\"1153\":1}}],[\"chrome浏览器访问不了学校官网\",{\"1\":{\"76\":1}}],[\"chrome\",{\"0\":{\"59\":1,\"60\":1,\"62\":1},\"1\":{\"47\":2,\"49\":1,\"62\":1,\"996\":1,\"1003\":1,\"1005\":4,\"1006\":1}}],[\"ch\",{\"1\":{\"47\":3,\"687\":5,\"691\":6}}],[\"csrutil\",{\"1\":{\"999\":1}}],[\"csrf\",{\"1\":{\"52\":1}}],[\"csdn\",{\"1\":{\"105\":1,\"238\":1,\"348\":1,\"398\":1,\"691\":1,\"865\":1,\"959\":1}}],[\"css文件而不报错的原因是因为这些文件通常被浏览器解释为纯文本文件或脚本文件\",{\"1\":{\"706\":1}}],[\"css文件却可以\",{\"1\":{\"706\":1}}],[\"css之前附加的\",{\"1\":{\"539\":1}}],[\"css等文件缓存到用户本地\",{\"1\":{\"539\":1,\"1083\":1}}],[\"css\",{\"1\":{\"100\":1,\"216\":1,\"223\":1,\"539\":3,\"540\":1,\"706\":1,\"1084\":4,\"1150\":2}}],[\"cs\",{\"1\":{\"47\":1}}],[\"cnode\",{\"1\":{\"1128\":1}}],[\"cn没内容\",{\"1\":{\"1041\":1}}],[\"cnt=$\",{\"1\":{\"1005\":1}}],[\"cnt=0\",{\"1\":{\"1005\":1}}],[\"cnf文件后\",{\"1\":{\"805\":1}}],[\"cnf文件下修改一下文件内容\",{\"1\":{\"805\":1}}],[\"cnf\",{\"1\":{\"805\":1}}],[\"cnblogs\",{\"1\":{\"49\":1,\"73\":1,\"261\":1,\"539\":1,\"543\":1,\"1081\":1}}],[\"cn\",{\"1\":{\"47\":2,\"48\":1,\"197\":1,\"243\":1,\"267\":1,\"268\":1,\"282\":1,\"302\":4,\"378\":2,\"492\":1,\"494\":1,\"499\":1,\"677\":1,\"722\":2,\"724\":2,\"728\":1,\"731\":1,\"739\":2,\"740\":2,\"779\":2,\"789\":1,\"981\":4,\"1041\":1,\"1154\":1,\"1161\":1}}],[\"cocos\",{\"1\":{\"1150\":1}}],[\"copilot\",{\"1\":{\"1005\":2}}],[\"copyoptions\",{\"1\":{\"876\":1}}],[\"copyonwritearraylist\",{\"1\":{\"641\":1}}],[\"copyfromarraytolist\",{\"1\":{\"688\":1}}],[\"copying\",{\"1\":{\"385\":1}}],[\"copyproperties的ignorenullvalue不生效\",{\"1\":{\"876\":1}}],[\"copyproperties\",{\"1\":{\"252\":1,\"876\":1}}],[\"copy\",{\"1\":{\"126\":1,\"238\":1,\"1006\":1}}],[\"coteditor\",{\"1\":{\"1003\":1}}],[\"coalesce学习\",{\"1\":{\"959\":1}}],[\"coalesce\",{\"1\":{\"959\":8}}],[\"cooluc\",{\"1\":{\"1157\":1}}],[\"coordinator\",{\"1\":{\"606\":1}}],[\"cookie放新request\",{\"1\":{\"156\":1,\"160\":1,\"581\":1}}],[\"cookie丢失\",{\"1\":{\"156\":1}}],[\"cookie如果被截获\",{\"1\":{\"52\":1}}],[\"cookie只能存储字符串\",{\"1\":{\"51\":1}}],[\"cookie是web服务器发送给客户端的一小段信息\",{\"1\":{\"47\":1}}],[\"cookie\",{\"1\":{\"47\":1,\"48\":1,\"49\":7,\"152\":1,\"154\":1,\"156\":1,\"160\":1,\"581\":1,\"591\":1}}],[\"coding\",{\"1\":{\"348\":1,\"1145\":1}}],[\"codezzq\",{\"1\":{\"987\":2,\"1161\":1}}],[\"codeurl\",{\"1\":{\"879\":2}}],[\"codes\",{\"1\":{\"878\":1,\"1084\":1}}],[\"codepublic\",{\"1\":{\"157\":1}}],[\"code换accesstoken\",{\"1\":{\"138\":1}}],[\"code只能用一次\",{\"1\":{\"136\":1}}],[\"code\",{\"1\":{\"46\":1,\"60\":1,\"128\":3,\"129\":1,\"134\":1,\"290\":1,\"317\":2,\"393\":1,\"473\":1,\"879\":1,\"990\":2,\"994\":1,\"1003\":1,\"1004\":2,\"1005\":6,\"1084\":2,\"1100\":1,\"1150\":1}}],[\"course=\",{\"1\":{\"959\":3}}],[\"course\",{\"1\":{\"927\":1}}],[\"could\",{\"1\":{\"876\":1}}],[\"coupons\",{\"1\":{\"576\":3}}],[\"couponfeignservice\",{\"1\":{\"576\":4}}],[\"coupon\",{\"1\":{\"227\":1,\"576\":6,\"597\":1}}],[\"count0=tmp\",{\"1\":{\"670\":1}}],[\"count0=count1++的执行步骤\",{\"1\":{\"670\":1}}],[\"count1++\",{\"1\":{\"670\":1}}],[\"count的值都等于count值\",{\"1\":{\"670\":1}}],[\"countdown\",{\"1\":{\"334\":1,\"335\":1}}],[\"countdownlatch主要有两个方法\",{\"1\":{\"332\":1}}],[\"countdownlatch\",{\"0\":{\"331\":1},\"1\":{\"334\":6,\"335\":5}}],[\"counter\",{\"1\":{\"221\":2,\"664\":1}}],[\"counter><\",{\"1\":{\"221\":1}}],[\"counter>\",{\"1\":{\"221\":6}}],[\"count++\",{\"1\":{\"221\":3}}],[\"count\",{\"1\":{\"170\":2,\"221\":6,\"720\":2,\"802\":3,\"850\":2,\"906\":2,\"956\":4,\"959\":3,\"1095\":2}}],[\"corners\",{\"1\":{\"1006\":1}}],[\"corresponds\",{\"1\":{\"895\":1,\"938\":1}}],[\"correlationdata=>null\",{\"1\":{\"844\":2}}],[\"correlationdata\",{\"1\":{\"836\":3}}],[\"correctly\",{\"1\":{\"223\":1}}],[\"corsfilter<\",{\"1\":{\"706\":1}}],[\"corsfilter\",{\"1\":{\"545\":1}}],[\"cors支持所有类型的http请求\",{\"1\":{\"232\":1}}],[\"cors与jsonp的使用目的相同\",{\"1\":{\"232\":1}}],[\"corsconfig\",{\"0\":{\"545\":1}}],[\"corsconfig跨域注解最简单解决跨域\",{\"1\":{\"231\":1}}],[\"corsconfiguration\",{\"1\":{\"231\":4}}],[\"cors\",{\"1\":{\"231\":1,\"706\":1}}],[\"corswebfilter\",{\"1\":{\"231\":1,\"261\":1,\"466\":1}}],[\"core<\",{\"1\":{\"458\":1}}],[\"corepoolsize\",{\"1\":{\"362\":1}}],[\"core\",{\"0\":{\"364\":1},\"1\":{\"140\":2,\"362\":1,\"363\":5,\"830\":1,\"1003\":1,\"1010\":2,\"1095\":1}}],[\"col\",{\"1\":{\"1017\":1}}],[\"color\",{\"1\":{\"1005\":1}}],[\"columnkey=\",{\"1\":{\"1021\":3,\"1022\":1}}],[\"columnn\",{\"1\":{\"959\":3}}],[\"column3\",{\"1\":{\"959\":2}}],[\"column2\",{\"1\":{\"959\":5}}],[\"column1\",{\"1\":{\"906\":1,\"959\":5}}],[\"column=\",{\"1\":{\"419\":4,\"421\":3,\"422\":6,\"423\":2,\"426\":7,\"427\":3,\"428\":2,\"429\":10}}],[\"column\",{\"1\":{\"419\":1,\"423\":1,\"429\":1,\"897\":1,\"928\":2,\"964\":2}}],[\"columns\",{\"1\":{\"265\":1}}],[\"colletcions\",{\"1\":{\"359\":1}}],[\"collector\",{\"1\":{\"634\":1}}],[\"collectors\",{\"1\":{\"130\":1,\"229\":2,\"775\":1,\"776\":1}}],[\"collect\",{\"1\":{\"130\":1,\"229\":2,\"258\":1,\"775\":1,\"776\":1}}],[\"collections\",{\"1\":{\"767\":2}}],[\"collection中两个default方法\",{\"1\":{\"689\":1}}],[\"collection关注的是数据的存储\",{\"1\":{\"689\":1}}],[\"collection=\",{\"1\":{\"436\":1,\"437\":2}}],[\"collection分步查询\",{\"1\":{\"427\":1}}],[\"collection>\",{\"1\":{\"426\":1,\"427\":1,\"428\":1}}],[\"collection定义关联集合类型的属性的封装规则\",{\"1\":{\"426\":1}}],[\"collectionutils\",{\"1\":{\"252\":1}}],[\"collection\",{\"0\":{\"425\":1},\"1\":{\"69\":1,\"359\":1,\"426\":1,\"427\":1,\"436\":1,\"634\":1,\"677\":2,\"739\":2}}],[\"collation\",{\"1\":{\"211\":2,\"805\":1}}],[\"col1=1\",{\"1\":{\"165\":1}}],[\"col1=col1+1\",{\"1\":{\"164\":1}}],[\"col2=2\",{\"1\":{\"165\":1}}],[\"col2\",{\"1\":{\"164\":1}}],[\"comments\",{\"1\":{\"1005\":1}}],[\"community\",{\"1\":{\"801\":3}}],[\"command+shift+\",{\"1\":{\"998\":1}}],[\"command\",{\"1\":{\"782\":1,\"893\":1,\"897\":1,\"997\":2,\"1005\":1}}],[\"commandproperties\",{\"1\":{\"586\":1}}],[\"commandlinerunner\",{\"1\":{\"546\":4,\"1081\":1,\"1166\":4}}],[\"commitzen\",{\"1\":{\"1003\":1}}],[\"committed\",{\"1\":{\"178\":1,\"905\":4,\"934\":1}}],[\"commit\",{\"1\":{\"169\":1,\"183\":1,\"403\":1,\"609\":2,\"799\":1,\"900\":2,\"902\":2,\"906\":1,\"907\":5,\"908\":1,\"929\":1,\"931\":3,\"934\":1,\"987\":1,\"990\":4,\"993\":1,\"1005\":1}}],[\"commons<\",{\"1\":{\"1010\":2}}],[\"commons\",{\"1\":{\"393\":1,\"871\":1,\"1010\":6}}],[\"commons包\",{\"1\":{\"132\":2}}],[\"common的自定义类封装\",{\"1\":{\"246\":1}}],[\"common\",{\"0\":{\"598\":1},\"1\":{\"150\":1,\"243\":1,\"506\":1,\"509\":1,\"598\":1,\"728\":1,\"959\":1}}],[\"commonns\",{\"1\":{\"132\":1}}],[\"compile\",{\"1\":{\"1019\":1}}],[\"compinit\",{\"1\":{\"1005\":2}}],[\"completions\",{\"1\":{\"1005\":6}}],[\"completablefuture<integer>\",{\"1\":{\"374\":1}}],[\"completablefuture<string>\",{\"1\":{\"157\":2}}],[\"completablefuture\",{\"1\":{\"126\":1,\"157\":2,\"202\":1,\"371\":1,\"372\":2,\"374\":1,\"377\":2}}],[\"complex\",{\"1\":{\"1005\":1}}],[\"computer\",{\"1\":{\"272\":1,\"1006\":1}}],[\"computed\",{\"1\":{\"216\":1,\"220\":1,\"225\":1}}],[\"composite\",{\"1\":{\"959\":3}}],[\"compound\",{\"0\":{\"255\":1},\"1\":{\"959\":1}}],[\"component>\",{\"1\":{\"610\":1}}],[\"component是不能注入到容器的\",{\"1\":{\"507\":1}}],[\"components\",{\"1\":{\"217\":1,\"221\":1,\"225\":1,\"1005\":2}}],[\"componentscan所扫描的当前包下以及子包下\",{\"1\":{\"575\":1}}],[\"componentscan和\",{\"1\":{\"482\":1}}],[\"componentscan\",{\"0\":{\"509\":1,\"516\":1},\"1\":{\"151\":1,\"478\":2,\"482\":5}}],[\"component\",{\"1\":{\"202\":1,\"220\":4,\"221\":1,\"223\":1,\"226\":1,\"370\":1,\"460\":2,\"462\":2,\"482\":1,\"486\":1,\"492\":1,\"495\":1,\"505\":1,\"517\":1,\"730\":1,\"884\":1,\"887\":1}}],[\"comparato返回0\",{\"1\":{\"688\":1}}],[\"comparator对此列表进行排序以比较元素\",{\"1\":{\"765\":1}}],[\"comparator\",{\"1\":{\"688\":1}}],[\"comparable\",{\"1\":{\"688\":1,\"715\":1}}],[\"comparetime\",{\"1\":{\"889\":1}}],[\"compareto\",{\"1\":{\"182\":1}}],[\"compareparams\",{\"1\":{\"889\":1}}],[\"compareandset\",{\"1\":{\"310\":2}}],[\"compareandswapint返回false\",{\"1\":{\"305\":1}}],[\"compareandswapxxx\",{\"1\":{\"302\":1}}],[\"compact\",{\"1\":{\"385\":1,\"389\":1}}],[\"compatible\",{\"1\":{\"220\":1}}],[\"company\",{\"1\":{\"105\":1}}],[\"com丢给网关\",{\"1\":{\"94\":1}}],[\"com的url或点击链接时\",{\"1\":{\"77\":1}}],[\"com这样的网站时\",{\"1\":{\"77\":1}}],[\"com可能请求的不是真是的github服务器而是cdn服务器\",{\"1\":{\"77\":1}}],[\"com\",{\"0\":{\"516\":2,\"980\":1,\"1040\":1,\"1041\":1},\"1\":{\"49\":1,\"60\":4,\"62\":1,\"63\":2,\"67\":2,\"69\":1,\"71\":3,\"72\":1,\"73\":7,\"94\":1,\"105\":1,\"124\":1,\"136\":1,\"141\":2,\"147\":2,\"151\":1,\"153\":5,\"156\":1,\"197\":1,\"208\":1,\"220\":2,\"229\":1,\"240\":1,\"242\":1,\"243\":1,\"260\":1,\"261\":3,\"267\":1,\"330\":1,\"352\":1,\"377\":1,\"379\":1,\"380\":1,\"383\":1,\"388\":2,\"397\":3,\"419\":1,\"432\":1,\"433\":1,\"438\":1,\"462\":1,\"478\":1,\"487\":1,\"495\":1,\"505\":1,\"509\":1,\"523\":2,\"534\":2,\"539\":1,\"543\":3,\"546\":1,\"576\":1,\"591\":1,\"594\":2,\"614\":1,\"662\":1,\"670\":1,\"671\":1,\"688\":1,\"691\":1,\"696\":1,\"752\":2,\"762\":2,\"765\":2,\"766\":2,\"767\":1,\"768\":2,\"769\":1,\"770\":1,\"771\":2,\"773\":1,\"782\":1,\"787\":3,\"789\":3,\"797\":2,\"799\":2,\"801\":1,\"810\":2,\"825\":1,\"868\":1,\"877\":1,\"887\":1,\"983\":2,\"985\":2,\"986\":4,\"987\":3,\"994\":1,\"998\":4,\"999\":2,\"1001\":2,\"1003\":1,\"1005\":15,\"1006\":1,\"1008\":1,\"1013\":2,\"1041\":1,\"1078\":2,\"1081\":7,\"1084\":1,\"1085\":1,\"1127\":1,\"1154\":1,\"1155\":1,\"1157\":2,\"1159\":1}}],[\"conwnet\",{\"1\":{\"1155\":1}}],[\"concat\",{\"0\":{\"946\":1},\"1\":{\"945\":1,\"946\":2}}],[\"concurrenthashmap\",{\"0\":{\"674\":1,\"740\":1},\"1\":{\"694\":1}}],[\"concurrenthashmap如何实现高效地线程安全\",{\"1\":{\"640\":1}}],[\"concurrentmapcache等\",{\"1\":{\"122\":1}}],[\"concurrent\",{\"1\":{\"115\":1,\"302\":2,\"352\":4,\"378\":3,\"640\":1,\"779\":2}}],[\"conponent\",{\"1\":{\"507\":1}}],[\"convert\",{\"1\":{\"885\":2,\"1005\":1}}],[\"convertandsend\",{\"1\":{\"829\":1,\"846\":1}}],[\"convertvalue\",{\"1\":{\"105\":2}}],[\"conversionpattern=\",{\"1\":{\"399\":1,\"463\":1}}],[\"conditional动态加载配置类里面的bean到容器\",{\"1\":{\"731\":1}}],[\"conditionalonbean\",{\"1\":{\"483\":1}}],[\"conditionalonmissingbean\",{\"1\":{\"483\":2}}],[\"conditionalonwebapplication\",{\"1\":{\"466\":1}}],[\"condition3\",{\"1\":{\"352\":3}}],[\"condition2\",{\"1\":{\"352\":3}}],[\"condition1\",{\"1\":{\"352\":3}}],[\"condition\",{\"1\":{\"352\":5,\"483\":1,\"924\":1}}],[\"connect解决\",{\"1\":{\"608\":1}}],[\"connecttimeout\",{\"1\":{\"577\":1}}],[\"connector\",{\"1\":{\"397\":2,\"458\":1,\"556\":2,\"637\":1}}],[\"connect=\",{\"1\":{\"211\":2}}],[\"connection=debug\",{\"1\":{\"399\":1,\"463\":1}}],[\"connections\",{\"1\":{\"260\":1}}],[\"connectionimpl\",{\"1\":{\"260\":1}}],[\"connectiontimeout=\",{\"1\":{\"48\":1}}],[\"connection\",{\"1\":{\"47\":1,\"48\":2,\"211\":1,\"260\":3,\"823\":1,\"893\":2}}],[\"consul\",{\"1\":{\"572\":1}}],[\"consuming\",{\"1\":{\"492\":1}}],[\"consumer<integer>\",{\"1\":{\"771\":1}}],[\"consumer<\",{\"1\":{\"767\":1}}],[\"consumer<t>\",{\"1\":{\"688\":1,\"748\":1,\"770\":2}}],[\"consumer中的void\",{\"1\":{\"688\":1}}],[\"consumer\",{\"1\":{\"206\":1,\"575\":1,\"771\":1,\"823\":1}}],[\"consistent\",{\"1\":{\"929\":2,\"934\":3}}],[\"consistency\",{\"1\":{\"571\":1,\"572\":1,\"905\":1,\"962\":1}}],[\"consider\",{\"1\":{\"260\":1}}],[\"consoleappender\",{\"1\":{\"399\":1,\"463\":1}}],[\"console=org\",{\"1\":{\"399\":1,\"463\":1}}],[\"console\",{\"1\":{\"61\":1,\"216\":2,\"229\":3,\"233\":2,\"399\":4,\"463\":4,\"796\":2,\"1005\":1}}],[\"constant\",{\"1\":{\"722\":2,\"725\":1}}],[\"constraint\",{\"1\":{\"243\":1}}],[\"constructor\",{\"1\":{\"688\":2}}],[\"constructor<\",{\"1\":{\"688\":1}}],[\"constructors\",{\"1\":{\"683\":1}}],[\"construction\",{\"1\":{\"489\":1}}],[\"construct\",{\"1\":{\"125\":1,\"876\":1}}],[\"const\",{\"1\":{\"14\":1,\"216\":2,\"221\":1,\"229\":1,\"880\":1,\"1005\":1}}],[\"conf文件\",{\"1\":{\"810\":1}}],[\"conf是一个总配置文件\",{\"1\":{\"810\":1}}],[\"conf了\",{\"1\":{\"608\":1}}],[\"confirms=true\",{\"1\":{\"832\":1,\"835\":1}}],[\"confirmcallback\",{\"1\":{\"510\":1}}],[\"confirm\",{\"1\":{\"183\":1,\"186\":12,\"844\":2}}],[\"config包下的kaptchatextcreator验证码文本生成器类\",{\"1\":{\"877\":1}}],[\"configservice\",{\"1\":{\"878\":1}}],[\"configs配置公用的的配置\",{\"1\":{\"598\":1}}],[\"configs指定\",{\"1\":{\"543\":1}}],[\"config动态刷新之手动版\",{\"0\":{\"594\":1}}],[\"config客户端配置与测试\",{\"0\":{\"593\":1}}],[\"config配置总控中心搭建\",{\"0\":{\"592\":1}}],[\"config分为服务端和客户端两部分\",{\"1\":{\"591\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"480\":1}}],[\"configuration容器\",{\"1\":{\"889\":1}}],[\"configuration配置类\",{\"1\":{\"731\":1}}],[\"configurationtypedashboardgroupingrule\",{\"1\":{\"610\":1}}],[\"configurationtypes\",{\"1\":{\"610\":1}}],[\"configuration标注的类\",{\"1\":{\"517\":1}}],[\"configurations\",{\"1\":{\"483\":1,\"537\":1}}],[\"configuration>\",{\"1\":{\"400\":1,\"464\":1}}],[\"configurationproperties是在第三方包中\",{\"1\":{\"507\":1}}],[\"configurationproperties\",{\"0\":{\"508\":1},\"1\":{\"126\":1,\"370\":1,\"507\":2}}],[\"configuration\",{\"0\":{\"517\":1},\"1\":{\"97\":1,\"124\":1,\"125\":1,\"400\":2,\"464\":2,\"473\":3,\"482\":1,\"534\":1,\"537\":1,\"546\":3,\"575\":1,\"591\":1,\"625\":1}}],[\"configure\",{\"1\":{\"473\":1}}],[\"config>\",{\"1\":{\"462\":2}}],[\"configlocation\",{\"1\":{\"462\":1}}],[\"config\",{\"0\":{\"400\":1,\"464\":1,\"882\":1},\"1\":{\"70\":1,\"125\":20,\"213\":1,\"222\":1,\"229\":3,\"267\":4,\"400\":2,\"402\":1,\"462\":1,\"464\":2,\"489\":1,\"517\":1,\"534\":1,\"542\":2,\"543\":5,\"578\":1,\"591\":1,\"593\":2,\"594\":3,\"597\":2,\"598\":23,\"794\":1,\"796\":2,\"878\":1,\"883\":1,\"981\":3,\"986\":2,\"1005\":9}}],[\"conf\",{\"1\":{\"48\":1,\"71\":2,\"72\":2,\"210\":2,\"211\":1,\"213\":7,\"229\":1,\"608\":4,\"791\":1,\"794\":1,\"795\":15,\"810\":7,\"861\":1}}],[\"continuum\",{\"1\":{\"1005\":1}}],[\"continuous\",{\"1\":{\"994\":2}}],[\"continue\",{\"1\":{\"580\":1,\"1084\":3}}],[\"continueorpropagate\",{\"1\":{\"580\":1}}],[\"contrller\",{\"1\":{\"240\":1}}],[\"controlleraspectaspect\",{\"1\":{\"1081\":1}}],[\"controlleradvice类似\",{\"1\":{\"520\":1}}],[\"controlleradvice的衍生注解\",{\"1\":{\"520\":1}}],[\"controlleradvice\",{\"0\":{\"519\":1},\"1\":{\"729\":1}}],[\"controller类\",{\"1\":{\"543\":1}}],[\"controller方法常用参数\",{\"0\":{\"535\":1}}],[\"controller方法指定用哪个分组\",{\"1\":{\"241\":1}}],[\"controllerlog\",{\"1\":{\"496\":1,\"1081\":1}}],[\"controller接收service处理完的数据\",{\"1\":{\"252\":1}}],[\"controller应该只需三句话\",{\"1\":{\"252\":1}}],[\"controller改成\",{\"1\":{\"241\":1}}],[\"controller\",{\"1\":{\"124\":1,\"156\":1,\"240\":3,\"252\":2,\"460\":1,\"462\":1,\"492\":1,\"495\":1,\"498\":1,\"503\":1,\"517\":1,\"520\":3,\"543\":3,\"598\":1,\"621\":1,\"629\":1,\"877\":1,\"887\":1}}],[\"control\",{\"0\":{\"1050\":1},\"1\":{\"47\":1,\"54\":1,\"630\":1,\"1006\":2,\"1039\":1,\"1041\":1}}],[\"context配置的分离\",{\"1\":{\"593\":1}}],[\"context有着不同的约定\",{\"1\":{\"593\":1}}],[\"context和application\",{\"1\":{\"593\":2}}],[\"context的父上下文\",{\"1\":{\"593\":1}}],[\"contextloads\",{\"1\":{\"529\":1}}],[\"contextloaderlistener<\",{\"1\":{\"459\":1}}],[\"context=\",{\"1\":{\"460\":1,\"462\":1}}],[\"context\",{\"1\":{\"157\":18,\"229\":1,\"459\":2,\"460\":5,\"462\":6,\"486\":1,\"489\":1,\"538\":2,\"546\":1,\"593\":1,\"1082\":2}}],[\"contents\",{\"1\":{\"642\":1}}],[\"content=\",{\"1\":{\"63\":1,\"220\":2}}],[\"content\",{\"1\":{\"48\":4,\"69\":1,\"77\":1,\"230\":1,\"539\":1,\"830\":1,\"1013\":2,\"1084\":7,\"1085\":1}}],[\"wpa\",{\"1\":{\"1155\":1}}],[\"wtg装pe\",{\"0\":{\"1026\":1}}],[\"wtg\",{\"0\":{\"1024\":1},\"1\":{\"1024\":1}}],[\"w+\",{\"1\":{\"1020\":1}}],[\"wshn4\",{\"1\":{\"1005\":1}}],[\"wgestures\",{\"1\":{\"996\":1,\"1037\":1,\"1162\":1}}],[\"wget\",{\"1\":{\"210\":1,\"789\":1,\"801\":1,\"808\":1,\"1003\":1}}],[\"wq\",{\"1\":{\"990\":1}}],[\"wm\",{\"1\":{\"938\":6,\"959\":2}}],[\"wms\",{\"1\":{\"932\":1}}],[\"wms也用\",{\"1\":{\"612\":1}}],[\"wms常用\",{\"1\":{\"612\":1}}],[\"w1\",{\"1\":{\"937\":1}}],[\"w2\",{\"1\":{\"937\":2}}],[\"w\",{\"1\":{\"786\":2}}],[\"wc\",{\"1\":{\"734\":1}}],[\"woff\",{\"1\":{\"706\":1}}],[\"wo541075754\",{\"1\":{\"691\":1}}],[\"workflow\",{\"1\":{\"994\":1,\"1005\":1}}],[\"work\",{\"1\":{\"907\":2}}],[\"workspace的文件\",{\"1\":{\"1100\":1}}],[\"workspace\",{\"1\":{\"610\":1,\"1005\":1}}],[\"worker\",{\"1\":{\"594\":1}}],[\"working\",{\"1\":{\"537\":2,\"1005\":1}}],[\"workqueue\",{\"1\":{\"362\":1}}],[\"word\",{\"1\":{\"281\":1,\"750\":1,\"752\":2,\"1017\":1,\"1126\":1}}],[\"world\",{\"1\":{\"216\":4,\"487\":1,\"754\":2,\"755\":2,\"756\":2,\"780\":1,\"1020\":1}}],[\"writer\",{\"1\":{\"1005\":4}}],[\"write\",{\"1\":{\"633\":1,\"634\":1,\"720\":1,\"899\":4,\"928\":2,\"998\":2,\"1005\":2,\"1006\":1}}],[\"writevalueasstring\",{\"1\":{\"492\":2}}],[\"writelock\",{\"1\":{\"326\":2}}],[\"wrapper\",{\"1\":{\"236\":1,\"624\":3,\"641\":1,\"743\":2,\"1101\":2}}],[\"w个数据\",{\"1\":{\"265\":1}}],[\"w3\",{\"1\":{\"459\":1,\"460\":1,\"462\":1}}],[\"w3c\",{\"1\":{\"231\":1}}],[\"w3schools\",{\"1\":{\"60\":1}}],[\"way\",{\"1\":{\"1005\":1}}],[\"wav\",{\"1\":{\"706\":1}}],[\"wallet\",{\"1\":{\"1006\":1}}],[\"wallace\",{\"1\":{\"277\":1}}],[\"wal\",{\"1\":{\"899\":2}}],[\"walk\",{\"1\":{\"540\":1,\"1084\":1}}],[\"wareskuservice\",{\"1\":{\"837\":1}}],[\"ware远程调用订单\",{\"1\":{\"157\":1}}],[\"war\",{\"1\":{\"473\":1}}],[\"wait\",{\"1\":{\"350\":1,\"352\":1,\"362\":1,\"687\":4,\"893\":1,\"928\":2,\"932\":3,\"1005\":1}}],[\"wangchujiang\",{\"1\":{\"782\":1}}],[\"wan\",{\"1\":{\"165\":1}}],[\"watch可以让我们监控一个值的变化\",{\"1\":{\"220\":1}}],[\"watchdog机制\",{\"1\":{\"86\":1,\"114\":1}}],[\"watch\",{\"0\":{\"85\":1,\"856\":1,\"980\":1},\"1\":{\"85\":1,\"220\":1,\"225\":1,\"857\":1,\"1006\":2}}],[\"week\",{\"1\":{\"1006\":1,\"1096\":1}}],[\"weather\",{\"1\":{\"937\":1}}],[\"weakreference\",{\"1\":{\"636\":1,\"660\":1}}],[\"weak\",{\"1\":{\"448\":1,\"660\":1}}],[\"wechat\",{\"1\":{\"136\":1,\"1003\":1}}],[\"weixin\",{\"1\":{\"136\":1,\"330\":1,\"1008\":1}}],[\"weight=1\",{\"1\":{\"72\":2}}],[\"web更重要的是实践\",{\"1\":{\"1150\":1}}],[\"webapiconfig\",{\"1\":{\"1097\":1}}],[\"web图形化配好\",{\"1\":{\"829\":1}}],[\"web管理后台端口\",{\"1\":{\"825\":1}}],[\"web控制台的访问地址为\",{\"1\":{\"796\":1}}],[\"web一个依赖就可以了\",{\"1\":{\"727\":1}}],[\"webm\",{\"1\":{\"706\":1}}],[\"webmvc<\",{\"1\":{\"458\":1}}],[\"webmvc\",{\"1\":{\"458\":1}}],[\"webmvcconfigurer\",{\"1\":{\"97\":1,\"534\":1}}],[\"webutils\",{\"1\":{\"632\":1}}],[\"webutils是我们在utils目录写好的类\",{\"1\":{\"632\":1}}],[\"webp\",{\"1\":{\"540\":1,\"1084\":2}}],[\"webpack\",{\"1\":{\"215\":1,\"222\":5,\"229\":1}}],[\"weblistener注解自动注册到spring容器中\",{\"1\":{\"521\":1}}],[\"weblogaspect\",{\"1\":{\"492\":2}}],[\"weblog\",{\"1\":{\"492\":8}}],[\"webfilter\",{\"1\":{\"521\":1}}],[\"webflux\",{\"1\":{\"228\":1,\"261\":1,\"466\":1,\"594\":1}}],[\"website\",{\"1\":{\"1005\":1}}],[\"webstorm\",{\"1\":{\"1003\":1,\"1005\":2}}],[\"websecurityconfigureradapter\",{\"1\":{\"625\":2}}],[\"webservlet\",{\"1\":{\"521\":1,\"594\":1}}],[\"websql\",{\"1\":{\"154\":1}}],[\"web开发这一章\",{\"1\":{\"466\":1}}],[\"web\",{\"0\":{\"459\":1},\"1\":{\"54\":1,\"67\":2,\"153\":2,\"156\":2,\"239\":1,\"261\":2,\"459\":6,\"460\":2,\"466\":2,\"481\":1,\"495\":1,\"560\":1,\"600\":1,\"617\":1,\"706\":2,\"726\":2,\"727\":1,\"737\":1,\"738\":2,\"796\":3,\"828\":2,\"887\":1,\"890\":1,\"1005\":1,\"1006\":1,\"1007\":1,\"1079\":1,\"1081\":1,\"1084\":1,\"1150\":2}}],[\"which\",{\"1\":{\"782\":2,\"941\":1}}],[\"while\",{\"1\":{\"305\":1,\"307\":1,\"348\":1,\"352\":3,\"580\":1,\"768\":1,\"846\":1,\"851\":1,\"1005\":1,\"1019\":1,\"1085\":16}}],[\"while循环\",{\"1\":{\"305\":1}}],[\"while方法\",{\"1\":{\"305\":1}}],[\"while好一点\",{\"1\":{\"110\":1}}],[\"why\",{\"0\":{\"121\":1},\"1\":{\"179\":1,\"552\":1}}],[\"wheel\",{\"1\":{\"998\":1}}],[\"where子句\",{\"1\":{\"937\":2}}],[\"where子句中使用最频繁的一列放在最左边\",{\"1\":{\"923\":2}}],[\"where语句\",{\"1\":{\"923\":1}}],[\"whereis\",{\"1\":{\"782\":1}}],[\"where>\",{\"1\":{\"433\":1}}],[\"where标签不能解决\",{\"1\":{\"432\":1}}],[\"where只会去掉第一个多出来的and或者or\",{\"1\":{\"431\":1}}],[\"where条件就不成立\",{\"1\":{\"170\":1}}],[\"where\",{\"0\":{\"431\":1},\"1\":{\"81\":1,\"164\":1,\"165\":2,\"169\":3,\"170\":1,\"236\":1,\"408\":1,\"411\":1,\"415\":1,\"419\":1,\"421\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":2,\"429\":2,\"430\":3,\"431\":1,\"432\":1,\"434\":2,\"436\":1,\"438\":2,\"894\":1,\"895\":2,\"896\":1,\"897\":3,\"898\":1,\"906\":4,\"907\":1,\"917\":2,\"921\":1,\"922\":1,\"923\":24,\"924\":1,\"925\":3,\"941\":4,\"942\":1,\"943\":1,\"947\":3,\"952\":2,\"954\":2,\"959\":13,\"963\":2}}],[\"whenever\",{\"1\":{\"473\":1}}],[\"when>\",{\"1\":{\"433\":3}}],[\"whencomplete\",{\"0\":{\"373\":1},\"1\":{\"374\":1}}],[\"when\",{\"1\":{\"46\":1,\"362\":3,\"430\":1,\"433\":1,\"948\":2,\"955\":1,\"959\":13}}],[\"what\",{\"0\":{\"480\":1},\"1\":{\"60\":1,\"552\":1}}],[\"www\",{\"0\":{\"980\":1,\"1040\":1,\"1041\":1},\"1\":{\"49\":1,\"60\":4,\"62\":1,\"63\":2,\"69\":1,\"73\":6,\"197\":2,\"220\":1,\"242\":1,\"261\":1,\"379\":1,\"380\":1,\"383\":1,\"388\":1,\"459\":1,\"460\":10,\"462\":13,\"539\":1,\"543\":3,\"559\":1,\"662\":1,\"670\":1,\"671\":1,\"696\":1,\"773\":1,\"825\":1,\"857\":1,\"868\":1,\"987\":1,\"994\":1,\"998\":1,\"1005\":2,\"1041\":1,\"1081\":3,\"1085\":1,\"1154\":1}}],[\"wifi\",{\"0\":{\"1155\":1}}],[\"wiki\",{\"1\":{\"1145\":1}}],[\"wikipedia\",{\"1\":{\"272\":1}}],[\"wives1\",{\"1\":{\"776\":3}}],[\"wives\",{\"1\":{\"776\":1}}],[\"width=\",{\"1\":{\"1005\":1}}],[\"width=$\",{\"1\":{\"1005\":2}}],[\"width=device\",{\"1\":{\"220\":1}}],[\"width\",{\"1\":{\"220\":1,\"1005\":2}}],[\"with\",{\"1\":{\"183\":1,\"317\":1,\"540\":3,\"591\":1,\"793\":1,\"803\":1,\"849\":1,\"866\":1,\"927\":1,\"929\":2,\"934\":2,\"959\":8,\"994\":3,\"1001\":1,\"1005\":1}}],[\"win10\",{\"1\":{\"1041\":1}}],[\"win10只是调节了字体\",{\"1\":{\"998\":1}}],[\"win+1\",{\"1\":{\"1037\":1}}],[\"win+\",{\"1\":{\"1037\":3}}],[\"win+p设置屏幕投影功能\",{\"0\":{\"1033\":1}}],[\"win+ppause\",{\"0\":{\"1029\":1}}],[\"win+k\",{\"0\":{\"1030\":1}}],[\"win\",{\"1\":{\"392\":1,\"782\":1,\"996\":1,\"1038\":1}}],[\"window\",{\"1\":{\"69\":1,\"1005\":1,\"1006\":1}}],[\"windowstarttimestamp\",{\"1\":{\"850\":2}}],[\"windows系统可以存在多个用户\",{\"1\":{\"785\":1}}],[\"windows是\",{\"1\":{\"688\":1}}],[\"windows\",{\"0\":{\"1028\":1,\"1160\":1},\"1\":{\"47\":2,\"76\":3,\"210\":1,\"391\":1,\"785\":6,\"806\":1,\"808\":1,\"998\":2,\"1006\":1,\"1027\":1,\"1037\":1,\"1038\":1,\"1039\":2,\"1041\":2,\"1080\":1}}],[\"win64\",{\"1\":{\"47\":1}}],[\"will\",{\"1\":{\"27\":1,\"362\":2}}],[\"代替不行吗\",{\"1\":{\"715\":1}}],[\"代替重入锁\",{\"1\":{\"674\":1}}],[\"代替原本的功能页面\",{\"1\":{\"603\":1}}],[\"代替\",{\"0\":{\"595\":1,\"596\":1},\"1\":{\"568\":1,\"947\":1}}],[\"代替了\",{\"1\":{\"229\":1}}],[\"代理到哪个地址\",{\"1\":{\"810\":1}}],[\"代理客户端\",{\"1\":{\"809\":1}}],[\"代理客户端的\",{\"1\":{\"72\":1}}],[\"代理类\",{\"1\":{\"688\":1}}],[\"代理类在调用之前会开启事务\",{\"1\":{\"179\":1,\"182\":1}}],[\"代理角色所代表的真实对象\",{\"1\":{\"688\":1}}],[\"代理角色\",{\"1\":{\"688\":1}}],[\"代理可以看作是对调用目标的一个包装\",{\"1\":{\"640\":1}}],[\"代理可以代理目标对象中的非\",{\"1\":{\"182\":1}}],[\"代理模式一般涉及到的角色有\",{\"1\":{\"688\":1}}],[\"代理模式的作用是\",{\"1\":{\"688\":1}}],[\"代理模式\",{\"1\":{\"498\":1,\"688\":1}}],[\"代理分为静态代理和动态代理\",{\"1\":{\"493\":1}}],[\"代理也有一个限制\",{\"1\":{\"182\":1}}],[\"代理的限制\",{\"1\":{\"182\":1}}],[\"代理是基于继承的代理\",{\"1\":{\"182\":1}}],[\"代理对象可以在执行真实对象操作时\",{\"1\":{\"688\":1}}],[\"代理对象角色内部含有对真实对象的引用\",{\"1\":{\"688\":1}}],[\"代理对象就可以拦截到四大对象的每一个执行\",{\"1\":{\"465\":1}}],[\"代理对象里面包含了\",{\"1\":{\"465\":1}}],[\"代理对象\",{\"1\":{\"179\":1}}],[\"代理\",{\"1\":{\"94\":1,\"182\":2}}],[\"代理服务器会处理跨域请求\",{\"1\":{\"883\":1}}],[\"代理服务器端\",{\"1\":{\"809\":1}}],[\"代理服务器端的\",{\"1\":{\"72\":1}}],[\"代理服务器\",{\"1\":{\"72\":1}}],[\"代理服务器通常会增加一个叫做x\",{\"1\":{\"46\":1}}],[\"代理后会丢失很多东西\",{\"1\":{\"71\":1,\"93\":1}}],[\"代表第1\",{\"0\":{\"1047\":1}}],[\"代表正则表达式的头和尾\",{\"1\":{\"1023\":1}}],[\"代表此行不会纳入合并文件中\",{\"1\":{\"993\":1}}],[\"代表该数据类型指定的显示宽度\",{\"1\":{\"920\":1}}],[\"代表什么\",{\"1\":{\"895\":1}}],[\"代表数组长度\",{\"1\":{\"739\":1}}],[\"代表用户已经登陆过\",{\"1\":{\"627\":1}}],[\"代表这个订单服务是一个全局事务\",{\"1\":{\"607\":1}}],[\"代表一个文件或文件目录\",{\"1\":{\"688\":1}}],[\"代表一个增删改查的详细信息\",{\"1\":{\"465\":1}}],[\"代表一辆车\",{\"1\":{\"342\":1,\"343\":1}}],[\"代表整个参数\",{\"1\":{\"438\":2}}],[\"代表查询所有\",{\"1\":{\"273\":1}}],[\"代表查询对象\",{\"1\":{\"273\":1}}],[\"代表我们能运行的命令\",{\"1\":{\"222\":1}}],[\"代表当前方法的结果需要缓存\",{\"1\":{\"123\":1}}],[\"代表了该线程对这个\",{\"1\":{\"86\":1,\"114\":1}}],[\"代表\",{\"1\":{\"69\":1,\"658\":1,\"782\":1}}],[\"代码模板\",{\"1\":{\"1164\":1}}],[\"代码管理网站\",{\"1\":{\"1145\":1}}],[\"代码二不会\",{\"1\":{\"1085\":1}}],[\"代码二\",{\"1\":{\"1085\":1}}],[\"代码一\",{\"1\":{\"1085\":1}}],[\"代码私有麻烦\",{\"1\":{\"994\":1}}],[\"代码地址后面紧跟\",{\"1\":{\"985\":1}}],[\"代码要有特殊处理\",{\"1\":{\"932\":1}}],[\"代码复杂了点多了两个手动序列化操作\",{\"1\":{\"875\":1}}],[\"代码中字符串h1和h2都使用常量赋值\",{\"1\":{\"725\":1}}],[\"代码中不能想当然的使用这三条指令\",{\"1\":{\"85\":1}}],[\"代码3\",{\"1\":{\"686\":1}}],[\"代码2\",{\"1\":{\"686\":1}}],[\"代码1\",{\"1\":{\"686\":1}}],[\"代码膨胀\",{\"1\":{\"584\":1}}],[\"代码验证\",{\"1\":{\"480\":1}}],[\"代码为变量a\",{\"1\":{\"388\":1}}],[\"代码为变量c\",{\"1\":{\"388\":1}}],[\"代码为变量b\",{\"1\":{\"388\":1}}],[\"代码缓存\",{\"1\":{\"386\":1}}],[\"代码书写规范\",{\"1\":{\"359\":1}}],[\"代码是错误的\",{\"1\":{\"229\":1}}],[\"代码示例\",{\"1\":{\"157\":2}}],[\"代码初步写好\",{\"1\":{\"110\":1}}],[\"代码库\",{\"1\":{\"88\":1}}],[\"代码也很值得学习\",{\"1\":{\"69\":1}}],[\"代码块里的变量\",{\"1\":{\"658\":1}}],[\"代码块\",{\"0\":{\"15\":1,\"1042\":1},\"1\":{\"88\":2,\"658\":1,\"686\":1,\"696\":1,\"878\":1}}],[\"代码\",{\"0\":{\"322\":1,\"342\":1,\"457\":1},\"1\":{\"14\":1,\"706\":1,\"784\":2}}],[\"此处再接命令会导致上面命令upupor$\",{\"1\":{\"787\":1}}],[\"此处不表\",{\"1\":{\"671\":1}}],[\"此为从文档挡圈位置向上查找关键字\",{\"1\":{\"782\":1}}],[\"此为从文档当前位置向下查找关键字\",{\"1\":{\"782\":1}}],[\"此\",{\"1\":{\"688\":1}}],[\"此过程就称为类的加载\",{\"1\":{\"688\":1}}],[\"此接口重写方法拿到了\",{\"1\":{\"486\":1}}],[\"此方法的应用之一是在继续程序之前等待一组独立的completablefutures完成\",{\"1\":{\"377\":1}}],[\"此案成间的通讯\",{\"1\":{\"287\":1}}],[\"此属性\",{\"1\":{\"220\":1}}],[\"此外我还安装了霞鹜文楷和阿里普惠体\",{\"1\":{\"1005\":1}}],[\"此外\",{\"1\":{\"153\":1,\"156\":1,\"648\":1,\"721\":1}}],[\"此时e\",{\"1\":{\"849\":1}}],[\"此时主动往解锁库存的死信队列发送一条消息\",{\"1\":{\"844\":1}}],[\"此时库存解锁失败\",{\"1\":{\"844\":1}}],[\"此时才可以建立其它分支\",{\"1\":{\"987\":1}}],[\"此时才可以broker删除这个消息\",{\"1\":{\"837\":1}}],[\"此时才开始初始化\",{\"1\":{\"302\":1}}],[\"此时有一万的请求进入购票系统\",{\"1\":{\"814\":1}}],[\"此时不能做任何事情\",{\"1\":{\"802\":1}}],[\"此时mysql已经开始正常运行\",{\"1\":{\"802\":1}}],[\"此时此刻github认为是该账号主人在操作这台主机\",{\"1\":{\"798\":1,\"984\":1}}],[\"此时此索引位置上的所数据改为使用红黑树存储\",{\"1\":{\"703\":1}}],[\"此时我们将方法修改\",{\"1\":{\"766\":1}}],[\"此时大括号可以省略\",{\"1\":{\"756\":1}}],[\"此时小括号可以省略\",{\"1\":{\"755\":1}}],[\"此时只执行到步骤4\",{\"1\":{\"697\":1}}],[\"此时链表中有两个元素\",{\"1\":{\"694\":1}}],[\"此时链表中只有一个元素\",{\"1\":{\"694\":2}}],[\"此时t2接着迁移对象遍历原来abc\",{\"1\":{\"694\":1}}],[\"此时发现head指针在\",{\"1\":{\"693\":1}}],[\"此时这个类会报错\",{\"1\":{\"691\":1}}],[\"此时索引位置上的所有数据改为使用红黑树存\",{\"1\":{\"688\":1}}],[\"此时的容量大小指的是\",{\"1\":{\"702\":1}}],[\"此时的s3和s4保存的地址值\",{\"1\":{\"687\":1}}],[\"此时的s1和s2的数据javaee声明在方法区中的字符串常量池中\",{\"1\":{\"687\":1}}],[\"此时的b方法并非代理类调用\",{\"1\":{\"182\":1}}],[\"此时的b方法并非是代理类调用\",{\"1\":{\"179\":1}}],[\"此时线程a就会进入阻塞状态\",{\"1\":{\"687\":1}}],[\"此时登陆校验数据库密码就会根据指定的\",{\"1\":{\"625\":1}}],[\"此时每个服务内部的数据一致性由本地事务来保证\",{\"1\":{\"606\":1}}],[\"此时产生两条查询语句\",{\"1\":{\"423\":1}}],[\"此时stock的值仍为10\",{\"1\":{\"309\":1}}],[\"此时刚好线程b没有被挂起\",{\"1\":{\"305\":1}}],[\"此时instance\",{\"1\":{\"301\":2}}],[\"此时\",{\"1\":{\"117\":1,\"302\":1,\"648\":1,\"694\":1,\"779\":1,\"900\":1}}],[\"此时如果需要加锁\",{\"1\":{\"112\":1}}],[\"此时选择乐观锁的话\",{\"1\":{\"82\":1}}],[\"此时代理服务器对外就表现为一个服务器\",{\"1\":{\"72\":1,\"809\":1}}],[\"此时拿的是refresh\",{\"1\":{\"70\":1}}],[\"此时伪造没有任何意义\",{\"1\":{\"46\":1}}],[\"此后请求都把这个token带上就行了\",{\"1\":{\"52\":1}}],[\"此文字有脚注^first\",{\"1\":{\"19\":1}}],[\"在刚刚生成的index\",{\"1\":{\"1161\":1}}],[\"在公司用了2个月u盘的系统\",{\"1\":{\"1160\":1}}],[\"在需加密目录内新建\",{\"1\":{\"1158\":1}}],[\"在需要更新数据的时候就麻烦了\",{\"1\":{\"915\":1}}],[\"在需要时再读取数据库\",{\"1\":{\"91\":1}}],[\"在每年3\",{\"1\":{\"1150\":1}}],[\"在每一个可能返回\",{\"1\":{\"686\":1}}],[\"在中国生活\",{\"1\":{\"1106\":1}}],[\"在python中\",{\"1\":{\"1095\":1}}],[\"在put\",{\"1\":{\"703\":1}}],[\"在任务管理器中\",{\"1\":{\"1095\":1}}],[\"在任何时候都可能被垃圾回收器回收\",{\"1\":{\"660\":1}}],[\"在任何rpc远程框架中\",{\"1\":{\"564\":1}}],[\"在32位操作系统中\",{\"1\":{\"1091\":1}}],[\"在前面提携你\",{\"1\":{\"1077\":1}}],[\"在背后推着你走\",{\"1\":{\"1077\":1}}],[\"在windows命令提示符下\",{\"1\":{\"1041\":1}}],[\"在windows中\",{\"1\":{\"1038\":1}}],[\"在环境变量对话框中\",{\"1\":{\"1038\":1}}],[\"在弹出的对话框中选择\",{\"1\":{\"1038\":1}}],[\"在弹出的窗口中\",{\"1\":{\"537\":1}}],[\"在文本输入过程中\",{\"0\":{\"1034\":1}}],[\"在文件名的后缀名前附加\",{\"1\":{\"540\":1}}],[\"在安装之前需要先分好区\",{\"1\":{\"1027\":1}}],[\"在项目代码中使用mybatis\",{\"1\":{\"1012\":1}}],[\"在构建和打包过程中排除mybatis\",{\"1\":{\"1012\":1}}],[\"在构建和打包项目时排除mybatis\",{\"1\":{\"1012\":1}}],[\"在调节后的屏幕上会显示一个更低的分辨率\",{\"1\":{\"998\":1}}],[\"在调用的时候执行查询语句并生成结果\",{\"1\":{\"934\":1}}],[\"在调用微服务接口时候\",{\"1\":{\"573\":1}}],[\"在官网这里键位映射表\",{\"1\":{\"996\":1}}],[\"在它里面放node的iamge\",{\"1\":{\"994\":1}}],[\"在选择变基或合并时\",{\"1\":{\"990\":1}}],[\"在选择分库分表方法时\",{\"1\":{\"961\":1}}],[\"在目标分支上\",{\"1\":{\"990\":1}}],[\"在设置中设置显示器的缩放分辨率只会影响ui字体并不会影响真实的4k分辨率是吗\",{\"1\":{\"998\":1}}],[\"在设置里面找到\",{\"1\":{\"986\":1}}],[\"在设计上有很多有意思的地方\",{\"1\":{\"898\":1}}],[\"在设计上综合了两种模型的特性\",{\"1\":{\"712\":1}}],[\"在设计\",{\"1\":{\"543\":1}}],[\"在无主键表中\",{\"1\":{\"965\":1}}],[\"在varchar类型的字段中存储了10个字符\",{\"1\":{\"963\":1}}],[\"在vue的生产环境中\",{\"1\":{\"883\":1}}],[\"在我的圈子里\",{\"1\":{\"1140\":1}}],[\"在我们删除数据库百万级别数据的时候\",{\"1\":{\"975\":1}}],[\"在我们的这个例子中\",{\"1\":{\"924\":1}}],[\"在我看来\",{\"1\":{\"961\":1}}],[\"在面对数据库容量瓶颈和写并发量大的问题时\",{\"1\":{\"961\":1}}],[\"在面向对象的设计原则中\",{\"1\":{\"740\":1}}],[\"在sql\",{\"1\":{\"938\":1}}],[\"在springboot应用里面只需要在启动类上去加上\",{\"1\":{\"731\":1}}],[\"在springsecurity中\",{\"1\":{\"629\":1,\"630\":1}}],[\"在spring框架中\",{\"1\":{\"498\":1}}],[\"在spring中表达式是6位组成\",{\"1\":{\"202\":1}}],[\"在spring\",{\"1\":{\"60\":1,\"517\":1,\"827\":1}}],[\"在列名称不同时或连接条件复杂时就无法用了\",{\"1\":{\"937\":1}}],[\"在简单的连接中常用\",{\"1\":{\"937\":1}}],[\"在数组中\",{\"1\":{\"935\":1}}],[\"在数据发生变化时\",{\"1\":{\"218\":1}}],[\"在哪呢\",{\"1\":{\"935\":1}}],[\"在可重复读隔离级别下\",{\"1\":{\"935\":1}}],[\"在可重入锁中\",{\"1\":{\"321\":1}}],[\"在第\",{\"1\":{\"934\":1}}],[\"在第一个事务中\",{\"1\":{\"905\":1}}],[\"在第一行就声明了a变量\",{\"1\":{\"388\":1}}],[\"在更新了行之后查询\",{\"1\":{\"934\":1}}],[\"在整个专栏里面\",{\"1\":{\"934\":1}}],[\"在互相等待对方的资源释放\",{\"1\":{\"932\":1}}],[\"在等待事务\",{\"1\":{\"932\":2}}],[\"在下面的操作序列中\",{\"1\":{\"931\":1}}],[\"在下面这个表\",{\"1\":{\"921\":1}}],[\"在备份开始的时候\",{\"1\":{\"929\":1}}],[\"在备份过程中整个库完全处于只读状态\",{\"1\":{\"927\":1}}],[\"在做表结构变更的时候\",{\"1\":{\"929\":1}}],[\"在语句执行开始时申请\",{\"1\":{\"928\":1}}],[\"在访问一个表的时候会被自动加上\",{\"1\":{\"928\":1}}],[\"在访问数据库前\",{\"1\":{\"91\":1}}],[\"在还没有出现更细粒度的锁的时候\",{\"1\":{\"928\":1}}],[\"在异常处理机制上有差异\",{\"1\":{\"927\":1}}],[\"在按\",{\"1\":{\"925\":1}}],[\"在满足语句需求的情况下\",{\"1\":{\"925\":1}}],[\"在图\",{\"1\":{\"924\":1}}],[\"在maven项目中\",{\"1\":{\"1014\":1}}],[\"在macos中\",{\"1\":{\"1037\":1}}],[\"在macos终端中\",{\"1\":{\"782\":1}}],[\"在mac\",{\"1\":{\"998\":1}}],[\"在mysql中\",{\"1\":{\"959\":1,\"963\":1,\"965\":1,\"967\":1}}],[\"在mysql中可以使用month\",{\"1\":{\"951\":1}}],[\"在mysql的explain语句中\",{\"1\":{\"923\":1}}],[\"在创建表时\",{\"1\":{\"963\":2}}],[\"在创建多列索引时\",{\"1\":{\"923\":2}}],[\"在创建s1的时候\",{\"1\":{\"723\":1}}],[\"在建立联合索引的时候\",{\"1\":{\"923\":1}}],[\"在建立冗余索引来支持覆盖索引时就需要权衡考虑了\",{\"1\":{\"922\":1}}],[\"在建表语句中一般是这么定义的\",{\"1\":{\"918\":1}}],[\"在上传到minio时计算下md5后再上传\",{\"1\":{\"1084\":1}}],[\"在上述示例中\",{\"1\":{\"959\":1}}],[\"在上述语法中\",{\"1\":{\"959\":1}}],[\"在上一篇文章中\",{\"1\":{\"921\":1,\"930\":1}}],[\"在上面的技术架构介绍中\",{\"1\":{\"824\":1}}],[\"在上面的代码中\",{\"1\":{\"157\":2,\"179\":1}}],[\"在上面的配置中\",{\"1\":{\"73\":2}}],[\"在专栏的第\",{\"1\":{\"919\":1}}],[\"在评论区\",{\"1\":{\"919\":1}}],[\"在插入新值的时候需要做必要的维护\",{\"1\":{\"918\":1}}],[\"在插入元素\",{\"1\":{\"694\":1}}],[\"在机械硬盘时代\",{\"1\":{\"916\":1}}],[\"在日常工作中会经常接触到\",{\"1\":{\"909\":1}}],[\"在业务功能测试阶段要求输出所有的\",{\"1\":{\"908\":1}}],[\"在不同的数据库管理系统中\",{\"1\":{\"959\":1}}],[\"在不同系统\",{\"1\":{\"70\":1}}],[\"在不借助目录的情况下\",{\"1\":{\"909\":1}}],[\"在不需要的时候才删除\",{\"1\":{\"906\":1}}],[\"在视图\",{\"1\":{\"906\":1}}],[\"在谈隔离级别之前\",{\"1\":{\"905\":1}}],[\"在事务支持方面的特定实现\",{\"1\":{\"904\":1}}],[\"在事务中语句更新会生成\",{\"1\":{\"902\":1}}],[\"在之后用\",{\"1\":{\"901\":1}}],[\"在生意红火柜台很忙时\",{\"1\":{\"899\":1}}],[\"在生产环境中\",{\"1\":{\"883\":4}}],[\"在生产者工程中编写配置类\",{\"1\":{\"827\":1}}],[\"在某个数据页上做了什么修改\",{\"1\":{\"900\":1}}],[\"在某个数据页上做了某个修改\",{\"1\":{\"899\":1}}],[\"在某些用例中是无限的\",{\"1\":{\"1017\":1}}],[\"在某些清空下会挂起线程\",{\"1\":{\"346\":1}}],[\"在某些情况下\",{\"1\":{\"78\":1,\"688\":1}}],[\"在引擎内部使用覆盖索引在索引\",{\"1\":{\"922\":1}}],[\"在引擎内部则扫描了多行\",{\"1\":{\"897\":1}}],[\"在引入资源文件时\",{\"1\":{\"454\":1,\"462\":1}}],[\"在有些系统中\",{\"1\":{\"927\":1}}],[\"在有些场景下\",{\"1\":{\"897\":1}}],[\"在有注解方法被调用时\",{\"1\":{\"182\":1}}],[\"在工程实现上\",{\"1\":{\"897\":1}}],[\"在完成经典的\",{\"1\":{\"893\":1}}],[\"在完成字符串的拼接后\",{\"1\":{\"724\":1}}],[\"在拦截器中\",{\"1\":{\"890\":1}}],[\"在拦截器中设置threadlocal的值\",{\"1\":{\"157\":2}}],[\"在ruoyi开源项目中\",{\"1\":{\"890\":1}}],[\"在redis命令中shutdown\",{\"1\":{\"862\":1}}],[\"在redisadvaced笔记中说了这样占地方\",{\"1\":{\"123\":1}}],[\"在redission中想要启动看门狗机制\",{\"1\":{\"113\":1}}],[\"在全局路由实现\",{\"1\":{\"883\":1}}],[\"在开发时一般都是按照顺序加锁来避免死锁\",{\"1\":{\"932\":1,\"933\":1}}],[\"在开发环境下\",{\"1\":{\"883\":1}}],[\"在开发环境中\",{\"1\":{\"883\":1}}],[\"在开始这篇文章之前\",{\"1\":{\"921\":1}}],[\"在开始执行之前\",{\"1\":{\"896\":1}}],[\"在开放的api接口请求中\",{\"1\":{\"70\":1}}],[\"在client\",{\"1\":{\"866\":1}}],[\"在coupons里指定要导入的配置即可\",{\"1\":{\"598\":1}}],[\"在concurrent包发布以前\",{\"1\":{\"347\":1}}],[\"在completablefuture执行时可以在需要的地方访问请求上下文\",{\"1\":{\"157\":1}}],[\"在具体实现时\",{\"1\":{\"849\":1}}],[\"在消费的方法中\",{\"1\":{\"837\":1}}],[\"在配置ssh后就信任该主机了\",{\"1\":{\"798\":1,\"984\":1}}],[\"在脚本文件中执行时\",{\"1\":{\"787\":1}}],[\"在脚本运行过程中\",{\"1\":{\"216\":1}}],[\"在常见的桌面操作系统中\",{\"1\":{\"785\":1}}],[\"在常量池中创建一个引用指向这个\",{\"1\":{\"723\":1}}],[\"在类初始化时直接创建实例对象\",{\"1\":{\"779\":1}}],[\"在类加载阶段\",{\"1\":{\"722\":1}}],[\"在类加载的时候就完成了\",{\"1\":{\"667\":1}}],[\"在linux系统中0\",{\"1\":{\"784\":1}}],[\"在lib目录里包含了我自己的项目的代码目录\",{\"1\":{\"559\":1}}],[\"在lambda中引用局部变量\",{\"1\":{\"771\":1}}],[\"在treeset中如果comparator返回值是\",{\"1\":{\"766\":1}}],[\"在thread类中\",{\"1\":{\"687\":1}}],[\"在于接口定义的方法参数\",{\"1\":{\"763\":1}}],[\"在于注册中心\",{\"1\":{\"564\":1}}],[\"在jdbc中\",{\"1\":{\"740\":1}}],[\"在java8中\",{\"1\":{\"747\":1}}],[\"在javabean中要求提供一个public的空参构造器\",{\"1\":{\"688\":1}}],[\"在java中泛型只是一个占位符\",{\"1\":{\"717\":1}}],[\"在java中\",{\"1\":{\"688\":1,\"739\":1}}],[\"在java中的class下只能进行方法\",{\"1\":{\"646\":1}}],[\"在javascript中实参与形参数量并不需要像java一样必须在数量上严格保持一致\",{\"1\":{\"216\":1}}],[\"在切换日志具体实现的时候我们是不需要更改项目代码的\",{\"1\":{\"740\":1}}],[\"在切点之后织入\",{\"1\":{\"492\":1}}],[\"在切点之前织入\",{\"1\":{\"492\":2}}],[\"在oracle官网的文档中\",{\"1\":{\"725\":1}}],[\"在object中\",{\"1\":{\"687\":1}}],[\"在堆中创建字符串对象\",{\"1\":{\"723\":1}}],[\"在堆中也没有对应的对象产生\",{\"1\":{\"722\":1}}],[\"在堆上创建对象\",{\"1\":{\"722\":1}}],[\"在内部都使用了数组加链表\",{\"1\":{\"722\":1}}],[\"在内存中创建了几个对象\",{\"1\":{\"687\":1}}],[\"在内存中加载的位置\",{\"1\":{\"686\":1}}],[\"在内存足够的时候\",{\"1\":{\"660\":1}}],[\"在回滚日志\",{\"1\":{\"906\":1}}],[\"在回答这道题之前\",{\"1\":{\"721\":1}}],[\"在回顾发现一个虚假唤醒的\",{\"1\":{\"348\":1}}],[\"在append的过程中如果碰到是null的字符串\",{\"1\":{\"720\":1}}],[\"在客户端做并发控制\",{\"1\":{\"932\":1}}],[\"在客户端连接数量不高的情况下\",{\"1\":{\"711\":1}}],[\"在客户端计算机重启后它仍可以保留其值\",{\"1\":{\"49\":1}}],[\"在本地环境中\",{\"1\":{\"706\":1}}],[\"在本地访问\",{\"1\":{\"706\":1}}],[\"在本地repository中安装jar\",{\"1\":{\"561\":1}}],[\"在链表头部插入元素\",{\"1\":{\"694\":1}}],[\"在超过百万级数据量时\",{\"1\":{\"689\":1,\"741\":1}}],[\"在此记录下\",{\"1\":{\"1001\":1}}],[\"在此前过滤掉就不合理了\",{\"1\":{\"876\":1}}],[\"在此时就是链表中的第二个元素\",{\"1\":{\"694\":1}}],[\"在此时间之内\",{\"1\":{\"688\":1}}],[\"在此系统中两种\",{\"1\":{\"263\":1}}],[\"在方法中出现了泛型结构\",{\"1\":{\"688\":1}}],[\"在方法a中调用方法b\",{\"1\":{\"182\":1}}],[\"在添加数据时还维护了两个引用\",{\"1\":{\"688\":1}}],[\"在底层数组中并不是按照数组索引依次添加\",{\"1\":{\"688\":1}}],[\"在知道长度的情况下尽量调有参构造器把容量确定好\",{\"1\":{\"688\":1}}],[\"在效率上\",{\"1\":{\"686\":1}}],[\"在高频计算中\",{\"1\":{\"686\":1}}],[\"在高并发情况下\",{\"1\":{\"641\":1}}],[\"在高并发环境下\",{\"1\":{\"316\":1}}],[\"在高并发下\",{\"1\":{\"83\":1}}],[\"在范围之内\",{\"1\":{\"686\":1}}],[\"在编译完成后会消失\",{\"1\":{\"725\":1}}],[\"在编译以后都变成了\",{\"1\":{\"715\":1}}],[\"在编译期间\",{\"1\":{\"715\":1}}],[\"在编译时就已经变为b6=10了\",{\"1\":{\"662\":2}}],[\"在编译生成的项目下的bulid\",{\"1\":{\"454\":1}}],[\"在计算机系统中\",{\"1\":{\"648\":1}}],[\"在定义变量的同时对变量赋值\",{\"1\":{\"646\":1}}],[\"在传统集合框架内部\",{\"1\":{\"641\":1}}],[\"在传统的rpc远程调用框架中\",{\"1\":{\"563\":1}}],[\"在性能方面也远不尽如人意\",{\"1\":{\"640\":1}}],[\"在运行\",{\"1\":{\"977\":1}}],[\"在运行期间可以将新的变量放入运行时常量池中\",{\"1\":{\"722\":1}}],[\"在运行时的类型参数会被擦除\",{\"1\":{\"717\":1}}],[\"在运行时代码可以根据某些条件改变自身结构\",{\"1\":{\"688\":1}}],[\"在运行时\",{\"1\":{\"634\":1,\"635\":1}}],[\"在运维期间\",{\"1\":{\"582\":1}}],[\"在exceptiontranslationfilter中会去判断是认证失败还是授权失败出现的异常\",{\"1\":{\"630\":1}}],[\"在系统中代表具体个体的实体\",{\"1\":{\"630\":1}}],[\"在系统发生\",{\"1\":{\"572\":1}}],[\"在filtersecurityinterceptor中会从securitycontextholder获取其中的authentication\",{\"1\":{\"629\":1}}],[\"在yaml中开启自动代理数据源\",{\"1\":{\"608\":1}}],[\"在主题上是无序的\",{\"1\":{\"824\":1}}],[\"在主启动类加\",{\"1\":{\"576\":1}}],[\"在主线程结束后就关闭了进程\",{\"1\":{\"353\":1}}],[\"在心跳时间的时候发送\",{\"1\":{\"572\":1}}],[\"在分析问题的时候会经常用到\",{\"1\":{\"916\":1}}],[\"在分析这个结果之前\",{\"1\":{\"720\":1}}],[\"在分区故障恢复后\",{\"1\":{\"572\":1}}],[\"在分布查询的基础上\",{\"1\":{\"424\":1}}],[\"在分布式系统中\",{\"1\":{\"208\":1}}],[\"在分布式系统\",{\"1\":{\"176\":1}}],[\"在分布式环境下这些本地锁juc类都没法用\",{\"1\":{\"112\":1}}],[\"在分布式环境下这些juc类都没法用\",{\"1\":{\"108\":1}}],[\"在服务注册与发现中\",{\"1\":{\"564\":1}}],[\"在没有多核处理器的时候\",{\"1\":{\"1095\":1}}],[\"在没有分页并且数据量不大的情况下\",{\"1\":{\"868\":1}}],[\"在没有\",{\"1\":{\"727\":1}}],[\"在没有进行同步的情况下\",{\"1\":{\"694\":1}}],[\"在没有讲\",{\"1\":{\"560\":1}}],[\"在没有使用spring\",{\"1\":{\"559\":1}}],[\"在启动类中这个常用一些applicationcontext\",{\"1\":{\"543\":1,\"1081\":1}}],[\"在解决上述问题时\",{\"1\":{\"543\":1,\"1081\":1}}],[\"在解决循环依赖问题时\",{\"1\":{\"543\":1}}],[\"在初始化阶段\",{\"1\":{\"543\":1}}],[\"在初始化该类的实例时\",{\"1\":{\"538\":1,\"1082\":1}}],[\"在循环依赖解析期间\",{\"1\":{\"543\":1}}],[\"在你初学的时候\",{\"1\":{\"1150\":1}}],[\"在你团队你\",{\"1\":{\"1109\":1}}],[\"在你业务系统中的应用场景是什么\",{\"1\":{\"639\":1}}],[\"在你的示例中\",{\"1\":{\"539\":1}}],[\"在你提供的示例中\",{\"1\":{\"539\":1}}],[\"在程序中使用相对路径时\",{\"1\":{\"537\":1}}],[\"在右侧面板中\",{\"1\":{\"537\":1}}],[\"在顶部菜单栏中\",{\"1\":{\"537\":1}}],[\"在实现\",{\"1\":{\"934\":1}}],[\"在实现上\",{\"1\":{\"905\":1,\"935\":1}}],[\"在实例化阶段\",{\"1\":{\"543\":1}}],[\"在实例化该对象并完成依赖注入后\",{\"1\":{\"501\":1}}],[\"在实际应用中\",{\"1\":{\"967\":1}}],[\"在实际应用过程中\",{\"1\":{\"760\":1}}],[\"在实际的生产环境中\",{\"1\":{\"706\":2}}],[\"在实际部署时\",{\"1\":{\"537\":1}}],[\"在实际开发中\",{\"1\":{\"534\":1,\"677\":1}}],[\"在实际开发中很少出现\",{\"1\":{\"79\":1}}],[\"在特定切点做了增强处理\",{\"1\":{\"493\":1}}],[\"在获取对象时才会创建对象\",{\"1\":{\"486\":1}}],[\"在当前项目里面重写配置\",{\"1\":{\"476\":1}}],[\"在当前窗口\",{\"1\":{\"257\":1}}],[\"在四大对象创建的时候\",{\"1\":{\"465\":1}}],[\"在处理$\",{\"1\":{\"411\":1}}],[\"在处理\",{\"1\":{\"411\":1}}],[\"在使用mybatis\",{\"1\":{\"1012\":1}}],[\"在使用mybatis时\",{\"1\":{\"393\":1}}],[\"在使用\",{\"1\":{\"645\":1}}],[\"在使用spring\",{\"1\":{\"559\":1}}],[\"在使用的时候\",{\"1\":{\"326\":1}}],[\"在垃圾回收时\",{\"1\":{\"385\":1}}],[\"在清除阶段\",{\"1\":{\"385\":1}}],[\"在默认情况下\",{\"1\":{\"383\":1}}],[\"在锁竞争下\",{\"1\":{\"379\":1}}],[\"在锁时间到了以后\",{\"1\":{\"115\":1}}],[\"在多个事务同时查询同一组数据时\",{\"1\":{\"906\":1}}],[\"在多开\",{\"1\":{\"364\":1}}],[\"在多线程环境下\",{\"1\":{\"347\":1,\"694\":2}}],[\"在多线程领域\",{\"1\":{\"346\":1}}],[\"在触发障碍之前必须调用的线程数量\",{\"1\":{\"339\":1}}],[\"在加锁之后\",{\"1\":{\"329\":1}}],[\"在硬件层面做了很多优化\",{\"1\":{\"329\":1}}],[\"在进入引擎之前排队\",{\"1\":{\"932\":1}}],[\"在进入内层方法会自动获取锁\",{\"1\":{\"321\":1}}],[\"在进行数据库操作之前\",{\"1\":{\"78\":1}}],[\"在并发环境中\",{\"1\":{\"318\":1}}],[\"在大二上学期结束的时候\",{\"1\":{\"1150\":1}}],[\"在大量线程高并发更新atomicinteger的时候\",{\"1\":{\"312\":1}}],[\"在大多数常见的浏览器中\",{\"1\":{\"60\":1}}],[\"在执行此命令之前\",{\"1\":{\"999\":1}}],[\"在执行到它们之后的第一个操作\",{\"1\":{\"934\":1}}],[\"在执行完两条\",{\"1\":{\"931\":1}}],[\"在执行\",{\"1\":{\"928\":1}}],[\"在执行过程中临时使用的内存是管理在连接对象里面的\",{\"1\":{\"893\":1}}],[\"在执行过程中不允许被中断\",{\"1\":{\"303\":1}}],[\"在执行过程中不可被中断\",{\"1\":{\"302\":1}}],[\"在执行的时候别人不能打断\",{\"1\":{\"868\":1}}],[\"在执行加1操作\",{\"1\":{\"305\":1}}],[\"在再和主内存的值进行比较\",{\"1\":{\"305\":1}}],[\"在写满一个数据页的时候\",{\"1\":{\"972\":1}}],[\"在写完后\",{\"1\":{\"290\":1}}],[\"在写到客户端的时候设置cookie的domain\",{\"1\":{\"52\":1}}],[\"在自己的工作内存写好\",{\"1\":{\"284\":1}}],[\"在单独执行命令时\",{\"1\":{\"787\":1}}],[\"在单例模式中\",{\"1\":{\"283\":1}}],[\"在单点登录的认证过程中\",{\"1\":{\"153\":1}}],[\"在入口文件main\",{\"1\":{\"233\":1}}],[\"在后面的实战文章中\",{\"1\":{\"909\":1}}],[\"在后面的文章中\",{\"1\":{\"892\":1}}],[\"在后续的文章中会提到这类案例\",{\"1\":{\"908\":1}}],[\"在后续如果一个接口需要指定类型的参数\",{\"1\":{\"770\":1}}],[\"在后端接口controller添加\",{\"1\":{\"231\":1}}],[\"在后处理阶段\",{\"1\":{\"156\":1}}],[\"在bootstrap\",{\"1\":{\"229\":1}}],[\"在测试类测试\",{\"1\":{\"227\":1}}],[\"在挂载的\",{\"1\":{\"211\":1}}],[\"在会话较长的情况下可以考虑采取这种方式\",{\"1\":{\"208\":1}}],[\"在周几的的位置\",{\"1\":{\"202\":1}}],[\"在转账场景下\",{\"1\":{\"186\":1}}],[\"在两阶段提交的整个过程中\",{\"1\":{\"184\":1}}],[\"在对大表操作的时候\",{\"1\":{\"928\":1}}],[\"在对id\",{\"1\":{\"169\":1}}],[\"在对同一服务器的后续请求使用一个\",{\"1\":{\"49\":1}}],[\"在订单这个环节上需求获取多个模块的数据和信息\",{\"1\":{\"158\":1}}],[\"在请求处理完成后进行清理操作\",{\"1\":{\"157\":2}}],[\"在请求中返回\",{\"1\":{\"70\":1}}],[\"在父线程中设置的threadlocal变量值会被子线程继承\",{\"1\":{\"157\":1}}],[\"在软件开发中\",{\"1\":{\"156\":1}}],[\"在点击购物车时\",{\"1\":{\"156\":1}}],[\"在一些\",{\"1\":{\"1005\":1}}],[\"在一个自己不喜欢的领域你能走的多深入呢\",{\"1\":{\"1139\":1}}],[\"在一个多模块项目中\",{\"1\":{\"1012\":1}}],[\"在一个只读事务中查询\",{\"1\":{\"934\":1}}],[\"在一个连接中循环执行\",{\"1\":{\"933\":2}}],[\"在一个市民信息表上\",{\"1\":{\"922\":1}}],[\"在一个事务中\",{\"1\":{\"905\":1}}],[\"在一个事务内\",{\"1\":{\"905\":1}}],[\"在一个表上有更新的时候\",{\"1\":{\"898\":1}}],[\"在一个method1方法中加入一把锁\",{\"1\":{\"322\":1}}],[\"在一个\",{\"1\":{\"156\":1}}],[\"在一致性哈希算法中\",{\"1\":{\"103\":1}}],[\"在应用程序或网站中集成认证接口\",{\"1\":{\"153\":1}}],[\"在字典法的基础上改进\",{\"1\":{\"132\":1}}],[\"在序列化\",{\"1\":{\"125\":2}}],[\"在该代码片段中\",{\"1\":{\"125\":1}}],[\"在这里的作用是释放\",{\"1\":{\"929\":1}}],[\"在这里插入图片描述\",{\"1\":{\"115\":1,\"136\":1,\"208\":1,\"256\":1,\"531\":1}}],[\"在这种隔离级别下\",{\"1\":{\"905\":1}}],[\"在这种情况下\",{\"1\":{\"76\":1,\"125\":1,\"918\":1,\"959\":1}}],[\"在这个查询中\",{\"1\":{\"959\":1}}],[\"在这个查询里面\",{\"1\":{\"922\":1}}],[\"在这个过程中\",{\"1\":{\"921\":1}}],[\"在这个例子中\",{\"1\":{\"906\":1,\"921\":1,\"933\":2,\"934\":1}}],[\"在这个事务还没有结束时\",{\"1\":{\"905\":1}}],[\"在这个命令中\",{\"1\":{\"782\":1}}],[\"在这个阶段\",{\"1\":{\"679\":1}}],[\"在这个实现类里面实现security官方的userdetailsservice接口\",{\"1\":{\"624\":1}}],[\"在这个简化的例子中\",{\"1\":{\"309\":1}}],[\"在同一线程在外层方法获取锁的时候\",{\"1\":{\"321\":1}}],[\"在同一时间点\",{\"1\":{\"286\":2}}],[\"在同一个包下\",{\"1\":{\"543\":1}}],[\"在同一个类里面\",{\"1\":{\"179\":1}}],[\"在同一个局域网\",{\"1\":{\"76\":1}}],[\"在同一把锁内进行的\",{\"1\":{\"108\":1}}],[\"在发请求之前会把请求的数据编码成\",{\"1\":{\"92\":1}}],[\"在发送响应报文时也是使用这个remote\",{\"1\":{\"46\":1}}],[\"在校园网内将无法访问学校主页\",{\"1\":{\"76\":1}}],[\"在学校用学校\",{\"1\":{\"76\":1}}],[\"在网络中传输到目标主机\",{\"1\":{\"76\":1}}],[\"在nginx中\",{\"1\":{\"73\":1}}],[\"在线脑图\",{\"1\":{\"1145\":1}}],[\"在线网页两种格式\",{\"1\":{\"1126\":1}}],[\"在线程\",{\"1\":{\"694\":2}}],[\"在线程a中调用线程b的join\",{\"1\":{\"687\":1}}],[\"在线解析\",{\"1\":{\"253\":1}}],[\"在线购物车\",{\"1\":{\"154\":1}}],[\"在线\",{\"1\":{\"60\":1}}],[\"在修改服务器配置之前\",{\"1\":{\"48\":1}}],[\"在\",{\"0\":{\"935\":1,\"1046\":1},\"1\":{\"47\":1,\"48\":1,\"61\":1,\"103\":1,\"111\":1,\"124\":1,\"141\":1,\"152\":1,\"218\":1,\"220\":1,\"223\":1,\"229\":1,\"383\":2,\"430\":1,\"482\":1,\"488\":1,\"497\":1,\"522\":2,\"523\":1,\"534\":1,\"537\":2,\"543\":2,\"546\":1,\"625\":1,\"635\":1,\"650\":1,\"660\":3,\"686\":1,\"690\":1,\"713\":2,\"722\":1,\"724\":1,\"725\":1,\"736\":2,\"743\":1,\"775\":1,\"806\":1,\"810\":1,\"877\":1,\"887\":1,\"888\":1,\"899\":1,\"904\":1,\"905\":2,\"906\":2,\"907\":1,\"913\":1,\"916\":1,\"917\":3,\"920\":1,\"921\":3,\"924\":3,\"925\":1,\"928\":3,\"931\":1,\"932\":1,\"933\":2,\"934\":1,\"959\":3,\"963\":1,\"1005\":2,\"1010\":2,\"1012\":1,\"1038\":1,\"1081\":3,\"1101\":1,\"1166\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"2\":1}}],[\"09\",{\"1\":{\"994\":1}}],[\"0row导致其它公式为null\",{\"1\":{\"959\":1}}],[\"0rder指定执行顺序在同步的情况下生效\",{\"1\":{\"543\":1,\"1081\":1}}],[\"0往后出现网络io多路复用\",{\"1\":{\"849\":1}}],[\"0+0+0\",{\"1\":{\"786\":1}}],[\"01\",{\"0\":{\"957\":2},\"1\":{\"779\":1,\"951\":1,\"954\":2}}],[\"0111\",{\"1\":{\"648\":1}}],[\"05d\",{\"1\":{\"1005\":2}}],[\"05\",{\"1\":{\"751\":6,\"752\":1,\"762\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":2,\"769\":1,\"770\":1,\"771\":2,\"959\":3}}],[\"06\",{\"1\":{\"691\":1}}],[\"0加了一个实现callable接口\",{\"1\":{\"687\":1}}],[\"0即\",{\"1\":{\"648\":1}}],[\"0即完全废止了oauth1\",{\"1\":{\"136\":1}}],[\"0用\",{\"1\":{\"648\":1}}],[\"0c516cb357d7\",{\"1\":{\"598\":1}}],[\"0<\",{\"1\":{\"238\":1,\"458\":1}}],[\"0001\",{\"1\":{\"648\":7}}],[\"00000\",{\"1\":{\"1005\":1}}],[\"000001s\",{\"1\":{\"936\":1}}],[\"0000是什么\",{\"0\":{\"643\":1}}],[\"0000\",{\"0\":{\"643\":1},\"1\":{\"643\":1,\"648\":13,\"1091\":4,\"1092\":8}}],[\"00维护不可用\",{\"1\":{\"261\":1}}],[\"00至每周一12\",{\"1\":{\"261\":1}}],[\"00\",{\"1\":{\"220\":1,\"243\":1,\"800\":1,\"954\":3}}],[\"03\",{\"0\":{\"957\":1},\"1\":{\"216\":1,\"218\":1,\"295\":1,\"378\":1,\"800\":1}}],[\"07\",{\"1\":{\"199\":1,\"952\":3}}],[\"0是oauth协议的延续版本\",{\"1\":{\"136\":1}}],[\"0以后默认使用lettuce作为操作redis的客户端\",{\"1\":{\"107\":1}}],[\"04\",{\"1\":{\"102\":1,\"731\":1}}],[\"08d0939410e3\",{\"1\":{\"587\":1}}],[\"08\",{\"1\":{\"48\":1,\"295\":1,\"765\":1,\"951\":5}}],[\"022b93fd\",{\"1\":{\"197\":1}}],[\"02\",{\"1\":{\"47\":1,\"302\":1,\"724\":1,\"739\":1,\"779\":1,\"1076\":1}}],[\"0的区别\",{\"1\":{\"47\":1}}],[\"0\",{\"0\":{\"136\":1,\"284\":1,\"643\":1,\"939\":1},\"1\":{\"46\":4,\"47\":10,\"72\":6,\"89\":1,\"94\":2,\"107\":1,\"123\":1,\"128\":2,\"136\":1,\"140\":2,\"169\":1,\"179\":1,\"182\":1,\"198\":1,\"213\":4,\"220\":2,\"223\":1,\"229\":4,\"238\":1,\"242\":1,\"249\":2,\"252\":1,\"261\":1,\"267\":4,\"290\":3,\"294\":3,\"295\":1,\"334\":3,\"335\":1,\"338\":1,\"339\":1,\"352\":6,\"374\":1,\"383\":1,\"388\":1,\"400\":2,\"429\":1,\"430\":1,\"432\":1,\"433\":1,\"458\":1,\"459\":3,\"460\":1,\"462\":1,\"464\":2,\"466\":1,\"572\":1,\"594\":1,\"598\":4,\"608\":2,\"643\":2,\"647\":1,\"648\":2,\"670\":2,\"681\":1,\"685\":4,\"686\":6,\"687\":2,\"688\":6,\"689\":1,\"691\":3,\"703\":3,\"706\":1,\"726\":1,\"751\":6,\"752\":1,\"762\":1,\"765\":1,\"766\":2,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"780\":1,\"782\":2,\"784\":5,\"786\":1,\"793\":1,\"796\":6,\"802\":1,\"803\":1,\"849\":1,\"853\":2,\"865\":2,\"887\":1,\"894\":2,\"899\":1,\"901\":4,\"921\":1,\"923\":1,\"932\":1,\"936\":2,\"939\":1,\"959\":10,\"963\":1,\"996\":1,\"1001\":1,\"1003\":6,\"1016\":1,\"1019\":2,\"1041\":1,\"1085\":2,\"1091\":4}}],[\"一方面是我知道参与这次分享的很多人都是我的朋友\",{\"1\":{\"1152\":1}}],[\"一方面是因为我自己还是个学生\",{\"1\":{\"1152\":1}}],[\"一方面要求本公司员工不要透露工资\",{\"1\":{\"1130\":1}}],[\"一点感悟\",{\"0\":{\"1151\":1}}],[\"一点一点的new\",{\"1\":{\"231\":1}}],[\"一下这个模式\",{\"1\":{\"1150\":1}}],[\"一下就满了要回收导致\",{\"1\":{\"101\":1}}],[\"一天的计划完不成又能怎样呢\",{\"1\":{\"1144\":1}}],[\"一天一备会比一周一备更有优势呢\",{\"1\":{\"902\":1}}],[\"一毕业月薪就上万\",{\"1\":{\"1141\":1}}],[\"一人团队\",{\"1\":{\"1109\":1}}],[\"一年的工资\",{\"1\":{\"1108\":1}}],[\"一周上六天班\",{\"1\":{\"1104\":1}}],[\"一张\",{\"1\":{\"1084\":1}}],[\"一张图\",{\"1\":{\"877\":1}}],[\"一步步的太恐怖了\",{\"1\":{\"1081\":1}}],[\"一步步进阶\",{\"1\":{\"87\":1}}],[\"一行\",{\"1\":{\"985\":1}}],[\"一是\",{\"1\":{\"927\":1}}],[\"一是所谓的\",{\"1\":{\"634\":1}}],[\"一本\",{\"1\":{\"909\":1}}],[\"一块是\",{\"1\":{\"900\":1}}],[\"一边写一边后移\",{\"1\":{\"899\":1}}],[\"一套流程都是从前端发起\",{\"1\":{\"879\":1}}],[\"一套模版化的调用方法\",{\"1\":{\"576\":1}}],[\"一条记录\",{\"1\":{\"931\":1}}],[\"一条更新语句的执行流程又是怎样的呢\",{\"1\":{\"898\":1}}],[\"一条查询语句的执行过程一般是经过连接器\",{\"1\":{\"892\":1}}],[\"一条命令解决上锁同时设置过期时间\",{\"1\":{\"868\":1}}],[\"一条指令解决\",{\"1\":{\"87\":1}}],[\"一主二仆\",{\"1\":{\"863\":1}}],[\"一分钟执行一次\",{\"1\":{\"799\":1,\"985\":1}}],[\"一款使用\",{\"1\":{\"736\":1}}],[\"一款开源的分布式消息系统\",{\"1\":{\"594\":1}}],[\"一书中指出\",{\"1\":{\"717\":1}}],[\"一上来就给你new好\",{\"1\":{\"700\":1}}],[\"一直费解的\",{\"1\":{\"899\":1}}],[\"一直没get到这个核心点\",{\"1\":{\"694\":1}}],[\"一直会持有数据库的锁\",{\"1\":{\"184\":1}}],[\"一道面试题\",{\"1\":{\"687\":1}}],[\"一段静态代码\",{\"1\":{\"687\":1}}],[\"一段时间之后\",{\"1\":{\"587\":1}}],[\"一带三\",{\"1\":{\"606\":1}}],[\"一次秋招8\",{\"1\":{\"1150\":1}}],[\"一次春招\",{\"1\":{\"1150\":1}}],[\"一次内存数据流宽度是32位\",{\"1\":{\"1093\":1}}],[\"一次查询可能需要访问\",{\"1\":{\"916\":1}}],[\"一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用\",{\"1\":{\"606\":1}}],[\"一次性加载bean\",{\"1\":{\"486\":1}}],[\"一次性查出所有数据\",{\"1\":{\"103\":1}}],[\"一次性发送多个指令给redis\",{\"1\":{\"88\":1}}],[\"一系列\",{\"1\":{\"596\":1}}],[\"一系列的断言和过滤器组成\",{\"1\":{\"590\":1}}],[\"一样的\",{\"1\":{\"1150\":1}}],[\"一样的做法\",{\"1\":{\"65\":1}}],[\"一样多个光标\",{\"0\":{\"1054\":1}}],[\"一样造成一个线程\",{\"1\":{\"682\":1}}],[\"一样建\",{\"1\":{\"596\":1}}],[\"一样\",{\"1\":{\"589\":1}}],[\"一句话简单来说\",{\"1\":{\"909\":1}}],[\"一句话总结\",{\"1\":{\"590\":1}}],[\"一句话\",{\"1\":{\"569\":1,\"606\":1}}],[\"一定不要说前公司不好\",{\"1\":{\"1123\":1}}],[\"一定是要依赖内核空间的能力\",{\"1\":{\"709\":1}}],[\"一定会执行finally语句块\",{\"1\":{\"686\":1}}],[\"一定放在所有过滤器的前面\",{\"1\":{\"459\":1}}],[\"一定要问清楚公司的技术栈\",{\"1\":{\"1150\":1}}],[\"一定要自己写一遍代码\",{\"1\":{\"1150\":1}}],[\"一定要记得\",{\"1\":{\"1140\":1}}],[\"一定要告诉服务解锁失败\",{\"1\":{\"837\":1}}],[\"一定要知道ssh\",{\"1\":{\"798\":1,\"984\":1}}],[\"一定要显式赋值\",{\"1\":{\"686\":1}}],[\"一定要区分\",{\"0\":{\"704\":1},\"1\":{\"586\":1}}],[\"一定要加这一行指定目录\",{\"1\":{\"523\":1}}],[\"一定要跟着学\",{\"1\":{\"261\":1}}],[\"一定要注意\",{\"1\":{\"87\":1}}],[\"一级二级都会清除\",{\"1\":{\"449\":1}}],[\"一级缓存session\",{\"1\":{\"449\":1}}],[\"一级缓存就清空了\",{\"1\":{\"449\":1}}],[\"一级缓存依然使用\",{\"1\":{\"449\":1}}],[\"一级缓存一直可用的\",{\"1\":{\"449\":1}}],[\"一级缓存中的数据才会转移到二级缓存中\",{\"1\":{\"447\":1}}],[\"一级缓存中的数据会被保存到二级缓存中\",{\"1\":{\"446\":1}}],[\"一级缓存失效情况\",{\"0\":{\"444\":1}}],[\"一级缓存是一直开启的\",{\"1\":{\"443\":1}}],[\"一级缓存\",{\"0\":{\"442\":1},\"1\":{\"543\":1}}],[\"一级域名都不一样\",{\"1\":{\"153\":1}}],[\"一对多\",{\"0\":{\"425\":1}}],[\"一对一\",{\"0\":{\"420\":1}}],[\"一开始制定一些简单的计划\",{\"1\":{\"1142\":1}}],[\"一开始我只想确认文章展示是不是需要\",{\"1\":{\"1081\":1}}],[\"一开始我没那么理解\",{\"0\":{\"947\":1},\"1\":{\"959\":1}}],[\"一开始我用的true报错\",{\"1\":{\"398\":1}}],[\"一开始不知道\",{\"1\":{\"782\":1}}],[\"一开始声明的时候就给你开辟一个大小为10的空间\",{\"1\":{\"688\":1}}],[\"一开始听chatgpt说是的\",{\"1\":{\"123\":1}}],[\"一切外键概念必须在应用层解决\",{\"1\":{\"971\":1}}],[\"一切ok\",{\"1\":{\"305\":1}}],[\"一切js变量都可以导出\",{\"1\":{\"217\":1}}],[\"一会之后就不能访问数据库了\",{\"1\":{\"260\":1}}],[\"一会发个消息告诉你成了\",{\"1\":{\"183\":2,\"607\":2}}],[\"一种头痛医头的方法\",{\"1\":{\"932\":1}}],[\"一种策略是\",{\"1\":{\"932\":1}}],[\"一种是元数据锁\",{\"1\":{\"928\":1}}],[\"一种是表锁\",{\"1\":{\"928\":1}}],[\"一种是直接上传文件到云端\",{\"1\":{\"238\":1}}],[\"一种为了提升检索效率的数据结构\",{\"1\":{\"913\":1}}],[\"一种做法是直接把账本翻出来\",{\"1\":{\"899\":1}}],[\"一种更高效的\",{\"1\":{\"711\":1}}],[\"一种概念\",{\"1\":{\"565\":1}}],[\"一种手动写代码一种直接注解到方法\",{\"1\":{\"202\":1}}],[\"一些细节也没有展开谈\",{\"1\":{\"1152\":1}}],[\"一些书籍的推荐\",{\"1\":{\"1150\":1}}],[\"一些无关紧要的代码放在coding就好了\",{\"1\":{\"1145\":1}}],[\"一些工具\",{\"1\":{\"1145\":1}}],[\"一些培训机构的视频有的也不错\",{\"1\":{\"1145\":1}}],[\"一些视频或者\",{\"1\":{\"1145\":1}}],[\"一些感悟\",{\"1\":{\"1137\":1}}],[\"一些电脑自启动的东西\",{\"1\":{\"1037\":1}}],[\"一些过滤操作之类的都可以用sql语句实现\",{\"1\":{\"689\":1}}],[\"一些其他的过滤器\",{\"0\":{\"631\":1}}],[\"一些一致性算法\",{\"1\":{\"571\":1}}],[\"一些小点\",{\"0\":{\"522\":1},\"1\":{\"686\":1}}],[\"一些业务代码\",{\"1\":{\"443\":1}}],[\"一些业务的实现感觉就挺贴近算法的\",{\"1\":{\"203\":1}}],[\"一些api同串行化的感觉返回值要不要那一块\",{\"1\":{\"376\":1}}],[\"一些惊艳的示例\",{\"1\":{\"220\":1}}],[\"一起探讨学习\",{\"1\":{\"388\":1}}],[\"一起用\",{\"1\":{\"216\":1}}],[\"一起安装的包管理工具\",{\"1\":{\"215\":1}}],[\"一起看\",{\"1\":{\"157\":1}}],[\"一言蔽之\",{\"1\":{\"183\":1}}],[\"一组操作可能会涉及到多个微服务以及多个数据库\",{\"1\":{\"183\":1}}],[\"一旦宕机或闪断就消息丢失\",{\"1\":{\"837\":1}}],[\"一旦代码里面涉及具体实现类\",{\"1\":{\"740\":1}}],[\"一旦一个接口被定义并被实现类实现\",{\"1\":{\"686\":1}}],[\"一旦一个final属性被初始化\",{\"1\":{\"125\":1}}],[\"一旦发现了只具有弱引用的对象\",{\"1\":{\"660\":1}}],[\"一旦在finally块中使用了return或throw语句\",{\"1\":{\"649\":1}}],[\"一旦请求处理完成\",{\"1\":{\"632\":1}}],[\"一旦服务数量增多\",{\"1\":{\"562\":1}}],[\"一旦条件满足\",{\"1\":{\"346\":1}}],[\"一旦启动永远不需要重启\",{\"1\":{\"71\":1}}],[\"一配置类\",{\"1\":{\"112\":1}}],[\"一p能卡一两天\",{\"1\":{\"90\":1,\"261\":1}}],[\"一二\",{\"1\":{\"90\":1}}],[\"一致性才能得到保障\",{\"1\":{\"962\":1}}],[\"一致性视图是在执行\",{\"1\":{\"934\":1}}],[\"一致性视图是在第执行第一个快照读语句时创建的\",{\"1\":{\"934\":1}}],[\"一致性读是好\",{\"1\":{\"927\":1}}],[\"一致性可以根据一致的程度划分为强一致性\",{\"1\":{\"571\":1}}],[\"一致性要求高的数据\",{\"1\":{\"118\":1}}],[\"一致性要求超高的\",{\"1\":{\"118\":1}}],[\"一致性要求不高的数据\",{\"1\":{\"108\":1}}],[\"一致性\",{\"1\":{\"79\":1,\"905\":1,\"962\":1}}],[\"一般面试官都会举例说明\",{\"1\":{\"1135\":1}}],[\"一般找到一份工作需要\",{\"1\":{\"1129\":1}}],[\"一般会有年终奖\",{\"1\":{\"1108\":1}}],[\"一般会经常冲突\",{\"1\":{\"82\":1}}],[\"一般包括年薪\",{\"1\":{\"1103\":1}}],[\"一般书面\",{\"1\":{\"1103\":1}}],[\"一般新建\",{\"1\":{\"1009\":1}}],[\"一般来说\",{\"1\":{\"990\":1,\"1119\":1}}],[\"一般来说线程数至少不能少于核心数\",{\"1\":{\"99\":1}}],[\"一般不直接使用\",{\"1\":{\"947\":1}}],[\"一般不使用\",{\"1\":{\"928\":1}}],[\"一般不会用\",{\"1\":{\"589\":1}}],[\"一般就不需要单独在\",{\"1\":{\"923\":1}}],[\"一般就看结果树\",{\"1\":{\"100\":1}}],[\"一般框架如果会设置这个值\",{\"1\":{\"908\":1}}],[\"一般语法错误会提示第一个出现错误的位置\",{\"1\":{\"895\":1}}],[\"一般默认为开发服务器的端口\",{\"1\":{\"883\":1}}],[\"一般默认的\",{\"1\":{\"362\":1}}],[\"一般存\",{\"1\":{\"876\":1}}],[\"一般key用redisserializer\",{\"1\":{\"872\":1}}],[\"一般用户目录下会有两个文件\",{\"1\":{\"986\":1}}],[\"一般用来收集学习\",{\"1\":{\"985\":1}}],[\"一般用来返回连接表的笛卡尔积\",{\"1\":{\"937\":1}}],[\"一般用\",{\"1\":{\"837\":1}}],[\"一般下面这两个配置一起写\",{\"1\":{\"835\":1}}],[\"一般在开发过程中\",{\"1\":{\"827\":1}}],[\"一般写日志输出\",{\"0\":{\"784\":1}}],[\"一般看类似\",{\"1\":{\"782\":1}}],[\"一般看源码会出现\",{\"1\":{\"686\":1}}],[\"一般关注的是以下两个重点\",{\"1\":{\"750\":1,\"752\":1}}],[\"一般做不到举一反三\",{\"1\":{\"740\":1}}],[\"一般推荐模块之间基于接口编程\",{\"1\":{\"740\":1}}],[\"一般应用是很难出现碰撞的\",{\"1\":{\"739\":1}}],[\"一般应用在使用jwt后\",{\"1\":{\"70\":1}}],[\"一般try\",{\"1\":{\"686\":1}}],[\"一般形参申明为父类\",{\"1\":{\"686\":1}}],[\"一般多态体现在方法的形参上\",{\"1\":{\"686\":1}}],[\"一般的maven项目的打包命令\",{\"1\":{\"559\":1}}],[\"一般搭配以下两个注解一起使用\",{\"1\":{\"543\":1,\"1081\":1}}],[\"一般把\",{\"1\":{\"493\":1}}],[\"一般这些自动配置类都绑了xxxxproperties里面拿\",{\"1\":{\"483\":1}}],[\"一般是黑客恶意攻击\",{\"1\":{\"866\":1}}],[\"一般是\",{\"1\":{\"591\":1,\"705\":1}}],[\"一般是大厂才会问到\",{\"1\":{\"381\":1}}],[\"一般是指由若干条指令组成的程序段\",{\"1\":{\"302\":1}}],[\"一般方法后面要给个\",{\"1\":{\"377\":1}}],[\"一般\",{\"1\":{\"359\":1}}],[\"一般我们写单例模式都是加\",{\"1\":{\"299\":1}}],[\"一般我们在服务端这么做就可以了access\",{\"1\":{\"54\":1}}],[\"一般分为以下三种\",{\"1\":{\"292\":1}}],[\"一般可以是5位\",{\"1\":{\"240\":1}}],[\"一般情况下我会建议你创建一个自增主键\",{\"1\":{\"919\":1}}],[\"一般情况下\",{\"1\":{\"186\":1}}],[\"一般情况下用\",{\"1\":{\"100\":1}}],[\"一般二开不复杂\",{\"1\":{\"105\":1}}],[\"一般都是一条消息一条消息处理\",{\"1\":{\"837\":1}}],[\"一般都是json\",{\"1\":{\"688\":1}}],[\"一般都是用\",{\"1\":{\"105\":1}}],[\"一般都是找2^n且离返回值最近的那个值\",{\"1\":{\"76\":1}}],[\"一般扩展包没提供让其失效方法\",{\"1\":{\"70\":1}}],[\"一过期就返回\",{\"1\":{\"65\":1}}],[\"一个好的老师或者是指导你的人会让你受益终身\",{\"1\":{\"1151\":1}}],[\"一个月\",{\"1\":{\"1150\":1}}],[\"一个团队管理软件\",{\"1\":{\"1145\":1}}],[\"一个优秀的人一定得是一个乐观的人\",{\"1\":{\"1147\":1}}],[\"一个优秀的人\",{\"1\":{\"1144\":1}}],[\"一个常见的问题是\",{\"1\":{\"1144\":1}}],[\"一个存在多年的公司\",{\"1\":{\"1111\":1}}],[\"一个test项目\",{\"1\":{\"1100\":1}}],[\"一个物理cpu可以有多个物理内核\",{\"1\":{\"1095\":1}}],[\"一个物理cpu只能有一个物理内核\",{\"1\":{\"1095\":1}}],[\"一个物理内核可以作为1个或者2个逻辑cpu\",{\"1\":{\"1095\":1}}],[\"一个简单的实例\",{\"1\":{\"994\":1}}],[\"一个用户的事务不被其他事务所干扰\",{\"1\":{\"962\":1}}],[\"一个用户成功建立连接后\",{\"1\":{\"893\":1}}],[\"一个数据版本的\",{\"1\":{\"935\":1}}],[\"一个在可重复读隔离级别下执行的事务\",{\"1\":{\"934\":1}}],[\"一个直接的想法就是\",{\"1\":{\"932\":1}}],[\"一个库被全局锁上以后\",{\"1\":{\"927\":1}}],[\"一个表存了账单明细\",{\"1\":{\"905\":1}}],[\"一个表存了每个月月底的余额\",{\"1\":{\"905\":1}}],[\"一个事务被提交之后\",{\"1\":{\"962\":1}}],[\"一个事务只需要在启动的时候声明说\",{\"1\":{\"935\":1}}],[\"一个事务启动的时候\",{\"1\":{\"935\":1}}],[\"一个事务要更新一行\",{\"1\":{\"934\":1}}],[\"一个事务执行过程中看到的数据\",{\"1\":{\"905\":1}}],[\"一个事务提交之后\",{\"1\":{\"905\":1}}],[\"一个事务会读到另一个事务更新后但未提交的数据\",{\"1\":{\"905\":1}}],[\"一个事务还没提交时\",{\"1\":{\"905\":1}}],[\"一个页的大小默认为\",{\"1\":{\"903\":1}}],[\"一个无限大小\",{\"1\":{\"900\":1}}],[\"一个固定大小\",{\"1\":{\"899\":1}}],[\"一个专门学习\",{\"1\":{\"869\":1}}],[\"一个集群至少要有三个主节点\",{\"1\":{\"865\":1}}],[\"一个交换机即可\",{\"1\":{\"843\":1}}],[\"一个30分钟过期的下单可能得59分钟后才被定时任务扫到\",{\"1\":{\"839\":1}}],[\"一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则\",{\"1\":{\"823\":1}}],[\"一个消息可投入一个或多个队列\",{\"1\":{\"823\":1}}],[\"一个镜像可以创建多个容器\",{\"1\":{\"789\":1}}],[\"一个接口的方法需要引用person的有参构造\",{\"1\":{\"763\":1}}],[\"一个接口的方法需要引用person的无参构造\",{\"1\":{\"763\":1}}],[\"一个接口在很多地方都会调用同一个实现\",{\"1\":{\"760\":1}}],[\"一个结果\",{\"1\":{\"748\":1}}],[\"一个为null的字符串就可以被打印在我们的控制台上了\",{\"1\":{\"720\":1}}],[\"一个最基本的\",{\"1\":{\"713\":1}}],[\"一个进程的地址空间划分为\",{\"1\":{\"709\":1}}],[\"一个java应用程序java\",{\"0\":{\"701\":1}}],[\"一个java程序跑起来至少有3个线程\",{\"1\":{\"687\":1}}],[\"一个客户不想或者不能直接引用另一个对象\",{\"1\":{\"688\":1}}],[\"一个char\",{\"1\":{\"687\":1}}],[\"一个堆空间new的\",{\"1\":{\"687\":1}}],[\"一个线程转换成功\",{\"1\":{\"682\":1}}],[\"一个线程池\",{\"0\":{\"364\":1}}],[\"一个对象只有\",{\"1\":{\"660\":1}}],[\"一个字节129存不下的\",{\"1\":{\"648\":1}}],[\"一个是\",{\"1\":{\"706\":2,\"934\":1}}],[\"一个是lambda另一个就是stream\",{\"1\":{\"688\":1}}],[\"一个是根据值\",{\"1\":{\"688\":1}}],[\"一个是根据下表\",{\"1\":{\"688\":1}}],[\"一个是验证两个场景\",{\"1\":{\"627\":1}}],[\"一个是登录\",{\"1\":{\"627\":1}}],[\"一个是用于共享资源的互斥使用\",{\"1\":{\"341\":1}}],[\"一个parse\",{\"1\":{\"626\":1}}],[\"一个service可以包含多个cluster\",{\"1\":{\"598\":1}}],[\"一个sql语句解决\",{\"0\":{\"81\":1}}],[\"一个易于使用的高性能微服务分布式事务解决方案\",{\"1\":{\"594\":1}}],[\"一个更易于构建云原生应用的动态服务发现\",{\"1\":{\"594\":1}}],[\"一个注解\",{\"1\":{\"594\":1}}],[\"一个分布式系统不可能同时很好的满足一致性\",{\"1\":{\"572\":1}}],[\"一个应用拆分为一组小型服务\",{\"1\":{\"554\":1}}],[\"一个namespace对应一个二级缓存\",{\"1\":{\"445\":1}}],[\"一个员工有与之对应的部门信息\",{\"1\":{\"421\":1}}],[\"一个reentrantlock可以同时绑定多个condition对象\",{\"1\":{\"380\":1}}],[\"一个会话\",{\"1\":{\"257\":1,\"446\":1}}],[\"一个个功能模块过\",{\"1\":{\"1078\":1}}],[\"一个个\",{\"1\":{\"231\":1,\"252\":1}}],[\"一个机器的成功失败\",{\"1\":{\"183\":1}}],[\"一个系统配置表\",{\"1\":{\"894\":1}}],[\"一个系统被拆分为多个小的微服务\",{\"1\":{\"183\":1}}],[\"一个系统登出\",{\"1\":{\"153\":1}}],[\"一个系统登录\",{\"1\":{\"153\":1}}],[\"一个方法运行在了一个开启了事务的方法中时\",{\"1\":{\"178\":1}}],[\"一个认证中心\",{\"1\":{\"153\":1}}],[\"一个单体锁一个查询\",{\"1\":{\"123\":1}}],[\"一个本地锁一个分布式锁\",{\"1\":{\"115\":1}}],[\"一个热点\",{\"1\":{\"87\":1}}],[\"一个\",{\"1\":{\"49\":1,\"537\":1,\"543\":1,\"916\":1}}],[\"一个拥有\",{\"1\":{\"18\":1}}],[\"一\",{\"0\":{\"46\":1,\"369\":1,\"610\":1,\"685\":1,\"693\":1,\"744\":1,\"1138\":1,\"1157\":1},\"1\":{\"231\":1,\"619\":1,\"630\":2,\"660\":1,\"980\":1}}],[\"这款软件的自己的使用习惯配置文件也放在我的网盘里1024zzqの宝库\",{\"1\":{\"1162\":1}}],[\"这四年你应该这样过\",{\"1\":{\"1150\":1}}],[\"这系列书最大的特点是图文并茂和案例驱动\",{\"1\":{\"1150\":1}}],[\"这套流程最大的缺点就是耗时比较久\",{\"1\":{\"1150\":1}}],[\"这很双标\",{\"1\":{\"1130\":1}}],[\"这很好理解\",{\"1\":{\"930\":1}}],[\"这代码是快速排序的部分代码\",{\"1\":{\"1085\":1}}],[\"这世上还有努力也没有得到回报的人\",{\"1\":{\"1077\":1}}],[\"这下你有的改了\",{\"1\":{\"1074\":1}}],[\"这在一些媒体图片制作和屏幕截取中\",{\"0\":{\"1037\":1}}],[\"这可以算是\",{\"1\":{\"1001\":1}}],[\"这可能会引发意料之外的问题\",{\"1\":{\"157\":1}}],[\"这可能是由于网络配置\",{\"1\":{\"76\":1}}],[\"这可能是出于安全或网络管理的考虑\",{\"1\":{\"76\":1}}],[\"这还只是一部分\",{\"1\":{\"990\":1}}],[\"这还不错\",{\"1\":{\"924\":1}}],[\"这条命令并没有每一次都从远程更新仓库信息\",{\"1\":{\"988\":1}}],[\"这显然不足以存储实际数据\",{\"1\":{\"963\":1}}],[\"这并没有完全解决你的困扰\",{\"1\":{\"931\":1}}],[\"这并不意味着icmp协议不可用\",{\"1\":{\"76\":1}}],[\"这往往是\",{\"1\":{\"927\":1}}],[\"这位同事的解释对吗\",{\"1\":{\"925\":1}}],[\"这段开头的问题里\",{\"1\":{\"923\":1}}],[\"这段代码能够处理跨域问题是因为它通过配置代理将请求转发到指定的目标url\",{\"1\":{\"883\":1}}],[\"这段代码其实是分为三步执行\",{\"1\":{\"302\":1,\"779\":1}}],[\"这正是业务\",{\"1\":{\"922\":1}}],[\"这棵\",{\"1\":{\"917\":1}}],[\"这棵树高是\",{\"1\":{\"916\":1}}],[\"这已经\",{\"1\":{\"916\":1}}],[\"这类与公司无关的原因是最无法被公司打回的\",{\"1\":{\"1121\":1}}],[\"这类不支持事务的引擎\",{\"1\":{\"929\":1}}],[\"这类不会再修改的数据\",{\"1\":{\"915\":1}}],[\"这类程序在编写时往往可以采用相同的模型实现\",{\"1\":{\"543\":1,\"1081\":1}}],[\"这整个过程想想都麻烦\",{\"1\":{\"899\":1}}],[\"这篇文章大体上会从以下几个部分展开\",{\"1\":{\"1137\":1}}],[\"这篇文章挺好\",{\"1\":{\"959\":1}}],[\"这篇文章里面\",{\"1\":{\"908\":1}}],[\"这篇文章\",{\"1\":{\"899\":1}}],[\"这么设计的原因主要是\",{\"1\":{\"876\":1}}],[\"这么说也不算错但稍微有些不全面\",{\"1\":{\"639\":1}}],[\"这中间\",{\"1\":{\"849\":1}}],[\"这只是原则一的借口而已\",{\"1\":{\"1131\":1}}],[\"这只是终止了程序\",{\"1\":{\"837\":1}}],[\"这只是idea不给提示\",{\"1\":{\"577\":1}}],[\"这九个权限是三个三个一组的\",{\"1\":{\"786\":1}}],[\"这使得多个用户可以通过远程桌面服务\",{\"1\":{\"785\":1}}],[\"这使两者分别以不同的方式将请求映射到服务器文件上\",{\"1\":{\"73\":1}}],[\"这有点类似\",{\"1\":{\"740\":1}}],[\"这家专注搜索的公司\",{\"1\":{\"735\":1}}],[\"这消除了大量针对应用程序自身组件的显式\",{\"1\":{\"726\":1}}],[\"这本书中\",{\"1\":{\"724\":1}}],[\"这方面的开源项目还蛮多的\",{\"1\":{\"713\":1}}],[\"这才叫死循环\",{\"1\":{\"694\":1}}],[\"这才是计划的根本价值\",{\"1\":{\"1144\":1}}],[\"这才是对早起时间最合理最实际的解释\",{\"1\":{\"980\":1}}],[\"这才是主要区别\",{\"1\":{\"411\":1}}],[\"这才是重点\",{\"1\":{\"357\":1}}],[\"这块只记得可以\",{\"1\":{\"686\":1}}],[\"这说明你支持并行\",{\"1\":{\"675\":1}}],[\"这说明你支持并发\",{\"1\":{\"675\":1}}],[\"这将在当前命令提示符会话中设置名为\",{\"1\":{\"1038\":1}}],[\"这将直接影响物理像素的数量\",{\"1\":{\"998\":1}}],[\"这将影响显示器上的ui元素\",{\"1\":{\"998\":1}}],[\"这将更新git\",{\"1\":{\"990\":1}}],[\"这将导致mysql为该字段分配11个字节的存储空间\",{\"1\":{\"963\":1}}],[\"这将导致其他事务在尝试修改相同数据行时被阻塞\",{\"1\":{\"906\":1}}],[\"这将无法描述某些特殊情况下的对象\",{\"1\":{\"660\":1}}],[\"这将使内部方法在一个新的事务中运行\",{\"1\":{\"179\":1}}],[\"这tm还用看吗\",{\"1\":{\"658\":1}}],[\"这太不合理了\",{\"1\":{\"657\":1}}],[\"这\",{\"1\":{\"647\":1,\"660\":1}}],[\"这道题目\",{\"1\":{\"919\":1}}],[\"这道题目考察的是java语言的另外一种基础机制\",{\"1\":{\"639\":1}}],[\"这道题可能看上去有点太简单了\",{\"1\":{\"721\":1}}],[\"这道题涉及的知识点比较庞杂\",{\"1\":{\"639\":1}}],[\"这道题老三的同事面试候选人的时候问到了\",{\"1\":{\"492\":1}}],[\"这道面试题\",{\"1\":{\"637\":1}}],[\"这句话创建了几个字符串对象\",{\"0\":{\"724\":1}}],[\"这句话的意思是在编译期而不是运行期进行泛型擦除\",{\"1\":{\"715\":1}}],[\"这句话\",{\"1\":{\"634\":1}}],[\"这句话正确吗\",{\"1\":{\"633\":1}}],[\"这会打击你的自信心\",{\"1\":{\"1150\":1}}],[\"这会影响到后续的循环迭代\",{\"1\":{\"645\":1}}],[\"这会将路径设置为\",{\"1\":{\"591\":1}}],[\"这会导致在\",{\"1\":{\"543\":1}}],[\"这对于查看每个文件的具体修改内容和变化非常有用\",{\"1\":{\"990\":1}}],[\"这对于已经发布并广泛使用的接口来说是一个严重的限制\",{\"1\":{\"686\":1}}],[\"这对于构建restful\",{\"1\":{\"520\":1}}],[\"这对于某些需要在运行时动态处理注解的场景非常有用\",{\"1\":{\"500\":1}}],[\"这之前的代码都是\",{\"1\":{\"496\":1}}],[\"这前三步在\",{\"1\":{\"489\":1}}],[\"这点也很重要\",{\"1\":{\"1162\":1}}],[\"这点可以用代码\",{\"1\":{\"948\":1}}],[\"这点很重要\",{\"1\":{\"466\":1}}],[\"这点需要咱们格外的注意\",{\"1\":{\"81\":1,\"906\":1,\"936\":1}}],[\"这次增删改可能对当前数据有影响\",{\"1\":{\"444\":1}}],[\"这次我们可以看出\",{\"1\":{\"388\":1}}],[\"这三个处理器\",{\"1\":{\"631\":1}}],[\"这三个相当于备用钥匙\",{\"1\":{\"352\":1}}],[\"这三个方法\",{\"1\":{\"186\":1}}],[\"这简单的一个问题\",{\"1\":{\"328\":1}}],[\"这台存几千那台几千\",{\"1\":{\"265\":1}}],[\"这章其实就学这三个的配置\",{\"1\":{\"591\":1}}],[\"这章实在找不到解决办法看下弹幕\",{\"1\":{\"261\":1}}],[\"这章知识以前是很陌生的\",{\"1\":{\"126\":1}}],[\"这涉及到\",{\"1\":{\"182\":1}}],[\"这种类型的编辑器就可以\",{\"1\":{\"1150\":1}}],[\"这种想法很多人应该都有\",{\"1\":{\"1139\":1}}],[\"这种公司一般都很穷\",{\"1\":{\"1130\":1}}],[\"这种依赖通常是一些容器或框架提供的\",{\"1\":{\"1012\":1}}],[\"这种依赖关系可以是单向的\",{\"1\":{\"543\":1}}],[\"这种使用方式需要确保在部署和运行时提供正确的运行时环境\",{\"1\":{\"1012\":1}}],[\"这种在实际项目中的使用率比较高\",{\"1\":{\"970\":1}}],[\"这种最简单\",{\"1\":{\"961\":1}}],[\"这种拆分规则比较适用于实体表\",{\"1\":{\"961\":1}}],[\"这种支持行锁的引擎\",{\"1\":{\"928\":1}}],[\"这种不支持事务的引擎\",{\"1\":{\"927\":1}}],[\"这种存储方式的表称为索引组织表\",{\"1\":{\"917\":1}}],[\"这种只读事务可以去掉\",{\"1\":{\"908\":1}}],[\"这种代理配置的好处是\",{\"1\":{\"883\":1}}],[\"这种代理功能可以部分替代nginx等反向代理服务器的功能\",{\"1\":{\"883\":1}}],[\"这种模式就好比\",{\"1\":{\"849\":1}}],[\"这种模式抛弃了\",{\"1\":{\"635\":1}}],[\"这种差异是因为\",{\"1\":{\"743\":1,\"1101\":1}}],[\"这种人\",{\"1\":{\"740\":1}}],[\"这种机制可以提高系统的并发性能\",{\"1\":{\"712\":1}}],[\"这种机制使得线程可以在等待\",{\"1\":{\"712\":1}}],[\"这种机制允许一个线程同时处理多个连接\",{\"1\":{\"712\":1}}],[\"这种\",{\"1\":{\"712\":1,\"849\":1}}],[\"这种异常的特点是java编译器会检查它\",{\"1\":{\"705\":1}}],[\"这种异步任务不好管理好像也是个executor\",{\"1\":{\"202\":1}}],[\"这种情况就需要跟应用一起来分析为何连接数会激增\",{\"1\":{\"977\":1}}],[\"这种情况可能会导致链表的遍历进入死循环\",{\"1\":{\"694\":1}}],[\"这种情况下部分热点代码就属于编译执行\",{\"1\":{\"634\":1}}],[\"这种情况下\",{\"1\":{\"183\":1,\"543\":1}}],[\"这种nosql的数据就需要到java层面处理过滤\",{\"1\":{\"689\":1}}],[\"这种里面是个string只有运行时才会去判断有没有错找不不找得到\",{\"1\":{\"688\":1}}],[\"这种特性常常被用来实现缓存技术\",{\"1\":{\"660\":1}}],[\"这种哈希值的添加通常是为了解决浏览器缓存的问题\",{\"1\":{\"539\":1}}],[\"这种分号分隔多个sql可以用于其他的批量操作\",{\"1\":{\"437\":1}}],[\"这种形式取出\",{\"1\":{\"407\":1}}],[\"这种问题可能会比较明显\",{\"1\":{\"312\":1}}],[\"这种工作内存与主内存同步延迟现象就造成了可见性问题\",{\"1\":{\"288\":1}}],[\"这种方法适用于对时间敏感的情况\",{\"1\":{\"961\":1}}],[\"这种方法适用于对数据位置敏感的情况\",{\"1\":{\"961\":1}}],[\"这种方法适用于数据量较大且有规律的情况\",{\"1\":{\"961\":1}}],[\"这种方法适用于数据分布均匀的情况\",{\"1\":{\"961\":1}}],[\"这种方法适合在更新的场景中\",{\"1\":{\"170\":1}}],[\"这种方法可以在外部获取到某一个方法的局部变量\",{\"1\":{\"771\":1}}],[\"这种方式设置的环境变量只在当前会话中有效\",{\"1\":{\"1038\":1}}],[\"这种方式可能回丢掉一些数据\",{\"1\":{\"976\":1}}],[\"这种方式可以一定程度上保证特定用户能连接到相同的服务器\",{\"1\":{\"208\":1}}],[\"这种方式只是个简单的应急方案\",{\"1\":{\"866\":1}}],[\"这种方式就可以被称为字面量\",{\"1\":{\"725\":1}}],[\"这种方式保证了现有的实现类与新版本的接口兼容\",{\"1\":{\"686\":1}}],[\"这种方式是在项目中配置的方式\",{\"1\":{\"550\":1}}],[\"这种方式的参数即属于操作系统方面的\",{\"1\":{\"549\":1}}],[\"这种方式增加的参数是属于命令行参数\",{\"1\":{\"548\":1}}],[\"这种方式增加的参数是被设置到应用的系统属性中\",{\"1\":{\"547\":1}}],[\"这种方式需要数据库连接属性allowmultiqueries=true\",{\"1\":{\"437\":1}}],[\"这种并发几率非常小\",{\"1\":{\"118\":1}}],[\"这不是你一个人努力的结果\",{\"1\":{\"1077\":1}}],[\"这不是可以刷新重复提交吗\",{\"1\":{\"167\":1}}],[\"这不过这里前端处理掉了\",{\"1\":{\"882\":1}}],[\"这不就是面试中常问的\",{\"1\":{\"106\":1}}],[\"这一款手势软件\",{\"1\":{\"1162\":1}}],[\"这一年的任务就完成了\",{\"1\":{\"1150\":1}}],[\"这一年\",{\"1\":{\"1150\":4}}],[\"这一年大体上要打到什么目标\",{\"1\":{\"1142\":1}}],[\"这一整行\",{\"1\":{\"998\":1}}],[\"这一章没怎么懂\",{\"1\":{\"925\":1}}],[\"这一个记录的值分别是\",{\"1\":{\"906\":1}}],[\"这一个章节对急着找工作人士的性价比极低\",{\"1\":{\"126\":1}}],[\"这一行所在的数据页本来就在内存中\",{\"1\":{\"900\":1}}],[\"这一行\",{\"1\":{\"900\":1}}],[\"这一行的值是\",{\"1\":{\"935\":1}}],[\"这一行的值加\",{\"1\":{\"898\":1}}],[\"这一行的\",{\"1\":{\"900\":2}}],[\"这一块完全可以单独抽取成一个\",{\"1\":{\"845\":1}}],[\"这一季基础的东西\",{\"1\":{\"777\":1}}],[\"这一类型的常量被称为运行时常量\",{\"1\":{\"725\":1}}],[\"这一过程具体是在\",{\"1\":{\"722\":1}}],[\"这一步\",{\"1\":{\"799\":1,\"985\":1}}],[\"这一步骤是在解析阶段进行的\",{\"1\":{\"679\":1}}],[\"这一步并不会提交事务\",{\"1\":{\"609\":1}}],[\"这一步会创建executor对象\",{\"1\":{\"465\":1}}],[\"这一点简而言之\",{\"1\":{\"572\":1}}],[\"这一点其实就是\",{\"1\":{\"572\":1}}],[\"这一节自己还没有实践\",{\"0\":{\"570\":1}}],[\"这一篇讲的真好\",{\"1\":{\"183\":1}}],[\"这一篇回顾起来有点陌生可能没大处着眼\",{\"1\":{\"78\":1}}],[\"这一系列就构成了订单的信息流通\",{\"1\":{\"158\":1}}],[\"这时你只要改变这一行就行了\",{\"1\":{\"1074\":1}}],[\"这时\",{\"1\":{\"923\":1,\"924\":1,\"927\":1,\"934\":1,\"935\":1}}],[\"这时只需要查\",{\"1\":{\"922\":1}}],[\"这时对应的哈希索引的示意图如下所示\",{\"1\":{\"914\":1}}],[\"这时就可以使用git\",{\"1\":{\"990\":1}}],[\"这时就可以给杭州机房的service微服务起一个集群名称\",{\"1\":{\"598\":1}}],[\"这时就要用到\",{\"1\":{\"904\":1}}],[\"这时c\",{\"1\":{\"849\":1}}],[\"这时用stream\",{\"1\":{\"689\":1}}],[\"这时通过反射服务器中运行的代码就会通过判断动态的创造相应的对象\",{\"1\":{\"688\":1}}],[\"这时我再反序列化是会报错的\",{\"1\":{\"688\":1}}],[\"这时进入\",{\"1\":{\"616\":1}}],[\"这时客户端就会报错\",{\"1\":{\"577\":1}}],[\"这时no\",{\"1\":{\"117\":1}}],[\"这时候其实也是有方法的\",{\"1\":{\"1160\":1}}],[\"这时候对这个文件里的所有点进行了检查\",{\"1\":{\"981\":1}}],[\"这时候会对表\",{\"1\":{\"928\":1}}],[\"这时候你不得不维护另外一个索引\",{\"1\":{\"923\":1}}],[\"这时候你要查\",{\"1\":{\"914\":1}}],[\"这时候你要做数据校对\",{\"1\":{\"905\":1}}],[\"这时候我们就要优先考虑上一段提到的\",{\"1\":{\"918\":1}}],[\"这时候需要申请一个新的数据页\",{\"1\":{\"918\":1}}],[\"这时候如果你要查\",{\"1\":{\"915\":1}}],[\"这时候如果你要继续\",{\"1\":{\"893\":1}}],[\"这时候使用\",{\"1\":{\"905\":1}}],[\"这时候事务\",{\"1\":{\"905\":1}}],[\"这时候不能再执行新的更新\",{\"1\":{\"899\":1}}],[\"这时候接待你的就是连接器\",{\"1\":{\"893\":1}}],[\"这时候就需要后端再次校验\",{\"1\":{\"889\":1}}],[\"这时候\",{\"1\":{\"883\":1,\"901\":1,\"923\":1,\"928\":1,\"929\":1,\"932\":1}}],[\"这时候字符串常量池会不会有\",{\"1\":{\"723\":1}}],[\"这时候属性值部分可以省略大括号\",{\"1\":{\"242\":1}}],[\"这时候锁需要自动续期\",{\"1\":{\"111\":1}}],[\"这时候又去删锁就是删别的线程的锁了\",{\"1\":{\"111\":1}}],[\"这是最重要的\",{\"1\":{\"1150\":1}}],[\"这是你大二首先要做的事\",{\"1\":{\"1150\":1}}],[\"这是给你自己学\",{\"1\":{\"1144\":1}}],[\"这是我自己的亲身经历\",{\"1\":{\"1140\":1}}],[\"这是第一步\",{\"1\":{\"1139\":1}}],[\"这是法律规定\",{\"1\":{\"1122\":1}}],[\"这是经验之谈\",{\"1\":{\"1120\":1}}],[\"这是和你相关的专有配置\",{\"1\":{\"1005\":1}}],[\"这是效果图\",{\"1\":{\"1005\":1}}],[\"这是唯一\",{\"1\":{\"980\":1}}],[\"这是sql\",{\"1\":{\"959\":1}}],[\"这是业务有损的\",{\"1\":{\"932\":1}}],[\"这是业务无损的\",{\"1\":{\"932\":1}}],[\"这是什么原因呢\",{\"1\":{\"931\":1}}],[\"这是为了让两份日志之间的逻辑一致\",{\"1\":{\"901\":1}}],[\"这是连接器的工作\",{\"1\":{\"898\":1}}],[\"这是怎样做到的呢\",{\"1\":{\"898\":1}}],[\"这是同步非阻塞\",{\"1\":{\"712\":1}}],[\"这是浏览器的安全策略之一\",{\"1\":{\"706\":1}}],[\"这是非常可观的\",{\"1\":{\"686\":1}}],[\"这是关键\",{\"1\":{\"685\":1}}],[\"这是告诉\",{\"1\":{\"635\":1}}],[\"这是很关键的一年\",{\"1\":{\"1150\":1}}],[\"这是很关键的\",{\"1\":{\"593\":1}}],[\"这是由于在调用其他微服务接口前\",{\"1\":{\"576\":1}}],[\"这是一种无损数据压缩算法\",{\"1\":{\"1081\":1,\"1084\":1}}],[\"这是一种重业务\",{\"1\":{\"970\":1}}],[\"这是一种类型安全的可重构配置方式\",{\"1\":{\"726\":1}}],[\"这是一种完全依赖于硬件的功能\",{\"1\":{\"303\":1}}],[\"这是一个时间复杂度是\",{\"1\":{\"932\":1}}],[\"这是一个查询语句\",{\"1\":{\"895\":1}}],[\"这是一个声明式的远程调用\",{\"1\":{\"576\":1}}],[\"这是一个欢迎接口\",{\"1\":{\"492\":1}}],[\"这是\",{\"1\":{\"372\":1,\"712\":1}}],[\"这是本题的第二个关键点\",{\"1\":{\"329\":1}}],[\"这是因为我们需要找到一个比基准值小的元素\",{\"1\":{\"1085\":1}}],[\"这是因为mybatis\",{\"1\":{\"1012\":1}}],[\"这是因为null表示缺失或未知的值\",{\"1\":{\"959\":1}}],[\"这是因为在不等于条件下\",{\"1\":{\"923\":1}}],[\"这是因为在删除元素后\",{\"1\":{\"645\":1}}],[\"这是因为java中的int类型是32位有符号整数\",{\"1\":{\"739\":1}}],[\"这是因为\",{\"1\":{\"713\":1,\"715\":1,\"893\":1}}],[\"这是因为浏览器认为服务器上的资源是安全的\",{\"1\":{\"706\":1}}],[\"这是因为当方法\",{\"1\":{\"321\":1}}],[\"这是因为spring在扫描bean的时候会自动为标注了\",{\"1\":{\"182\":1}}],[\"这是因为spring使用基于代理的aop来实现事务管理\",{\"1\":{\"182\":1}}],[\"这是因为spring的aop特性\",{\"1\":{\"182\":1}}],[\"这是因为spring\",{\"1\":{\"60\":1,\"574\":1}}],[\"这是线程a恢复\",{\"1\":{\"305\":1}}],[\"这是线程a被挂起\",{\"1\":{\"305\":1}}],[\"这是真正买的版本\",{\"1\":{\"244\":1}}],[\"这是属于\",{\"1\":{\"120\":1}}],[\"这是分布式锁的基本原理\",{\"1\":{\"110\":1}}],[\"这几集才是成长的精髓啊\",{\"1\":{\"101\":1}}],[\"这两篇文章不会涉及锁的具体实现细节\",{\"1\":{\"926\":1}}],[\"这两条记录回表取数据判断\",{\"1\":{\"924\":1}}],[\"这两种方式虽然能够解决问题\",{\"1\":{\"961\":1}}],[\"这两种日志有以下三点不同\",{\"1\":{\"900\":1}}],[\"这两种执行方法的逻辑结果是一样的\",{\"1\":{\"896\":1}}],[\"这两种没有孰好孰坏\",{\"1\":{\"868\":1}}],[\"这两者都有其线程池\",{\"1\":{\"202\":1}}],[\"这两步得保证是一个原子操作\",{\"1\":{\"108\":1}}],[\"这两块流程具体看我的\",{\"1\":{\"93\":1}}],[\"这两个函数\",{\"1\":{\"945\":1}}],[\"这两个线程分别需要同时访问资源\",{\"1\":{\"933\":1}}],[\"这两个字段\",{\"1\":{\"925\":1}}],[\"这两个图里面\",{\"1\":{\"924\":1}}],[\"这两个索引是否都是必须的\",{\"1\":{\"925\":1}}],[\"这两个索引\",{\"1\":{\"923\":1,\"925\":1}}],[\"这两个语句\",{\"1\":{\"919\":1}}],[\"这两个类的like\",{\"1\":{\"743\":1,\"1101\":1}}],[\"这两个有方法体\",{\"1\":{\"686\":1}}],[\"这两个上下文共享一个从外部获取的environment\",{\"1\":{\"593\":1}}],[\"这两个因素都会导致partition\",{\"1\":{\"572\":1}}],[\"这两个注解都如字面意思\",{\"1\":{\"482\":1}}],[\"这两个标签主要用于多表联合查询\",{\"1\":{\"419\":1}}],[\"这两个任务完成其中一个我就开始\",{\"1\":{\"376\":1}}],[\"这两个就行\",{\"1\":{\"178\":1}}],[\"这两个路径被视为不同的url\",{\"1\":{\"60\":1}}],[\"这两个name一样但是path不一样\",{\"1\":{\"47\":1}}],[\"这些只是针对一部分同学\",{\"1\":{\"1150\":1}}],[\"这些问题的答案其实大家心里都明白\",{\"1\":{\"1139\":1}}],[\"这些依赖将由运行时环境提供\",{\"1\":{\"1012\":1}}],[\"这些依赖我们需要手动一个一个添加\",{\"1\":{\"727\":1}}],[\"这些库也不会自动传递给项目中的其他模块\",{\"1\":{\"1010\":1}}],[\"这些操作需要消耗额\",{\"1\":{\"975\":1}}],[\"这些操作必须保证是一体的\",{\"1\":{\"904\":1}}],[\"这些新的数据版本是不存在的\",{\"1\":{\"935\":1}}],[\"这些概念如果理解和使用不当\",{\"1\":{\"930\":1}}],[\"这些设置将应用于所有maven项目\",{\"1\":{\"1014\":1}}],[\"这些设置都会失效\",{\"1\":{\"897\":1}}],[\"这些设计思路也可以用到你自己的程序里\",{\"1\":{\"898\":1}}],[\"这些接口都是引擎中已经定义好的\",{\"1\":{\"897\":1}}],[\"这些资源会在连接断开的时候才释放\",{\"1\":{\"893\":1}}],[\"这些示例代码提供了基本的使用方法\",{\"1\":{\"852\":1}}],[\"这些系统调用允许我们同时监视多个i\",{\"1\":{\"849\":1}}],[\"这些动作都是通过信道完成\",{\"1\":{\"823\":1}}],[\"这些属性包括routing\",{\"1\":{\"823\":1}}],[\"这些实现类可以是数据库驱动程序\",{\"1\":{\"740\":1}}],[\"这些安全限制在本地环境中是为了保护用户的安全和隐私而存在的\",{\"1\":{\"706\":1}}],[\"这些基本数字类型可自动向上转为int\",{\"1\":{\"671\":1}}],[\"这些考点似乎不是短短一篇文章能够囊括的\",{\"1\":{\"639\":1}}],[\"这些对象将被销毁\",{\"1\":{\"632\":1}}],[\"这些对象都是通过redis进行存储和同步的\",{\"1\":{\"112\":1}}],[\"这些权限决定了角色可执行的操作\",{\"1\":{\"630\":1}}],[\"这些参数一般是不会变动的\",{\"1\":{\"598\":1}}],[\"这些参数为名字\",{\"1\":{\"49\":1}}],[\"这些状态信息可以包括认证令牌\",{\"1\":{\"581\":1}}],[\"这些不会造成困扰\",{\"1\":{\"562\":1}}],[\"这些是最常用的给\",{\"1\":{\"522\":1}}],[\"这些组件springboot启动的时候会把组件都装配到容器中\",{\"1\":{\"480\":1}}],[\"这些常量一旦被转入内存就会变成运行时常量池\",{\"1\":{\"386\":1}}],[\"这些符号才有对应的内存地址信息\",{\"1\":{\"386\":1}}],[\"这些线程不停地获取值\",{\"1\":{\"312\":1}}],[\"这些在ali\",{\"1\":{\"193\":1}}],[\"这些服务会有供自己单独使用的数据库\",{\"1\":{\"183\":1}}],[\"这些都只放在单体应用的话都可以叫本地锁\",{\"1\":{\"108\":1}}],[\"这些方法都可以减少stream循环查询数据库的次数\",{\"1\":{\"91\":1}}],[\"这个配合看视频学习真的绝\",{\"1\":{\"1163\":1}}],[\"这个配置类每个model都要\",{\"0\":{\"151\":1}}],[\"这个公司的技术栈\",{\"1\":{\"1150\":1}}],[\"这个阶段\",{\"1\":{\"1150\":1}}],[\"这个阶段的视频不是很多\",{\"1\":{\"1150\":1}}],[\"这个月要学习哪些知识\",{\"1\":{\"1142\":1}}],[\"这个转载的文章误人子弟了\",{\"1\":{\"1093\":1}}],[\"这个观念\",{\"1\":{\"1077\":1}}],[\"这个快捷键只支持0\",{\"0\":{\"1068\":1}}],[\"这个快照是基于整库的\",{\"1\":{\"935\":1}}],[\"这个规则是把两行所有的汇总起来比\",{\"1\":{\"1051\":1}}],[\"这个踩坑严重\",{\"1\":{\"1026\":1}}],[\"这个还用说吗\",{\"1\":{\"1009\":1}}],[\"这个文件不版本控制就行\",{\"1\":{\"1080\":1}}],[\"这个文件夹下的内容复制到新电脑后就能用了\",{\"1\":{\"1005\":1}}],[\"这个文件目录类似\",{\"1\":{\"998\":1}}],[\"这个标记通常由\",{\"1\":{\"999\":1}}],[\"这个不是降分辨率\",{\"1\":{\"998\":1}}],[\"这个应该是适用于整个库的\",{\"1\":{\"993\":1}}],[\"这个在之前写的文章里出现过\",{\"1\":{\"972\":1}}],[\"这个在值传递问题考的多\",{\"1\":{\"687\":1}}],[\"这个字段是用来指向当前这个数据行的上一个版本\",{\"1\":{\"972\":1}}],[\"这个字符串对象的引用是什么时候被放到字符串常量池中的\",{\"1\":{\"722\":1}}],[\"这个词汇来描述这个概念\",{\"1\":{\"959\":1}}],[\"这个有点叠加列的意思\",{\"1\":{\"959\":1}}],[\"这个视图数组把所有的\",{\"1\":{\"935\":1}}],[\"这个视图数组和高水位\",{\"1\":{\"935\":1}}],[\"这个视图是逻辑不一致的\",{\"1\":{\"927\":1}}],[\"这个视图是在每个\",{\"1\":{\"905\":1}}],[\"这个视图是在事务启动时创建的\",{\"1\":{\"905\":1}}],[\"这个命令\",{\"1\":{\"934\":1}}],[\"这个命令会将这个线程的自动提交关掉\",{\"1\":{\"907\":1}}],[\"这个方案看上去是无损的\",{\"1\":{\"932\":1}}],[\"这个方法接下来都是要操作指定key的crud\",{\"1\":{\"868\":1}}],[\"这个方法可以根据你给定的规则映射\",{\"1\":{\"689\":1}}],[\"这个方法\",{\"1\":{\"576\":1}}],[\"这个方法其实底层调用的是\",{\"1\":{\"304\":1}}],[\"这个方法的颜值有正则限定\",{\"1\":{\"132\":1}}],[\"这个方法就是给容器放东西\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"这个方法完了放入redis的操作没在锁里\",{\"1\":{\"108\":1}}],[\"这个并发控制要做在数据库服务端\",{\"1\":{\"932\":1}}],[\"这个等待时间往往是无法接受的\",{\"1\":{\"932\":1}}],[\"这个超时时间可以通过参数\",{\"1\":{\"932\":1}}],[\"这个业务需要涉及到以下操作\",{\"1\":{\"931\":1}}],[\"这个就是这篇文章标题所涉及的\",{\"1\":{\"1091\":1}}],[\"这个就是两阶段锁协议\",{\"1\":{\"931\":1}}],[\"这个就不说了\",{\"1\":{\"1009\":1}}],[\"这个就类似于svn或者git的版本号\",{\"1\":{\"303\":1}}],[\"这个问题的结论取决于事务\",{\"1\":{\"931\":1}}],[\"这个问题其实在变相考察泛型的作用\",{\"1\":{\"715\":1}}],[\"这个语法\",{\"1\":{\"928\":1}}],[\"这个语句\",{\"1\":{\"928\":1}}],[\"这个语句就执行完成了\",{\"1\":{\"897\":1}}],[\"这个语句的执行方案就确定下来了\",{\"1\":{\"896\":1}}],[\"这个语句是执行两个表的\",{\"1\":{\"896\":1}}],[\"这个语句在菜鸟找不到\",{\"1\":{\"210\":1}}],[\"这个库的线程很快就会爆满\",{\"1\":{\"928\":1}}],[\"这个备份结果里\",{\"1\":{\"927\":1}}],[\"这个跟索引\",{\"1\":{\"925\":1}}],[\"这个小吕理解了\",{\"1\":{\"925\":1}}],[\"这个最左前缀可以是联合索引的最左\",{\"1\":{\"923\":1}}],[\"这个联合索引的\",{\"1\":{\"923\":1}}],[\"这个联合索引\",{\"1\":{\"923\":1}}],[\"这个联合索引后\",{\"1\":{\"923\":1}}],[\"这个联合索引来分析\",{\"1\":{\"923\":1}}],[\"这个联合索引就有意义了\",{\"1\":{\"922\":1}}],[\"这个查询过程读了\",{\"1\":{\"921\":1}}],[\"这个查询可真够慢的\",{\"1\":{\"916\":1}}],[\"这个路径得到\",{\"1\":{\"916\":1}}],[\"这个区间的所有用户\",{\"1\":{\"914\":1}}],[\"这个工具不错\",{\"1\":{\"908\":1}}],[\"这个确认工作可以在测试环境中开展\",{\"1\":{\"908\":1}}],[\"这个事务执行期间\",{\"1\":{\"935\":1}}],[\"这个事务持续存在直到你主动执行\",{\"1\":{\"907\":1}}],[\"这个事务就启动了\",{\"1\":{\"907\":1}}],[\"这个事务跟\",{\"1\":{\"906\":1}}],[\"这个我们会在后面讲锁的时候展开\",{\"1\":{\"906\":1}}],[\"这个容器是用来存储\",{\"1\":{\"903\":1}}],[\"这个概率是不是很低\",{\"1\":{\"901\":1}}],[\"这个概念被误导了很久\",{\"1\":{\"962\":1}}],[\"这个概念\",{\"1\":{\"899\":1}}],[\"这个概念了\",{\"1\":{\"183\":1,\"904\":1}}],[\"这个日志\",{\"1\":{\"901\":1}}],[\"这个日志存在的必要性\",{\"1\":{\"899\":1}}],[\"这个临时库就会少了这一次更新\",{\"1\":{\"901\":1}}],[\"这个能力称为crash\",{\"1\":{\"899\":1}}],[\"这个索引结构支持范围查询\",{\"1\":{\"915\":1}}],[\"这个索引\",{\"1\":{\"898\":1}}],[\"这个表会记录每一个\",{\"1\":{\"1079\":1}}],[\"这个表需要\",{\"1\":{\"925\":1}}],[\"这个表的建表语句是\",{\"1\":{\"917\":1}}],[\"这个表中查询长事务\",{\"1\":{\"907\":1}}],[\"这个表有一个主键\",{\"1\":{\"898\":1}}],[\"这个表上所有的查询缓存都会被清空\",{\"1\":{\"894\":1}}],[\"这个值就是在执行器每次调用引擎获取数据行的时候累加的\",{\"1\":{\"897\":1}}],[\"这个接口\",{\"1\":{\"897\":2}}],[\"这个接口需要调用远程服务\",{\"1\":{\"576\":1}}],[\"这个关键字识别出来\",{\"1\":{\"895\":1}}],[\"这个效率会很高\",{\"1\":{\"894\":1}}],[\"这个连接就处于空闲状态\",{\"1\":{\"893\":1}}],[\"这个连接里面的权限判断逻辑\",{\"1\":{\"893\":1}}],[\"这个很重要\",{\"1\":{\"880\":1,\"929\":1}}],[\"这个很有意思\",{\"1\":{\"220\":1}}],[\"这个点谷粒商城雷神好像是直接用个隐藏的input实现的\",{\"1\":{\"878\":1}}],[\"这个点不知道的话\",{\"1\":{\"156\":1}}],[\"这个时间复杂度是\",{\"1\":{\"915\":1,\"916\":1}}],[\"这个时间是由参数\",{\"1\":{\"893\":1}}],[\"这个时\",{\"1\":{\"867\":1}}],[\"这个时候你要做的不是抱怨\",{\"1\":{\"1150\":1}}],[\"这个时候如果你自己调节能力比较差的话\",{\"1\":{\"1147\":1}}],[\"这个时候掌柜只好放下手中的活儿\",{\"1\":{\"899\":1}}],[\"这个时候掌柜一定还有一个专门记录赊账的账本\",{\"1\":{\"899\":1}}],[\"这个时候更新就算完成了\",{\"1\":{\"899\":1}}],[\"这个时候用的就是你输入的用户名和密码\",{\"1\":{\"893\":1}}],[\"这个时候keys\",{\"1\":{\"860\":1}}],[\"这个时候我加了多次是不是对其他用户不公平\",{\"1\":{\"815\":1}}],[\"这个时候断路器是半开状态\",{\"1\":{\"587\":1}}],[\"这个时候\",{\"1\":{\"572\":1,\"708\":1,\"712\":1,\"740\":1,\"1144\":1,\"1150\":5}}],[\"这个时候就可以复制这个语句了\",{\"1\":{\"1079\":1}}],[\"这个时候就需要\",{\"1\":{\"713\":1}}],[\"这个时候就存放在缓存中\",{\"1\":{\"686\":1}}],[\"这个时候就算请求正确的也会到兜底的错误方法上即开启断路器\",{\"1\":{\"586\":1}}],[\"这个时候就用到了countdownlatch\",{\"1\":{\"334\":1}}],[\"这个时候就出现了一个问题\",{\"1\":{\"286\":1}}],[\"这个时候只能用锁来保证原子性\",{\"1\":{\"307\":1}}],[\"这个时候单单依靠数据库事务就不行了\",{\"1\":{\"183\":1}}],[\"这个时候过期就抛异常\",{\"1\":{\"69\":1}}],[\"这个打通其它mq不是问题\",{\"1\":{\"818\":1}}],[\"这个主题\",{\"1\":{\"817\":1}}],[\"这个错误是由于在单独运行java\",{\"1\":{\"787\":1}}],[\"这个获取的对象打印会少一个person\",{\"1\":{\"766\":1}}],[\"这个算法应该如何设计呢\",{\"1\":{\"739\":1}}],[\"这个数据是可见的\",{\"1\":{\"935\":1}}],[\"这个数据就会被放在当前会话的一级缓存中\",{\"1\":{\"446\":1}}],[\"这个数组就是按照身份证号递增的顺序保存的\",{\"1\":{\"915\":1}}],[\"这个数组下标的计算方法是\",{\"1\":{\"739\":1}}],[\"这个速度还能忍受\",{\"1\":{\"734\":1}}],[\"这个步骤主要是用到了spring里面的springfactoriesloader来完成的\",{\"1\":{\"731\":1}}],[\"这个组件里面必须包含有一个\",{\"1\":{\"731\":1}}],[\"这个依赖包含的子依赖中包含了我们开发\",{\"1\":{\"727\":1}}],[\"这个大家应该不陌生\",{\"1\":{\"713\":1}}],[\"这个基本不用了\",{\"1\":{\"688\":1}}],[\"这个可以看chrome书签\",{\"1\":{\"681\":1}}],[\"这个可以做到用多少占多少\",{\"1\":{\"474\":1}}],[\"这个变量必须是一个常量\",{\"1\":{\"771\":1}}],[\"这个变量声明方式是对的\",{\"1\":{\"666\":1}}],[\"这个变量是共享且不稳定的\",{\"1\":{\"283\":2}}],[\"这个题目给我的第一印象是稍微有点诱导的嫌疑\",{\"1\":{\"639\":1}}],[\"这个说法不太准确\",{\"1\":{\"634\":1}}],[\"这个过滤器应该放在第一个粉色的块\",{\"1\":{\"627\":1}}],[\"这个过程可能需要很长的时间\",{\"1\":{\"1142\":1}}],[\"这个过程还是需要时间成本的\",{\"1\":{\"1090\":1}}],[\"这个过程得多慢啊\",{\"1\":{\"935\":1}}],[\"这个过程中\",{\"1\":{\"1150\":1}}],[\"这个过程中数据是可以正常更新的\",{\"1\":{\"927\":1}}],[\"这个过程中可能自定义了一些初始化之前的操作和之后的操作\",{\"1\":{\"489\":1}}],[\"这个过程\",{\"1\":{\"924\":1,\"1144\":1}}],[\"这个过程称为页分裂\",{\"1\":{\"918\":1}}],[\"这个过程称为回表\",{\"1\":{\"917\":1}}],[\"这个过程不需要重连和重新做权限验证\",{\"1\":{\"893\":1}}],[\"这个过程是非常麻烦并且耗时的\",{\"1\":{\"734\":1}}],[\"这个过程是原子的\",{\"1\":{\"302\":1}}],[\"这个秘钥是用户自己设定的\",{\"1\":{\"626\":1}}],[\"这个全局调控的人就是seata服务器\",{\"1\":{\"606\":1}}],[\"这个像\",{\"1\":{\"594\":1}}],[\"这个自定义配置类不能放在\",{\"1\":{\"575\":1}}],[\"这个好实现\",{\"1\":{\"571\":1}}],[\"这个好理解\",{\"1\":{\"571\":1}}],[\"这个注解也可放类上\",{\"1\":{\"830\":1}}],[\"这个注解会常用\",{\"1\":{\"568\":1}}],[\"这个注解是用来指定自动配置所在的包\",{\"1\":{\"482\":1}}],[\"这个注解是用来指定\",{\"1\":{\"482\":1}}],[\"这个前缀\",{\"1\":{\"566\":1}}],[\"这个东西相当于\",{\"1\":{\"561\":1}}],[\"这个设置仅影响程序在\",{\"1\":{\"537\":1}}],[\"这个设置决定了程序在启动时的默认工作目录\",{\"1\":{\"537\":1}}],[\"这个也分4\",{\"1\":{\"505\":1}}],[\"这个也可操作hash\",{\"1\":{\"105\":1}}],[\"这个参数我也建议你设置成\",{\"1\":{\"902\":1}}],[\"这个参数我建议你设置成\",{\"1\":{\"902\":1}}],[\"这个参数设置成\",{\"1\":{\"902\":2}}],[\"这个参数的值就会从容器中找\",{\"1\":{\"483\":1}}],[\"这个参数能拿值\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"这个jar里有几乎springboot所需要全场景\",{\"1\":{\"481\":1}}],[\"这个场景的所有常规需要的依赖我们都自动引入\",{\"1\":{\"477\":1}}],[\"这个starter又会带出\",{\"1\":{\"477\":1}}],[\"这个倒idea双shift找properties也行\",{\"1\":{\"466\":1}}],[\"这个up汇总的很好\",{\"1\":{\"379\":1}}],[\"这个类可以获取\",{\"1\":{\"495\":1,\"887\":1}}],[\"这个类在\",{\"1\":{\"378\":1}}],[\"这个类的一些api第二个参数就放上面注入的线程池\",{\"1\":{\"371\":1}}],[\"这个类的源码\",{\"1\":{\"229\":1}}],[\"这个对象还没创建成功\",{\"1\":{\"301\":1}}],[\"这个被称为query\",{\"1\":{\"272\":1}}],[\"这个项目涵盖的太多\",{\"1\":{\"261\":1}}],[\"这个项目到底能不能写在简历中\",{\"1\":{\"261\":1}}],[\"这个项目是线性的\",{\"1\":{\"261\":1}}],[\"这个项目代码里很多\",{\"1\":{\"103\":1}}],[\"这个函数会触发\",{\"1\":{\"225\":1}}],[\"这个\",{\"1\":{\"210\":1,\"543\":1,\"625\":1,\"901\":1,\"916\":1}}],[\"这个model有很多东西可以抽出来用\",{\"1\":{\"191\":1}}],[\"这个认证令牌通常是一个字符串\",{\"1\":{\"153\":1}}],[\"这个机制使得redission提供的分布式锁是可以自动续期的\",{\"1\":{\"113\":1}}],[\"这个代码层面加锁如果加不好又会产生很多问题\",{\"1\":{\"108\":1,\"867\":1}}],[\"这个叫分层思想\",{\"1\":{\"92\":1}}],[\"这个笔记很详细\",{\"1\":{\"83\":1}}],[\"这个软件可以直接设置中文就不用看的那么费劲了\",{\"1\":{\"79\":1}}],[\"这个token必须要在每次请求时传递给服务端\",{\"1\":{\"54\":1}}],[\"这里使用gitee的giteepages\",{\"1\":{\"1161\":1}}],[\"这里使用hash保存用户信息\",{\"0\":{\"876\":1}}],[\"这里已经挪到\",{\"1\":{\"1101\":1}}],[\"这里取中间点\",{\"1\":{\"1085\":3}}],[\"这里取巧不想新建重复体力劳动\",{\"1\":{\"256\":1,\"594\":1}}],[\"这里一个maven概念\",{\"1\":{\"1009\":1}}],[\"这里还会补充更多目录\",{\"1\":{\"1004\":1}}],[\"这里还需来理解\",{\"1\":{\"80\":1}}],[\"这里可用\",{\"1\":{\"994\":1}}],[\"这里可以先粗略的认为它存储的是\",{\"1\":{\"722\":1}}],[\"这里可以拿来用\",{\"1\":{\"139\":1}}],[\"这里全局忽略文件写路径的时候\",{\"1\":{\"993\":1}}],[\"这里面都是未被版本控制的文件\",{\"1\":{\"993\":1}}],[\"这里面会包括视图名称和需要传递给视图的模型数据\",{\"1\":{\"543\":1}}],[\"这里要额外补充一点\",{\"1\":{\"962\":1}}],[\"这里要写后端代码\",{\"1\":{\"138\":1}}],[\"这里有几个地址呢\",{\"1\":{\"1092\":1}}],[\"这里有些\",{\"1\":{\"1005\":1}}],[\"这里有点不理解\",{\"1\":{\"916\":1}}],[\"这里有redis的一个\",{\"1\":{\"876\":1}}],[\"这里需要说明的是\",{\"1\":{\"926\":1}}],[\"这里需要注意的是\",{\"1\":{\"905\":1}}],[\"这里需要编写一个自己的自定义校验器\",{\"1\":{\"243\":1}}],[\"这里也有感兴趣学一下\",{\"1\":{\"887\":1}}],[\"这里也是用的这种方式\",{\"1\":{\"810\":1}}],[\"这里system\",{\"1\":{\"884\":1}}],[\"这里直接就\",{\"1\":{\"878\":1}}],[\"这里直接整理引用\",{\"1\":{\"722\":1}}],[\"这里生成表达式的方法\",{\"1\":{\"877\":1}}],[\"这里通过端口号模拟\",{\"1\":{\"860\":1}}],[\"这里将server注释\",{\"1\":{\"810\":1}}],[\"这里命名为\",{\"1\":{\"790\":1}}],[\"这里后的app好像没用就用bat文件里的就行\",{\"1\":{\"787\":1}}],[\"这里注释掉\",{\"1\":{\"724\":1}}],[\"这里注意要填\",{\"1\":{\"363\":1}}],[\"这里对它进行一下规范\",{\"1\":{\"722\":1}}],[\"这里看的是jdk8中\",{\"1\":{\"721\":1}}],[\"这里说的可能有点抽象\",{\"1\":{\"715\":1}}],[\"这里再重新遍历这个arr数组发现还是没变\",{\"1\":{\"688\":1}}],[\"这里属于接口\",{\"1\":{\"686\":1}}],[\"这里i=test\",{\"1\":{\"658\":1}}],[\"这里应该是只要验证这个用户有无\",{\"1\":{\"627\":1}}],[\"这里应该是同单据number下\",{\"1\":{\"380\":1}}],[\"这里其实后面的\",{\"1\":{\"589\":1}}],[\"这里只介绍表象\",{\"1\":{\"862\":1}}],[\"这里只记录于自己而言是重点的内容\",{\"1\":{\"552\":1}}],[\"这里只贴出一个简单的测试\",{\"1\":{\"403\":1}}],[\"这里之所以要classpath\",{\"1\":{\"518\":1}}],[\"这里调用目标方法\",{\"1\":{\"496\":1}}],[\"这里以自定义注解为切点\",{\"1\":{\"492\":1}}],[\"这里给大家推荐一个之乎专栏\",{\"1\":{\"1150\":1}}],[\"这里给出一个小例子\",{\"1\":{\"492\":1}}],[\"这里给个工具类稍微封装一下\",{\"1\":{\"402\":1}}],[\"这里不是\",{\"1\":{\"925\":1}}],[\"这里不妨用反证法来进行解释\",{\"1\":{\"901\":1}}],[\"这里不就又跨域了吗\",{\"1\":{\"883\":1}}],[\"这里不用注入吗\",{\"1\":{\"486\":1}}],[\"这里不需要重新加锁\",{\"1\":{\"379\":1}}],[\"这里主要配置和业务逻辑有关的\",{\"1\":{\"462\":1}}],[\"这里的重点是\",{\"1\":{\"1150\":1}}],[\"这里的分失去了\",{\"1\":{\"1135\":1}}],[\"这里的b指的是byte\",{\"1\":{\"1092\":1}}],[\"这里的b6=b4+b5可以看成是b6=10\",{\"1\":{\"662\":1}}],[\"这里的原则\",{\"1\":{\"933\":1}}],[\"这里的实验环境是\",{\"1\":{\"928\":1}}],[\"这里的\",{\"1\":{\"885\":1,\"901\":1}}],[\"这里的验证码生成使用了google\",{\"1\":{\"877\":1}}],[\"这里的value就是底层用来存储字符的char类型数组\",{\"1\":{\"720\":1}}],[\"这里的前提是系统发生了\",{\"1\":{\"572\":1}}],[\"这里的collection只能填list或者是map\",{\"1\":{\"436\":1}}],[\"这里的配置暂时不深究\",{\"1\":{\"399\":1}}],[\"这里的加锁是给\",{\"1\":{\"115\":1}}],[\"这里\",{\"1\":{\"334\":1,\"868\":1,\"916\":2,\"923\":1,\"931\":1,\"934\":1,\"1085\":1}}],[\"这里没用\",{\"1\":{\"882\":1}}],[\"这里没用spring默认的aop\",{\"1\":{\"179\":1}}],[\"这里没看到端口\",{\"1\":{\"882\":1}}],[\"这里没有用synchronized\",{\"1\":{\"305\":1}}],[\"这里先是查询所有匹配address=mill的文档\",{\"1\":{\"278\":1}}],[\"这里雷神nb\",{\"1\":{\"240\":1}}],[\"这里发的是\",{\"1\":{\"230\":1}}],[\"这里存放数据\",{\"1\":{\"225\":1}}],[\"这里就可以配合lambda这么用\",{\"1\":{\"876\":1}}],[\"这里就可以冒号绑定搞成数字\",{\"1\":{\"220\":1}}],[\"这里就不测了\",{\"1\":{\"465\":1}}],[\"这里就是去本地\",{\"1\":{\"1009\":1}}],[\"这里就是\",{\"1\":{\"144\":1}}],[\"这里是复用github的流程\",{\"1\":{\"994\":1}}],[\"这里是因为本类只是个工具类\",{\"1\":{\"884\":1}}],[\"这里是否开启状态也会写入\",{\"1\":{\"878\":1}}],[\"这里是根据package\",{\"1\":{\"215\":1,\"219\":1}}],[\"这里是required所以后面的timeout等设置都没用\",{\"1\":{\"179\":1}}],[\"这里老师在配置文件中改时间格式一定用弃用的格式化方式和老师一样\",{\"1\":{\"192\":1}}],[\"这里具体看\",{\"1\":{\"183\":1,\"605\":1,\"607\":1}}],[\"这里所库存是fegin\",{\"1\":{\"176\":1}}],[\"这里判断用户状态信息\",{\"1\":{\"156\":1}}],[\"这里选择哪一种比较合适呢\",{\"1\":{\"155\":1}}],[\"这里暂时掠过\",{\"1\":{\"153\":1}}],[\"这里我用数据库中的行锁举个例子\",{\"1\":{\"932\":1}}],[\"这里我把备份过程中几个关键的语句列出来\",{\"1\":{\"929\":1}}],[\"这里我就不再一一展开了\",{\"1\":{\"916\":1}}],[\"这里我们的评估标准是\",{\"1\":{\"923\":1}}],[\"这里我们假设身份证号没有重复\",{\"1\":{\"915\":1}}],[\"这里我们展开说明\",{\"1\":{\"906\":1}}],[\"这里我先给你介绍三种常见\",{\"1\":{\"913\":1}}],[\"这里我给出这个\",{\"1\":{\"900\":1}}],[\"这里我再把那张图拿过来\",{\"1\":{\"898\":1}}],[\"这里我有点一头雾水\",{\"1\":{\"844\":1}}],[\"这里我只截取test\",{\"1\":{\"388\":1}}],[\"这里我暂时掠过\",{\"1\":{\"152\":1}}],[\"这里我想热部署\",{\"1\":{\"123\":1,\"546\":1}}],[\"这里视频直接在会员信息加了个字段放社交id\",{\"1\":{\"139\":1}}],[\"这里递归太容易内存溢出\",{\"1\":{\"110\":1}}],[\"这里查了两次数据库\",{\"1\":{\"108\":1}}],[\"这里用任何一个端口都是可以的6379\",{\"1\":{\"865\":1}}],[\"这里用延时队列\",{\"1\":{\"839\":1}}],[\"这里用\",{\"1\":{\"65\":1,\"504\":1,\"929\":1}}],[\"这里放一些常见的\",{\"1\":{\"45\":1}}],[\"这就看你自己的情况了\",{\"1\":{\"1150\":1}}],[\"这就最大程度地减少了事务之间的锁等待\",{\"1\":{\"931\":1}}],[\"这就会影响到业务并发度\",{\"1\":{\"930\":1}}],[\"这就会导致大量占用存储空间\",{\"1\":{\"906\":1}}],[\"这就导致接下来的查询都在事务中\",{\"1\":{\"907\":1}}],[\"这就像打烊以后掌柜做的事\",{\"1\":{\"899\":1}}],[\"这就意味着\",{\"1\":{\"893\":1}}],[\"这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了\",{\"1\":{\"54\":1}}],[\"这就需要一种服务发现机制\",{\"1\":{\"740\":1}}],[\"这就需要服务注册中心来统一管理\",{\"1\":{\"562\":1}}],[\"这就解释了\",{\"1\":{\"739\":1}}],[\"这就说明你不支持并发也不支持并行\",{\"1\":{\"675\":1}}],[\"这就可以用来构建一种没有特定约束的关系\",{\"1\":{\"636\":1}}],[\"这就可能存在一个线程aaa修改了共享变量x的值还未写回主内存中时\",{\"1\":{\"288\":1}}],[\"这就和\",{\"1\":{\"572\":1}}],[\"这就叫网络分区\",{\"1\":{\"571\":1}}],[\"这就满足了as\",{\"1\":{\"329\":1}}],[\"这就造成了线程安全的问题\",{\"1\":{\"301\":1}}],[\"这就造成了其他线程没有接受到主内存n的改变\",{\"1\":{\"290\":1}}],[\"这就是面向接口编程的好处\",{\"1\":{\"1074\":1}}],[\"这就是典型的\",{\"1\":{\"918\":1}}],[\"这就是脏读\",{\"1\":{\"905\":1}}],[\"这就是\",{\"1\":{\"900\":1}}],[\"这就是为什么我在pom\",{\"1\":{\"960\":1}}],[\"这就是为什么\",{\"1\":{\"899\":1}}],[\"这就是会看源码的好处啊\",{\"1\":{\"828\":1}}],[\"这就是依赖\",{\"1\":{\"740\":1}}],[\"这就是我之前leetcode\",{\"1\":{\"739\":1}}],[\"这就是所谓的\",{\"1\":{\"581\":1}}],[\"这就是as\",{\"1\":{\"329\":1}}],[\"这就是可重入锁的好处\",{\"1\":{\"321\":1}}],[\"这就是导致重排后\",{\"1\":{\"294\":1}}],[\"这就是比较典型的悲观锁策略\",{\"1\":{\"169\":1}}],[\"这就指示\",{\"1\":{\"283\":1}}],[\"这就为应用的扩展提供了便利\",{\"1\":{\"54\":1}}],[\"这也是我常挂在嘴边的\",{\"1\":{\"1140\":1}}],[\"这也是他\",{\"1\":{\"1005\":1}}],[\"这也是创建索引的最主要的原因\",{\"1\":{\"911\":1}}],[\"这也是\",{\"1\":{\"892\":1,\"904\":1,\"930\":1}}],[\"这也就是我们一般不建议使用查询缓存的原因\",{\"1\":{\"898\":1}}],[\"这也就是通常所说类型擦除\",{\"1\":{\"715\":1}}],[\"这也就解释了\",{\"1\":{\"739\":1}}],[\"这也就导致了两个为空null的字符串相加后会打印为\",{\"1\":{\"720\":1}}],[\"这也就使得remote\",{\"1\":{\"46\":1}}],[\"这也意味着限制了应用的扩展能力\",{\"1\":{\"52\":1}}],[\"这意味着物理像素的数量不会改变\",{\"1\":{\"998\":1}}],[\"这意味着如果没有明确指定varchar类型的长度\",{\"1\":{\"963\":1}}],[\"这意味着其他事务不能同时对这些行进行修改\",{\"1\":{\"906\":1}}],[\"这意味着容器的输出将直接显示在当前终端上\",{\"1\":{\"790\":1}}],[\"这意味着\",{\"0\":{\"1046\":1},\"1\":{\"723\":1,\"959\":1,\"1010\":1,\"1012\":1,\"1112\":1}}],[\"这意味着当一个通道没有数据可读取时\",{\"1\":{\"712\":1}}],[\"这意味着每个请求都是独立的\",{\"1\":{\"581\":1}}],[\"这意味着每个线程都可以独立地管理和访问其自己的局部变量\",{\"1\":{\"156\":1}}],[\"这意味着分区中的节点将无法提供服务\",{\"1\":{\"571\":1}}],[\"这意味着这个测试类对应独立的ioc容器\",{\"1\":{\"531\":1}}],[\"这意味着内部方法的事务设置将被忽略\",{\"1\":{\"179\":1}}],[\"这意味着在默认情况下不会被引入\",{\"1\":{\"1010\":1}}],[\"这意味着在编译时编译器会强制要求对其进行处理或声明\",{\"1\":{\"686\":1}}],[\"这意味着在特定的服务器环境中\",{\"1\":{\"60\":1}}],[\"这意味着在客户端与服务器之间的通信中\",{\"1\":{\"48\":1}}],[\"这意味着无论您输入的是大写字母\",{\"1\":{\"60\":1}}],[\"这意味着用户下次请求还必须要请求在这台服务器上\",{\"1\":{\"52\":1}}],[\"这意味着你可以在启动的java\",{\"1\":{\"790\":1}}],[\"这意味着你可以在\",{\"1\":{\"30\":1}}],[\"这样是为了分组\",{\"1\":{\"1097\":1}}],[\"这样只会匹配到前面\",{\"1\":{\"1020\":1}}],[\"这样它才会被正确地加载\",{\"1\":{\"1010\":1}}],[\"这样组织\",{\"1\":{\"1005\":1}}],[\"这样你会节省出很多的时间\",{\"1\":{\"1148\":1}}],[\"这样你会对java非常的熟悉\",{\"1\":{\"1144\":1}}],[\"这样你的日历就会从周一开始了\",{\"1\":{\"1006\":1}}],[\"这样你的临时库就跟误删之前的线上库一样了\",{\"1\":{\"901\":1}}],[\"这样你就把基本不会用到的\",{\"1\":{\"1005\":1}}],[\"这样第一张表的\",{\"1\":{\"961\":1}}],[\"这样每次冲突概率变成原来的\",{\"1\":{\"932\":1}}],[\"这样每次要给影院账户加金额的时候\",{\"1\":{\"932\":1}}],[\"这样即使每个客户端控制到只有\",{\"1\":{\"932\":1}}],[\"这样即可在configuration配置我的数据源\",{\"1\":{\"551\":1,\"1166\":1}}],[\"这样当开学的时候\",{\"1\":{\"1150\":1}}],[\"这样当出现死锁的时候\",{\"1\":{\"932\":1}}],[\"这样当想升级或切换到另一个版本时\",{\"1\":{\"556\":1}}],[\"这样执行完就立马\",{\"1\":{\"931\":1}}],[\"这样页面的利用率最高\",{\"1\":{\"919\":1}}],[\"这样非主键索引占用的空间最小\",{\"1\":{\"919\":1}}],[\"这样写数据成本相对较高\",{\"1\":{\"918\":1}}],[\"这样如果你要查\",{\"1\":{\"916\":1}}],[\"这样做的好处是\",{\"1\":{\"960\":1,\"1012\":1}}],[\"这样做的好处是增加新的\",{\"1\":{\"914\":1}}],[\"这样做的好处就是\",{\"1\":{\"556\":1}}],[\"这样设置后清理起来更方便\",{\"1\":{\"908\":1}}],[\"这样我们就可以快速定位到问题\",{\"1\":{\"897\":1}}],[\"这样我们对目标代码的调用不是直接发生的\",{\"1\":{\"640\":1}}],[\"这样对于默认的\",{\"1\":{\"894\":1}}],[\"这样能够帮助你从高维度理解问题\",{\"1\":{\"892\":1}}],[\"这样能够保证前提任务的执行\",{\"1\":{\"334\":1}}],[\"这样要改代码不灵活\",{\"1\":{\"779\":1}}],[\"这样变量才能引用\",{\"1\":{\"723\":1}}],[\"这样也省去了再次执行\",{\"1\":{\"907\":1}}],[\"这样也会产生重复的消息\",{\"1\":{\"815\":1}}],[\"这样也会导致内部报错\",{\"1\":{\"771\":1}}],[\"这样也可以显示地图\",{\"1\":{\"706\":1}}],[\"这样也就让最终的结果少于20000\",{\"1\":{\"290\":1}}],[\"这样一直循环\",{\"1\":{\"694\":1}}],[\"这样一来每次都要写上具体的实现方法\",{\"1\":{\"760\":1}}],[\"这样一来\",{\"1\":{\"660\":1}}],[\"这样会导致整个库长时间处于不可写状态\",{\"1\":{\"927\":1}}],[\"这样会极大的提高程序性能\",{\"1\":{\"686\":1}}],[\"这样会通知服务器端\",{\"1\":{\"47\":1}}],[\"这样现有的实现类可以继续使用默认实现\",{\"1\":{\"686\":1}}],[\"这样父类和子类都可以穿\",{\"1\":{\"686\":1}}],[\"这样可以保证\",{\"1\":{\"902\":2}}],[\"这样可以提高吞吐量\",{\"1\":{\"855\":2}}],[\"这样可以确保文件的可靠性\",{\"1\":{\"706\":1}}],[\"这样可以避免出现互相等待对方释放锁的情况\",{\"1\":{\"932\":1}}],[\"这样可以避免浏览器的安全限制\",{\"1\":{\"706\":1}}],[\"这样可以避免长事务\",{\"1\":{\"186\":1}}],[\"这样可以让前端能对响应进行统一的处理\",{\"1\":{\"630\":1}}],[\"这样有人攻击有一层挡着\",{\"1\":{\"590\":1}}],[\"这样有利于容器对bean的管理\",{\"1\":{\"498\":1}}],[\"这样系统的维护人员就可以通过eureka\",{\"1\":{\"564\":1}}],[\"这样才可以启动定时任务\",{\"1\":{\"730\":1}}],[\"这样才能在解决问题的同时避免踩坑\",{\"1\":{\"961\":1}}],[\"这样才能从理论上分析出这个数据库的适用场景\",{\"1\":{\"916\":1}}],[\"这样才能注册上去\",{\"1\":{\"595\":1}}],[\"这样才能拿到授权的资源\",{\"1\":{\"52\":1}}],[\"这样才是一一对应消费\",{\"1\":{\"543\":1,\"1081\":1}}],[\"这样tomcat才跑得起\",{\"1\":{\"456\":1}}],[\"这样这个字段就封装不上\",{\"1\":{\"422\":1}}],[\"这样的人\",{\"1\":{\"1076\":1}}],[\"这样的设置意味着\",{\"1\":{\"1010\":1}}],[\"这样的顺序\",{\"1\":{\"931\":1}}],[\"这样的语句\",{\"1\":{\"929\":1}}],[\"这样的话springboot就可以知道第三方jar包里面这个配置类的位置\",{\"1\":{\"731\":1}}],[\"这样的库\",{\"1\":{\"727\":1}}],[\"这样的库来简化和加强\",{\"1\":{\"216\":1}}],[\"这样的好处是延迟了数组的创建\",{\"1\":{\"688\":1}}],[\"这样的好处是减少线程上下文切换的消耗\",{\"1\":{\"324\":1}}],[\"这样的一堆操作\",{\"1\":{\"453\":1,\"462\":1}}],[\"这样的处理方式让写的同学更加明确线程池的运行规则\",{\"1\":{\"366\":1}}],[\"这样提高了并发性\",{\"1\":{\"305\":1}}],[\"这样同样出现了数据不一致的问题\",{\"1\":{\"295\":1}}],[\"这样造成的结果\",{\"1\":{\"294\":1}}],[\"这样数据库更改规则了\",{\"1\":{\"252\":1}}],[\"这样bc的\",{\"1\":{\"179\":1}}],[\"这样就可以用\",{\"1\":{\"1005\":1}}],[\"这样就可以建立其他聚簇索引\",{\"1\":{\"978\":1}}],[\"这样就可能产生重复的消息\",{\"1\":{\"815\":1}}],[\"这样就不会重复了\",{\"1\":{\"961\":1}}],[\"这样就得到了分库后的索引值\",{\"1\":{\"961\":1}}],[\"这样就保证了使用缓存的同时\",{\"1\":{\"636\":1}}],[\"这样就保证了不管调用几次\",{\"1\":{\"170\":1}}],[\"这样就有助于对环境配置进行版本管理\",{\"1\":{\"591\":1}}],[\"这样就很好区分异同\",{\"1\":{\"482\":1}}],[\"这样就避免了每要用一个mapper得先sqlsessionfactory还要opensession\",{\"1\":{\"453\":1,\"462\":1}}],[\"这样就会无限循环\",{\"1\":{\"307\":1}}],[\"这样就会造成什么问题呢\",{\"1\":{\"301\":1}}],[\"这样就需要通过volatile来修饰\",{\"1\":{\"295\":1}}],[\"这样就好理解了\",{\"1\":{\"161\":1}}],[\"这样就能保证final属性每次都能被正确初始化\",{\"1\":{\"125\":1}}],[\"这样就能保证网站的web服务器能获取到真实ip\",{\"1\":{\"46\":1}}],[\"这样看来基本的k\",{\"1\":{\"155\":1}}],[\"这样\",{\"1\":{\"152\":1,\"153\":1,\"179\":1,\"694\":1,\"787\":1,\"933\":1,\"935\":1,\"959\":1,\"990\":1,\"1012\":3}}],[\"这样不是每次都指向一个新对象那么意义何在\",{\"1\":{\"125\":1}}],[\"这样在执行命令时\",{\"1\":{\"1038\":1}}],[\"这样在\",{\"1\":{\"932\":1}}],[\"这样在其他地方注入的实例还是同一个名称\",{\"1\":{\"124\":1}}],[\"这样在分布式的应用上\",{\"1\":{\"52\":1}}],[\"这样逻辑就清晰多了\",{\"1\":{\"78\":1}}],[\"功能层面的事情\",{\"1\":{\"900\":1}}],[\"功能才是目的\",{\"1\":{\"639\":1}}],[\"功能上的损失\",{\"1\":{\"572\":1}}],[\"功能上的可用性\",{\"1\":{\"572\":1}}],[\"功能就是通过代理模式来实现的\",{\"1\":{\"498\":1}}],[\"功能就行\",{\"1\":{\"215\":1}}],[\"功能更加强大\",{\"1\":{\"494\":1}}],[\"功能和更多的分布式功能\",{\"1\":{\"112\":1}}],[\"功能详情\",{\"1\":{\"40\":1,\"44\":1}}],[\"功能\",{\"0\":{\"37\":1,\"41\":1},\"1\":{\"38\":1,\"42\":1,\"156\":1,\"480\":1}}],[\"功能亮点\",{\"0\":{\"34\":1}}],[\"r+1\",{\"1\":{\"1085\":1}}],[\"rdm\",{\"1\":{\"999\":4,\"1003\":1}}],[\"rdb\",{\"0\":{\"859\":1},\"1\":{\"861\":1}}],[\"rl\",{\"1\":{\"959\":4}}],[\"rlock\",{\"1\":{\"115\":1}}],[\"rc\",{\"1\":{\"934\":1}}],[\"rc1\",{\"1\":{\"594\":1}}],[\"rr\",{\"1\":{\"929\":2,\"934\":1}}],[\"r4\",{\"1\":{\"921\":1}}],[\"r3~r5\",{\"1\":{\"922\":1}}],[\"r3\",{\"1\":{\"921\":1}}],[\"r5\",{\"1\":{\"918\":2}}],[\"r1~r5\",{\"1\":{\"917\":1}}],[\"ry使用的url+token的方式\",{\"1\":{\"889\":1}}],[\"rpm是一个包管理器\",{\"1\":{\"808\":1}}],[\"rpm\",{\"1\":{\"801\":2,\"810\":1}}],[\"rpctest\",{\"1\":{\"576\":1}}],[\"rpc\",{\"1\":{\"565\":1,\"594\":1,\"713\":2}}],[\"rsa\",{\"1\":{\"797\":3,\"983\":3,\"986\":2}}],[\"rf\",{\"1\":{\"787\":1,\"800\":1,\"1005\":3}}],[\"rwx\",{\"1\":{\"786\":2}}],[\"rwxrwx\",{\"1\":{\"786\":1}}],[\"rwxrwxrwx\",{\"1\":{\"786\":1}}],[\"rwlock\",{\"1\":{\"326\":5}}],[\"r>\",{\"1\":{\"688\":1,\"748\":2,\"770\":3,\"876\":1}}],[\"rm向tc注册分支事务\",{\"1\":{\"606\":1}}],[\"rm\",{\"1\":{\"606\":3,\"609\":2,\"787\":1,\"800\":1,\"1005\":3}}],[\"rbac权限模型\",{\"0\":{\"630\":1},\"1\":{\"630\":2}}],[\"rb\",{\"1\":{\"540\":1,\"865\":1,\"1084\":1}}],[\"rquestbody\",{\"0\":{\"502\":1}}],[\"rt\",{\"0\":{\"304\":1},\"1\":{\"603\":1,\"800\":1}}],[\"ribbon+resttemplate\",{\"1\":{\"576\":1}}],[\"ribbon配置饥饿加载\",{\"1\":{\"576\":1}}],[\"ribbonclient\",{\"1\":{\"575\":1}}],[\"ribbon负载规则替换\",{\"0\":{\"575\":1}}],[\"ribbon引用\",{\"1\":{\"574\":1}}],[\"ribbon也可以使用ribbon\",{\"1\":{\"574\":1}}],[\"ribbon的负载均衡和rest调用\",{\"0\":{\"574\":1}}],[\"ribbon本地负载均衡\",{\"1\":{\"573\":1}}],[\"ribbon本地负载均衡客户端vs\",{\"1\":{\"573\":1}}],[\"ribbon未来可能被spring\",{\"1\":{\"573\":1}}],[\"ribbon目前也进入维护模式\",{\"1\":{\"573\":1}}],[\"ribbon实现的一套\",{\"1\":{\"573\":1}}],[\"ribbon是基于netflix\",{\"1\":{\"573\":1}}],[\"ribbon\",{\"1\":{\"228\":1,\"560\":1,\"574\":1,\"576\":1,\"577\":1,\"594\":1}}],[\"right\",{\"1\":{\"69\":1,\"571\":1,\"648\":2,\"895\":1,\"938\":1,\"959\":2,\"961\":1,\"964\":1,\"1005\":2,\"1074\":2}}],[\"roaming\",{\"1\":{\"1037\":1}}],[\"road\",{\"1\":{\"275\":1}}],[\"roc\",{\"1\":{\"795\":1}}],[\"rocketmq\",{\"0\":{\"824\":1},\"1\":{\"594\":2,\"713\":1,\"824\":1}}],[\"roll\",{\"1\":{\"908\":1}}],[\"rollback\",{\"1\":{\"609\":1,\"907\":2,\"929\":1}}],[\"rolename\",{\"1\":{\"743\":2,\"1101\":2}}],[\"role\",{\"1\":{\"630\":1,\"743\":5,\"1101\":5}}],[\"rouoting\",{\"1\":{\"823\":1}}],[\"round\",{\"1\":{\"603\":2,\"959\":1}}],[\"routingkey\",{\"1\":{\"836\":3}}],[\"routing\",{\"1\":{\"823\":1}}],[\"routines\",{\"1\":{\"219\":1}}],[\"routh2\",{\"1\":{\"591\":1}}],[\"routh\",{\"1\":{\"591\":1}}],[\"router\",{\"1\":{\"613\":1}}],[\"routes\",{\"1\":{\"591\":1}}],[\"route\",{\"1\":{\"590\":2,\"591\":2}}],[\"rowid是mysql系统自动分配的\",{\"1\":{\"967\":1}}],[\"rows表示该语句扫描的行数\",{\"1\":{\"897\":1}}],[\"rows这几个属性值\",{\"1\":{\"897\":1}}],[\"rows\",{\"1\":{\"897\":2}}],[\"row\",{\"1\":{\"265\":1,\"900\":1,\"902\":1,\"908\":1,\"935\":11,\"959\":2}}],[\"rootlogger=debug\",{\"1\":{\"399\":1,\"463\":1}}],[\"root与alias主要区别在于nginx如何解释location后面的uri\",{\"1\":{\"73\":1}}],[\"root\",{\"0\":{\"73\":1},\"1\":{\"72\":1,\"73\":9,\"123\":2,\"210\":3,\"540\":3,\"791\":4,\"792\":1,\"793\":1,\"794\":2,\"796\":1,\"802\":2,\"803\":1,\"998\":3}}],[\"rapidapi\",{\"1\":{\"1003\":1}}],[\"raw\",{\"1\":{\"1003\":1,\"1005\":1}}],[\"rabbithandler\",{\"0\":{\"831\":1},\"1\":{\"831\":2}}],[\"rabbitmessagingtemplate\",{\"1\":{\"828\":1}}],[\"rabbitmq只要有\",{\"1\":{\"829\":1}}],[\"rabbitmq没有的情况\",{\"1\":{\"829\":1}}],[\"rabbitmq是一个由erlang开发的amqp\",{\"1\":{\"818\":1}}],[\"rabbitmq\",{\"0\":{\"811\":1,\"825\":1},\"1\":{\"468\":1,\"594\":1,\"818\":1,\"823\":1,\"825\":4,\"832\":4,\"835\":3,\"837\":2}}],[\"rabbitmq延时队列\",{\"0\":{\"187\":1}}],[\"rabbittemplate\",{\"1\":{\"828\":2,\"829\":1,\"836\":2,\"846\":1}}],[\"rabbittemplate来发送消息\",{\"1\":{\"820\":1}}],[\"rabbitautoconfiguration就会自动生效\",{\"1\":{\"828\":1}}],[\"rabbitautoconfiguration\",{\"1\":{\"821\":1,\"828\":1}}],[\"rabbitlistener\",{\"0\":{\"830\":1},\"1\":{\"820\":1,\"829\":1,\"830\":1,\"831\":1}}],[\"rabbit提供了对amqp的支持\",{\"1\":{\"820\":1}}],[\"radis等\",{\"1\":{\"689\":1}}],[\"random\",{\"1\":{\"689\":1}}],[\"randomuuid\",{\"1\":{\"587\":1,\"725\":1}}],[\"range查询允许以下字符\",{\"1\":{\"278\":1}}],[\"range\",{\"1\":{\"278\":1,\"648\":1}}],[\"raft是一种协议\",{\"1\":{\"572\":1}}],[\"raft算法\",{\"1\":{\"572\":1}}],[\"raft\",{\"1\":{\"571\":1}}],[\"rate\",{\"1\":{\"495\":1,\"730\":1,\"887\":1}}],[\"ratelimiter\",{\"1\":{\"495\":3,\"688\":1,\"850\":2,\"887\":4}}],[\"ratelimiteraspect\",{\"1\":{\"495\":1,\"887\":2}}],[\"raxcl\",{\"1\":{\"379\":1,\"380\":1,\"773\":1}}],[\"ray\",{\"0\":{\"44\":1},\"1\":{\"36\":1,\"43\":1}}],[\"ruo\",{\"0\":{\"1179\":1}}],[\"ruoyi通常会提供一个刷新令牌的接口\",{\"1\":{\"890\":1}}],[\"ruoyi使用拦截器\",{\"1\":{\"890\":1}}],[\"ruoyi使用jwt\",{\"1\":{\"890\":1}}],[\"ruoyi\",{\"0\":{\"65\":1,\"495\":1,\"877\":1},\"1\":{\"67\":2,\"490\":2,\"495\":1,\"500\":1,\"501\":1,\"688\":2,\"877\":2,\"887\":1,\"1081\":1}}],[\"ruby\",{\"1\":{\"1128\":1}}],[\"rubyfish\",{\"1\":{\"981\":4}}],[\"rust\",{\"1\":{\"1005\":2}}],[\"ruanyifeng\",{\"1\":{\"994\":1}}],[\"runcat\",{\"1\":{\"1003\":1}}],[\"run的时候curl\",{\"1\":{\"994\":1}}],[\"running\",{\"1\":{\"994\":1}}],[\"runner\",{\"1\":{\"994\":1}}],[\"runnable01\",{\"1\":{\"356\":1}}],[\"runnable\",{\"0\":{\"356\":1},\"1\":{\"156\":1,\"354\":2,\"357\":1,\"362\":1,\"688\":2}}],[\"runs\",{\"1\":{\"994\":2}}],[\"rundashboard\",{\"1\":{\"610\":2}}],[\"runtimeexception\",{\"1\":{\"520\":3,\"624\":1,\"686\":1,\"779\":1}}],[\"runtimeexception及其子类以外\",{\"1\":{\"705\":1}}],[\"runtimeexception及其子类\",{\"1\":{\"182\":1}}],[\"runtime\",{\"0\":{\"500\":1},\"1\":{\"329\":1,\"492\":1,\"688\":1}}],[\"runwith\",{\"1\":{\"227\":1,\"528\":1,\"529\":1}}],[\"run\",{\"1\":{\"210\":1,\"213\":1,\"215\":1,\"219\":2,\"222\":2,\"267\":2,\"357\":1,\"473\":1,\"480\":3,\"517\":1,\"537\":1,\"546\":3,\"633\":1,\"634\":1,\"687\":1,\"790\":1,\"791\":1,\"794\":1,\"795\":1,\"796\":3,\"825\":1,\"881\":1,\"994\":6,\"1001\":1,\"1005\":3,\"1166\":3}}],[\"run时发现没有pull也会自动pull\",{\"1\":{\"210\":1}}],[\"runasync\",{\"1\":{\"202\":1,\"374\":1}}],[\"rules\",{\"1\":{\"1005\":1}}],[\"rulestate>\",{\"1\":{\"610\":2}}],[\"rulestates\",{\"1\":{\"610\":1}}],[\"rule\",{\"1\":{\"76\":1}}],[\"r\",{\"1\":{\"61\":1,\"92\":1,\"240\":3,\"241\":1,\"252\":2,\"267\":1,\"576\":6,\"688\":1,\"721\":1,\"722\":1,\"770\":4,\"786\":5,\"876\":3,\"1005\":2,\"1085\":15,\"1150\":2}}],[\"reruin\",{\"1\":{\"1159\":1}}],[\"reuse\",{\"1\":{\"1005\":1}}],[\"reeder\",{\"1\":{\"1003\":1,\"1005\":3}}],[\"reentranllock默认非公平\",{\"1\":{\"380\":1}}],[\"reentrantreadwritelock\",{\"1\":{\"326\":2,\"378\":1}}],[\"reentrantlock可中断\",{\"1\":{\"380\":1}}],[\"reentrantlock是jdk实现的类\",{\"1\":{\"380\":1}}],[\"reentrantlock和synchronized区别\",{\"0\":{\"380\":1}}],[\"reentrantlock\",{\"0\":{\"80\":1},\"1\":{\"79\":1,\"317\":6,\"321\":1,\"352\":6,\"378\":1,\"380\":1,\"674\":2,\"740\":1}}],[\"reenttrantlock通过构造函数指定该锁是否公平\",{\"1\":{\"319\":1}}],[\"rebase命令\",{\"1\":{\"990\":1}}],[\"rebase\",{\"1\":{\"990\":5,\"1005\":2}}],[\"recent\",{\"1\":{\"1030\":1}}],[\"receiver\",{\"1\":{\"1006\":1}}],[\"receivemessage\",{\"1\":{\"830\":1,\"831\":2}}],[\"rectangle\",{\"1\":{\"1005\":1}}],[\"record\",{\"1\":{\"959\":7,\"961\":1,\"1005\":2}}],[\"records\",{\"1\":{\"959\":2}}],[\"recorddate\",{\"1\":{\"937\":2}}],[\"recv\",{\"1\":{\"959\":4}}],[\"recursionfn\",{\"1\":{\"883\":1,\"886\":1}}],[\"reminders\",{\"1\":{\"1006\":1}}],[\"rememberme\",{\"1\":{\"879\":1}}],[\"remoting\",{\"1\":{\"613\":1}}],[\"remote库用的是http方式\",{\"1\":{\"1013\":1}}],[\"remote\",{\"1\":{\"46\":1,\"198\":1,\"785\":1,\"799\":2,\"985\":2,\"987\":2,\"990\":1,\"1003\":1,\"1005\":2,\"1009\":2}}],[\"removeif\",{\"1\":{\"768\":1}}],[\"remove\",{\"1\":{\"157\":3,\"645\":1,\"768\":1,\"1041\":1}}],[\"rewritepath=\",{\"1\":{\"591\":2}}],[\"repeat\",{\"1\":{\"1006\":2}}],[\"repeatable\",{\"1\":{\"905\":5,\"929\":1,\"934\":1}}],[\"replace\",{\"1\":{\"1005\":34,\"1019\":1,\"1084\":10}}],[\"replica\",{\"1\":{\"865\":1}}],[\"replication\",{\"1\":{\"572\":1}}],[\"replytext\",{\"1\":{\"836\":3}}],[\"replycode\",{\"1\":{\"836\":3}}],[\"repo<\",{\"1\":{\"1013\":2}}],[\"repo\",{\"1\":{\"1005\":1,\"1009\":2}}],[\"repositoty\",{\"1\":{\"994\":1}}],[\"repository>\",{\"1\":{\"1013\":1}}],[\"repository\",{\"1\":{\"482\":1,\"801\":2,\"1009\":3}}],[\"reportcurrenttimewithfixedrate\",{\"1\":{\"730\":1}}],[\"renewal\",{\"1\":{\"890\":1}}],[\"renderstring\",{\"1\":{\"632\":2}}],[\"rename\",{\"1\":{\"540\":3}}],[\"renrenfast\",{\"1\":{\"246\":1}}],[\"renren\",{\"1\":{\"229\":3}}],[\"revalue\",{\"1\":{\"295\":3}}],[\"reverse\",{\"1\":{\"72\":1,\"809\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"362\":1}}],[\"rejected\",{\"1\":{\"260\":1}}],[\"re\",{\"1\":{\"216\":2,\"240\":1}}],[\"requeue\",{\"1\":{\"837\":1}}],[\"request前面加的一层的公共前缀\",{\"1\":{\"880\":1}}],[\"request同理\",{\"1\":{\"879\":1}}],[\"requestvolumethreshold\",{\"1\":{\"586\":1}}],[\"requesttemplate\",{\"1\":{\"580\":1}}],[\"requestmappinghandlermapping\",{\"1\":{\"534\":3}}],[\"requestmapping\",{\"1\":{\"488\":1,\"576\":2,\"629\":1}}],[\"requestparam时\",{\"1\":{\"511\":1}}],[\"requestparam\",{\"1\":{\"252\":1}}],[\"requestattributes\",{\"1\":{\"161\":1}}],[\"requestcontext\",{\"1\":{\"157\":1}}],[\"requestcontextholder是spring框架提供的一个用于保存请求上下文的工具类\",{\"1\":{\"157\":1}}],[\"requestcontextholder解决completablefuture丢失threadlocal\",{\"1\":{\"157\":1}}],[\"requestcontextholder\",{\"1\":{\"156\":1,\"157\":3,\"160\":1,\"161\":3,\"492\":1,\"581\":1}}],[\"request对象\",{\"1\":{\"156\":1}}],[\"requestbody\",{\"1\":{\"92\":1,\"240\":1,\"502\":1}}],[\"request拦截器\",{\"1\":{\"69\":1,\"888\":1}}],[\"requests\",{\"1\":{\"47\":1,\"981\":1}}],[\"request\",{\"0\":{\"47\":1},\"1\":{\"46\":2,\"71\":1,\"156\":1,\"157\":3,\"160\":1,\"161\":1,\"174\":1,\"230\":1,\"239\":1,\"492\":5,\"512\":1,\"581\":1,\"879\":1,\"888\":1,\"890\":1}}],[\"requirement\",{\"1\":{\"473\":1}}],[\"require\",{\"1\":{\"229\":1}}],[\"requirepass\",{\"1\":{\"213\":1,\"794\":2}}],[\"requires\",{\"1\":{\"178\":3,\"179\":9}}],[\"requiredargsconstructor注解\",{\"1\":{\"488\":1}}],[\"requiredargsconstructor与private\",{\"1\":{\"488\":1}}],[\"requiredargsconstructor\",{\"1\":{\"488\":1}}],[\"required\",{\"1\":{\"178\":3,\"179\":2,\"879\":1}}],[\"ret3=lambda6\",{\"1\":{\"752\":1}}],[\"ret2=\",{\"1\":{\"752\":1}}],[\"ret=lambda4\",{\"1\":{\"752\":1}}],[\"retry\",{\"1\":{\"929\":1}}],[\"retryer\",{\"1\":{\"580\":1}}],[\"retryableexception\",{\"1\":{\"580\":1}}],[\"retrieveuserinfofromrequest\",{\"1\":{\"157\":1}}],[\"retentionpolicy\",{\"0\":{\"500\":1},\"1\":{\"492\":1,\"688\":1}}],[\"retention\",{\"0\":{\"500\":1},\"1\":{\"492\":1,\"688\":1}}],[\"returnedmessage的消息db状态修改为错误抵达\",{\"1\":{\"846\":1}}],[\"returns=true\",{\"1\":{\"832\":1,\"835\":1}}],[\"returnmap\",{\"1\":{\"415\":3}}],[\"return\",{\"0\":{\"221\":1,\"374\":1,\"649\":1},\"1\":{\"48\":1,\"68\":1,\"89\":1,\"97\":1,\"105\":1,\"124\":1,\"125\":2,\"130\":1,\"157\":7,\"192\":1,\"220\":1,\"221\":2,\"225\":1,\"229\":4,\"240\":1,\"252\":1,\"290\":1,\"301\":1,\"302\":1,\"374\":2,\"388\":1,\"402\":1,\"465\":1,\"483\":1,\"492\":2,\"503\":1,\"511\":1,\"515\":1,\"520\":1,\"538\":1,\"540\":1,\"566\":1,\"576\":1,\"580\":1,\"612\":1,\"624\":2,\"625\":1,\"632\":1,\"658\":4,\"683\":1,\"686\":1,\"718\":2,\"720\":2,\"752\":3,\"757\":1,\"758\":1,\"762\":1,\"766\":2,\"771\":3,\"779\":4,\"850\":2,\"851\":2,\"852\":1,\"876\":2,\"879\":1,\"887\":2,\"1005\":2,\"1082\":1,\"1084\":1,\"1085\":3,\"1097\":1}}],[\"reddit\",{\"1\":{\"1005\":1}}],[\"redo\",{\"0\":{\"899\":1},\"1\":{\"898\":2,\"899\":13,\"900\":9,\"901\":8,\"902\":3}}],[\"redhat中的软件包管理器\",{\"1\":{\"810\":1}}],[\"reduce\",{\"1\":{\"689\":1}}],[\"red\",{\"1\":{\"220\":1,\"591\":2}}],[\"redlock\",{\"1\":{\"111\":1}}],[\"redirectattributes\",{\"0\":{\"98\":1,\"536\":1},\"1\":{\"98\":1,\"130\":4,\"536\":1}}],[\"redis为什么还需要显式的引入commons\",{\"1\":{\"1010\":1}}],[\"redis<\",{\"1\":{\"1010\":1}}],[\"redis里面这个依赖是optional\",{\"1\":{\"871\":1}}],[\"redis里存过期时间\",{\"1\":{\"70\":1}}],[\"redis最高\",{\"1\":{\"868\":1}}],[\"redis等\",{\"1\":{\"868\":1}}],[\"redis测监视测试\",{\"1\":{\"856\":1}}],[\"redis就是利用这种check\",{\"1\":{\"855\":1}}],[\"redis事务没有没有隔离级别的概念\",{\"1\":{\"855\":1}}],[\"redis单条命令式保存原子性的\",{\"1\":{\"854\":1,\"868\":1}}],[\"redis单线程执行指令遵守one\",{\"1\":{\"88\":1}}],[\"redis可以用于实现分布式锁\",{\"1\":{\"849\":1}}],[\"redis可以用于限流\",{\"1\":{\"849\":1}}],[\"redis做了⼤量的优\",{\"1\":{\"849\":1}}],[\"redis没设密码结合百度发现中招了\",{\"1\":{\"800\":1}}],[\"redis的话默认实现的\",{\"1\":{\"871\":1}}],[\"redis的java客户端\",{\"0\":{\"871\":1}}],[\"redis的主要功能之一是作为缓存存储\",{\"1\":{\"849\":1}}],[\"redis的lo性能比数据库高的原因是什么\",{\"1\":{\"849\":1}}],[\"redis的速度⾮常的快\",{\"1\":{\"849\":1}}],[\"redis的ip地址不能为localhost必须为服务器ip\",{\"1\":{\"796\":1}}],[\"redis的也可能是多个服务用同一个配置\",{\"1\":{\"598\":1}}],[\"redis密码\",{\"1\":{\"794\":1}}],[\"redistemplate\",{\"0\":{\"872\":1},\"1\":{\"560\":1,\"872\":1}}],[\"redistemplate是再次封装\",{\"1\":{\"106\":1}}],[\"redis只要告诉地址之类的而不需要再告诉它什么东西怎么做例如配置数据源\",{\"1\":{\"473\":1}}],[\"redis默认没有配置文件\",{\"1\":{\"213\":1}}],[\"redis将数据保存到集合中\",{\"1\":{\"174\":1}}],[\"redis有5种不同数据结构\",{\"1\":{\"155\":1}}],[\"redis操作session\",{\"1\":{\"152\":1}}],[\"redisoperationssessionrepository\",{\"1\":{\"152\":1}}],[\"redis统一存储\",{\"0\":{\"145\":1}}],[\"redis存\",{\"1\":{\"129\":1}}],[\"redis拼个\",{\"1\":{\"129\":1}}],[\"redisproperties\",{\"1\":{\"125\":7}}],[\"redis热部署不生效\",{\"0\":{\"124\":1}}],[\"redis2\",{\"1\":{\"123\":1}}],[\"redisserializer\",{\"1\":{\"872\":1}}],[\"redisserializationcontext\",{\"1\":{\"125\":3}}],[\"redission\",{\"1\":{\"112\":1}}],[\"redisson的信号量\",{\"1\":{\"202\":1}}],[\"redisson的底层逻辑是基于\",{\"1\":{\"86\":1,\"114\":1}}],[\"redissonclient\",{\"1\":{\"115\":1,\"202\":1}}],[\"redissonlock\",{\"1\":{\"115\":1}}],[\"redisson还提供了一些高级特性\",{\"1\":{\"112\":1}}],[\"redisson支持多种部署模式\",{\"1\":{\"112\":1}}],[\"redisson可以用来解决分布式系统中的一些常见问题\",{\"1\":{\"112\":1}}],[\"redisson是一个功能强大的分布式java框架\",{\"1\":{\"112\":1}}],[\"redisson是基于redis的分布式java对象和服务框架\",{\"1\":{\"112\":1}}],[\"redisson是作为分布式锁的客户端\",{\"1\":{\"112\":1}}],[\"redisson和redis有什么关联吗\",{\"1\":{\"112\":1}}],[\"redisson有个看门狗\",{\"1\":{\"111\":1}}],[\"redisson\",{\"1\":{\"78\":4,\"86\":2,\"108\":1,\"111\":1,\"112\":6,\"114\":2,\"867\":1}}],[\"redis自己实现分布式锁的最大的问题就是自旋\",{\"1\":{\"109\":1}}],[\"redis上显示timeout连接超时\",{\"1\":{\"107\":1}}],[\"redis使用\",{\"0\":{\"104\":1}}],[\"redis乐观锁\",{\"0\":{\"85\":1}}],[\"rediscacheconfiguration配置kv的序列化的时候需要把其它配置也给拿上就需要cacheproperties放入容器使用\",{\"1\":{\"507\":1}}],[\"rediscacheconfiguration\",{\"1\":{\"125\":7,\"514\":2,\"532\":2}}],[\"rediscachemanager\",{\"1\":{\"122\":1}}],[\"rediscache\",{\"1\":{\"67\":1,\"122\":1}}],[\"redis\",{\"0\":{\"67\":1,\"89\":1,\"105\":1,\"150\":1,\"155\":1,\"213\":1,\"794\":1,\"849\":1,\"857\":1,\"878\":1},\"1\":{\"65\":4,\"67\":1,\"69\":2,\"78\":2,\"83\":1,\"87\":2,\"88\":1,\"89\":1,\"103\":12,\"107\":1,\"112\":8,\"115\":1,\"122\":1,\"123\":5,\"125\":1,\"134\":3,\"152\":8,\"156\":4,\"157\":1,\"162\":1,\"172\":1,\"210\":1,\"213\":18,\"468\":2,\"495\":1,\"530\":1,\"546\":2,\"565\":1,\"621\":1,\"626\":1,\"627\":2,\"628\":2,\"782\":1,\"788\":1,\"794\":9,\"849\":2,\"850\":1,\"851\":1,\"852\":1,\"857\":1,\"859\":1,\"861\":2,\"865\":2,\"866\":1,\"868\":2,\"869\":1,\"871\":1,\"876\":1,\"878\":3,\"887\":3,\"889\":1,\"1010\":4}}],[\"relativepath元素中的地址\",{\"1\":{\"1009\":1}}],[\"relativepath\",{\"1\":{\"1009\":1}}],[\"releases\",{\"1\":{\"1013\":2}}],[\"release版本的springboot引入spring\",{\"1\":{\"1010\":1}}],[\"releaselock\",{\"1\":{\"851\":1}}],[\"release<\",{\"1\":{\"238\":1,\"458\":2,\"476\":2,\"477\":1,\"546\":1,\"556\":1}}],[\"release\",{\"1\":{\"178\":2,\"342\":1,\"343\":1,\"483\":1,\"554\":1,\"556\":1,\"801\":2,\"829\":1,\"846\":1,\"994\":1,\"1010\":2}}],[\"release亲测可用\",{\"1\":{\"107\":1}}],[\"reloadinstance\",{\"1\":{\"124\":1}}],[\"reload\",{\"1\":{\"71\":1,\"208\":1,\"804\":1}}],[\"resume\",{\"1\":{\"1127\":1}}],[\"resultsethandler封装结果\",{\"1\":{\"465\":1}}],[\"resultset=info\",{\"1\":{\"399\":1,\"463\":1}}],[\"resultmap=\",{\"1\":{\"419\":1,\"421\":1,\"423\":1,\"426\":1,\"427\":1,\"429\":1,\"878\":1}}],[\"resultmap>\",{\"1\":{\"419\":1,\"421\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":1,\"429\":1}}],[\"resultmap的更大作用应该是在于其内部的association标签和collection标签\",{\"1\":{\"419\":1}}],[\"resultmap\",{\"0\":{\"418\":1},\"1\":{\"419\":1,\"429\":1}}],[\"resulttype\",{\"1\":{\"429\":1}}],[\"resulttype属性\",{\"0\":{\"417\":1}}],[\"resulttype还是javabean\",{\"1\":{\"413\":1}}],[\"resulttype=\",{\"1\":{\"408\":1,\"415\":1,\"416\":1,\"422\":1,\"427\":1,\"429\":3,\"430\":1,\"432\":1,\"433\":1,\"436\":1,\"438\":1}}],[\"result\",{\"1\":{\"130\":3,\"157\":2,\"240\":1,\"268\":1,\"492\":3,\"496\":1,\"503\":3,\"851\":2,\"959\":1}}],[\"resize\",{\"1\":{\"1005\":1}}],[\"resilience4j\",{\"1\":{\"581\":1}}],[\"reset\",{\"1\":{\"893\":1,\"1005\":1}}],[\"restore\",{\"1\":{\"1001\":1}}],[\"resthighlevelclient\",{\"1\":{\"529\":1}}],[\"restcontroller\",{\"1\":{\"503\":1}}],[\"restcontrolleradvice的好处是\",{\"1\":{\"520\":1}}],[\"restcontrolleradvice是\",{\"1\":{\"520\":1}}],[\"restcontrolleradvice\",{\"0\":{\"520\":1},\"1\":{\"240\":1,\"520\":7}}],[\"resttemplate调用\",{\"1\":{\"573\":1}}],[\"resttemplate\",{\"1\":{\"498\":1,\"560\":1,\"566\":2,\"594\":1}}],[\"rest风格的uri\",{\"1\":{\"459\":1}}],[\"rest\",{\"0\":{\"558\":1},\"1\":{\"268\":1,\"727\":2}}],[\"restart=always\",{\"1\":{\"210\":1,\"789\":1,\"796\":1,\"825\":1}}],[\"restart\",{\"1\":{\"208\":1,\"211\":1,\"789\":1,\"793\":1,\"803\":1,\"805\":1}}],[\"resolution\",{\"1\":{\"679\":1,\"722\":1,\"1005\":1}}],[\"resolver\",{\"1\":{\"483\":3}}],[\"resolve\",{\"1\":{\"211\":1,\"229\":2,\"722\":3}}],[\"resortseqdemo\",{\"1\":{\"295\":2}}],[\"resource默认通过名称注入\",{\"1\":{\"488\":1}}],[\"resources不是相对路径\",{\"1\":{\"518\":1}}],[\"resources\",{\"1\":{\"402\":2,\"522\":1,\"539\":2,\"810\":1,\"1079\":1,\"1084\":1}}],[\"resources>\",{\"1\":{\"397\":1}}],[\"resource=\",{\"1\":{\"400\":2}}],[\"resource>\",{\"1\":{\"397\":1}}],[\"resource\",{\"1\":{\"231\":1,\"400\":1,\"402\":2,\"543\":1,\"606\":1,\"799\":1,\"877\":1,\"1081\":1}}],[\"res\",{\"0\":{\"373\":1,\"374\":1},\"1\":{\"105\":2,\"374\":1,\"879\":5,\"1005\":7}}],[\"responseentity\",{\"1\":{\"520\":1}}],[\"responseentity<string>\",{\"1\":{\"520\":1}}],[\"responsebody注解后\",{\"1\":{\"503\":1}}],[\"responsebody\",{\"0\":{\"503\":1},\"1\":{\"124\":1,\"503\":3,\"515\":1}}],[\"responsetime\",{\"1\":{\"100\":1}}],[\"response\",{\"1\":{\"48\":1,\"100\":2,\"139\":1,\"157\":2,\"233\":2,\"492\":1,\"632\":6,\"890\":1}}],[\"regedit\",{\"1\":{\"1030\":1}}],[\"regex\",{\"1\":{\"1019\":2}}],[\"regexp\",{\"1\":{\"216\":1,\"951\":1,\"959\":1}}],[\"regular\",{\"0\":{\"1015\":1}}],[\"region\",{\"1\":{\"1006\":1}}],[\"registrar\",{\"1\":{\"478\":1}}],[\"registrytype=nacos\",{\"1\":{\"608\":1}}],[\"registry\",{\"1\":{\"97\":3,\"208\":1,\"591\":1,\"608\":2,\"789\":3,\"889\":1}}],[\"register\",{\"1\":{\"130\":2,\"223\":1,\"591\":1,\"688\":1}}],[\"registermodule\",{\"1\":{\"125\":1}}],[\"registersingleton\",{\"1\":{\"124\":1}}],[\"reg\",{\"1\":{\"97\":2}}],[\"regarded\",{\"1\":{\"27\":1}}],[\"reids\",{\"1\":{\"86\":1,\"114\":1}}],[\"reasonable\",{\"1\":{\"887\":2}}],[\"reachable\",{\"1\":{\"636\":1}}],[\"reached\",{\"1\":{\"362\":1}}],[\"reactor\",{\"1\":{\"466\":1,\"1009\":2}}],[\"react\",{\"1\":{\"261\":1,\"466\":1}}],[\"readview\",{\"1\":{\"908\":2}}],[\"readvalue\",{\"1\":{\"105\":1}}],[\"readme\",{\"1\":{\"594\":1,\"985\":1,\"1161\":1}}],[\"readtimeout\",{\"1\":{\"577\":1}}],[\"readtree\",{\"1\":{\"105\":1}}],[\"ready\",{\"1\":{\"473\":1}}],[\"readlock\",{\"1\":{\"326\":2}}],[\"read\",{\"1\":{\"80\":1,\"125\":1,\"176\":1,\"178\":1,\"257\":2,\"462\":1,\"540\":1,\"577\":1,\"711\":1,\"712\":3,\"857\":1,\"876\":1,\"905\":18,\"906\":4,\"927\":1,\"928\":2,\"929\":1,\"934\":5,\"935\":1,\"1005\":2,\"1084\":1}}],[\"readonly=true\",{\"1\":{\"927\":1}}],[\"readonly=\",{\"1\":{\"448\":1}}],[\"readonly\",{\"1\":{\"61\":1,\"448\":1,\"927\":4}}],[\"real\",{\"1\":{\"71\":1,\"810\":1}}],[\"refs\",{\"1\":{\"987\":1}}],[\"reflect\",{\"1\":{\"688\":1}}],[\"reflectorfactory\",{\"1\":{\"400\":1}}],[\"refid=\",{\"1\":{\"437\":1,\"440\":1,\"878\":2}}],[\"ref=\",{\"1\":{\"234\":1,\"462\":5}}],[\"refresh=true\",{\"1\":{\"598\":3}}],[\"refreshscope\",{\"1\":{\"598\":1}}],[\"refreshtoken的意义是什么呢\",{\"1\":{\"70\":1}}],[\"refreshtoken一般是一天一周这种只要你中途打开页面就又续期了\",{\"1\":{\"70\":1}}],[\"refreshtoken\",{\"1\":{\"67\":1,\"69\":1}}],[\"refresh\",{\"1\":{\"63\":1,\"70\":1,\"594\":1,\"890\":1}}],[\"ref\",{\"1\":{\"60\":1,\"234\":1,\"660\":2,\"1005\":1}}],[\"referencequeue\",{\"1\":{\"660\":1}}],[\"reference\",{\"1\":{\"60\":1,\"477\":1,\"567\":1,\"636\":1,\"660\":4}}],[\"referer提供访问来源的信息\",{\"1\":{\"46\":1}}],[\"referrer\",{\"1\":{\"46\":1}}],[\"bz\",{\"1\":{\"1081\":1}}],[\"b=\",{\"1\":{\"1005\":1}}],[\"b=creater2\",{\"1\":{\"763\":1}}],[\"btree\",{\"1\":{\"936\":1}}],[\"b不一定能用上索引\",{\"1\":{\"923\":1}}],[\"b断了\",{\"1\":{\"923\":1}}],[\"b中间断了\",{\"1\":{\"923\":1}}],[\"b>4\",{\"1\":{\"923\":1}}],[\"b树属于多叉树又名平衡多路查找树\",{\"1\":{\"916\":1}}],[\"b树和平衡二叉树不同\",{\"1\":{\"916\":1}}],[\"b+\",{\"1\":{\"917\":4,\"918\":2,\"919\":2,\"923\":1}}],[\"b+tree这种多叉树\",{\"1\":{\"916\":1}}],[\"b+树的叶子节点还能保持有序\",{\"1\":{\"972\":1}}],[\"b+树的非叶子节点不保存数据\",{\"1\":{\"916\":1}}],[\"b+树尾部\",{\"1\":{\"972\":1}}],[\"b+树难道是\",{\"1\":{\"916\":1}}],[\"b+树叶子节点保存了父节点的所有关键字记录的指针\",{\"1\":{\"916\":1}}],[\"b+树作为索引结构\",{\"1\":{\"913\":1}}],[\"b+0\",{\"1\":{\"685\":1}}],[\"b07\",{\"1\":{\"800\":1}}],[\"bbs\",{\"1\":{\"960\":1}}],[\"bb\",{\"1\":{\"723\":1,\"921\":1}}],[\"b阻塞\",{\"1\":{\"693\":1}}],[\"b都是new\",{\"1\":{\"686\":1}}],[\"b6=b4+b5\",{\"1\":{\"662\":1}}],[\"b5=6\",{\"1\":{\"662\":1}}],[\"b4=4\",{\"1\":{\"662\":1}}],[\"bm\",{\"1\":{\"658\":1}}],[\"b以及调用a的大量堆积\",{\"1\":{\"603\":1}}],[\"bdcb\",{\"1\":{\"598\":1}}],[\"b7f3\",{\"1\":{\"598\":1}}],[\"b17f24ff026d40949c85a24f4f375d42\",{\"1\":{\"587\":1}}],[\"bpdev\",{\"1\":{\"546\":1}}],[\"bpxcyyassgs9sf2vxauc\",{\"1\":{\"133\":2}}],[\"bv1wa4y1477d\",{\"1\":{\"543\":1,\"1081\":1}}],[\"bv1cd4y1q7vm\",{\"1\":{\"543\":1,\"1081\":1}}],[\"bv1ke411x7v4\",{\"1\":{\"69\":1}}],[\"bname\",{\"1\":{\"487\":5}}],[\"blur\",{\"1\":{\"879\":1}}],[\"blue在发出下游请求之前\",{\"1\":{\"591\":1}}],[\"blue\",{\"1\":{\"220\":1,\"591\":1,\"1017\":2}}],[\"block\",{\"1\":{\"1005\":3}}],[\"blocking\",{\"0\":{\"711\":1,\"712\":1}}],[\"blockb\",{\"1\":{\"658\":1}}],[\"blockablockbblocka\",{\"1\":{\"658\":1}}],[\"blocka\",{\"1\":{\"658\":1}}],[\"blocked>\",{\"1\":{\"1013\":2}}],[\"blocked\",{\"1\":{\"362\":1,\"600\":1,\"604\":1,\"928\":1}}],[\"blob\",{\"1\":{\"594\":1,\"969\":1}}],[\"blog文章加密方式\",{\"1\":{\"1084\":1}}],[\"blog等库\",{\"1\":{\"960\":1}}],[\"blog\",{\"1\":{\"105\":1,\"124\":1,\"238\":1,\"348\":1,\"398\":1,\"539\":1,\"553\":1,\"554\":1,\"594\":1,\"691\":1,\"787\":4,\"796\":8,\"799\":2,\"800\":5,\"865\":1,\"959\":1,\"985\":1,\"994\":1}}],[\"b2\",{\"1\":{\"923\":1}}],[\"b2c\",{\"0\":{\"206\":1},\"1\":{\"204\":1,\"206\":1}}],[\"b2b\",{\"0\":{\"205\":1},\"1\":{\"204\":1,\"205\":1}}],[\"b方法加了\",{\"1\":{\"182\":1}}],[\"bun\",{\"1\":{\"1005\":12}}],[\"bundles<\",{\"1\":{\"458\":1}}],[\"buddy\",{\"1\":{\"1003\":1}}],[\"buy\",{\"1\":{\"955\":1}}],[\"buybook\",{\"1\":{\"178\":1}}],[\"bucket\",{\"1\":{\"1084\":1}}],[\"buckets\",{\"1\":{\"796\":1}}],[\"bucket中链表长度大于该默认值\",{\"1\":{\"703\":1}}],[\"bufferedimage\",{\"1\":{\"877\":2}}],[\"buffer\",{\"1\":{\"712\":1}}],[\"bus消费自己需要的event就行\",{\"1\":{\"612\":1}}],[\"bus需要在\",{\"1\":{\"596\":1}}],[\"bus目前支持rabbitmq和kafka\",{\"1\":{\"594\":1}}],[\"bus\",{\"0\":{\"596\":1},\"1\":{\"591\":1,\"594\":2,\"598\":1}}],[\"business\",{\"1\":{\"205\":2,\"206\":1}}],[\"but\",{\"1\":{\"483\":1,\"937\":1}}],[\"buttoncounter\",{\"1\":{\"221\":2}}],[\"button\",{\"1\":{\"221\":2}}],[\"button>`\",{\"1\":{\"221\":2}}],[\"button>\",{\"1\":{\"220\":2,\"221\":1}}],[\"bug业务场景\",{\"1\":{\"844\":1}}],[\"bug重现\",{\"1\":{\"844\":1}}],[\"bug\",{\"1\":{\"186\":1,\"713\":1,\"844\":1}}],[\"building\",{\"1\":{\"1009\":1}}],[\"buildtemplatefromargs\",{\"1\":{\"580\":1}}],[\"builder\",{\"0\":{\"513\":1},\"1\":{\"513\":1}}],[\"build>\",{\"1\":{\"397\":1}}],[\"build\",{\"1\":{\"107\":1,\"222\":2,\"229\":1,\"402\":1,\"473\":1,\"796\":1,\"994\":2}}],[\"b处理feign请求时判断此唯一id是否已处理\",{\"1\":{\"174\":1}}],[\"boss\",{\"1\":{\"1128\":1}}],[\"bourne\",{\"1\":{\"1037\":1}}],[\"bound\",{\"1\":{\"868\":1}}],[\"bounds\",{\"1\":{\"362\":1}}],[\"bobplugin\",{\"1\":{\"1005\":1}}],[\"bob\",{\"1\":{\"1003\":1,\"1005\":2}}],[\"bonus\",{\"1\":{\"939\":1}}],[\"body\",{\"1\":{\"520\":1}}],[\"body>\",{\"1\":{\"220\":3,\"221\":1}}],[\"border\",{\"1\":{\"220\":2}}],[\"bookmarks\",{\"1\":{\"1005\":2,\"1006\":1}}],[\"book\",{\"0\":{\"1075\":1},\"1\":{\"487\":3}}],[\"bookshopservice\",{\"1\":{\"178\":1,\"179\":1}}],[\"bool\",{\"1\":{\"277\":1,\"278\":1,\"998\":2,\"1006\":1}}],[\"bool把各种其它查询通过must\",{\"1\":{\"277\":1}}],[\"bool用来做复合查询\",{\"0\":{\"277\":1}}],[\"booleanutil\",{\"1\":{\"876\":2}}],[\"boolean\",{\"1\":{\"157\":1,\"295\":1,\"317\":1,\"647\":1,\"686\":1,\"688\":1,\"770\":4,\"837\":3,\"850\":1,\"851\":1,\"876\":1}}],[\"boot仍然能够正确地加载和使用mybatis\",{\"1\":{\"1012\":1}}],[\"boot的自动配置和依赖解析\",{\"1\":{\"1012\":1}}],[\"boot的配置中进行相应的设置\",{\"1\":{\"60\":1}}],[\"boot应用程序进行了特殊处理\",{\"1\":{\"1012\":1}}],[\"boot应用程序同时拥有application\",{\"1\":{\"543\":1}}],[\"boot整合rabbitmq\",{\"0\":{\"826\":1}}],[\"boot自动配置\",{\"0\":{\"821\":1}}],[\"boot多服务项目不显示service窗口\",{\"0\":{\"610\":1}}],[\"boot一启动就要给容器中加载的所有配置类\",{\"1\":{\"483\":1}}],[\"bootstrap属性有高优先级\",{\"1\":{\"593\":1}}],[\"bootstrapcontext负责从外部源加载配置属性并解析配置\",{\"1\":{\"593\":1}}],[\"bootstrap\",{\"1\":{\"382\":1,\"543\":4,\"593\":6,\"597\":2,\"598\":2,\"679\":1}}],[\"boot<\",{\"1\":{\"238\":1,\"476\":2,\"477\":1,\"492\":1,\"546\":3,\"556\":1,\"828\":1,\"1010\":1}}],[\"boot可以非常简单的实现跨域访问\",{\"1\":{\"231\":1}}],[\"boot\",{\"0\":{\"727\":1,\"729\":1,\"730\":1},\"1\":{\"125\":1,\"178\":2,\"179\":1,\"227\":1,\"238\":3,\"239\":1,\"468\":1,\"473\":1,\"476\":3,\"477\":7,\"478\":1,\"481\":3,\"482\":2,\"483\":1,\"492\":1,\"509\":1,\"517\":1,\"522\":4,\"523\":2,\"528\":1,\"537\":1,\"543\":1,\"546\":7,\"554\":1,\"556\":3,\"559\":6,\"567\":2,\"691\":1,\"727\":4,\"729\":1,\"731\":1,\"828\":2,\"871\":1,\"1009\":1,\"1010\":7,\"1012\":12,\"1081\":1,\"1166\":4}}],[\"boot项目中只需要引入对应的amqp启动器依赖即可\",{\"1\":{\"827\":1}}],[\"boot项目中\",{\"1\":{\"105\":1}}],[\"boot默认情况下是区分路径的大小写的\",{\"1\":{\"60\":1}}],[\"boot中\",{\"1\":{\"60\":1}}],[\"bokedee的bat就能直接做成服务\",{\"1\":{\"1041\":1}}],[\"bokeerp路径去拿这个pom文件\",{\"1\":{\"1009\":1}}],[\"bokesoft\",{\"1\":{\"787\":3,\"1013\":2}}],[\"boke\",{\"1\":{\"105\":1,\"887\":1,\"993\":1}}],[\"by开头的\",{\"1\":{\"959\":1}}],[\"by子句将数据按照第一列进行分组\",{\"1\":{\"959\":1}}],[\"by非最左\",{\"1\":{\"923\":1}}],[\"by不会用索引explain的type为all\",{\"1\":{\"923\":1}}],[\"bytearrayinputstream包含一个内部缓冲区\",{\"1\":{\"688\":1}}],[\"bytes\",{\"1\":{\"687\":2}}],[\"byte\",{\"1\":{\"647\":1,\"648\":3,\"662\":1,\"671\":2,\"685\":1,\"686\":1,\"687\":1,\"702\":1}}],[\"bytecode\",{\"1\":{\"494\":1,\"634\":1}}],[\"by\",{\"0\":{\"946\":1},\"1\":{\"88\":1,\"156\":1,\"362\":1,\"411\":1,\"600\":1,\"604\":1,\"792\":1,\"793\":1,\"802\":2,\"803\":1,\"868\":2,\"925\":3,\"943\":1,\"946\":1,\"947\":1,\"949\":1,\"953\":2,\"954\":1,\"955\":1,\"959\":13,\"963\":2,\"1006\":2}}],[\"bigint不要用\",{\"1\":{\"959\":1}}],[\"bigint\",{\"1\":{\"918\":1}}],[\"biconsumer<t\",{\"1\":{\"770\":1}}],[\"bipredicate<t\",{\"1\":{\"770\":1}}],[\"bifunction<t\",{\"1\":{\"748\":1,\"770\":1}}],[\"bio\",{\"0\":{\"711\":1},\"1\":{\"711\":2,\"713\":1}}],[\"bios输入5次错误密码后会出提示码用提示码逆向算出密码\",{\"1\":{\"1160\":1}}],[\"bios\",{\"1\":{\"76\":1,\"1160\":1}}],[\"bitmap也可以简单理解为是一个数组\",{\"1\":{\"866\":1}}],[\"bit\",{\"1\":{\"681\":1}}],[\"bingo\",{\"1\":{\"897\":1,\"1012\":1}}],[\"binaryoperator<t>\",{\"1\":{\"770\":1}}],[\"binarysearch\",{\"1\":{\"672\":1}}],[\"binding写单元测试\",{\"1\":{\"829\":1}}],[\"binding\",{\"1\":{\"823\":3,\"829\":1}}],[\"bindingresult\",{\"1\":{\"130\":1,\"240\":2}}],[\"bind\",{\"0\":{\"439\":1},\"1\":{\"213\":1,\"220\":3,\"438\":1,\"853\":1}}],[\"bin\",{\"1\":{\"210\":4,\"211\":1,\"212\":2,\"688\":1,\"782\":1,\"789\":1,\"790\":1,\"800\":1,\"1003\":1,\"1005\":2}}],[\"binlog\",{\"0\":{\"900\":1},\"1\":{\"119\":1,\"898\":2,\"899\":6,\"900\":11,\"901\":18,\"902\":7,\"927\":1,\"929\":1}}],[\"bilibili\",{\"1\":{\"69\":1,\"543\":2,\"1081\":2}}],[\"b\",{\"1\":{\"68\":1,\"179\":6,\"182\":1,\"249\":1,\"294\":5,\"302\":1,\"309\":1,\"321\":5,\"352\":2,\"388\":4,\"486\":1,\"487\":1,\"540\":1,\"543\":4,\"647\":1,\"648\":1,\"655\":1,\"656\":1,\"657\":1,\"658\":7,\"671\":1,\"685\":2,\"686\":4,\"687\":1,\"688\":3,\"691\":6,\"693\":7,\"694\":23,\"697\":2,\"715\":4,\"721\":2,\"725\":1,\"751\":2,\"752\":2,\"754\":2,\"758\":2,\"760\":2,\"897\":1,\"905\":4,\"906\":2,\"923\":27,\"925\":10,\"928\":1,\"930\":1,\"931\":6,\"932\":4,\"933\":9,\"934\":3,\"935\":1,\"937\":1,\"959\":4,\"961\":1,\"990\":1,\"1005\":1,\"1020\":2}}],[\"bcryptpasswordencoder存密码\",{\"1\":{\"134\":1}}],[\"bcryptpasswordencoder\",{\"1\":{\"133\":2,\"625\":1}}],[\"bc\",{\"1\":{\"47\":1}}],[\"b9i2ulngegxg\",{\"1\":{\"1008\":1}}],[\"b9\",{\"1\":{\"47\":1}}],[\"bf\",{\"1\":{\"47\":1}}],[\"break\",{\"1\":{\"1038\":1}}],[\"brew\",{\"1\":{\"1003\":2,\"1005\":2}}],[\"br=\",{\"1\":{\"1005\":1}}],[\"bridge\",{\"1\":{\"716\":1}}],[\"branches\",{\"1\":{\"994\":1}}],[\"branch\",{\"1\":{\"608\":1,\"987\":2,\"988\":2,\"989\":1,\"1005\":4}}],[\"brandentity\",{\"1\":{\"240\":1}}],[\"brandid\",{\"1\":{\"236\":1}}],[\"brand\",{\"1\":{\"47\":1,\"236\":6,\"240\":1}}],[\"broker\",{\"1\":{\"816\":1,\"823\":1,\"824\":5,\"835\":1}}],[\"brokenbarrierexception\",{\"1\":{\"338\":1}}],[\"browser\",{\"1\":{\"1006\":1}}],[\"browsed\",{\"1\":{\"283\":1}}],[\"brown\",{\"1\":{\"281\":1}}],[\"br\",{\"1\":{\"47\":1,\"1005\":2}}],[\"backtab\",{\"1\":{\"1005\":1}}],[\"backup\",{\"1\":{\"799\":1}}],[\"bat等大厂每年会有两次招聘\",{\"1\":{\"1150\":1}}],[\"bat都是新open一个黑底白字的cmd\",{\"1\":{\"1041\":1}}],[\"bat\",{\"1\":{\"1003\":1,\"1041\":3}}],[\"battery\",{\"1\":{\"1003\":1}}],[\"batch就需导入相关包才生效\",{\"1\":{\"483\":1}}],[\"batch\",{\"1\":{\"462\":1}}],[\"bak\",{\"1\":{\"1001\":1}}],[\"balancing\",{\"1\":{\"591\":1}}],[\"balance\",{\"1\":{\"182\":1,\"278\":1}}],[\"bauthor\",{\"1\":{\"487\":1}}],[\"bank\",{\"1\":{\"274\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"279\":1}}],[\"bad\",{\"1\":{\"239\":1}}],[\"babellrc\",{\"1\":{\"222\":1}}],[\"babel\",{\"1\":{\"215\":1}}],[\"baidu\",{\"0\":{\"1040\":1,\"1041\":1},\"1\":{\"63\":2,\"220\":1,\"1005\":2,\"1041\":1}}],[\"basis\",{\"1\":{\"302\":1,\"724\":1,\"740\":1}}],[\"basic插件实现\",{\"1\":{\"1158\":1}}],[\"basicreject\",{\"1\":{\"837\":1}}],[\"basicnack\",{\"1\":{\"837\":1}}],[\"basicack\",{\"1\":{\"837\":2}}],[\"basically\",{\"1\":{\"572\":1}}],[\"basic\",{\"0\":{\"203\":1},\"1\":{\"724\":1,\"1158\":1}}],[\"basics\",{\"1\":{\"47\":1}}],[\"bash\",{\"1\":{\"210\":4,\"211\":1,\"212\":2,\"782\":1,\"789\":2,\"790\":3,\"791\":1,\"794\":1,\"986\":1,\"1003\":1,\"1005\":1}}],[\"baseurl\",{\"0\":{\"880\":1},\"1\":{\"880\":1}}],[\"basename为空\",{\"1\":{\"697\":1}}],[\"base是a的解决方案吗\",{\"1\":{\"571\":1}}],[\"based\",{\"1\":{\"473\":1,\"630\":1}}],[\"basepackage\",{\"1\":{\"462\":1}}],[\"basemapper<t>\",{\"1\":{\"229\":1}}],[\"basemapper\",{\"1\":{\"229\":5}}],[\"base\",{\"1\":{\"183\":3,\"229\":1,\"460\":1,\"462\":1,\"571\":3,\"572\":2,\"594\":1,\"697\":1,\"880\":2,\"883\":2,\"998\":2,\"1005\":2}}],[\"base64是编码而已\",{\"1\":{\"131\":1}}],[\"base64\",{\"0\":{\"58\":1},\"1\":{\"58\":1,\"131\":1,\"879\":1,\"981\":1,\"1081\":5}}],[\"baz\",{\"0\":{\"40\":1},\"1\":{\"35\":1,\"39\":1}}],[\"bartender\",{\"1\":{\"1003\":1}}],[\"barrier指令重排序\",{\"1\":{\"296\":1}}],[\"barrier则会告诉编译器和cpu\",{\"1\":{\"296\":1}}],[\"barrier\",{\"1\":{\"296\":1,\"337\":1,\"339\":2}}],[\"bar\",{\"0\":{\"35\":1,\"37\":1},\"1\":{\"38\":1,\"69\":1,\"1005\":1}}],[\"between\",{\"0\":{\"957\":1},\"1\":{\"921\":1,\"922\":1,\"951\":1}}],[\"best\",{\"1\":{\"687\":1}}],[\"bea4\",{\"1\":{\"587\":1}}],[\"beantomap\",{\"1\":{\"876\":2}}],[\"beanutil\",{\"1\":{\"876\":5}}],[\"beanutils\",{\"1\":{\"252\":2,\"876\":1}}],[\"bean启动时不会马上创建\",{\"1\":{\"829\":1}}],[\"bean声明属性发生变化也不会覆盖\",{\"1\":{\"829\":1}}],[\"bean这个注解去声明需要装配到ioc容器里面的bean对象\",{\"1\":{\"731\":1}}],[\"bean到spring容器不行吗\",{\"1\":{\"625\":1}}],[\"bean的加载顺序\",{\"1\":{\"517\":1}}],[\"bean的生命周期\",{\"1\":{\"466\":1}}],[\"bean标注在方法上给容器注册组件\",{\"1\":{\"504\":1}}],[\"bean标注的方法传入了对象参数\",{\"1\":{\"483\":1}}],[\"beanpostprocessor\",{\"1\":{\"489\":1}}],[\"beanlife\",{\"1\":{\"489\":3}}],[\"bean生命周期\",{\"0\":{\"489\":1}}],[\"bean管理就是两个操作\",{\"1\":{\"487\":1}}],[\"beanfactory\",{\"1\":{\"486\":1,\"498\":1}}],[\"beanfactory是低级容器\",{\"1\":{\"486\":1}}],[\"beanfactory和applicationcontext\",{\"1\":{\"486\":1}}],[\"beanfactory接口的子接口\",{\"1\":{\"486\":1}}],[\"beanfactory接口\",{\"1\":{\"486\":1}}],[\"bean替换底层的组件\",{\"1\":{\"485\":1}}],[\"bean>\",{\"1\":{\"460\":1,\"462\":5,\"487\":1,\"489\":1}}],[\"beans的是\",{\"1\":{\"876\":1}}],[\"beansexception\",{\"1\":{\"538\":1,\"1082\":1}}],[\"beans>\",{\"1\":{\"460\":1,\"462\":1}}],[\"beans\",{\"0\":{\"518\":1},\"1\":{\"460\":4,\"462\":4,\"480\":1,\"486\":1,\"489\":1}}],[\"bean解决\",{\"1\":{\"148\":1}}],[\"bean注解的方法参数中\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"bean注解想容器注入对象的时候\",{\"1\":{\"125\":1,\"514\":1,\"532\":1}}],[\"bean操作了下启动时才进来的\",{\"1\":{\"124\":1}}],[\"bean\",{\"0\":{\"148\":1,\"514\":1},\"1\":{\"124\":2,\"125\":2,\"231\":1,\"369\":1,\"400\":1,\"404\":1,\"419\":1,\"427\":1,\"429\":2,\"430\":1,\"432\":1,\"433\":1,\"436\":1,\"438\":1,\"464\":1,\"465\":1,\"482\":2,\"483\":2,\"489\":12,\"498\":2,\"509\":1,\"514\":2,\"517\":4,\"529\":1,\"532\":2,\"538\":2,\"543\":44,\"545\":1,\"551\":1,\"566\":1,\"576\":1,\"578\":1,\"625\":5,\"829\":2,\"867\":1,\"884\":3,\"1082\":2,\"1097\":3}}],[\"bean没变动不会重新去读\",{\"1\":{\"123\":1}}],[\"bean加载配置\",{\"1\":{\"123\":1}}],[\"bean是项目启动时候加载进来的\",{\"1\":{\"123\":1}}],[\"because\",{\"1\":{\"362\":1,\"961\":1}}],[\"beforeeach\",{\"1\":{\"530\":1}}],[\"before\",{\"1\":{\"362\":2,\"492\":2,\"495\":3,\"887\":2,\"1005\":1}}],[\"beforedestroy\",{\"1\":{\"225\":1}}],[\"beforeupdate\",{\"1\":{\"225\":1}}],[\"beforemount\",{\"1\":{\"225\":1}}],[\"beforecreate\",{\"1\":{\"225\":1}}],[\"begin\",{\"1\":{\"169\":1,\"374\":1,\"907\":4,\"908\":1,\"929\":1,\"934\":2}}],[\"be\",{\"1\":{\"27\":1,\"1005\":1,\"1020\":4}}],[\"+ossobjectname\",{\"1\":{\"1084\":1}}],[\"+md5value+\",{\"1\":{\"1084\":8}}],[\"+message\",{\"1\":{\"240\":1}}],[\"+=\",{\"1\":{\"780\":5}}],[\"+wives1\",{\"1\":{\"776\":1}}],[\"+list\",{\"1\":{\"765\":2}}],[\"+lastname+\",{\"1\":{\"438\":1}}],[\"+ret3\",{\"1\":{\"752\":1}}],[\"+ret2\",{\"1\":{\"752\":1}}],[\"+ret\",{\"1\":{\"752\":1}}],[\"+res+\",{\"1\":{\"374\":1}}],[\"+null+\",{\"1\":{\"959\":1}}],[\"+n\",{\"1\":{\"752\":1}}],[\"+name\",{\"1\":{\"492\":1}}],[\"+s\",{\"1\":{\"721\":2}}],[\"+∞\",{\"1\":{\"688\":2}}],[\"+d\",{\"1\":{\"685\":1}}],[\"+data\",{\"1\":{\"229\":1}}],[\"+++++\",{\"1\":{\"923\":1}}],[\"++i\",{\"1\":{\"778\":1,\"1085\":1}}],[\"++\",{\"0\":{\"670\":1},\"1\":{\"670\":1,\"685\":1}}],[\"+2\",{\"1\":{\"606\":1}}],[\"+形参entity上\",{\"1\":{\"502\":1}}],[\"+v\",{\"1\":{\"415\":1}}],[\"+k+\",{\"1\":{\"415\":1}}],[\"+useconcmarksweepgc\",{\"1\":{\"383\":1}}],[\"+exception\",{\"1\":{\"374\":1}}],[\"+gc\",{\"0\":{\"283\":1}}],[\"+bindingresult\",{\"1\":{\"240\":1}}],[\"+业务实践\",{\"1\":{\"183\":1}}],[\"+对比成功删除\",{\"1\":{\"111\":1}}],[\"+\",{\"0\":{\"85\":2,\"221\":1,\"302\":1,\"304\":1,\"1017\":1,\"1034\":1,\"1036\":1,\"1042\":2,\"1043\":1,\"1065\":2,\"1067\":2,\"1068\":3,\"1069\":1,\"1070\":1,\"1071\":2,\"1072\":1},\"1\":{\"30\":1,\"62\":4,\"67\":1,\"76\":1,\"87\":1,\"109\":1,\"115\":1,\"126\":1,\"128\":2,\"156\":1,\"170\":1,\"198\":2,\"202\":2,\"215\":1,\"216\":2,\"220\":1,\"229\":1,\"250\":1,\"293\":1,\"295\":7,\"302\":1,\"305\":2,\"309\":1,\"310\":4,\"334\":2,\"335\":2,\"338\":3,\"339\":3,\"343\":2,\"352\":13,\"354\":1,\"374\":2,\"385\":1,\"388\":2,\"403\":1,\"429\":1,\"496\":1,\"503\":1,\"554\":1,\"565\":1,\"572\":3,\"573\":1,\"576\":1,\"585\":1,\"591\":1,\"594\":6,\"613\":1,\"614\":1,\"646\":1,\"648\":10,\"685\":3,\"687\":3,\"688\":3,\"689\":1,\"691\":3,\"694\":28,\"720\":1,\"724\":1,\"725\":7,\"737\":1,\"740\":3,\"752\":1,\"776\":1,\"778\":4,\"780\":5,\"787\":1,\"790\":1,\"800\":1,\"836\":17,\"857\":1,\"879\":1,\"883\":1,\"887\":1,\"889\":2,\"905\":9,\"906\":3,\"935\":1,\"959\":1,\"996\":1,\"1005\":8,\"1006\":2,\"1019\":2,\"1037\":1,\"1038\":1,\"1080\":1,\"1081\":1,\"1084\":3,\"1085\":7,\"1103\":2,\"1108\":3,\"1126\":1,\"1144\":2,\"1150\":2}}],[\"日常开发中也有可能会用到\",{\"1\":{\"902\":1}}],[\"日本人发明\",{\"0\":{\"524\":1}}],[\"日志只能用于归档\",{\"1\":{\"900\":1}}],[\"日志存放目录\",{\"1\":{\"795\":1}}],[\"日志系统密切相关的\",{\"1\":{\"902\":1}}],[\"日志系统中\",{\"1\":{\"736\":3}}],[\"日志系统架构\",{\"1\":{\"736\":1}}],[\"日志量不大的时候\",{\"1\":{\"734\":1}}],[\"日志复制\",{\"1\":{\"572\":1}}],[\"日志记录\",{\"1\":{\"495\":1}}],[\"日志记录等\",{\"1\":{\"156\":1}}],[\"日志\",{\"0\":{\"884\":1},\"1\":{\"458\":1,\"464\":1}}],[\"日志就是最好的助手\",{\"1\":{\"399\":1}}],[\"日志搜索\",{\"1\":{\"263\":1}}],[\"日和周的位置至少有个\",{\"1\":{\"201\":1}}],[\"日期也可以between\",{\"1\":{\"951\":1}}],[\"日期类型自己看api学\",{\"1\":{\"687\":1}}],[\"日期\",{\"1\":{\"48\":1}}],[\"日\",{\"1\":{\"28\":1,\"201\":1}}],[\"月计划\",{\"1\":{\"1142\":1}}],[\"月薪\",{\"0\":{\"1107\":1},\"1\":{\"1105\":1}}],[\"月迁移到\",{\"1\":{\"393\":1}}],[\"月\",{\"1\":{\"28\":1,\"201\":1}}],[\"年龄的增长其实不是那么可怕\",{\"1\":{\"1139\":1}}],[\"年龄就增加1岁\",{\"1\":{\"385\":1}}],[\"年底最差\",{\"1\":{\"1129\":1}}],[\"年某个城市的所有人口信息\",{\"1\":{\"915\":1}}],[\"年这个项目由\",{\"1\":{\"393\":1}}],[\"年轻代\",{\"1\":{\"385\":1}}],[\"年\",{\"1\":{\"28\":1,\"201\":1,\"393\":1}}],[\"p8\",{\"1\":{\"1112\":1}}],[\"p5\",{\"1\":{\"1112\":1}}],[\"pgdown\",{\"1\":{\"1005\":1}}],[\"pgup\",{\"1\":{\"1005\":1}}],[\"pfd\",{\"1\":{\"1005\":2}}],[\"pnpm\",{\"1\":{\"994\":5,\"1003\":1,\"1005\":4}}],[\"png\",{\"1\":{\"540\":1,\"677\":1,\"706\":1,\"1084\":2}}],[\"png文件\",{\"1\":{\"73\":2}}],[\"png时\",{\"1\":{\"73\":2}}],[\"pt\",{\"1\":{\"908\":1,\"976\":1}}],[\"ptr\",{\"1\":{\"908\":1}}],[\"pts\",{\"1\":{\"784\":3}}],[\"p$port\",{\"1\":{\"893\":1}}],[\"pkill\",{\"1\":{\"782\":2}}],[\"pxxx\",{\"1\":{\"800\":1}}],[\"px\",{\"1\":{\"686\":2,\"851\":1,\"1022\":1}}],[\"pc\",{\"1\":{\"664\":1,\"778\":1}}],[\"pc寄存器\",{\"0\":{\"664\":1}}],[\"p366\",{\"1\":{\"649\":1}}],[\"p2\",{\"1\":{\"687\":2}}],[\"p290避个坑\",{\"1\":{\"608\":1}}],[\"p28\",{\"1\":{\"261\":1}}],[\"p=3\",{\"1\":{\"543\":1,\"1081\":1}}],[\"python\",{\"1\":{\"706\":1,\"1144\":1,\"1150\":2}}],[\"py\",{\"1\":{\"540\":1,\"1005\":1}}],[\"pwd=cnk4\",{\"1\":{\"868\":1}}],[\"pwd\",{\"1\":{\"408\":2}}],[\"pd6doxamqfuhfaunohnwtw\",{\"1\":{\"330\":1}}],[\"pdf\",{\"0\":{\"491\":1},\"1\":{\"102\":1,\"158\":1,\"183\":1,\"605\":1,\"607\":1,\"1003\":1,\"1126\":3}}],[\"p44跳过\",{\"1\":{\"261\":1}}],[\"pms\",{\"1\":{\"236\":1,\"257\":1}}],[\"p1\",{\"1\":{\"687\":2,\"688\":2}}],[\"p100之前的内容属于当前java后端能找到工作的最基本水平\",{\"1\":{\"261\":1}}],[\"p17没法搭起来的建议照着rerenfast的github上的教程搭\",{\"1\":{\"261\":1}}],[\"p16\",{\"1\":{\"261\":1}}],[\"p123456\",{\"1\":{\"212\":2}}],[\"p133第4分钟\",{\"1\":{\"125\":1}}],[\"p指定端口映射\",{\"1\":{\"210\":1}}],[\"pseudo\",{\"1\":{\"790\":1}}],[\"ps\",{\"0\":{\"887\":1},\"1\":{\"161\":1,\"176\":1,\"210\":2,\"211\":2,\"388\":1,\"400\":1,\"404\":1,\"465\":1,\"486\":1,\"492\":1,\"539\":1,\"543\":4,\"607\":1,\"612\":1,\"616\":1,\"620\":1,\"625\":1,\"627\":1,\"661\":1,\"683\":1,\"687\":1,\"688\":5,\"694\":1,\"706\":1,\"779\":1,\"782\":1,\"802\":1,\"805\":1,\"818\":1,\"823\":1,\"828\":1,\"908\":1,\"987\":1,\"996\":1,\"1081\":2}}],[\"push前先将远程repository修改pull下来\",{\"1\":{\"987\":1}}],[\"push的时候可以把\",{\"1\":{\"987\":1}}],[\"pushdown\",{\"1\":{\"924\":1}}],[\"push\",{\"1\":{\"799\":1,\"987\":6,\"994\":2,\"996\":1,\"1005\":9}}],[\"pub\",{\"1\":{\"797\":2,\"983\":2,\"986\":2,\"1005\":1}}],[\"publish\",{\"1\":{\"817\":1,\"849\":1}}],[\"publisher\",{\"1\":{\"543\":1,\"823\":1,\"832\":2,\"835\":3,\"1081\":1}}],[\"publishevent几次\",{\"1\":{\"543\":1,\"1081\":1}}],[\"publishevent\",{\"1\":{\"543\":5,\"1081\":5}}],[\"public类型的公共变量\",{\"1\":{\"156\":1}}],[\"public\",{\"1\":{\"29\":1,\"67\":1,\"92\":1,\"97\":3,\"124\":4,\"125\":2,\"128\":1,\"130\":1,\"133\":1,\"156\":2,\"157\":8,\"179\":5,\"182\":9,\"192\":1,\"202\":2,\"229\":3,\"240\":2,\"241\":2,\"252\":2,\"290\":3,\"293\":1,\"295\":3,\"301\":1,\"302\":1,\"317\":2,\"322\":2,\"335\":1,\"339\":1,\"343\":1,\"352\":5,\"361\":1,\"369\":1,\"370\":1,\"374\":1,\"388\":6,\"400\":1,\"402\":2,\"403\":1,\"415\":1,\"419\":2,\"427\":3,\"429\":1,\"430\":1,\"436\":1,\"437\":1,\"438\":1,\"443\":1,\"447\":1,\"464\":1,\"465\":1,\"483\":1,\"486\":2,\"487\":2,\"488\":1,\"489\":1,\"492\":7,\"495\":2,\"496\":1,\"502\":1,\"503\":1,\"511\":1,\"514\":1,\"520\":2,\"528\":1,\"529\":1,\"532\":1,\"534\":2,\"538\":3,\"543\":1,\"566\":1,\"576\":3,\"613\":1,\"624\":4,\"625\":2,\"632\":1,\"646\":1,\"650\":1,\"658\":14,\"661\":3,\"668\":1,\"680\":2,\"683\":2,\"686\":8,\"687\":3,\"688\":1,\"689\":2,\"691\":6,\"700\":1,\"715\":4,\"716\":6,\"718\":4,\"720\":4,\"721\":1,\"722\":1,\"723\":1,\"725\":2,\"730\":2,\"751\":6,\"752\":2,\"762\":2,\"763\":7,\"765\":2,\"766\":2,\"767\":2,\"768\":2,\"769\":2,\"770\":2,\"771\":4,\"779\":12,\"780\":3,\"796\":1,\"829\":1,\"830\":1,\"831\":3,\"836\":1,\"850\":3,\"851\":4,\"852\":5,\"876\":1,\"887\":2,\"890\":1,\"1005\":1,\"1019\":1,\"1081\":3,\"1082\":3,\"1085\":1,\"1097\":2}}],[\"pull将更为快捷\",{\"1\":{\"990\":1}}],[\"pull则是会获取所有远程索引并合并到本地分支中来\",{\"1\":{\"990\":1}}],[\"pull是git\",{\"1\":{\"990\":1}}],[\"pull\",{\"1\":{\"210\":2,\"213\":1,\"267\":3,\"790\":1,\"791\":1,\"794\":1,\"795\":1,\"796\":1,\"799\":1,\"987\":1,\"990\":2}}],[\"purchase方法将在一个新的事务b中执行\",{\"1\":{\"179\":1}}],[\"purchase\",{\"1\":{\"178\":2,\"179\":3}}],[\"putall\",{\"1\":{\"876\":1}}],[\"putfield\",{\"1\":{\"290\":1}}],[\"put\",{\"1\":{\"157\":1,\"271\":1,\"576\":2,\"594\":1,\"682\":4}}],[\"piefeng\",{\"1\":{\"1154\":1}}],[\"picture\",{\"1\":{\"1006\":2}}],[\"picker\",{\"1\":{\"1005\":1}}],[\"picketlink\",{\"1\":{\"153\":1}}],[\"pic\",{\"1\":{\"1005\":1}}],[\"pi=\",{\"1\":{\"1005\":1}}],[\"pid=$\",{\"1\":{\"1005\":1}}],[\"pid=developer\",{\"1\":{\"1001\":1}}],[\"pidfile\",{\"1\":{\"861\":1}}],[\"pid\",{\"1\":{\"782\":2,\"861\":1,\"1041\":4}}],[\"pixhqxvgguo\",{\"1\":{\"133\":2}}],[\"pinging\",{\"1\":{\"1005\":1}}],[\"ping\",{\"1\":{\"76\":1,\"1005\":1,\"1041\":1}}],[\"ping主机名得到的不是本机局域网ip\",{\"1\":{\"76\":1}}],[\"ping计算机名得到局域网ip\",{\"1\":{\"76\":2}}],[\"ping回复\",{\"1\":{\"76\":2}}],[\"ping请求\",{\"1\":{\"76\":2}}],[\"ping命令使用icmp协议来发送请求和接收回复\",{\"1\":{\"76\":1}}],[\"phantomreference\",{\"1\":{\"660\":1}}],[\"phantom\",{\"1\":{\"660\":1,\"905\":2}}],[\"phase\",{\"1\":{\"183\":1}}],[\"photo\",{\"1\":{\"512\":1}}],[\"phone\",{\"1\":{\"134\":1}}],[\"phonenum\",{\"1\":{\"128\":1}}],[\"phone=\",{\"1\":{\"128\":1}}],[\"phrase是做短语匹配\",{\"1\":{\"275\":1}}],[\"phrase和match的区别\",{\"1\":{\"275\":1}}],[\"phrase\",{\"0\":{\"275\":1},\"1\":{\"275\":1}}],[\"phpcopy\",{\"1\":{\"990\":2}}],[\"php\",{\"1\":{\"92\":1,\"823\":2}}],[\"preserve\",{\"1\":{\"1046\":1}}],[\"preferences\",{\"1\":{\"1006\":1}}],[\"prefix和spring\",{\"1\":{\"543\":2}}],[\"prefixoverrides=\",{\"1\":{\"432\":1}}],[\"prefix给拼串后的整个字符串加一个前缀\",{\"1\":{\"432\":1}}],[\"prefix=\",{\"1\":{\"432\":2,\"434\":1}}],[\"prefix\",{\"1\":{\"126\":1,\"128\":1,\"370\":1,\"460\":1,\"597\":1}}],[\"prefixkeyswith\",{\"1\":{\"125\":1}}],[\"prettier\",{\"1\":{\"1005\":1}}],[\"preview\",{\"1\":{\"1005\":2}}],[\"previous\",{\"1\":{\"1005\":1,\"1006\":1}}],[\"prevent\",{\"1\":{\"220\":1}}],[\"precheck\",{\"1\":{\"897\":1}}],[\"predatamap\",{\"1\":{\"889\":2}}],[\"predicate<t>\",{\"1\":{\"688\":1,\"748\":1,\"770\":2}}],[\"predicates\",{\"1\":{\"591\":5}}],[\"predicate\",{\"1\":{\"590\":3,\"591\":1,\"770\":1}}],[\"preauthorize\",{\"1\":{\"629\":1}}],[\"prepostenabled\",{\"1\":{\"629\":1}}],[\"preparation\",{\"1\":{\"679\":1}}],[\"prepare\",{\"1\":{\"609\":1,\"900\":2}}],[\"preparedstatement\",{\"1\":{\"411\":1}}],[\"preparedstatement=debug\",{\"1\":{\"399\":1,\"463\":1}}],[\"preparing\",{\"1\":{\"236\":1,\"430\":1,\"431\":1}}],[\"pre\",{\"1\":{\"229\":1}}],[\"prehandle\",{\"1\":{\"157\":1}}],[\"prehandle方法\",{\"1\":{\"543\":1}}],[\"prehandle方法是在请求发送之前被调用\",{\"1\":{\"157\":1}}],[\"prehandle方法可以拦截feign的请求\",{\"1\":{\"157\":1}}],[\"prehandle可以拦截fegin的请求吗\",{\"1\":{\"157\":1}}],[\"price\",{\"1\":{\"947\":3,\"955\":2}}],[\"primery\",{\"1\":{\"936\":1}}],[\"primary\",{\"1\":{\"269\":1,\"898\":1,\"917\":1,\"918\":1,\"919\":2,\"921\":1,\"922\":1,\"925\":1,\"934\":1}}],[\"priority\",{\"1\":{\"823\":1,\"865\":1}}],[\"privacy\",{\"1\":{\"1006\":1}}],[\"private\",{\"1\":{\"113\":1,\"124\":1,\"157\":2,\"229\":4,\"247\":1,\"301\":1,\"302\":2,\"326\":1,\"352\":5,\"371\":1,\"402\":1,\"421\":1,\"486\":1,\"487\":1,\"488\":1,\"492\":1,\"529\":1,\"534\":1,\"538\":1,\"543\":1,\"624\":1,\"647\":1,\"658\":4,\"683\":2,\"691\":2,\"700\":1,\"718\":1,\"720\":3,\"721\":1,\"730\":2,\"743\":1,\"762\":1,\"771\":1,\"779\":7,\"850\":2,\"851\":3,\"852\":1,\"877\":1,\"1081\":1,\"1082\":1,\"1101\":1}}],[\"privileges\",{\"1\":{\"793\":2,\"803\":2}}],[\"principles\",{\"1\":{\"731\":1}}],[\"principle\",{\"1\":{\"686\":1}}],[\"printf\",{\"1\":{\"1005\":1}}],[\"print方法在打印null前进行了处理\",{\"1\":{\"720\":1}}],[\"printstream\",{\"1\":{\"688\":1}}],[\"printstream中的void\",{\"1\":{\"688\":1}}],[\"printstacktrace\",{\"1\":{\"338\":2,\"339\":1,\"342\":1,\"343\":1,\"352\":3,\"402\":1,\"503\":1,\"632\":1,\"686\":1}}],[\"print\",{\"1\":{\"632\":1,\"687\":1,\"715\":2,\"720\":1,\"1084\":5,\"1095\":1}}],[\"print15\",{\"1\":{\"352\":2}}],[\"print10\",{\"1\":{\"352\":2}}],[\"print5\",{\"1\":{\"352\":2}}],[\"println\",{\"1\":{\"133\":3,\"295\":3,\"302\":1,\"310\":2,\"334\":2,\"335\":2,\"338\":2,\"339\":2,\"343\":2,\"352\":3,\"357\":1,\"374\":3,\"403\":2,\"415\":2,\"419\":1,\"427\":2,\"429\":1,\"430\":1,\"436\":1,\"443\":3,\"480\":1,\"517\":2,\"529\":1,\"647\":1,\"650\":1,\"653\":1,\"658\":15,\"670\":1,\"685\":2,\"686\":7,\"687\":2,\"688\":5,\"689\":2,\"691\":4,\"715\":1,\"716\":2,\"720\":1,\"721\":2,\"723\":3,\"724\":1,\"725\":3,\"750\":1,\"752\":7,\"754\":2,\"755\":2,\"756\":2,\"763\":2,\"765\":2,\"766\":1,\"767\":2,\"768\":1,\"769\":1,\"771\":4,\"775\":1,\"776\":2,\"778\":3,\"780\":5,\"836\":2,\"1019\":1}}],[\"projj\",{\"1\":{\"1005\":9}}],[\"projects\",{\"1\":{\"594\":1,\"1009\":1}}],[\"projectlombok<\",{\"1\":{\"397\":1,\"458\":1}}],[\"projectdemo\",{\"1\":{\"261\":2}}],[\"project\",{\"0\":{\"1184\":1},\"1\":{\"231\":1,\"261\":1,\"546\":1,\"1012\":1,\"1014\":1}}],[\"prompt\",{\"1\":{\"1005\":2}}],[\"promise\",{\"1\":{\"216\":3,\"372\":1,\"1005\":1}}],[\"proc\",{\"1\":{\"784\":3}}],[\"proceed\",{\"1\":{\"492\":1,\"496\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"492\":3,\"496\":3}}],[\"processon\",{\"1\":{\"1145\":1}}],[\"processor<\",{\"1\":{\"546\":3}}],[\"processlist\",{\"1\":{\"893\":4,\"977\":1}}],[\"process\",{\"1\":{\"210\":1,\"880\":1,\"883\":2}}],[\"profiling\",{\"1\":{\"635\":1}}],[\"profiler\",{\"1\":{\"1005\":1}}],[\"profile文件详解\",{\"1\":{\"800\":1}}],[\"profiles\",{\"1\":{\"543\":2,\"546\":2,\"547\":1,\"548\":2,\"597\":1,\"981\":1,\"1005\":1}}],[\"profile\",{\"1\":{\"543\":5,\"597\":1,\"800\":2,\"959\":2,\"1005\":1}}],[\"pro\",{\"1\":{\"598\":1,\"779\":3,\"1005\":1}}],[\"probability\",{\"1\":{\"594\":1}}],[\"programs\",{\"1\":{\"1037\":1}}],[\"program\",{\"0\":{\"548\":1},\"1\":{\"546\":2,\"548\":1,\"664\":1}}],[\"prod\",{\"1\":{\"543\":1,\"598\":1}}],[\"producer\",{\"1\":{\"835\":1,\"877\":2}}],[\"produces\",{\"1\":{\"515\":1}}],[\"products\",{\"1\":{\"946\":1,\"947\":3}}],[\"productstatusup\",{\"1\":{\"92\":1}}],[\"production\",{\"1\":{\"473\":2,\"880\":1}}],[\"productid\",{\"1\":{\"115\":1,\"959\":2}}],[\"product对应的主页模块没有\",{\"1\":{\"141\":1}}],[\"product\",{\"1\":{\"92\":1,\"94\":1,\"115\":3,\"125\":2,\"227\":1,\"236\":1,\"240\":1,\"244\":1,\"377\":1,\"591\":6,\"946\":2,\"947\":3}}],[\"providers\",{\"1\":{\"981\":2}}],[\"provider\",{\"0\":{\"566\":1},\"1\":{\"565\":1,\"566\":1,\"740\":2}}],[\"provide\",{\"1\":{\"473\":2}}],[\"prop\",{\"1\":{\"440\":1,\"505\":1}}],[\"property>\",{\"1\":{\"487\":2}}],[\"property=默认值\",{\"1\":{\"522\":1}}],[\"property=具体的值\",{\"1\":{\"522\":2}}],[\"property=\",{\"1\":{\"419\":4,\"421\":3,\"422\":8,\"423\":2,\"426\":8,\"427\":3,\"428\":1,\"429\":9}}],[\"property\",{\"1\":{\"419\":1,\"440\":1,\"462\":2,\"522\":5}}],[\"properties文件\",{\"1\":{\"543\":1}}],[\"properties文件的优先级高于application\",{\"1\":{\"543\":1}}],[\"properties配置文件时\",{\"1\":{\"543\":1}}],[\"properties配置文件\",{\"1\":{\"543\":1}}],[\"properties和application\",{\"1\":{\"543\":2}}],[\"properties>\",{\"1\":{\"476\":1}}],[\"properties放前3个常用的参数\",{\"1\":{\"369\":1}}],[\"properties\",{\"0\":{\"398\":1,\"399\":1,\"461\":1,\"463\":1},\"1\":{\"243\":1,\"369\":1,\"400\":3,\"462\":1,\"485\":2,\"489\":1,\"522\":4,\"543\":13,\"597\":3,\"688\":1,\"779\":3,\"796\":1,\"1080\":3}}],[\"properties或application\",{\"1\":{\"60\":1}}],[\"props\",{\"1\":{\"220\":4}}],[\"propagation=\",{\"1\":{\"179\":1}}],[\"propagation\",{\"1\":{\"177\":1,\"178\":5,\"179\":15}}],[\"protected\",{\"1\":{\"105\":1,\"157\":1,\"229\":1,\"853\":1,\"890\":1}}],[\"protocol\",{\"1\":{\"818\":1}}],[\"protocol=\",{\"1\":{\"48\":1}}],[\"prototype\",{\"1\":{\"80\":1,\"233\":2,\"504\":2}}],[\"proxy=socks5\",{\"1\":{\"1003\":1}}],[\"proxy=http\",{\"1\":{\"782\":1,\"1003\":2}}],[\"proxybeanmethods\",{\"0\":{\"517\":1}}],[\"proxying\",{\"1\":{\"494\":1}}],[\"proxymode\",{\"1\":{\"80\":1,\"504\":1}}],[\"proxy\",{\"0\":{\"882\":1},\"1\":{\"71\":5,\"72\":4,\"174\":1,\"179\":1,\"809\":1,\"810\":4,\"883\":4,\"981\":2}}],[\"pe重装系统\",{\"0\":{\"1026\":1}}],[\"peterwen\",{\"1\":{\"998\":1}}],[\"pee6w651\",{\"1\":{\"789\":1}}],[\"people\",{\"1\":{\"646\":1,\"687\":4,\"691\":6}}],[\"percona\",{\"1\":{\"908\":1}}],[\"permitallurl\",{\"1\":{\"889\":1}}],[\"permitallurlproperties\",{\"1\":{\"889\":1}}],[\"permitall\",{\"1\":{\"889\":2}}],[\"permanent\",{\"1\":{\"383\":1,\"385\":1,\"804\":2}}],[\"personal\",{\"1\":{\"897\":1,\"1001\":1}}],[\"personcreater接口的方法指向的是person的方法\",{\"1\":{\"763\":1}}],[\"personcreater2\",{\"1\":{\"763\":2}}],[\"personcreater\",{\"1\":{\"763\":3}}],[\"person的有参构造方法执行\",{\"1\":{\"763\":1}}],[\"person的无参构造方法执行\",{\"1\":{\"763\":1}}],[\"person>\",{\"1\":{\"688\":2}}],[\"person中有brain\",{\"1\":{\"686\":1}}],[\"person里面拿pet\",{\"1\":{\"517\":1}}],[\"person\",{\"1\":{\"216\":3,\"599\":1,\"688\":4,\"763\":10,\"765\":8,\"766\":8,\"768\":9,\"941\":6,\"942\":2,\"943\":2}}],[\"pertaining\",{\"1\":{\"156\":1}}],[\"per\",{\"1\":{\"100\":2,\"1005\":1}}],[\"pexpire\",{\"1\":{\"87\":1}}],[\"pause\",{\"1\":{\"1038\":1}}],[\"pawelgrzybek\",{\"1\":{\"1005\":1}}],[\"pad\",{\"1\":{\"1005\":2}}],[\"padding\",{\"1\":{\"220\":2}}],[\"panel\",{\"1\":{\"1039\":1}}],[\"panes\",{\"1\":{\"1005\":1}}],[\"pane\",{\"1\":{\"1005\":2}}],[\"pake\",{\"1\":{\"1003\":1}}],[\"paste\",{\"1\":{\"996\":1,\"1003\":1,\"1005\":2}}],[\"passwd\",{\"1\":{\"1158\":1}}],[\"password=aa59964360\",{\"1\":{\"1001\":1}}],[\"password=123456\",{\"1\":{\"210\":2,\"398\":1,\"461\":1,\"791\":1}}],[\"passwordencoder\",{\"1\":{\"625\":7}}],[\"password\",{\"1\":{\"400\":2,\"462\":2,\"513\":1,\"616\":1,\"625\":2,\"792\":4,\"793\":1,\"802\":15,\"803\":1,\"879\":1,\"994\":1,\"1006\":1}}],[\"passphrase\",{\"1\":{\"1005\":1}}],[\"pass\",{\"1\":{\"71\":1,\"72\":2,\"810\":1,\"865\":1}}],[\"pallet\",{\"1\":{\"959\":4}}],[\"pa59964360\",{\"1\":{\"787\":1}}],[\"paxos\",{\"1\":{\"571\":1}}],[\"pattern>\",{\"1\":{\"459\":6,\"706\":2}}],[\"patternlayout\",{\"1\":{\"399\":1,\"463\":1}}],[\"pattern\",{\"1\":{\"240\":1,\"477\":1,\"546\":1,\"993\":1,\"1019\":5}}],[\"pathrewrite\",{\"1\":{\"883\":1}}],[\"path=localfile\",{\"1\":{\"1084\":1}}],[\"path=c\",{\"1\":{\"1041\":1}}],[\"path=$path\",{\"1\":{\"800\":1}}],[\"path=\",{\"1\":{\"591\":5,\"1005\":2}}],[\"path>\",{\"1\":{\"546\":1}}],[\"paths\",{\"1\":{\"539\":2,\"994\":1}}],[\"pathparam\",{\"0\":{\"512\":1},\"1\":{\"512\":1}}],[\"pathvariable时\",{\"1\":{\"511\":1}}],[\"pathvariable\",{\"0\":{\"511\":1},\"1\":{\"511\":1}}],[\"pathmatch\",{\"1\":{\"60\":1}}],[\"path\",{\"1\":{\"60\":3,\"229\":1,\"454\":1,\"511\":2,\"540\":10,\"546\":2,\"1005\":2,\"1084\":4}}],[\"payed\",{\"1\":{\"782\":1}}],[\"paymentcircuitbreaker\",{\"1\":{\"586\":1}}],[\"payment\",{\"1\":{\"566\":1,\"575\":1,\"590\":2,\"591\":9,\"594\":1}}],[\"pay时候可以根据官网给一个时间参数\",{\"1\":{\"193\":1}}],[\"payvo\",{\"1\":{\"191\":1}}],[\"pay\",{\"1\":{\"191\":1}}],[\"payload\",{\"1\":{\"66\":1,\"613\":1}}],[\"packages\",{\"1\":{\"1005\":1}}],[\"package=\",{\"1\":{\"460\":1,\"462\":1}}],[\"package\",{\"0\":{\"1050\":1},\"1\":{\"153\":1,\"219\":1,\"222\":3,\"223\":1,\"352\":1,\"402\":1,\"691\":1,\"752\":1,\"762\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"1103\":2}}],[\"parallels\",{\"1\":{\"996\":1}}],[\"parallelstream\",{\"1\":{\"689\":1}}],[\"param>\",{\"1\":{\"459\":10,\"706\":2}}],[\"parameterhandler\",{\"1\":{\"465\":2}}],[\"parameter就是代表这个map\",{\"1\":{\"438\":1}}],[\"parameter就是这个参数\",{\"1\":{\"438\":1}}],[\"parameter\",{\"1\":{\"438\":5}}],[\"parametertype=\",{\"1\":{\"404\":1,\"878\":1}}],[\"param注解\",{\"1\":{\"436\":1}}],[\"param2=value2\",{\"1\":{\"546\":1}}],[\"param2\",{\"1\":{\"408\":1}}],[\"param1=value1\",{\"1\":{\"546\":1}}],[\"param1\",{\"1\":{\"407\":1}}],[\"params\",{\"1\":{\"252\":1,\"317\":1}}],[\"param\",{\"1\":{\"216\":2,\"229\":1,\"408\":2,\"437\":1,\"459\":10,\"661\":2,\"706\":2,\"836\":8}}],[\"partslist\",{\"1\":{\"1019\":3}}],[\"part1db等\",{\"1\":{\"960\":1}}],[\"partodb\",{\"1\":{\"960\":1}}],[\"part\",{\"1\":{\"941\":1,\"1019\":4}}],[\"partition\",{\"1\":{\"571\":1}}],[\"party\",{\"1\":{\"473\":1}}],[\"parse时候会解析这个\",{\"1\":{\"626\":1}}],[\"parseobject\",{\"1\":{\"105\":1,\"139\":2}}],[\"parser\",{\"1\":{\"70\":1}}],[\"parentid\",{\"1\":{\"883\":1}}],[\"parent>\",{\"1\":{\"476\":2}}],[\"parent<\",{\"1\":{\"476\":1}}],[\"parentvalue\",{\"1\":{\"157\":2}}],[\"parent\",{\"1\":{\"63\":1,\"229\":1,\"1009\":3}}],[\"pagehelper\",{\"0\":{\"887\":1},\"1\":{\"887\":3}}],[\"pagedomain\",{\"1\":{\"885\":2}}],[\"pagenum\",{\"1\":{\"885\":1,\"887\":3}}],[\"pagenum=1\",{\"1\":{\"884\":1}}],[\"pagesize\",{\"1\":{\"885\":1,\"887\":1}}],[\"pagesize=10\",{\"1\":{\"884\":1}}],[\"pages\",{\"1\":{\"594\":1,\"1161\":1}}],[\"pageutils\",{\"1\":{\"246\":1}}],[\"page\",{\"0\":{\"511\":1},\"1\":{\"27\":1,\"511\":4,\"885\":2,\"903\":1}}],[\"p\",{\"1\":{\"49\":1,\"73\":1,\"208\":1,\"210\":2,\"213\":2,\"242\":1,\"261\":1,\"267\":5,\"388\":2,\"539\":1,\"571\":1,\"572\":3,\"782\":1,\"791\":1,\"794\":1,\"795\":2,\"796\":5,\"825\":6,\"857\":1,\"865\":1,\"893\":2,\"959\":1,\"987\":1,\"1001\":1,\"1005\":2,\"1038\":1,\"1041\":1,\"1157\":1}}],[\"pods无缝衔接\",{\"1\":{\"1164\":1}}],[\"pods\",{\"1\":{\"1164\":2}}],[\"powerpack\",{\"1\":{\"1005\":1}}],[\"pop来恢复之前的进度继续开发新功能\",{\"1\":{\"990\":1}}],[\"poll\",{\"1\":{\"849\":1}}],[\"policy=low\",{\"1\":{\"802\":1}}],[\"policy\",{\"1\":{\"46\":1,\"317\":2,\"796\":1,\"802\":2}}],[\"pointer字段\",{\"1\":{\"972\":1}}],[\"point\",{\"1\":{\"495\":2,\"817\":2,\"887\":3}}],[\"pointcut\",{\"1\":{\"462\":2,\"492\":2}}],[\"pojo到对方系统去保存yigo\",{\"1\":{\"612\":1}}],[\"pojo\",{\"0\":{\"409\":1},\"1\":{\"408\":1}}],[\"port\",{\"1\":{\"262\":1,\"511\":2,\"547\":1,\"591\":1,\"850\":2,\"851\":2,\"852\":2,\"861\":2,\"1013\":1,\"1084\":1,\"1097\":1}}],[\"port=3306\",{\"1\":{\"804\":1}}],[\"port=8080\",{\"1\":{\"804\":1}}],[\"port=80\",{\"1\":{\"782\":1}}],[\"port=8888\",{\"1\":{\"547\":1,\"548\":1}}],[\"port=9002\",{\"1\":{\"256\":1}}],[\"port=\",{\"1\":{\"48\":1}}],[\"posix\",{\"1\":{\"1005\":1}}],[\"positive\",{\"1\":{\"483\":1}}],[\"pos\",{\"1\":{\"899\":3}}],[\"possible\",{\"1\":{\"473\":1,\"897\":1}}],[\"possibly\",{\"1\":{\"260\":1}}],[\"postadd\",{\"1\":{\"1005\":2}}],[\"postfile\",{\"1\":{\"857\":1}}],[\"postconstruct\",{\"0\":{\"501\":1,\"510\":1},\"1\":{\"501\":2,\"836\":1,\"887\":1}}],[\"postprocessafterinitialization\",{\"1\":{\"489\":1}}],[\"postprocessbeforeinitialization\",{\"1\":{\"489\":1}}],[\"postman测\",{\"0\":{\"632\":1}}],[\"postman\",{\"0\":{\"268\":1},\"1\":{\"239\":1,\"601\":1,\"996\":1}}],[\"postmapping\",{\"1\":{\"92\":1,\"124\":1,\"130\":1,\"512\":1}}],[\"post\",{\"1\":{\"230\":1,\"271\":1,\"281\":1,\"499\":1,\"594\":1,\"636\":1,\"713\":1,\"981\":1}}],[\"po\",{\"1\":{\"251\":1,\"252\":1}}],[\"pool2才能正常启动项目\",{\"1\":{\"1010\":1}}],[\"pool2<\",{\"1\":{\"1010\":2}}],[\"pool2\",{\"1\":{\"871\":2,\"1010\":7}}],[\"pooled\",{\"1\":{\"400\":1}}],[\"pool\",{\"1\":{\"202\":1,\"357\":1,\"361\":2,\"362\":2,\"374\":2,\"462\":1,\"722\":1}}],[\"pom文件中的<repository>标签用于项目级别的仓库配置\",{\"1\":{\"1014\":1}}],[\"pom文件中的<repository>标签用于定义项目的仓库配置\",{\"1\":{\"1014\":1}}],[\"pom文件和settings文件中的<repository>标签具有不同的作用\",{\"1\":{\"1014\":1}}],[\"pom有以下两个标签\",{\"1\":{\"1012\":1}}],[\"pom\",{\"1\":{\"105\":1,\"112\":1,\"222\":1,\"227\":1,\"506\":1,\"594\":1,\"740\":1,\"828\":1,\"1009\":2,\"1010\":2,\"1012\":3,\"1013\":1,\"1014\":1}}],[\"plist\",{\"1\":{\"998\":2}}],[\"please\",{\"1\":{\"929\":1}}],[\"plus框架所\",{\"1\":{\"1012\":1}}],[\"plus框架时\",{\"1\":{\"1012\":1}}],[\"plus框架的spring\",{\"1\":{\"1012\":1}}],[\"plus框架的构建和打包过程\",{\"1\":{\"1012\":1}}],[\"plus框架的依赖\",{\"1\":{\"1012\":2}}],[\"plus框架通常是作为java应用程序的依赖库使用的\",{\"1\":{\"1012\":1}}],[\"plus框架打包到部署包中\",{\"1\":{\"1012\":1}}],[\"plus框架是一个较大的依赖\",{\"1\":{\"1012\":1}}],[\"plus框架\",{\"1\":{\"1012\":5}}],[\"plus的\",{\"1\":{\"465\":1}}],[\"plus不支持更新逻辑删除的字段\",{\"1\":{\"236\":1}}],[\"plus\",{\"0\":{\"246\":1},\"1\":{\"229\":5,\"523\":1,\"1012\":11}}],[\"plugin插件时\",{\"1\":{\"559\":2}}],[\"plugin插件\",{\"1\":{\"559\":1}}],[\"plugin插件作用\",{\"1\":{\"559\":1}}],[\"plugin插件原理及作用\",{\"0\":{\"559\":1}}],[\"pluginall\",{\"1\":{\"465\":3}}],[\"plugins=\",{\"1\":{\"1005\":1}}],[\"plugins\",{\"1\":{\"267\":2,\"400\":1,\"1005\":4}}],[\"plugin\",{\"1\":{\"13\":1,\"465\":2,\"1005\":1}}],[\"plain\",{\"1\":{\"1005\":1}}],[\"placeholder>\",{\"1\":{\"462\":1}}],[\"placeholder\",{\"1\":{\"462\":1}}],[\"playload\",{\"1\":{\"70\":1}}],[\"platformtransactionmanager\",{\"1\":{\"551\":1,\"1166\":1}}],[\"platform\",{\"1\":{\"47\":1}}],[\"hp\",{\"1\":{\"1160\":1}}],[\"hr\",{\"0\":{\"1130\":1,\"1131\":1,\"1132\":1},\"1\":{\"1125\":1,\"1130\":4,\"1131\":1,\"1132\":3,\"1144\":1}}],[\"href=\",{\"1\":{\"125\":1,\"220\":1}}],[\"hc\",{\"1\":{\"1103\":2}}],[\"h左下角有个选项\",{\"1\":{\"1046\":1}}],[\"hbase\",{\"1\":{\"961\":1}}],[\"hbsnl8\",{\"1\":{\"868\":1}}],[\"h$ip\",{\"1\":{\"893\":1}}],[\"hyperfine\",{\"1\":{\"1003\":1}}],[\"hy\",{\"1\":{\"724\":2}}],[\"hydra\",{\"1\":{\"721\":2,\"722\":3,\"723\":5,\"724\":3,\"725\":6}}],[\"hystrix与sentinel比较\",{\"1\":{\"599\":1}}],[\"hystrix\",{\"1\":{\"589\":1,\"599\":1}}],[\"hystrix图形化dashboard搭建\",{\"0\":{\"589\":1}}],[\"hystrixproperty\",{\"1\":{\"586\":4}}],[\"hystrix之通配服务降级feignfallback\",{\"0\":{\"585\":1}}],[\"hystrixcommand\",{\"1\":{\"583\":1,\"586\":1}}],[\"hystrix是什么\",{\"1\":{\"581\":1}}],[\"h\",{\"0\":{\"1067\":1},\"1\":{\"614\":1,\"681\":2,\"725\":2,\"740\":2,\"782\":2,\"787\":1,\"800\":1,\"877\":1,\"959\":2,\"1005\":3}}],[\"hz\",{\"1\":{\"598\":1}}],[\"husbands1\",{\"1\":{\"776\":3}}],[\"husbands\",{\"1\":{\"776\":1}}],[\"hutool国产工具类\",{\"1\":{\"587\":1}}],[\"hub\",{\"1\":{\"267\":1,\"1003\":1}}],[\"h2\",{\"1\":{\"725\":4}}],[\"h2数据库不需要独立的服务器进程\",{\"1\":{\"550\":1,\"1166\":1}}],[\"h2数据库是一款嵌入式数据库\",{\"1\":{\"550\":1,\"1166\":1}}],[\"h2数据库为什么不需要配置\",{\"1\":{\"550\":1,\"1166\":1}}],[\"h2为什么不用配数据源\",{\"1\":{\"546\":1,\"1166\":1}}],[\"h2o\",{\"1\":{\"16\":1}}],[\"history\",{\"1\":{\"1006\":1,\"1079\":1}}],[\"hide\",{\"1\":{\"1005\":1}}],[\"hidefiles=\",{\"1\":{\"1005\":1}}],[\"hiddenhttpmethodfilter<\",{\"1\":{\"459\":1}}],[\"hierarchy\",{\"1\":{\"677\":1}}],[\"highlighting\",{\"1\":{\"1005\":4}}],[\"high\",{\"1\":{\"648\":1}}],[\"hikaricp\",{\"1\":{\"393\":1}}],[\"hikaripool\",{\"1\":{\"260\":1}}],[\"hhh\",{\"1\":{\"953\":2}}],[\"hh\",{\"1\":{\"247\":1,\"513\":1,\"688\":1,\"730\":1,\"787\":1}}],[\"help\",{\"1\":{\"986\":1}}],[\"helloworld\",{\"1\":{\"1150\":1}}],[\"hellohydra\",{\"1\":{\"725\":3}}],[\"hello不是类\",{\"1\":{\"688\":1}}],[\"hello2\",{\"1\":{\"216\":2}}],[\"hello1\",{\"1\":{\"216\":2}}],[\"hello\",{\"1\":{\"202\":2,\"216\":8,\"220\":4,\"487\":1,\"492\":3,\"629\":1,\"688\":2,\"725\":4,\"750\":1,\"752\":2,\"754\":2,\"755\":2,\"756\":2,\"780\":2,\"830\":1,\"831\":1,\"994\":1}}],[\"helloschedule\",{\"1\":{\"202\":1}}],[\"hexdigest\",{\"1\":{\"540\":1,\"1084\":1}}],[\"heap\",{\"1\":{\"385\":1,\"386\":1,\"391\":1,\"965\":1}}],[\"health\",{\"1\":{\"270\":1,\"473\":1}}],[\"headfirst设计模式\",{\"1\":{\"1150\":1}}],[\"headcount\",{\"1\":{\"1103\":1}}],[\"head记录与远程仓库的版本号\",{\"1\":{\"990\":1}}],[\"head记录\",{\"1\":{\"990\":1}}],[\"head文件中\",{\"1\":{\"990\":1}}],[\"head指针的覆盖\",{\"1\":{\"694\":1}}],[\"head\",{\"1\":{\"694\":3,\"1003\":1,\"1150\":6}}],[\"head>\",{\"1\":{\"220\":1}}],[\"header0\",{\"1\":{\"986\":1}}],[\"header数据\",{\"1\":{\"810\":1}}],[\"header\",{\"1\":{\"66\":1,\"70\":1,\"71\":4,\"72\":1,\"174\":1,\"810\":3,\"889\":1}}],[\"headers的参数keep\",{\"1\":{\"48\":1}}],[\"headers\",{\"0\":{\"47\":1},\"1\":{\"70\":1}}],[\"here\",{\"1\":{\"157\":2,\"576\":1,\"869\":1}}],[\"ha\",{\"1\":{\"1019\":1}}],[\"hah\",{\"1\":{\"1019\":1}}],[\"hahahahaa\",{\"1\":{\"1019\":1}}],[\"hard\",{\"1\":{\"1005\":1}}],[\"hackmd\",{\"1\":{\"1005\":1}}],[\"having\",{\"1\":{\"959\":1,\"963\":1}}],[\"have\",{\"1\":{\"650\":1,\"895\":2,\"938\":1}}],[\"hadoop\",{\"1\":{\"687\":2}}],[\"handbrake\",{\"1\":{\"1003\":1}}],[\"handle\",{\"0\":{\"374\":1},\"1\":{\"829\":1}}],[\"handledrop\",{\"1\":{\"234\":1}}],[\"handlerexecutionchain\",{\"1\":{\"534\":1}}],[\"handlermapping\",{\"1\":{\"534\":2,\"543\":1}}],[\"handleruntimeexception\",{\"1\":{\"520\":1}}],[\"handler>\",{\"1\":{\"460\":1}}],[\"handler><\",{\"1\":{\"460\":1}}],[\"handlervalidexception\",{\"1\":{\"240\":1}}],[\"handler\",{\"1\":{\"157\":2,\"362\":2}}],[\"handlerinterceptoradapter\",{\"1\":{\"534\":1}}],[\"handlerinterceptor\",{\"1\":{\"157\":1,\"534\":1}}],[\"handshake\",{\"1\":{\"211\":1}}],[\"hagtve5g\",{\"1\":{\"133\":2}}],[\"hasnext\",{\"1\":{\"768\":1}}],[\"hasanyauthority\",{\"1\":{\"629\":1}}],[\"has\",{\"1\":{\"483\":1,\"656\":1,\"929\":1}}],[\"haserrors\",{\"1\":{\"130\":1}}],[\"hasclass\",{\"1\":{\"128\":1}}],[\"hashtableentry\",{\"1\":{\"722\":4}}],[\"hashtable\",{\"1\":{\"688\":1,\"690\":1,\"722\":2}}],[\"hashset\",{\"1\":{\"688\":1,\"690\":1}}],[\"hash值再转变成二进制位放到布隆过滤器里\",{\"1\":{\"866\":1}}],[\"hash值\",{\"1\":{\"681\":1}}],[\"hashcode\",{\"0\":{\"690\":1},\"1\":{\"681\":2,\"690\":1,\"721\":2}}],[\"hashcode值\",{\"1\":{\"671\":1}}],[\"hashentry\",{\"1\":{\"674\":1}}],[\"hashlib\",{\"1\":{\"540\":2,\"1084\":1}}],[\"hashmap的默认加载因子\",{\"1\":{\"703\":1}}],[\"hashmap的默认容量\",{\"1\":{\"703\":1}}],[\"hashmap使用哈希码的高位和低位进行异或运算\",{\"1\":{\"681\":1}}],[\"hashmap\",{\"0\":{\"681\":1,\"682\":1,\"703\":1,\"739\":1},\"1\":{\"417\":2,\"688\":1,\"690\":1,\"722\":1,\"739\":3}}],[\"hashmap<string\",{\"1\":{\"252\":1}}],[\"hashmap<>\",{\"1\":{\"157\":1,\"876\":1}}],[\"hash一致性\",{\"0\":{\"144\":1}}],[\"hash\",{\"1\":{\"87\":1,\"144\":1,\"208\":1,\"540\":3,\"681\":3,\"739\":3,\"740\":1,\"876\":4,\"936\":1,\"1084\":2}}],[\"hash结构\",{\"1\":{\"87\":1,\"115\":1}}],[\"hash结构中添加一个\",{\"1\":{\"86\":1,\"114\":1}}],[\"hs512\",{\"1\":{\"66\":1}}],[\"hot\",{\"1\":{\"1006\":1}}],[\"hotspot\",{\"1\":{\"383\":1,\"634\":1,\"722\":2}}],[\"hooks\",{\"1\":{\"1005\":2}}],[\"how的运用\",{\"1\":{\"552\":1}}],[\"homebrew\",{\"1\":{\"1003\":9,\"1005\":3}}],[\"home=\",{\"1\":{\"800\":1,\"1005\":1}}],[\"home\",{\"1\":{\"549\":2,\"787\":4,\"799\":3,\"800\":10,\"806\":1,\"985\":2,\"1001\":1,\"1005\":2,\"1037\":1}}],[\"home3k\",{\"1\":{\"383\":1}}],[\"hong\",{\"1\":{\"408\":1}}],[\"hold\",{\"1\":{\"362\":1}}],[\"holding\",{\"1\":{\"362\":1}}],[\"hostname\",{\"1\":{\"591\":1}}],[\"host不然会丢失\",{\"1\":{\"94\":1}}],[\"hosts=\",{\"1\":{\"1005\":1}}],[\"hosts=http\",{\"1\":{\"267\":1}}],[\"hosts\",{\"1\":{\"94\":1,\"1005\":1,\"1041\":1}}],[\"host\",{\"1\":{\"47\":1,\"71\":2,\"72\":1,\"93\":1,\"267\":1,\"511\":2,\"810\":1,\"823\":1,\"850\":2,\"851\":2,\"852\":2,\"1005\":1}}],[\"hope\",{\"1\":{\"28\":1}}],[\"htms\",{\"1\":{\"302\":1}}],[\"htm\",{\"1\":{\"71\":1,\"73\":1,\"559\":1,\"731\":1,\"810\":1}}],[\"html中定制\",{\"1\":{\"1161\":1}}],[\"html即可查看文档\",{\"1\":{\"1097\":1}}],[\"html文件\",{\"1\":{\"795\":1}}],[\"htmlsingle\",{\"1\":{\"567\":1}}],[\"html=\",{\"1\":{\"220\":1}}],[\"html>\",{\"1\":{\"220\":2}}],[\"html\",{\"0\":{\"63\":1},\"1\":{\"47\":2,\"48\":2,\"49\":1,\"65\":1,\"71\":1,\"72\":1,\"73\":8,\"97\":3,\"136\":1,\"219\":1,\"220\":2,\"261\":1,\"282\":1,\"302\":1,\"378\":1,\"477\":2,\"494\":1,\"511\":1,\"515\":1,\"539\":1,\"543\":2,\"594\":1,\"706\":1,\"722\":1,\"724\":1,\"728\":1,\"739\":1,\"740\":1,\"779\":1,\"795\":6,\"810\":1,\"825\":1,\"994\":1,\"1081\":1,\"1150\":1,\"1154\":1,\"1161\":1}}],[\"httpie\",{\"1\":{\"1003\":1}}],[\"httpd\",{\"1\":{\"857\":1}}],[\"http客户端\",{\"1\":{\"581\":1}}],[\"httpclient\",{\"1\":{\"560\":1}}],[\"http+json\",{\"1\":{\"208\":1}}],[\"httpentity\",{\"1\":{\"139\":1}}],[\"httputils\",{\"0\":{\"139\":1}}],[\"http请求高级部分设置\",{\"1\":{\"100\":1}}],[\"http请求的源地址\",{\"1\":{\"46\":1}}],[\"http是一种无状态协议\",{\"1\":{\"49\":1}}],[\"http协议去连\",{\"1\":{\"797\":1,\"983\":1}}],[\"http协议允许在请求头中发送状态信息\",{\"1\":{\"581\":1}}],[\"http协议本身是无状态的\",{\"1\":{\"581\":1}}],[\"http协议本身是一种无状态的协议\",{\"1\":{\"49\":1}}],[\"http协议在三次握手时使用的就是这个remote\",{\"1\":{\"46\":1}}],[\"http1\",{\"1\":{\"47\":2}}],[\"httpstatus\",{\"1\":{\"520\":1}}],[\"httpservletresponse\",{\"1\":{\"157\":2,\"632\":3,\"890\":1}}],[\"httpservletrequest\",{\"1\":{\"157\":2,\"492\":1,\"632\":2,\"890\":1}}],[\"httpsession\",{\"1\":{\"98\":1,\"140\":1,\"536\":1}}],[\"https\",{\"0\":{\"980\":1},\"1\":{\"47\":1,\"49\":1,\"60\":1,\"69\":1,\"73\":1,\"76\":2,\"105\":1,\"124\":1,\"136\":1,\"197\":2,\"208\":1,\"220\":1,\"238\":1,\"242\":1,\"261\":2,\"302\":2,\"330\":1,\"348\":1,\"378\":1,\"379\":1,\"380\":1,\"383\":1,\"388\":2,\"397\":3,\"398\":1,\"477\":1,\"494\":1,\"499\":1,\"539\":1,\"543\":3,\"546\":1,\"554\":1,\"559\":1,\"567\":1,\"594\":5,\"614\":1,\"616\":1,\"662\":1,\"670\":1,\"671\":1,\"677\":1,\"691\":1,\"696\":1,\"722\":1,\"724\":1,\"728\":1,\"731\":1,\"739\":1,\"740\":1,\"773\":1,\"779\":1,\"782\":2,\"789\":3,\"825\":1,\"865\":1,\"868\":1,\"883\":1,\"959\":1,\"981\":1,\"986\":1,\"987\":3,\"994\":1,\"998\":1,\"1003\":2,\"1005\":7,\"1008\":1,\"1078\":2,\"1081\":3,\"1085\":1,\"1127\":1,\"1155\":1,\"1157\":2,\"1159\":1,\"1161\":2}}],[\"http\",{\"0\":{\"1041\":1},\"1\":{\"45\":1,\"46\":2,\"47\":2,\"48\":1,\"49\":1,\"60\":3,\"63\":2,\"71\":2,\"72\":2,\"76\":1,\"139\":2,\"140\":1,\"156\":1,\"216\":2,\"220\":2,\"228\":1,\"229\":1,\"261\":1,\"267\":1,\"282\":1,\"400\":1,\"459\":4,\"460\":10,\"462\":13,\"464\":1,\"492\":2,\"505\":1,\"511\":2,\"566\":3,\"590\":2,\"591\":7,\"594\":2,\"627\":1,\"688\":1,\"706\":5,\"713\":6,\"737\":4,\"738\":2,\"796\":1,\"799\":2,\"801\":1,\"810\":1,\"857\":1,\"880\":1,\"882\":1,\"883\":1,\"884\":1,\"985\":2,\"1003\":1,\"1013\":2,\"1041\":2,\"1081\":1,\"1084\":1,\"1097\":1,\"1154\":1,\"1155\":1}}],[\"httprequest\",{\"0\":{\"45\":1}}],[\"h1><\",{\"1\":{\"220\":1}}],[\"h1>\",{\"1\":{\"220\":2}}],[\"h1\",{\"1\":{\"27\":2,\"725\":2}}],[\"fput\",{\"1\":{\"1084\":1}}],[\"f4\",{\"0\":{\"1067\":1}}],[\"f参数\",{\"1\":{\"1041\":1}}],[\"f11\",{\"0\":{\"1068\":2}}],[\"f19+m\",{\"1\":{\"1005\":1}}],[\"f19+c\",{\"1\":{\"1005\":1}}],[\"f19+s\",{\"1\":{\"1005\":1}}],[\"f19+a\",{\"1\":{\"1005\":1}}],[\"f19\",{\"1\":{\"1005\":9,\"1006\":2}}],[\"f126639a0424\",{\"1\":{\"210\":1}}],[\"f12\",{\"0\":{\"61\":1},\"1\":{\"49\":1,\"62\":1,\"220\":1}}],[\"fzf\",{\"1\":{\"1003\":1}}],[\"ftwrl\",{\"1\":{\"925\":1,\"927\":7,\"928\":1}}],[\"ftp\",{\"1\":{\"688\":1,\"713\":1}}],[\"ffmpeg\",{\"1\":{\"1003\":1,\"1005\":1}}],[\"ff\",{\"1\":{\"921\":1}}],[\"fssl\",{\"1\":{\"789\":1,\"1003\":1,\"1005\":2}}],[\"fdel\",{\"1\":{\"1005\":1}}],[\"fd\",{\"1\":{\"784\":3,\"1003\":1}}],[\"f\",{\"0\":{\"1057\":1},\"1\":{\"411\":1,\"540\":3,\"666\":1,\"689\":1,\"721\":1,\"782\":2,\"940\":1,\"987\":1,\"1005\":1,\"1041\":1,\"1084\":3,\"1091\":4}}],[\"flyway是一个开源的数据库版本控制工具\",{\"1\":{\"1079\":1}}],[\"flyway\",{\"0\":{\"1079\":1},\"1\":{\"1079\":1}}],[\"flattenedlist\",{\"1\":{\"775\":2}}],[\"flatmap\",{\"0\":{\"775\":1},\"1\":{\"775\":2,\"776\":1}}],[\"flag=clash\",{\"1\":{\"981\":1}}],[\"flags\",{\"1\":{\"849\":1}}],[\"flag的判断\",{\"1\":{\"295\":1}}],[\"flag\",{\"1\":{\"295\":6,\"876\":3}}],[\"flomo\",{\"1\":{\"1003\":1}}],[\"float容量要大于long的容量\",{\"1\":{\"702\":1}}],[\"float与long在内存中的存储方式不一样\",{\"1\":{\"685\":1}}],[\"float表示的范围比long大原因是\",{\"1\":{\"685\":1}}],[\"float\",{\"1\":{\"666\":2,\"685\":1,\"686\":1,\"702\":1}}],[\"flow\",{\"1\":{\"474\":1,\"600\":1,\"604\":1}}],[\"flushdns\",{\"1\":{\"1041\":1}}],[\"flush\",{\"1\":{\"793\":1,\"803\":1,\"902\":2,\"927\":1}}],[\"flushcache=\",{\"1\":{\"449\":3}}],[\"flushinterval\",{\"1\":{\"448\":1}}],[\"flushinterval=\",{\"1\":{\"448\":1}}],[\"flux\",{\"1\":{\"261\":1,\"466\":1,\"1003\":1}}],[\"fulltext\",{\"1\":{\"936\":1}}],[\"fully\",{\"1\":{\"679\":1}}],[\"full\",{\"1\":{\"389\":2,\"959\":1,\"964\":1}}],[\"future\",{\"1\":{\"372\":1,\"374\":2}}],[\"future<singleton04>\",{\"1\":{\"357\":1}}],[\"futuretask<>\",{\"1\":{\"357\":1}}],[\"futuretask<integer>\",{\"1\":{\"357\":1}}],[\"futuretask1\",{\"1\":{\"357\":1}}],[\"futuretask\",{\"1\":{\"126\":1,\"354\":1,\"357\":4}}],[\"function<id\",{\"1\":{\"876\":1}}],[\"function<t\",{\"1\":{\"688\":1,\"748\":1,\"770\":2}}],[\"functional\",{\"1\":{\"770\":1}}],[\"functionalinterface\",{\"0\":{\"748\":1},\"1\":{\"751\":6,\"770\":1}}],[\"functionalinterface这里的作用是什么\",{\"1\":{\"543\":1,\"1081\":1}}],[\"function\",{\"1\":{\"128\":4,\"216\":2,\"229\":1,\"590\":1,\"770\":1,\"771\":2,\"1005\":7,\"1084\":1}}],[\"fancy\",{\"1\":{\"1003\":1}}],[\"fanout\",{\"1\":{\"823\":2}}],[\"facade\",{\"1\":{\"740\":1}}],[\"factor\",{\"1\":{\"703\":1}}],[\"factories文件里面\",{\"1\":{\"731\":1}}],[\"factories位置的文件\",{\"1\":{\"483\":1}}],[\"factories位置来加载一个文件\",{\"1\":{\"483\":1}}],[\"factories\",{\"1\":{\"478\":1,\"483\":1,\"731\":1}}],[\"factory\",{\"1\":{\"362\":1,\"363\":1}}],[\"father\",{\"1\":{\"658\":3}}],[\"fallback属性\",{\"1\":{\"585\":1}}],[\"fallbackmethod\",{\"1\":{\"583\":1,\"586\":1}}],[\"fallback\",{\"1\":{\"582\":1,\"586\":1}}],[\"false为非公平锁\",{\"1\":{\"352\":1}}],[\"false\",{\"0\":{\"517\":1},\"1\":{\"220\":1,\"247\":1,\"295\":1,\"317\":2,\"342\":1,\"343\":1,\"400\":1,\"424\":1,\"448\":2,\"449\":3,\"460\":1,\"647\":2,\"686\":1,\"687\":1,\"723\":4,\"725\":1,\"837\":3,\"850\":1,\"851\":1,\"879\":1,\"948\":1,\"994\":1,\"998\":1,\"1081\":1}}],[\"failurehandler表示\",{\"1\":{\"631\":1}}],[\"fail\",{\"1\":{\"503\":1}}],[\"failed\",{\"1\":{\"260\":1,\"981\":2,\"987\":1}}],[\"fairsync\",{\"1\":{\"317\":1}}],[\"fair\",{\"1\":{\"317\":4}}],[\"fairness\",{\"1\":{\"317\":1}}],[\"fast\",{\"1\":{\"229\":3,\"1005\":4,\"1006\":1}}],[\"fastjsonredisserializer\",{\"1\":{\"148\":1}}],[\"fastjson\",{\"1\":{\"105\":1,\"525\":1}}],[\"faq\",{\"0\":{\"74\":1},\"1\":{\"1005\":1}}],[\"features\",{\"1\":{\"468\":1,\"473\":1,\"1005\":1}}],[\"fenci\",{\"1\":{\"282\":2}}],[\"fescar\",{\"1\":{\"228\":1}}],[\"feignclient\",{\"1\":{\"576\":3,\"585\":1}}],[\"feign重试时会带上相同id\",{\"1\":{\"174\":1}}],[\"feign调用\",{\"1\":{\"174\":1}}],[\"feign触发重试机制\",{\"1\":{\"164\":1}}],[\"feign异步情况丢失上下文问题\",{\"1\":{\"157\":1}}],[\"feign是基于http客户端的声明式web服务客户端\",{\"1\":{\"157\":1,\"576\":1}}],[\"feign\",{\"0\":{\"159\":1},\"1\":{\"156\":1,\"159\":1,\"160\":1,\"161\":1,\"176\":1,\"228\":1,\"576\":3,\"581\":1}}],[\"feign远程调用丢失请求头问题\",{\"0\":{\"160\":1}}],[\"feign远程调用丢失请求头\",{\"1\":{\"156\":1,\"581\":1}}],[\"fegin重复请求会带上老的id去\",{\"1\":{\"174\":1}}],[\"fegin源码\",{\"1\":{\"156\":1}}],[\"fegin\",{\"1\":{\"92\":1,\"176\":1}}],[\"fetch是从远程获取最新版本到本地\",{\"1\":{\"990\":1}}],[\"fetch和git\",{\"1\":{\"990\":1}}],[\"fetch下就可以拿到分支checkout过去\",{\"1\":{\"990\":1}}],[\"fetchtype=\",{\"1\":{\"427\":1,\"428\":2}}],[\"fetch\",{\"1\":{\"47\":4,\"591\":1,\"988\":1,\"990\":3,\"1005\":2}}],[\"fi\",{\"1\":{\"1005\":1}}],[\"fighting\",{\"1\":{\"1037\":1,\"1096\":1}}],[\"fighter3\",{\"1\":{\"492\":1}}],[\"figma\",{\"1\":{\"1003\":1}}],[\"fitlbeanwithmap\",{\"1\":{\"876\":1}}],[\"firewall\",{\"1\":{\"804\":3}}],[\"firewalld\",{\"1\":{\"804\":3}}],[\"first系列都蛮好的\",{\"1\":{\"1150\":1}}],[\"first\",{\"1\":{\"27\":1,\"981\":1,\"1006\":1,\"1009\":1,\"1150\":5}}],[\"finder\",{\"1\":{\"998\":4,\"1005\":5}}],[\"find\",{\"1\":{\"782\":1,\"810\":1,\"1006\":1,\"1019\":3}}],[\"finished\",{\"1\":{\"650\":1}}],[\"finalname>\",{\"1\":{\"1011\":1}}],[\"final修饰的字符串变量才有可能是编译期常量\",{\"1\":{\"725\":1}}],[\"final修饰的变量\",{\"1\":{\"662\":1}}],[\"finalize\",{\"1\":{\"636\":1}}],[\"final一起使用是一种构造函数注入的方式\",{\"1\":{\"488\":1}}],[\"finally是针对编译时异常使用\",{\"1\":{\"686\":1}}],[\"finally是无论是否发生异常代码总会执行的\",{\"1\":{\"686\":1}}],[\"finally\",{\"0\":{\"649\":1},\"1\":{\"343\":1,\"352\":3,\"688\":1}}],[\"final\",{\"0\":{\"662\":1},\"1\":{\"128\":1,\"157\":1,\"182\":2,\"338\":1,\"339\":1,\"488\":2,\"492\":1,\"534\":1,\"662\":3,\"668\":1,\"686\":3,\"687\":2,\"689\":2,\"718\":1,\"720\":1,\"721\":4,\"725\":4,\"730\":2,\"779\":4,\"1081\":1}}],[\"final属性依然会持有它最初引用的对象的值\",{\"1\":{\"125\":1}}],[\"fixedrate\",{\"1\":{\"730\":2}}],[\"fixed\",{\"1\":{\"539\":1,\"730\":1}}],[\"fixedthreadpool\",{\"1\":{\"366\":1}}],[\"fixme\",{\"1\":{\"229\":1}}],[\"fifo\",{\"1\":{\"365\":1,\"448\":2}}],[\"fieldvalue\",{\"1\":{\"876\":2}}],[\"fieldname\",{\"1\":{\"876\":1}}],[\"fields\",{\"1\":{\"276\":1}}],[\"field\",{\"1\":{\"265\":1,\"290\":2,\"721\":4}}],[\"fielderror\",{\"1\":{\"130\":2}}],[\"filterchain\",{\"1\":{\"890\":2}}],[\"filtersecurityinterceptor\",{\"1\":{\"619\":1}}],[\"filters\",{\"1\":{\"591\":2,\"706\":1}}],[\"filters=\",{\"1\":{\"460\":1}}],[\"filter>\",{\"1\":{\"459\":2,\"706\":1}}],[\"filter\",{\"0\":{\"278\":1},\"1\":{\"156\":1,\"229\":2,\"234\":1,\"258\":1,\"261\":1,\"278\":1,\"459\":10,\"460\":1,\"462\":1,\"466\":1,\"521\":1,\"590\":2,\"591\":1,\"613\":1,\"706\":4,\"776\":1}}],[\"filter主要是针对url地址做一个编码的事情\",{\"1\":{\"156\":1}}],[\"filter能做的事情\",{\"1\":{\"156\":1}}],[\"file1\",{\"1\":{\"782\":1}}],[\"file类的一个对象\",{\"1\":{\"688\":1}}],[\"filename\",{\"1\":{\"540\":7}}],[\"filesystem\",{\"1\":{\"1009\":1}}],[\"filesort时\",{\"1\":{\"923\":1}}],[\"filesort\",{\"1\":{\"923\":1}}],[\"files\",{\"1\":{\"473\":1,\"540\":4}}],[\"file\",{\"0\":{\"860\":1},\"1\":{\"73\":1,\"540\":10,\"542\":3,\"543\":2,\"597\":2,\"608\":2,\"612\":1,\"705\":1,\"706\":2,\"708\":1,\"796\":1,\"802\":1,\"990\":2,\"1005\":3,\"1006\":1,\"1013\":1,\"1084\":10}}],[\"f6\",{\"1\":{\"62\":1}}],[\"fragment\",{\"1\":{\"878\":1}}],[\"frame\",{\"1\":{\"778\":1}}],[\"framework\",{\"0\":{\"1174\":1},\"1\":{\"67\":2,\"468\":1,\"494\":1,\"728\":1,\"731\":1,\"877\":1,\"1081\":2,\"1084\":1}}],[\"free\",{\"1\":{\"782\":1}}],[\"fromserializer\",{\"1\":{\"125\":3}}],[\"from\",{\"0\":{\"938\":1},\"1\":{\"81\":1,\"165\":1,\"169\":2,\"223\":1,\"233\":2,\"257\":2,\"260\":1,\"393\":1,\"408\":1,\"411\":2,\"415\":1,\"416\":1,\"419\":1,\"421\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":2,\"429\":2,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"436\":1,\"438\":2,\"796\":1,\"893\":1,\"894\":1,\"895\":2,\"896\":1,\"897\":2,\"906\":2,\"907\":1,\"917\":2,\"921\":1,\"922\":1,\"923\":3,\"924\":1,\"925\":2,\"929\":1,\"933\":6,\"937\":2,\"938\":3,\"939\":1,\"941\":5,\"942\":1,\"943\":3,\"947\":3,\"949\":1,\"953\":1,\"954\":1,\"955\":1,\"959\":19,\"963\":1,\"964\":1,\"1001\":1,\"1009\":1,\"1095\":1}}],[\"from=333\",{\"1\":{\"69\":1,\"543\":1,\"1081\":1}}],[\"frontmatter\",{\"1\":{\"2\":1,\"5\":1,\"10\":3,\"27\":1,\"28\":1}}],[\"friendly\",{\"1\":{\"229\":1}}],[\"fri\",{\"1\":{\"47\":1}}],[\"font\",{\"1\":{\"1005\":1}}],[\"focus\",{\"1\":{\"1003\":1,\"1005\":1}}],[\"found\",{\"1\":{\"787\":2,\"1167\":1}}],[\"foundation\",{\"1\":{\"393\":1}}],[\"folding\",{\"1\":{\"725\":1}}],[\"folders\",{\"1\":{\"1006\":1}}],[\"folder\",{\"1\":{\"540\":4}}],[\"follower\",{\"1\":{\"572\":1}}],[\"follow\",{\"1\":{\"477\":1,\"782\":1}}],[\"fox\",{\"1\":{\"281\":1}}],[\"forks\",{\"1\":{\"985\":1}}],[\"fork数在500到1000\",{\"1\":{\"985\":1}}],[\"foreground\",{\"1\":{\"790\":1}}],[\"foreach>\",{\"1\":{\"436\":1,\"437\":2}}],[\"foreach\",{\"0\":{\"435\":1,\"776\":1},\"1\":{\"415\":1,\"430\":1,\"480\":1,\"689\":2,\"767\":3,\"776\":2,\"889\":1}}],[\"forname\",{\"1\":{\"688\":3}}],[\"for循环外面count=0\",{\"1\":{\"670\":1}}],[\"for删会有问题\",{\"1\":{\"645\":1}}],[\"formulae\",{\"1\":{\"1003\":2}}],[\"format\",{\"1\":{\"247\":1,\"730\":1}}],[\"formatter\",{\"1\":{\"229\":2}}],[\"form\",{\"1\":{\"230\":1,\"626\":1,\"857\":1}}],[\"for=\",{\"1\":{\"220\":2}}],[\"for\",{\"0\":{\"82\":1,\"643\":1},\"1\":{\"71\":1,\"81\":2,\"82\":1,\"123\":1,\"169\":2,\"178\":1,\"220\":1,\"272\":1,\"334\":1,\"335\":1,\"338\":1,\"339\":1,\"343\":1,\"352\":6,\"362\":3,\"465\":1,\"468\":1,\"473\":1,\"481\":1,\"540\":3,\"587\":1,\"625\":1,\"643\":2,\"688\":1,\"740\":1,\"769\":1,\"810\":1,\"893\":1,\"895\":1,\"897\":1,\"906\":10,\"936\":1,\"938\":1,\"981\":1,\"1005\":2,\"1006\":2,\"1007\":1,\"1019\":1,\"1084\":2}}],[\"for的头信息\",{\"1\":{\"46\":1}}],[\"forwarded\",{\"1\":{\"46\":1,\"71\":1,\"810\":1}}],[\"foo\",{\"0\":{\"36\":1,\"41\":1},\"1\":{\"42\":1}}],[\"t3\",{\"1\":{\"1112\":1}}],[\"t参数\",{\"1\":{\"1041\":1}}],[\"tldr\",{\"1\":{\"1003\":1}}],[\"tls\",{\"1\":{\"981\":1}}],[\"typora\",{\"1\":{\"996\":1}}],[\"type为验证方式\",{\"1\":{\"1158\":1}}],[\"typehandlers\",{\"1\":{\"400\":1}}],[\"typealiases>\",{\"1\":{\"400\":1,\"464\":1}}],[\"typealiases\",{\"1\":{\"400\":1}}],[\"type>\",{\"1\":{\"238\":2,\"556\":1}}],[\"type=in\",{\"1\":{\"1084\":1}}],[\"type=single\",{\"1\":{\"267\":1}}],[\"type=\",{\"1\":{\"220\":3,\"400\":2,\"419\":1,\"421\":1,\"422\":1,\"423\":1,\"426\":1,\"427\":1,\"429\":1,\"448\":2,\"451\":1,\"460\":1,\"462\":1,\"1084\":4}}],[\"typereference<map<string\",{\"1\":{\"105\":2}}],[\"typereference\",{\"1\":{\"105\":2}}],[\"type\",{\"1\":{\"48\":1,\"123\":1,\"229\":4,\"230\":1,\"265\":1,\"268\":1,\"466\":2,\"546\":1,\"782\":1,\"876\":1,\"894\":2,\"1084\":2,\"1158\":1}}],[\"type应答头通知客户端它的选择\",{\"1\":{\"47\":1}}],[\"tuser\",{\"1\":{\"924\":1}}],[\"t<发送的消息的类型>\",{\"1\":{\"830\":1}}],[\"tty\",{\"1\":{\"790\":4}}],[\"ttl到了就放死信\",{\"1\":{\"843\":1}}],[\"ttl+死信\",{\"1\":{\"840\":1}}],[\"ttl用来计算数据包在路由器的消耗时间\",{\"1\":{\"76\":1}}],[\"ttl\",{\"1\":{\"76\":4,\"87\":1,\"116\":1,\"627\":1,\"844\":2,\"887\":1}}],[\"ttl实现的\",{\"1\":{\"65\":1,\"70\":1}}],[\"t=new\",{\"1\":{\"769\":1}}],[\"t=\",{\"1\":{\"750\":1}}],[\"t扩容完成变成了cba\",{\"1\":{\"694\":1}}],[\"t编译错误\",{\"1\":{\"662\":1}}],[\"tm会select出几条\",{\"1\":{\"959\":1}}],[\"tmp\",{\"1\":{\"941\":1,\"993\":1,\"1005\":1}}],[\"tmp=count1\",{\"1\":{\"670\":1}}],[\"tm在其中也是一个很重要的角色\",{\"1\":{\"609\":1}}],[\"tm向tc发起针对xid的全局提交或回滚决议\",{\"1\":{\"606\":1}}],[\"tm向tc申请开启一个全局事务\",{\"1\":{\"606\":1}}],[\"tm\",{\"1\":{\"606\":4,\"609\":1,\"959\":3}}],[\"tmall\",{\"1\":{\"153\":1}}],[\"txadvice\",{\"1\":{\"462\":2}}],[\"txpoint\",{\"1\":{\"462\":2}}],[\"tx\",{\"1\":{\"462\":6,\"608\":2}}],[\"tx=\",{\"1\":{\"462\":1}}],[\"txt支持吗\",{\"1\":{\"706\":1}}],[\"txt\",{\"0\":{\"784\":1},\"1\":{\"73\":1,\"282\":2,\"706\":1,\"782\":1,\"993\":1}}],[\"tbl\",{\"1\":{\"411\":1,\"419\":1,\"421\":2,\"422\":1,\"423\":1,\"426\":2,\"427\":2,\"429\":2,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"434\":2,\"436\":1,\"437\":2,\"438\":1,\"928\":2}}],[\"t2执行比较快2s\",{\"1\":{\"309\":1}}],[\"t2\",{\"1\":{\"302\":1,\"309\":2,\"658\":3,\"779\":1,\"896\":5,\"928\":3,\"933\":9,\"938\":7,\"941\":6,\"959\":4,\"961\":1}}],[\"t1一条t2两条两表的tm字段一样left\",{\"1\":{\"959\":1}}],[\"t1慢要10s\",{\"1\":{\"309\":1}}],[\"t1\",{\"1\":{\"290\":1,\"302\":1,\"309\":2,\"658\":3,\"779\":1,\"896\":5,\"928\":4,\"929\":3,\"933\":9,\"938\":6,\"941\":8,\"959\":5,\"961\":1,\"1112\":1}}],[\"t>\",{\"1\":{\"229\":1}}],[\"tc调度xid下管辖的全部分支事务完成提交或回滚请求\",{\"1\":{\"606\":1}}],[\"tc\",{\"1\":{\"606\":4,\"608\":1}}],[\"tcc\",{\"0\":{\"186\":1},\"1\":{\"183\":2,\"184\":3,\"186\":5,\"607\":1,\"608\":1}}],[\"tcp三次握手四次挥手\",{\"1\":{\"688\":1}}],[\"tcp443\",{\"1\":{\"76\":1}}],[\"tcp80\",{\"1\":{\"76\":1}}],[\"tcp\",{\"1\":{\"57\":1,\"183\":1,\"688\":5,\"713\":2,\"804\":2,\"823\":1,\"893\":1}}],[\"tcp通过拥塞窗口和拥塞避免算法来控制发送速率\",{\"1\":{\"56\":1}}],[\"tcp通过以下机制来保证可靠连接\",{\"1\":{\"56\":1}}],[\"tcp使用滑动窗口机制来控制发送方发送的数据量\",{\"1\":{\"56\":1}}],[\"tcp将每个发送的数据包进行编号\",{\"1\":{\"56\":1}}],[\"tcp靠什么保证可靠连接\",{\"0\":{\"56\":1}}],[\"tcp和udp的区别\",{\"0\":{\"56\":1}}],[\"teambition\",{\"1\":{\"1145\":1}}],[\"teacher\",{\"1\":{\"662\":1}}],[\"tell\",{\"1\":{\"1005\":2}}],[\"telegram\",{\"1\":{\"1003\":1,\"1005\":2}}],[\"telent\",{\"1\":{\"688\":1}}],[\"ten修改续期判断的剩余时间\",{\"1\":{\"890\":1}}],[\"temp\",{\"1\":{\"1085\":2}}],[\"tempint\",{\"1\":{\"338\":2,\"339\":2}}],[\"template结尾的对数据\",{\"1\":{\"498\":1}}],[\"template\",{\"1\":{\"220\":1,\"221\":2,\"580\":3,\"832\":1,\"835\":1}}],[\"terminal\",{\"1\":{\"999\":1,\"1005\":1}}],[\"terminating\",{\"1\":{\"362\":1}}],[\"term精确匹配\",{\"1\":{\"279\":1}}],[\"term\",{\"0\":{\"279\":1},\"1\":{\"279\":1}}],[\"term=1\",{\"1\":{\"269\":1}}],[\"tee\",{\"1\":{\"208\":1}}],[\"tech\",{\"1\":{\"197\":1}}],[\"test1\",{\"1\":{\"720\":1}}],[\"test123\",{\"1\":{\"213\":1}}],[\"test方法创建一个测试类实例\",{\"1\":{\"689\":1}}],[\"test配置文件环境\",{\"1\":{\"598\":1}}],[\"test包下com\",{\"1\":{\"531\":1}}],[\"testcolomn\",{\"1\":{\"440\":1}}],[\"test=\",{\"1\":{\"430\":5,\"432\":4,\"433\":3,\"434\":6,\"438\":4,\"440\":2}}],[\"test=true\",{\"1\":{\"153\":1}}],[\"test07\",{\"1\":{\"429\":1}}],[\"test09\",{\"1\":{\"427\":1}}],[\"test04\",{\"1\":{\"419\":1,\"443\":1,\"447\":1}}],[\"test02\",{\"1\":{\"415\":1,\"436\":1}}],[\"test01\",{\"1\":{\"403\":1,\"430\":1}}],[\"test区别\",{\"1\":{\"227\":1}}],[\"test和org\",{\"1\":{\"227\":1}}],[\"testbcryptpasswordencoder\",{\"1\":{\"133\":1}}],[\"test\",{\"0\":{\"527\":1,\"784\":1},\"1\":{\"133\":1,\"216\":5,\"219\":2,\"229\":2,\"388\":4,\"403\":1,\"415\":1,\"419\":2,\"427\":2,\"429\":2,\"430\":5,\"436\":2,\"443\":1,\"447\":1,\"489\":1,\"502\":1,\"529\":1,\"531\":1,\"598\":1,\"608\":1,\"629\":1,\"658\":12,\"686\":1,\"687\":1,\"688\":1,\"691\":1,\"750\":1,\"751\":6,\"752\":6,\"782\":1,\"799\":3,\"985\":2,\"987\":1,\"993\":1,\"994\":1,\"1005\":1,\"1038\":1,\"1081\":1}}],[\"textcontent\",{\"1\":{\"61\":1}}],[\"text\",{\"0\":{\"1046\":1},\"1\":{\"47\":1,\"48\":2,\"128\":2,\"220\":1,\"230\":1,\"281\":1,\"515\":1,\"969\":1,\"1005\":1,\"1006\":1,\"1084\":1}}],[\"tps\",{\"1\":{\"100\":2}}],[\"tampermonkey\",{\"1\":{\"1005\":2}}],[\"take\",{\"1\":{\"1005\":2}}],[\"tauri\",{\"1\":{\"1003\":1}}],[\"tar\",{\"1\":{\"800\":1}}],[\"targetpath\",{\"1\":{\"1084\":2}}],[\"targetdic\",{\"1\":{\"1084\":3}}],[\"targetclass\",{\"1\":{\"887\":2}}],[\"target\",{\"1\":{\"80\":1,\"107\":1,\"465\":5,\"492\":1,\"504\":1,\"883\":1,\"1005\":1,\"1019\":1}}],[\"tail\",{\"1\":{\"782\":1}}],[\"tag\",{\"1\":{\"267\":1}}],[\"tags\",{\"1\":{\"60\":1}}],[\"taskkill\",{\"1\":{\"1041\":1}}],[\"tasklist|findstr\",{\"1\":{\"1041\":1}}],[\"tasks\",{\"1\":{\"362\":3}}],[\"taskschedulingproperties\",{\"1\":{\"202\":1}}],[\"taskschedulingautoconfiguration\",{\"1\":{\"202\":1}}],[\"task\",{\"1\":{\"202\":1,\"272\":1,\"730\":1}}],[\"taskexecutionautoconfiguration\",{\"1\":{\"202\":1}}],[\"tab\",{\"0\":{\"1036\":1},\"1\":{\"1005\":3}}],[\"tab1\",{\"1\":{\"164\":1,\"165\":1}}],[\"tablekey=\",{\"1\":{\"1021\":1}}],[\"table2\",{\"1\":{\"964\":2}}],[\"table1\",{\"1\":{\"964\":2}}],[\"tables\",{\"1\":{\"927\":1,\"928\":6,\"929\":5}}],[\"tablespaces\",{\"1\":{\"908\":1}}],[\"tablelogic\",{\"1\":{\"229\":1}}],[\"tableid\",{\"1\":{\"229\":2}}],[\"tablefield\",{\"1\":{\"229\":1,\"247\":1,\"743\":2,\"1101\":2}}],[\"table\",{\"1\":{\"81\":1,\"265\":1,\"606\":1,\"608\":3,\"642\":1,\"681\":1,\"892\":2,\"897\":1,\"898\":1,\"905\":1,\"906\":2,\"917\":1,\"919\":5,\"921\":1,\"922\":1,\"923\":1,\"925\":1,\"928\":3,\"929\":2,\"934\":1,\"941\":1,\"959\":2,\"965\":2}}],[\"taobao\",{\"1\":{\"153\":1}}],[\"tang\",{\"1\":{\"73\":1}}],[\"t检查不会报错\",{\"1\":{\"71\":1}}],[\"tdelement\",{\"1\":{\"61\":4}}],[\"t\",{\"0\":{\"1067\":1},\"1\":{\"61\":1,\"85\":1,\"170\":1,\"302\":1,\"310\":2,\"334\":2,\"335\":2,\"338\":1,\"339\":1,\"343\":2,\"352\":6,\"399\":1,\"463\":1,\"538\":1,\"613\":1,\"658\":1,\"662\":5,\"685\":1,\"687\":2,\"688\":17,\"689\":3,\"715\":10,\"716\":3,\"717\":1,\"718\":6,\"721\":1,\"769\":1,\"770\":5,\"796\":1,\"797\":2,\"857\":1,\"894\":1,\"895\":4,\"897\":6,\"898\":3,\"905\":3,\"906\":1,\"917\":3,\"919\":6,\"921\":4,\"922\":1,\"928\":3,\"931\":1,\"933\":6,\"934\":4,\"941\":1,\"943\":1,\"961\":1,\"983\":2,\"985\":1,\"986\":2,\"1005\":3,\"1041\":1,\"1082\":1}}],[\"tot\",{\"1\":{\"1003\":1}}],[\"totalsales\",{\"1\":{\"959\":2}}],[\"total数量减1\",{\"1\":{\"837\":1}}],[\"totalprice\",{\"1\":{\"216\":2,\"220\":2}}],[\"tortoisesvn\",{\"1\":{\"996\":1}}],[\"tortoisesvn右键有个ignore\",{\"1\":{\"993\":1}}],[\"tortoisegit\",{\"1\":{\"985\":1}}],[\"toint\",{\"1\":{\"885\":2}}],[\"tojsonstr\",{\"1\":{\"876\":1}}],[\"tojsonstring\",{\"1\":{\"105\":1}}],[\"tobean\",{\"1\":{\"876\":1}}],[\"tolerance\",{\"1\":{\"571\":1}}],[\"tolist\",{\"1\":{\"229\":2,\"775\":1,\"776\":1}}],[\"tools\",{\"1\":{\"857\":1,\"1005\":1}}],[\"too\",{\"1\":{\"260\":1}}],[\"to包放common\",{\"1\":{\"251\":1}}],[\"toarray\",{\"1\":{\"249\":3}}],[\"touch\",{\"1\":{\"213\":1,\"795\":2,\"1005\":4,\"1006\":1}}],[\"to对象\",{\"1\":{\"156\":1}}],[\"tostring\",{\"1\":{\"139\":2,\"310\":2,\"415\":1,\"492\":1,\"725\":1,\"780\":1,\"876\":1,\"887\":1,\"1081\":1}}],[\"tom\",{\"1\":{\"687\":2}}],[\"tomillis\",{\"1\":{\"260\":1}}],[\"tomap\",{\"1\":{\"130\":1}}],[\"tomcat中\",{\"1\":{\"1041\":1}}],[\"tomcat9\",{\"1\":{\"1041\":1}}],[\"tomcat访问\",{\"0\":{\"706\":1}}],[\"tomcat的默认的工作线程数\",{\"1\":{\"582\":1}}],[\"tomcat多线程接收请求\",{\"1\":{\"156\":1}}],[\"tomcat\",{\"0\":{\"737\":1},\"1\":{\"48\":1,\"140\":4,\"473\":1,\"582\":1,\"706\":2,\"713\":1,\"727\":1,\"737\":2,\"1041\":1}}],[\"todo\",{\"0\":{\"171\":1},\"1\":{\"93\":1,\"108\":1,\"130\":4,\"147\":2,\"152\":1,\"156\":1,\"167\":1,\"179\":1,\"202\":1,\"229\":1,\"386\":1,\"576\":1,\"624\":1,\"743\":2,\"779\":1,\"846\":2,\"849\":2,\"883\":1,\"972\":1,\"998\":1,\"1081\":1,\"1085\":1,\"1101\":2}}],[\"to\",{\"0\":{\"410\":1,\"1160\":1},\"1\":{\"76\":1,\"123\":1,\"156\":1,\"157\":2,\"205\":1,\"206\":1,\"251\":2,\"260\":1,\"317\":1,\"362\":5,\"473\":3,\"546\":1,\"608\":1,\"721\":1,\"750\":1,\"752\":1,\"793\":1,\"803\":1,\"817\":1,\"893\":1,\"895\":2,\"897\":1,\"907\":1,\"929\":1,\"938\":2,\"981\":1,\"987\":2,\"1001\":2,\"1005\":3,\"1006\":2,\"1160\":1}}],[\"topic\",{\"1\":{\"817\":1,\"823\":2}}],[\"top\",{\"1\":{\"69\":1,\"261\":1,\"977\":1}}],[\"tokenkey\",{\"1\":{\"876\":1}}],[\"token的问题在于\",{\"1\":{\"646\":1}}],[\"token的作用像是只充当了个uuid和redis关联\",{\"1\":{\"65\":1,\"70\":1}}],[\"token字符串解析会判断有无过期\",{\"1\":{\"627\":1}}],[\"token令牌机制\",{\"0\":{\"167\":1}}],[\"token给他然后换取新的token\",{\"1\":{\"70\":1}}],[\"token校验\",{\"1\":{\"70\":1}}],[\"token过期后再刷\",{\"1\":{\"70\":1}}],[\"tokenservice\",{\"1\":{\"67\":2,\"68\":1}}],[\"token\",{\"0\":{\"54\":1,\"68\":1,\"69\":1},\"1\":{\"54\":1,\"64\":1,\"65\":1,\"68\":2,\"69\":3,\"70\":8,\"156\":1,\"202\":1,\"238\":1,\"617\":1,\"621\":1,\"626\":2,\"627\":8,\"628\":1,\"646\":2,\"883\":1,\"887\":1,\"889\":1,\"890\":3,\"985\":1}}],[\"toc\",{\"1\":{\"5\":1,\"642\":1}}],[\"trx\",{\"1\":{\"902\":3,\"907\":3,\"908\":2,\"928\":1,\"935\":10}}],[\"trunks\",{\"1\":{\"721\":1}}],[\"truesend\",{\"1\":{\"486\":3,\"538\":3,\"1082\":4}}],[\"true为公平锁\",{\"1\":{\"352\":1}}],[\"true后\",{\"1\":{\"295\":1}}],[\"true来解决击穿问题\",{\"1\":{\"108\":1}}],[\"true\",{\"0\":{\"940\":1},\"1\":{\"48\":1,\"123\":3,\"133\":1,\"157\":1,\"231\":1,\"295\":3,\"317\":3,\"400\":2,\"404\":2,\"424\":1,\"448\":2,\"449\":3,\"462\":1,\"464\":1,\"517\":1,\"539\":2,\"580\":1,\"586\":1,\"591\":3,\"629\":1,\"647\":1,\"686\":1,\"687\":2,\"721\":1,\"723\":2,\"724\":1,\"725\":1,\"837\":2,\"844\":2,\"850\":1,\"851\":1,\"871\":1,\"876\":1,\"879\":2,\"883\":1,\"948\":1,\"998\":1,\"1005\":1,\"1006\":1,\"1084\":1}}],[\"trigger\",{\"1\":{\"879\":1,\"1005\":34}}],[\"trib\",{\"1\":{\"865\":1}}],[\"trip\",{\"1\":{\"603\":2}}],[\"trim>\",{\"1\":{\"432\":1,\"434\":1}}],[\"trim标签体中是整个字符串拼串\",{\"1\":{\"432\":1}}],[\"trim\",{\"0\":{\"432\":1},\"1\":{\"430\":2,\"432\":1,\"434\":1}}],[\"treeify\",{\"1\":{\"703\":2}}],[\"treemap\",{\"1\":{\"688\":2}}],[\"treeset<>\",{\"1\":{\"766\":2}}],[\"treeset<person>\",{\"1\":{\"766\":2}}],[\"treeset排序案例\",{\"0\":{\"766\":1}}],[\"treeset\",{\"1\":{\"688\":1,\"766\":2}}],[\"treenodeclick\",{\"1\":{\"226\":1}}],[\"tree\",{\"0\":{\"886\":1},\"1\":{\"226\":3,\"591\":2,\"884\":1,\"1003\":1}}],[\"try抛出\",{\"1\":{\"686\":1}}],[\"trylock\",{\"1\":{\"352\":1}}],[\"try+2\",{\"1\":{\"183\":1,\"607\":1}}],[\"try\",{\"1\":{\"183\":1,\"186\":13,\"338\":1,\"339\":1,\"342\":1,\"343\":1,\"352\":3,\"402\":1,\"580\":1,\"632\":1,\"686\":3,\"779\":1,\"837\":1,\"846\":1,\"851\":1}}],[\"trace\",{\"1\":{\"1084\":1}}],[\"trackpad\",{\"1\":{\"1006\":1}}],[\"track\",{\"1\":{\"47\":1}}],[\"trayrow\",{\"1\":{\"959\":2}}],[\"traytype\",{\"1\":{\"959\":7}}],[\"trayllx\",{\"1\":{\"959\":4}}],[\"translate\",{\"1\":{\"1005\":1}}],[\"translator\",{\"1\":{\"613\":1}}],[\"transient修饰的属性不能序列化\",{\"1\":{\"688\":1}}],[\"transformer\",{\"1\":{\"613\":1}}],[\"transfer\",{\"1\":{\"410\":1,\"612\":1}}],[\"transactionmanager\",{\"1\":{\"462\":2}}],[\"transaction注解类生成一个代理类\",{\"1\":{\"182\":1}}],[\"transaction注解到非public方法上\",{\"1\":{\"182\":1}}],[\"transaction\",{\"1\":{\"100\":1,\"182\":2,\"257\":2,\"462\":1,\"606\":3,\"787\":1,\"800\":1,\"854\":1,\"905\":3,\"906\":1,\"907\":1,\"927\":2,\"929\":5,\"934\":3,\"935\":3}}],[\"transactional就行了\",{\"1\":{\"607\":1}}],[\"transactional注解应用于非public方法\",{\"1\":{\"182\":1}}],[\"transactional注解应用于非public方法时\",{\"1\":{\"182\":1}}],[\"transactional注解\",{\"1\":{\"179\":1}}],[\"transactional注解的类生成一个代理类\",{\"1\":{\"179\":1}}],[\"transactional失效大概列举几种情况\",{\"1\":{\"182\":1}}],[\"transactional失效\",{\"1\":{\"179\":1}}],[\"transactional\",{\"0\":{\"257\":1},\"1\":{\"78\":3,\"176\":2,\"177\":1,\"178\":6,\"179\":10,\"607\":1,\"608\":1}}],[\"transactional代替redisson吗\",{\"1\":{\"78\":1}}],[\"tig\",{\"1\":{\"1003\":1}}],[\"tiny\",{\"1\":{\"999\":4}}],[\"tinyrdm\",{\"1\":{\"996\":1}}],[\"tinyint\",{\"1\":{\"922\":1}}],[\"tiles\",{\"1\":{\"996\":1}}],[\"tips\",{\"0\":{\"783\":1,\"890\":1,\"998\":1,\"1038\":1}}],[\"tip\",{\"1\":{\"208\":1}}],[\"timelapse\",{\"1\":{\"1005\":2}}],[\"timemachine\",{\"1\":{\"1001\":1}}],[\"times\",{\"1\":{\"998\":1}}],[\"timediff\",{\"1\":{\"907\":1}}],[\"timed\",{\"1\":{\"577\":1,\"857\":1}}],[\"timer\",{\"1\":{\"200\":1}}],[\"timeunit\",{\"1\":{\"67\":1,\"115\":2,\"260\":1,\"342\":1,\"343\":1,\"352\":1,\"363\":1,\"876\":2}}],[\"timeout=2\",{\"1\":{\"179\":1}}],[\"timeout=30\",{\"1\":{\"179\":1}}],[\"timeout=60该在哪里设置\",{\"1\":{\"48\":1}}],[\"timeout=60\",{\"1\":{\"48\":2}}],[\"timeoutchangestyle\",{\"1\":{\"128\":3}}],[\"timeout\",{\"1\":{\"48\":2,\"107\":1,\"179\":1,\"352\":1,\"880\":1,\"893\":1,\"932\":3,\"1084\":1}}],[\"time\",{\"0\":{\"954\":1},\"1\":{\"48\":1,\"100\":2,\"123\":1,\"125\":1,\"176\":1,\"362\":2,\"492\":1,\"546\":1,\"603\":1,\"634\":1,\"730\":1,\"876\":2,\"897\":1,\"907\":1,\"908\":1,\"954\":4,\"1085\":1}}],[\"title>\",{\"1\":{\"220\":1}}],[\"title\",{\"1\":{\"27\":3,\"157\":1,\"473\":1,\"546\":1,\"553\":1,\"554\":1,\"625\":1,\"777\":1,\"869\":1,\"912\":1,\"1005\":1,\"1083\":1,\"1166\":1}}],[\"thor\",{\"1\":{\"996\":2,\"1003\":1,\"1005\":1,\"1006\":1}}],[\"thinking\",{\"1\":{\"717\":1}}],[\"this在构造器或<init>\",{\"1\":{\"658\":1}}],[\"this\",{\"1\":{\"128\":1,\"156\":2,\"179\":2,\"220\":8,\"226\":2,\"229\":2,\"233\":1,\"234\":2,\"317\":2,\"362\":2,\"363\":1,\"487\":1,\"538\":1,\"543\":1,\"580\":1,\"683\":1,\"687\":1,\"716\":2,\"720\":2,\"763\":2,\"779\":1,\"780\":1,\"850\":1,\"851\":1,\"879\":4,\"1009\":1,\"1081\":1,\"1082\":1}}],[\"than\",{\"1\":{\"362\":1}}],[\"that\",{\"1\":{\"283\":1,\"362\":1,\"473\":1,\"895\":1,\"938\":1}}],[\"three\",{\"1\":{\"998\":1}}],[\"threshold\",{\"1\":{\"703\":2}}],[\"thread类的子类对象\",{\"1\":{\"687\":1}}],[\"thread2\",{\"1\":{\"650\":4}}],[\"thread1\",{\"1\":{\"650\":4}}],[\"threadpoolconfigproperties\",{\"0\":{\"370\":1},\"1\":{\"369\":1,\"370\":1}}],[\"threadpoolexecutor这几个类\",{\"1\":{\"359\":1}}],[\"threadpoolexecutor\",{\"0\":{\"362\":1},\"1\":{\"283\":2,\"360\":1,\"363\":2,\"366\":1,\"369\":1,\"371\":1}}],[\"threadfactory\",{\"1\":{\"362\":1}}],[\"threadstacksize\",{\"1\":{\"383\":1}}],[\"threads\",{\"1\":{\"362\":4,\"650\":1}}],[\"thread01\",{\"1\":{\"355\":1,\"361\":1}}],[\"thread\",{\"0\":{\"355\":1},\"1\":{\"156\":4,\"161\":1,\"202\":1,\"302\":1,\"334\":3,\"335\":3,\"338\":2,\"339\":2,\"343\":3,\"352\":6,\"354\":3,\"356\":1,\"357\":1,\"362\":2,\"370\":1,\"374\":2,\"650\":6,\"687\":1,\"688\":5,\"730\":2,\"769\":2,\"851\":2,\"932\":1,\"1095\":1}}],[\"threadlocal对象之后\",{\"1\":{\"157\":1}}],[\"threadlocal内存泄漏问题与线程的创建方式没有直接的关联\",{\"1\":{\"157\":1}}],[\"threadlocal<userinfo>\",{\"1\":{\"157\":1}}],[\"threadlocal<>\",{\"1\":{\"156\":1,\"157\":1}}],[\"threadlocal<memberresponsevo>\",{\"1\":{\"156\":1}}],[\"threadlocalmap中使用的\",{\"1\":{\"157\":1}}],[\"threadlocalmap\",{\"1\":{\"156\":3,\"161\":1}}],[\"threadlocals\",{\"1\":{\"156\":8}}],[\"threadlocal线程变量\",{\"1\":{\"156\":1}}],[\"threadlocal存用户信息比用session存用户信息有什么优势\",{\"1\":{\"156\":1}}],[\"threadlocal\",{\"1\":{\"156\":24,\"157\":2,\"161\":2,\"389\":1,\"391\":1,\"620\":1}}],[\"throw语句失效\",{\"1\":{\"649\":1}}],[\"throwable\",{\"1\":{\"374\":1,\"492\":3,\"496\":1}}],[\"throw\",{\"1\":{\"182\":1,\"624\":1,\"686\":3,\"779\":1}}],[\"throws\",{\"1\":{\"157\":2,\"202\":1,\"335\":1,\"492\":3,\"496\":1,\"538\":1,\"624\":1,\"650\":1,\"683\":1,\"686\":1,\"721\":1,\"890\":1,\"1082\":1}}],[\"throughput\",{\"1\":{\"79\":1}}],[\"thymeleaf中的\",{\"1\":{\"539\":1}}],[\"thymeleaf这里\",{\"1\":{\"539\":1}}],[\"thymeleaf\",{\"0\":{\"96\":1},\"1\":{\"96\":1,\"98\":1,\"102\":1,\"536\":1,\"539\":1,\"726\":1}}],[\"thu\",{\"1\":{\"48\":1}}],[\"there\",{\"1\":{\"625\":1}}],[\"they\",{\"1\":{\"362\":2}}],[\"theme\",{\"1\":{\"223\":1,\"1005\":2}}],[\"then\",{\"1\":{\"88\":2,\"233\":1,\"879\":1,\"948\":2,\"955\":1,\"959\":13,\"1005\":1,\"1009\":2}}],[\"the\",{\"1\":{\"27\":1,\"156\":1,\"223\":1,\"281\":2,\"317\":1,\"362\":16,\"483\":1,\"553\":1,\"554\":1,\"625\":1,\"730\":1,\"869\":2,\"895\":2,\"938\":2,\"941\":2,\"1003\":1,\"1005\":2,\"1006\":1,\"1009\":4,\"1017\":2}}],[\"twitter\",{\"1\":{\"961\":1}}],[\"two=\",{\"1\":{\"721\":1}}],[\"twgzfmyl3qbgwtbiyu1viywcnj\",{\"1\":{\"133\":2}}],[\"tw\",{\"1\":{\"47\":1}}],[\"2px\",{\"1\":{\"1022\":2}}],[\"2pc\",{\"0\":{\"185\":1},\"1\":{\"183\":2,\"184\":3,\"186\":1,\"605\":1,\"607\":1,\"609\":3}}],[\"2️⃣你特别想要做的事情\",{\"1\":{\"980\":1}}],[\"2redis\",{\"1\":{\"868\":1}}],[\"2m\",{\"1\":{\"844\":1}}],[\"2分钟\",{\"1\":{\"807\":1}}],[\"2>>\",{\"1\":{\"784\":1}}],[\"2>\",{\"1\":{\"784\":1,\"799\":1,\"800\":1,\"985\":1,\"1005\":1}}],[\"2是一个文件描述符\",{\"1\":{\"784\":1}}],[\"2==0\",{\"1\":{\"767\":1}}],[\"26\",{\"1\":{\"686\":1,\"751\":1,\"752\":1,\"877\":2,\"1005\":1}}],[\"267\",{\"1\":{\"102\":1}}],[\"2^32\",{\"1\":{\"1092\":2}}],[\"2^n\",{\"1\":{\"681\":1,\"739\":1}}],[\"2^6=64位二进制\",{\"1\":{\"58\":1}}],[\"2直接注册到nacos上\",{\"1\":{\"608\":1}}],[\"2中\",{\"1\":{\"388\":1}}],[\"2g\",{\"1\":{\"383\":1}}],[\"25672\",{\"1\":{\"825\":3}}],[\"256mb\",{\"1\":{\"383\":1}}],[\"254\",{\"1\":{\"688\":1}}],[\"255\",{\"1\":{\"685\":1,\"688\":2}}],[\"255范围内的整数的十六进制值\",{\"1\":{\"685\":1}}],[\"25\",{\"1\":{\"310\":1,\"935\":2,\"1005\":1}}],[\"251\",{\"1\":{\"102\":1}}],[\"2h\",{\"1\":{\"283\":1}}],[\"28089\",{\"1\":{\"1013\":2}}],[\"28\",{\"1\":{\"279\":1,\"751\":1}}],[\"2867f0558687\",{\"1\":{\"242\":1}}],[\"2<<3或8<<1\",{\"1\":{\"685\":1}}],[\"2<\",{\"1\":{\"242\":1,\"458\":3,\"556\":1}}],[\"2版本增加了对cors的支持\",{\"1\":{\"231\":1}}],[\"2之前使用的是\",{\"1\":{\"227\":1,\"528\":1}}],[\"230910\",{\"1\":{\"1096\":1}}],[\"230920\",{\"1\":{\"777\":1}}],[\"231008\",{\"1\":{\"993\":1}}],[\"231\",{\"1\":{\"739\":1}}],[\"231115\",{\"1\":{\"156\":1}}],[\"23\",{\"1\":{\"552\":1,\"691\":1,\"770\":1,\"954\":1,\"1005\":1}}],[\"2335\",{\"1\":{\"102\":1}}],[\"240330\",{\"1\":{\"996\":1}}],[\"24061\",{\"1\":{\"959\":1}}],[\"24\",{\"1\":{\"140\":2,\"751\":1,\"1005\":2}}],[\"2的新数据了\",{\"1\":{\"117\":1}}],[\"2也写完这两个了\",{\"1\":{\"117\":1}}],[\"21993785\",{\"1\":{\"959\":1}}],[\"2147483647\",{\"1\":{\"739\":2}}],[\"2147483648\",{\"1\":{\"739\":2}}],[\"21481\",{\"1\":{\"107\":1}}],[\"21\",{\"1\":{\"216\":1,\"283\":1,\"1005\":1,\"1156\":1}}],[\"217\",{\"1\":{\"102\":1}}],[\"2号存2\",{\"1\":{\"103\":1}}],[\"2k\",{\"1\":{\"92\":1}}],[\"223\",{\"1\":{\"1041\":1}}],[\"223和36\",{\"1\":{\"76\":1}}],[\"22<\",{\"1\":{\"397\":1}}],[\"22\",{\"1\":{\"310\":1,\"752\":1,\"935\":1,\"1005\":2}}],[\"22192\",{\"1\":{\"107\":1}}],[\"221\",{\"1\":{\"76\":1}}],[\"222的udp53端口\",{\"1\":{\"76\":1}}],[\"222\",{\"1\":{\"76\":1}}],[\"2f\",{\"1\":{\"60\":2}}],[\"2708\",{\"1\":{\"1155\":1}}],[\"270\",{\"1\":{\"102\":1}}],[\"27\",{\"1\":{\"48\":1,\"751\":7,\"752\":1,\"762\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"952\":3,\"959\":1,\"1005\":1}}],[\"20k\",{\"1\":{\"1107\":1}}],[\"20gb\",{\"1\":{\"906\":1}}],[\"2017\",{\"1\":{\"915\":1}}],[\"2019\",{\"0\":{\"957\":2},\"1\":{\"785\":1,\"952\":3,\"994\":1,\"1126\":1}}],[\"2018\",{\"1\":{\"594\":1}}],[\"20181128\",{\"1\":{\"539\":2}}],[\"2013\",{\"1\":{\"393\":1}}],[\"2010\",{\"1\":{\"393\":1}}],[\"2008\",{\"1\":{\"951\":4}}],[\"200gb\",{\"1\":{\"906\":1}}],[\"2001\",{\"1\":{\"459\":1,\"460\":1,\"462\":1}}],[\"200\",{\"1\":{\"363\":1,\"632\":1,\"646\":1,\"780\":2,\"857\":1,\"917\":1,\"921\":1}}],[\"20000k\",{\"1\":{\"1005\":1}}],[\"20000\",{\"1\":{\"278\":1}}],[\"2000吞吐\",{\"0\":{\"81\":1}}],[\"2000\",{\"1\":{\"76\":1}}],[\"20px\",{\"1\":{\"220\":2}}],[\"20>=10给恢复到30\",{\"1\":{\"115\":1}}],[\"204\",{\"1\":{\"71\":1,\"796\":1,\"810\":1}}],[\"20\",{\"0\":{\"364\":1},\"1\":{\"47\":1,\"60\":1,\"87\":1,\"274\":1,\"771\":1,\"896\":1,\"916\":3,\"918\":1,\"933\":4,\"1005\":2}}],[\"2021\",{\"1\":{\"951\":5,\"1007\":1}}],[\"2021年8月\",{\"0\":{\"951\":1}}],[\"20210619095633057\",{\"1\":{\"857\":1}}],[\"20210818222259022\",{\"1\":{\"499\":1}}],[\"20210818214831566\",{\"1\":{\"499\":1}}],[\"20240130182956675\",{\"1\":{\"1045\":1}}],[\"20240326115638077\",{\"1\":{\"392\":1}}],[\"20240320再学redisson理解了\",{\"0\":{\"171\":1}}],[\"2024\",{\"1\":{\"694\":1,\"779\":1,\"938\":1,\"996\":1,\"1021\":1,\"1076\":1}}],[\"20231103154714091\",{\"1\":{\"1051\":1}}],[\"20231120173938571\",{\"1\":{\"61\":1}}],[\"20231013171058244\",{\"1\":{\"706\":1}}],[\"20231013163547099\",{\"1\":{\"706\":1}}],[\"20231013163533698\",{\"1\":{\"706\":1}}],[\"20231222155309514\",{\"1\":{\"623\":1}}],[\"20231222154855650\",{\"1\":{\"622\":1}}],[\"20230531110912384\",{\"1\":{\"784\":1}}],[\"20230915223439680\",{\"1\":{\"778\":1}}],[\"20230908145317711\",{\"1\":{\"971\":1}}],[\"20230908141221249\",{\"1\":{\"970\":1}}],[\"20230907171603497\",{\"1\":{\"962\":1}}],[\"20230907214851056\",{\"1\":{\"736\":1}}],[\"20230902215155311\",{\"1\":{\"743\":1,\"1101\":1}}],[\"20230906220544568\",{\"1\":{\"731\":1}}],[\"20230906213034838\",{\"1\":{\"725\":1}}],[\"20230906212720611\",{\"1\":{\"725\":1}}],[\"20230906204951575\",{\"1\":{\"724\":1}}],[\"20230906204837682\",{\"1\":{\"724\":1}}],[\"20230906170643575\",{\"1\":{\"722\":1}}],[\"20230906170526190\",{\"1\":{\"722\":1}}],[\"20230906155942752\",{\"1\":{\"720\":1}}],[\"20230905133151070\",{\"1\":{\"713\":1}}],[\"20230905133105910\",{\"1\":{\"713\":1}}],[\"20230905132922223\",{\"1\":{\"712\":1}}],[\"20230905132406455\",{\"1\":{\"712\":1}}],[\"20230905132212180\",{\"1\":{\"712\":1}}],[\"20230905102522350\",{\"1\":{\"711\":1}}],[\"20230307162022703\",{\"1\":{\"876\":1}}],[\"20230307161729539\",{\"1\":{\"876\":1}}],[\"20230306095441886\",{\"1\":{\"875\":1}}],[\"20230304171121214\",{\"1\":{\"874\":1}}],[\"20230304151001878\",{\"1\":{\"870\":1}}],[\"20230304152602369\",{\"1\":{\"112\":1,\"871\":1}}],[\"20230317101128183\",{\"1\":{\"704\":1}}],[\"20230317095440667\",{\"1\":{\"695\":1}}],[\"20230605154613437\",{\"1\":{\"693\":1}}],[\"20230802085814446\",{\"1\":{\"546\":1}}],[\"20230223150958814\",{\"1\":{\"1074\":1}}],[\"20230211140746713\",{\"1\":{\"546\":1}}],[\"20230217115759420\",{\"1\":{\"485\":1}}],[\"20230202110044964\",{\"1\":{\"190\":1}}],[\"20230131111753174\",{\"1\":{\"843\":1}}],[\"20230131105835211\",{\"1\":{\"841\":1}}],[\"20230112172607355\",{\"1\":{\"823\":1}}],[\"20230116105631702\",{\"1\":{\"161\":1}}],[\"20230106154116757\",{\"1\":{\"598\":1}}],[\"20230105171317820\",{\"1\":{\"141\":1}}],[\"2023\",{\"1\":{\"48\":1,\"686\":2,\"959\":3,\"961\":1,\"1007\":1}}],[\"20221020101841706\",{\"1\":{\"990\":1}}],[\"20221017102235784\",{\"1\":{\"1009\":1}}],[\"20221017164745509\",{\"1\":{\"526\":1}}],[\"20221018170313908\",{\"1\":{\"280\":1}}],[\"20221019140152140\",{\"1\":{\"229\":1}}],[\"20221126101938997\",{\"1\":{\"352\":1}}],[\"20221109175055161\",{\"1\":{\"287\":1}}],[\"20221224145341950\",{\"1\":{\"93\":1}}],[\"20221207164702704\",{\"1\":{\"92\":1}}],[\"20220307142217883\",{\"1\":{\"1161\":1}}],[\"20220307140259944\",{\"1\":{\"1161\":1}}],[\"20220307141418733\",{\"1\":{\"1161\":1}}],[\"20220402\",{\"1\":{\"1155\":1}}],[\"20220413213359161\",{\"1\":{\"856\":1}}],[\"20220413211028112\",{\"1\":{\"855\":1}}],[\"20220413205107400\",{\"1\":{\"854\":1}}],[\"20220413203729944\",{\"1\":{\"854\":1}}],[\"20220413201848353\",{\"1\":{\"854\":1}}],[\"20220410204001304\",{\"1\":{\"854\":1}}],[\"20220510145619913\",{\"1\":{\"863\":1}}],[\"20220510145507853\",{\"1\":{\"863\":1}}],[\"20220527162304318\",{\"1\":{\"565\":1}}],[\"20220525204651902\",{\"1\":{\"559\":1}}],[\"20220525204018181\",{\"1\":{\"559\":1}}],[\"20220523210748358\",{\"1\":{\"557\":1}}],[\"20220523172626378\",{\"1\":{\"554\":1}}],[\"20220523170052524\",{\"1\":{\"554\":1}}],[\"20220523162302969\",{\"1\":{\"553\":1}}],[\"20220523161504577\",{\"1\":{\"553\":1}}],[\"20220523154541922\",{\"1\":{\"553\":1}}],[\"20220102103441091\",{\"1\":{\"810\":1}}],[\"20220101205730050\",{\"1\":{\"802\":1}}],[\"20220101204949194\",{\"1\":{\"802\":1}}],[\"20220101204701233\",{\"1\":{\"802\":1}}],[\"20220101201225905\",{\"1\":{\"800\":1}}],[\"20220113173157681\",{\"1\":{\"465\":1}}],[\"20220113173140474\",{\"1\":{\"465\":1}}],[\"20220113173124592\",{\"1\":{\"465\":1}}],[\"20220113173101595\",{\"1\":{\"465\":1}}],[\"20220113173036443\",{\"1\":{\"465\":1}}],[\"20220113173017201\",{\"1\":{\"465\":1}}],[\"20220113172923721\",{\"1\":{\"465\":1}}],[\"20220113172652692\",{\"1\":{\"450\":1}}],[\"20220113161851133\",{\"1\":{\"465\":1}}],[\"20220113160927268\",{\"1\":{\"456\":1}}],[\"20220113160558639\",{\"1\":{\"456\":1}}],[\"20220113112304859\",{\"1\":{\"451\":1}}],[\"20220113092935272\",{\"1\":{\"443\":1}}],[\"20220112112209272\",{\"1\":{\"403\":1}}],[\"20220712111100552\",{\"1\":{\"814\":1}}],[\"20220712110324017\",{\"1\":{\"813\":1}}],[\"20220706152115283\",{\"1\":{\"594\":1}}],[\"20220701165550123\",{\"1\":{\"594\":1}}],[\"20220701151424183\",{\"1\":{\"593\":1}}],[\"20220701143051906\",{\"1\":{\"591\":1}}],[\"20220724160235682\",{\"1\":{\"210\":1}}],[\"20220722154237978\",{\"1\":{\"207\":1}}],[\"20220720220817554\",{\"1\":{\"207\":1}}],[\"20220721122030582\",{\"1\":{\"76\":1}}],[\"20220630144816418\",{\"1\":{\"591\":1}}],[\"20220805173159065\",{\"1\":{\"598\":1}}],[\"20220828171758542\",{\"1\":{\"256\":1}}],[\"20220828171101974\",{\"1\":{\"255\":1}}],[\"20220828170939115\",{\"1\":{\"254\":1}}],[\"20220824161553329\",{\"1\":{\"250\":1}}],[\"20220821105014376\",{\"1\":{\"242\":1}}],[\"20220820145558332\",{\"1\":{\"240\":1}}],[\"20220818222235756\",{\"1\":{\"238\":1}}],[\"20220813191254660\",{\"1\":{\"231\":1}}],[\"20220813185445762\",{\"1\":{\"231\":1}}],[\"20220813182436081\",{\"1\":{\"231\":1}}],[\"20220813180934578\",{\"1\":{\"230\":1}}],[\"20220813175848410\",{\"1\":{\"230\":1}}],[\"20220814161700939\",{\"1\":{\"229\":1}}],[\"20220901220507136\",{\"1\":{\"485\":1}}],[\"20220901213237083\",{\"1\":{\"485\":1}}],[\"20220901180324251\",{\"1\":{\"485\":1}}],[\"20220901002801554\",{\"1\":{\"646\":1}}],[\"20220901005746190\",{\"1\":{\"79\":1}}],[\"20220901000424905\",{\"1\":{\"79\":1}}],[\"20220901090225517\",{\"1\":{\"79\":1}}],[\"20220907215603856\",{\"1\":{\"264\":1}}],[\"20220904144154210\",{\"1\":{\"88\":1}}],[\"20220903163701486\",{\"1\":{\"83\":1}}],[\"20220902232830929\",{\"1\":{\"80\":1}}],[\"2022\",{\"1\":{\"47\":1,\"107\":1,\"283\":1,\"393\":1,\"552\":1,\"1156\":1}}],[\"20200317101210376\",{\"1\":{\"350\":1}}],[\"20200310210701761\",{\"1\":{\"305\":1}}],[\"20200310203030720\",{\"1\":{\"304\":1}}],[\"20200310162654437\",{\"1\":{\"296\":1}}],[\"20200309174220675\",{\"1\":{\"290\":1}}],[\"2020\",{\"0\":{\"954\":1,\"1102\":1},\"1\":{\"28\":1,\"295\":1,\"523\":1,\"691\":1,\"751\":6,\"752\":1,\"762\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"796\":3,\"954\":3}}],[\"293854\",{\"1\":{\"973\":2}}],[\"290\",{\"1\":{\"102\":1}}],[\"29\",{\"1\":{\"47\":1,\"751\":1,\"951\":2}}],[\"2\",{\"0\":{\"80\":1,\"85\":1,\"96\":1,\"97\":1,\"98\":2,\"100\":1,\"104\":1,\"105\":1,\"106\":2,\"108\":1,\"118\":1,\"122\":1,\"130\":1,\"135\":1,\"136\":1,\"139\":1,\"142\":1,\"148\":1,\"151\":1,\"155\":1,\"159\":1,\"166\":1,\"167\":1,\"168\":2,\"169\":2,\"170\":3,\"171\":2,\"172\":1,\"173\":1,\"174\":1,\"177\":1,\"178\":1,\"180\":2,\"182\":1,\"191\":1,\"192\":1,\"193\":2,\"196\":1,\"200\":1,\"201\":1,\"202\":2,\"206\":1,\"211\":1,\"213\":1,\"216\":1,\"227\":1,\"271\":1,\"274\":1,\"289\":1,\"295\":1,\"302\":1,\"304\":1,\"320\":1,\"336\":1,\"356\":1,\"359\":1,\"360\":2,\"362\":1,\"374\":1,\"396\":1,\"397\":1,\"398\":2,\"399\":1,\"400\":1,\"401\":1,\"402\":1,\"403\":2,\"405\":1,\"406\":1,\"407\":2,\"408\":1,\"409\":1,\"410\":1,\"414\":1,\"415\":1,\"416\":1,\"420\":1,\"421\":1,\"422\":2,\"423\":1,\"424\":1,\"427\":1,\"431\":1,\"437\":1,\"442\":1,\"443\":1,\"444\":2,\"447\":1,\"454\":1,\"455\":1,\"456\":1,\"457\":2,\"458\":2,\"459\":3,\"460\":2,\"461\":2,\"462\":2,\"463\":2,\"464\":2,\"465\":1,\"469\":1,\"470\":1,\"471\":2,\"472\":1,\"474\":2,\"477\":1,\"479\":1,\"480\":1,\"482\":2,\"483\":1,\"487\":1,\"543\":1,\"548\":1,\"557\":1,\"558\":1,\"559\":1,\"560\":2,\"564\":1,\"572\":1,\"574\":1,\"577\":1,\"581\":1,\"583\":1,\"584\":1,\"585\":2,\"593\":1,\"596\":1,\"602\":1,\"603\":1,\"616\":1,\"621\":1,\"630\":1,\"632\":1,\"696\":1,\"721\":1,\"739\":1,\"751\":1,\"755\":1,\"763\":1,\"766\":1,\"790\":1,\"799\":1,\"802\":1,\"810\":1,\"814\":1,\"816\":1,\"817\":1,\"818\":2,\"819\":1,\"822\":1,\"824\":1,\"826\":1,\"827\":1,\"828\":2,\"829\":1,\"833\":1,\"837\":2,\"840\":1,\"841\":1,\"842\":2,\"847\":1,\"854\":1,\"862\":1,\"867\":1,\"871\":1,\"872\":1,\"873\":2,\"875\":1,\"879\":1,\"880\":1,\"886\":1,\"893\":1,\"899\":1,\"905\":1,\"913\":1,\"914\":1,\"915\":2,\"916\":1,\"922\":1,\"927\":1,\"931\":1,\"935\":1,\"992\":1,\"1017\":1,\"1045\":1,\"1080\":1,\"1090\":1,\"1098\":1,\"1140\":1,\"1145\":1,\"1148\":1,\"1151\":1},\"1\":{\"21\":1,\"49\":1,\"61\":1,\"70\":2,\"71\":1,\"76\":2,\"81\":2,\"102\":1,\"105\":1,\"107\":6,\"108\":1,\"115\":1,\"122\":1,\"123\":1,\"126\":1,\"128\":1,\"129\":1,\"130\":4,\"136\":1,\"141\":1,\"143\":1,\"147\":1,\"153\":1,\"156\":4,\"157\":1,\"164\":1,\"167\":1,\"169\":1,\"172\":1,\"178\":3,\"179\":2,\"183\":3,\"196\":1,\"197\":1,\"202\":4,\"210\":1,\"219\":2,\"221\":1,\"223\":1,\"227\":1,\"229\":1,\"230\":1,\"231\":1,\"242\":2,\"252\":2,\"261\":2,\"267\":4,\"268\":1,\"283\":2,\"290\":3,\"293\":4,\"294\":3,\"301\":2,\"334\":2,\"352\":4,\"354\":1,\"359\":1,\"366\":1,\"372\":1,\"385\":2,\"388\":5,\"389\":1,\"397\":1,\"423\":1,\"429\":1,\"430\":1,\"431\":1,\"436\":1,\"440\":1,\"458\":4,\"459\":1,\"462\":1,\"466\":1,\"476\":2,\"477\":1,\"478\":1,\"483\":2,\"487\":3,\"488\":1,\"489\":2,\"495\":1,\"504\":1,\"505\":1,\"517\":1,\"528\":1,\"543\":1,\"556\":7,\"567\":1,\"575\":1,\"576\":1,\"591\":3,\"594\":1,\"598\":3,\"606\":1,\"607\":2,\"621\":1,\"625\":2,\"646\":1,\"648\":4,\"650\":1,\"658\":12,\"660\":5,\"671\":1,\"685\":4,\"686\":6,\"687\":9,\"688\":11,\"689\":1,\"691\":3,\"693\":1,\"694\":4,\"697\":3,\"712\":1,\"713\":2,\"715\":2,\"723\":1,\"724\":2,\"726\":1,\"739\":4,\"752\":1,\"755\":1,\"761\":1,\"762\":4,\"767\":1,\"775\":1,\"778\":1,\"779\":1,\"780\":3,\"784\":2,\"786\":1,\"798\":1,\"799\":1,\"802\":2,\"829\":1,\"830\":2,\"834\":1,\"835\":1,\"844\":1,\"845\":2,\"866\":1,\"867\":1,\"878\":3,\"905\":8,\"906\":2,\"908\":1,\"916\":1,\"917\":1,\"921\":2,\"922\":1,\"923\":2,\"924\":1,\"925\":21,\"929\":3,\"931\":3,\"932\":1,\"934\":2,\"935\":4,\"938\":2,\"945\":1,\"947\":1,\"948\":1,\"956\":1,\"959\":10,\"960\":1,\"961\":2,\"977\":2,\"980\":1,\"984\":1,\"985\":1,\"994\":2,\"1001\":1,\"1003\":1,\"1005\":9,\"1006\":3,\"1009\":2,\"1010\":3,\"1013\":1,\"1016\":1,\"1019\":1,\"1037\":2,\"1081\":1,\"1096\":1,\"1129\":1,\"1150\":1,\"1156\":1,\"1160\":1,\"1162\":1}}],[\"标在方法上\",{\"0\":{\"831\":1}}],[\"标识切面\",{\"1\":{\"492\":1}}],[\"标识都识别不了\",{\"1\":{\"219\":1}}],[\"标签可以有效地控制依赖的传递性\",{\"1\":{\"1010\":1}}],[\"标签可以控制依赖的传递性\",{\"1\":{\"871\":1,\"1010\":1}}],[\"标签来指定一个依赖是否是可选的\",{\"1\":{\"1010\":1}}],[\"标签\",{\"0\":{\"556\":1}}],[\"标签用于在\",{\"1\":{\"430\":1}}],[\"标签需按照下面这个顺序来\",{\"1\":{\"400\":1}}],[\"标签为\",{\"1\":{\"28\":1}}],[\"标准的事务隔离级别包括\",{\"1\":{\"905\":1}}],[\"标准的\",{\"1\":{\"882\":1}}],[\"标准错误输出\",{\"1\":{\"784\":1}}],[\"标准输出\",{\"1\":{\"784\":1}}],[\"标准输入\",{\"1\":{\"784\":1}}],[\"标准vm选项\",{\"1\":{\"383\":1}}],[\"标准解答\",{\"0\":{\"329\":1}}],[\"标志位\",{\"1\":{\"283\":1}}],[\"标题\",{\"1\":{\"552\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"27\":1}}],[\"标题和页面信息\",{\"1\":{\"5\":1}}],[\"标记所有从根对象可达的存活对象\",{\"1\":{\"385\":1}}],[\"标记\",{\"0\":{\"20\":1},\"1\":{\"385\":5,\"999\":1}}],[\"的能效\",{\"1\":{\"1162\":1}}],[\"的能力\",{\"1\":{\"638\":1,\"899\":2,\"900\":1,\"935\":1}}],[\"的功效\",{\"1\":{\"1162\":1}}],[\"的学习\",{\"1\":{\"1150\":1}}],[\"的基础\",{\"1\":{\"1150\":1}}],[\"的基础上实现的\",{\"1\":{\"712\":1}}],[\"的社会\",{\"1\":{\"1077\":1}}],[\"的信念一路拼到今天的\",{\"1\":{\"1077\":1}}],[\"的进程\",{\"1\":{\"1041\":1}}],[\"的环境变量\",{\"1\":{\"1038\":1}}],[\"的区分\",{\"1\":{\"1022\":1,\"1023\":1}}],[\"的区别是\",{\"1\":{\"924\":1}}],[\"的区别\",{\"0\":{\"411\":1}}],[\"的pom\",{\"1\":{\"1009\":1}}],[\"的顺序如下\",{\"1\":{\"1009\":1}}],[\"的远程文档库\",{\"1\":{\"1005\":1}}],[\"的自定义脚本\",{\"1\":{\"1005\":1}}],[\"的自启动服务\",{\"1\":{\"998\":1}}],[\"的模式在\",{\"1\":{\"1005\":1}}],[\"的作者的项目提交时\",{\"1\":{\"1005\":1}}],[\"的作用是\",{\"1\":{\"928\":1}}],[\"的作用\",{\"1\":{\"227\":1,\"352\":1}}],[\"的插件\",{\"1\":{\"1005\":1}}],[\"的快捷键是\",{\"1\":{\"1005\":2}}],[\"的快捷键配置\",{\"1\":{\"1005\":1}}],[\"的快捷键配置里你会看到四个键\",{\"1\":{\"1005\":1}}],[\"的快捷键改成\",{\"1\":{\"1005\":1}}],[\"的快照的\",{\"1\":{\"935\":1}}],[\"的详细版\",{\"1\":{\"1001\":1}}],[\"的startup\",{\"1\":{\"998\":1}}],[\"的set\",{\"1\":{\"411\":1}}],[\"的大部分场景都是\",{\"1\":{\"1005\":1}}],[\"的大小和清晰度\",{\"1\":{\"998\":1}}],[\"的大多数核心服务功能\",{\"1\":{\"892\":1}}],[\"的简写\",{\"1\":{\"997\":1}}],[\"的订阅地址\",{\"1\":{\"981\":1}}],[\"的效率比较低\",{\"1\":{\"970\":1}}],[\"的版本\",{\"1\":{\"959\":1}}],[\"的版本就好\",{\"1\":{\"213\":1}}],[\"的列值作为结果\",{\"1\":{\"959\":1}}],[\"的了\",{\"1\":{\"935\":2}}],[\"的查询之后\",{\"1\":{\"934\":1}}],[\"的查询复杂度\",{\"1\":{\"916\":1}}],[\"的默认值本身就是\",{\"1\":{\"932\":1}}],[\"的默认值是\",{\"1\":{\"932\":1}}],[\"的默认隔离级别\",{\"1\":{\"905\":2}}],[\"的账户余额增加这张电影票价\",{\"1\":{\"931\":1}}],[\"的主键\",{\"1\":{\"931\":1}}],[\"的主要目的是测试\",{\"1\":{\"609\":1}}],[\"的原因之一\",{\"1\":{\"927\":1}}],[\"的原子指令\",{\"1\":{\"302\":1}}],[\"的购买系统\",{\"1\":{\"927\":1}}],[\"的锁\",{\"1\":{\"926\":1,\"933\":14}}],[\"的组织是先按\",{\"1\":{\"925\":2}}],[\"的组件代码是轻量级的\",{\"1\":{\"726\":1}}],[\"的组件\",{\"1\":{\"483\":1}}],[\"的聚簇索引组织顺序相当于\",{\"1\":{\"925\":1}}],[\"的回复略作修改如下\",{\"1\":{\"925\":1}}],[\"的单字段索引\",{\"1\":{\"923\":1}}],[\"的语句都会被阻塞\",{\"1\":{\"928\":1}}],[\"的语句\",{\"1\":{\"923\":1}}],[\"的语法是这样的\",{\"1\":{\"786\":1}}],[\"的人\",{\"1\":{\"923\":1}}],[\"的人时\",{\"1\":{\"923\":1}}],[\"的索引又感觉有点浪费\",{\"1\":{\"923\":1}}],[\"的索引模型\",{\"0\":{\"917\":1}}],[\"的联合索引和一个\",{\"1\":{\"923\":1}}],[\"的联合索引\",{\"1\":{\"922\":1}}],[\"的做法是合理的\",{\"1\":{\"919\":1}}],[\"的表\",{\"1\":{\"917\":1,\"1079\":1}}],[\"的时间\",{\"1\":{\"916\":1}}],[\"的时候如无法\",{\"1\":{\"996\":1}}],[\"的时候需要在订阅地址后加上\",{\"1\":{\"981\":1}}],[\"的时候得是唯一键\",{\"1\":{\"961\":1}}],[\"的时候才释放的\",{\"1\":{\"931\":1}}],[\"的时候才创建\",{\"1\":{\"688\":1}}],[\"的时候\",{\"1\":{\"708\":1,\"896\":1,\"902\":2,\"905\":1,\"906\":1,\"916\":1,\"927\":1,\"932\":1,\"935\":1,\"1150\":1}}],[\"的时候报错\",{\"1\":{\"223\":1}}],[\"的身份证号\",{\"1\":{\"915\":1}}],[\"的第一个\",{\"1\":{\"915\":1}}],[\"的事务更新的\",{\"1\":{\"935\":1}}],[\"的事务系统申请的\",{\"1\":{\"935\":1}}],[\"的事务和锁有更进一步的理解\",{\"1\":{\"934\":1}}],[\"的事务特性\",{\"1\":{\"908\":1}}],[\"的事务隔离级别的现象和实现\",{\"1\":{\"908\":1}}],[\"的事务\",{\"1\":{\"907\":1}}],[\"的事务启动方式有以下几种\",{\"1\":{\"907\":1}}],[\"的命令\",{\"1\":{\"907\":1}}],[\"的库我保存在\",{\"1\":{\"1005\":1}}],[\"的库\",{\"1\":{\"906\":1}}],[\"的场景呢\",{\"1\":{\"905\":1}}],[\"的隔离级别设置为\",{\"1\":{\"905\":1}}],[\"的应用\",{\"1\":{\"905\":1}}],[\"的应用还不是很广泛\",{\"1\":{\"713\":1}}],[\"的角度看\",{\"1\":{\"905\":1}}],[\"的更新在提交后才能被\",{\"1\":{\"905\":1}}],[\"的行锁是在引擎层由各个引擎自己实现的\",{\"1\":{\"930\":1}}],[\"的行锁\",{\"1\":{\"930\":2,\"932\":2,\"933\":1}}],[\"的行\",{\"1\":{\"901\":1}}],[\"的写入拆成了两个步骤\",{\"1\":{\"900\":1}}],[\"的写法\",{\"1\":{\"226\":1}}],[\"的操作完成后才能进行更新\",{\"1\":{\"930\":1}}],[\"的操作\",{\"1\":{\"899\":1,\"928\":1,\"932\":1}}],[\"的操作api不变\",{\"1\":{\"147\":1}}],[\"的设计者就用了类似酒店掌柜粉板的思路来提升更新效率\",{\"1\":{\"899\":1}}],[\"的设计感觉一样\",{\"1\":{\"252\":1}}],[\"的字段需要有索引\",{\"1\":{\"970\":1}}],[\"的字段\",{\"1\":{\"897\":1,\"970\":1}}],[\"的字符串对象\",{\"1\":{\"724\":1}}],[\"的字符串stringobject2\",{\"1\":{\"723\":1}}],[\"的字符串\",{\"1\":{\"587\":2,\"724\":1}}],[\"的记录一条条取出来回表\",{\"1\":{\"924\":1}}],[\"的记录\",{\"1\":{\"921\":1,\"924\":1,\"956\":1,\"959\":1}}],[\"的记录后面插入一个新记录\",{\"1\":{\"918\":1}}],[\"的记录的\",{\"1\":{\"896\":2}}],[\"的记得要按照下面这样写\",{\"1\":{\"271\":1}}],[\"的这个特性\",{\"1\":{\"935\":1}}],[\"的这个功能\",{\"1\":{\"928\":1}}],[\"的这个报错突然醒悟\",{\"1\":{\"546\":1}}],[\"的这一行\",{\"1\":{\"893\":1}}],[\"的结果\",{\"1\":{\"893\":1,\"964\":1}}],[\"的结果才能执行\",{\"1\":{\"372\":1}}],[\"的错误提醒\",{\"1\":{\"895\":1}}],[\"的错误\",{\"1\":{\"893\":1,\"897\":1,\"1005\":1,\"1010\":1}}],[\"的情况\",{\"1\":{\"866\":1,\"935\":1,\"956\":1}}],[\"的情况下\",{\"1\":{\"572\":1,\"907\":1}}],[\"的压力会不会很大\",{\"1\":{\"824\":1}}],[\"的服务\",{\"1\":{\"823\":1}}],[\"的服务别名\",{\"1\":{\"566\":1}}],[\"的开源实现\",{\"1\":{\"818\":1}}],[\"的取值\",{\"1\":{\"802\":1}}],[\"的docker镜像的版本8\",{\"1\":{\"790\":1}}],[\"的dispatcherservlet\",{\"1\":{\"726\":1}}],[\"的可执行文件通常位于\",{\"1\":{\"782\":1}}],[\"的可执行文件在哪个目录下\",{\"1\":{\"782\":1}}],[\"的可视化界面\",{\"1\":{\"267\":1}}],[\"的输出运行日志\",{\"1\":{\"782\":1}}],[\"的思想\",{\"1\":{\"740\":1}}],[\"的前提是\",{\"1\":{\"739\":1}}],[\"的幂次则等价于与其除数减一的与\",{\"1\":{\"739\":1}}],[\"的幂次方\",{\"0\":{\"739\":1},\"1\":{\"739\":2}}],[\"的长度为什么是\",{\"0\":{\"739\":1},\"1\":{\"739\":2}}],[\"的封装\",{\"1\":{\"738\":1}}],[\"的任务并在后台执行该任务\",{\"1\":{\"730\":1}}],[\"的任务管理器\",{\"1\":{\"210\":1}}],[\"的配置要选\",{\"1\":{\"1005\":1}}],[\"的配置放在这里\",{\"1\":{\"1004\":1}}],[\"的配置\",{\"1\":{\"726\":1}}],[\"的配置文件\",{\"1\":{\"48\":1}}],[\"的技术\",{\"1\":{\"725\":1}}],[\"的intern\",{\"1\":{\"723\":1}}],[\"的实现逻辑\",{\"1\":{\"934\":1}}],[\"的实现来说\",{\"1\":{\"722\":1}}],[\"的实现类\",{\"1\":{\"585\":1}}],[\"的形式\",{\"1\":{\"901\":1}}],[\"的形式来存储键值对\",{\"1\":{\"722\":1}}],[\"的形式被添加进字符数组\",{\"1\":{\"720\":1}}],[\"的本质其实是一个char类型的数组\",{\"1\":{\"721\":1}}],[\"的源码\",{\"1\":{\"721\":1}}],[\"的源码在开头就可以看到\",{\"1\":{\"721\":1}}],[\"的源代码\",{\"1\":{\"634\":1}}],[\"的泛型是伪泛型\",{\"1\":{\"715\":1}}],[\"的编程模型复杂而且存在一些\",{\"1\":{\"713\":1}}],[\"的改进版\",{\"1\":{\"713\":1}}],[\"的执行效率\",{\"1\":{\"712\":1}}],[\"的执行是由操作系统的内核来完成的\",{\"1\":{\"709\":1}}],[\"的成员变量也会被默认赋值\",{\"1\":{\"696\":1}}],[\"的下一个指针指向元素\",{\"1\":{\"694\":1}}],[\"的下一个指针指向了元素\",{\"1\":{\"694\":1}}],[\"的下一个指针指向原来的第一个元素\",{\"1\":{\"694\":1}}],[\"的下一个指针又指向元素\",{\"1\":{\"694\":2}}],[\"的底层实现和hashset有点像\",{\"1\":{\"688\":1}}],[\"的底层逻辑要看个大概\",{\"1\":{\"159\":1}}],[\"的异同\",{\"1\":{\"687\":1}}],[\"的异步复制也是一种体现\",{\"1\":{\"572\":1}}],[\"的地方\",{\"1\":{\"686\":1}}],[\"的地址\",{\"1\":{\"595\":1}}],[\"的不然报错不准运行\",{\"1\":{\"686\":1}}],[\"的所有进程包括子进程\",{\"1\":{\"1041\":1}}],[\"的所有事务\",{\"1\":{\"935\":1}}],[\"的所有二进制都是1\",{\"1\":{\"681\":1}}],[\"的所有操作\",{\"1\":{\"268\":1}}],[\"的哈希函数怎么实现\",{\"0\":{\"681\":1}}],[\"的相应类型的缓存数据\",{\"1\":{\"647\":1}}],[\"的内存容量啊\",{\"1\":{\"1092\":1}}],[\"的内存泄漏问题\",{\"1\":{\"637\":1}}],[\"的内容从磁盘读到内存中\",{\"1\":{\"903\":1}}],[\"的内容\",{\"1\":{\"61\":1,\"895\":1}}],[\"的橙色部分\",{\"1\":{\"620\":1}}],[\"的优点\",{\"1\":{\"609\":1}}],[\"的消息来决定是执行事务提交还是回滚操作\",{\"1\":{\"609\":1}}],[\"的消费者不能把\",{\"1\":{\"566\":1}}],[\"的支持\",{\"1\":{\"594\":1,\"927\":1}}],[\"的请求\",{\"1\":{\"713\":1}}],[\"的请求路径\",{\"1\":{\"591\":1}}],[\"的请求失败\",{\"1\":{\"586\":1,\"587\":1}}],[\"的理解\",{\"1\":{\"572\":1}}],[\"的接班人\",{\"1\":{\"570\":1}}],[\"的域名写死\",{\"1\":{\"566\":1}}],[\"的东西\",{\"1\":{\"552\":1}}],[\"的解析深度限制\",{\"1\":{\"543\":1}}],[\"的依赖\",{\"1\":{\"1010\":3}}],[\"的依赖是以\",{\"1\":{\"1010\":1}}],[\"的依赖项\",{\"1\":{\"543\":1}}],[\"的依赖即可\",{\"0\":{\"523\":1}}],[\"的构造函数\",{\"1\":{\"543\":1}}],[\"的创建分为两个阶段\",{\"1\":{\"543\":1}}],[\"的循环依赖解析机制可以帮助开发人员处理循环依赖的情况\",{\"1\":{\"543\":1}}],[\"的其他\",{\"1\":{\"543\":1}}],[\"的需求\",{\"1\":{\"543\":1,\"923\":1}}],[\"的策略\",{\"1\":{\"543\":2}}],[\"的属性值将不会生效\",{\"1\":{\"543\":1}}],[\"的属性复制到\",{\"1\":{\"252\":1}}],[\"的文件到\",{\"1\":{\"799\":1,\"985\":1}}],[\"的文件全部改名\",{\"1\":{\"540\":1}}],[\"的文档和教程\",{\"1\":{\"153\":1}}],[\"的引用保存在字符串常量池中\",{\"1\":{\"723\":1}}],[\"的引用\",{\"1\":{\"538\":1,\"543\":1,\"723\":1,\"724\":1,\"1082\":1}}],[\"的日志来确认\",{\"1\":{\"908\":1}}],[\"的日志文件\",{\"1\":{\"899\":1,\"900\":1}}],[\"的日志输出\",{\"1\":{\"523\":1}}],[\"的日志级别\",{\"1\":{\"523\":1}}],[\"的具体值\",{\"1\":{\"522\":1}}],[\"的增强或通知\",{\"1\":{\"498\":1}}],[\"的全局锁和表级锁\",{\"1\":{\"929\":1,\"930\":1}}],[\"的全称是\",{\"1\":{\"899\":1}}],[\"的全称为\",{\"1\":{\"378\":1}}],[\"的全路径以及执行方法\",{\"1\":{\"492\":1}}],[\"的后置处理器\",{\"1\":{\"489\":1}}],[\"的子接口\",{\"1\":{\"486\":1}}],[\"的类进行了一次注入\",{\"1\":{\"507\":1}}],[\"的类\",{\"1\":{\"482\":1}}],[\"的堆栈信息定位业务代码\",{\"1\":{\"392\":1}}],[\"的堆空间\",{\"1\":{\"385\":1}}],[\"的说法\",{\"1\":{\"388\":1}}],[\"的核心特性\",{\"1\":{\"712\":1}}],[\"的核心\",{\"1\":{\"382\":1}}],[\"的感觉一样\",{\"1\":{\"576\":1}}],[\"的感觉\",{\"1\":{\"372\":1}}],[\"的问题\",{\"1\":{\"366\":1,\"867\":1,\"905\":1,\"907\":1}}],[\"的辅助工具类\",{\"1\":{\"359\":1}}],[\"的返回值分别是什么\",{\"1\":{\"905\":1}}],[\"的返回值\",{\"1\":{\"357\":1}}],[\"的变量值\",{\"1\":{\"284\":1}}],[\"的访问\",{\"1\":{\"626\":1,\"849\":1}}],[\"的访问权限\",{\"1\":{\"538\":1,\"1082\":1}}],[\"的访问方式\",{\"1\":{\"284\":1}}],[\"的访问次数\",{\"1\":{\"156\":1}}],[\"的定义需要我们手工编写\",{\"1\":{\"465\":1}}],[\"的定义还是比较简单的\",{\"1\":{\"272\":1}}],[\"的定时任务\",{\"1\":{\"200\":1}}],[\"的缩写\",{\"1\":{\"272\":1,\"790\":1,\"810\":1}}],[\"的初始内存和最大内存\",{\"1\":{\"267\":1}}],[\"的使用例子\",{\"1\":{\"267\":1}}],[\"的跨域\",{\"1\":{\"261\":1,\"466\":1}}],[\"的网站\",{\"1\":{\"253\":1}}],[\"的lambda表达式必须是\",{\"1\":{\"229\":1}}],[\"的报错\",{\"1\":{\"227\":1,\"1005\":1}}],[\"的桌面端组件库\",{\"1\":{\"223\":1}}],[\"的数字都会从缓存中获取\",{\"1\":{\"686\":1}}],[\"的数据出来\",{\"1\":{\"935\":1}}],[\"的数据状态是\",{\"1\":{\"927\":1}}],[\"的数据是一模一样的\",{\"1\":{\"925\":1}}],[\"的数据行进行加锁\",{\"1\":{\"906\":1}}],[\"的数据行加悲观锁\",{\"1\":{\"81\":1,\"906\":1}}],[\"的数据到内存时\",{\"1\":{\"899\":1}}],[\"的数据\",{\"0\":{\"951\":1},\"1\":{\"867\":1,\"935\":1}}],[\"的数据也丢失\",{\"1\":{\"682\":1}}],[\"的数据被覆盖\",{\"1\":{\"682\":1}}],[\"的数量\",{\"1\":{\"363\":1}}],[\"的数组\",{\"1\":{\"220\":1}}],[\"的教程入门一下\",{\"1\":{\"208\":1}}],[\"的散列\",{\"1\":{\"208\":1}}],[\"的见解\",{\"1\":{\"202\":1}}],[\"的一样的依葫芦画瓢\",{\"1\":{\"583\":1}}],[\"的一致性就是强一致性\",{\"1\":{\"571\":1}}],[\"的一些标准信息\",{\"1\":{\"244\":1}}],[\"的一种分布式解决方案\",{\"1\":{\"186\":1}}],[\"的一个文件\",{\"1\":{\"987\":1}}],[\"的一个整数字段索引为例\",{\"1\":{\"916\":1}}],[\"的一个日志门面\",{\"1\":{\"740\":1}}],[\"的一个加强\",{\"1\":{\"594\":1}}],[\"的一个开源项目\",{\"1\":{\"393\":1}}],[\"的一个客户端\",{\"1\":{\"112\":1}}],[\"的一个优点是在浏览器会话结束后\",{\"1\":{\"49\":1}}],[\"的话记得配\",{\"1\":{\"871\":1}}],[\"的话通过设置参数设置\",{\"1\":{\"392\":1}}],[\"的话\",{\"1\":{\"186\":1,\"572\":1,\"593\":1,\"916\":1,\"972\":2}}],[\"的来\",{\"1\":{\"179\":1}}],[\"的代码放过来了\",{\"1\":{\"179\":1}}],[\"的缘故\",{\"1\":{\"179\":1}}],[\"的方法\",{\"1\":{\"584\":1}}],[\"的方法都会经过\",{\"1\":{\"231\":1}}],[\"的方法里面调用的另外的方法也用了\",{\"1\":{\"178\":1}}],[\"的方式声明的\",{\"1\":{\"1010\":1}}],[\"的方式声明一个字符串\",{\"1\":{\"725\":1}}],[\"的方式呢\",{\"1\":{\"927\":1}}],[\"的方式组织在线程的虚拟机栈中\",{\"1\":{\"778\":1}}],[\"的方式进行组合\",{\"1\":{\"277\":1}}],[\"的方式完成远程调用\",{\"1\":{\"208\":1}}],[\"的方式\",{\"1\":{\"125\":1,\"366\":1,\"696\":1,\"894\":1}}],[\"的提出\",{\"1\":{\"169\":1}}],[\"的弱引用\",{\"1\":{\"157\":1}}],[\"的过期时间延长\",{\"1\":{\"152\":1}}],[\"的java客户端\",{\"1\":{\"112\":1}}],[\"的难点\",{\"1\":{\"111\":1}}],[\"的计算了\",{\"1\":{\"101\":1}}],[\"的响\",{\"1\":{\"100\":1}}],[\"的最大值加\",{\"1\":{\"935\":1}}],[\"的最大时间\",{\"1\":{\"100\":1}}],[\"的最小值记为低水位\",{\"1\":{\"935\":1}}],[\"的最少时间\",{\"1\":{\"100\":1}}],[\"的值会被用来做其他逻辑\",{\"1\":{\"927\":1}}],[\"的值已经在\",{\"1\":{\"922\":1}}],[\"的值为false\",{\"0\":{\"940\":1}}],[\"的值为\",{\"0\":{\"940\":1},\"1\":{\"917\":1,\"959\":1}}],[\"的值并不是递增的\",{\"1\":{\"914\":1}}],[\"的值设置成\",{\"1\":{\"905\":1}}],[\"的值也是\",{\"1\":{\"905\":1}}],[\"的值就是\",{\"1\":{\"901\":2,\"905\":1}}],[\"的值是\",{\"1\":{\"901\":3,\"905\":2,\"934\":2,\"935\":1}}],[\"的值是否等于\",{\"1\":{\"896\":2}}],[\"的值\",{\"0\":{\"721\":1},\"1\":{\"721\":1,\"743\":2,\"918\":1,\"922\":1,\"924\":2,\"1101\":2}}],[\"的值加上\",{\"1\":{\"539\":1}}],[\"的值不存在才能设置成功\",{\"1\":{\"87\":1}}],[\"的值越大\",{\"1\":{\"76\":1}}],[\"的值越大越好才对\",{\"1\":{\"76\":1}}],[\"的值越小越好显然是不对的\",{\"1\":{\"76\":1}}],[\"的外挂都是\",{\"1\":{\"87\":1}}],[\"的特性\",{\"1\":{\"79\":1,\"961\":1}}],[\"的分布式对象的\",{\"1\":{\"78\":1}}],[\"的意思就是数据包的生存时间\",{\"1\":{\"76\":1}}],[\"的概念后\",{\"1\":{\"935\":1}}],[\"的概念08丨事务到底是隔离的还是不隔离的\",{\"1\":{\"902\":1}}],[\"的概念\",{\"0\":{\"72\":1},\"1\":{\"712\":1,\"905\":1,\"934\":1}}],[\"的只要一直在操作就不会过期而\",{\"1\":{\"70\":1}}],[\"的超时时间\",{\"1\":{\"48\":1}}],[\"的\",{\"0\":{\"740\":1},\"1\":{\"18\":1,\"27\":1,\"28\":1,\"61\":1,\"92\":2,\"105\":1,\"123\":1,\"152\":1,\"183\":1,\"191\":1,\"215\":1,\"231\":1,\"238\":1,\"240\":1,\"354\":1,\"378\":1,\"392\":1,\"482\":2,\"543\":1,\"554\":1,\"568\":2,\"570\":1,\"576\":1,\"598\":1,\"614\":1,\"645\":1,\"682\":1,\"713\":1,\"722\":1,\"726\":1,\"739\":1,\"782\":1,\"824\":1,\"849\":1,\"860\":1,\"868\":3,\"877\":1,\"899\":1,\"900\":2,\"903\":1,\"908\":2,\"916\":1,\"917\":1,\"922\":1,\"928\":2,\"929\":3,\"931\":2,\"1005\":2,\"1006\":1,\"1010\":1,\"1018\":1,\"1131\":1,\"1152\":1}}],[\"ivk\",{\"1\":{\"1157\":1}}],[\"ia\",{\"1\":{\"1005\":4}}],[\"iadd命令\",{\"1\":{\"290\":1}}],[\"iadd\",{\"1\":{\"290\":2,\"388\":1,\"644\":1}}],[\"iina\",{\"1\":{\"996\":1,\"1003\":1}}],[\"iinc\",{\"1\":{\"778\":1}}],[\"ignores\",{\"1\":{\"993\":1}}],[\"ignore\",{\"1\":{\"993\":1,\"1005\":1}}],[\"ibdata\",{\"1\":{\"906\":1}}],[\"ibatis\",{\"1\":{\"393\":1,\"402\":4}}],[\"i<100\",{\"1\":{\"769\":1}}],[\"illegalaccessexception\",{\"1\":{\"721\":1}}],[\"iload\",{\"1\":{\"388\":1,\"644\":1,\"778\":1}}],[\"i=l\",{\"1\":{\"1085\":1}}],[\"i=1\",{\"1\":{\"778\":1}}],[\"i=i+1\",{\"1\":{\"778\":1}}],[\"i=0\",{\"1\":{\"769\":1}}],[\"i=\",{\"0\":{\"670\":1},\"1\":{\"670\":1,\"778\":1,\"780\":2,\"1005\":1}}],[\"i++后\",{\"1\":{\"778\":1}}],[\"i++也是一个表达式\",{\"1\":{\"778\":1}}],[\"i++\",{\"0\":{\"644\":1},\"1\":{\"304\":1,\"334\":1,\"335\":1,\"338\":1,\"339\":1,\"343\":1,\"352\":6,\"769\":1,\"778\":6,\"1085\":4}}],[\"icloud\",{\"1\":{\"1164\":1}}],[\"icon和窗口的大小\",{\"1\":{\"998\":1}}],[\"iconst\",{\"1\":{\"290\":1,\"388\":3}}],[\"ico\",{\"1\":{\"540\":1,\"1084\":2}}],[\"icmp用于诊断网络故障\",{\"1\":{\"76\":1}}],[\"icmp并不是以ip形式交互数据包的协议\",{\"1\":{\"76\":1}}],[\"icmp\",{\"0\":{\"76\":1},\"1\":{\"76\":2,\"688\":1}}],[\"ik\",{\"1\":{\"281\":3}}],[\"ie=edge\",{\"1\":{\"220\":1}}],[\"isudox\",{\"1\":{\"1005\":1}}],[\"isusekeyprefix\",{\"1\":{\"125\":1}}],[\"ishot\",{\"1\":{\"996\":1}}],[\"ismale=1\",{\"1\":{\"924\":1}}],[\"isyslogininforservice\",{\"1\":{\"884\":2}}],[\"istrue\",{\"1\":{\"876\":2}}],[\"istore\",{\"1\":{\"388\":3,\"644\":1,\"778\":1}}],[\"isnotblank\",{\"1\":{\"876\":1}}],[\"isnull支持索引但是isnotnull不支持\",{\"1\":{\"923\":1}}],[\"isnull\",{\"1\":{\"624\":1,\"959\":2}}],[\"isempty\",{\"1\":{\"252\":1}}],[\"iservice<t>\",{\"1\":{\"229\":1}}],[\"issue\",{\"0\":{\"249\":1}}],[\"isinteger\",{\"1\":{\"237\":1}}],[\"isolation\",{\"1\":{\"177\":1,\"178\":2,\"257\":2,\"905\":4,\"906\":1,\"929\":1,\"962\":1}}],[\"is\",{\"0\":{\"654\":1},\"1\":{\"156\":1,\"179\":1,\"317\":1,\"362\":4,\"625\":1,\"655\":1,\"657\":1,\"730\":1,\"869\":2,\"923\":5,\"947\":3,\"981\":1,\"994\":1,\"1017\":2,\"1084\":1}}],[\"iscachenullvalues\",{\"1\":{\"125\":1}}],[\"ios删除app后不是没有残留了吗\",{\"1\":{\"1162\":1}}],[\"ios一台手机特别丑还不显示中文\",{\"1\":{\"1162\":1}}],[\"ios\",{\"0\":{\"1163\":1},\"1\":{\"1150\":1}}],[\"io多路复用通过使用特定的系统调用\",{\"1\":{\"849\":1}}],[\"io流部分\",{\"1\":{\"687\":1}}],[\"io流\",{\"1\":{\"686\":1,\"688\":1}}],[\"ioc容器\",{\"1\":{\"688\":1}}],[\"ioc容器基本实现是spring内部接口的使用接口\",{\"1\":{\"486\":1}}],[\"ioc的过程中\",{\"1\":{\"517\":1}}],[\"ioc\",{\"1\":{\"498\":2,\"507\":1,\"740\":1}}],[\"ioc操作bean管理\",{\"0\":{\"487\":1}}],[\"ioexception\",{\"1\":{\"182\":1,\"402\":2,\"632\":1,\"686\":1,\"779\":1,\"890\":1}}],[\"io\",{\"0\":{\"710\":1},\"1\":{\"99\":1,\"402\":3,\"477\":1,\"554\":1,\"567\":1,\"594\":3,\"709\":9,\"711\":2,\"712\":10,\"713\":2,\"877\":1,\"899\":1,\"916\":1,\"1041\":2,\"1150\":1,\"1161\":1}}],[\"iml\",{\"1\":{\"993\":1}}],[\"imagse\",{\"1\":{\"796\":1}}],[\"imagemagick\",{\"1\":{\"1003\":1}}],[\"images\",{\"1\":{\"825\":1,\"1155\":1}}],[\"imagebase64\",{\"1\":{\"512\":1}}],[\"image>\",{\"1\":{\"223\":2}}],[\"image\",{\"1\":{\"61\":1,\"76\":1,\"79\":3,\"80\":1,\"83\":1,\"88\":1,\"92\":1,\"93\":1,\"100\":1,\"112\":1,\"141\":1,\"161\":1,\"190\":1,\"207\":2,\"210\":1,\"211\":1,\"229\":2,\"230\":2,\"231\":3,\"238\":1,\"240\":1,\"242\":1,\"250\":1,\"254\":1,\"255\":1,\"256\":1,\"264\":1,\"280\":1,\"287\":1,\"290\":1,\"296\":1,\"304\":1,\"305\":1,\"350\":1,\"352\":1,\"392\":1,\"403\":1,\"443\":1,\"450\":1,\"451\":1,\"456\":2,\"465\":8,\"485\":4,\"499\":2,\"526\":1,\"546\":2,\"553\":3,\"554\":2,\"557\":1,\"559\":2,\"565\":1,\"591\":2,\"593\":1,\"594\":2,\"598\":2,\"622\":1,\"623\":1,\"646\":1,\"693\":1,\"695\":1,\"704\":1,\"706\":3,\"711\":1,\"712\":3,\"713\":2,\"720\":1,\"722\":2,\"724\":2,\"725\":2,\"731\":1,\"736\":1,\"743\":1,\"761\":1,\"778\":1,\"784\":1,\"800\":1,\"802\":3,\"810\":1,\"813\":1,\"814\":1,\"823\":1,\"841\":1,\"843\":1,\"854\":4,\"855\":1,\"856\":1,\"857\":1,\"863\":2,\"870\":1,\"871\":1,\"874\":1,\"875\":1,\"876\":2,\"879\":1,\"962\":1,\"970\":1,\"971\":1,\"990\":1,\"1009\":1,\"1045\":1,\"1051\":1,\"1074\":1,\"1084\":1,\"1101\":1,\"1161\":3}}],[\"imegse\",{\"1\":{\"512\":2}}],[\"impl\",{\"1\":{\"377\":1,\"1010\":1}}],[\"implementation\",{\"1\":{\"108\":1,\"111\":1,\"112\":1,\"468\":1}}],[\"implements\",{\"1\":{\"97\":1,\"156\":1,\"157\":1,\"229\":2,\"486\":1,\"489\":1,\"534\":2,\"538\":1,\"624\":2,\"683\":1,\"686\":1,\"688\":2,\"1081\":1,\"1082\":1}}],[\"import注解功能\",{\"1\":{\"731\":1}}],[\"important\",{\"1\":{\"599\":1}}],[\"import公共模块的实体类导致lombok的注解失效\",{\"1\":{\"546\":1}}],[\"importresource\",{\"0\":{\"518\":1}}],[\"import命令用于导入其他模块提供的功能\",{\"1\":{\"217\":1}}],[\"import\",{\"0\":{\"483\":1,\"509\":1},\"1\":{\"151\":1,\"217\":1,\"223\":2,\"233\":2,\"352\":3,\"402\":6,\"478\":2,\"538\":2,\"540\":2,\"568\":1,\"752\":1,\"762\":1,\"765\":2,\"766\":2,\"767\":2,\"768\":2,\"770\":1,\"771\":2,\"850\":1,\"851\":1,\"852\":1,\"1005\":1,\"1082\":2,\"1095\":1}}],[\"img\",{\"1\":{\"136\":1,\"143\":1,\"144\":1,\"145\":1,\"381\":1,\"388\":7,\"572\":3,\"590\":1,\"597\":1,\"598\":1,\"599\":3,\"606\":2,\"617\":1,\"619\":1,\"620\":1,\"625\":1,\"629\":1,\"630\":1,\"666\":1,\"723\":1,\"740\":1,\"786\":1,\"805\":3,\"879\":1,\"893\":1,\"936\":1,\"961\":1,\"990\":1,\"1084\":1,\"1155\":1,\"1160\":5}}],[\"ipad\",{\"1\":{\"1164\":1}}],[\"ipad还得谢谢我妈妈和嫂嫂的资金支持\",{\"1\":{\"1164\":1}}],[\"ipad右下角拉出快速备忘录\",{\"1\":{\"1163\":1}}],[\"ipados\",{\"0\":{\"1163\":1}}],[\"ipinfo\",{\"1\":{\"1041\":2}}],[\"ipconfig\",{\"1\":{\"1005\":3,\"1041\":1}}],[\"ip=\",{\"1\":{\"1005\":2}}],[\"ip限流\",{\"1\":{\"887\":1}}],[\"ip参考模型\",{\"1\":{\"688\":2}}],[\"ip和端口号\",{\"1\":{\"688\":1}}],[\"iphone\",{\"1\":{\"118\":1,\"1164\":1}}],[\"ip\",{\"1\":{\"71\":1,\"76\":1,\"208\":1,\"492\":2,\"688\":3,\"810\":1,\"861\":1,\"866\":1,\"1013\":1,\"1041\":3,\"1084\":1,\"1097\":1}}],[\"if语句\",{\"1\":{\"1150\":1}}],[\"ifnull\",{\"1\":{\"939\":1}}],[\"if>\",{\"1\":{\"430\":5,\"432\":4,\"434\":6,\"438\":4,\"440\":2}}],[\"if条件\",{\"1\":{\"88\":1}}],[\"if\",{\"0\":{\"430\":1,\"939\":1,\"940\":2,\"1059\":1},\"1\":{\"47\":1,\"103\":1,\"125\":4,\"128\":3,\"130\":1,\"182\":1,\"220\":5,\"234\":1,\"237\":1,\"252\":1,\"269\":2,\"295\":1,\"301\":3,\"302\":2,\"317\":1,\"327\":1,\"328\":1,\"329\":8,\"362\":1,\"430\":2,\"483\":1,\"540\":1,\"624\":1,\"646\":1,\"686\":1,\"718\":1,\"720\":2,\"766\":1,\"767\":1,\"768\":1,\"779\":6,\"850\":1,\"851\":1,\"879\":1,\"940\":1,\"948\":1,\"959\":1,\"1005\":1,\"1074\":3,\"1084\":6,\"1085\":7,\"1086\":1}}],[\"i\",{\"0\":{\"670\":1,\"711\":1,\"712\":1,\"713\":1},\"1\":{\"30\":1,\"179\":1,\"290\":2,\"334\":3,\"335\":3,\"338\":4,\"339\":4,\"343\":3,\"352\":15,\"658\":5,\"670\":3,\"680\":2,\"681\":1,\"686\":5,\"691\":2,\"693\":1,\"709\":4,\"711\":1,\"712\":19,\"713\":1,\"769\":1,\"778\":6,\"780\":3,\"782\":1,\"801\":1,\"849\":2,\"905\":1,\"916\":1,\"961\":1,\"962\":1,\"997\":3,\"1005\":3,\"1085\":29,\"1161\":1}}],[\"in关键字限制搜索范围\",{\"1\":{\"985\":1}}],[\"inventoryadjustdetail\",{\"1\":{\"938\":3}}],[\"invoke\",{\"1\":{\"715\":1}}],[\"inetaddress类\",{\"1\":{\"688\":1}}],[\"increment\",{\"1\":{\"918\":1}}],[\"incr\",{\"1\":{\"887\":1}}],[\"incorrectly\",{\"1\":{\"483\":1}}],[\"include所包含的是子配置文件\",{\"1\":{\"810\":1}}],[\"include=\",{\"1\":{\"600\":1}}],[\"includepatterns\",{\"1\":{\"534\":1}}],[\"include还可以自定义一些property\",{\"1\":{\"440\":1}}],[\"include来引用已经抽取的sql\",{\"1\":{\"440\":1}}],[\"includes>\",{\"1\":{\"397\":1}}],[\"include>\",{\"1\":{\"397\":1,\"437\":1,\"440\":1}}],[\"include\",{\"1\":{\"71\":1,\"72\":1,\"229\":1,\"247\":1,\"440\":1,\"460\":1,\"861\":1}}],[\"infuse\",{\"1\":{\"1003\":1}}],[\"inf和我自己的项目代码的目录\",{\"1\":{\"559\":1}}],[\"inf\",{\"1\":{\"460\":1,\"478\":1,\"483\":3,\"559\":2,\"731\":2}}],[\"information\",{\"1\":{\"893\":2,\"907\":2,\"908\":1,\"928\":1}}],[\"info`\",{\"1\":{\"257\":1}}],[\"info\",{\"1\":{\"202\":1,\"216\":1,\"257\":1,\"492\":9,\"554\":1,\"593\":2,\"730\":2,\"779\":5,\"997\":2}}],[\"indices\",{\"1\":{\"265\":1,\"270\":1}}],[\"indexes\",{\"1\":{\"974\":1}}],[\"index\",{\"1\":{\"71\":3,\"73\":5,\"88\":1,\"125\":1,\"223\":2,\"268\":1,\"436\":1,\"795\":2,\"810\":3,\"917\":3,\"919\":2,\"921\":1,\"924\":1,\"936\":2,\"959\":6,\"990\":1,\"1085\":1,\"1161\":1}}],[\"inactive\",{\"1\":{\"220\":1}}],[\"initrabbittemplate\",{\"1\":{\"836\":1}}],[\"init调用自定义的初始化方法\",{\"1\":{\"489\":1}}],[\"initializer\",{\"1\":{\"679\":1}}],[\"initialization\",{\"1\":{\"679\":1}}],[\"initial\",{\"1\":{\"220\":1,\"703\":1}}],[\"init\",{\"1\":{\"211\":2,\"219\":1,\"222\":2,\"459\":4,\"489\":2,\"706\":1,\"987\":1,\"1005\":3,\"1161\":1}}],[\"inttodoublefunction\",{\"1\":{\"770\":1}}],[\"inttolongfunction\",{\"1\":{\"770\":1}}],[\"intfunction<r>\",{\"1\":{\"770\":1}}],[\"intconsumer\",{\"1\":{\"770\":1}}],[\"intpredicate\",{\"1\":{\"770\":1}}],[\"intvalue\",{\"1\":{\"686\":1}}],[\"introspect\",{\"1\":{\"638\":1}}],[\"into\",{\"1\":{\"437\":2,\"440\":1,\"905\":1,\"921\":1,\"934\":1,\"959\":2,\"973\":4}}],[\"int类型的值取出\",{\"1\":{\"388\":1}}],[\"int\",{\"0\":{\"643\":1},\"1\":{\"179\":1,\"220\":1,\"242\":1,\"290\":1,\"293\":2,\"294\":1,\"295\":1,\"334\":1,\"335\":1,\"338\":1,\"339\":1,\"343\":1,\"352\":7,\"374\":1,\"388\":6,\"403\":1,\"643\":2,\"646\":1,\"648\":5,\"653\":1,\"658\":9,\"670\":1,\"671\":1,\"680\":5,\"685\":6,\"686\":8,\"688\":3,\"691\":5,\"702\":1,\"720\":1,\"751\":9,\"752\":9,\"754\":2,\"762\":2,\"763\":3,\"769\":1,\"770\":7,\"771\":3,\"778\":3,\"780\":5,\"850\":1,\"851\":2,\"852\":2,\"898\":2,\"905\":1,\"917\":2,\"920\":3,\"921\":2,\"922\":2,\"925\":4,\"934\":2,\"1085\":17}}],[\"intellij\",{\"1\":{\"537\":4,\"1005\":1}}],[\"integer\",{\"1\":{\"242\":1,\"338\":1,\"339\":1,\"363\":1,\"366\":2,\"374\":2,\"415\":2,\"419\":1,\"427\":2,\"647\":1,\"671\":2,\"686\":5,\"716\":3,\"780\":2}}],[\"integration\",{\"1\":{\"120\":1,\"468\":1,\"994\":1}}],[\"interval\",{\"1\":{\"889\":1,\"952\":2}}],[\"interviewmv\",{\"0\":{\"777\":1}}],[\"interview\",{\"0\":{\"633\":1}}],[\"interrupt\",{\"1\":{\"851\":1}}],[\"interruptedexception\",{\"1\":{\"202\":1,\"335\":1,\"338\":1,\"342\":1,\"343\":1,\"650\":1,\"851\":1}}],[\"interactive\",{\"1\":{\"790\":1}}],[\"internetshortcut\",{\"1\":{\"1041\":1}}],[\"intern\",{\"0\":{\"723\":1},\"1\":{\"723\":4,\"724\":2}}],[\"internal\",{\"1\":{\"520\":2}}],[\"internalresourceviewresolver\",{\"1\":{\"460\":1}}],[\"internallockleasetime\",{\"1\":{\"115\":1}}],[\"interpreter\",{\"1\":{\"635\":1}}],[\"interfaces\",{\"1\":{\"752\":1,\"762\":1}}],[\"interface\",{\"0\":{\"669\":1},\"1\":{\"241\":1,\"492\":1,\"576\":1,\"613\":1,\"686\":2,\"740\":2,\"751\":6,\"763\":2}}],[\"intercepts注解完成插件签名\",{\"1\":{\"465\":1}}],[\"interceptorregistry\",{\"1\":{\"534\":3}}],[\"interceptors\",{\"1\":{\"465\":1}}],[\"interceptor\",{\"1\":{\"156\":1,\"465\":3,\"890\":1}}],[\"intercept\",{\"1\":{\"156\":1,\"534\":1}}],[\"inheritablethreadlocal<map<string\",{\"1\":{\"157\":2}}],[\"inheritablethreadlocal是java提供的一个用于在父线程和子线程之间传递threadlocal变量值的工具类\",{\"1\":{\"157\":1}}],[\"inheritablethreadlocal解决completablefuture丢失threadlocal\",{\"1\":{\"157\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"157\":1}}],[\"inspection\",{\"1\":{\"1005\":1}}],[\"instructional\",{\"1\":{\"869\":1}}],[\"install=\",{\"1\":{\"1005\":1}}],[\"install成jar包供外面用\",{\"1\":{\"561\":1}}],[\"install\",{\"0\":{\"1050\":1},\"1\":{\"215\":1,\"219\":3,\"222\":2,\"223\":1,\"233\":1,\"561\":1,\"801\":2,\"810\":1,\"857\":1,\"994\":5,\"1003\":4,\"1005\":5,\"1041\":2}}],[\"instance来访问\",{\"1\":{\"700\":1}}],[\"instance的引用对象\",{\"1\":{\"301\":1}}],[\"instance\",{\"1\":{\"125\":1,\"301\":11,\"302\":5,\"317\":2,\"459\":1,\"460\":1,\"462\":1,\"591\":1,\"700\":2,\"717\":1,\"718\":4,\"779\":16,\"876\":1}}],[\"insufficient\",{\"1\":{\"182\":1}}],[\"insertlogininfor\",{\"1\":{\"884\":1}}],[\"insertcolumn\",{\"1\":{\"437\":1,\"440\":2}}],[\"insert><\",{\"1\":{\"437\":1}}],[\"insert>\",{\"1\":{\"404\":1,\"437\":1}}],[\"insert\",{\"0\":{\"1050\":1},\"1\":{\"165\":1,\"403\":3,\"404\":1,\"437\":2,\"440\":1,\"905\":1,\"921\":1,\"931\":1,\"934\":1,\"959\":2,\"973\":4}}],[\"insecure\",{\"1\":{\"47\":1}}],[\"innodb的默认数据结构\",{\"1\":{\"936\":1}}],[\"innodb\",{\"0\":{\"917\":1},\"1\":{\"81\":1,\"892\":4,\"897\":1,\"899\":7,\"900\":7,\"902\":2,\"903\":3,\"904\":2,\"906\":1,\"907\":2,\"908\":2,\"913\":1,\"916\":3,\"917\":5,\"919\":4,\"921\":1,\"924\":2,\"925\":1,\"927\":1,\"928\":2,\"929\":1,\"930\":3,\"931\":1,\"932\":8,\"934\":3,\"935\":5,\"936\":1}}],[\"inner\",{\"1\":{\"321\":1,\"779\":2}}],[\"innertext\",{\"1\":{\"61\":1}}],[\"innerhtml\",{\"1\":{\"61\":1}}],[\"inputstream\",{\"1\":{\"402\":4}}],[\"input\",{\"1\":{\"61\":1,\"1006\":1,\"1019\":2}}],[\"in\",{\"1\":{\"27\":1,\"60\":1,\"220\":3,\"362\":2,\"436\":1,\"540\":4,\"634\":1,\"717\":1,\"784\":1,\"895\":2,\"897\":1,\"938\":1,\"941\":4,\"943\":1,\"948\":2,\"959\":1,\"985\":1,\"996\":1,\"1005\":2,\"1009\":3,\"1084\":9}}],[\"id字段\",{\"1\":{\"972\":1}}],[\"id字段一定是主键或者唯一索引\",{\"1\":{\"169\":1}}],[\"id被隐藏的列还有trx\",{\"1\":{\"972\":1}}],[\"id列\",{\"1\":{\"972\":1}}],[\"id5\",{\"1\":{\"924\":1}}],[\"id3\",{\"1\":{\"923\":1,\"924\":2}}],[\"id4\",{\"1\":{\"923\":1,\"924\":1}}],[\"id>10000\",{\"1\":{\"963\":1}}],[\"id>\",{\"1\":{\"876\":1,\"1013\":3}}],[\"ide\",{\"1\":{\"1005\":1}}],[\"identityfile\",{\"1\":{\"1005\":1}}],[\"identified\",{\"1\":{\"792\":1,\"793\":1,\"802\":2,\"803\":1}}],[\"idea右侧工具栏没有显示maven的时候\",{\"1\":{\"1074\":1}}],[\"idea新建一行\",{\"0\":{\"1070\":1}}],[\"idea控制台有\",{\"1\":{\"616\":1}}],[\"idea的配置\",{\"1\":{\"554\":1}}],[\"idea的jrebel插件和resetfultool插件至少能提高一半的学习效率\",{\"1\":{\"261\":1}}],[\"idea设置程序根目录\",{\"0\":{\"537\":1}}],[\"idea报错信息\",{\"1\":{\"260\":1}}],[\"idea占用内存过大\",{\"0\":{\"254\":1}}],[\"idea\",{\"0\":{\"396\":1,\"555\":1,\"1052\":1,\"1057\":1},\"1\":{\"78\":1,\"101\":1,\"107\":1,\"229\":1,\"522\":1,\"537\":4,\"546\":1,\"610\":1,\"796\":1,\"987\":1,\"993\":1,\"996\":2,\"1005\":3,\"1079\":1,\"1080\":2,\"1150\":1}}],[\"id一定要加后缀\",{\"1\":{\"598\":1}}],[\"idutil\",{\"1\":{\"587\":2}}],[\"ids\",{\"1\":{\"436\":1}}],[\"id值去部门表查出部门信息\",{\"1\":{\"423\":1}}],[\"idle\",{\"1\":{\"362\":2}}],[\"idtype\",{\"1\":{\"229\":3}}],[\"id=c\",{\"1\":{\"959\":2}}],[\"id=300\",{\"1\":{\"921\":1}}],[\"id=500\",{\"1\":{\"917\":1,\"921\":2}}],[\"id=other\",{\"1\":{\"598\":1}}],[\"id=mybatis\",{\"1\":{\"598\":1}}],[\"id=datasource\",{\"1\":{\"598\":1}}],[\"id=d\",{\"1\":{\"429\":1}}],[\"id=e\",{\"1\":{\"426\":1}}],[\"id=666\",{\"1\":{\"233\":1}}],[\"id=\",{\"1\":{\"220\":4,\"221\":1,\"242\":1,\"400\":1,\"404\":1,\"408\":1,\"415\":1,\"416\":1,\"419\":3,\"421\":2,\"422\":3,\"423\":3,\"426\":3,\"427\":5,\"429\":5,\"430\":1,\"432\":2,\"433\":2,\"434\":3,\"436\":1,\"437\":2,\"438\":1,\"440\":1,\"462\":7,\"487\":1,\"489\":2,\"878\":1}}],[\"id=2\",{\"1\":{\"170\":1,\"242\":1,\"898\":2,\"900\":4,\"901\":1,\"906\":1,\"932\":1}}],[\"id=10\",{\"1\":{\"894\":1,\"897\":1}}],[\"id=123这类自定义参数\",{\"1\":{\"192\":1}}],[\"id=1\",{\"1\":{\"169\":1,\"895\":2,\"932\":1}}],[\"id时候没有加后缀\",{\"1\":{\"150\":1}}],[\"id\",{\"0\":{\"972\":1},\"1\":{\"18\":1,\"69\":1,\"71\":3,\"81\":2,\"105\":3,\"152\":4,\"155\":3,\"156\":1,\"169\":2,\"174\":1,\"229\":4,\"236\":2,\"241\":1,\"242\":1,\"268\":1,\"404\":1,\"415\":4,\"416\":1,\"419\":4,\"421\":9,\"422\":6,\"423\":4,\"426\":7,\"427\":5,\"429\":8,\"430\":4,\"432\":2,\"433\":2,\"434\":2,\"436\":3,\"437\":3,\"440\":2,\"543\":1,\"591\":3,\"606\":1,\"625\":2,\"627\":5,\"628\":1,\"797\":2,\"876\":3,\"895\":2,\"896\":5,\"897\":2,\"898\":3,\"900\":1,\"902\":1,\"906\":5,\"908\":2,\"914\":5,\"915\":7,\"916\":1,\"917\":6,\"918\":5,\"919\":1,\"920\":1,\"921\":4,\"922\":3,\"931\":1,\"934\":1,\"935\":18,\"939\":1,\"941\":10,\"942\":2,\"943\":4,\"947\":3,\"954\":2,\"959\":13,\"961\":7,\"972\":4,\"983\":2,\"986\":1,\"990\":1,\"994\":1,\"1006\":1,\"1081\":1}}],[\"it参数\",{\"1\":{\"790\":1}}],[\"iterm2\",{\"1\":{\"1003\":1,\"1005\":2}}],[\"iterm\",{\"1\":{\"996\":1}}],[\"iterate\",{\"1\":{\"689\":2}}],[\"iter\",{\"1\":{\"540\":1}}],[\"item就是map的值\",{\"1\":{\"436\":1}}],[\"item就是当前值\",{\"1\":{\"436\":1}}],[\"item=\",{\"1\":{\"220\":2,\"436\":1,\"437\":2}}],[\"item\",{\"1\":{\"220\":12,\"377\":1,\"436\":3}}],[\"items\",{\"1\":{\"169\":2,\"220\":5}}],[\"it\",{\"0\":{\"743\":1,\"1101\":1},\"1\":{\"11\":2,\"210\":3,\"211\":1,\"212\":4,\"213\":1,\"283\":1,\"473\":1,\"483\":1,\"768\":3,\"790\":4,\"791\":1,\"794\":1,\"1006\":1}}],[\"我发东西都是它\",{\"1\":{\"1164\":1}}],[\"我发现我错了\",{\"1\":{\"1140\":1}}],[\"我发现引入了data\",{\"1\":{\"1010\":1}}],[\"我能在平板粘贴出来\",{\"1\":{\"1164\":1}}],[\"我能看到什么数据\",{\"1\":{\"934\":1}}],[\"我手机也会下一个有时看我的笔记\",{\"1\":{\"1164\":1}}],[\"我最喜欢的功能\",{\"1\":{\"1163\":1}}],[\"我今天用了一下我发现我是真的爱\",{\"1\":{\"1163\":1}}],[\"我像有道云各种都有用过但是最后就留下了这个\",{\"1\":{\"1162\":1}}],[\"我从1开始用\",{\"1\":{\"1162\":1}}],[\"我通过这个工具\",{\"1\":{\"1161\":1}}],[\"我找了很多解决方案\",{\"1\":{\"1154\":1}}],[\"我试着打开它给的淘宝点进去给我重定向到了淘宝但是后面有pid\",{\"1\":{\"1153\":1}}],[\"我对此很敏感我知道我肯定中招了\",{\"1\":{\"1153\":1}}],[\"我对比两行\",{\"1\":{\"1051\":1}}],[\"我举得很多例子都是针对大学生和\",{\"1\":{\"1152\":1}}],[\"我举个例子\",{\"1\":{\"715\":1,\"1150\":1}}],[\"我表示很遗憾\",{\"1\":{\"1152\":1}}],[\"我实习的三家公司是三个不同的行业\",{\"1\":{\"1150\":1}}],[\"我买一本\",{\"1\":{\"1150\":1}}],[\"我记得我当时一个小问题\",{\"1\":{\"1150\":1}}],[\"我记得当时两天配不好环境变量最后让我帮忙的人可不少\",{\"1\":{\"1150\":1}}],[\"我当时学的时候的书就是学校的教材\",{\"1\":{\"1150\":1}}],[\"我当然是建议你尽量避免\",{\"1\":{\"907\":1}}],[\"我建议去学习html\",{\"1\":{\"1150\":1}}],[\"我建议你选择使用\",{\"1\":{\"929\":1}}],[\"我建议你还是要多花一些时间来理解这部分内容\",{\"1\":{\"916\":1}}],[\"我建议你使用\",{\"1\":{\"907\":1}}],[\"我要重点说的是\",{\"1\":{\"1150\":1}}],[\"我要不要学\",{\"1\":{\"1139\":1}}],[\"我简单的归纳了一下大学几年要做的事\",{\"1\":{\"1150\":1}}],[\"我简单花了一张图对比一下二者\",{\"1\":{\"186\":1}}],[\"我知道\",{\"1\":{\"1150\":1}}],[\"我喜欢用markdown\",{\"1\":{\"1145\":1}}],[\"我保证你对这个过程会很清晰\",{\"1\":{\"1144\":1}}],[\"我并不是说不让大家去群里问\",{\"1\":{\"1144\":1}}],[\"我总结了以下几个步骤\",{\"1\":{\"1143\":1}}],[\"我总共花了\",{\"1\":{\"1001\":1}}],[\"我现在码的这篇文章都是用的这个\",{\"1\":{\"1164\":1}}],[\"我现在要学设计模式\",{\"1\":{\"1150\":1}}],[\"我现在最后悔的一件事就是大一的时候没有好好得去学习\",{\"1\":{\"1150\":1}}],[\"我现在在用\",{\"1\":{\"1145\":1}}],[\"我现在很无聊\",{\"1\":{\"1142\":1}}],[\"我现在都不知道入口在哪\",{\"1\":{\"1081\":1}}],[\"我才3\",{\"1\":{\"1141\":1}}],[\"我什么都不是\",{\"1\":{\"1140\":1}}],[\"我选一个我不喜欢但是火的方向也许比我选一个我喜欢但是不火的方向赚的更多\",{\"1\":{\"1139\":1}}],[\"我司没有福利\",{\"1\":{\"1104\":1}}],[\"我放在ali了\",{\"1\":{\"1025\":1}}],[\"我个人频繁用到\",{\"1\":{\"1019\":1}}],[\"我个人用到了\",{\"1\":{\"1005\":1}}],[\"我匹每行开头不是\",{\"1\":{\"1018\":1}}],[\"我明白你的疑惑了\",{\"1\":{\"1012\":1}}],[\"我明白你想了解哪些操作系统允许多个用户同时在线\",{\"1\":{\"785\":1}}],[\"我只开了\",{\"1\":{\"1006\":1}}],[\"我只挑重点记录\",{\"1\":{\"725\":1}}],[\"我参考\",{\"1\":{\"1005\":1}}],[\"我加了钉钉\",{\"1\":{\"1005\":1}}],[\"我后来就把他们去掉了\",{\"1\":{\"1005\":1}}],[\"我后面的内容里也会不断地和你强调\",{\"1\":{\"898\":1}}],[\"我主要说的是手机\",{\"1\":{\"1148\":1}}],[\"我主要是用他的\",{\"1\":{\"1005\":1}}],[\"我主要被这个代码块卡住\",{\"1\":{\"658\":1}}],[\"我把\",{\"1\":{\"1004\":1}}],[\"我把太子换成狸猫\",{\"1\":{\"309\":1}}],[\"我推测\",{\"1\":{\"997\":1}}],[\"我必须要找到它的上一个版本\",{\"1\":{\"935\":1}}],[\"我平时的事务执行起来很快啊\",{\"1\":{\"935\":1}}],[\"我换一个方式来说明\",{\"1\":{\"934\":1}}],[\"我换16版本才行\",{\"1\":{\"219\":1}}],[\"我其实就是想和你说明白这个问题\",{\"1\":{\"934\":1}}],[\"我将用一个简单的例子来说明按顺序加锁如何避免死锁\",{\"1\":{\"933\":1}}],[\"我将会在第\",{\"1\":{\"922\":1}}],[\"我将会以\",{\"1\":{\"904\":1}}],[\"我以两阶段协议为起点\",{\"1\":{\"933\":1}}],[\"我以为只有分布式项目才会用到分布式锁呢哈哈哈\",{\"1\":{\"112\":1}}],[\"我先试了用\",{\"1\":{\"1005\":1}}],[\"我先给你举个例子\",{\"1\":{\"931\":1}}],[\"我先和你说结论吧\",{\"1\":{\"923\":1}}],[\"我打了四个时刻\",{\"1\":{\"929\":1}}],[\"我跟你解释过一遍\",{\"1\":{\"934\":1}}],[\"我跟你介绍了\",{\"1\":{\"929\":1,\"930\":1}}],[\"我跟你分析了数据库引擎可用的数据结构\",{\"1\":{\"919\":1}}],[\"我经常看到有人掉到这个坑里\",{\"1\":{\"928\":1}}],[\"我修改的部分用橙色标出\",{\"1\":{\"925\":1}}],[\"我直接贴\",{\"1\":{\"925\":1}}],[\"我直接提供一个passwordencoder\",{\"1\":{\"625\":1}}],[\"我和你继续讨论了数据库索引的概念\",{\"1\":{\"925\":1}}],[\"我和你介绍了\",{\"1\":{\"921\":1,\"933\":1}}],[\"我给你举一个例子吧\",{\"1\":{\"934\":1}}],[\"我给你的建议是\",{\"1\":{\"933\":1}}],[\"我给你的问题是\",{\"1\":{\"925\":1}}],[\"我给你的\",{\"1\":{\"919\":1}}],[\"我给你留下一个问题吧\",{\"1\":{\"919\":1}}],[\"我给你留一个思考题吧\",{\"1\":{\"902\":1}}],[\"我给你留一个问题吧\",{\"1\":{\"897\":1,\"929\":1}}],[\"我用的很多的\",{\"1\":{\"1164\":1}}],[\"我用它来安排自己的计划\",{\"1\":{\"1145\":1}}],[\"我用他来管理\",{\"1\":{\"1005\":1}}],[\"我用了半篇文章的篇幅和你介绍了不同的数据结构\",{\"1\":{\"916\":1}}],[\"我用电脑识别\",{\"1\":{\"60\":1}}],[\"我分成了上下两篇文章\",{\"1\":{\"909\":1}}],[\"我见过一个应用\",{\"1\":{\"932\":1}}],[\"我见过这样的情况\",{\"1\":{\"929\":1}}],[\"我见过有些是业务并没有这个需要\",{\"1\":{\"908\":1}}],[\"我见过数据只有\",{\"1\":{\"906\":1}}],[\"我会把\",{\"1\":{\"1005\":1}}],[\"我会留着在下一篇文章中再和你详细介绍\",{\"1\":{\"926\":1}}],[\"我会和你分享全局锁和表级锁\",{\"1\":{\"926\":1}}],[\"我会和你分析这条语句的执行流程\",{\"1\":{\"919\":1}}],[\"我会建议你总是使用\",{\"1\":{\"907\":1}}],[\"我会在后面的文章中单独展开说明优化器的内容\",{\"1\":{\"896\":1}}],[\"我会在后面的专栏设计模式主题予以补充\",{\"1\":{\"640\":1}}],[\"我会在知识扩展部分尽量梳理一下\",{\"1\":{\"639\":1}}],[\"我还会有一个笔记\",{\"1\":{\"1144\":1}}],[\"我还跟你介绍了与\",{\"1\":{\"902\":1}}],[\"我还以为会输出地址\",{\"1\":{\"415\":1}}],[\"我查默认是\",{\"1\":{\"902\":2}}],[\"我介绍了\",{\"1\":{\"902\":1,\"908\":1}}],[\"我猜你是mac\",{\"1\":{\"998\":1}}],[\"我猜是\",{\"1\":{\"897\":1}}],[\"我猜2个token是因为节省相对\",{\"1\":{\"70\":1}}],[\"我config刚打开aof的yes\",{\"1\":{\"860\":1}}],[\"我可能知道原因了\",{\"1\":{\"844\":1}}],[\"我可以生产环境一套开发环境一套\",{\"1\":{\"823\":1}}],[\"我可以理解为从位运算角度\",{\"1\":{\"739\":1}}],[\"我可以理解为\",{\"1\":{\"571\":1}}],[\"我可以理解为这样的目的是使得final属性获得指定的值吗\",{\"1\":{\"125\":1}}],[\"我中间加了个消息队列\",{\"1\":{\"815\":1}}],[\"我需要保证我的shell脚本的git命令\",{\"1\":{\"799\":1,\"985\":1}}],[\"我捣鼓了好久~\",{\"1\":{\"797\":1,\"983\":1}}],[\"我真废物阿\",{\"1\":{\"780\":1}}],[\"我全是错的\",{\"1\":{\"777\":1}}],[\"我已经部分集成到自己的笔记\",{\"1\":{\"732\":1}}],[\"我答错了\",{\"1\":{\"723\":1}}],[\"我非要问你在多线程下使用arraylist\",{\"1\":{\"694\":1}}],[\"我序列化完成后再回过头会把person类给改动了\",{\"1\":{\"688\":1}}],[\"我站位内存的位置\",{\"1\":{\"688\":1}}],[\"我认为也可以看作是装饰器\",{\"1\":{\"640\":1}}],[\"我也开始订阅icloud和apple\",{\"1\":{\"1165\":1}}],[\"我也是看周志明老师的公开课\",{\"1\":{\"962\":1}}],[\"我也是刚刚学到这里\",{\"1\":{\"388\":1}}],[\"我也跟你讨论了使用业务逻辑字段做主键的应用场景\",{\"1\":{\"919\":1}}],[\"我也会经常引用这两篇文章中提到的知识点\",{\"1\":{\"909\":1}}],[\"我也只放了\",{\"1\":{\"627\":1}}],[\"我理解很多module的项目\",{\"1\":{\"1012\":1}}],[\"我理解也是外部存储\",{\"1\":{\"899\":1}}],[\"我理解\",{\"1\":{\"551\":1,\"837\":1,\"994\":1,\"1166\":1}}],[\"我理解为所有交互的请求都是这个\",{\"1\":{\"49\":1}}],[\"我在学校亲测成功\",{\"1\":{\"1160\":1}}],[\"我在这里下的软件\",{\"1\":{\"1154\":1}}],[\"我在这里犯了两个错误\",{\"1\":{\"948\":1}}],[\"我在我的项目\",{\"1\":{\"1134\":1}}],[\"我在\",{\"1\":{\"1004\":1,\"1005\":1}}],[\"我在上一篇文章中\",{\"1\":{\"934\":1}}],[\"我在上一篇文章最后\",{\"1\":{\"933\":1}}],[\"我在第\",{\"1\":{\"934\":1}}],[\"我在自己视图改自己的\",{\"1\":{\"906\":1}}],[\"我在谷粒商城的springsession的序列化器转换异常搞了半天\",{\"1\":{\"876\":1}}],[\"我在执行过程中别人不能对我的操作进行插队和干预\",{\"1\":{\"858\":1}}],[\"我在牛客网找虐中\",{\"1\":{\"658\":1}}],[\"我在之前两讲介绍了java集合框架的典型容器类\",{\"1\":{\"640\":1}}],[\"我在专栏上一讲中介绍的\",{\"1\":{\"636\":1}}],[\"我在源码看到的是\",{\"1\":{\"534\":1}}],[\"我在右对齐\",{\"1\":{\"17\":1}}],[\"我\",{\"1\":{\"522\":1}}],[\"我使用的场景\",{\"1\":{\"509\":1}}],[\"我使用了association后所有的属性都要映射\",{\"1\":{\"422\":1}}],[\"我写一个select方法还得写两套\",{\"1\":{\"438\":1}}],[\"我下面这两个属性爆红\",{\"1\":{\"421\":1}}],[\"我下面的理念理解\",{\"1\":{\"210\":1}}],[\"我之前也一直这样认为\",{\"1\":{\"1140\":1}}],[\"我之前分享过一些常见的线上问题案例\",{\"1\":{\"381\":1}}],[\"我之前用过\",{\"1\":{\"197\":1}}],[\"我不知道大家平时会不会时不时的打开手机\",{\"1\":{\"1148\":1}}],[\"我不建议你使用\",{\"1\":{\"927\":1}}],[\"我不能把student赋给这个子类\",{\"1\":{\"688\":1}}],[\"我不可能手动的去代码改成能用的2号机器的7000端口吧\",{\"1\":{\"590\":1}}],[\"我不会\",{\"1\":{\"379\":1}}],[\"我不需要长连接\",{\"1\":{\"47\":1}}],[\"我替前面的朋友解释一下\",{\"1\":{\"286\":1}}],[\"我没配密码\",{\"1\":{\"865\":1}}],[\"我没有指定版本号\",{\"1\":{\"267\":1}}],[\"我没在家也能访问\",{\"1\":{\"196\":1}}],[\"我就不认\",{\"1\":{\"935\":1}}],[\"我就要说到死锁和死锁检测了\",{\"1\":{\"931\":1}}],[\"我就问你抓狂不\",{\"1\":{\"708\":1}}],[\"我就是这里配错了找了半天\",{\"1\":{\"454\":1,\"462\":1}}],[\"我就是靠这个分析出了错误\",{\"1\":{\"72\":1}}],[\"我就去\",{\"1\":{\"227\":1}}],[\"我的是256g哔哩哔哩缓存了大量学习视频\",{\"1\":{\"1164\":1}}],[\"我的使用场景是三\",{\"1\":{\"1160\":1}}],[\"我的学习经验也不是很丰富\",{\"1\":{\"1152\":1}}],[\"我的学校是一个双非大学\",{\"1\":{\"1140\":1}}],[\"我的建议是视频为主\",{\"1\":{\"1150\":1}}],[\"我的态度是\",{\"1\":{\"1111\":1}}],[\"我的快捷键是\",{\"1\":{\"1005\":2}}],[\"我的配置见图\",{\"1\":{\"1005\":1}}],[\"我的配置如下\",{\"1\":{\"1005\":2}}],[\"我的家庭住址\",{\"1\":{\"1005\":1}}],[\"我的邮箱\",{\"1\":{\"1005\":1}}],[\"我的手机号\",{\"1\":{\"1005\":1}}],[\"我的手机上终于有了一个属于自己的闹钟了\",{\"1\":{\"980\":1}}],[\"我的替代方案\",{\"1\":{\"998\":1}}],[\"我的windows下有两个用户\",{\"1\":{\"785\":1}}],[\"我的这里如果这么配不会生效\",{\"1\":{\"400\":1}}],[\"我的理解是这样的\",{\"1\":{\"731\":1}}],[\"我的理解是jwt不可能放全量的用户信息\",{\"1\":{\"627\":1}}],[\"我的理解\",{\"1\":{\"339\":1,\"648\":1,\"935\":1}}],[\"我的问题是\",{\"1\":{\"919\":1}}],[\"我的问题\",{\"0\":{\"198\":1,\"454\":1},\"1\":{\"352\":1}}],[\"我的解决\",{\"1\":{\"125\":1,\"876\":1}}],[\"我遇到的坑\",{\"0\":{\"149\":1}}],[\"我被这里卡了半天\",{\"1\":{\"125\":1}}],[\"我return的是一个bean才会引发这个\",{\"1\":{\"125\":1}}],[\"我想这也会很有成就感吧\",{\"1\":{\"1150\":1}}],[\"我想说的是\",{\"1\":{\"1147\":1,\"1150\":1}}],[\"我想公司一份\",{\"1\":{\"981\":1}}],[\"我想根据第一列的字段去重\",{\"1\":{\"959\":1}}],[\"我想你并不陌生\",{\"1\":{\"909\":1}}],[\"我想你可能会问那什么时候需要\",{\"1\":{\"905\":1}}],[\"我想你肯定会问\",{\"1\":{\"900\":1}}],[\"我想到的结论\",{\"1\":{\"123\":1}}],[\"我想的是它可以看成http+json\",{\"1\":{\"92\":1}}],[\"我觉得自己u盘的使用频率还是蛮大的\",{\"1\":{\"1160\":1}}],[\"我觉得自己已经很不错了\",{\"1\":{\"1140\":1}}],[\"我觉得这个一个很好的学习方式\",{\"1\":{\"1150\":1}}],[\"我觉得这是开源值得学习的一个点\",{\"1\":{\"1080\":1}}],[\"我觉得\",{\"1\":{\"1150\":2}}],[\"我觉得github可以当做一个个人品牌来经营\",{\"1\":{\"1145\":1}}],[\"我觉得需要记录的\",{\"1\":{\"1024\":1}}],[\"我觉得有几方面考虑\",{\"1\":{\"970\":1}}],[\"我觉得多表\",{\"1\":{\"970\":1}}],[\"我觉得直接使用\",{\"1\":{\"868\":1}}],[\"我觉得还是用的好\",{\"1\":{\"241\":1}}],[\"我觉得可理解为再把juc包了一层适用于分布式了\",{\"1\":{\"112\":1}}],[\"我觉得前端\",{\"1\":{\"69\":1}}],[\"我测出的两种好一点的方法\",{\"1\":{\"105\":1}}],[\"我常用\",{\"1\":{\"105\":1}}],[\"我跳过了\",{\"1\":{\"93\":1}}],[\"我问了chatgpt\",{\"1\":{\"91\":1}}],[\"我看的毕向东的\",{\"1\":{\"1150\":1}}],[\"我看到后面看的两篇别人的笔记\",{\"1\":{\"90\":1}}],[\"我看我后来学的项目基本都是单\",{\"1\":{\"70\":1}}],[\"我怀疑是交换机的问题因为我试着重启了光猫不行\",{\"1\":{\"77\":1}}],[\"我是用的52破解网里面一款名叫ip地址修改器的软件解决的\",{\"1\":{\"1160\":1}}],[\"我是用的第三方doh服务器\",{\"1\":{\"76\":1}}],[\"我是基本没看书的\",{\"1\":{\"1150\":1}}],[\"我是遍历插入的\",{\"1\":{\"608\":1}}],[\"我是小写才生效\",{\"1\":{\"575\":1}}],[\"我是构造方法singletondemo\",{\"1\":{\"302\":1}}],[\"我是居中的\",{\"1\":{\"17\":1}}],[\"我这种人还是算了\",{\"1\":{\"1077\":1}}],[\"我这题要理解成\",{\"1\":{\"723\":1}}],[\"我这边的支付接口挂了你那边下单的订单接口就不要那么猛了\",{\"1\":{\"601\":1}}],[\"我这边的做法是\",{\"1\":{\"70\":1}}],[\"我这个盐存哪里\",{\"1\":{\"132\":1}}],[\"我这个笔记也把下面的总结了一边\",{\"1\":{\"87\":1}}],[\"我这里选择用\",{\"1\":{\"1080\":1}}],[\"我这里用的是\",{\"1\":{\"1080\":1}}],[\"我这里用的是七牛云所以没用到下面\",{\"1\":{\"238\":1}}],[\"我这里是被typora占用了\",{\"1\":{\"1041\":1}}],[\"我这里是降到有漏洞的版本\",{\"1\":{\"105\":1}}],[\"我这里命名为myblog\",{\"1\":{\"810\":1}}],[\"我这里直接用了\",{\"1\":{\"796\":1}}],[\"我这里直接拿\",{\"1\":{\"282\":1}}],[\"我这里理解为terminal更好记\",{\"1\":{\"790\":1}}],[\"我这里char会搞错\",{\"1\":{\"691\":1}}],[\"我这里好理解\",{\"1\":{\"606\":1}}],[\"我这里暂时掠过\",{\"1\":{\"348\":1}}],[\"我这里没有深入\",{\"1\":{\"344\":1}}],[\"我这里由于没有用内网穿透暂且搁置\",{\"1\":{\"192\":1}}],[\"我这里其实对每一次的\",{\"1\":{\"125\":1}}],[\"我这里\",{\"1\":{\"109\":1,\"575\":1}}],[\"我这里就不多提这两个理论了\",{\"1\":{\"571\":1}}],[\"我这里就简单粗暴的把\",{\"1\":{\"540\":1}}],[\"我这里就看视频\",{\"1\":{\"92\":1}}],[\"我这里就是\",{\"1\":{\"48\":1}}],[\"我这里也有便捷方式\",{\"1\":{\"61\":1}}],[\"我一直以为使用refreshtoken的意义就是为了每次网络传输只使用有效期很短的accesstokenä\",{\"1\":{\"70\":1}}],[\"我感觉是单体项目其实完全可\",{\"1\":{\"65\":1}}],[\"我感觉这里\",{\"1\":{\"65\":1}}],[\"我们创建仓库并上传文件\",{\"1\":{\"1161\":1}}],[\"我们创建的变量是可以被任何一个线程访问并修改的\",{\"1\":{\"156\":1}}],[\"我们直接在当前目录下初始化\",{\"1\":{\"1161\":1}}],[\"我们事先新建一个目录docsify用来存放待会要下载的内容\",{\"1\":{\"1161\":1}}],[\"我们给的工资跟其他公司差不多\",{\"1\":{\"1104\":1}}],[\"我们目前处于创业阶段\",{\"1\":{\"1104\":1}}],[\"我们目前不想暴露8001端口\",{\"1\":{\"590\":1}}],[\"我们平时玩游戏碰上读图loading\",{\"1\":{\"1089\":1}}],[\"我们平常经常接触的\",{\"1\":{\"713\":1}}],[\"我们希望先从右边开始查找\",{\"1\":{\"1085\":1}}],[\"我们希望响应回来的json数据有实体类的code\",{\"1\":{\"630\":1}}],[\"我们这代人好像一直在爬坡\",{\"1\":{\"1076\":1}}],[\"我们做贫贱夫妻的每一件事情都会让我特别悲哀\",{\"1\":{\"1076\":1}}],[\"我们建议使用alt+tab或windows\",{\"1\":{\"1036\":1}}],[\"我们无法创建新的分区\",{\"1\":{\"1027\":1}}],[\"我们对数据的增加\",{\"1\":{\"975\":1}}],[\"我们对购物车中的商品进行增\",{\"1\":{\"155\":1}}],[\"我们并不需要拷贝出这\",{\"1\":{\"935\":1}}],[\"我们并不会使用json序列化器来处理value\",{\"1\":{\"875\":1}}],[\"我们又不可能直接把这个时间设置成一个很小的值\",{\"1\":{\"932\":1}}],[\"我们简化一点\",{\"1\":{\"931\":1}}],[\"我们今天就主要来聊聊\",{\"1\":{\"930\":1}}],[\"我们假定到达后\",{\"1\":{\"929\":1}}],[\"我们要把这三个操作放在一个事务中\",{\"1\":{\"931\":1}}],[\"我们要把原来application\",{\"1\":{\"598\":1}}],[\"我们要考虑的原则就是空间了\",{\"1\":{\"923\":1}}],[\"我们要为高频请求创建\",{\"1\":{\"923\":1}}],[\"我们用\",{\"1\":{\"923\":1}}],[\"我们称为覆盖索引\",{\"1\":{\"922\":1}}],[\"我们称为回表\",{\"1\":{\"921\":1}}],[\"我们称为远程调用\",{\"1\":{\"208\":1}}],[\"我们以\",{\"1\":{\"920\":1}}],[\"我们文章里面有提到\",{\"1\":{\"919\":1}}],[\"我们有时会遇到这样的情况\",{\"1\":{\"990\":1}}],[\"我们有一个主键列为\",{\"1\":{\"917\":1}}],[\"我们有希望找到很多种用其他测试方法更难发现的错误\",{\"1\":{\"99\":1}}],[\"我们只要在身份证号字段上建立索引就够了\",{\"1\":{\"922\":1}}],[\"我们只要输入待查找的值即\",{\"1\":{\"914\":1}}],[\"我们只需要关心消息是否送达了队列\",{\"1\":{\"813\":1}}],[\"我们只需要一个只需添加一个spring\",{\"1\":{\"727\":1}}],[\"我们只需要先将文件切分成多个文件分片\",{\"1\":{\"708\":1}}],[\"我们只需要创建authenticationentrypoint和accessdeniedhandler的实现类对象\",{\"1\":{\"630\":1}}],[\"我们只需要使用把bcryptpasswordencoder对象注入spring容器中\",{\"1\":{\"625\":1}}],[\"我们只需要用一种适配绑定的方式\",{\"1\":{\"594\":1}}],[\"我们只需要更改一下枚举类\",{\"1\":{\"252\":1}}],[\"我们总是会用到事务\",{\"1\":{\"904\":1}}],[\"我们看看这两种方式会有什么问题\",{\"1\":{\"901\":1}}],[\"我们看一个例子\",{\"1\":{\"721\":1}}],[\"我们回来说说\",{\"1\":{\"901\":1}}],[\"我们得从文章开头的那个问题说起\",{\"1\":{\"901\":1}}],[\"我们再来想一下\",{\"1\":{\"935\":1}}],[\"我们再来看看事务隔离具体是怎么实现的\",{\"1\":{\"906\":1}}],[\"我们再来看执行器和\",{\"1\":{\"900\":1}}],[\"我们再先从应用程序的角度来解读一下\",{\"1\":{\"709\":1}}],[\"我们后面会专门有一篇文章来讲存储引擎的内部机制\",{\"1\":{\"897\":1}}],[\"我们会建立定义数据库workdb\",{\"1\":{\"960\":1}}],[\"我们会讨论到引擎的选择\",{\"1\":{\"892\":1}}],[\"我们会知道\",{\"1\":{\"640\":1}}],[\"我们已经知道了\",{\"1\":{\"824\":1}}],[\"我们上文提到过\",{\"1\":{\"824\":1}}],[\"我们上面也讲到了过了\",{\"1\":{\"739\":1}}],[\"我们首先可能会想到采用\",{\"1\":{\"739\":1}}],[\"我们通过慢查询日志\",{\"1\":{\"897\":1}}],[\"我们通过配置文件开启懒加载\",{\"1\":{\"424\":1}}],[\"我们通常也称呼\",{\"1\":{\"737\":1}}],[\"我们分别来介绍一下这些开源项目以及它们在这个日志系统中起到的作用\",{\"1\":{\"736\":1}}],[\"我们都要在二者之间寻找一个平衡点\",{\"1\":{\"905\":1}}],[\"我们都需要登录每台机器\",{\"1\":{\"734\":1}}],[\"我们都知道\",{\"1\":{\"302\":1,\"543\":1,\"700\":1,\"1139\":1}}],[\"我们使用了方括号\",{\"1\":{\"959\":1}}],[\"我们使用\",{\"1\":{\"730\":1}}],[\"我们开发\",{\"1\":{\"727\":1}}],[\"我们开发的\",{\"1\":{\"634\":1}}],[\"我们依旧没能逃脱配置的魔爪\",{\"1\":{\"726\":1}}],[\"我们下面看一下这段代码\",{\"1\":{\"723\":1}}],[\"我们把intern\",{\"1\":{\"722\":1}}],[\"我们来分析一下哪些场景下应该使用自增主键\",{\"1\":{\"918\":1}}],[\"我们来讨论一下\",{\"1\":{\"932\":1}}],[\"我们来讨论一下为什么建议你尽量不要使用长事务\",{\"1\":{\"906\":1}}],[\"我们来讨论一个案例\",{\"1\":{\"918\":1}}],[\"我们来讨论一个问题\",{\"1\":{\"917\":1,\"922\":1,\"923\":1,\"928\":1}}],[\"我们来看一下下面的操作序列\",{\"1\":{\"928\":1}}],[\"我们来看一下不加锁会有什么问题\",{\"1\":{\"927\":1}}],[\"我们来看一个数据校对逻辑的案例\",{\"1\":{\"905\":1}}],[\"我们来看看在不同的隔离级别下\",{\"1\":{\"905\":1}}],[\"我们来细说一下字符串常量池的结构\",{\"1\":{\"722\":1}}],[\"我们来详细学一下上面\",{\"1\":{\"620\":1}}],[\"我们先来看一下这个问题\",{\"1\":{\"921\":1}}],[\"我们先来看看这个快照是怎么实现的\",{\"1\":{\"935\":1}}],[\"我们先来看看\",{\"1\":{\"712\":1}}],[\"我们先看第一个场景\",{\"1\":{\"708\":1}}],[\"我们电脑上跑着的应用程序\",{\"1\":{\"709\":1}}],[\"我们想要进行\",{\"1\":{\"709\":1}}],[\"我们实际执行的是子类重写父类的方法\",{\"0\":{\"699\":1}}],[\"我们将new出来的结构\",{\"1\":{\"695\":1}}],[\"我们将局部变量存储在栈结构中\",{\"1\":{\"695\":1}}],[\"我们赋值即可\",{\"1\":{\"686\":1}}],[\"我们在前面讲事务隔离的时候\",{\"1\":{\"927\":1}}],[\"我们在使用数据库的时候\",{\"1\":{\"925\":1}}],[\"我们在应用中应该尽量使用主键查询\",{\"1\":{\"917\":1}}],[\"我们在上面用到了一个词驻留\",{\"1\":{\"722\":1}}],[\"我们在分布式系统中\",{\"1\":{\"713\":1}}],[\"我们在平常开发过程中接触最多的就是\",{\"1\":{\"709\":1}}],[\"我们在编译期\",{\"0\":{\"699\":1}}],[\"我们在日常开发时\",{\"1\":{\"686\":1}}],[\"我们在调用局部变量之前\",{\"1\":{\"686\":1}}],[\"我们在nacos里创建好\",{\"1\":{\"598\":1}}],[\"我们不执着于一天看多少篇\",{\"1\":{\"740\":1}}],[\"我们不把它包括在内\",{\"1\":{\"722\":1}}],[\"我们不写的修饰符\",{\"1\":{\"669\":1}}],[\"我们不应该过度设计\",{\"1\":{\"118\":1}}],[\"我们完整地实现了权限管理的功能\",{\"1\":{\"630\":1}}],[\"我们怎么退出登录呢\",{\"1\":{\"628\":1}}],[\"我们一起来看看这条\",{\"1\":{\"921\":1}}],[\"我们一起进入相对偏实战的内容吧\",{\"1\":{\"916\":1}}],[\"我们一起看看\",{\"1\":{\"640\":1}}],[\"我们一般按照这些实体表的\",{\"1\":{\"961\":1}}],[\"我们一般使用\",{\"1\":{\"713\":1}}],[\"我们一般使用springsecurity为我们提供的bcryptpasswordencoder\",{\"1\":{\"625\":1}}],[\"我们一般知道\",{\"1\":{\"688\":1,\"890\":1}}],[\"我们一共创建6个线程\",{\"1\":{\"334\":1}}],[\"我们说的资源\",{\"1\":{\"605\":1}}],[\"我们还要经历这个迁移的过程\",{\"1\":{\"961\":1}}],[\"我们还是以市民表的联合索引\",{\"1\":{\"924\":1}}],[\"我们还是从一个表的一条更新语句说起\",{\"1\":{\"898\":1}}],[\"我们还可以从存储空间的角度来看\",{\"1\":{\"918\":1}}],[\"我们还可以通过shared\",{\"1\":{\"598\":1}}],[\"我们还需要在\",{\"1\":{\"730\":1}}],[\"我们还需要通过\",{\"1\":{\"218\":1}}],[\"我们新建\",{\"1\":{\"531\":1}}],[\"我们每次查询employee对象的时候\",{\"1\":{\"424\":1}}],[\"我们每个程序员都必须自己取控制这些细节\",{\"1\":{\"347\":1}}],[\"我们生产上只能使用自定义的\",{\"1\":{\"360\":1}}],[\"我们具体来看代码实现\",{\"1\":{\"352\":1}}],[\"我们模拟一个抢车位的场景\",{\"1\":{\"342\":1}}],[\"我们就需要使用\",{\"1\":{\"927\":1}}],[\"我们就需要引入\",{\"1\":{\"183\":1}}],[\"我们就不应该使用二叉树\",{\"1\":{\"916\":1}}],[\"我们就基于redis实现分布式锁\",{\"1\":{\"868\":1}}],[\"我们就称为运行时类\",{\"1\":{\"688\":1}}],[\"我们就可以只使用分表不使用分库\",{\"1\":{\"961\":1}}],[\"我们就可以接收到下一个消息\",{\"1\":{\"830\":1}}],[\"我们就可以创建三个namespace\",{\"1\":{\"598\":1}}],[\"我们就可以同时保证\",{\"1\":{\"572\":1}}],[\"我们就执行原来定义好的方法\",{\"1\":{\"338\":1}}],[\"我们发现main线程提前已经执行完成了\",{\"1\":{\"334\":1}}],[\"我们也知道\",{\"1\":{\"329\":1}}],[\"我们按照正常的顺序\",{\"1\":{\"295\":1}}],[\"我们能不能\",{\"1\":{\"814\":1}}],[\"我们能不能自定\",{\"1\":{\"604\":1}}],[\"我们能够控制住main方法的执行\",{\"1\":{\"334\":1}}],[\"我们能够发现\",{\"1\":{\"290\":1}}],[\"我们能放入缓存的数据本就不应该是实时性\",{\"1\":{\"118\":1}}],[\"我们知道运行我们主业务的服务器配置一般会比较好\",{\"1\":{\"814\":1}}],[\"我们知道final在修饰引用数据类型时\",{\"1\":{\"721\":1}}],[\"我们知道\",{\"1\":{\"288\":1,\"669\":1,\"922\":1}}],[\"我们可以手动更新一下\",{\"1\":{\"988\":1}}],[\"我们可以把该表的数据按照某种规则\",{\"1\":{\"960\":1}}],[\"我们可以看到docsify目录下多出三个文件\",{\"1\":{\"1161\":1}}],[\"我们可以看到\",{\"1\":{\"928\":1}}],[\"我们可以看到在不同的隔离级别下\",{\"1\":{\"905\":1}}],[\"我们可以看到一共创建了两个string\",{\"1\":{\"722\":1}}],[\"我们可以大致的分析一下\",{\"1\":{\"897\":1}}],[\"我们可以限定为一个\",{\"1\":{\"779\":1}}],[\"我们可以使用数字来代表各个权限\",{\"1\":{\"786\":1}}],[\"我们可以使用\",{\"1\":{\"743\":1,\"1101\":1}}],[\"我们可以使用插件为目标对象创建一个代理对象\",{\"1\":{\"465\":1}}],[\"我们可以实现一个可以聊天类似微信的即时通讯系统\",{\"1\":{\"713\":1}}],[\"我们可以自己实现一个简单的\",{\"1\":{\"713\":1}}],[\"我们可以自定义校验注解\",{\"1\":{\"242\":1}}],[\"我们可以调用collections工具类提供的包装方法\",{\"1\":{\"641\":1}}],[\"我们可以定义一个springsecurity的配置类\",{\"1\":{\"625\":1}}],[\"我们可以开启断路保护机制\",{\"1\":{\"582\":1}}],[\"我们可以让非核心业务降级运行\",{\"1\":{\"582\":1}}],[\"我们可以通过不同的方式\",{\"1\":{\"688\":1}}],[\"我们可以通过认证过滤器\",{\"1\":{\"627\":1}}],[\"我们可以通过实现\",{\"1\":{\"546\":1,\"1166\":1}}],[\"我们可以通过循环cas的方式来保证原子操作\",{\"1\":{\"307\":1}}],[\"我们可以将这种编程模型称为事件驱动模型\",{\"1\":{\"543\":1,\"1081\":1}}],[\"我们可以将所有\",{\"1\":{\"520\":1}}],[\"我们可以利用计算属性\",{\"1\":{\"220\":1}}],[\"我们最终的技术搭配方案\",{\"1\":{\"228\":1}}],[\"我们编写代码的地方\",{\"1\":{\"222\":1}}],[\"我们关注与\",{\"1\":{\"215\":1}}],[\"我们拿转账场景来说\",{\"1\":{\"186\":1}}],[\"我们往往是无法完全满足\",{\"1\":{\"183\":1}}],[\"我们需要注意的是事务的启动时机\",{\"1\":{\"934\":1}}],[\"我们需要先关注它的数据模型\",{\"1\":{\"916\":1}}],[\"我们需要通过\",{\"1\":{\"731\":1}}],[\"我们需要通过输入数据库里的用户和密码来登录\",{\"1\":{\"624\":1}}],[\"我们需要使用字符串\",{\"1\":{\"743\":1,\"1101\":1}}],[\"我们需要使用像\",{\"1\":{\"727\":1}}],[\"我们需要使用这种\",{\"1\":{\"125\":1}}],[\"我们需要了解\",{\"1\":{\"722\":1}}],[\"我们需要知道\",{\"1\":{\"721\":1}}],[\"我们需要\",{\"1\":{\"711\":1,\"931\":1}}],[\"我们需要手动进行资源释放\",{\"1\":{\"686\":1}}],[\"我们需要学习spring\",{\"1\":{\"630\":1}}],[\"我们需要把拿到\",{\"1\":{\"624\":1}}],[\"我们需要定制改\",{\"0\":{\"618\":1}}],[\"我们需要排错\",{\"1\":{\"399\":1}}],[\"我们需要让他执行await方法\",{\"1\":{\"338\":1}}],[\"我们需要首先创建cyclicbarrier\",{\"1\":{\"338\":1}}],[\"我们需要进行\",{\"1\":{\"183\":1}}],[\"我们的周围总会发生一些事情\",{\"1\":{\"1147\":1}}],[\"我们的userdb中的用户数据表中\",{\"1\":{\"960\":1}}],[\"我们的例子中如果没有特别说明\",{\"1\":{\"934\":1}}],[\"我们的查询需求\",{\"1\":{\"922\":1}}],[\"我们的日志可能分布在多台服务器上\",{\"1\":{\"734\":1}}],[\"我们的应用程序实际上只是发起了\",{\"1\":{\"709\":1}}],[\"我们的应用程序对操作系统的内核发起\",{\"1\":{\"709\":1}}],[\"我们的应用都要在服务端做一次记录\",{\"1\":{\"52\":1}}],[\"我们的插件可以为四大对象创建出代理对象\",{\"1\":{\"465\":1}}],[\"我们的pojo需要实现序列化接口\",{\"1\":{\"448\":1}}],[\"我们的购物车结构是一个双层\",{\"1\":{\"155\":1}}],[\"我们的购物车也应该是k\",{\"1\":{\"155\":1}}],[\"我们的方案是这样的\",{\"1\":{\"70\":1}}],[\"我们支持\",{\"1\":{\"38\":1,\"42\":1}}],[\"上班不弹\",{\"1\":{\"1104\":1}}],[\"上看是谁提交过来的\",{\"1\":{\"986\":1}}],[\"上千万的时候\",{\"1\":{\"976\":1}}],[\"上文正文里面都没提到\",{\"1\":{\"929\":1}}],[\"上新申请\",{\"1\":{\"928\":1}}],[\"上期的问题是关于对联合主键索引和\",{\"1\":{\"925\":1}}],[\"上创建一个索引\",{\"1\":{\"925\":1}}],[\"上一个版本\",{\"1\":{\"935\":1}}],[\"上一段我们说到满足最左前缀原则的时候\",{\"1\":{\"924\":1}}],[\"上一篇\",{\"1\":{\"2\":1}}],[\"上建立索引了\",{\"1\":{\"923\":1}}],[\"上建配置\",{\"1\":{\"596\":1}}],[\"上其实读了三个记录\",{\"1\":{\"922\":1}}],[\"上还空着的部分\",{\"1\":{\"899\":1}}],[\"上所有缓存结果都清空\",{\"1\":{\"898\":1}}],[\"上三个都是有注解的搭配着注解解析器实现相应功能\",{\"1\":{\"890\":1}}],[\"上\",{\"1\":{\"883\":2,\"1106\":1}}],[\"上锁\",{\"1\":{\"868\":1}}],[\"上线专门的队列消费服务\",{\"1\":{\"848\":1}}],[\"上线更多消费者\",{\"1\":{\"848\":1}}],[\"上权限的\",{\"1\":{\"628\":1}}],[\"上图官网翻译\",{\"1\":{\"599\":1}}],[\"上图看到ping百度服务器返回的数据包的ttl值为56\",{\"1\":{\"76\":1}}],[\"上执行\",{\"1\":{\"594\":1}}],[\"上修改\",{\"1\":{\"594\":1}}],[\"上有索引\",{\"1\":{\"917\":1}}],[\"上有\",{\"1\":{\"593\":1}}],[\"上的记录项\",{\"1\":{\"922\":1}}],[\"上的\",{\"1\":{\"591\":1}}],[\"上海有名些\",{\"1\":{\"591\":1}}],[\"上操作\",{\"1\":{\"570\":1}}],[\"上两层可以看作是堆的\",{\"1\":{\"383\":1}}],[\"上完自习\",{\"1\":{\"334\":15,\"335\":1}}],[\"上来就直接尝试占有锁\",{\"1\":{\"318\":1}}],[\"上述查询假设第二列和第三列的数据类型是可比较的\",{\"1\":{\"959\":1}}],[\"上述查询使用了group\",{\"1\":{\"959\":1}}],[\"上述的过程就可以当做是指令的重排\",{\"1\":{\"293\":1}}],[\"上述配置中\",{\"1\":{\"48\":1}}],[\"上手\",{\"1\":{\"241\":1}}],[\"上传音频\",{\"1\":{\"1084\":1}}],[\"上传进度到99\",{\"1\":{\"708\":1}}],[\"上传在客户端完成\",{\"1\":{\"238\":1}}],[\"上传就不用经过自己的服务器了\",{\"1\":{\"238\":1}}],[\"上面说到\",{\"1\":{\"1144\":1}}],[\"上面说了\",{\"1\":{\"1092\":1}}],[\"上面也提到了这点\",{\"1\":{\"1144\":1}}],[\"上面也有别名\",{\"1\":{\"1005\":1}}],[\"上面都找不到了\",{\"1\":{\"1009\":1}}],[\"上面我一共提到了两种设计排行榜的方法\",{\"1\":{\"868\":1}}],[\"上面我们聊到的粉板\",{\"1\":{\"900\":1}}],[\"上面我们在研究字符串对象的引用如何驻留到字符串常量池中时\",{\"1\":{\"723\":1}}],[\"上面我们实现登录接口的时\",{\"1\":{\"627\":1}}],[\"上面配置完\",{\"1\":{\"829\":1}}],[\"上面是学习的大致方式\",{\"1\":{\"1150\":1}}],[\"上面是常量池中已存在内容相等的字符串驻留的情况\",{\"1\":{\"724\":1}}],[\"上面是发布事件了\",{\"1\":{\"543\":1,\"1081\":1}}],[\"上面的那些基础你是必须得都掌握的\",{\"1\":{\"1150\":1}}],[\"上面的那些\",{\"1\":{\"1144\":1}}],[\"上面的标签\",{\"0\":{\"1073\":1}}],[\"上面的0\",{\"1\":{\"703\":1}}],[\"上面的示例也说明了为什么equals\",{\"1\":{\"691\":1}}],[\"上面的我们学习了\",{\"1\":{\"630\":1}}],[\"上面的服务项目实例中\",{\"1\":{\"562\":1}}],[\"上面服务降级可没停\",{\"1\":{\"582\":1}}],[\"上面图片的所有基础原生开发\",{\"1\":{\"466\":1}}],[\"上面优化\",{\"1\":{\"240\":1}}],[\"上面这行没有返回值\",{\"1\":{\"229\":1}}],[\"上面社交登录的流程就是oauth协议\",{\"1\":{\"136\":1}}],[\"上了\",{\"1\":{\"210\":1}}],[\"上下角标\",{\"0\":{\"16\":1}}],[\"危险容器\",{\"1\":{\"14\":1}}],[\"1<\",{\"1\":{\"1010\":1}}],[\"1pt\",{\"1\":{\"1022\":2}}],[\"1password\",{\"1\":{\"1003\":1}}],[\"1px\",{\"1\":{\"220\":2}}],[\"1️⃣你特别需要做的事情\",{\"1\":{\"980\":1}}],[\"1～12\",{\"1\":{\"951\":1}}],[\"1+1=\",{\"1\":{\"878\":2}}],[\"1秒的时间窗口\",{\"1\":{\"850\":1}}],[\"1mysql\",{\"1\":{\"868\":1}}],[\"1m\",{\"1\":{\"844\":1}}],[\"1min\",{\"1\":{\"842\":1}}],[\"1s\",{\"1\":{\"842\":1,\"932\":1}}],[\"1vn\",{\"1\":{\"817\":1}}],[\"1v1\",{\"1\":{\"817\":1}}],[\"1>>\",{\"1\":{\"784\":1}}],[\"1>\",{\"0\":{\"784\":1},\"1\":{\"784\":1}}],[\"1之间的整数\",{\"1\":{\"739\":1}}],[\"1之后有了异步非阻塞的支持\",{\"1\":{\"590\":1}}],[\"1取这一位的数\",{\"1\":{\"706\":1}}],[\"1=\",{\"1\":{\"877\":1}}],[\"1=1\",{\"1\":{\"706\":1,\"959\":1}}],[\"1=0\",{\"1\":{\"706\":1}}],[\"1异或任何数都为任何数取反\",{\"1\":{\"706\":1}}],[\"1来表示\",{\"1\":{\"688\":1}}],[\"1版不用配置数据源\",{\"1\":{\"608\":1}}],[\"1cbbd8103d69\",{\"1\":{\"598\":1}}],[\"1号机器的7000端口挂掉了\",{\"1\":{\"590\":1}}],[\"1号存id为1\",{\"1\":{\"103\":1}}],[\"1每个方法配置一个服务降级方法\",{\"1\":{\"584\":1}}],[\"1~2\",{\"1\":{\"572\":1}}],[\"1中\",{\"1\":{\"388\":1}}],[\"1gb\",{\"1\":{\"899\":1}}],[\"1g\",{\"1\":{\"383\":1}}],[\"1433\",{\"1\":{\"1001\":2}}],[\"14种组件技术的学习\",{\"1\":{\"552\":1}}],[\"14\",{\"1\":{\"261\":1,\"752\":1,\"765\":1,\"766\":1,\"768\":1,\"869\":1,\"1005\":1}}],[\"180cm\",{\"1\":{\"959\":1}}],[\"1883\",{\"1\":{\"825\":1}}],[\"18\",{\"1\":{\"277\":1,\"392\":1,\"397\":1,\"403\":1,\"458\":1,\"763\":1,\"935\":1,\"1005\":2}}],[\"18e7d21c\",{\"1\":{\"260\":1}}],[\"183\",{\"1\":{\"102\":1}}],[\"193141\",{\"1\":{\"1155\":1}}],[\"19\",{\"1\":{\"1005\":1}}],[\"19a01210\",{\"1\":{\"959\":2}}],[\"197968\",{\"1\":{\"559\":1}}],[\"1995年\",{\"1\":{\"543\":1}}],[\"192\",{\"1\":{\"198\":1,\"688\":1,\"857\":1}}],[\"19th\",{\"1\":{\"16\":1}}],[\"1的记录修改前\",{\"1\":{\"169\":1}}],[\"150\",{\"1\":{\"1019\":1}}],[\"15072908\",{\"1\":{\"124\":1}}],[\"15672\",{\"1\":{\"825\":3}}],[\"15671\",{\"1\":{\"825\":2}}],[\"15后四位二进制为1前面全为0\",{\"1\":{\"706\":1}}],[\"15的二进制数是1111\",{\"1\":{\"685\":1}}],[\"15\",{\"0\":{\"1163\":2},\"1\":{\"261\":1,\"352\":1,\"685\":3,\"706\":1,\"765\":1,\"766\":1,\"767\":1,\"1005\":1,\"1017\":1,\"1037\":1,\"1107\":1}}],[\"153434l\",{\"1\":{\"647\":1}}],[\"153\",{\"1\":{\"102\":1}}],[\"1开始定义了cache\",{\"1\":{\"121\":1}}],[\"1再写缓存就覆盖no\",{\"1\":{\"117\":1}}],[\"1写完数据库还没写缓存\",{\"1\":{\"117\":1}}],[\"13<\",{\"1\":{\"458\":1}}],[\"13\",{\"1\":{\"107\":1,\"261\":1,\"364\":1,\"393\":1,\"686\":1,\"765\":1,\"766\":1,\"768\":1,\"961\":1,\"1005\":2,\"1006\":1}}],[\"135\",{\"1\":{\"76\":1}}],[\"1w的数据\",{\"1\":{\"103\":1}}],[\"1702门前\",{\"1\":{\"1090\":1}}],[\"1702\",{\"1\":{\"1090\":1}}],[\"17073114\",{\"1\":{\"543\":1,\"1081\":1}}],[\"170775050\",{\"1\":{\"383\":1}}],[\"17+3=20\",{\"1\":{\"918\":1}}],[\"1726069699\",{\"1\":{\"998\":1}}],[\"172\",{\"1\":{\"688\":2}}],[\"17<\",{\"1\":{\"397\":1,\"458\":1}}],[\"17\",{\"1\":{\"102\":1,\"261\":1,\"392\":1,\"731\":1,\"769\":1,\"771\":1,\"916\":1,\"1005\":1}}],[\"1k\",{\"1\":{\"92\":1}}],[\"115browser\",{\"1\":{\"1003\":1}}],[\"115014763\",{\"1\":{\"865\":1}}],[\"11<\",{\"1\":{\"397\":1}}],[\"11d\",{\"1\":{\"283\":1}}],[\"11刚发布的商品介绍变了点参数我晚一点看也不影响\",{\"1\":{\"118\":1}}],[\"11341\",{\"1\":{\"102\":1}}],[\"11\",{\"1\":{\"102\":1,\"115\":2,\"261\":1,\"283\":1,\"293\":1,\"393\":1,\"430\":1,\"662\":1,\"762\":1,\"765\":1,\"766\":1,\"768\":1,\"780\":1,\"920\":3,\"922\":2,\"925\":4,\"934\":2,\"935\":1,\"1005\":1,\"1006\":1}}],[\"1142\",{\"1\":{\"897\":1}}],[\"114994906\",{\"1\":{\"691\":1}}],[\"114481542\",{\"1\":{\"348\":1}}],[\"114374706\",{\"1\":{\"105\":1}}],[\"114\",{\"1\":{\"76\":4,\"1041\":4}}],[\"1110\",{\"1\":{\"648\":1}}],[\"111111\",{\"1\":{\"1158\":1}}],[\"1111\",{\"1\":{\"648\":6,\"1091\":4,\"1092\":8}}],[\"111414976\",{\"1\":{\"238\":1}}],[\"111\",{\"1\":{\"76\":1,\"87\":1,\"102\":1}}],[\"112\",{\"1\":{\"76\":1}}],[\"1token的话就每次时间<20就刷每次判断\",{\"1\":{\"70\":1}}],[\"1token频繁续期\",{\"1\":{\"70\":1}}],[\"16777\",{\"1\":{\"1085\":1}}],[\"16kb\",{\"1\":{\"903\":2}}],[\"168\",{\"1\":{\"198\":1,\"688\":1,\"793\":1,\"803\":1,\"857\":1}}],[\"16\",{\"1\":{\"48\":1,\"261\":1,\"295\":1,\"681\":3,\"688\":1,\"703\":2,\"768\":1,\"769\":1,\"770\":1,\"771\":1,\"917\":1,\"921\":1,\"922\":1,\"959\":3,\"961\":5,\"994\":2,\"1005\":1,\"1130\":1}}],[\"12th\",{\"1\":{\"996\":1}}],[\"1200\",{\"1\":{\"916\":2}}],[\"129\",{\"1\":{\"648\":2}}],[\"128~127的数字缓存起来了\",{\"1\":{\"686\":1}}],[\"128到127之间的数\",{\"1\":{\"686\":1}}],[\"128前面是\",{\"1\":{\"648\":1}}],[\"128\",{\"1\":{\"647\":2,\"648\":5,\"686\":1}}],[\"125\",{\"1\":{\"102\":1}}],[\"123abc456\",{\"1\":{\"959\":1}}],[\"123456\",{\"1\":{\"132\":2,\"133\":5,\"210\":1,\"625\":1,\"792\":1,\"802\":2}}],[\"123\",{\"1\":{\"73\":7,\"513\":1,\"688\":1,\"959\":3}}],[\"12\",{\"1\":{\"48\":1,\"115\":1,\"261\":2,\"267\":1,\"293\":1,\"594\":2,\"685\":1,\"686\":2,\"703\":1,\"715\":1,\"752\":2,\"765\":1,\"766\":1,\"768\":1,\"779\":1,\"919\":1,\"951\":4,\"954\":1,\"961\":1,\"1005\":1,\"1010\":2,\"1130\":2}}],[\"127时\",{\"1\":{\"686\":1}}],[\"12763522\",{\"1\":{\"73\":1}}],[\"127\",{\"1\":{\"46\":2,\"47\":1,\"72\":3,\"94\":1,\"647\":3,\"648\":6,\"688\":2,\"782\":1,\"853\":1,\"865\":1,\"1003\":3}}],[\"10月\",{\"1\":{\"1150\":1}}],[\"10k\",{\"1\":{\"1107\":1}}],[\"10秒执行一次\",{\"1\":{\"1084\":1}}],[\"10个字节用于存储实际数据\",{\"1\":{\"963\":1}}],[\"1064\",{\"1\":{\"895\":1,\"938\":1}}],[\"10的自然数的和可以用这个\",{\"1\":{\"689\":1}}],[\"10+\",{\"1\":{\"619\":1,\"685\":3}}],[\"10几台及其一起上线\",{\"1\":{\"590\":1}}],[\"10<\",{\"1\":{\"458\":1}}],[\"107\",{\"1\":{\"121\":1,\"857\":1}}],[\"10s\",{\"1\":{\"115\":1}}],[\"105\",{\"1\":{\"102\":1}}],[\"10367\",{\"1\":{\"102\":1}}],[\"100秒解释什么是devops\",{\"1\":{\"994\":1}}],[\"100g\",{\"1\":{\"935\":4}}],[\"10034617\",{\"1\":{\"539\":1}}],[\"1002都是新事务\",{\"1\":{\"178\":1}}],[\"1002\",{\"1\":{\"178\":1}}],[\"1001\",{\"1\":{\"178\":1}}],[\"100个单体才100个查询\",{\"1\":{\"123\":1}}],[\"10000\",{\"1\":{\"278\":1,\"586\":1,\"591\":1,\"880\":1,\"933\":4}}],[\"1000000\",{\"1\":{\"643\":1}}],[\"100000\",{\"1\":{\"123\":1,\"363\":1,\"546\":1,\"963\":1}}],[\"1000毫秒\",{\"1\":{\"113\":1}}],[\"1000\",{\"1\":{\"113\":1,\"115\":1,\"128\":1,\"648\":6,\"850\":1,\"857\":1,\"932\":1,\"985\":1}}],[\"100mb\",{\"1\":{\"101\":1}}],[\"100\",{\"0\":{\"364\":1,\"643\":1},\"1\":{\"101\":1,\"643\":1,\"688\":3,\"752\":2,\"851\":1,\"865\":1,\"887\":1,\"904\":3,\"916\":2,\"917\":1,\"921\":1,\"931\":2,\"932\":1,\"959\":5,\"1103\":1}}],[\"1007\",{\"1\":{\"69\":1}}],[\"1024\",{\"1\":{\"71\":1,\"448\":1,\"810\":1,\"883\":1,\"884\":1,\"1092\":3}}],[\"1024zzqの宝库\",{\"1\":{\"1160\":1}}],[\"1024zzq\",{\"1\":{\"71\":1,\"810\":1}}],[\"101=510050了\",{\"1\":{\"670\":1}}],[\"1010000042312154\",{\"1\":{\"546\":1}}],[\"101\",{\"1\":{\"71\":1,\"387\":1,\"676\":1,\"796\":1,\"810\":1}}],[\"108\",{\"1\":{\"47\":3}}],[\"10\",{\"1\":{\"47\":1,\"115\":1,\"179\":1,\"261\":1,\"265\":1,\"290\":1,\"295\":1,\"352\":4,\"361\":1,\"363\":1,\"374\":3,\"586\":1,\"620\":1,\"621\":1,\"646\":1,\"658\":3,\"685\":1,\"686\":2,\"688\":3,\"689\":2,\"691\":1,\"731\":1,\"751\":6,\"752\":4,\"757\":1,\"765\":2,\"766\":2,\"768\":2,\"771\":1,\"780\":1,\"785\":2,\"801\":2,\"850\":1,\"876\":1,\"885\":1,\"896\":1,\"897\":1,\"916\":3,\"924\":3,\"932\":6,\"963\":1,\"1005\":1,\"1006\":1,\"1041\":1,\"1107\":1}}],[\"1和1\",{\"1\":{\"47\":1}}],[\"1\",{\"0\":{\"65\":1,\"70\":1,\"73\":1,\"79\":1,\"84\":1,\"93\":1,\"97\":1,\"99\":1,\"103\":1,\"105\":1,\"113\":1,\"117\":1,\"119\":1,\"121\":1,\"126\":1,\"127\":1,\"128\":2,\"130\":1,\"131\":1,\"134\":1,\"136\":1,\"138\":1,\"141\":1,\"143\":1,\"147\":1,\"150\":1,\"154\":1,\"158\":1,\"160\":1,\"163\":1,\"167\":1,\"169\":1,\"176\":1,\"178\":1,\"190\":1,\"192\":1,\"195\":1,\"199\":1,\"201\":1,\"204\":1,\"205\":2,\"206\":1,\"209\":1,\"210\":2,\"211\":1,\"212\":1,\"214\":1,\"215\":2,\"216\":1,\"217\":1,\"218\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"229\":1,\"270\":1,\"273\":1,\"285\":1,\"293\":1,\"301\":1,\"303\":1,\"313\":1,\"314\":1,\"331\":1,\"353\":1,\"354\":2,\"355\":1,\"359\":1,\"361\":1,\"373\":1,\"394\":1,\"395\":2,\"396\":1,\"397\":2,\"398\":1,\"399\":1,\"400\":1,\"402\":1,\"404\":1,\"406\":1,\"413\":1,\"415\":1,\"416\":1,\"419\":1,\"421\":1,\"426\":1,\"430\":1,\"436\":1,\"441\":1,\"443\":1,\"446\":1,\"452\":1,\"453\":2,\"454\":1,\"456\":1,\"458\":1,\"467\":1,\"468\":2,\"469\":1,\"470\":2,\"471\":1,\"475\":1,\"476\":2,\"477\":1,\"479\":1,\"480\":2,\"486\":1,\"522\":1,\"536\":1,\"540\":1,\"542\":1,\"547\":1,\"555\":1,\"556\":2,\"557\":1,\"559\":1,\"563\":2,\"564\":1,\"565\":1,\"566\":1,\"568\":1,\"569\":1,\"573\":1,\"576\":1,\"580\":1,\"582\":1,\"584\":1,\"590\":1,\"592\":1,\"595\":1,\"600\":1,\"601\":2,\"602\":1,\"606\":1,\"615\":1,\"620\":1,\"625\":1,\"629\":1,\"631\":1,\"674\":2,\"697\":1,\"720\":1,\"740\":2,\"750\":1,\"754\":1,\"760\":1,\"765\":1,\"790\":1,\"791\":1,\"794\":1,\"795\":1,\"796\":1,\"801\":1,\"809\":1,\"812\":1,\"813\":2,\"814\":1,\"815\":1,\"817\":1,\"823\":1,\"825\":1,\"827\":1,\"833\":1,\"839\":1,\"841\":1,\"846\":1,\"853\":1,\"861\":1,\"866\":1,\"870\":1,\"872\":1,\"874\":1,\"876\":2,\"878\":2,\"879\":1,\"880\":2,\"885\":1,\"892\":1,\"898\":1,\"904\":1,\"909\":1,\"914\":1,\"921\":1,\"926\":1,\"930\":1,\"934\":1,\"958\":1,\"985\":1,\"991\":1,\"1016\":1,\"1045\":1,\"1079\":1,\"1081\":1,\"1082\":1,\"1088\":1,\"1089\":1,\"1095\":1,\"1097\":1,\"1101\":1,\"1139\":2,\"1140\":1,\"1144\":1,\"1147\":1,\"1150\":1},\"1\":{\"14\":1,\"21\":1,\"28\":2,\"30\":2,\"46\":2,\"47\":8,\"48\":2,\"49\":1,\"61\":1,\"63\":1,\"70\":1,\"71\":1,\"72\":3,\"76\":2,\"81\":4,\"94\":1,\"107\":2,\"108\":1,\"113\":1,\"115\":2,\"122\":1,\"123\":3,\"126\":1,\"128\":1,\"129\":1,\"136\":2,\"141\":1,\"147\":1,\"152\":2,\"153\":1,\"156\":4,\"165\":2,\"167\":1,\"169\":3,\"170\":3,\"172\":1,\"178\":3,\"179\":1,\"196\":1,\"197\":1,\"198\":1,\"202\":6,\"210\":1,\"220\":4,\"221\":4,\"226\":1,\"229\":3,\"230\":1,\"231\":1,\"238\":1,\"242\":1,\"252\":3,\"260\":1,\"261\":1,\"268\":1,\"283\":2,\"290\":2,\"293\":4,\"294\":3,\"295\":3,\"301\":2,\"302\":3,\"334\":2,\"343\":1,\"352\":5,\"354\":1,\"359\":1,\"366\":1,\"372\":2,\"383\":4,\"385\":4,\"387\":1,\"388\":2,\"389\":1,\"393\":1,\"397\":1,\"400\":1,\"419\":1,\"421\":1,\"423\":1,\"427\":1,\"429\":1,\"431\":1,\"436\":1,\"440\":1,\"443\":2,\"447\":2,\"458\":1,\"459\":2,\"460\":1,\"462\":2,\"464\":1,\"468\":1,\"476\":3,\"477\":1,\"478\":1,\"483\":1,\"487\":2,\"488\":1,\"489\":2,\"495\":1,\"505\":1,\"517\":1,\"546\":1,\"556\":1,\"567\":1,\"575\":1,\"576\":2,\"584\":2,\"590\":2,\"591\":3,\"594\":4,\"598\":3,\"608\":4,\"620\":1,\"621\":2,\"625\":2,\"646\":1,\"648\":10,\"650\":1,\"653\":1,\"658\":14,\"660\":1,\"661\":1,\"662\":1,\"676\":1,\"681\":5,\"685\":2,\"686\":8,\"687\":9,\"688\":19,\"691\":2,\"693\":1,\"694\":7,\"697\":2,\"706\":1,\"712\":1,\"713\":1,\"715\":2,\"721\":1,\"724\":2,\"739\":3,\"740\":2,\"750\":1,\"751\":6,\"752\":2,\"754\":1,\"761\":1,\"762\":1,\"765\":1,\"766\":3,\"767\":2,\"768\":1,\"769\":1,\"770\":1,\"771\":3,\"775\":1,\"778\":5,\"779\":3,\"780\":7,\"782\":2,\"784\":3,\"786\":1,\"793\":1,\"796\":3,\"798\":1,\"799\":2,\"800\":1,\"802\":2,\"803\":1,\"829\":1,\"830\":2,\"834\":2,\"835\":1,\"844\":2,\"853\":1,\"857\":1,\"865\":2,\"866\":1,\"867\":1,\"876\":1,\"877\":1,\"878\":1,\"885\":1,\"887\":2,\"895\":1,\"898\":1,\"900\":2,\"901\":3,\"902\":6,\"905\":8,\"906\":11,\"907\":1,\"908\":1,\"916\":1,\"917\":1,\"918\":1,\"921\":2,\"922\":1,\"923\":3,\"925\":14,\"929\":1,\"931\":1,\"932\":2,\"934\":3,\"935\":1,\"937\":1,\"938\":2,\"945\":1,\"947\":1,\"948\":1,\"949\":2,\"951\":3,\"952\":1,\"956\":3,\"959\":16,\"960\":1,\"961\":2,\"972\":1,\"973\":6,\"977\":2,\"980\":1,\"984\":1,\"985\":2,\"994\":2,\"1003\":4,\"1005\":8,\"1006\":3,\"1009\":2,\"1013\":1,\"1016\":1,\"1019\":2,\"1041\":1,\"1084\":4,\"1085\":11,\"1095\":1,\"1129\":1}}],[\"=px\",{\"1\":{\"1022\":1}}],[\"=abc\",{\"1\":{\"1021\":1,\"1022\":1,\"1023\":1}}],[\"=08\",{\"1\":{\"951\":1}}],[\"=3\",{\"1\":{\"923\":2}}],[\"=300m\",{\"1\":{\"383\":1}}],[\"=容量\",{\"1\":{\"703\":1}}],[\"=e\",{\"1\":{\"693\":1}}],[\"=header\",{\"1\":{\"613\":1}}],[\"=null\",{\"1\":{\"430\":1,\"432\":3,\"433\":3,\"434\":6,\"438\":2}}],[\"=153434l\",{\"1\":{\"647\":1}}],[\"=1\",{\"1\":{\"403\":1}}],[\"=500m\",{\"1\":{\"383\":2}}],[\"=2021\",{\"1\":{\"951\":1}}],[\"=2\",{\"1\":{\"220\":1}}],[\"=>\",{\"1\":{\"216\":2,\"229\":1,\"233\":2,\"281\":1,\"703\":1,\"778\":2,\"779\":1,\"844\":2,\"879\":1,\"1005\":2}}],[\"=version\",{\"1\":{\"170\":1}}],[\"=原子操作\",{\"1\":{\"111\":1}}],[\"==我给你举个例子\",{\"1\":{\"931\":1}}],[\"==如果你的事务中需要锁多个行\",{\"1\":{\"931\":1}}],[\"===\",{\"1\":{\"879\":1}}],[\"===>\",{\"1\":{\"836\":8}}],[\"===============================自己这边的\",{\"1\":{\"576\":1}}],[\"=======================鉴别器============================\",{\"1\":{\"429\":1}}],[\"==================\",{\"1\":{\"492\":1}}],[\"============\",{\"1\":{\"492\":1}}],[\"==0\",{\"1\":{\"430\":1,\"432\":1}}],[\"==调用unsafe类中的cas方法\",{\"1\":{\"303\":1}}],[\"==cas并发原语体现在java语言中就是sun\",{\"1\":{\"303\":1}}],[\"==cglib\",{\"1\":{\"182\":1}}],[\"==又称内存栅栏\",{\"1\":{\"296\":1}}],[\"==内存屏障\",{\"1\":{\"296\":1}}],[\"==jsonp的优势在于支持老式浏览器\",{\"1\":{\"232\":1}}],[\"==jsonp只支持get请求\",{\"1\":{\"232\":1}}],[\"==ssyx\",{\"1\":{\"231\":1}}],[\"==但是\",{\"1\":{\"182\":1}}],[\"==\",{\"0\":{\"517\":1},\"1\":{\"62\":1,\"103\":1,\"128\":1,\"229\":4,\"301\":2,\"302\":2,\"443\":1,\"517\":1,\"647\":1,\"686\":1,\"687\":1,\"718\":1,\"720\":2,\"723\":3,\"724\":1,\"725\":2,\"779\":3,\"1074\":1,\"1084\":4,\"1085\":1}}],[\"=\",{\"0\":{\"516\":1,\"517\":1,\"643\":1,\"724\":1,\"954\":1},\"1\":{\"14\":1,\"61\":3,\"67\":1,\"70\":1,\"80\":2,\"81\":1,\"92\":1,\"103\":1,\"105\":10,\"108\":1,\"113\":1,\"115\":2,\"123\":13,\"124\":3,\"125\":17,\"126\":1,\"128\":5,\"130\":2,\"133\":2,\"139\":4,\"156\":2,\"157\":5,\"164\":1,\"165\":1,\"169\":3,\"170\":2,\"178\":3,\"179\":11,\"202\":1,\"211\":1,\"216\":6,\"220\":5,\"221\":1,\"222\":1,\"229\":7,\"233\":2,\"236\":1,\"240\":2,\"243\":1,\"247\":1,\"249\":4,\"252\":2,\"260\":1,\"290\":1,\"293\":4,\"294\":13,\"295\":12,\"301\":9,\"302\":3,\"310\":3,\"317\":3,\"326\":1,\"334\":2,\"335\":2,\"338\":3,\"339\":3,\"342\":1,\"343\":2,\"352\":18,\"357\":2,\"361\":1,\"370\":1,\"374\":4,\"385\":1,\"388\":7,\"402\":3,\"403\":4,\"408\":2,\"415\":4,\"419\":3,\"421\":2,\"427\":3,\"429\":3,\"430\":10,\"432\":2,\"433\":2,\"436\":3,\"443\":4,\"447\":6,\"454\":1,\"465\":1,\"466\":1,\"480\":2,\"483\":2,\"486\":3,\"487\":1,\"492\":6,\"496\":1,\"503\":1,\"504\":2,\"511\":1,\"512\":1,\"515\":2,\"517\":1,\"531\":1,\"534\":1,\"538\":2,\"540\":8,\"575\":2,\"576\":2,\"580\":1,\"584\":1,\"586\":10,\"587\":2,\"594\":1,\"612\":1,\"624\":2,\"629\":1,\"643\":2,\"646\":2,\"647\":1,\"648\":14,\"650\":2,\"658\":17,\"660\":2,\"661\":1,\"662\":3,\"666\":1,\"670\":1,\"681\":2,\"683\":1,\"685\":13,\"686\":10,\"687\":20,\"688\":33,\"691\":12,\"697\":1,\"700\":2,\"715\":3,\"716\":2,\"718\":2,\"720\":8,\"721\":2,\"722\":3,\"723\":4,\"724\":3,\"725\":7,\"730\":3,\"740\":1,\"743\":1,\"763\":2,\"768\":1,\"775\":2,\"778\":7,\"779\":8,\"780\":6,\"782\":1,\"786\":8,\"792\":1,\"802\":1,\"829\":1,\"830\":1,\"831\":1,\"850\":5,\"851\":5,\"852\":1,\"869\":1,\"876\":3,\"877\":2,\"879\":3,\"880\":2,\"887\":5,\"906\":7,\"921\":1,\"923\":22,\"937\":1,\"938\":2,\"940\":2,\"941\":2,\"942\":1,\"948\":1,\"951\":1,\"954\":1,\"959\":12,\"964\":1,\"993\":2,\"1005\":6,\"1019\":6,\"1074\":5,\"1081\":1,\"1082\":2,\"1084\":15,\"1085\":16,\"1092\":2,\"1101\":1,\"1108\":1}}],[\"azure\",{\"1\":{\"1001\":2}}],[\"ayc\",{\"1\":{\"959\":1}}],[\"axc\",{\"1\":{\"959\":1}}],[\"axios中请求配置有baseurl选项\",{\"1\":{\"880\":1}}],[\"axios响应拦截器里\",{\"1\":{\"70\":1}}],[\"axios\",{\"1\":{\"69\":1,\"70\":1,\"216\":2,\"233\":6,\"880\":1}}],[\"axios配置请求\",{\"1\":{\"65\":1}}],[\"a<>1\",{\"1\":{\"923\":1}}],[\"a<>1会使用到索引吗\",{\"1\":{\"923\":1}}],[\"a3\",{\"1\":{\"923\":1}}],[\"av\",{\"1\":{\"990\":2,\"1005\":1}}],[\"avg\",{\"1\":{\"959\":4}}],[\"avl\",{\"1\":{\"916\":1}}],[\"availability\",{\"1\":{\"554\":1,\"571\":1}}],[\"available\",{\"1\":{\"48\":1,\"572\":1,\"594\":1,\"608\":1}}],[\"ahead\",{\"1\":{\"899\":1}}],[\"aon|findstr\",{\"1\":{\"1041\":1}}],[\"aof都开启了\",{\"1\":{\"860\":1}}],[\"aof\",{\"0\":{\"860\":1},\"1\":{\"860\":1}}],[\"aop对象包含了目标对象的全部方法\",{\"1\":{\"493\":1}}],[\"aop框架不会去修改字节码\",{\"1\":{\"493\":1}}],[\"aop框架会在编译阶段生成aop代理类\",{\"1\":{\"493\":1}}],[\"aop就是用的代理实现\",{\"1\":{\"493\":1}}],[\"aop<\",{\"1\":{\"492\":1}}],[\"aop=\",{\"1\":{\"462\":1}}],[\"aop是基于aspect\",{\"1\":{\"458\":1}}],[\"aop默认使用的是jdk动态代理或cglib代理吗\",{\"1\":{\"182\":1}}],[\"aopcontext\",{\"1\":{\"179\":2}}],[\"aop\",{\"0\":{\"490\":1,\"494\":2,\"495\":1,\"496\":1},\"1\":{\"178\":1,\"179\":1,\"182\":5,\"462\":6,\"465\":1,\"490\":1,\"492\":1,\"493\":3,\"494\":7,\"495\":1,\"497\":2,\"498\":3,\"519\":1,\"520\":1,\"638\":1,\"688\":1,\"887\":2}}],[\"a又\",{\"1\":{\"849\":1}}],[\"auguigu\",{\"1\":{\"823\":1}}],[\"auth问题\",{\"1\":{\"799\":1,\"985\":1}}],[\"authenticate\",{\"1\":{\"626\":1}}],[\"authenticationsuccesshandler\",{\"1\":{\"631\":1}}],[\"authenticationtoken\",{\"1\":{\"627\":1}}],[\"authenticationmanager\",{\"1\":{\"626\":1}}],[\"authenticationmanager接口\",{\"1\":{\"620\":1}}],[\"authentication接口\",{\"1\":{\"620\":1}}],[\"author\",{\"1\":{\"295\":1,\"691\":1,\"751\":6,\"752\":1,\"762\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2}}],[\"auth\",{\"1\":{\"141\":2,\"147\":1,\"799\":1,\"865\":1,\"985\":1,\"996\":1,\"1005\":1}}],[\"autowaird\",{\"1\":{\"1082\":1}}],[\"autowiring\",{\"1\":{\"488\":1}}],[\"autowire自动注入\",{\"1\":{\"488\":1}}],[\"autowired默认通过类型注入\",{\"1\":{\"488\":1}}],[\"autowired注解可以用于字段\",{\"1\":{\"488\":1}}],[\"autowired\",{\"1\":{\"124\":1,\"125\":1,\"229\":1,\"371\":1,\"453\":1,\"462\":1,\"488\":1,\"514\":1,\"529\":1,\"532\":1,\"576\":1,\"624\":1,\"884\":1}}],[\"autosave\",{\"1\":{\"1084\":1}}],[\"autosaveinterval\",{\"1\":{\"1084\":1}}],[\"autosetupremote\",{\"1\":{\"1005\":1}}],[\"autosuggestions\",{\"1\":{\"1005\":4}}],[\"autoload\",{\"1\":{\"1005\":1}}],[\"autojump\",{\"1\":{\"1003\":1,\"1005\":2}}],[\"autohotkey\",{\"1\":{\"996\":1,\"1037\":1}}],[\"autocommit\",{\"1\":{\"907\":1}}],[\"autocommit=1\",{\"1\":{\"907\":1,\"934\":1}}],[\"autocommit=0\",{\"1\":{\"907\":2,\"908\":1}}],[\"autoconfigurationimportselector\",{\"0\":{\"483\":1},\"1\":{\"478\":1}}],[\"autoconfigurationpackage的区别\",{\"1\":{\"482\":1}}],[\"autoconfigurationpackage🌟\",{\"0\":{\"482\":1}}],[\"autoconfigurationpackages\",{\"1\":{\"478\":1}}],[\"autoconfigurationpackage\",{\"1\":{\"478\":1,\"482\":5}}],[\"autoconfigure\",{\"1\":{\"125\":1,\"477\":1,\"481\":1,\"483\":1,\"828\":1}}],[\"automatically\",{\"1\":{\"473\":1}}],[\"auto\",{\"1\":{\"229\":2,\"731\":1,\"918\":1,\"961\":1,\"994\":1,\"1005\":3,\"1084\":1}}],[\"autotype\",{\"1\":{\"105\":1}}],[\"a++\",{\"1\":{\"771\":2}}],[\"a+1\",{\"1\":{\"771\":1}}],[\"a+b\",{\"1\":{\"752\":2,\"758\":1,\"760\":1}}],[\"aaaaaa\",{\"1\":{\"1158\":1}}],[\"aa\",{\"1\":{\"723\":1,\"921\":1}}],[\"a^5^5\",{\"1\":{\"688\":1}}],[\"a^b^b\",{\"1\":{\"688\":1}}],[\"a2的\",{\"1\":{\"686\":1}}],[\"a6af\",{\"1\":{\"676\":1}}],[\"a667e3f6\",{\"1\":{\"66\":1}}],[\"awesome\",{\"1\":{\"985\":1,\"1145\":1}}],[\"awesome系列\",{\"1\":{\"985\":1}}],[\"awt包下所有的类\",{\"1\":{\"665\":1}}],[\"awt\",{\"1\":{\"665\":3}}],[\"await\",{\"1\":{\"334\":2,\"335\":1,\"338\":1,\"339\":1,\"350\":1,\"352\":3}}],[\"a像b\",{\"1\":{\"657\":1}}],[\"a有b\",{\"1\":{\"656\":1}}],[\"a的关系\",{\"1\":{\"655\":1,\"656\":1,\"657\":1}}],[\"a是b\",{\"1\":{\"655\":1}}],[\"air3\",{\"1\":{\"1164\":1}}],[\"air\",{\"1\":{\"1164\":2}}],[\"airplay\",{\"1\":{\"1006\":1}}],[\"aio\",{\"0\":{\"713\":1},\"1\":{\"713\":5}}],[\"ait\",{\"0\":{\"1071\":1},\"1\":{\"646\":1}}],[\"aida64\",{\"1\":{\"76\":1}}],[\"a1\",{\"1\":{\"686\":1,\"923\":1}}],[\"a1d2\",{\"1\":{\"598\":1}}],[\"a1f3\",{\"1\":{\"598\":1}}],[\"a好实现\",{\"1\":{\"571\":1}}],[\"again\",{\"1\":{\"1005\":1,\"1037\":1}}],[\"aggressivelazyloading\",{\"1\":{\"400\":1,\"424\":1}}],[\"age=10\",{\"1\":{\"924\":1}}],[\"age=\",{\"1\":{\"923\":1}}],[\"age=0\",{\"1\":{\"47\":1}}],[\"age`\",{\"1\":{\"922\":1}}],[\"age>10\",{\"1\":{\"768\":1}}],[\"age>12\",{\"1\":{\"768\":1}}],[\"age>=o2\",{\"1\":{\"766\":1}}],[\"age\",{\"1\":{\"216\":2,\"277\":1,\"279\":1,\"404\":2,\"763\":5,\"765\":2,\"766\":3,\"923\":6,\"924\":6}}],[\"agents\",{\"1\":{\"998\":2}}],[\"agent\",{\"1\":{\"47\":1}}],[\"am\",{\"0\":{\"979\":1}}],[\"amqpadmin\",{\"1\":{\"828\":2}}],[\"amqp<\",{\"1\":{\"828\":1}}],[\"amqp端口\",{\"1\":{\"825\":1}}],[\"amqp命令都是通过信道发出去的\",{\"1\":{\"823\":1}}],[\"amqp只是协议\",{\"1\":{\"818\":1}}],[\"amqp是通过规定协议来统一数据交互的格式\",{\"1\":{\"818\":1}}],[\"amqp\",{\"1\":{\"468\":1,\"818\":2,\"820\":1,\"823\":1,\"828\":1,\"830\":1}}],[\"amp\",{\"1\":{\"398\":2,\"432\":2,\"461\":2}}],[\"amount\",{\"1\":{\"182\":1}}],[\"a704397849\",{\"1\":{\"398\":1}}],[\"a0d9\",{\"1\":{\"387\":1}}],[\"aqs\",{\"0\":{\"378\":1},\"1\":{\"378\":5}}],[\"a并没有进行修改写回主物理内存\",{\"1\":{\"309\":1}}],[\"a=3\",{\"1\":{\"923\":1}}],[\"a=a\",{\"1\":{\"780\":1}}],[\"a=creater1\",{\"1\":{\"763\":1}}],[\"a=10\",{\"1\":{\"771\":1}}],[\"a=1\",{\"1\":{\"653\":1}}],[\"a==b\",{\"1\":{\"647\":1}}],[\"a=\",{\"1\":{\"295\":1,\"780\":2}}],[\"a=5\",{\"1\":{\"88\":2}}],[\"afterreturning\",{\"1\":{\"495\":1}}],[\"after\",{\"1\":{\"260\":1,\"492\":1}}],[\"aftercompletion\",{\"1\":{\"157\":1}}],[\"a>\",{\"1\":{\"220\":1}}],[\"atom\",{\"1\":{\"1150\":1}}],[\"atomicity\",{\"1\":{\"905\":1,\"962\":1}}],[\"atomicinteger里面的value原始值为3\",{\"1\":{\"305\":1}}],[\"atomicinteger对象本身\",{\"1\":{\"305\":1}}],[\"atomicinteger\",{\"1\":{\"291\":1,\"304\":1}}],[\"atomic\",{\"1\":{\"849\":1}}],[\"atomicreference<>\",{\"1\":{\"310\":1}}],[\"atomicreference<user>\",{\"1\":{\"310\":1}}],[\"atomicreference\",{\"1\":{\"310\":6}}],[\"ate\",{\"1\":{\"959\":2}}],[\"at\",{\"0\":{\"608\":1},\"1\":{\"392\":1,\"606\":1,\"607\":1,\"608\":1,\"895\":1,\"902\":2,\"938\":1,\"1005\":1,\"1109\":1}}],[\"atguigu\",{\"1\":{\"273\":1,\"419\":1,\"432\":1,\"433\":1,\"438\":1,\"478\":1,\"487\":1,\"688\":1}}],[\"at是第一阶段提交+2第二阶段看要不要补偿\",{\"1\":{\"183\":1,\"607\":1}}],[\"at事务模式是这个的一个变形\",{\"1\":{\"183\":1}}],[\"attrids\",{\"1\":{\"252\":1}}],[\"attributes>\",{\"1\":{\"462\":2}}],[\"attributes\",{\"1\":{\"130\":2,\"483\":1,\"492\":2}}],[\"attrentity\",{\"1\":{\"252\":5}}],[\"attrvo\",{\"1\":{\"252\":1}}],[\"attrgroup\",{\"1\":{\"244\":1}}],[\"attr\",{\"1\":{\"128\":3,\"244\":1,\"252\":3}}],[\"attrs\",{\"0\":{\"18\":1}}],[\"a方法没有加\",{\"1\":{\"182\":1}}],[\"a事务的所有设置就传播到了和他公用一个事务的方法\",{\"1\":{\"179\":1}}],[\"a调用b时带上唯一id\",{\"1\":{\"174\":1}}],[\"another\",{\"1\":{\"1005\":1}}],[\"anonymous\",{\"1\":{\"688\":1}}],[\"anonyous一定是在某个地方被干嘛干嘛了\",{\"1\":{\"688\":1,\"890\":1}}],[\"antmatchers\",{\"1\":{\"889\":2}}],[\"antpathmatcher\",{\"1\":{\"157\":1}}],[\"anywhere\",{\"1\":{\"633\":1,\"634\":1,\"1006\":1}}],[\"ansi是平台默认编码\",{\"1\":{\"688\":1}}],[\"ans01=\",{\"1\":{\"685\":1}}],[\"ans01+\",{\"1\":{\"685\":2}}],[\"ans01\",{\"1\":{\"685\":6}}],[\"anser\",{\"1\":{\"571\":1}}],[\"answer\",{\"1\":{\"132\":1,\"383\":1,\"897\":1,\"899\":2,\"925\":1,\"929\":1,\"933\":1,\"998\":1}}],[\"an\",{\"1\":{\"317\":2,\"869\":1,\"895\":2,\"938\":1,\"1005\":1}}],[\"analyzer\",{\"1\":{\"281\":1}}],[\"analyze\",{\"0\":{\"263\":1},\"1\":{\"281\":1}}],[\"android\",{\"1\":{\"1139\":1,\"1150\":1}}],[\"and\",{\"0\":{\"263\":1,\"957\":1},\"1\":{\"170\":1,\"236\":1,\"302\":1,\"362\":1,\"385\":2,\"408\":1,\"430\":7,\"431\":2,\"432\":5,\"473\":3,\"494\":1,\"683\":1,\"688\":1,\"691\":2,\"855\":1,\"869\":1,\"896\":1,\"906\":1,\"907\":2,\"921\":1,\"922\":1,\"923\":22,\"924\":2,\"941\":2,\"942\":1,\"951\":2,\"952\":2,\"954\":1,\"959\":7,\"1005\":1,\"1006\":1,\"1009\":1}}],[\"annotationprocessorpaths>\",{\"1\":{\"546\":1}}],[\"annotation为你的类生成相对略微复杂的构建器api\",{\"1\":{\"513\":1}}],[\"annotationmetadata\",{\"1\":{\"483\":2}}],[\"annotations\",{\"1\":{\"123\":1,\"728\":1}}],[\"annotation\",{\"1\":{\"123\":1,\"241\":1,\"242\":2,\"460\":3,\"462\":1,\"492\":1,\"495\":1,\"887\":1,\"889\":1}}],[\"architecture\",{\"1\":{\"1078\":1}}],[\"archiver\",{\"1\":{\"993\":1}}],[\"ary\",{\"1\":{\"691\":3}}],[\"arp\",{\"1\":{\"688\":1}}],[\"arr=\",{\"1\":{\"780\":2}}],[\"arr\",{\"1\":{\"688\":4,\"780\":4,\"1085\":10}}],[\"arraydeque更加方便实现栈\",{\"1\":{\"677\":1}}],[\"arraydeque\",{\"1\":{\"642\":1}}],[\"arraylist特有的方法和属性\",{\"1\":{\"1074\":1}}],[\"arraylist<integer>\",{\"1\":{\"767\":1}}],[\"arraylist<person>\",{\"1\":{\"765\":1,\"768\":1}}],[\"arraylist<>\",{\"1\":{\"715\":1,\"765\":1,\"767\":1,\"768\":1,\"1019\":1}}],[\"arraylist有问题\",{\"1\":{\"694\":1}}],[\"arraylist可以在循环时删除里面的数据吗😡todo\",{\"0\":{\"645\":1}}],[\"arraylist\",{\"1\":{\"392\":1,\"534\":1,\"645\":2,\"688\":1,\"765\":1,\"767\":1,\"768\":1,\"1074\":2}}],[\"array\",{\"1\":{\"359\":1}}],[\"arrays\",{\"1\":{\"249\":1,\"359\":1,\"436\":1,\"480\":1,\"672\":1,\"775\":4,\"780\":1}}],[\"around\",{\"1\":{\"492\":2,\"496\":3,\"1081\":2}}],[\"area\",{\"1\":{\"386\":1,\"722\":2,\"1005\":2,\"1006\":2}}],[\"are\",{\"1\":{\"362\":3}}],[\"artifactid\",{\"1\":{\"556\":1}}],[\"artifactid>\",{\"1\":{\"105\":1,\"238\":2,\"242\":1,\"397\":5,\"458\":14,\"476\":2,\"477\":1,\"492\":1,\"546\":3,\"556\":3,\"589\":1,\"594\":1,\"828\":1,\"1010\":3}}],[\"artifact\",{\"1\":{\"397\":3}}],[\"articles\",{\"1\":{\"543\":1,\"986\":1,\"1081\":1}}],[\"article\",{\"1\":{\"105\":1,\"238\":1,\"348\":1,\"398\":1,\"559\":1,\"691\":1,\"865\":1,\"959\":1,\"986\":1}}],[\"arg0\",{\"1\":{\"407\":1}}],[\"arguments配置优先\",{\"1\":{\"548\":1}}],[\"arguments为我们传入main方法的字符串数组args\",{\"1\":{\"548\":1}}],[\"arguments中配置\",{\"1\":{\"548\":1}}],[\"arguments\",{\"0\":{\"548\":1},\"1\":{\"546\":2}}],[\"argument\",{\"1\":{\"362\":1}}],[\"args中作为参数传入\",{\"1\":{\"548\":1}}],[\"args其实一样可以拿参数\",{\"1\":{\"546\":1}}],[\"args\",{\"1\":{\"123\":1,\"335\":1,\"339\":1,\"343\":1,\"352\":1,\"388\":2,\"480\":1,\"492\":2,\"546\":1,\"650\":1,\"658\":3,\"686\":2,\"687\":1,\"691\":2,\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"725\":2,\"752\":1,\"762\":1,\"763\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"780\":1,\"1019\":1}}],[\"argv\",{\"1\":{\"88\":1,\"580\":1}}],[\"arg列表\",{\"1\":{\"88\":1}}],[\"arg1\",{\"1\":{\"88\":1}}],[\"arg\",{\"1\":{\"88\":1,\"406\":1,\"462\":2}}],[\"about\",{\"1\":{\"1005\":1}}],[\"abortpolicy\",{\"1\":{\"363\":1}}],[\"ab压测安装\",{\"1\":{\"857\":1}}],[\"ab\",{\"1\":{\"723\":5,\"857\":1,\"925\":1}}],[\"abs\",{\"1\":{\"923\":2}}],[\"absolutely\",{\"1\":{\"473\":1}}],[\"abstractwrapper\",{\"1\":{\"743\":1,\"1101\":1}}],[\"abstractstringbuilder\",{\"1\":{\"720\":2}}],[\"abstract\",{\"1\":{\"668\":1,\"669\":1,\"686\":2}}],[\"abstraction\",{\"1\":{\"468\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"378\":1}}],[\"abandon\",{\"0\":{\"1184\":1}}],[\"aba我听懂了\",{\"1\":{\"309\":1}}],[\"aba\",{\"1\":{\"309\":1}}],[\"aba问题\",{\"0\":{\"308\":1},\"1\":{\"83\":1}}],[\"ab+c\",{\"1\":{\"216\":2,\"240\":1}}],[\"abc相互之间可以完全不知道对方的\",{\"1\":{\"612\":1}}],[\"abc替换\",{\"1\":{\"73\":1}}],[\"abc\",{\"0\":{\"724\":1},\"1\":{\"73\":12,\"249\":1,\"440\":1,\"687\":2,\"691\":1,\"724\":1,\"725\":1,\"959\":4,\"1021\":1,\"1022\":1}}],[\"acwing\",{\"1\":{\"1085\":1}}],[\"ac\",{\"1\":{\"923\":1}}],[\"ac和abc三种组合\",{\"1\":{\"923\":1}}],[\"ack=true\",{\"1\":{\"836\":1}}],[\"ack\",{\"1\":{\"836\":3,\"837\":1,\"844\":2}}],[\"acknowledge\",{\"1\":{\"832\":1,\"837\":1}}],[\"actor\",{\"1\":{\"994\":1}}],[\"actions里面写了测试\",{\"1\":{\"994\":1}}],[\"actions不同的是\",{\"1\":{\"994\":1}}],[\"actions就是这个服务\",{\"1\":{\"994\":1}}],[\"actions\",{\"0\":{\"994\":1},\"1\":{\"994\":5}}],[\"action\",{\"1\":{\"767\":1,\"994\":3}}],[\"activity\",{\"1\":{\"952\":3}}],[\"activated\",{\"1\":{\"225\":1}}],[\"active=app\",{\"1\":{\"546\":1}}],[\"active=dev3如果同时存在\",{\"1\":{\"548\":1}}],[\"active=dev3\",{\"1\":{\"547\":1,\"548\":1}}],[\"active=dev\",{\"1\":{\"543\":1}}],[\"active指定\",{\"1\":{\"543\":1}}],[\"active\",{\"1\":{\"220\":1,\"543\":2,\"546\":1,\"597\":2}}],[\"actuator\",{\"0\":{\"567\":1},\"1\":{\"554\":1,\"567\":2,\"594\":1,\"889\":1}}],[\"acquirelock\",{\"1\":{\"851\":1}}],[\"acquire\",{\"1\":{\"342\":1,\"343\":1,\"553\":1,\"554\":1}}],[\"account\",{\"1\":{\"182\":1,\"274\":1,\"606\":1,\"878\":1,\"927\":1,\"994\":1}}],[\"accesstoken访问github开放的api\",{\"1\":{\"138\":1}}],[\"accesstoken\",{\"1\":{\"70\":1}}],[\"access\",{\"1\":{\"70\":1,\"71\":2,\"72\":1,\"157\":2,\"630\":1,\"782\":1,\"796\":2,\"810\":2,\"893\":1,\"993\":1,\"1084\":1}}],[\"accept\",{\"1\":{\"47\":3,\"48\":1,\"688\":2,\"771\":1,\"1001\":1}}],[\"acid\",{\"0\":{\"962\":1},\"1\":{\"79\":1,\"183\":2,\"905\":1,\"962\":1}}],[\"adapters\",{\"1\":{\"613\":1}}],[\"advanved\",{\"1\":{\"818\":1}}],[\"advanced\",{\"0\":{\"90\":1},\"1\":{\"818\":1,\"1005\":1}}],[\"advice>\",{\"1\":{\"462\":1}}],[\"advice\",{\"1\":{\"462\":2,\"495\":1,\"498\":1,\"887\":1}}],[\"advisor>\",{\"1\":{\"462\":1}}],[\"advisor\",{\"1\":{\"462\":1}}],[\"addobject\",{\"1\":{\"1081\":1}}],[\"addkeystoagent\",{\"1\":{\"1005\":1}}],[\"addpathpatterns\",{\"1\":{\"534\":2}}],[\"addemps\",{\"1\":{\"437\":3}}],[\"addstudent\",{\"1\":{\"403\":2,\"404\":1}}],[\"addgroup\",{\"1\":{\"241\":4}}],[\"addall\",{\"1\":{\"767\":1}}],[\"addallowedorigin\",{\"1\":{\"231\":1}}],[\"addallowedmethod\",{\"1\":{\"231\":1}}],[\"addallowedheader\",{\"1\":{\"231\":1}}],[\"addattribute\",{\"1\":{\"98\":1,\"536\":1}}],[\"addcategory\",{\"1\":{\"220\":2}}],[\"add\",{\"1\":{\"183\":1,\"290\":2,\"607\":1,\"694\":1,\"715\":5,\"765\":7,\"766\":7,\"768\":7,\"796\":1,\"799\":1,\"804\":2,\"919\":2,\"928\":2,\"952\":1,\"987\":3,\"990\":2,\"1005\":6,\"1019\":1}}],[\"addfilterbefore\",{\"1\":{\"156\":1,\"627\":1}}],[\"addflashattribute\",{\"1\":{\"130\":1}}],[\"addflashattribute方法代表只需要取一次\",{\"1\":{\"98\":1,\"536\":1}}],[\"addviewcontroller\",{\"1\":{\"97\":2}}],[\"addviewcontrollers\",{\"1\":{\"97\":1}}],[\"addr\",{\"1\":{\"71\":2,\"595\":1,\"810\":2,\"1005\":1}}],[\"address默认具有防篡改的功能\",{\"1\":{\"46\":1}}],[\"address地址\",{\"1\":{\"46\":3}}],[\"address\",{\"1\":{\"46\":1,\"198\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"683\":3,\"796\":4}}],[\"adminapiconfig\",{\"1\":{\"1097\":1}}],[\"administrator\",{\"1\":{\"1039\":1}}],[\"admin123\",{\"1\":{\"879\":1}}],[\"admin\",{\"1\":{\"68\":1,\"539\":2,\"625\":1,\"879\":1}}],[\"a被视为相同的路径\",{\"1\":{\"60\":1}}],[\"a和ab\",{\"1\":{\"923\":1}}],[\"a和\",{\"1\":{\"60\":1}}],[\"always\",{\"1\":{\"1005\":1}}],[\"alhg\",{\"1\":{\"1005\":1}}],[\"alfred\",{\"1\":{\"996\":1,\"1003\":1,\"1004\":1,\"1005\":4}}],[\"alan\",{\"1\":{\"751\":6,\"752\":3,\"762\":3,\"765\":3,\"766\":3,\"767\":2,\"768\":3,\"769\":2,\"770\":2,\"771\":4}}],[\"alone\",{\"1\":{\"473\":2}}],[\"aload\",{\"1\":{\"290\":1}}],[\"alert\",{\"1\":{\"128\":1,\"220\":1}}],[\"all会保留那些重复的数据\",{\"1\":{\"947\":1}}],[\"all不去重不排序\",{\"1\":{\"947\":1}}],[\"alloc\",{\"1\":{\"849\":1}}],[\"allocate\",{\"1\":{\"301\":2}}],[\"allof\",{\"1\":{\"377\":2}}],[\"allof再return\",{\"1\":{\"377\":1}}],[\"allowrequest\",{\"1\":{\"850\":1}}],[\"allowcorethreadtimeout\",{\"1\":{\"362\":1}}],[\"allowed\",{\"1\":{\"260\":1,\"540\":2,\"706\":1}}],[\"allow\",{\"1\":{\"54\":1,\"362\":1}}],[\"all\",{\"0\":{\"947\":1},\"1\":{\"229\":3,\"273\":2,\"477\":1,\"543\":1,\"608\":2,\"650\":1,\"793\":1,\"803\":1,\"947\":3,\"959\":2,\"981\":1,\"990\":1,\"1003\":1,\"1005\":2,\"1081\":1}}],[\"alllevelmenus\",{\"1\":{\"229\":2}}],[\"allentries\",{\"1\":{\"123\":1}}],[\"alist\",{\"1\":{\"1074\":1}}],[\"alisql\",{\"1\":{\"928\":1}}],[\"aliyun\",{\"1\":{\"614\":1,\"616\":1,\"789\":1}}],[\"aliyuncs\",{\"1\":{\"208\":1,\"789\":1}}],[\"alipayorder\",{\"1\":{\"515\":1}}],[\"alipaytemplate\",{\"1\":{\"191\":1}}],[\"ali\",{\"1\":{\"191\":1,\"554\":1,\"614\":1,\"1026\":1}}],[\"alicloud\",{\"1\":{\"126\":1}}],[\"alibaba学习资料获取\",{\"1\":{\"594\":1}}],[\"alibaba<\",{\"1\":{\"105\":1,\"458\":1}}],[\"alibaba\",{\"1\":{\"105\":1,\"228\":5,\"238\":1,\"462\":1,\"468\":1,\"570\":1,\"581\":1,\"588\":1,\"591\":1,\"594\":11,\"608\":2}}],[\"alias\",{\"0\":{\"73\":1},\"1\":{\"73\":8,\"1005\":39}}],[\"alive缓存功能\",{\"1\":{\"225\":1}}],[\"alive\",{\"1\":{\"47\":2,\"48\":5}}],[\"algorithm\",{\"1\":{\"539\":1,\"718\":1}}],[\"alg\",{\"1\":{\"66\":1}}],[\"alt向下移动该行\",{\"0\":{\"1061\":1}}],[\"alt+left\",{\"1\":{\"1074\":1}}],[\"alt+效果最好\",{\"1\":{\"1036\":1}}],[\"alt+esc键快速切换打开程序和alt+tab切换有两处不同\",{\"1\":{\"1036\":1}}],[\"alt+esc\",{\"0\":{\"1036\":1}}],[\"alt+insert\",{\"1\":{\"530\":1}}],[\"alter\",{\"1\":{\"792\":1,\"802\":2,\"919\":5,\"928\":3}}],[\"alt\",{\"0\":{\"1036\":1,\"1060\":1,\"1063\":1,\"1065\":1,\"1066\":1},\"1\":{\"62\":2,\"215\":1,\"1005\":1,\"1051\":1}}],[\"ajax技术的核心是xmlhttprequest对象\",{\"1\":{\"49\":1}}],[\"ajax\",{\"1\":{\"49\":2,\"216\":1}}],[\"ajax通过原生的xmlhttprequest对象发出http请求\",{\"1\":{\"49\":1}}],[\"apl与servlet容器基础之上运行的\",{\"1\":{\"590\":1}}],[\"ap架构\",{\"1\":{\"572\":1}}],[\"ap\",{\"1\":{\"571\":1,\"572\":2,\"594\":1}}],[\"apps\",{\"1\":{\"1084\":1}}],[\"appdata\",{\"1\":{\"1037\":1}}],[\"appearance\",{\"1\":{\"1005\":1}}],[\"appendnull\",{\"1\":{\"720\":2}}],[\"append\",{\"0\":{\"860\":1},\"1\":{\"720\":1,\"887\":3}}],[\"appender\",{\"1\":{\"399\":3,\"463\":3}}],[\"appendonly\",{\"1\":{\"213\":1}}],[\"app>\",{\"1\":{\"459\":1}}],[\"appname\",{\"1\":{\"222\":1}}],[\"app\",{\"0\":{\"1003\":1,\"1005\":1},\"1\":{\"136\":1,\"220\":8,\"221\":2,\"459\":2,\"787\":5,\"880\":2,\"883\":2,\"996\":1,\"999\":3,\"1003\":8,\"1005\":5}}],[\"apple将默认的shell从bash切换到了zsh\",{\"1\":{\"1037\":1}}],[\"appleshowallfiles\",{\"1\":{\"998\":2,\"1005\":2}}],[\"apple\",{\"1\":{\"998\":2,\"999\":2,\"1005\":3,\"1006\":2}}],[\"applewebkit\",{\"1\":{\"47\":1}}],[\"apply\",{\"1\":{\"688\":1,\"876\":1}}],[\"applicaiton\",{\"1\":{\"593\":1}}],[\"application要配置seata\",{\"1\":{\"608\":1}}],[\"application文件载入\",{\"0\":{\"550\":1}}],[\"applicationarguments\",{\"1\":{\"546\":1,\"1166\":1}}],[\"applicationrunner\",{\"1\":{\"546\":2,\"1166\":2}}],[\"applicationlistener\",{\"1\":{\"543\":1,\"1081\":1}}],[\"applicationevent也行其实走的是这里\",{\"1\":{\"543\":1,\"1081\":1}}],[\"applicationevent\",{\"1\":{\"543\":7,\"1081\":7}}],[\"applicationeventpublisher\",{\"1\":{\"543\":3,\"1081\":3}}],[\"applications\",{\"1\":{\"473\":2,\"999\":2,\"1006\":1}}],[\"applicationcontextaware\",{\"1\":{\"486\":2,\"538\":5,\"1082\":5}}],[\"applicationcontext是\",{\"1\":{\"486\":1}}],[\"applicationcontext接口\",{\"1\":{\"486\":1}}],[\"applicationcontext\",{\"0\":{\"462\":1},\"1\":{\"124\":3,\"454\":2,\"459\":1,\"486\":7,\"498\":1,\"538\":9,\"543\":1,\"1081\":1,\"1082\":9}}],[\"application\",{\"1\":{\"47\":2,\"48\":1,\"124\":1,\"230\":1,\"382\":1,\"485\":2,\"522\":6,\"537\":2,\"543\":14,\"591\":1,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":1,\"632\":1,\"679\":1,\"796\":1,\"827\":2,\"857\":1,\"1005\":2,\"1006\":1,\"1080\":3,\"1084\":2}}],[\"applicotioneventpublisher\",{\"1\":{\"543\":1,\"1081\":1}}],[\"api等\",{\"1\":{\"1012\":1}}],[\"api的jar文件\",{\"1\":{\"1012\":1}}],[\"api的调用\",{\"1\":{\"581\":1}}],[\"api作为一个provided依赖\",{\"1\":{\"1012\":1}}],[\"api或java\",{\"1\":{\"1012\":1}}],[\"api文档解释\",{\"1\":{\"767\":1}}],[\"api可以对集合数据进行操作\",{\"1\":{\"689\":1}}],[\"api>\",{\"1\":{\"612\":1}}],[\"api非常方便\",{\"1\":{\"520\":1}}],[\"api<\",{\"1\":{\"242\":1,\"458\":2}}],[\"api中都有示例\",{\"1\":{\"193\":1}}],[\"api执行上面处理好的检索请求得到响应数据\",{\"1\":{\"126\":1}}],[\"api和juc差不多\",{\"1\":{\"115\":1}}],[\"api\",{\"1\":{\"90\":1,\"110\":1,\"125\":2,\"227\":1,\"228\":1,\"268\":1,\"283\":1,\"382\":1,\"551\":1,\"553\":1,\"591\":6,\"616\":1,\"629\":1,\"688\":2,\"689\":1,\"713\":1,\"740\":2,\"775\":1,\"880\":4,\"882\":1,\"883\":4,\"884\":3,\"887\":1,\"1012\":2,\"1166\":1}}],[\"apache等\",{\"1\":{\"883\":1}}],[\"apache=info\",{\"1\":{\"399\":1,\"463\":1}}],[\"apache\",{\"1\":{\"48\":1,\"131\":1,\"132\":3,\"139\":2,\"140\":1,\"153\":1,\"393\":3,\"399\":2,\"402\":4,\"458\":1,\"463\":2,\"594\":1,\"706\":1,\"1010\":3}}],[\"apr\",{\"1\":{\"47\":1,\"996\":1}}],[\"a5c8a5e8\",{\"1\":{\"587\":1}}],[\"a5\",{\"1\":{\"47\":1}}],[\"asia\",{\"1\":{\"1081\":1}}],[\"asdasd\",{\"1\":{\"1021\":1}}],[\"ask\",{\"1\":{\"1005\":1}}],[\"asc\",{\"0\":{\"946\":1}}],[\"ascii\",{\"1\":{\"60\":1,\"1081\":2}}],[\"assets\",{\"1\":{\"1078\":1}}],[\"assembly\",{\"1\":{\"731\":1}}],[\"association定义关联对象的封装规则\",{\"1\":{\"423\":1}}],[\"association>\",{\"1\":{\"422\":1,\"429\":1}}],[\"association可以指定联合的javabean对象\",{\"1\":{\"422\":1}}],[\"association\",{\"0\":{\"420\":1}}],[\"assign\",{\"1\":{\"229\":1,\"721\":1}}],[\"aslist\",{\"1\":{\"249\":1,\"436\":1,\"775\":4}}],[\"asyncfactory\",{\"1\":{\"884\":1}}],[\"asynchronous\",{\"0\":{\"713\":1}}],[\"async\",{\"1\":{\"157\":2,\"202\":2,\"372\":3,\"543\":3,\"1081\":3}}],[\"asyncmethodwithcontext\",{\"1\":{\"157\":2}}],[\"astext\",{\"1\":{\"105\":1}}],[\"aspects\",{\"1\":{\"1081\":1}}],[\"aspect\",{\"1\":{\"492\":2,\"495\":1,\"887\":1}}],[\"aspectj\",{\"0\":{\"494\":1},\"1\":{\"182\":4,\"493\":4,\"494\":6}}],[\"aspectj可以代理非public方法吗\",{\"1\":{\"182\":1}}],[\"asp\",{\"1\":{\"60\":1}}],[\"as\",{\"1\":{\"27\":1,\"327\":1,\"328\":1,\"329\":2,\"473\":1,\"540\":1,\"941\":2,\"943\":1,\"946\":1,\"949\":1,\"951\":2,\"955\":1,\"959\":18,\"1005\":4,\"1006\":1}}],[\"a\",{\"0\":{\"543\":1,\"654\":1},\"1\":{\"14\":1,\"47\":1,\"60\":7,\"71\":1,\"76\":2,\"91\":1,\"92\":1,\"112\":1,\"125\":1,\"157\":1,\"179\":1,\"249\":1,\"260\":1,\"272\":2,\"294\":5,\"295\":13,\"302\":1,\"309\":4,\"317\":1,\"321\":10,\"352\":2,\"362\":1,\"388\":4,\"477\":1,\"483\":1,\"486\":1,\"487\":2,\"488\":1,\"539\":1,\"543\":5,\"554\":1,\"570\":1,\"571\":1,\"572\":5,\"603\":1,\"606\":1,\"625\":1,\"647\":1,\"653\":1,\"655\":1,\"656\":1,\"657\":3,\"671\":1,\"685\":6,\"686\":6,\"688\":11,\"691\":5,\"693\":6,\"694\":24,\"715\":5,\"721\":3,\"725\":1,\"751\":2,\"752\":4,\"754\":2,\"755\":2,\"758\":2,\"760\":2,\"762\":3,\"780\":5,\"862\":1,\"868\":1,\"869\":1,\"881\":1,\"905\":5,\"906\":3,\"919\":1,\"923\":28,\"925\":9,\"927\":2,\"928\":4,\"930\":2,\"931\":5,\"932\":4,\"933\":9,\"934\":2,\"935\":2,\"937\":1,\"959\":8,\"961\":6,\"962\":1,\"987\":2,\"988\":2,\"990\":2,\"1006\":2,\"1012\":1,\"1018\":1,\"1051\":1,\"1160\":2}}],[\"与他人互帮互助\",{\"1\":{\"1077\":1}}],[\"与原库的值不同\",{\"1\":{\"901\":2}}],[\"与此类似\",{\"1\":{\"899\":1}}],[\"与查询流程不一样的是\",{\"1\":{\"898\":1}}],[\"与windows下的计划任务类似\",{\"1\":{\"782\":1}}],[\"与堆空间中的对象没有直接关联\",{\"1\":{\"723\":1}}],[\"与权限修饰符无关\",{\"1\":{\"652\":1}}],[\"与方法的返回值无关\",{\"1\":{\"652\":1}}],[\"与上面erp概念模型小区别是\",{\"1\":{\"613\":1}}],[\"与上面的互不影响\",{\"1\":{\"178\":1}}],[\"与tc交谈以注册分支事务和报告分支事务的状态\",{\"1\":{\"606\":1}}],[\"与服务端8001没有关系\",{\"1\":{\"585\":1}}],[\"与之类似的还有另一个接口\",{\"1\":{\"546\":1,\"1166\":1}}],[\"与其把黄金时间留给公司\",{\"1\":{\"980\":1}}],[\"与其说是将字符串关押到字符串常量池stringtable中\",{\"1\":{\"723\":1}}],[\"与其近似的还有一个对比\",{\"1\":{\"637\":1}}],[\"与其相对应的\",{\"1\":{\"635\":1}}],[\"与其他技术的整合都在这个顶级项目地址中\",{\"1\":{\"451\":1}}],[\"与其它技术比较\",{\"1\":{\"49\":1}}],[\"与数据库同一次会话期间查询到的数据会放在本地缓存中\",{\"1\":{\"443\":1}}],[\"与quarz\",{\"1\":{\"202\":1}}],[\"与redis有个网络io\",{\"1\":{\"111\":1}}],[\"与\",{\"0\":{\"244\":1},\"1\":{\"14\":1,\"73\":1,\"101\":1,\"182\":1,\"229\":1,\"252\":1,\"277\":1,\"520\":1,\"715\":1,\"928\":1}}],[\"v8引擎执行javascript的速度非常快\",{\"1\":{\"1099\":1}}],[\"v开头\",{\"1\":{\"1079\":1}}],[\"vv\",{\"1\":{\"1005\":1}}],[\"v4\",{\"1\":{\"935\":3}}],[\"v3\",{\"1\":{\"905\":5,\"935\":2,\"994\":2}}],[\"v2ex\",{\"1\":{\"1128\":1}}],[\"v2\",{\"1\":{\"905\":6,\"935\":2,\"994\":1}}],[\"vhost\",{\"1\":{\"823\":3}}],[\"v映射\",{\"1\":{\"689\":1}}],[\"vl\",{\"1\":{\"994\":1}}],[\"vlue可以存null值\",{\"1\":{\"688\":1}}],[\"vlt\",{\"1\":{\"352\":1}}],[\"v>\",{\"1\":{\"674\":1,\"688\":2}}],[\"v1\",{\"1\":{\"594\":1,\"905\":5,\"935\":1}}],[\"vector\",{\"1\":{\"688\":1}}],[\"velocity和freemarker会自动配置该filter\",{\"1\":{\"539\":1}}],[\"verbose\",{\"1\":{\"990\":1}}],[\"verify\",{\"1\":{\"981\":1}}],[\"verifytoken\",{\"1\":{\"67\":1}}],[\"verification\",{\"1\":{\"679\":1}}],[\"very\",{\"1\":{\"599\":1}}],[\"versioned的文件的相对路径\",{\"1\":{\"993\":1}}],[\"versioned\",{\"1\":{\"993\":2}}],[\"version=\",{\"1\":{\"400\":1,\"459\":2,\"460\":1,\"462\":1,\"464\":1}}],[\"version会往上涨\",{\"1\":{\"271\":1}}],[\"version\",{\"1\":{\"170\":2,\"268\":1,\"539\":1,\"751\":6,\"752\":1,\"762\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"895\":1,\"906\":3,\"938\":1,\"994\":3,\"1080\":1,\"1081\":4}}],[\"version>5\",{\"1\":{\"476\":1}}],[\"version>\",{\"1\":{\"105\":1,\"238\":2,\"242\":1,\"397\":5,\"458\":14,\"476\":3,\"477\":1,\"546\":1,\"556\":2,\"1010\":1}}],[\"version版本号\",{\"0\":{\"83\":1}}],[\"v目录挂载\",{\"1\":{\"210\":1}}],[\"v结构\",{\"1\":{\"155\":1}}],[\"v结构就可以了\",{\"1\":{\"155\":1}}],[\"vo包下的类一般封装查询条件\",{\"1\":{\"1098\":1}}],[\"volatile的应用\",{\"0\":{\"299\":1}}],[\"volatile的可见性\",{\"1\":{\"290\":1}}],[\"volatile实现禁止指令重排优化\",{\"1\":{\"296\":1}}],[\"volatile针对指令重排做了啥\",{\"0\":{\"296\":1}}],[\"volatile就规定禁止指令重排\",{\"1\":{\"294\":1}}],[\"volatile修饰一个变量时\",{\"1\":{\"283\":1}}],[\"volatile\",{\"0\":{\"302\":1},\"1\":{\"283\":3,\"284\":1,\"290\":1,\"301\":1,\"302\":2,\"779\":2}}],[\"vo\",{\"0\":{\"155\":1},\"1\":{\"250\":1,\"251\":1,\"252\":1}}],[\"vos\",{\"1\":{\"130\":1}}],[\"void\",{\"1\":{\"67\":1,\"97\":1,\"124\":1,\"133\":1,\"157\":3,\"179\":5,\"202\":1,\"252\":1,\"290\":2,\"293\":1,\"295\":2,\"322\":2,\"335\":1,\"339\":1,\"343\":1,\"352\":4,\"388\":4,\"403\":1,\"415\":1,\"419\":1,\"427\":1,\"429\":1,\"430\":1,\"436\":1,\"437\":1,\"443\":1,\"447\":1,\"486\":1,\"487\":1,\"492\":3,\"495\":1,\"529\":1,\"530\":1,\"538\":1,\"543\":3,\"650\":1,\"658\":3,\"661\":2,\"680\":1,\"686\":6,\"687\":2,\"688\":2,\"691\":5,\"715\":2,\"716\":3,\"720\":2,\"721\":1,\"722\":1,\"723\":1,\"725\":2,\"730\":1,\"751\":3,\"752\":1,\"762\":1,\"763\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":2,\"771\":2,\"780\":2,\"829\":1,\"830\":1,\"831\":2,\"836\":1,\"851\":1,\"852\":2,\"887\":1,\"890\":1,\"1019\":1,\"1081\":3,\"1082\":1,\"1085\":4}}],[\"v\",{\"1\":{\"110\":1,\"210\":9,\"213\":2,\"220\":26,\"221\":3,\"224\":2,\"237\":1,\"267\":3,\"415\":2,\"508\":1,\"694\":5,\"791\":3,\"794\":2,\"795\":5,\"796\":2,\"876\":1,\"942\":3,\"990\":2,\"1001\":1,\"1005\":2}}],[\"vmoptions\",{\"1\":{\"998\":1}}],[\"vm规范的选项\",{\"1\":{\"383\":1}}],[\"vm\",{\"0\":{\"547\":1},\"1\":{\"101\":1,\"218\":1,\"220\":1,\"383\":1,\"547\":2,\"722\":1}}],[\"visio\",{\"1\":{\"1145\":1}}],[\"visual\",{\"1\":{\"101\":1,\"1003\":1,\"1005\":1}}],[\"via\",{\"1\":{\"823\":1}}],[\"vi\",{\"1\":{\"800\":1,\"1005\":1}}],[\"vim命令看附录\",{\"1\":{\"810\":1}}],[\"vim\",{\"1\":{\"782\":1,\"796\":2,\"805\":1,\"810\":2,\"990\":1,\"998\":1,\"1005\":2}}],[\"vip\",{\"1\":{\"599\":1}}],[\"virtualip\",{\"1\":{\"599\":1}}],[\"virtual\",{\"1\":{\"218\":1,\"823\":1}}],[\"views\",{\"1\":{\"460\":1}}],[\"viewmodel\",{\"1\":{\"220\":1}}],[\"viewport\",{\"1\":{\"220\":1}}],[\"view\",{\"1\":{\"218\":3,\"251\":1,\"460\":1,\"906\":4,\"934\":5,\"935\":1}}],[\"viewcontrollerregistry\",{\"1\":{\"97\":1}}],[\"viewcontroller\",{\"1\":{\"97\":1}}],[\"videofusion\",{\"1\":{\"1003\":1}}],[\"video\",{\"1\":{\"69\":1,\"543\":2,\"869\":2,\"1081\":2}}],[\"val1\",{\"1\":{\"305\":1}}],[\"validate\",{\"1\":{\"260\":1,\"802\":10}}],[\"validatedby\",{\"1\":{\"243\":1}}],[\"validated\",{\"1\":{\"241\":5}}],[\"validationmessages\",{\"1\":{\"243\":1}}],[\"validation<\",{\"1\":{\"242\":1}}],[\"validation\",{\"1\":{\"239\":1,\"242\":1}}],[\"valid\",{\"1\":{\"130\":1,\"240\":2,\"243\":1,\"981\":1,\"987\":1}}],[\"val\",{\"1\":{\"128\":1,\"234\":1}}],[\"value用json对象\",{\"1\":{\"872\":1}}],[\"value都是string类型\",{\"1\":{\"688\":1}}],[\"value不能存null\",{\"1\":{\"688\":1}}],[\"value不重要\",{\"1\":{\"110\":1}}],[\"value0f\",{\"1\":{\"686\":1}}],[\"value读取到\",{\"1\":{\"546\":1}}],[\"value>true<\",{\"1\":{\"459\":2}}],[\"value>utf\",{\"1\":{\"459\":1}}],[\"value>\",{\"1\":{\"459\":5,\"706\":2}}],[\"value>classpath\",{\"1\":{\"459\":2}}],[\"valueof\",{\"1\":{\"334\":1,\"335\":1,\"338\":1,\"339\":1,\"343\":1,\"850\":1}}],[\"value<0\",{\"1\":{\"237\":1}}],[\"value=cp\",{\"1\":{\"594\":1}}],[\"value=\",{\"1\":{\"220\":2,\"400\":8,\"424\":2,\"429\":2,\"438\":1,\"440\":1,\"448\":1,\"460\":2,\"462\":9,\"464\":2,\"487\":2,\"489\":1,\"610\":3}}],[\"values\",{\"1\":{\"156\":1,\"165\":1,\"404\":1,\"437\":2,\"889\":1,\"905\":1,\"921\":1,\"934\":1,\"959\":2,\"973\":4}}],[\"value等同于cachenames\",{\"1\":{\"123\":1}}],[\"value利用起来\",{\"1\":{\"111\":1}}],[\"valuetotree\",{\"1\":{\"105\":1}}],[\"value\",{\"0\":{\"415\":1,\"416\":1,\"505\":1},\"1\":{\"80\":1,\"87\":1,\"92\":1,\"105\":1,\"123\":6,\"125\":2,\"130\":1,\"134\":1,\"155\":2,\"157\":3,\"227\":1,\"229\":1,\"237\":1,\"241\":1,\"260\":1,\"305\":1,\"363\":1,\"366\":2,\"416\":1,\"487\":1,\"504\":1,\"505\":2,\"511\":1,\"515\":1,\"540\":2,\"586\":4,\"593\":1,\"598\":1,\"687\":1,\"720\":6,\"721\":3,\"722\":1,\"852\":2,\"876\":1,\"894\":3,\"905\":1,\"906\":1,\"914\":3,\"956\":2,\"959\":4,\"1038\":1}}],[\"varchar类型的默认长度为1\",{\"1\":{\"963\":1}}],[\"varchar\",{\"1\":{\"917\":1,\"921\":1,\"922\":2,\"969\":1}}],[\"variment相当于普通\",{\"1\":{\"796\":1}}],[\"variable=value\",{\"1\":{\"782\":1,\"1038\":1}}],[\"variable中的变量的key相同\",{\"1\":{\"549\":1}}],[\"variables没有前缀\",{\"1\":{\"549\":1}}],[\"variables中配置\",{\"1\":{\"549\":1}}],[\"variables\",{\"0\":{\"549\":1},\"1\":{\"256\":1,\"522\":1,\"546\":1,\"802\":1,\"894\":2,\"897\":2,\"902\":2,\"905\":2,\"932\":2,\"1080\":2}}],[\"variable\",{\"1\":{\"14\":1,\"392\":1,\"721\":1,\"905\":1,\"1038\":1}}],[\"var8\",{\"1\":{\"580\":1}}],[\"var4\",{\"1\":{\"305\":2}}],[\"var2\",{\"1\":{\"305\":3}}],[\"var5\",{\"1\":{\"305\":2}}],[\"var1\",{\"1\":{\"85\":1,\"305\":2,\"877\":1}}],[\"var\",{\"1\":{\"73\":5,\"128\":2,\"210\":4,\"216\":8,\"220\":1,\"240\":1,\"661\":2,\"791\":2,\"795\":1,\"802\":1,\"1001\":3}}],[\"vda1\",{\"1\":{\"782\":1}}],[\"vd\",{\"1\":{\"69\":1,\"543\":2,\"1081\":2}}],[\"v=4zxtyc2zjxm\",{\"0\":{\"980\":1}}],[\"v=\",{\"1\":{\"47\":3}}],[\"vs新建工作区\",{\"1\":{\"1100\":1}}],[\"vscode\",{\"0\":{\"1100\":1},\"1\":{\"215\":1,\"229\":1,\"1005\":8}}],[\"vs\",{\"0\":{\"72\":1,\"674\":1,\"704\":1},\"1\":{\"47\":1,\"98\":1,\"131\":1,\"141\":1,\"154\":1,\"183\":1,\"216\":1,\"220\":2,\"360\":1,\"372\":1,\"536\":1,\"553\":1,\"586\":1,\"627\":1,\"686\":2,\"688\":3,\"723\":1,\"740\":1,\"741\":1,\"782\":1,\"807\":1,\"887\":1,\"938\":1,\"1150\":1}}],[\"vuerouter\",{\"1\":{\"1134\":1}}],[\"vue提供的状态管理工具\",{\"1\":{\"883\":1}}],[\"vuex\",{\"1\":{\"883\":2}}],[\"vue生产环境我也想配置proxy解决代理可以吗\",{\"1\":{\"883\":1}}],[\"vuejs\",{\"1\":{\"883\":1}}],[\"vue获取图片是请求的前端还是后端\",{\"1\":{\"882\":1}}],[\"vue的代理配置主要是为了在开发环境下方便调试和解决跨域问题\",{\"1\":{\"883\":1}}],[\"vue的代理配置不会生效\",{\"1\":{\"883\":1}}],[\"vue的代理只在开发环境下起作用\",{\"1\":{\"883\":1}}],[\"vue的前后端分离的后台管理系统\",{\"1\":{\"877\":1}}],[\"vue的函数调用加不加\",{\"1\":{\"220\":1}}],[\"vue入门学习笔记\",{\"1\":{\"218\":1}}],[\"vue\",{\"0\":{\"877\":1,\"880\":1,\"882\":1},\"1\":{\"30\":2,\"96\":1,\"215\":1,\"218\":2,\"219\":10,\"220\":15,\"221\":5,\"222\":11,\"223\":2,\"233\":4,\"238\":1,\"878\":1,\"879\":1,\"880\":2,\"881\":2,\"883\":2}}],[\"vuepress\",{\"0\":{\"12\":1},\"1\":{\"8\":2,\"10\":2,\"11\":1,\"12\":2,\"13\":1,\"29\":1}}],[\"提醒事项\",{\"1\":{\"1164\":1}}],[\"提醒我们try\",{\"1\":{\"705\":1}}],[\"提取的部分内容\",{\"1\":{\"1019\":1}}],[\"提到数据库索引\",{\"1\":{\"909\":1}}],[\"提到事务\",{\"1\":{\"904\":1,\"905\":1}}],[\"提交操作\",{\"1\":{\"990\":1}}],[\"提交后\",{\"1\":{\"905\":1}}],[\"提交有成功有失败情况\",{\"1\":{\"854\":1}}],[\"提交阶段\",{\"1\":{\"609\":3}}],[\"提交或回滚全局事务\",{\"1\":{\"606\":1}}],[\"提交事务\",{\"1\":{\"169\":1}}],[\"提前暴露\",{\"1\":{\"543\":2}}],[\"提出问题\",{\"1\":{\"454\":1,\"462\":1}}],[\"提出了跨源资源共享方案\",{\"1\":{\"231\":1}}],[\"提示存在循环依赖的问题\",{\"1\":{\"543\":1}}],[\"提示\",{\"1\":{\"220\":1,\"688\":1,\"739\":1,\"993\":1}}],[\"提示容器\",{\"0\":{\"14\":1},\"1\":{\"14\":1}}],[\"提供住宿\",{\"1\":{\"1104\":1}}],[\"提供各种福利\",{\"1\":{\"1104\":1}}],[\"提供jmstemplate\",{\"1\":{\"820\":1}}],[\"提供不同方案的实现\",{\"1\":{\"740\":1}}],[\"提供海量数据近实时的检索体验\",{\"1\":{\"736\":1}}],[\"提供字符流和字节流之间的转换\",{\"1\":{\"688\":1}}],[\"提供核心用户信息\",{\"1\":{\"620\":1}}],[\"提供低延时的\",{\"1\":{\"594\":1}}],[\"提供秒级\",{\"1\":{\"594\":2}}],[\"提供一个\",{\"1\":{\"585\":1}}],[\"提供作用\",{\"1\":{\"556\":1}}],[\"提供具体值\",{\"1\":{\"522\":1}}],[\"提供给开发人员使用\",{\"1\":{\"486\":1}}],[\"提供更多更强大的功能\",{\"1\":{\"486\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"13\":1}}],[\"提供生产级别的监控\",{\"1\":{\"473\":1}}],[\"提供的一个注解\",{\"1\":{\"520\":1}}],[\"提供的\",{\"1\":{\"302\":1,\"634\":1}}],[\"提供\",{\"1\":{\"216\":1}}],[\"提供了一个加全局读锁的方法\",{\"1\":{\"927\":1}}],[\"提供了一个机制\",{\"1\":{\"543\":1}}],[\"提供了高效\",{\"1\":{\"712\":1}}],[\"提供了非阻塞的\",{\"1\":{\"712\":1}}],[\"提供了\",{\"1\":{\"712\":1}}],[\"提供了认证和授权功能\",{\"1\":{\"153\":1}}],[\"提供了更方便的\",{\"1\":{\"112\":1}}],[\"提高部署效率\",{\"1\":{\"1012\":1}}],[\"提高性能\",{\"1\":{\"973\":1}}],[\"提高数据的安全性\",{\"1\":{\"960\":1}}],[\"提高可扩展性\",{\"1\":{\"960\":1}}],[\"提高运算效率\",{\"1\":{\"739\":1}}],[\"提高出错概率\",{\"1\":{\"715\":1}}],[\"提高代码复用性和可维护性\",{\"1\":{\"520\":1}}],[\"提高代码效率\",{\"1\":{\"91\":1}}],[\"提高系统效率\",{\"1\":{\"441\":1}}],[\"提高系统安全性\",{\"1\":{\"411\":1}}],[\"提高系统的可扩展性和可靠性\",{\"1\":{\"103\":1}}],[\"提高线程的可管理性\",{\"1\":{\"367\":1}}],[\"提高响应速度\",{\"1\":{\"367\":1}}],[\"提高效率\",{\"1\":{\"261\":1}}],[\"提高用户体验\",{\"1\":{\"239\":1}}],[\"提高并发\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"提升了并发度\",{\"1\":{\"931\":1}}],[\"提升了\",{\"1\":{\"686\":1}}],[\"提升购物体验\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"提升响应\",{\"1\":{\"183\":1,\"607\":1,\"845\":1}}],[\"提升\",{\"1\":{\"103\":1}}],[\"m2文件夹中\",{\"1\":{\"1014\":1}}],[\"mcd\",{\"1\":{\"1005\":1}}],[\"mcr\",{\"1\":{\"1001\":2}}],[\"mkcert\",{\"1\":{\"1003\":1}}],[\"mkdir\",{\"1\":{\"208\":1,\"213\":1,\"267\":2,\"796\":2,\"1005\":4}}],[\"mbp\",{\"1\":{\"1001\":1}}],[\"mbg\",{\"1\":{\"458\":1,\"465\":1}}],[\"mf2z3k\",{\"1\":{\"868\":1}}],[\"m`\",{\"1\":{\"787\":1,\"800\":1}}],[\"mp中有lambda的wrapper\",{\"1\":{\"743\":1,\"1101\":1}}],[\"mp\",{\"0\":{\"743\":1,\"1101\":1},\"1\":{\"330\":1,\"877\":1,\"1008\":1}}],[\"music了\",{\"1\":{\"1165\":1}}],[\"must\",{\"1\":{\"277\":3,\"278\":1}}],[\"mutex\",{\"1\":{\"867\":1}}],[\"multiprocessing\",{\"1\":{\"1095\":1}}],[\"multipart\",{\"1\":{\"483\":1}}],[\"multipartresolver\",{\"1\":{\"483\":7}}],[\"multiple\",{\"1\":{\"123\":1,\"837\":2}}],[\"multi\",{\"0\":{\"276\":1},\"1\":{\"85\":1,\"276\":1,\"854\":1}}],[\"mmazzarolo\",{\"1\":{\"1006\":1}}],[\"mm\",{\"1\":{\"247\":2,\"730\":1}}],[\"m\",{\"0\":{\"1065\":1},\"1\":{\"229\":1,\"277\":1,\"399\":1,\"463\":1,\"594\":1,\"646\":1,\"688\":8,\"780\":2,\"787\":1,\"799\":1,\"800\":1,\"923\":1,\"940\":2,\"987\":1,\"990\":1,\"996\":1,\"999\":1,\"1005\":6,\"1092\":1}}],[\"mqtt协议端口\",{\"1\":{\"825\":1}}],[\"mq笔记\",{\"1\":{\"187\":1}}],[\"mq\",{\"0\":{\"843\":1,\"1177\":1},\"1\":{\"183\":2,\"607\":2,\"811\":1,\"845\":2,\"849\":1}}],[\"mv\",{\"1\":{\"1005\":1}}],[\"mvvm\",{\"1\":{\"218\":2}}],[\"mvnrepository\",{\"1\":{\"397\":3}}],[\"mvn\",{\"1\":{\"153\":1}}],[\"mvcc的实现依赖于\",{\"1\":{\"908\":1}}],[\"mvcc\",{\"0\":{\"935\":1},\"1\":{\"905\":1,\"906\":11,\"927\":1,\"934\":3,\"972\":1}}],[\"mvc=\",{\"1\":{\"460\":1}}],[\"mvc的默认json解析器便是jackson\",{\"1\":{\"247\":1}}],[\"mvc配时间格式\",{\"1\":{\"192\":1}}],[\"mvc\",{\"0\":{\"460\":1},\"1\":{\"60\":1,\"231\":1,\"459\":1,\"460\":6,\"498\":1,\"520\":1,\"534\":1,\"543\":2,\"546\":1,\"726\":1,\"727\":1}}],[\"mytest\",{\"1\":{\"993\":1}}],[\"mythread\",{\"1\":{\"650\":2,\"688\":3}}],[\"mythreadconfig\",{\"0\":{\"369\":1}}],[\"myisam\",{\"1\":{\"892\":3,\"900\":2,\"904\":2,\"906\":1,\"913\":1,\"927\":2,\"929\":1,\"930\":2}}],[\"mymaster\",{\"1\":{\"865\":2}}],[\"my变了\",{\"1\":{\"780\":1}}],[\"mynode\",{\"1\":{\"716\":4}}],[\"mypasswordencoder\",{\"1\":{\"625\":1}}],[\"myproject\",{\"1\":{\"522\":1}}],[\"myci\",{\"1\":{\"994\":1}}],[\"mycat是一个中间件的第三方应用\",{\"1\":{\"960\":1}}],[\"mycacheconfig\",{\"1\":{\"125\":1}}],[\"myclass\",{\"1\":{\"661\":2,\"688\":2}}],[\"myconfig$$enhancerbyspringcglib$$1\",{\"1\":{\"517\":1}}],[\"myconfig\",{\"1\":{\"517\":2}}],[\"myrabbitconfig对象创建完成以后\",{\"1\":{\"510\":1,\"836\":1}}],[\"myurl\",{\"1\":{\"505\":1}}],[\"myblog\",{\"1\":{\"782\":1,\"810\":1,\"987\":2}}],[\"mybean\",{\"1\":{\"538\":1,\"1082\":1}}],[\"mybeanpost\",{\"1\":{\"489\":3}}],[\"mybaits使用where标签来将所有的查询条件包括在内\",{\"1\":{\"431\":1}}],[\"mybatis整合spring的jar包\",{\"1\":{\"458\":1}}],[\"mybatis会利用序列化\",{\"1\":{\"448\":1}}],[\"mybatis会做特殊处理\",{\"1\":{\"407\":1}}],[\"mybatis觉得获取的数据可能会被修改\",{\"1\":{\"448\":1}}],[\"mybatis为了加快获取速度\",{\"1\":{\"448\":1}}],[\"mybatis认为所有从缓存中获取数据的操作都是只读操作\",{\"1\":{\"448\":1}}],[\"mybatis留了cache接口\",{\"1\":{\"441\":1}}],[\"mybatis默认还有两个内置参数\",{\"1\":{\"438\":1}}],[\"mybatis已经对所有java类型起好名了具体看官方文档\",{\"1\":{\"429\":1}}],[\"mybatis可以使用discriminator判断某列的值\",{\"1\":{\"429\":1}}],[\"mybatisutils\",{\"1\":{\"402\":1,\"403\":1,\"415\":1,\"419\":1,\"427\":1,\"429\":1,\"430\":1,\"436\":1,\"443\":1,\"447\":2}}],[\"mybatisutil\",{\"0\":{\"402\":1}}],[\"mybatis<\",{\"1\":{\"397\":1,\"458\":2}}],[\"mybatis中文网\",{\"1\":{\"394\":1}}],[\"mybatis本身并不提供连接池功能\",{\"1\":{\"393\":1}}],[\"mybatisplus中开启了逻辑删除则更新逻辑字段不再管用\",{\"1\":{\"236\":1}}],[\"mybatisx\",{\"1\":{\"229\":1}}],[\"mybatis\",{\"0\":{\"246\":1,\"393\":1,\"400\":1,\"464\":1},\"1\":{\"229\":5,\"393\":3,\"397\":2,\"398\":1,\"400\":3,\"402\":1,\"411\":2,\"419\":1,\"430\":1,\"432\":1,\"433\":1,\"438\":1,\"448\":1,\"451\":1,\"458\":3,\"461\":1,\"462\":4,\"464\":3,\"465\":2,\"523\":2,\"887\":1,\"1012\":4}}],[\"myempdis\",{\"1\":{\"429\":2}}],[\"mydeptstep\",{\"1\":{\"427\":2}}],[\"mydata\",{\"1\":{\"210\":6,\"213\":4,\"267\":7,\"780\":4,\"786\":2}}],[\"myselfrule\",{\"1\":{\"575\":1}}],[\"mysimpleemp\",{\"1\":{\"419\":2}}],[\"mysort\",{\"1\":{\"293\":1}}],[\"mysql的备份\",{\"1\":{\"1078\":1}}],[\"mysql的innodb引擎内部会帮你生成一个名为row\",{\"1\":{\"972\":1}}],[\"mysql优化器覆盖索引是指查询可以直接使用索引来满足查询需求\",{\"1\":{\"969\":1}}],[\"mysql没有索引查行数据怎么查\",{\"0\":{\"966\":1}}],[\"mysql会按照主键的顺序进行扫描\",{\"1\":{\"967\":1}}],[\"mysql会按照rowid的顺序进行扫描\",{\"1\":{\"967\":1}}],[\"mysql会为每一行隐式地分配一个rowid\",{\"1\":{\"965\":1}}],[\"mysql会根据存储的实际数据长度来动态分配存储空间\",{\"1\":{\"963\":1}}],[\"mysql中创建表时候必须指定主键吗\",{\"0\":{\"965\":1}}],[\"mysql将为该字段分配一个字节的存储空间\",{\"1\":{\"963\":1}}],[\"mysql将使用默认长度来定义该字段\",{\"1\":{\"963\":1}}],[\"mysql分库分表是一种数据库技术\",{\"1\":{\"960\":1}}],[\"mysql索引\",{\"0\":{\"936\":1}}],[\"mysql查询优化器会判断纠正这条sql语句该以什么样的顺序执行效率最高\",{\"1\":{\"923\":1}}],[\"mysql是由mvcc实现的事务控制\",{\"1\":{\"908\":1}}],[\"mysql实战45讲\",{\"0\":{\"891\":1}}],[\"mysql实现分布式锁\",{\"1\":{\"78\":1}}],[\"mysql使用utf8mb4经验吐血总结\",{\"1\":{\"808\":1}}],[\"mysql导入sql文件\",{\"0\":{\"806\":1}}],[\"mysql57\",{\"1\":{\"801\":2}}],[\"mysql>select\",{\"1\":{\"923\":3}}],[\"mysql>\",{\"1\":{\"792\":1,\"802\":1,\"894\":1,\"895\":1,\"896\":1,\"897\":1,\"898\":2,\"905\":2,\"917\":1,\"921\":1,\"924\":1,\"934\":1}}],[\"mysql版本5\",{\"1\":{\"792\":1,\"802\":1}}],[\"mysql驱动\",{\"1\":{\"458\":1}}],[\"mysql支持values\",{\"1\":{\"437\":1}}],[\"mysql下批量保存\",{\"1\":{\"437\":1}}],[\"mysqldump\",{\"1\":{\"787\":1,\"800\":1,\"927\":2,\"929\":3}}],[\"mysqld\",{\"1\":{\"211\":1,\"793\":1,\"802\":3,\"803\":1,\"805\":1,\"977\":2}}],[\"mysql悲观锁\",{\"1\":{\"82\":1}}],[\"mysql\",{\"0\":{\"209\":1,\"791\":1,\"892\":1,\"941\":1,\"977\":1},\"1\":{\"79\":1,\"81\":1,\"87\":1,\"102\":1,\"210\":21,\"211\":6,\"212\":6,\"213\":1,\"260\":1,\"267\":2,\"397\":2,\"398\":2,\"438\":1,\"440\":1,\"461\":2,\"476\":1,\"572\":1,\"609\":1,\"637\":1,\"782\":1,\"787\":1,\"791\":11,\"800\":1,\"801\":2,\"802\":2,\"808\":1,\"868\":1,\"892\":4,\"893\":8,\"894\":4,\"895\":5,\"896\":1,\"897\":1,\"898\":2,\"899\":3,\"900\":6,\"901\":1,\"902\":5,\"904\":5,\"905\":3,\"906\":3,\"907\":1,\"908\":4,\"913\":1,\"916\":2,\"921\":1,\"922\":2,\"924\":2,\"926\":2,\"927\":2,\"928\":4,\"929\":1,\"930\":3,\"931\":1,\"932\":2,\"933\":1,\"934\":1,\"935\":1,\"936\":1,\"938\":2,\"941\":1,\"959\":1,\"963\":2,\"969\":2,\"970\":1,\"974\":1,\"998\":3,\"1081\":1}}],[\"my\",{\"1\":{\"81\":1,\"179\":2,\"183\":1,\"220\":2,\"512\":1,\"522\":8,\"571\":2,\"606\":1,\"608\":1,\"780\":5,\"782\":1,\"805\":1,\"834\":2,\"906\":2,\"994\":1,\"1005\":7,\"1007\":1,\"1038\":2}}],[\"migration目录\",{\"1\":{\"1079\":1}}],[\"mission\",{\"1\":{\"1006\":2}}],[\"missing\",{\"1\":{\"1005\":1}}],[\"miscellany\",{\"1\":{\"993\":1}}],[\"misc包中\",{\"1\":{\"304\":1}}],[\"misc\",{\"1\":{\"303\":1,\"1005\":1}}],[\"microsoft\",{\"1\":{\"1001\":2,\"1003\":1,\"1037\":1}}],[\"mixed\",{\"1\":{\"802\":1}}],[\"mid\",{\"1\":{\"648\":3,\"1085\":7}}],[\"mill\",{\"1\":{\"275\":1,\"276\":1,\"277\":1,\"278\":1}}],[\"mill匹配含有990或者mill的结果\",{\"1\":{\"275\":1}}],[\"millis\",{\"1\":{\"67\":1}}],[\"mirror>\",{\"1\":{\"1013\":2}}],[\"mirrorof>\",{\"1\":{\"1013\":2}}],[\"mirror\",{\"1\":{\"208\":1,\"789\":2}}],[\"mirrors\",{\"1\":{\"208\":1,\"789\":2}}],[\"minimal\",{\"1\":{\"1005\":1}}],[\"mini会输出其默认的分辨率\",{\"1\":{\"998\":1}}],[\"mini上时\",{\"1\":{\"998\":1}}],[\"mini\",{\"1\":{\"823\":1}}],[\"minio服务器的访问地址为\",{\"1\":{\"796\":1}}],[\"minio镜像来运行minio服务器\",{\"1\":{\"796\":1}}],[\"minio\",{\"0\":{\"796\":1,\"799\":1,\"985\":1},\"1\":{\"540\":1,\"787\":4,\"796\":14,\"799\":6,\"800\":6,\"985\":5,\"1084\":2}}],[\"minio处理\",{\"0\":{\"540\":1}}],[\"mininum\",{\"1\":{\"100\":1}}],[\"min\",{\"1\":{\"539\":2,\"703\":1,\"943\":1}}],[\"minorgc\",{\"1\":{\"385\":1}}],[\"minor\",{\"1\":{\"385\":1}}],[\"minutes\",{\"1\":{\"67\":1,\"260\":1}}],[\"minute\",{\"1\":{\"67\":1,\"890\":1}}],[\"media\",{\"1\":{\"1157\":1}}],[\"medium\",{\"1\":{\"802\":2}}],[\"merge命令\",{\"1\":{\"990\":1}}],[\"merge两个步骤的结合\",{\"1\":{\"990\":1}}],[\"merge将其与本地的当前分支合并\",{\"1\":{\"990\":1}}],[\"merge\",{\"1\":{\"959\":1,\"990\":5,\"1005\":1}}],[\"messaging\",{\"1\":{\"612\":1,\"613\":1}}],[\"messageconverter\",{\"1\":{\"828\":1}}],[\"message在java中都有对应的类\",{\"1\":{\"823\":1}}],[\"messagequeue\",{\"1\":{\"811\":1}}],[\"messageheaders\",{\"1\":{\"613\":1}}],[\"message<t>\",{\"1\":{\"613\":1}}],[\"message\",{\"1\":{\"240\":1,\"243\":2,\"260\":1,\"539\":1,\"613\":4,\"816\":1,\"818\":3,\"823\":1,\"830\":3,\"836\":3,\"837\":3,\"879\":1,\"990\":2,\"1084\":1}}],[\"me\",{\"1\":{\"517\":1,\"954\":1}}],[\"memcached\",{\"1\":{\"914\":1}}],[\"memberentity\",{\"1\":{\"576\":5}}],[\"membercoupons\",{\"1\":{\"576\":2}}],[\"membercontroller\",{\"1\":{\"488\":1}}],[\"memberbusinessservice\",{\"1\":{\"488\":1}}],[\"memberoperateservice\",{\"1\":{\"488\":1}}],[\"member\",{\"1\":{\"488\":1,\"576\":4}}],[\"memory\",{\"1\":{\"284\":1,\"296\":1,\"301\":6,\"383\":3,\"722\":1,\"892\":1}}],[\"metadata\",{\"1\":{\"928\":1}}],[\"meta\",{\"1\":{\"478\":1,\"483\":1,\"559\":2,\"731\":2,\"928\":1}}],[\"metaspace\",{\"1\":{\"383\":1}}],[\"metrics\",{\"1\":{\"473\":1,\"594\":1}}],[\"methodname\",{\"1\":{\"761\":1}}],[\"method=\",{\"1\":{\"489\":2}}],[\"method2\",{\"1\":{\"322\":2}}],[\"method1\",{\"1\":{\"322\":1}}],[\"method02\",{\"1\":{\"295\":2}}],[\"method01方法标记了\",{\"1\":{\"179\":1}}],[\"method01\",{\"1\":{\"178\":1,\"179\":1,\"295\":1}}],[\"methodargumentnotvalidexception\",{\"1\":{\"240\":2}}],[\"methodsignature\",{\"1\":{\"887\":2}}],[\"methods\",{\"1\":{\"220\":1,\"225\":1}}],[\"methodhandle\",{\"1\":{\"92\":1}}],[\"method\",{\"1\":{\"46\":1,\"123\":1,\"157\":2,\"230\":1,\"362\":1,\"386\":1,\"462\":2,\"492\":4,\"629\":1,\"658\":6,\"713\":1,\"715\":5,\"716\":1,\"722\":1,\"887\":4}}],[\"menutree\",{\"1\":{\"234\":2}}],[\"menu\",{\"1\":{\"229\":6,\"1037\":1}}],[\"menu2\",{\"1\":{\"229\":5}}],[\"menu1\",{\"1\":{\"229\":5}}],[\"mean\",{\"1\":{\"60\":1}}],[\"mofjovyrm\",{\"1\":{\"1008\":1}}],[\"mobi\",{\"1\":{\"1005\":1}}],[\"mobile\",{\"1\":{\"47\":1,\"136\":1}}],[\"moving\",{\"1\":{\"1006\":1}}],[\"movie\",{\"1\":{\"1005\":1}}],[\"movies\",{\"1\":{\"352\":2}}],[\"mov\",{\"1\":{\"1005\":2}}],[\"movezeroes\",{\"1\":{\"1085\":1}}],[\"move\",{\"1\":{\"1001\":2,\"1005\":2}}],[\"mortem\",{\"1\":{\"636\":1}}],[\"more\",{\"1\":{\"26\":1}}],[\"mock\",{\"1\":{\"582\":1}}],[\"mounted\",{\"1\":{\"225\":1}}],[\"monday\",{\"1\":{\"1006\":1}}],[\"mono\",{\"1\":{\"1005\":2}}],[\"monolisa\",{\"1\":{\"1005\":2}}],[\"month\",{\"1\":{\"951\":4}}],[\"monitor\",{\"1\":{\"865\":1}}],[\"monitorenter\",{\"1\":{\"352\":1}}],[\"mon\",{\"1\":{\"202\":1}}],[\"mongodb\",{\"1\":{\"154\":1,\"961\":1}}],[\"mozilla\",{\"1\":{\"47\":1}}],[\"modifications\",{\"1\":{\"1005\":1}}],[\"modified\",{\"1\":{\"47\":1,\"810\":1}}],[\"modify\",{\"1\":{\"941\":1}}],[\"module\",{\"0\":{\"1098\":1},\"1\":{\"844\":2,\"845\":1,\"1100\":1}}],[\"module有\",{\"1\":{\"546\":1}}],[\"modules\",{\"1\":{\"215\":1,\"219\":3,\"220\":3,\"221\":1,\"222\":1}}],[\"mods\",{\"1\":{\"539\":2}}],[\"mode=manual\",{\"1\":{\"832\":1,\"837\":1}}],[\"modeandview\",{\"1\":{\"543\":1}}],[\"modelandview\",{\"1\":{\"1081\":1}}],[\"model=\",{\"1\":{\"220\":3}}],[\"model\",{\"0\":{\"98\":1,\"536\":1},\"1\":{\"98\":1,\"130\":2,\"191\":1,\"220\":2,\"231\":2,\"237\":1,\"284\":1,\"536\":1,\"556\":1,\"576\":1,\"589\":1,\"596\":1,\"1012\":1,\"1014\":1}}],[\"mode\",{\"1\":{\"47\":1,\"823\":1,\"853\":1}}],[\"mail\",{\"1\":{\"1005\":1}}],[\"main包下的路径是com\",{\"1\":{\"531\":1}}],[\"mainapplication\",{\"1\":{\"480\":1}}],[\"main\",{\"0\":{\"701\":1},\"1\":{\"222\":1,\"223\":1,\"331\":1,\"334\":2,\"335\":1,\"339\":1,\"343\":1,\"352\":1,\"388\":2,\"397\":1,\"522\":1,\"650\":1,\"658\":3,\"686\":2,\"687\":2,\"688\":1,\"691\":2,\"720\":1,\"721\":1,\"722\":1,\"723\":1,\"725\":2,\"752\":1,\"762\":1,\"763\":1,\"765\":1,\"766\":1,\"767\":1,\"768\":1,\"769\":1,\"770\":1,\"771\":2,\"780\":1,\"1019\":1,\"1079\":1,\"1084\":1}}],[\"maintained\",{\"1\":{\"156\":1}}],[\"mask\",{\"1\":{\"1003\":1}}],[\"masterauth\",{\"1\":{\"861\":2}}],[\"master\",{\"1\":{\"270\":1,\"594\":1,\"799\":1,\"987\":5,\"994\":1,\"1005\":3}}],[\"macmini连接一台4k分辨率显示器\",{\"1\":{\"998\":1}}],[\"mac\",{\"0\":{\"999\":1,\"1042\":1},\"1\":{\"996\":2,\"998\":1,\"1003\":1,\"1005\":4,\"1007\":2}}],[\"macos如何快捷键切换\",{\"1\":{\"998\":1}}],[\"macos\",{\"0\":{\"995\":1},\"1\":{\"785\":4,\"998\":1,\"999\":1,\"1006\":2}}],[\"male|female\",{\"1\":{\"959\":1}}],[\"male\",{\"1\":{\"959\":1}}],[\"mall\",{\"0\":{\"1171\":1},\"1\":{\"261\":1}}],[\"makes\",{\"1\":{\"473\":1}}],[\"manual\",{\"1\":{\"895\":1,\"938\":1}}],[\"mandatory=true\",{\"1\":{\"832\":1,\"835\":1}}],[\"management\",{\"1\":{\"825\":1}}],[\"management这个镜像执行这个命令会连网自动去下\",{\"1\":{\"825\":1}}],[\"manager\",{\"1\":{\"606\":2,\"686\":1,\"1041\":1}}],[\"manager=\",{\"1\":{\"462\":1}}],[\"manipulation\",{\"1\":{\"494\":1}}],[\"many\",{\"1\":{\"260\":1}}],[\"math\",{\"0\":{\"276\":1},\"1\":{\"689\":1}}],[\"match换成用term\",{\"1\":{\"279\":1}}],[\"match模糊匹配\",{\"1\":{\"279\":1}}],[\"match是分词匹配\",{\"1\":{\"275\":1}}],[\"matched\",{\"1\":{\"959\":2}}],[\"matches\",{\"1\":{\"133\":2,\"787\":2,\"1005\":1}}],[\"matcher\",{\"1\":{\"60\":1,\"1019\":6}}],[\"match\",{\"0\":{\"275\":1},\"1\":{\"133\":1,\"157\":1,\"273\":2,\"274\":1,\"275\":3,\"276\":1,\"277\":4,\"278\":1}}],[\"matching\",{\"1\":{\"60\":1}}],[\"margenote3\",{\"1\":{\"1164\":1}}],[\"mariadb\",{\"1\":{\"928\":1}}],[\"marking\",{\"1\":{\"1005\":1}}],[\"marketplace\",{\"1\":{\"1005\":1}}],[\"mark\",{\"1\":{\"385\":2,\"389\":1,\"517\":1,\"1005\":1}}],[\"markdown常用的语法也就五六个\",{\"1\":{\"1145\":1}}],[\"markdown\",{\"0\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1},\"1\":{\"8\":2,\"9\":3,\"10\":1,\"11\":3,\"12\":2,\"13\":1,\"14\":1,\"27\":3,\"28\":1,\"29\":2,\"30\":2,\"1005\":1,\"1126\":1},\"2\":{\"25\":1}}],[\"martinfowler\",{\"1\":{\"202\":1}}],[\"maven项目pom文件\",{\"0\":{\"1014\":1}}],[\"maven在编译和打包你的应用程序时不会包含servlet\",{\"1\":{\"1012\":1}}],[\"maven在编译和测试阶段会将依赖包含在类路径中\",{\"1\":{\"1012\":1}}],[\"maven会将这些依赖排除在最终的构建结果中\",{\"1\":{\"1012\":1}}],[\"maven依赖版本号一定要一模一样\",{\"1\":{\"261\":1}}],[\"maven\",{\"0\":{\"397\":1,\"458\":1,\"557\":1,\"559\":1,\"1008\":1},\"1\":{\"178\":1,\"215\":1,\"219\":1,\"222\":1,\"559\":4,\"740\":1,\"993\":1,\"1009\":2,\"1010\":1,\"1012\":2}}],[\"maven打包\",{\"1\":{\"153\":1}}],[\"map自己转成string\",{\"1\":{\"876\":1}}],[\"map源码看着还是很痛苦\",{\"1\":{\"688\":1}}],[\"map接口和collection接口是同一等级的\",{\"0\":{\"651\":1}}],[\"map>\",{\"1\":{\"543\":1}}],[\"mapped\",{\"1\":{\"625\":1}}],[\"mappedstatement\",{\"1\":{\"465\":1}}],[\"mapperhandle\",{\"1\":{\"619\":1}}],[\"mapperproxy里面有\",{\"1\":{\"465\":1}}],[\"mapperproxy\",{\"1\":{\"465\":1}}],[\"mapperlocations\",{\"1\":{\"462\":1}}],[\"mapper的实现类\",{\"1\":{\"462\":1}}],[\"mapper文件的位置\",{\"1\":{\"454\":1,\"462\":1}}],[\"mapper1\",{\"1\":{\"447\":2}}],[\"mapperscannerconfigurer\",{\"1\":{\"462\":2}}],[\"mappers>\",{\"1\":{\"400\":2}}],[\"mappers\",{\"1\":{\"400\":1}}],[\"mapper\",{\"1\":{\"105\":8,\"229\":1,\"400\":2,\"403\":3,\"415\":2,\"419\":3,\"423\":1,\"427\":3,\"428\":1,\"429\":3,\"430\":2,\"436\":2,\"443\":3,\"447\":2,\"451\":1,\"462\":3,\"576\":1}}],[\"mapping>\",{\"1\":{\"459\":6,\"706\":2}}],[\"map的key就叫list\",{\"1\":{\"436\":1}}],[\"map<integer\",{\"1\":{\"416\":2}}],[\"map<string\",{\"1\":{\"103\":2,\"105\":1,\"130\":1,\"155\":3,\"157\":3,\"252\":1,\"415\":3,\"483\":1,\"876\":1}}],[\"mapkey\",{\"1\":{\"416\":1}}],[\"mapunderscoretocamelcase\",{\"1\":{\"400\":1,\"464\":1}}],[\"map\",{\"0\":{\"414\":1,\"673\":1,\"773\":1},\"1\":{\"103\":1,\"105\":3,\"125\":2,\"140\":1,\"155\":3,\"156\":1,\"229\":3,\"252\":1,\"258\":1,\"407\":1,\"415\":2,\"446\":1,\"543\":2,\"688\":1,\"689\":1,\"776\":1,\"876\":1,\"1084\":1}}],[\"maxtenuringthreshold来设置\",{\"1\":{\"385\":1}}],[\"maxnewsize\",{\"1\":{\"383\":1}}],[\"maxheapsize\",{\"1\":{\"383\":1}}],[\"maxmetaspacesize=256m\",{\"1\":{\"383\":1}}],[\"maxmetaspacesize\",{\"1\":{\"383\":1}}],[\"maxpermsize\",{\"1\":{\"383\":4}}],[\"maximum\",{\"1\":{\"362\":2,\"383\":1}}],[\"maximumpoolsize\",{\"1\":{\"362\":1}}],[\"maxlifetime\",{\"1\":{\"260\":1}}],[\"maxdirectmemory去调大虚拟机堆外内存\",{\"1\":{\"107\":1}}],[\"maxdirectmemory进行设置\",{\"1\":{\"107\":1}}],[\"max\",{\"0\":{\"364\":1},\"1\":{\"47\":1,\"100\":1,\"260\":1,\"281\":1,\"363\":5,\"366\":2,\"718\":1,\"908\":1,\"954\":1,\"959\":2}}],[\"mspaint\",{\"0\":{\"1031\":1}}],[\"ms=\",{\"1\":{\"1005\":1}}],[\"mssql\",{\"1\":{\"1001\":6}}],[\"mset操作set多个值是会报错的\",{\"1\":{\"865\":1}}],[\"msg\",{\"1\":{\"128\":1,\"220\":6,\"630\":1}}],[\"ms\",{\"1\":{\"28\":1,\"102\":1,\"492\":1,\"916\":2,\"1005\":3}}],[\"mdx\",{\"1\":{\"1005\":1}}],[\"mdf\",{\"1\":{\"1001\":1}}],[\"mdl\",{\"1\":{\"925\":1,\"928\":17,\"929\":4}}],[\"md文件\",{\"1\":{\"688\":1}}],[\"md内容表\",{\"1\":{\"642\":1}}],[\"md5filename\",{\"1\":{\"1084\":2}}],[\"md5value\",{\"1\":{\"1084\":1}}],[\"md5实现\",{\"1\":{\"539\":1}}],[\"md5crypt类\",{\"1\":{\"132\":1}}],[\"md5crypt\",{\"1\":{\"132\":4}}],[\"md5hex\",{\"1\":{\"132\":2}}],[\"md5使用场景\",{\"0\":{\"132\":1}}],[\"md5+salt\",{\"1\":{\"131\":1,\"132\":1}}],[\"md5\",{\"0\":{\"131\":1},\"1\":{\"190\":1,\"539\":2,\"540\":10,\"993\":1,\"1084\":9}}],[\"md\",{\"1\":{\"13\":1,\"594\":1,\"679\":1,\"1083\":1,\"1161\":2}}],[\"请记住\",{\"1\":{\"1144\":1}}],[\"请记住是缓存数据共享\",{\"1\":{\"286\":1}}],[\"请你们不要把所有的努力都用于追逐个人的胜利\",{\"1\":{\"1077\":1}}],[\"请你记住\",{\"1\":{\"1077\":1}}],[\"请你先停下来总结思考一下\",{\"1\":{\"633\":1}}],[\"请参阅安装日志文件\",{\"1\":{\"1027\":1}}],[\"请谨慎操作或咨询相关的安全建议\",{\"1\":{\"999\":1}}],[\"请使用以下表达式\",{\"0\":{\"952\":1}}],[\"请使用绝对链接\",{\"1\":{\"29\":1}}],[\"请输入您的账号\",{\"1\":{\"879\":1}}],[\"请确保您已经正确指定应用程序的路径\",{\"1\":{\"999\":1}}],[\"请确保在使用完redis资源后进行适当的资源释放和异常处理\",{\"1\":{\"852\":1}}],[\"请确保备份现有配置文件\",{\"1\":{\"48\":1}}],[\"请随时提问\",{\"1\":{\"522\":1}}],[\"请注意\",{\"1\":{\"48\":1,\"537\":1,\"591\":1,\"706\":1,\"959\":1,\"999\":1}}],[\"请求面试官细化问题\",{\"1\":{\"1135\":1}}],[\"请求前端\",{\"1\":{\"882\":1}}],[\"请求重发\",{\"1\":{\"815\":1}}],[\"请求并响应结果\",{\"1\":{\"737\":1}}],[\"请求等等\",{\"1\":{\"713\":1}}],[\"请求到达网关\",{\"1\":{\"590\":1}}],[\"请求次数\",{\"1\":{\"586\":1}}],[\"请求参数等\",{\"1\":{\"581\":1}}],[\"请求先被\",{\"1\":{\"543\":1}}],[\"请求类型得是get\",{\"1\":{\"230\":1}}],[\"请求的处理\",{\"1\":{\"216\":1}}],[\"请求的头信息发送\",{\"1\":{\"46\":1}}],[\"请求时\",{\"1\":{\"216\":1}}],[\"请求和响应的处理流程较为简单\",{\"1\":{\"156\":1}}],[\"请求后执行\",{\"1\":{\"156\":1}}],[\"请求直接跳转页面的\",{\"1\":{\"97\":1}}],[\"请求个图片都要到后台\",{\"1\":{\"92\":1}}],[\"请求拦截器带上放header\",{\"1\":{\"70\":1}}],[\"请求\",{\"1\":{\"46\":1,\"49\":1,\"70\":1,\"616\":1,\"713\":1,\"738\":1}}],[\"请求体\",{\"1\":{\"45\":1}}],[\"请求头没有登录消息被拦截\",{\"1\":{\"157\":1}}],[\"请求头用来告知服务器\",{\"1\":{\"47\":2}}],[\"请求头\",{\"0\":{\"47\":1},\"1\":{\"45\":1}}],[\"请求行\",{\"0\":{\"46\":1},\"1\":{\"45\":1}}],[\"请求包含哪几个部分\",{\"1\":{\"45\":1}}],[\"请阅读\",{\"1\":{\"12\":1}}],[\"请先阅读\",{\"1\":{\"9\":1}}],[\"对与一部分人\",{\"1\":{\"1152\":1}}],[\"对这个比较熟\",{\"1\":{\"1152\":1}}],[\"对java有一个大致的了解\",{\"1\":{\"1144\":1}}],[\"对一个搞技术的人来说\",{\"1\":{\"1139\":1}}],[\"对公司的喜爱\",{\"1\":{\"1127\":1}}],[\"对工作不感兴趣\",{\"1\":{\"1118\":1}}],[\"对我而言是可以大大提高我的办公学习效率让我觉得爽的一款软件的\",{\"1\":{\"1162\":1}}],[\"对我来说是效率神器\",{\"1\":{\"1005\":1}}],[\"对我们使用事务有什么帮助呢\",{\"1\":{\"931\":1}}],[\"对某段文字\",{\"1\":{\"998\":1}}],[\"对照mysql45讲\",{\"1\":{\"972\":1}}],[\"对数据库做单表查询\",{\"1\":{\"970\":1}}],[\"对吧\",{\"1\":{\"927\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"924\":1}}],[\"对的形式\",{\"1\":{\"894\":1}}],[\"对redis\",{\"1\":{\"887\":1}}],[\"对参数进行逻辑处理\",{\"1\":{\"887\":1}}],[\"对空值缓存\",{\"1\":{\"866\":1}}],[\"对接口加了一个新特性\",{\"1\":{\"747\":1}}],[\"对比实现逻辑\",{\"1\":{\"1081\":1}}],[\"对比选中的两个文件代码\",{\"0\":{\"1074\":1}}],[\"对比编译后的代码\",{\"1\":{\"725\":1}}],[\"对比关系\",{\"1\":{\"265\":1}}],[\"对链表的操作一定要进行同步处理\",{\"1\":{\"694\":1}}],[\"对key进行排序\",{\"1\":{\"688\":1}}],[\"对多线程的很多点理解的并不深刻\",{\"1\":{\"687\":1}}],[\"对多条数据加锁时\",{\"1\":{\"82\":1}}],[\"对integer的缓存\",{\"1\":{\"686\":1}}],[\"对修改封闭\",{\"1\":{\"686\":1}}],[\"对修改关闭\",{\"1\":{\"686\":1}}],[\"对扩展开放\",{\"1\":{\"686\":1}}],[\"对其内部的引用类型再一次clone\",{\"1\":{\"683\":1}}],[\"对当前对象\",{\"1\":{\"683\":1}}],[\"对基本数据类型进行拷贝\",{\"1\":{\"683\":1}}],[\"对字节码进行验证\",{\"1\":{\"679\":1}}],[\"对现实事物进行抽象并映射为开发对象\",{\"1\":{\"678\":1}}],[\"对引用的概念进行了扩充\",{\"1\":{\"660\":1}}],[\"对4\",{\"1\":{\"627\":1}}],[\"对非核心业务停止服务或所有的调用直接返回降级数据\",{\"1\":{\"603\":1}}],[\"对微服务a的调用就会占用越来越多的系统资源\",{\"1\":{\"581\":1}}],[\"对返回的视图进行渲染呈现\",{\"1\":{\"480\":1}}],[\"对volatile变量的操作不会造成阻塞\",{\"1\":{\"283\":1}}],[\"对业务代码有侵入\",{\"1\":{\"184\":1}}],[\"对外暴露代理对象\",{\"1\":{\"179\":1}}],[\"对系统性能造成影响\",{\"1\":{\"156\":1}}],[\"对原数据进行任何改动\",{\"1\":{\"132\":1}}],[\"对象可以创建\",{\"1\":{\"876\":1}}],[\"对象个数的问题\",{\"1\":{\"725\":1}}],[\"对象内容的字符串引用\",{\"1\":{\"723\":1}}],[\"对象放入字符串常量池中\",{\"1\":{\"722\":1}}],[\"对象时\",{\"1\":{\"722\":1}}],[\"对象为例\",{\"1\":{\"722\":1}}],[\"对象的数量不会发生变化\",{\"1\":{\"725\":1}}],[\"对象的引用被驻留到了字符串常量池中\",{\"1\":{\"722\":1}}],[\"对象的引用保存在字符串常量池中\",{\"1\":{\"722\":1}}],[\"对象的引用\",{\"1\":{\"722\":1}}],[\"对象的直接引用\",{\"1\":{\"722\":1}}],[\"对象的属性\",{\"1\":{\"695\":1}}],[\"对象占用的内存减少\",{\"1\":{\"721\":1}}],[\"对象没有发生任何变化\",{\"1\":{\"721\":1}}],[\"对象是继承blob对象的\",{\"1\":{\"708\":1}}],[\"对象是局部的\",{\"1\":{\"632\":1}}],[\"对象是局部对象\",{\"1\":{\"632\":1}}],[\"对象流\",{\"1\":{\"688\":1}}],[\"对象比较器\",{\"1\":{\"688\":1}}],[\"对象生命周期和\",{\"1\":{\"635\":1}}],[\"对象生命周期管理\",{\"1\":{\"389\":1}}],[\"对象晋升到老年代的年龄阈值\",{\"1\":{\"385\":1}}],[\"对象在\",{\"1\":{\"385\":1}}],[\"对象都会首先在\",{\"1\":{\"385\":1}}],[\"对象池\",{\"1\":{\"359\":1}}],[\"对象解构\",{\"1\":{\"216\":1}}],[\"对象提供关注点分离\",{\"1\":{\"112\":1}}],[\"对象\",{\"1\":{\"105\":4,\"156\":2,\"217\":1,\"253\":1,\"409\":1,\"498\":1,\"503\":1,\"546\":1,\"686\":2,\"695\":1,\"696\":2,\"722\":1,\"723\":3,\"724\":1,\"725\":1,\"884\":1,\"1019\":2,\"1166\":1}}],[\"对应目录\",{\"1\":{\"1041\":1}}],[\"对应用会更友好\",{\"1\":{\"929\":1}}],[\"对应这期的问题\",{\"1\":{\"923\":1}}],[\"对应这个\",{\"1\":{\"65\":1}}],[\"对应流程图调整点\",{\"1\":{\"621\":2}}],[\"对应\",{\"1\":{\"489\":1,\"608\":1,\"712\":1}}],[\"对应的索引\",{\"1\":{\"922\":1}}],[\"对应的名字\",{\"1\":{\"915\":1}}],[\"对应的名字是什么\",{\"1\":{\"914\":1}}],[\"对应的事务是不会冲突的\",{\"1\":{\"906\":1}}],[\"对应的看ps命令这个端口的进程也没了\",{\"1\":{\"862\":1}}],[\"对应的栈帧会被弹出\",{\"1\":{\"778\":1}}],[\"对应的常量池中对应的数据\",{\"1\":{\"687\":1}}],[\"对应的引用类型class也实现了cloneable接口\",{\"1\":{\"683\":1}}],[\"对应的别名是\",{\"1\":{\"417\":1}}],[\"对应的实体对象\",{\"1\":{\"416\":1}}],[\"对应的\",{\"1\":{\"86\":1,\"114\":1,\"554\":1,\"921\":2,\"1144\":1}}],[\"对应请求头的\",{\"1\":{\"48\":1}}],[\"对于这部分同学\",{\"1\":{\"1150\":1}}],[\"对于这种说法你要做的就是死咬自己的底价不放\",{\"1\":{\"1131\":1}}],[\"对于这种引擎的表\",{\"1\":{\"930\":1}}],[\"对于这种重复字面量的字符串\",{\"1\":{\"722\":1}}],[\"对于程序员来说\",{\"1\":{\"1141\":1}}],[\"对于数据库中的数据更新\",{\"1\":{\"973\":1}}],[\"对于数据库的表而言\",{\"1\":{\"909\":1}}],[\"对于深分页\",{\"1\":{\"963\":1}}],[\"对于varchar类型\",{\"1\":{\"963\":1}}],[\"对于分库分表的原则主要有以下几点\",{\"1\":{\"961\":1}}],[\"对于如下两行两列的表\",{\"1\":{\"959\":1}}],[\"对于图\",{\"1\":{\"935\":1}}],[\"对于当前事务的启动瞬间来说\",{\"1\":{\"935\":1}}],[\"对于相同行的更新\",{\"1\":{\"932\":1}}],[\"对于在线服务来说\",{\"1\":{\"932\":1}}],[\"对于全部是\",{\"1\":{\"929\":1}}],[\"对于不等于\",{\"1\":{\"924\":1}}],[\"对于条件\",{\"1\":{\"923\":1}}],[\"对于上面这两个重建索引的作法\",{\"1\":{\"919\":1}}],[\"对于上面例子中的\",{\"1\":{\"919\":1}}],[\"对于有索引的表\",{\"1\":{\"897\":1}}],[\"对于更新压力大的数据库来说\",{\"1\":{\"894\":1}}],[\"对于令牌续期\",{\"1\":{\"890\":1}}],[\"对于桌面操作系统\",{\"1\":{\"785\":2}}],[\"对于泛型方法\",{\"1\":{\"715\":1}}],[\"对于泛型类\",{\"1\":{\"715\":1}}],[\"对于高负载\",{\"1\":{\"712\":1}}],[\"对于包含敏感数据的\",{\"1\":{\"706\":1}}],[\"对于包装类\",{\"1\":{\"671\":1}}],[\"对于某些文件类型\",{\"1\":{\"706\":1}}],[\"对于大多数文件类型\",{\"1\":{\"706\":1}}],[\"对于大量的数据\",{\"1\":{\"91\":1}}],[\"对于l1来说\",{\"1\":{\"688\":1}}],[\"对于频繁遍历操作\",{\"1\":{\"688\":1}}],[\"对于频繁的遍历操作\",{\"1\":{\"688\":1}}],[\"对于小的整型值应该充分利用integer的缓存对象省去过多的对象创建\",{\"1\":{\"686\":1}}],[\"对于两个\",{\"1\":{\"648\":1}}],[\"对于调用者往往是没有太大意义的\",{\"1\":{\"640\":1}}],[\"对于我们设计可靠的缓存等框架\",{\"1\":{\"637\":1}}],[\"对于幻象引用\",{\"1\":{\"636\":1}}],[\"对于一个刚刚接触编程的人\",{\"1\":{\"1150\":1}}],[\"对于一个\",{\"1\":{\"916\":1}}],[\"对于一个需要频繁使用事务的业务\",{\"1\":{\"907\":1}}],[\"对于一个普通的对象\",{\"1\":{\"636\":1}}],[\"对于一些微服务来说\",{\"1\":{\"815\":1}}],[\"对于一次需要多次查询数据库的操作\",{\"1\":{\"91\":1}}],[\"对于注册进eureka里面的微服务\",{\"1\":{\"568\":1}}],[\"对于key名不同\",{\"1\":{\"543\":1}}],[\"对于key名相同\",{\"1\":{\"543\":1}}],[\"对于固定化配置全给你配好\",{\"1\":{\"473\":1}}],[\"对于引用数据类型\",{\"1\":{\"417\":1}}],[\"对于synchronized而言\",{\"1\":{\"319\":1}}],[\"对于指令重排导致的可见性问题和有序性问题\",{\"1\":{\"297\":1}}],[\"对于互联网业务中\",{\"1\":{\"100\":1}}],[\"对于登录后台逻辑等需要与github进行交互的操作\",{\"1\":{\"77\":1}}],[\"对于nginx服务器\",{\"1\":{\"48\":1}}],[\"对于apache服务器\",{\"1\":{\"48\":1}}],[\"对于\",{\"1\":{\"29\":1,\"48\":1,\"272\":1,\"591\":1,\"634\":1,\"686\":1,\"743\":1,\"902\":1,\"906\":1,\"927\":1,\"1101\":1}}],[\"对\",{\"1\":{\"12\":1,\"81\":1,\"268\":1,\"594\":1,\"767\":1,\"906\":1,\"961\":1}}],[\"为防止受骗\",{\"0\":{\"1115\":1}}],[\"为单位\",{\"1\":{\"1017\":2}}],[\"为单独服务端部署\",{\"1\":{\"606\":1}}],[\"为啥有些没有加\",{\"1\":{\"1005\":1}}],[\"为可能会长时间锁表\",{\"1\":{\"976\":1}}],[\"为你简单分析一下这三种模型的区别\",{\"1\":{\"913\":1}}],[\"为表锁\",{\"1\":{\"906\":1}}],[\"为行锁\",{\"1\":{\"906\":3}}],[\"为保证数据库隔离级别的一致\",{\"1\":{\"905\":1}}],[\"为记新账腾出空间\",{\"1\":{\"899\":1}}],[\"为firewalld添加开放端口\",{\"0\":{\"804\":1}}],[\"为例来说\",{\"1\":{\"920\":1}}],[\"为例\",{\"0\":{\"1136\":1},\"1\":{\"784\":2,\"904\":1,\"916\":1,\"924\":1,\"1150\":1}}],[\"为评论区别人的笔记\",{\"1\":{\"777\":1}}],[\"为某个接口寻找服务实现的机制\",{\"1\":{\"740\":1}}],[\"为此\",{\"1\":{\"726\":1}}],[\"为一般类\",{\"1\":{\"715\":1}}],[\"为王\",{\"1\":{\"713\":1}}],[\"为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"688\":1}}],[\"为类的静态变量分配内存空间\",{\"1\":{\"679\":1}}],[\"为高度并发需求提供了更加全面的工具支持\",{\"1\":{\"640\":1}}],[\"为用户提供了\",{\"1\":{\"608\":1}}],[\"为微服务应用构建消息驱动能力\",{\"1\":{\"594\":1}}],[\"为的就是加速容器启动过程\",{\"1\":{\"517\":1}}],[\"为构建锁和同步器提供了一些通用功能的实现\",{\"1\":{\"378\":1}}],[\"为z3\",{\"1\":{\"310\":1}}],[\"为3\",{\"1\":{\"305\":1}}],[\"为生命周期中的每个状态都设置了钩子函数\",{\"1\":{\"221\":1}}],[\"为第一个请求选择健康池中的第一个后端服务器\",{\"1\":{\"208\":1}}],[\"为threadlocal\",{\"1\":{\"157\":1}}],[\"为什么代码一会超时\",{\"1\":{\"1085\":1}}],[\"为什么vue项目总是在1024端口启动\",{\"1\":{\"998\":1}}],[\"为什么能匹配到24061\",{\"1\":{\"959\":1}}],[\"为什么能保证原子性\",{\"1\":{\"303\":1}}],[\"为什么还需要\",{\"1\":{\"927\":1}}],[\"为什么你改了我还看不见\",{\"1\":{\"927\":1,\"934\":1}}],[\"为什么表数据删掉一半\",{\"1\":{\"919\":1}}],[\"为什么树高20就是20个数据块\",{\"1\":{\"916\":1}}],[\"为什么日志需要\",{\"1\":{\"901\":1}}],[\"为什么必须有\",{\"1\":{\"901\":1}}],[\"为什么对权限的检查不在优化器之前做\",{\"1\":{\"897\":1}}],[\"为什么f12调试地址栏不出来\",{\"1\":{\"883\":1}}],[\"为什么呢\",{\"1\":{\"882\":1,\"894\":1,\"925\":1,\"933\":1}}],[\"为什么单独运行java\",{\"1\":{\"787\":1}}],[\"为什么使用lambda\",{\"0\":{\"746\":1}}],[\"为什么使用缓存\",{\"1\":{\"441\":1}}],[\"为什么本地访问\",{\"1\":{\"706\":1}}],[\"为什么重写\",{\"0\":{\"690\":1}}],[\"为什么之前视频里usernamepasswordauthenticationtoken存的是username和password\",{\"1\":{\"627\":1}}],[\"为什么需要finally\",{\"1\":{\"686\":1}}],[\"为什么需要实现websecurityconfigureradapter才能替换passwordencoder\",{\"1\":{\"625\":1}}],[\"为什么需要blockingqueue\",{\"0\":{\"347\":1}}],[\"为什么叫nacos\",{\"1\":{\"594\":1}}],[\"为什么\",{\"0\":{\"717\":1,\"718\":1},\"1\":{\"539\":1,\"645\":1,\"681\":1,\"899\":1,\"919\":1,\"970\":1,\"1084\":1,\"1085\":1}}],[\"为什么interceptorregistry不需要调用addpathpatterns\",{\"1\":{\"534\":1}}],[\"为什么这么叫因为这样不用去容器中对照来一个返回一个\",{\"1\":{\"517\":1}}],[\"为什么不推荐去外包企业\",{\"1\":{\"1110\":1}}],[\"为什么不使用\",{\"1\":{\"927\":1}}],[\"为什么不能同时满足3个\",{\"1\":{\"572\":1}}],[\"为什么不能代理非public方法\",{\"1\":{\"182\":1}}],[\"为什么不用\",{\"0\":{\"366\":1}}],[\"为什么synchronized无法禁止指令重排\",{\"0\":{\"327\":1}}],[\"为什么用的是\",{\"1\":{\"881\":1}}],[\"为什么用延时队列不用定时任务\",{\"0\":{\"839\":1}}],[\"为什么用springboot\",{\"0\":{\"472\":1}}],[\"为什么用\",{\"1\":{\"305\":1,\"681\":1}}],[\"为什么用它\",{\"1\":{\"157\":1}}],[\"为什么atomic修饰的包装类\",{\"1\":{\"304\":1}}],[\"为什么会这样呢\",{\"1\":{\"1142\":1}}],[\"为什么会意外\",{\"1\":{\"908\":1}}],[\"为什么会有两份日志呢\",{\"1\":{\"900\":1}}],[\"为什么会出现springcloud\",{\"1\":{\"594\":1}}],[\"为什么会出现这个结果\",{\"1\":{\"295\":1}}],[\"为什么会失效呢\",{\"1\":{\"179\":1}}],[\"为什么说多核\",{\"1\":{\"286\":1}}],[\"为什么要学习呢\",{\"1\":{\"1141\":1}}],[\"为什么要从右边先开始找\",{\"1\":{\"1085\":1}}],[\"为什么要创建\",{\"1\":{\"925\":1}}],[\"为什么要配\",{\"1\":{\"798\":1,\"984\":1}}],[\"为什么要擦除\",{\"0\":{\"715\":1}}],[\"为什么要和高16位进行\",{\"1\":{\"681\":1}}],[\"为什么要这么划分\",{\"1\":{\"389\":1}}],[\"为什么要这样设计\",{\"1\":{\"382\":1}}],[\"为什么要用\",{\"0\":{\"346\":1}}],[\"为什么要3次\",{\"0\":{\"57\":1}}],[\"为什么要使用session技术\",{\"0\":{\"51\":1}}],[\"为\",{\"1\":{\"81\":1,\"220\":1,\"302\":1,\"723\":1,\"737\":1,\"779\":1,\"906\":2,\"907\":1,\"935\":1,\"959\":5,\"1005\":3,\"1041\":1}}],[\"为网站名称添加\",{\"1\":{\"62\":1}}],[\"为了演示\",{\"1\":{\"1161\":1}}],[\"为了自己为了的前途\",{\"1\":{\"1150\":1}}],[\"为了让新加入数据后\",{\"1\":{\"972\":1}}],[\"为了让一个查询尽量少地读磁盘\",{\"1\":{\"916\":1}}],[\"为了确保\",{\"1\":{\"929\":1}}],[\"为了确保浏览器加载最新的版本而不使用缓存\",{\"1\":{\"539\":1}}],[\"为了这两个查询模式\",{\"1\":{\"925\":1}}],[\"为了直观地说明这个概念\",{\"1\":{\"923\":1}}],[\"为了做这个保证\",{\"1\":{\"916\":1}}],[\"为了节省内存空间\",{\"1\":{\"875\":1}}],[\"为了高并发不用\",{\"1\":{\"838\":1}}],[\"为了永久性保留更改\",{\"1\":{\"789\":1}}],[\"为了避免存储空间的浪费\",{\"1\":{\"963\":1}}],[\"为了避免了字段硬编码和拼写错误的问题\",{\"1\":{\"743\":1,\"1101\":1}}],[\"为了避免这个情况\",{\"1\":{\"46\":1}}],[\"为了实现在模块装配的时候不用在程序里面动态指明\",{\"1\":{\"740\":1}}],[\"为了能让数据库的吞吐变得更高\",{\"1\":{\"970\":1}}],[\"为了能让\",{\"1\":{\"739\":1}}],[\"为了在本地访问\",{\"1\":{\"706\":1}}],[\"为了在构造rediscacheconfiguration对象的时候能够对final属性进行初始化\",{\"1\":{\"125\":1}}],[\"为了保证交易的原子性\",{\"1\":{\"931\":1}}],[\"为了保证引入泛型机制但不创建新的类型\",{\"1\":{\"715\":1}}],[\"为了保证操作系统的稳定性和安全性\",{\"1\":{\"709\":1}}],[\"为了保证集群大部分服务的可用性和可靠性\",{\"1\":{\"603\":1}}],[\"为了保证\",{\"1\":{\"572\":1}}],[\"为了保证数据的一致性\",{\"1\":{\"294\":1}}],[\"为了保护系统的稳定性\",{\"1\":{\"572\":1}}],[\"为了eurekaclient可以正常运行\",{\"1\":{\"569\":1}}],[\"为了达到高可用\",{\"1\":{\"565\":1}}],[\"为了进一步提升计算机各方面能力\",{\"1\":{\"329\":1}}],[\"为了数据一致性\",{\"1\":{\"299\":1}}],[\"为了提高查询效率\",{\"1\":{\"967\":1}}],[\"为了提高性能\",{\"1\":{\"292\":1}}],[\"为了提高系统的响应速度\",{\"1\":{\"156\":1}}],[\"为了测试方便\",{\"1\":{\"257\":1}}],[\"为了下一章节演示nacos的负载均衡\",{\"1\":{\"256\":1,\"594\":1}}],[\"为了方便重启一部分服务可以用\",{\"0\":{\"255\":1}}],[\"为了方便后期处理\",{\"1\":{\"155\":1}}],[\"为了解决二叉查找树会在极端情况下退化成链表的问题\",{\"1\":{\"916\":1}}],[\"为了解决这些问题\",{\"1\":{\"905\":1}}],[\"为了解决这个问题\",{\"1\":{\"179\":1,\"309\":1,\"543\":1,\"599\":1,\"899\":1,\"1010\":1}}],[\"为了解决某一类任务而专门设计的计算机语言\",{\"1\":{\"272\":1}}],[\"为了解决浏览器跨域问题\",{\"1\":{\"231\":1}}],[\"为了简化开发\",{\"1\":{\"221\":1}}],[\"为了教学目的考虑\",{\"1\":{\"96\":1}}],[\"为了降低api服务的压力\",{\"1\":{\"70\":1}}],[\"为了丰富文档写作\",{\"1\":{\"12\":1}}],[\"为每个事务构造了一个数组\",{\"1\":{\"935\":1}}],[\"为每个\",{\"1\":{\"10\":1}}],[\"中用到了这个技术\",{\"1\":{\"1134\":1}}],[\"中用来开启\",{\"1\":{\"501\":1}}],[\"中用来扫描组件和自动配置的注解\",{\"1\":{\"482\":1}}],[\"中级\",{\"1\":{\"1107\":1,\"1150\":1}}],[\"中加\",{\"1\":{\"1013\":1}}],[\"中添加mybatis\",{\"1\":{\"1012\":1}}],[\"中增加了一些针对\",{\"1\":{\"1005\":1}}],[\"中国devops社区\",{\"1\":{\"994\":1}}],[\"中所有的远程仓库所包含分支的最新commit\",{\"1\":{\"990\":1}}],[\"中托盘\",{\"1\":{\"959\":2}}],[\"中只有一条数据\",{\"1\":{\"959\":1}}],[\"中只有一列\",{\"1\":{\"905\":1}}],[\"中都搜不到\",{\"1\":{\"945\":1}}],[\"中执行\",{\"1\":{\"928\":1}}],[\"中抹掉\",{\"1\":{\"899\":2}}],[\"中没有字段\",{\"1\":{\"897\":1}}],[\"中没有包的概念\",{\"1\":{\"217\":1}}],[\"中终止程序前idea默认把这个方法执行完再中断\",{\"1\":{\"837\":1}}],[\"中生效\",{\"1\":{\"782\":1}}],[\"中我们只需要在启动类上加上\",{\"1\":{\"730\":1}}],[\"中如何实现定时任务\",{\"0\":{\"730\":1}}],[\"中创建一个对象时需要使用new关键字\",{\"1\":{\"725\":1}}],[\"中并没有相应的引用\",{\"1\":{\"722\":1}}],[\"中并没有重写该方法\",{\"1\":{\"716\":1}}],[\"中引入了\",{\"1\":{\"713\":2}}],[\"中引入\",{\"1\":{\"712\":1}}],[\"中注解一般头上加了\",{\"1\":{\"688\":1}}],[\"中注册一个\",{\"1\":{\"578\":1}}],[\"中搜索出来的日志进行可视化展示\",{\"1\":{\"736\":1}}],[\"中搜索\",{\"1\":{\"610\":1}}],[\"中对方法配置\",{\"1\":{\"583\":1}}],[\"中配置feign日志以什么级别监控哪个接口\",{\"1\":{\"578\":1}}],[\"中找\",{\"1\":{\"576\":1}}],[\"中看到dependencymanagement元素\",{\"1\":{\"556\":1}}],[\"中看不到代码了\",{\"1\":{\"220\":1}}],[\"中运行时的默认工作目录\",{\"1\":{\"537\":1}}],[\"中设置了\",{\"1\":{\"543\":1}}],[\"中设置程序根目录的步骤\",{\"1\":{\"537\":1}}],[\"中设置页面信息\",{\"1\":{\"28\":1}}],[\"中设置页面标题\",{\"1\":{\"27\":1}}],[\"中也是用到了适配器模式适配\",{\"1\":{\"498\":1}}],[\"中每熬过一次\",{\"1\":{\"385\":1}}],[\"中软猎头问到\",{\"1\":{\"379\":1}}],[\"中jdk已经给你提供了\",{\"0\":{\"366\":1}}],[\"中调用下面的语句提示该错误\",{\"0\":{\"941\":1}}],[\"中调用方法\",{\"1\":{\"321\":1}}],[\"中调用了另一个方法\",{\"1\":{\"321\":1}}],[\"中又调用了方法\",{\"1\":{\"321\":1}}],[\"中途打了太子一顿\",{\"1\":{\"309\":1}}],[\"中文名\",{\"1\":{\"664\":1}}],[\"中文的通俗易懂\",{\"1\":{\"605\":1}}],[\"中文\",{\"1\":{\"594\":1}}],[\"中文需额外搞分词器\",{\"1\":{\"281\":1}}],[\"中文翻译为领域特定语言\",{\"1\":{\"272\":1}}],[\"中这个注释会变成金色\",{\"1\":{\"229\":1}}],[\"中有这样一段描述\",{\"1\":{\"970\":1,\"971\":1}}],[\"中有两条数据与之匹配\",{\"1\":{\"959\":1}}],[\"中有两条数据\",{\"1\":{\"959\":1}}],[\"中有一条数据\",{\"1\":{\"959\":1}}],[\"中有\",{\"1\":{\"222\":1,\"888\":1}}],[\"中遍历的\",{\"1\":{\"220\":1}}],[\"中两者都可以\",{\"1\":{\"220\":1}}],[\"中进行事务管理中就用到了\",{\"1\":{\"497\":1}}],[\"中进行\",{\"1\":{\"216\":1}}],[\"中获取用户信息\",{\"1\":{\"156\":1}}],[\"中获取对应的\",{\"1\":{\"152\":1}}],[\"中直接获取用户信息\",{\"1\":{\"156\":1}}],[\"中央认证服务器\",{\"1\":{\"153\":2}}],[\"中存储的会话的过期时间\",{\"1\":{\"152\":1}}],[\"中存储\",{\"1\":{\"152\":1}}],[\"中新的时间\",{\"1\":{\"125\":2}}],[\"中时\",{\"1\":{\"103\":1}}],[\"中循环查表了\",{\"1\":{\"103\":1}}],[\"中间件\",{\"1\":{\"103\":1}}],[\"中间件越多\",{\"1\":{\"102\":1}}],[\"中间用点\",{\"1\":{\"70\":1}}],[\"中\",{\"0\":{\"710\":1,\"1046\":1},\"1\":{\"47\":1,\"48\":1,\"52\":1,\"111\":1,\"152\":1,\"156\":3,\"179\":2,\"218\":2,\"385\":1,\"430\":1,\"441\":1,\"498\":1,\"523\":1,\"534\":1,\"537\":1,\"543\":1,\"571\":1,\"609\":2,\"625\":1,\"650\":1,\"685\":1,\"690\":1,\"722\":1,\"743\":2,\"775\":1,\"883\":1,\"897\":1,\"902\":2,\"904\":1,\"906\":1,\"913\":1,\"916\":1,\"917\":1,\"919\":1,\"921\":1,\"922\":1,\"924\":1,\"932\":1,\"934\":1,\"959\":1,\"963\":1,\"1010\":1,\"1037\":2,\"1081\":1,\"1083\":1,\"1101\":2}}],[\"中使用\",{\"1\":{\"14\":1,\"30\":1,\"208\":1,\"685\":1}}],[\"中的任意一个字符\",{\"1\":{\"959\":1}}],[\"中的三个虚线箭头\",{\"1\":{\"935\":1}}],[\"中的相关内容\",{\"1\":{\"927\":1}}],[\"中的各种oopdesc实例\",{\"1\":{\"722\":1}}],[\"中的关键组件是\",{\"1\":{\"712\":1}}],[\"中的一个方法\",{\"1\":{\"775\":1}}],[\"中的一个受检异常\",{\"1\":{\"686\":1}}],[\"中的一个接口\",{\"1\":{\"546\":1,\"1166\":1}}],[\"中的核心概念之一\",{\"1\":{\"605\":1}}],[\"中的方法执行完以后\",{\"1\":{\"543\":1}}],[\"中的拦截器链的触发是由\",{\"1\":{\"534\":1}}],[\"中的拦截器链来调用的\",{\"1\":{\"534\":1}}],[\"中的拦截器在拦截请求时\",{\"1\":{\"534\":1}}],[\"中的数据来说\",{\"1\":{\"935\":1}}],[\"中的数据都恢复至内存就可以了\",{\"1\":{\"899\":2}}],[\"中的数据进行深入挖掘分析与可视化\",{\"1\":{\"736\":1}}],[\"中的数据\",{\"1\":{\"218\":1}}],[\"中的导包\",{\"1\":{\"217\":1}}],[\"中的第一个\",{\"1\":{\"27\":1}}],[\"中的\",{\"1\":{\"12\":1,\"218\":1,\"411\":1,\"498\":1,\"664\":1,\"672\":1,\"712\":5,\"713\":1,\"722\":1,\"887\":1,\"893\":1}}],[\"中很重要的一个概念\",{\"1\":{\"10\":1}}],[\"中自定义它们\",{\"1\":{\"5\":1}}],[\"是深度\",{\"1\":{\"1150\":1}}],[\"是拓宽你的广度\",{\"1\":{\"1150\":1}}],[\"是打基础\",{\"1\":{\"1150\":1}}],[\"是国内产品\",{\"1\":{\"1145\":1}}],[\"是国外网站\",{\"1\":{\"208\":1}}],[\"是骡子是马还得拉出来溜溜\",{\"1\":{\"1144\":1}}],[\"是双标的\",{\"1\":{\"1130\":1}}],[\"是行业性问题还是个人水平问题\",{\"1\":{\"1118\":2}}],[\"是定时任务实现吗\",{\"1\":{\"1084\":1}}],[\"是定义在java\",{\"1\":{\"687\":1}}],[\"是元稹怀念亡妻所作\",{\"1\":{\"1076\":1}}],[\"是以\",{\"1\":{\"1005\":1}}],[\"是以系统的管理员权限\",{\"1\":{\"998\":1}}],[\"是以当前登录用户的身份运行的\",{\"1\":{\"998\":1}}],[\"是在一个方向有一些建树\",{\"1\":{\"1150\":1}}],[\"是在不能的话\",{\"1\":{\"1150\":1}}],[\"是在系统启动时自动启动的\",{\"1\":{\"998\":1}}],[\"是在用户登录时自动启动的\",{\"1\":{\"998\":1}}],[\"是在请求被发送到服务器之前和服务器处理请求之后执行的\",{\"1\":{\"156\":1}}],[\"是在请求和响应被发送到服务器之间执行的\",{\"1\":{\"156\":1}}],[\"是两种完全不同的概念和功能\",{\"1\":{\"1081\":1}}],[\"是两种常见的代码合并方式\",{\"1\":{\"990\":1}}],[\"是两种不同的代码整合方式\",{\"1\":{\"990\":1}}],[\"是两个独立的逻辑\",{\"1\":{\"901\":1}}],[\"是两个不同的概念和用途\",{\"1\":{\"78\":1}}],[\"是或的意思\",{\"1\":{\"985\":1}}],[\"是percona公司开发的一个工具\",{\"1\":{\"976\":1}}],[\"是目的\",{\"1\":{\"962\":1}}],[\"是目前使用的比较多的一个开源的日志系统解决方案\",{\"1\":{\"735\":1}}],[\"是目前几乎在所有的操作系统上都有支持\",{\"1\":{\"712\":1}}],[\"是目前全文搜索引擎的首选\",{\"1\":{\"262\":1}}],[\"是手段\",{\"1\":{\"962\":1}}],[\"是公共表表达式的名称\",{\"1\":{\"959\":1}}],[\"是公认的\",{\"1\":{\"686\":1}}],[\"是叠加行\",{\"1\":{\"959\":1}}],[\"是另一个通配符\",{\"1\":{\"959\":1}}],[\"是另一个公司以插件形式引入\",{\"1\":{\"900\":1}}],[\"是更常见的做法\",{\"1\":{\"937\":1}}],[\"是帮助mysql高效获取数据的数据结构\",{\"1\":{\"936\":1}}],[\"是肯定不可见的\",{\"1\":{\"935\":1}}],[\"是怎么定义那个\",{\"1\":{\"935\":1}}],[\"是按申请顺序严格递增的\",{\"1\":{\"935\":1}}],[\"是个枚举一般用这个可以了\",{\"1\":{\"994\":1}}],[\"是个好的实践经验👍🏿\",{\"1\":{\"933\":1}}],[\"是个文件不是文件夹\",{\"1\":{\"795\":1}}],[\"是能够快速发现并进行处理的\",{\"1\":{\"932\":1}}],[\"是表\",{\"1\":{\"931\":1}}],[\"是支持行锁的\",{\"1\":{\"930\":1}}],[\"是为了拿到表结构\",{\"1\":{\"929\":1}}],[\"是针对表\",{\"1\":{\"929\":1}}],[\"是通过\",{\"1\":{\"927\":1}}],[\"是通过工具类\",{\"1\":{\"885\":1}}],[\"是这两个过程的执行流程图\",{\"1\":{\"924\":1}}],[\"是无法使用\",{\"1\":{\"923\":1}}],[\"是无法恢复的\",{\"1\":{\"899\":1}}],[\"是索引组织表\",{\"1\":{\"919\":1}}],[\"是主键\",{\"1\":{\"900\":1}}],[\"是可以事半功倍的\",{\"1\":{\"1139\":1}}],[\"是可以证明跑成功的\",{\"1\":{\"994\":1}}],[\"是可以追加写入的\",{\"1\":{\"900\":1}}],[\"是可以的\",{\"1\":{\"715\":1}}],[\"是循环写的\",{\"1\":{\"900\":1}}],[\"是逻辑日志\",{\"1\":{\"900\":1}}],[\"是物理日志\",{\"1\":{\"900\":1}}],[\"是当前要擦除的位置\",{\"1\":{\"899\":1}}],[\"是当前记录的位置\",{\"1\":{\"899\":1}}],[\"是当前用的比较广泛的\",{\"1\":{\"247\":1}}],[\"是固定大小的\",{\"1\":{\"899\":1}}],[\"是查询的结果\",{\"1\":{\"894\":1}}],[\"是查询的语句\",{\"1\":{\"894\":1}}],[\"是客户端工具\",{\"1\":{\"893\":1}}],[\"是客户端渲染\",{\"1\":{\"96\":1}}],[\"是char\",{\"1\":{\"849\":1}}],[\"是redis\",{\"1\":{\"849\":1}}],[\"是需要保证高可用的\",{\"1\":{\"824\":1}}],[\"是下游的事情\",{\"1\":{\"813\":1}}],[\"是fedora\",{\"1\":{\"810\":1}}],[\"是teletype\",{\"1\":{\"790\":1}}],[\"是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程\",{\"1\":{\"782\":1}}],[\"是你要以超级用户身份运行的实际命令\",{\"1\":{\"782\":1}}],[\"是你想要我再给你new\",{\"1\":{\"700\":1}}],[\"是所以下面也要\",{\"1\":{\"779\":1}}],[\"是配置文件给值\",{\"1\":{\"779\":1}}],[\"是有返回值的\",{\"1\":{\"778\":1}}],[\"是有的\",{\"1\":{\"110\":1}}],[\"是引用无参构造还是引用有参构造\",{\"1\":{\"763\":1}}],[\"是继承自\",{\"1\":{\"740\":1}}],[\"是专门设计用来与\",{\"1\":{\"736\":1}}],[\"是基于事件和回调机制实现的\",{\"1\":{\"713\":1}}],[\"是基于线程池的异步执行方式\",{\"1\":{\"372\":1}}],[\"是没有地址\",{\"1\":{\"1092\":1}}],[\"是没有\",{\"1\":{\"900\":1}}],[\"是没有这个方法的\",{\"1\":{\"240\":1}}],[\"是没问题的\",{\"1\":{\"711\":1}}],[\"是说\",{\"1\":{\"709\":1}}],[\"是我们最终要引用的对象\",{\"1\":{\"688\":1}}],[\"是数据在堆空间中开辟空间以后对应的地址值\",{\"1\":{\"687\":1}}],[\"是必须要\",{\"1\":{\"686\":1}}],[\"是自有项目还是外包项目\",{\"1\":{\"1110\":1}}],[\"是自底向上的\",{\"1\":{\"686\":1}}],[\"是自动续期的\",{\"1\":{\"152\":3}}],[\"是自动续期的吗\",{\"1\":{\"123\":1}}],[\"是浅拷贝\",{\"1\":{\"683\":1}}],[\"是过程化思维\",{\"1\":{\"678\":1}}],[\"是官方一直在不断优化的\",{\"1\":{\"674\":1}}],[\"是导入java\",{\"1\":{\"665\":1}}],[\"是a\",{\"1\":{\"655\":1}}],[\"是api层面的锁\",{\"1\":{\"352\":1}}],[\"是逐条读入\",{\"1\":{\"635\":1}}],[\"是解释执行\",{\"1\":{\"633\":1,\"634\":1}}],[\"是它宣传的\",{\"1\":{\"633\":1}}],[\"是权限系统用到的经典模型\",{\"1\":{\"630\":1}}],[\"是编码和摘要\",{\"1\":{\"626\":1}}],[\"是编译时增强\",{\"1\":{\"494\":1}}],[\"是先授权后认证\",{\"1\":{\"617\":1}}],[\"是先编译后拼接\",{\"1\":{\"411\":1}}],[\"是轻量级的消息传递机制\",{\"1\":{\"613\":1}}],[\"是阿里云提供的海量\",{\"1\":{\"594\":1}}],[\"是整合进了\",{\"1\":{\"576\":1}}],[\"是对冒泡排序的一种改进\",{\"1\":{\"1085\":1}}],[\"是对\",{\"1\":{\"571\":2}}],[\"是对称的\",{\"1\":{\"131\":1}}],[\"是临时节点\",{\"1\":{\"570\":1}}],[\"是多种微服务架构落地技术的集合体\",{\"1\":{\"553\":1}}],[\"是多线程环境\",{\"1\":{\"302\":1}}],[\"是做到限流突然就这个问题不做了\",{\"1\":{\"546\":1}}],[\"是什么\",{\"1\":{\"543\":1}}],[\"是由四个键\",{\"1\":{\"1005\":1}}],[\"是由spring配置控制的\",{\"1\":{\"539\":1}}],[\"是由\",{\"1\":{\"534\":1,\"736\":1,\"1041\":1}}],[\"是由若干条指令组成\",{\"1\":{\"303\":1}}],[\"是高级容器\",{\"1\":{\"486\":1}}],[\"是字符串替换\",{\"1\":{\"411\":1}}],[\"是预编译处理\",{\"1\":{\"411\":1}}],[\"是拼接符\",{\"1\":{\"411\":1}}],[\"是占位符\",{\"1\":{\"411\":1}}],[\"是根据老年代的特点提出的一种标记算法\",{\"1\":{\"385\":1}}],[\"是executors工具类\",{\"1\":{\"361\":1}}],[\"是同时5个线程进入\",{\"1\":{\"326\":1}}],[\"是同一把\",{\"1\":{\"322\":1}}],[\"是因为老师不可能记得所有的知识\",{\"1\":{\"1150\":1}}],[\"是因为你自己没有一个计划\",{\"1\":{\"1142\":1}}],[\"是因为你一直以来所处的环境\",{\"1\":{\"1077\":1}}],[\"是因为他们的业务里面有这样的两种语句\",{\"1\":{\"925\":1}}],[\"是因为封装了\",{\"1\":{\"879\":1}}],[\"是因为springboot版本低了的原因\",{\"1\":{\"871\":1}}],[\"是因为在编译期间\",{\"1\":{\"725\":1}}],[\"是因为在大多数应用开发中\",{\"1\":{\"637\":1}}],[\"是因为jvm在类加载的过程\",{\"1\":{\"700\":1}}],[\"是因为\",{\"1\":{\"685\":1,\"928\":1}}],[\"是因为这是一个综合性的题目\",{\"1\":{\"637\":1}}],[\"是因为每个线程进来后\",{\"1\":{\"305\":1}}],[\"是因为那个\",{\"1\":{\"76\":1}}],[\"是实现并发算法时常用到的一种技术\",{\"1\":{\"302\":1}}],[\"是浏览器对javascript施加的安全限制\",{\"1\":{\"230\":1}}],[\"是上者的详细信息\",{\"1\":{\"222\":1}}],[\"是直接\",{\"1\":{\"220\":1}}],[\"是随同\",{\"1\":{\"215\":1}}],[\"是隔离的\",{\"1\":{\"210\":1,\"789\":1}}],[\"是指将两个或多个不同的分支合并成一个新的分支\",{\"1\":{\"990\":1}}],[\"是指\",{\"1\":{\"900\":1}}],[\"是指尝试获取锁的线程不会立即阻塞\",{\"1\":{\"324\":1}}],[\"是指多个线程获取锁的顺序\",{\"1\":{\"316\":1}}],[\"是指多个线程按照申请锁的顺序来获取锁\",{\"1\":{\"315\":1}}],[\"是指协议\",{\"1\":{\"230\":1}}],[\"是指商家和商家建立的商业关系\",{\"1\":{\"205\":1}}],[\"是指所有用户的响应时间进行排序\",{\"1\":{\"100\":1}}],[\"是不可变的\",{\"1\":{\"721\":1}}],[\"是不可变得\",{\"1\":{\"662\":1}}],[\"是不会加锁的\",{\"1\":{\"283\":1}}],[\"是不一样的东西\",{\"1\":{\"183\":1,\"607\":1}}],[\"是不是这两个文件作用一样\",{\"0\":{\"1014\":1}}],[\"是不是就跟这个事务看到的内容无关了呢\",{\"1\":{\"935\":1}}],[\"是不是就不需要nginx处理动静分离了\",{\"1\":{\"72\":1}}],[\"是不是浪费空间\",{\"1\":{\"922\":1}}],[\"是不是重复请求\",{\"1\":{\"889\":1}}],[\"是不是要搞集群\",{\"1\":{\"815\":1}}],[\"是不是有点晕\",{\"1\":{\"721\":1}}],[\"是不是\",{\"1\":{\"686\":1,\"815\":1}}],[\"是不是也可把远程feign的拦下来\",{\"1\":{\"157\":1}}],[\"是本地事务\",{\"1\":{\"176\":1}}],[\"是本地锁\",{\"1\":{\"123\":1}}],[\"是强引用\",{\"1\":{\"157\":1}}],[\"是否到了厌恶的程度\",{\"1\":{\"1118\":1}}],[\"是否等于\",{\"1\":{\"924\":1}}],[\"是否有必要将身份证号和名字建立联合索引\",{\"1\":{\"922\":1}}],[\"是否与本月的账单明细一致\",{\"1\":{\"905\":1}}],[\"是否批量拒签\",{\"1\":{\"837\":1}}],[\"是否批量签收\",{\"1\":{\"837\":1}}],[\"是否符合某个路由规则\",{\"1\":{\"590\":1}}],[\"是否开启断路器\",{\"1\":{\"586\":1}}],[\"是否需要显式地\",{\"1\":{\"637\":1}}],[\"是否需要字符编码过滤器设置响应编码\",{\"1\":{\"459\":1}}],[\"是否需要字符编码过滤器设置请求编码\",{\"1\":{\"459\":1}}],[\"是否需要拿上一个的返回值\",{\"1\":{\"375\":1}}],[\"是否只读\",{\"1\":{\"448\":1}}],[\"是否也可以通过\",{\"1\":{\"179\":1}}],[\"是否也能通过\",{\"1\":{\"179\":1}}],[\"是否登录再决定要不要放行\",{\"1\":{\"156\":1}}],[\"是否过期\",{\"1\":{\"152\":1}}],[\"是用来写网页的\",{\"1\":{\"1150\":1}}],[\"是用于数据压缩的类\",{\"1\":{\"1081\":1}}],[\"是用于表达源代码中一个固定值的表示法\",{\"1\":{\"725\":1}}],[\"是用于引用外部属性或配置的占位符\",{\"1\":{\"522\":1}}],[\"是用token\",{\"1\":{\"156\":1}}],[\"是用户\",{\"1\":{\"155\":1}}],[\"是用户的所有购物车信息\",{\"1\":{\"155\":1}}],[\"是线程内部的变量\",{\"1\":{\"156\":1}}],[\"是线程局部变量\",{\"1\":{\"156\":1}}],[\"是购物车中商品\",{\"1\":{\"155\":1}}],[\"是商品\",{\"1\":{\"155\":1}}],[\"是放服务器中\",{\"1\":{\"141\":1}}],[\"是放在硬盘上的数据库\",{\"1\":{\"87\":1}}],[\"是搞短信验证码ali的文档给的java示例代码教引入的\",{\"1\":{\"139\":1}}],[\"是具有内存数据网格功能的\",{\"1\":{\"112\":1}}],[\"是的一定在堆\",{\"1\":{\"389\":1}}],[\"是的\",{\"1\":{\"77\":1,\"125\":1,\"152\":1,\"157\":1,\"179\":1,\"543\":1,\"706\":1,\"798\":1,\"849\":1,\"883\":1,\"916\":1,\"927\":1,\"964\":1,\"984\":1,\"998\":1}}],[\"是一家科技公司\",{\"1\":{\"740\":1}}],[\"是一系列依赖关系的集合\",{\"1\":{\"727\":1}}],[\"是一款高性能\",{\"1\":{\"594\":1}}],[\"是一款流行的\",{\"1\":{\"153\":1}}],[\"是一条\",{\"1\":{\"302\":1}}],[\"是一种编码方式\",{\"1\":{\"1081\":1}}],[\"是一种特殊的参数变量\",{\"1\":{\"1041\":1}}],[\"是一种将一个分支的修改应用到另一个分支上的操作\",{\"1\":{\"990\":1}}],[\"是一种数据库事务控制技术\",{\"1\":{\"906\":1}}],[\"是一种用来解决读\",{\"1\":{\"906\":1}}],[\"是一种用于存储和交换数据的文本格式\",{\"1\":{\"706\":1}}],[\"是一种非常\",{\"1\":{\"867\":1}}],[\"是一种同步非阻塞的\",{\"1\":{\"713\":1}}],[\"是一种自顶向下的设计\",{\"1\":{\"686\":1}}],[\"是一种相对强引用弱化一些的引用\",{\"1\":{\"636\":1}}],[\"是一种思想\",{\"1\":{\"565\":1}}],[\"是一种哈希函数\",{\"1\":{\"539\":1}}],[\"是一种线程本地存储的机制\",{\"1\":{\"156\":1}}],[\"是一种分布式架构\",{\"1\":{\"77\":1}}],[\"是一个系列\",{\"1\":{\"1150\":1}}],[\"是一个小表\",{\"1\":{\"928\":1}}],[\"是一个小的\",{\"1\":{\"49\":1}}],[\"是一个支持多引擎的系统\",{\"1\":{\"904\":1}}],[\"是一个下载文件的工具\",{\"1\":{\"808\":1}}],[\"是一个多用户操作系统\",{\"1\":{\"785\":1}}],[\"是一个本地方法\",{\"1\":{\"723\":1}}],[\"是一个\",{\"1\":{\"713\":1}}],[\"是一个方便的基类\",{\"1\":{\"625\":1}}],[\"是一个必须项\",{\"1\":{\"572\":1}}],[\"是一个未完成初始化的\",{\"1\":{\"543\":1}}],[\"是一个变量\",{\"1\":{\"539\":1}}],[\"是一个在\",{\"1\":{\"501\":1}}],[\"是一个专门为\",{\"1\":{\"465\":1}}],[\"是一个cpu指令\",{\"1\":{\"296\":1}}],[\"是一个类\",{\"1\":{\"156\":1}}],[\"是一个开放标准\",{\"1\":{\"136\":1}}],[\"是一个用于测量代码执行时间的工具类\",{\"1\":{\"1081\":1}}],[\"是一个用于数据压缩的类\",{\"1\":{\"1081\":1}}],[\"是一个用于提交\",{\"1\":{\"990\":1}}],[\"是一个用于\",{\"1\":{\"78\":1}}],[\"是一个目录别名\",{\"1\":{\"73\":1}}],[\"是最上层目录的定义\",{\"1\":{\"73\":1}}],[\"是被视为两个不同的路径的\",{\"1\":{\"60\":1}}],[\"是\",{\"1\":{\"10\":1,\"60\":1,\"112\":1,\"156\":1,\"183\":1,\"186\":1,\"220\":1,\"520\":1,\"534\":1,\"590\":1,\"594\":1,\"605\":1,\"686\":1,\"739\":1,\"740\":1,\"775\":1,\"810\":1,\"823\":2,\"899\":1,\"900\":3,\"905\":3,\"919\":1,\"997\":1,\"1005\":2,\"1041\":1}}],[\"演示地址\",{\"1\":{\"261\":1}}],[\"演示\",{\"1\":{\"9\":1}}],[\"和正常用自己电脑没差\",{\"1\":{\"1160\":1}}],[\"和官方文档不一样\",{\"1\":{\"1158\":1}}],[\"和博客差不多\",{\"1\":{\"1145\":1}}],[\"和真正优秀的人比起来\",{\"1\":{\"1140\":1}}],[\"和在线链接不推荐\",{\"1\":{\"1126\":1}}],[\"和面试官角度撰写简历\",{\"1\":{\"1125\":1}}],[\"和书面\",{\"1\":{\"1103\":1}}],[\"和内存大小没多大关系\",{\"1\":{\"1093\":1}}],[\"和邮箱改成自己的\",{\"1\":{\"1005\":1}}],[\"和工作人员交流了一下\",{\"1\":{\"998\":1}}],[\"和合并\",{\"1\":{\"990\":2}}],[\"和一个roll\",{\"1\":{\"972\":1}}],[\"和一个整型字段\",{\"1\":{\"898\":1}}],[\"和右外连接\",{\"1\":{\"964\":1}}],[\"和不同的库上\",{\"1\":{\"960\":1}}],[\"和null之间的错误\",{\"1\":{\"948\":1}}],[\"和notify\",{\"1\":{\"352\":1}}],[\"和这个一致性视图的对比结果得到的\",{\"1\":{\"935\":1}}],[\"和资源\",{\"1\":{\"933\":1}}],[\"和事务\",{\"1\":{\"932\":1}}],[\"和更新类事务的提交语句\",{\"1\":{\"927\":1}}],[\"和图\",{\"1\":{\"924\":1}}],[\"和你分享行锁的时候又提到\",{\"1\":{\"934\":1}}],[\"和你分析一下其中的索引模型\",{\"1\":{\"916\":1}}],[\"和你一起讨论了在开发的时候如何安排正确的事务语句\",{\"1\":{\"933\":1}}],[\"和你详细讨论\",{\"1\":{\"922\":1}}],[\"和范围查询场景中的性能就都非常优秀\",{\"1\":{\"915\":1}}],[\"和串行化\",{\"1\":{\"905\":1}}],[\"和数据库打交道的时候\",{\"1\":{\"904\":1}}],[\"和逻辑日志\",{\"1\":{\"902\":1}}],[\"和业务逻辑实现异步解耦合\",{\"1\":{\"883\":1}}],[\"和上面反着来\",{\"1\":{\"876\":1}}],[\"和上面不同\",{\"1\":{\"862\":1}}],[\"和原子操作\",{\"1\":{\"849\":1}}],[\"和queue的绑定可以是多对多的关系\",{\"1\":{\"823\":1}}],[\"和headers\",{\"1\":{\"823\":1}}],[\"和过滤器\",{\"1\":{\"726\":1}}],[\"和编译期常量相对的\",{\"1\":{\"725\":1}}],[\"和符号引用\",{\"1\":{\"722\":1}}],[\"和输出设备\",{\"1\":{\"709\":1}}],[\"和arraylist一样\",{\"1\":{\"688\":1}}],[\"和association是一样的效果\",{\"1\":{\"427\":1}}],[\"和list作比较\",{\"1\":{\"688\":1}}],[\"和wait\",{\"1\":{\"687\":1}}],[\"和应用程序类加载器\",{\"1\":{\"679\":1}}],[\"和行为\",{\"1\":{\"678\":1}}],[\"和缓存有关的设置\",{\"0\":{\"449\":1}}],[\"和sc\",{\"1\":{\"1041\":1}}],[\"和src平级\",{\"1\":{\"987\":1}}],[\"和spring事件驱动\",{\"1\":{\"612\":1}}],[\"和signal\",{\"1\":{\"352\":1}}],[\"和sql一样配地址密码\",{\"1\":{\"105\":1}}],[\"和countdownlatch相反\",{\"1\":{\"337\":1}}],[\"和处理器共同为编写单线程程序的程序员创建了一个幻觉\",{\"1\":{\"329\":1}}],[\"和主内存中的值进行比较\",{\"1\":{\"305\":1}}],[\"和最开始的就不一致了\",{\"1\":{\"294\":1}}],[\"和我们的代码顺序不一样\",{\"1\":{\"293\":1}}],[\"和预检请求\",{\"1\":{\"230\":1}}],[\"和之前相同的服务器\",{\"1\":{\"208\":1}}],[\"和服务\",{\"1\":{\"156\":1}}],[\"和服务器的请求一起发送\",{\"1\":{\"49\":1}}],[\"和多例模式有点类似\",{\"1\":{\"80\":1}}],[\"和ruoyi一样\",{\"1\":{\"70\":1}}],[\"和\",{\"0\":{\"352\":1,\"411\":1,\"494\":1,\"740\":1,\"1003\":1,\"1014\":1},\"1\":{\"9\":1,\"28\":1,\"60\":2,\"61\":1,\"62\":1,\"73\":1,\"78\":3,\"112\":1,\"146\":1,\"156\":1,\"210\":1,\"218\":1,\"222\":1,\"231\":1,\"237\":1,\"252\":1,\"271\":1,\"295\":2,\"296\":1,\"301\":1,\"302\":1,\"352\":3,\"366\":1,\"372\":1,\"377\":1,\"454\":1,\"482\":3,\"493\":2,\"523\":1,\"543\":2,\"552\":2,\"565\":1,\"571\":1,\"572\":1,\"589\":1,\"591\":2,\"594\":1,\"606\":2,\"608\":1,\"630\":1,\"632\":2,\"650\":1,\"660\":1,\"669\":1,\"678\":1,\"681\":1,\"690\":1,\"694\":1,\"697\":1,\"709\":2,\"713\":2,\"717\":1,\"718\":1,\"722\":1,\"723\":1,\"724\":1,\"727\":1,\"729\":1,\"779\":1,\"787\":1,\"789\":1,\"860\":1,\"898\":2,\"899\":2,\"900\":1,\"901\":2,\"902\":1,\"905\":2,\"914\":1,\"917\":1,\"921\":2,\"924\":1,\"929\":3,\"933\":3,\"934\":1,\"959\":3,\"990\":1,\"1003\":1,\"1004\":2,\"1005\":10,\"1006\":1,\"1022\":1,\"1023\":1,\"1081\":2,\"1150\":3}}],[\"介绍上面两个存储单位后就介绍下内存了\",{\"1\":{\"1089\":1}}],[\"介绍了\",{\"1\":{\"919\":1}}],[\"介绍了有问题的原因\",{\"1\":{\"787\":1}}],[\"介绍synchronized的原理\",{\"1\":{\"329\":1}}],[\"介绍\",{\"0\":{\"9\":1,\"38\":1,\"42\":1,\"247\":1,\"615\":1},\"1\":{\"9\":1,\"10\":1,\"58\":1}}],[\"你难免会想方设法去做一些适合自己的定制\",{\"1\":{\"1161\":1}}],[\"你java8还不会说不过去的\",{\"1\":{\"1150\":1}}],[\"你打开就知道怎么用了\",{\"1\":{\"1150\":1}}],[\"你还是个菜鸟\",{\"1\":{\"1150\":1}}],[\"你还可以参考其他框架或库\",{\"1\":{\"153\":1}}],[\"你大二下的任务就是尽可能的去做项目\",{\"1\":{\"1150\":1}}],[\"你都学完了\",{\"1\":{\"1150\":1}}],[\"你都不用虚\",{\"1\":{\"1130\":1}}],[\"你来上学是为了学习知识的\",{\"1\":{\"1150\":1}}],[\"你之前做的努力\",{\"1\":{\"1144\":1}}],[\"你自己画一个流程图\",{\"1\":{\"1144\":1}}],[\"你比别人懂得多\",{\"1\":{\"1141\":1}}],[\"你觉得周围没有人比你更厉害了\",{\"1\":{\"1140\":1}}],[\"你觉得这个错误是在我们上面提到的哪个阶段报出来的呢\",{\"1\":{\"897\":1}}],[\"你才不会迷茫\",{\"1\":{\"1144\":1}}],[\"你才不会在未来被年轻人挤下去\",{\"1\":{\"1139\":1}}],[\"你才能意识到自己的不足\",{\"1\":{\"1140\":1}}],[\"你才有兴趣去往深入了学\",{\"1\":{\"1139\":1}}],[\"你很快就会被淘汰了\",{\"1\":{\"1139\":1}}],[\"你通过了面试\",{\"1\":{\"1132\":1}}],[\"你以为\",{\"1\":{\"1130\":1}}],[\"你主要从这些传闻里看看加班强度\",{\"1\":{\"1117\":1}}],[\"你最应该关注的是同事和直接上级\",{\"1\":{\"1109\":1}}],[\"你有资料\",{\"1\":{\"1144\":1}}],[\"你有很大机会成为外卖超人\",{\"1\":{\"1104\":1}}],[\"你有下面几个选择\",{\"1\":{\"849\":1}}],[\"你们可以参考一下\",{\"1\":{\"1150\":1}}],[\"你们员工自己互相给福利吧\",{\"1\":{\"1104\":1}}],[\"你们被优越的环境所塑造出来的能力优势\",{\"1\":{\"1077\":1}}],[\"你们一定是秉持着\",{\"1\":{\"1077\":1}}],[\"你们读取你们自己视图的互不冲突\",{\"1\":{\"906\":1}}],[\"你不满足于现状\",{\"1\":{\"1150\":1}}],[\"你不用自己找\",{\"1\":{\"1145\":1}}],[\"你不要祈祷你这一辈子所有学习需要的资料都有人会提供给你\",{\"1\":{\"1144\":1}}],[\"你不会不知所措\",{\"1\":{\"1144\":1}}],[\"你不讨厌\",{\"1\":{\"1076\":1}}],[\"你不能随意push你的代码到任何仓库\",{\"1\":{\"798\":1,\"984\":1}}],[\"你不能通过它访问对象\",{\"1\":{\"636\":1}}],[\"你定义的\",{\"1\":{\"1009\":1}}],[\"你懂的\",{\"0\":{\"1002\":1}}],[\"你无需手动使用\",{\"1\":{\"990\":1}}],[\"你平时也看不到它\",{\"1\":{\"972\":1}}],[\"你看的时候觉得自己会了\",{\"1\":{\"1150\":1}}],[\"你看\",{\"1\":{\"935\":1}}],[\"你是不是感觉有点晕呢\",{\"1\":{\"934\":1}}],[\"你是不是心中也会不免会好奇\",{\"1\":{\"898\":1}}],[\"你登上服务器一看\",{\"1\":{\"931\":1}}],[\"你该怎么做呢\",{\"1\":{\"928\":1}}],[\"你已经知道了前缀索引规则\",{\"1\":{\"924\":1}}],[\"你也应该自己画一个\",{\"1\":{\"1144\":1}}],[\"你也不用承认你想离职\",{\"1\":{\"1119\":1}}],[\"你也许会问\",{\"1\":{\"927\":1}}],[\"你也能够用上这个索引\",{\"1\":{\"923\":1}}],[\"你也可以通过做一些acm的题来提高自己\",{\"1\":{\"1150\":1}}],[\"你也可以通过指定存储引擎的类型来选择别的引擎\",{\"1\":{\"892\":1}}],[\"你也可以参考一下专栏里的小游戏\",{\"1\":{\"1150\":1}}],[\"你也可以先简单看看这个图回顾下\",{\"1\":{\"898\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"30\":1}}],[\"你心里要有个概念\",{\"1\":{\"916\":1}}],[\"你往中间插入一个记录就必须得挪动后面所有的记录\",{\"1\":{\"915\":1}}],[\"你现在要做的\",{\"1\":{\"1150\":1}}],[\"你现在已经有了自己写一个小网站的能力了\",{\"1\":{\"1150\":1}}],[\"你现在已经很了不起了\",{\"1\":{\"1140\":1}}],[\"你现在之所以会认为努力就会有回报\",{\"1\":{\"1077\":1}}],[\"你现在应该知道了\",{\"1\":{\"928\":1}}],[\"你现在维护着一个身份证信息和姓名的表\",{\"1\":{\"914\":1}}],[\"你现在知道\",{\"1\":{\"904\":1}}],[\"你要做项目\",{\"1\":{\"1150\":1}}],[\"你要做的是拓宽自己的广度\",{\"1\":{\"1150\":1}}],[\"你要做的\",{\"1\":{\"1150\":2}}],[\"你要知道\",{\"1\":{\"1150\":2}}],[\"你要尽可能的去多接触一些技术\",{\"1\":{\"1150\":1}}],[\"你要好好学\",{\"1\":{\"1150\":1}}],[\"你要学什么东西就用这个命令试试\",{\"1\":{\"985\":1}}],[\"你要对里面任何一个表做加字段操作\",{\"1\":{\"927\":1}}],[\"你要查身份证号在\",{\"1\":{\"915\":1}}],[\"你要根据自己的业务情况来定\",{\"1\":{\"905\":1}}],[\"你要给朋友小王转\",{\"1\":{\"904\":1}}],[\"你隔离得越严实\",{\"1\":{\"905\":1}}],[\"你首先要知道\",{\"1\":{\"905\":1}}],[\"你肯定会特别小心\",{\"1\":{\"928\":1}}],[\"你肯定会想到\",{\"1\":{\"905\":1}}],[\"你肯定知道\",{\"1\":{\"928\":1}}],[\"你肯定不陌生\",{\"1\":{\"904\":1}}],[\"你这个专业真好\",{\"1\":{\"1141\":1}}],[\"你这\",{\"1\":{\"904\":1}}],[\"你想做一些更有意思\",{\"1\":{\"1150\":1}}],[\"你想变成什么样的人\",{\"1\":{\"1140\":1}}],[\"你想想\",{\"1\":{\"899\":2}}],[\"你想上传一个5g的视频\",{\"1\":{\"708\":1}}],[\"你得找到这个人的赊账总额那条记录\",{\"1\":{\"899\":1}}],[\"你输入的是由多个字符串和空格组成的一条\",{\"1\":{\"895\":1}}],[\"你可能什么都不懂\",{\"1\":{\"1150\":1}}],[\"你可能要问\",{\"1\":{\"924\":1}}],[\"你可能在一些建表规范里面见到过类似的描述\",{\"1\":{\"918\":1}}],[\"你可能就会说\",{\"1\":{\"909\":1}}],[\"你可能会问\",{\"1\":{\"935\":1}}],[\"你可能会觉得有些枯燥\",{\"1\":{\"916\":1}}],[\"你可能会说\",{\"1\":{\"901\":1}}],[\"你可能会发现\",{\"1\":{\"893\":1}}],[\"你可能注意到了\",{\"1\":{\"900\":1}}],[\"你可以更改css引入\",{\"1\":{\"1161\":1}}],[\"你可以更好地控制所使用的框架版本\",{\"1\":{\"1012\":1}}],[\"你可以按照官网的文档\",{\"1\":{\"1161\":1}}],[\"你可以按下\",{\"1\":{\"1038\":1}}],[\"你可以多下载几套\",{\"1\":{\"1150\":1}}],[\"你可以先从网上找一找别人画的脑图\",{\"1\":{\"1144\":1}}],[\"你可以先对每个组件的名字有个印象\",{\"1\":{\"892\":1}}],[\"你可以添加插件\",{\"1\":{\"1161\":1}}],[\"你可以添加\",{\"1\":{\"1038\":1}}],[\"你可以查看该依赖项的\",{\"1\":{\"1012\":1}}],[\"你可以查到当前执行中的事务\",{\"1\":{\"928\":1}}],[\"你可以采用垂直拆分和水平拆分来解决\",{\"1\":{\"961\":1}}],[\"你可以结合这两篇文章的说明来更深一步地理解\",{\"1\":{\"934\":1}}],[\"你可以考虑通过将一行改成逻辑上的多行来减少锁冲突\",{\"1\":{\"932\":2}}],[\"你可以考虑以下两种方案\",{\"1\":{\"893\":1}}],[\"你可以验证一下\",{\"1\":{\"931\":1}}],[\"你可以想象一下这个过程\",{\"1\":{\"932\":1}}],[\"你可以想象一下\",{\"1\":{\"928\":1}}],[\"你可以想象一下一棵\",{\"1\":{\"916\":1}}],[\"你可以试想一下\",{\"1\":{\"927\":1}}],[\"你可以看一下这个图\",{\"1\":{\"927\":1}}],[\"你可以看到该公司陷入了哪些官司\",{\"1\":{\"1116\":1}}],[\"你可以看到\",{\"1\":{\"894\":1,\"925\":1}}],[\"你可以设想下\",{\"1\":{\"914\":1}}],[\"你可以设置程序的根目录\",{\"1\":{\"537\":1}}],[\"你可以用这个语句代替\",{\"1\":{\"919\":1}}],[\"你可以用\",{\"1\":{\"905\":1}}],[\"你可以直接提供一个\",{\"1\":{\"625\":1}}],[\"你可以根据项目需求选择特定的版本\",{\"1\":{\"1012\":1}}],[\"你可以根据实际需求选择适合的方式来提供属性的具体值\",{\"1\":{\"522\":1}}],[\"你可以根据具体的需求选择合适的方式来实现异步操作\",{\"1\":{\"372\":1}}],[\"你可以将应用于其他与运行时环境相关的依赖\",{\"1\":{\"1012\":1}}],[\"你可以将servlet\",{\"1\":{\"1012\":1}}],[\"你可以将参数\",{\"1\":{\"894\":1}}],[\"你可以将文件部署到一个本地服务器上\",{\"1\":{\"706\":1}}],[\"你可以将属性值设置为环境变量\",{\"1\":{\"522\":1}}],[\"你可以将图片和\",{\"1\":{\"29\":1}}],[\"你可以创建一个\",{\"1\":{\"522\":1}}],[\"你可以为这些占位符提供具体的值\",{\"1\":{\"522\":1}}],[\"你可以选择使用第三方的连接池库来管理数据库连接\",{\"1\":{\"393\":1}}],[\"你可以把这个get放在逻辑最后面\",{\"1\":{\"357\":1}}],[\"你可以提示用户输入的认证信息有误\",{\"1\":{\"153\":1}}],[\"你可以允许用户登录\",{\"1\":{\"153\":1}}],[\"你可以使用引号将通配符模式括起来\",{\"1\":{\"787\":1}}],[\"你可以使用该参数来限制元空间的增长\",{\"1\":{\"383\":1}}],[\"你可以使用\",{\"1\":{\"153\":1,\"216\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"8\":1}}],[\"你可以通过打开系统属性窗口来设置永久环境变量\",{\"1\":{\"1038\":1}}],[\"你可以通过在其他模块中将依赖的作用域设置为<scope>provided<\",{\"1\":{\"1012\":1}}],[\"你可以通过修改\",{\"1\":{\"48\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"2\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"29\":1}}],[\"你可以在项目的构建脚本\",{\"1\":{\"1012\":1}}],[\"你可以在启动项目时通过命令行参数来传递属性值\",{\"1\":{\"522\":1}}],[\"你可以在只有一个核心的cpu上创建任意多线程\",{\"1\":{\"99\":1}}],[\"你可以在\",{\"1\":{\"27\":1,\"28\":1,\"893\":1,\"907\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"5\":1}}],[\"你可以标记\",{\"1\":{\"20\":1}}],[\"你就不会迷茫了\",{\"1\":{\"1142\":1}}],[\"你就更有竞争力\",{\"1\":{\"1141\":1}}],[\"你就要去认识什么样的人\",{\"1\":{\"1140\":1}}],[\"你就对得起这个工资\",{\"1\":{\"1130\":1}}],[\"你就需要保持这棵树是平衡二叉树\",{\"1\":{\"916\":1}}],[\"你就需要在交互对话里面输入密码\",{\"1\":{\"893\":1}}],[\"你就可以执行\",{\"1\":{\"894\":1}}],[\"你就会知道这个时间点自己应该做什么\",{\"1\":{\"1142\":1}}],[\"你就会变成什么样的人\",{\"1\":{\"1140\":1}}],[\"你就会停滞不前\",{\"1\":{\"1140\":1}}],[\"你就会看到\",{\"1\":{\"932\":1}}],[\"你就会收到一个\",{\"1\":{\"893\":1}}],[\"你就会发现变化啦\",{\"1\":{\"805\":1}}],[\"你执行语句前要先连接数据库\",{\"1\":{\"898\":1}}],[\"你执行\",{\"1\":{\"892\":1}}],[\"你下去依次检查c\",{\"1\":{\"849\":1}}],[\"你站在讲台上等\",{\"1\":{\"849\":1}}],[\"你创建30个分身\",{\"1\":{\"849\":1}}],[\"你创建一个订单往往会涉及到订单服务\",{\"1\":{\"183\":1}}],[\"你用过\",{\"1\":{\"1134\":1}}],[\"你用循环挨个处理\",{\"1\":{\"849\":1}}],[\"你用那个多\",{\"1\":{\"360\":1}}],[\"你敢说每次发送验证码的时候是一发你就收到了的么\",{\"1\":{\"814\":1}}],[\"你只需要敲几行命令就可以快速启动了\",{\"1\":{\"1161\":1}}],[\"你只要比其他人答得好就行\",{\"1\":{\"1135\":1}}],[\"你只要请求丢过去了他后台服务器就还在执行\",{\"1\":{\"48\":1}}],[\"你只能push到你自己的仓库或者其他你有权限的仓库\",{\"1\":{\"798\":1,\"984\":1}}],[\"你在大一结束的那个暑假\",{\"1\":{\"1150\":1}}],[\"你在使用一个方案解决一个问题的时候一定要弄清楚原理\",{\"1\":{\"961\":1}}],[\"你在用\",{\"1\":{\"929\":1}}],[\"你在setfieldvalueeditor中也需要判空\",{\"1\":{\"876\":1}}],[\"你在这台主机上已经登录了你的账号\",{\"1\":{\"798\":1,\"984\":1}}],[\"你在工作中单一的\",{\"1\":{\"360\":1}}],[\"你见过一个pc两个屏幕\",{\"1\":{\"785\":1}}],[\"你会非常有成就感的\",{\"1\":{\"1150\":1}}],[\"你会少走很多弯路\",{\"1\":{\"1150\":1}}],[\"你会用的技术上面引导\",{\"1\":{\"1134\":1}}],[\"你会收获两个好处\",{\"1\":{\"1005\":1}}],[\"你会说这看上去不太现实啊\",{\"1\":{\"935\":1}}],[\"你会选择哪一种方法呢\",{\"1\":{\"933\":1}}],[\"你会很快发现这个方法不太可行\",{\"1\":{\"932\":1}}],[\"你会发现\",{\"1\":{\"1144\":1}}],[\"你会发现如果并发能够控制住\",{\"1\":{\"932\":1}}],[\"你会发现打印了nullnull\",{\"1\":{\"720\":1}}],[\"你会怎样安排这三个语句在事务中的顺序呢\",{\"1\":{\"931\":1}}],[\"你会在数据库的慢查询日志中看到一个\",{\"1\":{\"897\":1}}],[\"你会先连接到这个数据库上\",{\"1\":{\"893\":1}}],[\"你会先访问到代理服务器再给你决定具体让你到哪一台服务器拿数据\",{\"1\":{\"72\":1,\"809\":1}}],[\"你发现自己竟然需要重新上传\",{\"1\":{\"708\":1}}],[\"你应该也找到了自己最感兴趣的方向\",{\"1\":{\"1150\":1}}],[\"你应该先鸟瞰其全貌\",{\"1\":{\"892\":1}}],[\"你应该将\",{\"1\":{\"706\":1}}],[\"你应该创建和编写\",{\"1\":{\"8\":1}}],[\"你加第1001个的时候就需要equals1000下这样显然效率太低了\",{\"1\":{\"688\":1}}],[\"你能做到这个程度已经很不错了\",{\"1\":{\"1140\":1}}],[\"你能否写出最高效的2\",{\"1\":{\"685\":1}}],[\"你能现场写一下aop的应用吗\",{\"1\":{\"492\":1}}],[\"你一写全是错误\",{\"1\":{\"1150\":1}}],[\"你一定知道了事务\",{\"1\":{\"931\":1}}],[\"你一定要小心不要导致锁住线上查询和更新\",{\"1\":{\"929\":1}}],[\"你一定要记得将\",{\"1\":{\"905\":1}}],[\"你一定在疑惑\",{\"1\":{\"927\":1}}],[\"你一定看出来了\",{\"1\":{\"918\":1}}],[\"你一定会问\",{\"1\":{\"906\":1}}],[\"你一定希望在校对过程中\",{\"1\":{\"905\":1}}],[\"你一般看到\",{\"1\":{\"900\":1}}],[\"你一边打电话一边吃饭\",{\"1\":{\"675\":1}}],[\"你一直到吃完了以后才去接\",{\"1\":{\"675\":1}}],[\"你停了下来接了电话\",{\"1\":{\"675\":1}}],[\"你吃饭吃到一半\",{\"1\":{\"675\":3}}],[\"你对这份工作有兴趣没\",{\"1\":{\"1103\":1}}],[\"你对于\",{\"1\":{\"633\":1}}],[\"你对\",{\"1\":{\"633\":1}}],[\"你卡在这个环节后面基本也很难做下去\",{\"1\":{\"261\":1}}],[\"你的重心都应该放在一条路上\",{\"1\":{\"1150\":1}}],[\"你的广度已经足够了\",{\"1\":{\"1150\":1}}],[\"你的职业规划是什么\",{\"1\":{\"1144\":1}}],[\"你的周围是什么样的人\",{\"1\":{\"1140\":1}}],[\"你的理解是正确的\",{\"1\":{\"1012\":1}}],[\"你的\",{\"1\":{\"923\":1,\"931\":1,\"1005\":1}}],[\"你的两个\",{\"1\":{\"919\":1}}],[\"你的目标就是把它改成\",{\"1\":{\"908\":1}}],[\"你的连接在三分钟的时候就已经和数据库断开了连接\",{\"1\":{\"260\":1}}],[\"你的应用程序或网站需要向认证服务器发送认证请求\",{\"1\":{\"153\":1}}],[\"你的请求会直接发送到真实的github服务器\",{\"1\":{\"77\":1}}],[\"你的请求会被发送到最近的cdn节点\",{\"1\":{\"77\":1}}],[\"你的请求会先经过dns解析\",{\"1\":{\"77\":1}}],[\"你的请求可能会被导向cdn服务器而不是直接到达真正的github服务器\",{\"1\":{\"77\":1}}],[\"你需要学会\",{\"1\":{\"1150\":1}}],[\"你需要继续扩展你的视野\",{\"1\":{\"1150\":1}}],[\"你需要确认你要学什么\",{\"1\":{\"1144\":1}}],[\"你需要确保项目的依赖管理正确配置\",{\"1\":{\"1012\":1}}],[\"你需要尽量引导话题\",{\"0\":{\"1134\":1}}],[\"你需要在你的\",{\"1\":{\"1010\":1}}],[\"你需要在应用程序中配置\",{\"1\":{\"153\":1}}],[\"你需要在应用程序或网站中集成认证接口\",{\"1\":{\"153\":1}}],[\"你需要了解的是在实现分库分表过程中\",{\"1\":{\"961\":1}}],[\"你需要追查一下\",{\"1\":{\"929\":1}}],[\"你需要根据认证结果来决定是否允许用户登录\",{\"1\":{\"153\":1}}],[\"你需要设计一个用户登录界面\",{\"1\":{\"153\":1}}],[\"你需要做以下几件事\",{\"1\":{\"153\":1}}],[\"你需要阅读\",{\"1\":{\"10\":1}}],[\"文章详情页\",{\"1\":{\"1161\":1}}],[\"文章写得很匆忙\",{\"1\":{\"1152\":1}}],[\"文章的整体思路\",{\"0\":{\"1137\":1}}],[\"文章的最后\",{\"1\":{\"902\":1}}],[\"文章\",{\"1\":{\"922\":1}}],[\"文章标题列表\",{\"1\":{\"5\":1}}],[\"文本\",{\"1\":{\"1021\":1}}],[\"文本识别我用腾讯\",{\"1\":{\"1005\":1}}],[\"文本翻译我加了\",{\"1\":{\"1005\":1}}],[\"文本中这个图是\",{\"1\":{\"893\":1}}],[\"文本文件是一种纯文本格式\",{\"1\":{\"706\":1}}],[\"文中多个不同线程拿用户信息是通过\",{\"1\":{\"157\":1}}],[\"文档地址\",{\"1\":{\"261\":1}}],[\"文档明明白白\",{\"1\":{\"223\":1}}],[\"文档\",{\"1\":{\"90\":1,\"223\":1,\"265\":1}}],[\"文件格式\",{\"1\":{\"1126\":1}}],[\"文件名\",{\"1\":{\"1126\":1}}],[\"文件名需英文\",{\"1\":{\"1041\":1}}],[\"文件夹发现会压缩错误日志到里面\",{\"1\":{\"1084\":1}}],[\"文件夹的图片\",{\"1\":{\"29\":1}}],[\"文件是项目的核心描述文件\",{\"1\":{\"1014\":1}}],[\"文件是直接\",{\"1\":{\"238\":1}}],[\"文件改成用\",{\"1\":{\"1005\":1}}],[\"文件也不会变小\",{\"1\":{\"906\":1}}],[\"文件里的\",{\"1\":{\"906\":1}}],[\"文件里面实际是字节码\",{\"1\":{\"635\":1}}],[\"文件里面写死了spring\",{\"1\":{\"483\":1}}],[\"文件写到一定大小后会切换到下一个\",{\"1\":{\"900\":1}}],[\"文件并添加上\",{\"1\":{\"789\":1}}],[\"文件或目录\",{\"1\":{\"786\":1}}],[\"文件基本属性\",{\"1\":{\"786\":1}}],[\"文件的内容粘贴进去使用\",{\"1\":{\"986\":1}}],[\"文件的配置呢\",{\"1\":{\"881\":1}}],[\"文件的权限字符为\",{\"1\":{\"786\":1}}],[\"文件的位置在src下的才能用类加载器加载\",{\"1\":{\"779\":1}}],[\"文件的加载和访问通常通过一个正式的\",{\"1\":{\"706\":1}}],[\"文件都够我们头疼的了\",{\"1\":{\"726\":1}}],[\"文件获取相关信息\",{\"1\":{\"722\":1}}],[\"文件常量池中的字符串对象实例\",{\"1\":{\"722\":1}}],[\"文件常量池中的内容会在类加载后存放到方法区的运行时常量池中\",{\"1\":{\"722\":1}}],[\"文件常量池而言运行时常量池更具备动态性\",{\"1\":{\"722\":1}}],[\"文件常量池\",{\"1\":{\"722\":1}}],[\"文件部署到一个正式的\",{\"1\":{\"706\":1}}],[\"文件协议\",{\"1\":{\"706\":1}}],[\"文件中显式地引入\",{\"1\":{\"1010\":1}}],[\"文件中\",{\"1\":{\"1010\":1}}],[\"文件中保存了一份常量池\",{\"1\":{\"722\":1}}],[\"文件中的映射关系\",{\"1\":{\"738\":1}}],[\"文件中的\",{\"1\":{\"522\":1}}],[\"文件中定义了属性的默认值\",{\"1\":{\"522\":1}}],[\"文件中添加以下内容\",{\"1\":{\"522\":1}}],[\"文件上传\",{\"1\":{\"480\":1}}],[\"文件上传解析器multipatresolver\",{\"1\":{\"480\":1}}],[\"文件放到\",{\"1\":{\"392\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"29\":1}}],[\"文件输出到磁盘\",{\"1\":{\"392\":1}}],[\"文件来配置\",{\"1\":{\"48\":1}}],[\"文件\",{\"1\":{\"8\":1,\"73\":1,\"522\":2,\"559\":2,\"706\":1,\"880\":1,\"1012\":3,\"1081\":1,\"1084\":1,\"1158\":1}}],[\"文件生成页面\",{\"1\":{\"8\":1}}],[\"展示\",{\"0\":{\"8\":1}}],[\"夜间模式按钮\",{\"1\":{\"5\":1}}],[\"主页readme\",{\"1\":{\"1161\":1}}],[\"主从复制\",{\"1\":{\"959\":1}}],[\"主从延迟\",{\"1\":{\"929\":1}}],[\"主动死锁检测在发生死锁的时候\",{\"1\":{\"932\":1}}],[\"主动死锁检测\",{\"1\":{\"932\":1}}],[\"主动回滚死锁链条中的某一个事务\",{\"1\":{\"932\":1}}],[\"主动释放锁\",{\"1\":{\"928\":1}}],[\"主服务器\",{\"1\":{\"864\":1}}],[\"主服务器挂掉了\",{\"1\":{\"862\":1}}],[\"主类+\",{\"1\":{\"828\":1}}],[\"主谓结构\",{\"1\":{\"678\":1}}],[\"主流\",{\"1\":{\"635\":1}}],[\"主yaml\",{\"1\":{\"591\":1}}],[\"主启动\",{\"1\":{\"558\":1}}],[\"主启动类加\",{\"1\":{\"595\":1}}],[\"主启动类激活\",{\"1\":{\"583\":1}}],[\"主启动类\",{\"1\":{\"123\":1,\"576\":1}}],[\"主内存\",{\"1\":{\"309\":1}}],[\"主内存的值已经被修改了\",{\"1\":{\"290\":1}}],[\"主内存是共享内存区域\",{\"1\":{\"287\":1}}],[\"主键可以是单个列或多个列的组合\",{\"1\":{\"967\":1}}],[\"主键部分a\",{\"1\":{\"925\":1}}],[\"主键部分b\",{\"1\":{\"925\":1}}],[\"主键长度越小\",{\"1\":{\"918\":1}}],[\"主键索引\",{\"1\":{\"936\":1}}],[\"主键索引也被称为聚簇索引\",{\"1\":{\"917\":1}}],[\"主键索引的叶子节点存的是整行数据\",{\"1\":{\"917\":1}}],[\"主键值必须唯一\",{\"1\":{\"967\":1}}],[\"主键值\",{\"1\":{\"416\":1}}],[\"主键\",{\"0\":{\"416\":1},\"1\":{\"229\":1,\"925\":1}}],[\"主程序\",{\"1\":{\"222\":1}}],[\"主域名备案好了下面的二级三级就不需要了\",{\"1\":{\"195\":1}}],[\"主线程才能继续往下执行\",{\"1\":{\"334\":1}}],[\"主线程\",{\"0\":{\"701\":1},\"1\":{\"161\":1,\"687\":1}}],[\"主机重连后变成从机\",{\"1\":{\"865\":1}}],[\"主机挂了\",{\"1\":{\"865\":1}}],[\"主机存的值自己这里没有\",{\"1\":{\"862\":1}}],[\"主机存几个值\",{\"1\":{\"862\":1}}],[\"主机名称\",{\"1\":{\"76\":1}}],[\"主机配置问题\",{\"1\":{\"76\":1}}],[\"主配置文件\",{\"1\":{\"71\":1,\"795\":1}}],[\"主题是\",{\"1\":{\"1005\":1}}],[\"主题\",{\"1\":{\"817\":1}}],[\"主题扩展了更多\",{\"1\":{\"13\":1}}],[\"主题扩展\",{\"0\":{\"13\":1}}],[\"主题也带有以下元素\",{\"1\":{\"5\":1}}],[\"主要区别\",{\"1\":{\"990\":1}}],[\"主要原因是因为其使用嵌套循环\",{\"1\":{\"970\":1}}],[\"主要有两个原因\",{\"1\":{\"927\":1}}],[\"主要介绍的是碰到锁时的现象和其背后的原理\",{\"1\":{\"926\":1}}],[\"主要迷惑前端页面配置好到数据库\",{\"1\":{\"887\":1}}],[\"主要就是为了\",{\"1\":{\"813\":1}}],[\"主要就是搞一个\",{\"1\":{\"231\":1}}],[\"主要负责对从\",{\"1\":{\"736\":1}}],[\"主要用于处理客户端传来的\",{\"1\":{\"738\":1}}],[\"主要用于日志的搜集\",{\"1\":{\"736\":1}}],[\"主要用来做网络通信\",{\"1\":{\"713\":1}}],[\"主要用来构建锁和同步器\",{\"1\":{\"378\":1}}],[\"主要依靠三个核心的关键技术\",{\"1\":{\"731\":1}}],[\"主要存储编译时确定的数据\",{\"1\":{\"722\":1}}],[\"主要体现的是对象不同的可达性\",{\"1\":{\"636\":1}}],[\"主要分为几个步骤\",{\"1\":{\"605\":1}}],[\"主要以流量为切入点\",{\"1\":{\"599\":1}}],[\"主要功能是提供\",{\"1\":{\"573\":1}}],[\"主要功能与配置演示\",{\"0\":{\"0\":1}}],[\"主要自己不要把这个和\",{\"1\":{\"283\":1}}],[\"主要是我导入了一个朗文5的包真的巴适\",{\"1\":{\"1162\":1}}],[\"主要是为了防止自己去了一家面临倒闭或者拖欠工资的公司\",{\"1\":{\"1115\":1}}],[\"主要是为了在后续的开发中如果扩展接口的功能\",{\"1\":{\"686\":1}}],[\"主要是因为\",{\"1\":{\"713\":1}}],[\"主要是\",{\"1\":{\"227\":1,\"352\":1,\"528\":1}}],[\"主要通过修改业务代码来实现\",{\"1\":{\"184\":1}}],[\"主要从\",{\"1\":{\"8\":1}}],[\"页数\",{\"1\":{\"1126\":1}}],[\"页分裂操作需要加悲观锁\",{\"1\":{\"972\":1}}],[\"页分裂操作还影响数据页的利用率\",{\"1\":{\"918\":1}}],[\"页的书\",{\"1\":{\"909\":1}}],[\"页的概念看小结\",{\"1\":{\"899\":1}}],[\"页\",{\"1\":{\"903\":2}}],[\"页面\",{\"1\":{\"219\":1}}],[\"页面静态化\",{\"1\":{\"198\":1}}],[\"页面路径\",{\"1\":{\"192\":1}}],[\"页面请求\",{\"1\":{\"174\":1}}],[\"页面请求时要带上令牌\",{\"1\":{\"167\":1}}],[\"页面放一个这里是放一个hidden的input里面\",{\"1\":{\"167\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"30\":1}}],[\"页面内容\",{\"0\":{\"29\":1}}],[\"页面标题\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"页面配置\",{\"0\":{\"26\":1},\"1\":{\"28\":1},\"2\":{\"32\":1}}],[\"页面引入配置\",{\"1\":{\"10\":1}}],[\"页面信息\",{\"0\":{\"28\":1},\"1\":{\"2\":1}}],[\"页脚\",{\"1\":{\"2\":1,\"5\":1}}],[\"评论补充\",{\"1\":{\"715\":1}}],[\"评论\",{\"1\":{\"2\":1,\"5\":1}}],[\"贡献者\",{\"1\":{\"2\":1,\"5\":1}}],[\"侧边栏\",{\"1\":{\"2\":1,\"5\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
