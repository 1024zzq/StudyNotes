import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as p,e as n,f as a,b as e,a as t}from"./app-Cyf6eBRZ.js";const c={},r=n("h2",{id:"elasticsearch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#elasticsearch"},[n("span",null,"Elasticsearch")])],-1),d=n("p",null,"Port：9200 kibana：5601",-1),u={href:"https://baike.baidu.com/item/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.elastic.co/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[a("它可以快速地"),n("strong",null,"储存、搜索和分析海量数据"),a("。维基百科、Stack Overflow、Github 都采用它。")],-1),h=n("h3",{id:"elasticsearch-store-search-and-analyze",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#elasticsearch-store-search-and-analyze"},[n("span",null,"Elasticsearch: Store, Search, and Analyze")])],-1),k=n("p",null,"秒级的从我们海量数据中检索到我们感兴趣的数据，因为放在内存中。",-1),b=n("p",null,"将MySQL数据往ES里面存一份",-1),g=t(`<h2 id="一、入门" tabindex="-1"><a class="header-anchor" href="#一、入门"><span>一、入门</span></a></h2><blockquote><p>在此系统中两种： 后话 -&gt; ES我这里学的非常模糊，后面商品搜索也是照抄代码，暂时掠过待有需要回头再学</p><ol><li>商品搜索</li><li>日志搜索</li></ol></blockquote><h4 id="倒排索引机制-分词" tabindex="-1"><a class="header-anchor" href="#倒排索引机制-分词"><span>倒排索引机制：分词</span></a></h4><figure><img src="https://images.zzq8.cn/img/202209072156269.png" alt="image-20220907215603856" tabindex="0" loading="lazy"><figcaption>image-20220907215603856</figcaption></figure><h4 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h4><p>Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。</p><p>对比关系：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>索引（indices）----------------------Databases 数据库

  类型（type）--------------------------Table 数据表

     文档（Document）----------------------Row 行

	    字段（Field）-------------------------Columns 列 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是：<strong>Elasticsearch本身就是分布式的</strong>，因此即便你只有一个节点，Elasticsearch默认也会对你的数据进行分片和副本操作，当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。</p><p><mark>ES 将数据存于内存的！</mark></p><p>内存：因为天然支持分布式，可以多装几台 ES 放在不同的服务器。就会将数据分片存储，10 W个数据，这台存几千那台几千。容量不够数量来凑！</p><h3 id="docker-安装-es" tabindex="-1"><a class="header-anchor" href="#docker-安装-es"><span>Docker 安装 ES</span></a></h3><h4 id="下载镜像文件" tabindex="-1"><a class="header-anchor" href="#下载镜像文件"><span>下载镜像文件</span></a></h4><blockquote><p><strong>踩坑：我没有指定版本号，Tag：latest 看一下 created 居然是三年前的 5.6.12！</strong></p><p>hub.docker.com 还是去这个网站 pull</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull elasticsearch:7.4.2 <span class="token comment">#存储和检索数据 </span>
<span class="token function">docker</span> pull kibana:7.4.2  <span class="token comment">#可视化检索数据，类似 navicat 之于 mysql 的可视化界面</span>


<span class="token comment">#配置，具体看基础篇 Docker 有 MySQL 的使用例子</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mydata/elasticsearch/config
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mydata/elasticsearch/data
<span class="token builtin class-name">echo</span> <span class="token string">&quot;http.host: 0.0.0.0&quot;</span> <span class="token operator">&gt;&gt;</span> /mydata/elasticsearch/config/elasticsearch.yml


<span class="token function">docker</span> run <span class="token parameter variable">--name</span> elasticsearch <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xms64m -Xmx512m&quot;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/elasticsearch/data:/usr/share/elasticsearch/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> elasticsearch:7.4.2


以后再外面装好插件重启即可；
特别注意：
<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /mydata/elasticsearch/ 保证权限
<span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xms64m -Xmx256m&quot;</span> <span class="token punctuation">\\</span> 测试环境下，设置 ES 的初始内存和最大内存，否则导致过大启动不了 ES
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kibana：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> kibana <span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://zzq8.cn:9200 <span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601 <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> kibana:7.4.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、使用" tabindex="-1"><a class="header-anchor" href="#二、使用"><span>二、使用</span></a></h2>`,18),q={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<h3 id="使用-postman-测试" tabindex="-1"><a class="header-anchor" href="#使用-postman-测试"><span>使用 postman 测试</span></a></h3><blockquote><p>对 ES 的所有操作，它都封装成了 Rest Api</p></blockquote><p>第二次发送这个请求 version 就是 2 ，result 变成 update</p><p>zzq8.cn:9200/customer/external/1 路径 index/type/id 可以理解成 数据库/表/数据</p><img src="https://images.zzq8.cn/img/202209101952264.png" alt="image-20220910195209067" style="zoom:50%;"><h3 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁"><span>乐观锁</span></a></h3><p>更新携带 ?if_seq_no=0&amp;if_primary_term=1</p><p>根据 seq_no 来比对版本</p><h2 id="三、查询" tabindex="-1"><a class="header-anchor" href="#三、查询"><span>三、查询</span></a></h2><h3 id="_1-cat-看基本信息" tabindex="-1"><a class="header-anchor" href="#_1-cat-看基本信息"><span>1. _cat 看基本信息</span></a></h3><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>GET /_cat/nodes：查看所有节点
GET /_cat/health：查看 es 健康状况
GET /_cat/master：查看主节点
GET /_cat/indices：查看所有索引 show databases;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-update-更新" tabindex="-1"><a class="header-anchor" href="#_2-update-更新"><span>2. _update 更新</span></a></h3><p>带 _update 就会对比原来的数据，如果更新和原来一样就会 noop（no opration）不进行操作。带 _update 的记得要按照下面这样写：<mark>加 doc</mark></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doew&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不带发 post 和 put 就都会直接更新不会对比数据，version会往上涨</p><h3 id="_3-query-dsl" tabindex="-1"><a class="header-anchor" href="#_3-query-dsl"><span>3. Query DSL</span></a></h3>`,16),y=n("p",null,"Elasticsearch提供了一个可以执行查询的Json风格的DSL。这个被称为Query DSL，该查询语言非常全面。",-1),f=n("p",null,[a("DSL(Domain Specific Language)的缩写，中文翻译为"),n("strong",null,"领域特定语言"),a("。")],-1),x={href:"https://link.zhihu.com/?target=http%3A//Domain-specific%20language",target:"_blank",rel:"noopener noreferrer"},E=n("blockquote",null,[n("p",null,"A specialized computer language designed for a specific task."),n("p",null,[n("strong",null,"为了解决某一类任务而专门设计的计算机语言。")])],-1),S=t(`<h4 id="_1-匹配所有" tabindex="-1"><a class="header-anchor" href="#_1-匹配所有"><span>1）匹配所有</span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET /atguigu/_search
<span class="token punctuation">{</span>
    <span class="token property">&quot;query&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>query</code>：代表查询对象</li><li><code>match_all</code>：代表查询所有</li></ul><h4 id="_2-条件匹配" tabindex="-1"><a class="header-anchor" href="#_2-条件匹配"><span>2）条件匹配</span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET bank/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-match-phrase-短句匹配" tabindex="-1"><a class="header-anchor" href="#_3-match-phrase-短句匹配"><span>3）match_phrase 短句匹配</span></a></h4><p><mark>match_phrase和match的区别，观察如下实例：</mark></p><ul><li>match_phrase是做短语匹配</li><li>match是分词匹配，例如990 Mill匹配含有<strong>990或者Mill</strong>的结果</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET bank/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mill road&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-multi-math-多字段匹配" tabindex="-1"><a class="header-anchor" href="#_4-multi-math-多字段匹配"><span>4）multi_math 多字段匹配</span></a></h4><p>state或者address中包含mill，并且在查询过程中，会对于查询条件进行分词。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET bank/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;multi_match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mill&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;state&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;address&quot;</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-bool用来做复合查询" tabindex="-1"><a class="header-anchor" href="#_5-bool用来做复合查询"><span>5）bool用来做复合查询</span></a></h4><p>布尔查询又叫<strong>组合查询</strong></p><p><code>bool</code>把各种其它查询通过<code>must</code>（与）、<code>must_not</code>（非）、<code>should</code>（或）的方式进行组合</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET bank/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;must&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;gender&quot;</span><span class="token operator">:</span> <span class="token string">&quot;M&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mill&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;must_not&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token string">&quot;18&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;should&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Wallace&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-filter【结果过滤】" tabindex="-1"><a class="header-anchor" href="#_6-filter【结果过滤】"><span>6）Filter【结果过滤】</span></a></h4><p>所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且<strong>不希望过滤条件影响评分</strong>，那么就不要把过滤条件作为查询条件来用。而是使用<code>filter</code>方式：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET bank/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;must&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mill&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;balance&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10000&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token string">&quot;20000&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里先是查询所有匹配address=mill的文档，然后再根据10000&lt;=balance&lt;=20000进行过滤查询结果</p><p><code>range</code>查询允许以下字符：</p><table><thead><tr><th style="text-align:center;">操作符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">gt</td><td style="text-align:center;">大于</td></tr><tr><td style="text-align:center;">gte</td><td style="text-align:center;">大于等于</td></tr><tr><td style="text-align:center;">lt</td><td style="text-align:center;">小于</td></tr><tr><td style="text-align:center;">lte</td><td style="text-align:center;">小于等于</td></tr></tbody></table><h4 id="_7-term" tabindex="-1"><a class="header-anchor" href="#_7-term"><span>7）term</span></a></h4><p>match模糊匹配 term精确匹配</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>#像age这种精确取值 match换成用term
GET bank/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">28</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-nested-去扁平化" tabindex="-1"><a class="header-anchor" href="#_4-nested-去扁平化"><span>4. nested 去扁平化</span></a></h3><figure><img src="https://images.zzq8.cn/img/202210181703256.png" alt="image-20221018170313908" tabindex="0" loading="lazy"><figcaption>image-20221018170313908</figcaption></figure><h3 id="_5-分词器" tabindex="-1"><a class="header-anchor" href="#_5-分词器"><span>5. 分词器</span></a></h3>`,28),z={href:"https://github.com/medcl/elasticsearch-analysis-ik/releases",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>POST _analyze
{
  &quot;analyzer&quot;: &quot;standard&quot;,
  &quot;text&quot;: &quot;the quick brown fox jumps over the lazy dog.&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ik_smart、ik_max_word</p><h5 id="分词器可以有自定义词库-给一个远程文本地址-配置后就可根据里面的分" tabindex="-1"><a class="header-anchor" href="#分词器可以有自定义词库-给一个远程文本地址-配置后就可根据里面的分"><span>分词器可以有自定义词库，给一个远程文本地址，配置后就可根据里面的分</span></a></h5><p>重启 ES 即可识别</p><p><mark>我这里直接拿 Nginx 当了文件服务器</mark>，配置好路由。/usr/share/nginx/html 放上 /es/fenci.txt</p><p>http://zzq8.cn:9201/es/fenci.txt</p>`,6);function T(G,D){const s=i("ExternalLinkIcon");return o(),p("div",null,[r,d,n("blockquote",null,[n("p",null,[n("a",u,[a("全文搜索"),e(s)]),a("属于最常见的需求，开源的 "),n("a",m,[a("Elasticsearch"),e(s)]),a(" （以下简称 Elastic）是目前全文搜索引擎的首选。")]),v,h,k,b]),g,n("blockquote",null,[n("p",null,[a("参照官方文档，具体一些命令怎么用 "),n("a",q,[a("官方文档"),e(s)])])]),_,n("blockquote",null,[y,f,n("p",null,[n("a",x,[a("Wikipedia"),e(s)]),a(" 对于 DSL 的定义还是比较简单的：")]),E]),S,n("p",null,[a("#使用 standard 分词，会把一个个单词分开 #中文需额外搞分词器 => "),n("a",z,[a("ik 分词器"),e(s)])]),j])}const A=l(c,[["render",T],["__file","ElasticSearch.html.vue"]]),M=JSON.parse('{"path":"/studynotes/GuliMall/ElasticSearch.html","title":"","lang":"zh-CN","frontmatter":{"description":"Elasticsearch Port：9200 kibana：5601 全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 Elastic）是目前全文搜索引擎的首选。 它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。 Elasticsearch: Store, Search, ...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/GuliMall/ElasticSearch.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:description","content":"Elasticsearch Port：9200 kibana：5601 全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 Elastic）是目前全文搜索引擎的首选。 它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。 Elasticsearch: Store, Search, ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.zzq8.cn/img/202209072156269.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T15:48:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T15:48:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://images.zzq8.cn/img/202209072156269.png\\",\\"https://images.zzq8.cn/img/202210181703256.png\\"],\\"dateModified\\":\\"2024-05-08T15:48:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Elasticsearch","slug":"elasticsearch","link":"#elasticsearch","children":[]},{"level":2,"title":"一、入门","slug":"一、入门","link":"#一、入门","children":[{"level":3,"title":"Docker 安装 ES","slug":"docker-安装-es","link":"#docker-安装-es","children":[]}]},{"level":2,"title":"二、使用","slug":"二、使用","link":"#二、使用","children":[{"level":3,"title":"使用 postman 测试","slug":"使用-postman-测试","link":"#使用-postman-测试","children":[]},{"level":3,"title":"乐观锁","slug":"乐观锁","link":"#乐观锁","children":[]}]},{"level":2,"title":"三、查询","slug":"三、查询","link":"#三、查询","children":[{"level":3,"title":"1. _cat 看基本信息","slug":"_1-cat-看基本信息","link":"#_1-cat-看基本信息","children":[]},{"level":3,"title":"2. _update 更新","slug":"_2-update-更新","link":"#_2-update-更新","children":[]},{"level":3,"title":"3. Query DSL","slug":"_3-query-dsl","link":"#_3-query-dsl","children":[]},{"level":3,"title":"4. nested 去扁平化","slug":"_4-nested-去扁平化","link":"#_4-nested-去扁平化","children":[]},{"level":3,"title":"5. 分词器","slug":"_5-分词器","link":"#_5-分词器","children":[]}]}],"git":{"createdTime":1712997543000,"updatedTime":1715183298000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1},{"name":"MiniPC","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":4.81,"words":1444},"filePathRelative":"studynotes/GuliMall/ElasticSearch.md","localizedDate":"2024年4月13日","autoDesc":true}');export{A as comp,M as data};
