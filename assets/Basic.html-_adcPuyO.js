import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,e as n,f as s,b as t,a as e}from"./app-CFBzGTKF.js";const c={},r=n("h2",{id:"basic",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#basic"},[n("span",null,"Basic")])],-1),u=n("p",null,"谷粒商城是一个B2C模式的电商平台，销售自营商品给客户",-1),d={href:"https://www.bilibili.com/video/BV1np4y1C7Yf?p=2&spm_id_from=pageDriver&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0",target:"_blank",rel:"noopener noreferrer"},k={href:"https://easydoc.net/s/78237135/ZUqEdvA4/hKJTcbfd",target:"_blank",rel:"noopener noreferrer"},v={href:"https://gitee.com/AdverseQ/gulimall-mall-front-end",target:"_blank",rel:"noopener noreferrer"},m={href:"https://gitee.com/AdverseQ/gulimall_Advanced",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/hancoder/article/details/106922139",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/NiceSeason/gulimall-learning",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"最高境界就是数据库设计师和系统架构师",-1),f=e(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言"><span>一、前言</span></a></h2><h3 id="_1-项目简介" tabindex="-1"><a class="header-anchor" href="#_1-项目简介"><span>1. 项目简介</span></a></h3><blockquote><p>市面上有5种常见的电商模式 B2B、B2C、C2B、C2C、O2O</p></blockquote><h5 id="_1-1-b2b-模式" tabindex="-1"><a class="header-anchor" href="#_1-1-b2b-模式"><span>1.1 B2B 模式</span></a></h5><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>B2B(Business to Business)，是指商家和商家建立的商业关系，如阿里巴巴
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_1-2-b2c-模式" tabindex="-1"><a class="header-anchor" href="#_1-2-b2c-模式"><span>1.2 B2C 模式</span></a></h5><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>B2C(Business to Consumer) 就是我们经常看到的供应商直接把商品买个
用户，即 “商对客” 模式，也就是我们呢说的商业零售，直接面向消费销
售产品和服务，如苏宁易购，京东，天猫，小米商城
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>etc.</p><h3 id="_2-架构图" tabindex="-1"><a class="header-anchor" href="#_2-架构图"><span><mark><strong>2. 架构图：</strong></mark></span></a></h3><figure><img src="https://images.zzq8.cn/img/202207202224096.png" alt="image-20220720220817554" tabindex="0" loading="lazy"><figcaption>image-20220720220817554</figcaption></figure><figure><img src="https://images.zzq8.cn/img/202207221542079.png" alt="image-20220722154237978" tabindex="0" loading="lazy"><figcaption>image-20220722154237978</figcaption></figure><h3 id="_3-分布式基础概念" tabindex="-1"><a class="header-anchor" href="#_3-分布式基础概念"><span>3. 分布式基础概念</span></a></h3><p>常见的负载均衡算法：记一下最后一个！</p><ul><li>轮询：为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直到最后一个，然后循环。</li><li>最小连接：优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式。</li><li>散列：根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到 和之前相同的服务器，可以考虑采取这种方式。</li></ul><p>在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我们称为远程调用。 SpringCloud 中使用 HTTP+JSON 的方式完成远程调用、</p><figure><img src="https://images.zzq8.cn/img/202207221518690.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h2 id="二、docker-学习" tabindex="-1"><a class="header-anchor" href="#二、docker-学习"><span>二、Docker 学习</span></a></h2>`,17),y={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.runoob.com/docker/docker-container-usage.html",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>因为 DockerHub 是国外网站，可以登录 <strong>阿里云</strong> 找到容器镜像服务，使用镜像加速器</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 配置镜像加速</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;
{
  &quot;registry-mirrors&quot;: [&quot;https://chqac97z.mirror.aliyuncs.com&quot;]
}
EOF</span>
<span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark><strong>小 Tip 值得学习</strong></mark>：用 Docker 就参考这个例子！</p><h3 id="_1-mysql" tabindex="-1"><a class="header-anchor" href="#_1-mysql"><span>1. MySQL</span></a></h3><h4 id="_1-1-安装" tabindex="-1"><a class="header-anchor" href="#_1-1-安装"><span>1.1 安装</span></a></h4><p>拉镜像 <strong>注意 -v 已经 Docker 我下面的理念理解！</strong></p><p>-v 外部:Docker容器内部，以后想改配置到外部的 linux 挂载的文件里改容器也就跟着改了！</p><p>理解成 Linux 和 Docker容器（<strong>可以理解为一个完整的Linux</strong>【容器的 bin/bash 里没有 wget，外面 linux有】）是隔离的，所以需要端口映射目录挂载！！！看图</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>--- <span class="token number">1</span> 拉去mysql镜像 【其实，run时发现没有pull也会自动pull，所以这步可以省略的】---
<span class="token function">docker</span> pull mysql <span class="token comment">#默认拉最新的</span>
<span class="token function">docker</span> pull mysql:5.7 <span class="token comment">#拉取指定的</span>

--- <span class="token number">2</span> 启动mysql容器 ---
<span class="token comment">## --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7
<span class="token comment">#这个 -v 目录挂载经常用，MySQL、Redis... </span>
<span class="token comment">#因为 MySQL 相当于部署到了一台隔离的虚拟的 Linux(Docker 容器隔离) 上了，但我们又想看到期中一些目录</span>
参数说明
<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306：将容器的 <span class="token number">3306</span> 端口映射到主机的 <span class="token number">3306</span> 端口
<span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机
<span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机
<span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql/：将配置文件夹挂载到主机-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>：初始化 <span class="token number">123456</span> 

--- <span class="token number">3</span> 进入容器 ---
<span class="token comment">#验证 以root身份进入mysql容器内部  root@f126639a0424:/#  -it【交互模式】  bin/bash【控制台】</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器名称<span class="token operator">|</span>容器id bin/bash
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://images.zzq8.cn/img/202207241602886.png" alt="image-20220724160235682" tabindex="0" loading="lazy"><figcaption>image-20220724160235682</figcaption></figure><blockquote><p>Linux ps （英文全拼：process status）命令用于显示当前进程的状态，类似于 windows 的任务管理器。</p><p>docker ps</p></blockquote><blockquote><p>设置 docker 指定容器自动启动，这个语句在菜鸟找不到</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> update xxx <span class="token parameter variable">--restart</span><span class="token operator">=</span>always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-2-配置" tabindex="-1"><a class="header-anchor" href="#_1-2-配置"><span>1.2 配置</span></a></h4><ol><li>在挂载的 conf 目录加 MySQL 配置</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>client<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8
<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">&#39;SET collation_connection = utf8_unicode_ci&#39;</span> <span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">&#39;SET NAMES utf8&#39;</span> character-set-server<span class="token operator">=</span>utf8
collation-server<span class="token operator">=</span>utf8_unicode_ci
skip-character-set-client-handshake
skip-name-resolve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>进 MySQL 容器 验证挂载生效！</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 使用 docker ps 来查看我们正在运行的容器：</span>
<span class="token function">docker</span> <span class="token function">ps</span>

<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql bin/bash
<span class="token builtin class-name">cd</span> /etc/mysql

<span class="token comment">## 重启指定 image，用于改完配置后重启</span>
<span class="token function">docker</span> restart mysql

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-使用" tabindex="-1"><a class="header-anchor" href="#_1-3-使用"><span>1.3 使用</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 进入容器  推荐大家使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止。</span>
<span class="token comment">## -it【交互模式】  bin/bash【控制台】</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql /bin/bash

<span class="token comment">## 通过容器的 mysql 命令行工具连接</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker exec -it mysql mysql -uroot -p123456</code></p><h3 id="_2-redis" tabindex="-1"><a class="header-anchor" href="#_2-redis"><span>2. Redis</span></a></h3><blockquote><p>注意和 MySQL 不同，因为要通过配置文件启动 Redis 所以需要先创好文件！</p></blockquote><ol><li><p>下载 latest 的版本就好 <code>docker pull redis</code></p></li><li><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 先创好文件！ 修改需要自定义的配置(docker-redis默认没有配置文件，自己在宿主机建立后挂载映射)</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mydata/redis/conf
<span class="token function">touch</span> /mydata/redis/conf/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis <span class="token parameter variable">-v</span> /mydata/redis/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/redis/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>docker exec -it redis redis-cli</code></p></li></ol><hr><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## Redis 从cli中设置密码</span>
config <span class="token builtin class-name">set</span> requirepass test123

<span class="token comment">## 加配置</span>
<span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0 开启远程权限
appendonly <span class="token function">yes</span> 开启aof持久化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、项目准备" tabindex="-1"><a class="header-anchor" href="#三、项目准备"><span>三、项目准备</span></a></h2><h3 id="_1-前端" tabindex="-1"><a class="header-anchor" href="#_1-前端"><span>1. 前端</span></a></h3><h4 id="_1-1-前言" tabindex="-1"><a class="header-anchor" href="#_1-1-前言"><span>1.1 前言</span></a></h4><blockquote><p>vsCode 好用的快捷键，Ctrl E 选中下一个同名单词 / Alt 点击光标多个</p><p>ctrl + \` 打开终端</p></blockquote><p><strong>启动项目：</strong></p><p><strong>我们关注与 node.js 的 npm 功能就行； NPM 是随同 NodeJS 一起安装的包管理工具</strong></p><ul><li>导入vscode</li><li>终端 <code>npm install</code>（<mark>相当于 Maven 下载依赖包</mark>） <ul><li><strong>这里是根据package.json下载后端是pom.xml</strong></li><li>下载完的依赖会在 node_modules 包下面</li></ul></li><li><code>npm run dev</code></li></ul><p><strong>Babel：将新特性代码自动转换成浏览器能兼容的老代码</strong></p><p>Webpack：打包工具</p><p>ES6 &amp; Vue 快速入门</p><h4 id="_1-2-es6" tabindex="-1"><a class="header-anchor" href="#_1-2-es6"><span>1.2 ES6</span></a></h4>`,37),x={href:"https://gitee.com/codezzq/study-notes/raw/master/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/03%E3%80%81%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.pdf",target:"_blank",rel:"noopener noreferrer"},j=n("strong",null,"原始数据",-1),w=n("p",null,"let 有点强类型语言的意思：",-1),z=e("<li><p>var 声明的变量往往会越域，let 声明的变量有严格局部作用域（var 全局 let 局部）</p></li><li><p>var 可以声明多次，let 只能声明一次</p></li><li><p>var 会变量提升， let 不存在变量提升</p></li><li><p>const 声明常量（只读变量）</p></li><li><p><strong>对象解构</strong></p></li><li><p>多行字符串相当于加强版的字符串，用<mark>反引号 `</mark></p></li><li><p><strong>${} 实现字符串拼接</strong></p><ul><li>注意这里 7 要和 6 一起用！let info = `我是${name}，今年${age}了`;</li></ul></li>",7),S={href:"https://zh.javascript.info/function-expressions",target:"_blank",rel:"noopener noreferrer"},E=n("strong",null,"函数声明",-1),C=e(`<li><p>etc.</p></li><li><p>还有箭头函数+解构</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
                                                                        
<span class="token comment">// var hello1 = (param) =&gt; console.log(&quot;hello,&quot; + param.name);</span>
<span class="token comment">// hello1(person);</span>
<span class="token keyword">var</span> <span class="token function-variable function">hello2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello,&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">hello2</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),M=e(`<blockquote><p>针对嵌套的 ajax ES6 提供 <mark>Promise</mark></p><p>感觉可以理解成把 嵌套 调用，变成 链式 调用</p><p><strong>Promise vs axios</strong> 你可以使用 Promise 来处理任何异步操作的结果，而当你需要在 JavaScript 中进行 HTTP 请求时，可以选择使用 Axios 这样的库来简化和加强 HTTP 请求的处理。</p></blockquote><blockquote><p>在JavaScript中<code>实参</code>与<code>形参</code>数量并不需要像JAVA一样必须在数量上严格保持一致，具有很大的灵活性。如下：<mark>下面四个调用都能执行！</mark></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// str1: undefined, str2: undefined, str3: undefined</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// str1: &#39;hello&#39;, str2: undefined, str3: undefined</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// str1: &#39;hello&#39;, str2: &#39;world&#39;, str3: undefined</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// str1: &#39;hello&#39;, str2: &#39;world&#39;, str3: &#39;!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>简化</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">totalPrice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
    等价于
    <span class="token function">totalprice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),A=n("p",null,"js 两种方法构建一个正则表达式：",-1),O=n("li",null,[s("使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示： "),n("ul",null,[n("li",null,"var re = /ab+c/;"),n("li",null,"脚本加载后，正则表达式字面量就会被编译。当正则表达式保持不变时，使用此方法可获得更好的性能。")])],-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"RegExp",-1),P=n("ul",null,[n("li",null,'var re = new RegExp("ab+c");'),n("li",null,"在脚本运行过程中，用构造函数创建的正则表达式会被编译。如果正则表达式将会改变，或者它将会从用户输入等来源中动态地产生，就需要使用构造函数来创建正则表达式。")],-1),I=e('<h4 id="_1-3-模块化" tabindex="-1"><a class="header-anchor" href="#_1-3-模块化"><span>1.3 模块化</span></a></h4><blockquote><p>模块化就是把代码进行拆分，方便重复利用。<strong>类似 java 中的导包</strong>：要使用一个包，必须先导包。而 JS 中没有包的概念，换来的是 模块。</p></blockquote><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</p><ul><li><code>export</code>命令用于规定模块的对外接口。</li><li><code>import</code>命令用于导入其他模块提供的功能。 <ul><li>注意 import 还不算完，要用的话得在需要注入到对象中才能使用 <strong>components</strong></li></ul></li></ul><p><code>export</code>不仅可以导出对象，<strong>一切JS变量都可以导出</strong>。比如：基本类型变量、函数、数组、对象。</p><h4 id="_1-4-vue-2" tabindex="-1"><a class="header-anchor" href="#_1-4-vue-2"><span>1.4 <mark>Vue 2</mark></span></a></h4>',6),V={href:"https://blog.csdn.net/qq_42295733/article/details/104077906",target:"_blank",rel:"noopener noreferrer"},N={href:"https://gitee.com/codezzq/study-notes/raw/master/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E/03%E3%80%81%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.pdf",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,"在 MVVM 之前，开发人员从后端获取需要的数据模型，然后要通过DOM操作Model 渲染到 View 中。而后当用户操作视图，我们还需要通过 DOM 获取 View 中的数据，然后同步到Model 中。",-1),L=n("p",null,[s("而 MVVM 中的 VM 要做的事情就是把 DOM 操作完全封装起来，"),n("strong",null,"开发人员不用再关心Model 和 View 之间是如何互相影响的")],-1),D=n("blockquote",null,[n("p",null,"虚拟DOM：Vue.js 使用虚拟DOM（Virtual DOM）来优化性能。在数据发生变化时，Vue.js 会生成一个虚拟DOM树，然后通过比较新旧虚拟DOM树的差异，最小化实际DOM操作的次数，从而提高性能和响应速度。")],-1),J=e(`<h5 id="_1-4-1-新建项目" tabindex="-1"><a class="header-anchor" href="#_1-4-1-新建项目"><span><strong>1.4.1 新建项目：</strong></span></a></h5><ul><li><p>当前工程要用 npm <code>npm init -y</code> 初始化项目，出来一个 package.json</p></li><li><p>终端 <code>npm install vue@2</code>（<mark>相当于 Maven 下载依赖包</mark>）加上@2，<strong>新版本没有vue.js文件</strong></p><ul><li><strong>这里是根据package.json下载后端是pom.xml</strong></li><li>下载完的依赖会在 node_modules 包下面，且这个包下有 vue 包</li></ul></li><li><p>html 页面 script 引入 <code>./node_modules/vue/dist/</code></p></li><li><p><code>npm run dev</code></p></li></ul><p>尚上优选笔记：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#全局安装命令行工具    实测：不执行这行下面的 vue 标识都识别不了  vue : 无法将“vue”项识别为 cmdlet、函数、脚本文件或可运行程序的名称</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--location</span><span class="token operator">=</span>global @vue/cli
<span class="token comment">#创建一个项目</span>
vue create vue-test <span class="token comment">#选择vue2</span>
<span class="token comment">#进入到项目目录</span>
<span class="token builtin class-name">cd</span> vue-test
<span class="token comment">#启动程序</span>
<span class="token function">npm</span> run serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果启动不起来 digital envelope routines::unsupported 可能是Node版本不一样，可以把 node_modules 目录删掉，重新 <code>npm install</code> [不行，我换16版本才行]</p><h5 id="_1-4-2-常用的属性" tabindex="-1"><a class="header-anchor" href="#_1-4-2-常用的属性"><span><strong>1.4.2 常用的属性:</strong></span></a></h5>`,6),F=n("li",null,[n("p",null,"v-if")],-1),U=n("li",null,[n("p",null,"v-else-if")],-1),G=n("li",null,[n("p",null,"v-else")],-1),H=n("li",null,[n("p",null,"v-for")],-1),Q=n("li",null,[n("p",null,[s("v-on 绑定事件 , 简写"),n("code",null,"@")])],-1),W=n("p",null,[n("strong",null,"v-model 数据双向绑定"),s("（模型、视图）")],-1),X={href:"https://cn.vuejs.org/guide/essentials/forms.html#number",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,".number",-1),K={href:"https://blog.csdn.net/m0_67402013/article/details/123303586",target:"_blank",rel:"noopener noreferrer"},Y=n("li",null,[n("p",null,[s("v-bind 给组件绑定参数,简写 "),n("code",null,":")]),n("ul",null,[n("li",null,'数据库里数据是 int 这里就可以冒号绑定搞成数字 :active-value="1" :inactive-value="0"')])],-1),Z=n("li",null,[n("p",null,[n("strong",null,"v-html")])],-1),nn=e(`<blockquote><p>一些惊艳的示例：</p></blockquote><p><strong>v-on、v-model...</strong></p><ol><li>事件修饰符（阻止冒泡，不然里面div点一下弹两个）</li><li>按键修饰符（这个很有意思！可以监听键盘！）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;ie=edge&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
                
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>事件中直接写js片段<span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">&quot;num++&quot;</span><span class="token operator">&gt;</span>点赞<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>事件指定一个回调函数，必须是Vue实例中定义的函数<span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;cancle&quot;</span><span class="token operator">&gt;</span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>有<span class="token punctuation">{</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token punctuation">}</span>个赞<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>


        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事件修饰符 <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;border: 1px solid red;padding: 20px;&quot;</span> v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token operator">&gt;</span>
            大div
            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;border: 1px solid blue;padding: 20px;&quot;</span> @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token operator">&gt;</span>
                小div <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;http://www.baidu.com&quot;</span> @click<span class="token punctuation">.</span>prevent<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token operator">&gt;</span>去百度<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>



        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 按键修饰符： <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;num&quot;</span> v<span class="token operator">-</span>on<span class="token operator">:</span>keyup<span class="token punctuation">.</span>up<span class="token operator">=</span><span class="token string">&quot;num+=2&quot;</span> @keyup<span class="token punctuation">.</span>down<span class="token operator">=</span><span class="token string">&quot;num-=2&quot;</span> @click<span class="token punctuation">.</span>ctrl<span class="token operator">=</span><span class="token string">&quot;num=10&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>

        提示：

    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;../node_modules/vue/dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token function">cancle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;点击了&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vue的函数调用加不加()都可以的（js里确实不行，不过vue里可以）</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>@click<span class="token operator">=</span><span class="token string">&quot;addCategory()&quot;</span>        
<span class="token operator">--</span><span class="token operator">-</span> vs <span class="token operator">--</span><span class="token operator">-</span>  在 Vue 中两者都可以
@click<span class="token operator">=</span><span class="token string">&quot;addCategory&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 <code>props</code> 属性传递参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>my_component_li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;item in items&quot;</span> v<span class="token operator">-</span>bind<span class="token operator">:</span>item<span class="token operator">=</span><span class="token string">&quot;item&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>my_component_li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>
        <span class="token string">&#39;my_component_li&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//通过循环的遍历item，绑定属性，此属性‘item’作为媒介，传递给模板</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;li&gt;{{item}}&lt;/li&gt;&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//viewModel 实现与Model双向绑定，动态更新视图</span>
    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;李泽玉考西电&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;西电必上岸&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;西电我来了&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>v-for=&quot;item in items&quot;：遍历 Vue 实例中定义的名为 items 的数组，并创建同等数量的组件</li><li>v-bind:item=&quot;item&quot;：将遍历的 item 项绑定到组件中 props 定义的名为 item 属性上；= 号左边的 item 为 props 定义的属性名，右边的为 item in items 中遍历的 item 项的值</li></ul><p><strong>v-html</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 会变成 <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>span v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">&quot;msg&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;../node_modules/vue/dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>v-if VS v-show</p><p>v-if 是直接 F12 中看不到代码了，v-show 是 display 属性为 false</p></blockquote><p><mark><strong>计算属性 &amp; 监听器</strong></mark></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 某些结果是基于之前数据实时计算出来的，我们可以利用计算属性。来完成 <span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>西游记； 价格：<span class="token punctuation">{</span><span class="token punctuation">{</span>xyjPrice<span class="token punctuation">}</span><span class="token punctuation">}</span>，数量：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;xyjNum&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>水浒传； 价格：<span class="token punctuation">{</span><span class="token punctuation">{</span>shzPrice<span class="token punctuation">}</span><span class="token punctuation">}</span>，数量：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;shzNum&quot;</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>总价：<span class="token punctuation">{</span><span class="token punctuation">{</span>totalPrice<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
            <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;../node_modules/vue/dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token comment">//watch可以让我们监控一个值的变化。从而做出相应的反应。</span>
        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">xyjPrice</span><span class="token operator">:</span> <span class="token number">99.98</span><span class="token punctuation">,</span>
                <span class="token literal-property property">shzPrice</span><span class="token operator">:</span> <span class="token number">98.00</span><span class="token punctuation">,</span>
                <span class="token literal-property property">xyjNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token literal-property property">shzNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xyjPrice<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>xyjNum <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shzPrice<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>shzNum
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">xyjNum</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>newVal<span class="token operator">&gt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&quot;库存超出限制&quot;</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>xyjNum <span class="token operator">=</span> <span class="token number">3</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="注意-组件的-data-必须是一个函数-不再是一个对象。-data-return" tabindex="-1"><a class="header-anchor" href="#注意-组件的-data-必须是一个函数-不再是一个对象。-data-return"><span>注意：<strong>组件的 data 必须是一个函数，不再是一个对象。</strong> data + return</span></a></h6><p>可全局 / 局部</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">&quot;count++&quot;</span><span class="token operator">&gt;</span>我被点击了 <span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span> 次<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

        <span class="token operator">&lt;</span>counter<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>counter<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>counter<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>counter<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>counter<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>counter<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>counter<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>counter<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>counter<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>counter<span class="token operator">&gt;</span>

        <span class="token operator">&lt;</span>button<span class="token operator">-</span>counter<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">-</span>counter<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;../node_modules/vue/dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token comment">//1、全局声明注册一个组件</span>
        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;button v-on:click=&quot;count++&quot;&gt;我被点击了 {{count}} 次&lt;/button&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2、局部声明一个组件</span>
        <span class="token keyword">const</span> buttonCounter <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;button v-on:click=&quot;count++&quot;&gt;我被点击了 {{count}} 次~~~&lt;/button&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;button-counter&#39;</span><span class="token operator">:</span> buttonCounter
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简化开发，<strong>Vue 为生命周期中的每个状态都设置了钩子函数（监听函数）</strong></p><h5 id="_1-4-3-模块化开发" tabindex="-1"><a class="header-anchor" href="#_1-4-3-模块化开发"><span>1.4.3 模块化开发</span></a></h5><blockquote><p>使用 vue-cli 快速搭建脚手架工程</p><p>vue-cli是什么：vue-cli是vue的命令行工具，只要按照官网敲几行命令就可以新建一个基本的vue项目框架。方便快捷。</p><p>vue-cli和webpack是什么关系：vue-cli 里面包含了webpack， 并且配置好了基本的webpack打包规则</p></blockquote><ol><li>npm install webpack -g（全局安装 webpack ）</li><li>npm install -g @vue/cli-init （全局安装 vue 脚手架 ）</li><li>初始化 vue 项目（vue init webpack appname：vue 脚手架使用 webpack 模板初始化一个appname 项目）</li><li>启动 vue 项目（项目的 package.json 中有 scripts，代表我们能运行的命令 npm start = npm run dev：启动项目 npm run build：将项目打包）</li></ol><p>讲解一下目录🤺：</p><ol><li><strong>build</strong> 和 webpack 有关的代码</li><li><strong>config</strong> 配置信息，如项目端口配置</li><li><strong>node_modules</strong> 项目所有的依赖，相当于 Maven 下载依赖包</li><li><strong>src</strong> 我们编写代码的地方</li><li><strong>.babellrc</strong> 将新特性代码自动转换成浏览器能兼容的老代码</li><li><strong>package.json</strong> 相当于后端的 pom.xml</li><li><strong>package-lock.json</strong> 是上者的详细信息，包括去哪里下</li></ol><p>src/main.js 主程序</p><h5 id="_1-4-3-element-ui" tabindex="-1"><a class="header-anchor" href="#_1-4-3-element-ui"><span>1.4.3 Element-UI</span></a></h5><p>Element UI 基于 Vue 2.0 的桌面端组件库（具体看官网）</p><p>npm install element-ui</p><p>装完后可在 <strong>package.json</strong> 看到信息</p><p>在 main.js 导入</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;element-ui/lib/theme-chalk/index.css&#39;</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看文档写就行了，文档明明白白，ui框架学习没啥成本，就是cv</p><p>踩坑：npm 安装后，用 &lt;el-image&gt; 的时候报错</p><p><code>Unknown custom element: \\&lt;el-image&gt; - did you register the component correctly?</code></p><p>解决：文档 -&gt; 快速上手 自己copy完整组件列表import {}里面的和use，到 src\\element-ui\\index.js 再把一些没有的组件删掉</p><h5 id="_1-4-4-解决闪烁问题" tabindex="-1"><a class="header-anchor" href="#_1-4-4-解决闪烁问题"><span>1.4.4 解决闪烁问题</span></a></h5><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>    <span class="token comment">&lt;!--v-cloak 解决闪烁问题--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
        <span class="token selector">[v-cloak]</span> <span class="token punctuation">{</span>
            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1-4-5-生命周期方法" tabindex="-1"><a class="header-anchor" href="#_1-4-5-生命周期方法"><span>1.4.5 <mark>生命周期方法</mark></span></a></h5><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>  			<span class="token string">&quot;components: {},&quot;</span><span class="token punctuation">,</span>

            <span class="token string">&quot;data() {&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;//这里存放数据&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;return {&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;};&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>

            <span class="token string">&quot;//监听属性 类似于data概念&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;computed: {},&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;//监控data中的数据变化&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;watch: {},&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;//方法集合&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;methods: {&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;//生命周期 - 创建完成（可以访问当前this实例）&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;created() {&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;//生命周期 - 挂载完成（可以访问DOM元素）&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;mounted() {&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;beforeCreate() {}, //生命周期 - 创建之前&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;beforeMount() {}, //生命周期 - 挂载之前&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;beforeUpdate() {}, //生命周期 - 更新之前&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;updated() {}, //生命周期 - 更新之后&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;beforeDestroy() {}, //生命周期 - 销毁之前&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;destroyed() {}, //生命周期 - 销毁完成&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-5-高级部分" tabindex="-1"><a class="header-anchor" href="#_1-5-高级部分"><span>1.5 高级部分</span></a></h4><p><mark>父子组件传递数据</mark>：仔细看下面的例子便于理解！</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 父子组件传递数据
 * 1)、子组件给父组件传递数据，事件机制；
 *    子组件给父组件发送一个事件，携带上数据。
 * // this.$emit(&quot;事件名&quot;,携带的数据...)
 */</span>


<span class="token comment">//向父组件发送事件；参数含义（事件名推荐-的写法，任意多的数据都会带出去）</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;tree-node-click&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> node<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//父组件绑定这个事件（@tree-node-click），触发一个自己的方法treenodeclick</span>
<span class="token operator">&lt;</span>category @tree<span class="token operator">-</span>node<span class="token operator">-</span>click<span class="token operator">=</span><span class="token string">&quot;treenodeclick&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>category<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-后端" tabindex="-1"><a class="header-anchor" href="#_2-后端"><span>2. 后端</span></a></h3>`,43),sn={href:"https://gitee.com/renrenio",target:"_blank",rel:"noopener noreferrer"},an=n("blockquote",null,[n("p",null,"在测试类测试 product 模块的功能，结果一直报错，怎么解决都搞不好"),n("p",null,"结果认真看有个 seata 的报错，我就去 pom 把 seata 依赖注销就好了！！！")],-1),tn={href:"https://blog.csdn.net/qq_36050981/article/details/119565383",target:"_blank",rel:"noopener noreferrer"},en=n("p",null,"现在需要知道！主要是 spring boot 2.2之前使用的是 Junit4 之后是 Junit5，还需知道他们两个有什么区别看网站！",-1),pn={href:"https://blog.csdn.net/qq_21108099/article/details/111496005",target:"_blank",rel:"noopener noreferrer"},on=n("p",null,"SpringBoot 测试类 需要从容器中获取实例是需要加上该注解，否则空指针，管你是啥IDE。貌似是Junit4用的注解",-1),ln=e(`<blockquote><p>@Value 取 user.name 取的是系统变量</p><p>所以最好加前缀 coupon.user.name</p></blockquote><h3 id="_3-技术选型" tabindex="-1"><a class="header-anchor" href="#_3-技术选型"><span>3. 技术选型</span></a></h3><p>结合 SpringCloud Alibaba 我们最终的技术搭配方案：</p><ul><li><strong>SpringCloud Alibaba - Nacos：注册中心（服务发现/注册）</strong></li><li><strong>SpringCloud Alibaba - Nacos：配置中心（动态配置管理）</strong></li><li><strong>SpringCloud - Ribbon：负载均衡</strong></li><li><strong>SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务）</strong></li><li><strong>SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断）</strong></li><li><strong>SpringCloud - Gateway：API 网关（webflux 编程模式）</strong></li><li><strong>SpringCloud - Sleuth：调用链监控</strong></li><li><strong>SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方案</strong></li></ul><h2 id="四、项目开始" tabindex="-1"><a class="header-anchor" href="#四、项目开始"><span>四、项目开始</span></a></h2><h3 id="_1-注意小点" tabindex="-1"><a class="header-anchor" href="#_1-注意小点"><span>1. 注意小点</span></a></h3><blockquote><p>使用 MyBatis-Plus 时候，<mark>ServiceImpl 可以不用 注入 Dao，可以直接使用 baseMapper</mark></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryDao</span><span class="token punctuation">,</span> <span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">CategoryService</span>
    
    <span class="token doc-comment comment">/**
     * 以前正常写法
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CategoryDao</span> categoryDao<span class="token punctuation">;</span>

		<span class="token doc-comment comment">/**
         * 现在用了 MyBatis-Plus 后
         * baseMapper 代替了 categoryDao(不用注入)
         */</span>
        baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//具体看 extends ServiceImpl 这个类的源码，public class ServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt; implements IService&lt;T&gt; </span>
<span class="token comment">//因为继承泛型是 categoryDao 到这个类投射成了 protected M baseMapper;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@Mapper 接口时候方法签名中的形参的 @Param 可以用 MybatisX 插件生成</p><figure><img src="https://images.zzq8.cn/img/202210191401611.png" alt="image-20221019140152140" tabindex="0" loading="lazy"><figcaption>image-20221019140152140</figcaption></figure></blockquote><blockquote><p>感觉很洋气 ！善用 lambda 表达式 ！多看看学学，那个博客留言三级应该也可以简化成这样</p><p>实现树形结构的 三级分类，先给 entity 加一个</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@TableField(exist=false)
private List&lt;CategoryEntity&gt; children;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">listWithTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查出所有分类</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> entities <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//从一级分类开始给每个递归给一个子list</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">AllLevelMenus</span> <span class="token operator">=</span> entities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entity <span class="token operator">-&gt;</span> entity<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    entity<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getChildrens</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//因为 map 的Lambda表达式必须是 Function 接口的一个实例，也就是需要参数需要返回值，上面这行没有返回值</span>
                    <span class="token keyword">return</span> entity<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu1<span class="token punctuation">,</span> menu2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> menu1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> menu2<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">AllLevelMenus</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

######################################################


    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">getChildrens</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> entity<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> childrenList <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>menu <span class="token operator">-&gt;</span> menu<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> entity<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    menu<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getChildrens</span><span class="token punctuation">(</span>menu<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> menu<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu1<span class="token punctuation">,</span> menu2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> menu1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> menu1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>menu2<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> menu2<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> childrenList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li><p>vscode 注释报错，关闭ESlint的语法检查</p><ul><li><p>build -&gt; webpack.base.conf.js 里面的 createLintingRule 注销掉</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createLintingRule</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// test: /\\.(js|vue)$/,</span>
  <span class="token comment">// loader: &#39;eslint-loader&#39;,</span>
  <span class="token comment">// enforce: &#39;pre&#39;,</span>
  <span class="token comment">// include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;)],</span>
  <span class="token comment">// options: {</span>
  <span class="token comment">//   formatter: require(&#39;eslint-friendly-formatter&#39;),</span>
  <span class="token comment">//   emitWarning: !config.dev.showEslintErrorsInOverlay</span>
  <span class="token comment">// }</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>console.log 不要再 String 拼接，直接多个变量</p><ul><li><p>console.log(&#39;data&#39;+data); // data:[object Object]</p></li><li><p>console.log(&#39;1&#39;, &#39;2&#39;, data); // 1 data具体数据</p></li></ul></li><li><p>getMenus 刷新的原因：如果多个人操作了这个页面呢，不再请求一次页面数据怎么是最新的？</p><p>​ this.getMenus();</p><p>​ this.expandedKey = [node.parent.data.catId];</p></li></ol></blockquote><blockquote><p>yaml 配置小点</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">#可以加上下文路径  http://localhost:8080/renren-fast</span>
server.servlet.context<span class="token punctuation">-</span>path<span class="token punctuation">:</span>/renren<span class="token punctuation">-</span>fast
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>特殊注释说明，<mark>学到了！！！</mark></strong></p></blockquote><p><code>//TODO: + 说明：</code> 在 idea 中这个注释会变成金色，且会在下面工具栏显示！类似快速备忘录功能 如果代码中有该标识，说明在标识处有功能代码待编写，待实现的功能在说明中会简略说明。搞完了就删掉TODO</p><figure><img src="https://images.zzq8.cn/img/202208141617036.png" alt="image-20220814161700939" tabindex="0" loading="lazy"><figcaption>image-20220814161700939</figcaption></figure><p>// XXX 勉强可以工作，但是性能差等原因.</p><p>// FIXME 代码是错误的，不能工作，需要修复.</p><blockquote><p>因为数据库用的 <strong>自增</strong> 主键，所以要配置一下，不然</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableId</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> catId<span class="token punctuation">;</span>
其中 
<span class="token class-name">IdType</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>同时配置 <strong>注解</strong> 与 <strong>配置文件</strong> 注解会生效，配置文件失效</p></blockquote><ol><li><p>测试点：</p><ul><li><p>在bootstrap.yml中配置：<code>id-type: auto</code>，</p><p>注解为<code>@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</code></p><p>经过测试：注解生效。</p></li><li><p>将配置移动到application.yml中测试结果与上面相同。</p></li></ul></li><li><p>结论：<mark>注解优先配置生效</mark>。</p></li></ol><p><strong>MyBatis-Plus 逻辑删除有两种方法</strong></p><blockquote><p>物理删除 ：从数据库中直接移除</p><p>逻辑删除 ：再数据库中没有被移除，而是通过一个变量来让他失效，类似于回收站！</p></blockquote><ul><li>yaml 配置标志位、删除与未删除是 0/1</li><li>用 @TableLogic 注解配置</li></ul><blockquote><p>yaml 配置日志，看 SQL 语句</p><p>看到 renren-fast 配置的是 logback-spring.xml</p><p>XD: 用到 mybatis-plus 但是没有输出日志想着怎么配又回来回顾</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.zzq.gulimall</span><span class="token punctuation">:</span> debug  <span class="token comment">#就代表这个包下面所有的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),cn={id:"_2-跨源资源共享-cors",tabindex:"-1"},rn={class:"header-anchor",href:"#_2-跨源资源共享-cors"},un={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},dn=n("p",null,[n("strong",null,[s("跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是"),n("mark",null,"浏览器对javascript施加的安全限制"),s("。")])],-1),kn=n("p",null,[n("strong",null,[s("同源策略：是指"),n("mark",null,"协议，域名，端口"),s("都要相同，其中有一个不同都会产生跨域；")])],-1),vn=n("figure",null,[n("img",{src:"https://images.zzq8.cn/img/202208131758590.png",alt:"image-20220813175848410",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220813175848410")],-1),mn={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer"},bn=e(`<p>不是简单请求的都需要发送一个预检请求 比如看标题链接，这里发的是 Application/json 浏览器响应</p><p><code>Request Method: OPTIONS</code></p><figure><img src="https://images.zzq8.cn/img/202208131809687.png" alt="image-20220813180934578" tabindex="0" loading="lazy"><figcaption>image-20220813180934578</figcaption></figure><p><strong>所以服务器不允许，就一个OPTIONS请求过去后。真实请求就没有发了！</strong></p><h4 id="解决跨域" tabindex="-1"><a class="header-anchor" href="#解决跨域"><span>解决跨域</span></a></h4><p>（一）使用nginx部署为同一域 感觉：套了一层又一层</p><figure><img src="https://images.zzq8.cn/img/202208131824168.png" alt="image-20220813182436081" tabindex="0" loading="lazy"><figcaption>image-20220813182436081</figcaption></figure><p>（二）配置当次请求允许跨域</p><figure><img src="https://images.zzq8.cn/img/202208131854872.png" alt="image-20220813185445762" tabindex="0" loading="lazy"><figcaption>image-20220813185445762</figcaption></figure><p>一个个 Model 配太繁琐，因为所有 Model 的方法都会经过 Gateway 所以网关搞一个配置类</p><p>主要就是搞一个 CorsWebFilter 的 Bean</p><p>一点一点的new，需要什么配置什么！！！看源码参数缺什么。学习一下雷神的思想，别的老师都是直接去网上复制</p><p>注意：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token comment">//配置跨域</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置允许携带cookies，不然跨域请求会丢失携带的cookies</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://images.zzq8.cn/img/202208131912755.png" alt="image-20220813191254660" tabindex="0" loading="lazy"><figcaption>image-20220813191254660</figcaption></figure><p>为了解决浏览器跨域问题，W3C 提出了跨源资源共享方案，即 <code>CORS</code>(Cross-Origin Resource Sharing)。它允许浏览器向跨源服务器，发出XMLHttpRequest请求。spring mvc 4.2版本增加了对cors的支持，通过spring boot可以非常简单的实现跨域访问。</p>`,16),hn={href:"https://juejin.cn/post/6947966470798180359",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://juejin.cn/post/6941260113197924389",target:"_blank",rel:"noopener noreferrer"},yn=n("p",null,"==SSYX Project 补充：",-1),qn=n("p",null,"1）在后端接口controller添加@CorsConfig跨域注解最简单解决跨域 （跨域有多种解决方案，现在暂时这么做）",-1),_n=n("p",null,"2）可能后期还是以网关层面解决是最好==",-1),xn={id:"补充-我现在说的两种方式-1-第一种-corsconfig-2-注解方式-nginx-算一种-还有ruoyi前端vue解决",tabindex:"-1"},jn={class:"header-anchor",href:"#补充-我现在说的两种方式-1-第一种-corsconfig-2-注解方式-nginx-算一种-还有ruoyi前端vue解决"},wn={href:"https://blog.csdn.net/Tomwildboar/article/details/82422761",target:"_blank",rel:"noopener noreferrer"},zn=n("p",null,"CORS与JSONP的使用目的相同，但是比JSONP更强大。",-1),Sn=n("p",null,[s("==JSONP只支持"),n("code",null,"GET"),s("请求，CORS支持所有类型的HTTP请求。==JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。")],-1),En={id:"_3-axios和vue-axios的关系及使用区别",tabindex:"-1"},Cn={class:"header-anchor",href:"#_3-axios和vue-axios的关系及使用区别"},Mn={href:"https://www.panziye.com/java/web/4033.html",target:"_blank",rel:"noopener noreferrer"},An=n("mark",null,"axios和vue-axios的关系及使用区别",-1),On=e(`<p>所以说 axios 使用方式就是用this.$http：<strong>Vue.prototype.$http = axios</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>## 第一步：安装
npm install <span class="token operator">--</span>save axios
## 第二步：在入口文件main<span class="token punctuation">.</span>js中配置
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> axios
## 第三步：使用案例
<span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user?id=666&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-三级菜单-拖拽前端业务实现" tabindex="-1"><a class="header-anchor" href="#_4-三级菜单-拖拽前端业务实现"><span>4. 三级菜单：拖拽前端业务实现</span></a></h3><ul><li>能否拖拽的实现思路是自己简单一个 if 判断没有用雷神的</li><li>拖拽的 <strong>handleDrop</strong> 方法实现那三点cv的没有去看 (抽空可以再看看)</li></ul><p>ref 给组件唯一标识（起个名字） this.$refs 拿到</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ref<span class="token operator">=</span><span class="token string">&quot;menuTree&quot;</span>
<span class="token comment">//下面这样就可以唯一定位到上面属性指定的组件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台脚手架平台一般是后端顺手写出来的</p><h3 id="_5-踩坑" tabindex="-1"><a class="header-anchor" href="#_5-踩坑"><span>5. 踩坑</span></a></h3><h4 id="逻辑删除" tabindex="-1"><a class="header-anchor" href="#逻辑删除"><span>逻辑删除</span></a></h4><p>/product/brand/update 传的data：<code>{brandId,showStatus}</code></p><p>SQL报错是因为mybatis-plus不支持更新逻辑删除的字段</p><p>注意wrapper要用数据库里的字段_，而不是entity里面的小驼峰</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>wrapper.eq(&quot;brand_id&quot;,brand.getBrandId())
        .set(&quot;show_status&quot;,brand.getShowStatus());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>MyBatisPlus中开启了逻辑删除则更新逻辑字段不再管用，总是自动带上show_status=1</mark></p><p>Preparing: UPDATE pms_brand SET show_status=? WHERE <mark>show_status=1</mark> AND (brand_id = ?)</p><p>加了配置文件全局的逻辑删除，用updateWrapper也是不行的，还是会在where后面拼接</p><p>解决：不用全局的逻辑删除，category 那个实体类用一下注解就行！</p><h4 id="前端校验" tabindex="-1"><a class="header-anchor" href="#前端校验"><span>前端校验</span></a></h4><blockquote><p>排序必须是一个大于等于0的整数</p><p><code>v-model.number=&quot;dataForm.sort&quot;</code> 和 <code>if (!Number.isInteger(value) || value&lt;0)</code></p></blockquote><h3 id="_6-oss-object-storage-service" tabindex="-1"><a class="header-anchor" href="#_6-oss-object-storage-service"><span>6. OSS（Object Storage Service）</span></a></h3><p>服务端SDK在上传方面主要提供两种功能：</p><ul><li>一种是直接上传文件到云端。</li><li>最好的是生成客户端上传所需要的上传凭证</li></ul><p>项目采取：第二种服务端签名后直传。保证了一定的安全性</p><p>上传就不用经过自己的服务器了（不用占带宽），上传在客户端完成</p><p>总结：服务器拿 Token 前端页面带上到 OSS</p><figure><img src="https://images.zzq8.cn/img/202208182222062.png" alt="image-20220818222235756" tabindex="0" loading="lazy"><figcaption>image-20220818222235756</figcaption></figure><p>我这里用的是七牛云所以没用到下面，自己捣鼓了很久。难的就是前端的 vue 文件是直接 copy 的，大部分东西不知道作用！</p><p>解决aliyun-oss-spring-boot-starter导入报错的问题</p><p>https://blog.csdn.net/gao_jun1/article/details/111414976</p><p>注意区分：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-jsr-303" tabindex="-1"><a class="header-anchor" href="#_7-jsr-303"><span><mark>7. JSR 303</mark></span></a></h3><blockquote><p>前端校验主要是给一般用户看的，提高用户体验。因为可用 PostMan 绕过直接给后端发请求！</p></blockquote><p>&quot;status&quot;: 400,</p><p>&quot;error&quot;: &quot;Bad Request&quot;</p><p>看到上面这个就证明校验不通过！</p><p>注意：spring-boot-starter-web 里面有 validation</p><h4 id="使用过程" tabindex="-1"><a class="header-anchor" href="#使用过程"><span>使用过程</span></a></h4><ol><li><p><strong>以前总觉得 Controller 类还要在类头加注解，记忆混乱了。实测不用！</strong> 后话：不懂</p><ol><li>Entity 字段加 @NotNull etc.</li><li>Controller 方法形参加注解 @Valid</li></ol></li><li><p>能使用，但报错不符合业务规定，<strong>优化</strong>：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>实体类：<span class="token operator">+</span>message
<span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;品牌名必须提交&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//报错json变成 -&gt; &quot;defaultMessage&quot;: &quot;品牌名必须提交&quot;,</span>
<span class="token class-name">Contrller</span>：<span class="token operator">+</span><span class="token class-name">BindingResult</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BrandEntity</span> brand<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Pattern 可以用正则表达式校验</p><p>注意：<strong>java 正则确实不需要 / / 注意区分 js (var re = /ab+c/😉</strong></p><ol start="3"><li><mark>统一异常处理</mark><ul><li>类+ <strong>@RestControllerAdvice(&quot;com.zzq.gulimall.product.controller&quot;)</strong></li><li>方法+ <strong>@ExceptionHandler(需要处理的异常类.class)</strong></li></ul></li></ol><blockquote><p>上面优化，每个方法都要到业务里处理异常太繁琐了，抽取解耦封装</p></blockquote><p><strong>不用 BindingResult，建一个<mark>异常类</mark>集中处理所有异常</strong></p><p>这里雷神NB，参数先 Exception e，获取它的异常错误类 <code>e.getClass()</code> 替换大的 Exception异常，细化后就能又获取BindingResult对象。</p><p>Exception 是没有这个方法的！</p><figure><img src="https://images.zzq8.cn/img/202208201455426.png" alt="image-20220820145558332" tabindex="0" loading="lazy"><figcaption>image-20220820145558332</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//处理对应异常</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handlerValidException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e <span class="token comment">/*感知异常*/</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后 如果不能精确匹配异常，就来到最大的类 Exception ，再写一个方法来囊括</p><p>错误码Enum</p><p>return 的 R 错误码可以看尚硅谷的文档，一般可以是5位，业务场景2+错误码3。用个枚举类囊括</p><h4 id="分组校验" tabindex="-1"><a class="header-anchor" href="#分组校验"><span>分组校验</span></a></h4><blockquote><p>场景：新增 / 修改时我们想要校验的字段和规则可能是不一样的！比如说，ID 字段 新增时不需要携带。而修改时必须要携带</p></blockquote><p><mark>没有标注分组的校验注解就不会被校验</mark></p><p>看公司 反正你不用你也要写if else 我觉得还是用的好 不带直接弹回还省的浪费数据库资源</p><p>上手：比较麻烦，新建AddGroup、UpdateGroup这些空接口（只充当一个标识，问就是约定，规范），然后分组的时候填这些接口，<strong>controller方法指定用哪个分组</strong> public R save(@Validated(AddGroup.class)</p><p>新建分组接口 -&gt; 注解填分组 -&gt; controller改成**@Validated({AddGroup.class})**</p><blockquote><p><mark>问题：</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//不知道为什么这两样都行,但明明属性是数组</span>
<span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>

<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Validated</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>搜 Annotation 找出答案：</mark></p><h5 id="数组类型的属性" tabindex="-1"><a class="header-anchor" href="#数组类型的属性"><span>数组类型的属性</span></a></h5><p>注解类添加数组类型的属性：int[] id() default {1,2,3}; 使用类使用数组类型的属性：@Annotation(id={2,3,4}) <strong>如果数组属性只有一个值，这时候属性值部分可以省略大括号</strong>，如：@Annotation(id=2)，表示数组属性只有一个值，值为2**(如同Butterknife中onClick注解)**</p><p>链接：https://www.jianshu.com/p/2867f0558687</p></blockquote><p>正则处理不了校验（比如 Integer ），我们可以自定义校验注解</p><p>需要导入，<strong>直接修复的时候有选择导入依赖的,不用手动</strong></p><figure><img src="https://images.zzq8.cn/img/202208211050573.png" alt="image-20220821105014376" tabindex="0" loading="lazy"><figcaption>image-20220821105014376</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;jakarta.validation&lt;/groupId&gt;
    &lt;artifactId&gt;jakarta.validation-api&lt;/artifactId&gt;
    &lt;version&gt;2.0.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义校验-仿照别的校验写" tabindex="-1"><a class="header-anchor" href="#自定义校验-仿照别的校验写"><span>自定义校验（仿照别的校验写）</span></a></h4><p>可以多看下代码，学学雷神的思想境界！</p><blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//规定，建议看代码   以及P69 5：00</span>
<span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;{com.zzq.common.valid.ListValue.message}&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的Message信息是在这个文件：<strong>ValidationMessages_zh_CN.properties</strong></p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 指定用什么校验，这里需要编写一个自己的自定义校验器。参照别的注解自己写一个
@Constraint(
    validatedBy = {}
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-spu-与-sku" tabindex="-1"><a class="header-anchor" href="#_8-spu-与-sku"><span>8. SPU 与 SKU</span></a></h3><blockquote><p>SPU（Standard Product Unit）：就是iphone xs 的一些标准信息（像素，尺寸等）-- &gt; <strong>基本属性</strong> / 规格与包装</p><p>SKU（stock keeping unit）：就是 xs 细化分不同颜色不同版本（多大内存）可能价格也不同（这是真正买的版本）-- &gt; <strong>销售属性</strong></p><p>从广义上讲，类目&gt;SPU&gt;SKU</p></blockquote><p><strong>分类（Category） -&gt; 分组（AttrGroup） -&gt; 属性（Attr）</strong></p><img src="https://images.zzq8.cn/img/202208221109447.png" alt="image-20220822110956653" style="zoom:67%;"><img src="https://images.zzq8.cn/img/202208221112300.png" alt="image-20220822111210105" style="zoom:67%;"><img src="https://images.zzq8.cn/img/202208221114306.png" alt="image-20220822111429154" style="zoom:67%;"><p>勾中快速展示：就是把它展示到商品介绍上</p><h3 id="_9-其他重要的点" tabindex="-1"><a class="header-anchor" href="#_9-其他重要的点"><span>9. 其他重要的点</span></a></h3><h4 id="关于-mybatis-plus" tabindex="-1"><a class="header-anchor" href="#关于-mybatis-plus"><span>关于 MyBatis-Plus</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Query   PageUtils   都是gulimall-common的自定义类封装（来源于 renrenfast 封装）
去公司也是直接封装好的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jackson-介绍" tabindex="-1"><a class="header-anchor" href="#jackson-介绍"><span><mark>Jackson</mark> 介绍</span></a></h4><p>Jackson [/ˈdʒæksən/] 是当前用的比较广泛的，用来序列化和反序列化json的Java开源框架。Jackson社区相对比较活跃，更新速度也比较快， 从Github中的统计来看，Jackson是最流行的json解析器之一，<strong>Spring MVC的默认json解析器便是Jackson。</strong></p><p>场景：三级菜单最后没有 chidren 就不用显示，不然前端列表显示一片空白</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span><span class="token constant">NON_EMPTY</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行 Json 转换会按照这个规则</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>mm<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="element-ui-cascader-级联选择器" tabindex="-1"><a class="header-anchor" href="#element-ui-cascader-级联选择器"><span>Element UI Cascader 级联选择器</span></a></h4><img src="https://images.zzq8.cn/img/202208232052487.png" alt="image-20220823205206340" style="zoom:67%;"><h4 id="issue" tabindex="-1"><a class="header-anchor" href="#issue"><span>Issue</span></a></h4><p>假设x是一个已知仅包含字符串的列表（List）。以下代码可用于将列表转储到新分配的String数组中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测了一下输出都是 abc</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="other" tabindex="-1"><a class="header-anchor" href="#other"><span>Other</span></a></h4><p>合理的冗余字段是为了快速查询，减少IO次数</p><p>save功能，前端没有传这两个字段，想办法加这两个就不用再回到他们表再查了</p><p>记住还需保证冗余字段的数据一致，cascade 级联值得学习</p><figure><img src="https://images.zzq8.cn/img/202208241615461.png" alt="image-20220824161553329" tabindex="0" loading="lazy"><figcaption>image-20220824161553329</figcaption></figure><blockquote><p>场景：添加一些不属于表里的字段（extends + 额外字段） / 只需表里几个字段，最好还是单独新建一些 VO... 把每种不同对象按照功能进行了不同的划分</p></blockquote><h4 id="object-划分" tabindex="-1"><a class="header-anchor" href="#object-划分"><span>Object 划分</span></a></h4><p>PO：各种 Entity</p><p>TO：微服务之间互相调用传输数，封装和发送出去的对象就是 TO</p><ul><li>跨服务 OpenFeign 时，to包放common</li></ul><p>VO：View Object 视图对象</p><ul><li>接受页面传递来的数据，封装对象</li><li>将业务处理完成的对象，封装成页面要用的数据</li></ul><h4 id="常用的封装类" tabindex="-1"><a class="header-anchor" href="#常用的封装类"><span>常用的封装类</span></a></h4><blockquote><p><mark>要把 VO 的属性复制到 PO，一个个 set 很麻烦： BeanUtils</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        attrEntity.setAttrName(attr.getAttrName());</span>
       <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>spring 有一个工具类 StringUtils</p><p>判断字符串是不是为空...很方便</p></blockquote><blockquote><p>判断集合是不是空</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>if(!CollectionUtils.isEmpty(attrIds))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><blockquote><p>封装的 R 返回数据</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class R extends HashMap&lt;String, Object&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote></blockquote><blockquote><p>用map接参的，会挨锤的 map 开发一时爽，维护火葬场</p><p>@RequestParam Map&lt;String, Object&gt; params</p></blockquote><p>字段：属性类型[0-销售属性，1-基本属性，2-既是销售属性又是基本属性]</p><p>像这种字段，最好搞一个枚举常量。这样数据库更改规则了，我们只需要更改一下枚举类！</p><p>感觉和 接口类 = 实现类 的设计感觉一样，后面要换实现类了只用换实现类一个地方</p><p>Controller 与 Service 关系：Controller应该只需三句话 1（参数）、3（调用Service） 和 return</p><blockquote><p>1、Controller：处理请求，接收和效验数据</p><p>2、Service接收Controller传来的数据，进行业务处理</p><p>3、Controller接收Service处理完的数据，封装页面指定的vo</p></blockquote><h4 id="技巧" tabindex="-1"><a class="header-anchor" href="#技巧"><span>技巧</span></a></h4><p><mark>在线解析 Json 的网站，有可以把 Json 转成 Java 对象！！！</mark></p><h4 id="idea占用内存过大-服务过多" tabindex="-1"><a class="header-anchor" href="#idea占用内存过大-服务过多"><span>idea占用内存过大，服务过多</span></a></h4>`,113),Tn={href:"https://javaguide.cn/java/jvm/jvm-parameters-intro.html#_2-1-%E6%98%BE%E5%BC%8F%E6%8C%87%E5%AE%9A%E5%A0%86%E5%86%85%E5%AD%98%E2%80%93xms%E5%92%8C-xmx",target:"_blank",rel:"noopener noreferrer"},Bn=e('<p>给每一个微服务设置：<code>-Xmx100m</code> 注意：<strong>内存调大 JMeter 压测吞吐量也会上来</strong></p><figure><img src="https://images.zzq8.cn/img/202208281709300.png" alt="image-20220828170939115" tabindex="0" loading="lazy"><figcaption>image-20220828170939115</figcaption></figure><h4 id="为了方便重启一部分服务可以用-compound-包起来" tabindex="-1"><a class="header-anchor" href="#为了方便重启一部分服务可以用-compound-包起来"><span>为了方便重启一部分服务可以用，Compound 包起来</span></a></h4><figure><img src="https://images.zzq8.cn/img/202208281711096.png" alt="image-20220828171101974" tabindex="0" loading="lazy"><figcaption>image-20220828171101974</figcaption></figure><h4 id="集群负载均衡-取巧" tabindex="-1"><a class="header-anchor" href="#集群负载均衡-取巧"><span>集群负载均衡，取巧</span></a></h4><p>为了下一章节演示nacos的负载均衡，参照9001新建9002</p><p>这里<strong>取巧</strong>不想新建重复体力劳动，可以利用IDEA功能，直接拷贝<strong>虚拟端口映射</strong></p><figure><img src="https://images.zzq8.cn/img/202208281717252.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><figure><img src="https://images.zzq8.cn/img/202208281717694.png" alt="image-20220828171758542" tabindex="0" loading="lazy"><figcaption>image-20220828171758542</figcaption></figure><p>或 Environment variables: --server.port=9002</p><h5 id="后端加了事务-transactional-还没提交前的语句看不到数据库的变换" tabindex="-1"><a class="header-anchor" href="#后端加了事务-transactional-还没提交前的语句看不到数据库的变换"><span>后端加了事务 @Transactional 还没提交前的语句看不到数据库的变换</span></a></h5><p>为了测试方便，将当前会话的隔离级别降低。有了它就可以很方便的看数据库的变化了，可读到没有提交的数据。</p><p>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</p><p>Navicat要在加一行SELECT * FROM <code>pms_spu_info</code>; 在当前窗口（一个会话）搜索数据才能读到</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\nSELECT * FROM `pms_spu_info`;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="踩坑" tabindex="-1"><a class="header-anchor" href="#踩坑"><span>踩坑</span></a></h4><p>好使</p><p>stream() -&gt; map() -&gt; filter() -&gt; collect()</p><h4 id="采购" tabindex="-1"><a class="header-anchor" href="#采购"><span>采购</span></a></h4><img src="https://images.zzq8.cn/img/202208282303184.png" alt="image-20220828224528971" style="zoom:67%;"><h4 id="用好数据库连接池" tabindex="-1"><a class="header-anchor" href="#用好数据库连接池"><span>用好数据库连接池：</span></a></h4>',21),Pn={href:"https://blog.csdn.net/cobracanary/article/details/105257594",target:"_blank",rel:"noopener noreferrer"},In=e(`<p>idea报错信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@18e7d21c <span class="token punctuation">(</span>No operations allowed after connection closed.<span class="token punctuation">)</span>. Possibly consider using a shorter maxLifetime value.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么问题就很明了，你的连接在三分钟的时候就已经和数据库断开了连接，但是你默认连接的存活时间是五分钟，所以导致你的springboot项目开始能访问数据库，一会之后就不能访问数据库了</p><p>Data source rejected establishment of connection, message from server: &quot;Too many connections&quot;</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>MAX_LIFETIME = TimeUnit.MINUTES.toMillis(30L);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五、基础篇总结" tabindex="-1"><a class="header-anchor" href="#五、基础篇总结"><span>五、基础篇总结</span></a></h2><h5 id="从商品保存开始就对业务走马观花-都是cv没去自己写" tabindex="-1"><a class="header-anchor" href="#从商品保存开始就对业务走马观花-都是cv没去自己写"><span>从商品保存开始就对业务走马观花，都是CV没去自己写</span></a></h5><p>SpringBoot 2.0 基于 Spring 5 最大的变化就是引入了 React（响应式编程）-&gt; Web Flux（可以非常容易的创建出高性能、高并发的 Web 应用）</p><p>例如：Gateway 的跨域 Filter 网关，CorsWebFilter 它是属于 Webflux</p><h2 id="摘自评论" tabindex="-1"><a class="header-anchor" href="#摘自评论"><span>摘自评论</span></a></h2><p>耗时三个月断断续续敲完，高级篇功能打通，准备面试！ 文档地址：https://www.cnblogs.com/JuneQS/p/projectdemo.html 项目地址：https://gitee.com/JuneQ/mall-project 演示地址：http://projectdemo.top</p><p>边工边敲历经52天，终于结束了，集群篇因为电脑拉胯只能看</p><p>恭喜尚硅谷破百万关注，历时半年艰难学完一把辛酸泪（因为平时有工作），给点建议给想学和正在学的小伙伴 1、如有条件电脑内存至少16G起步，条件进一步加个屏幕，条件更进一步租一台至少4G内存的X86架构云服务器，所有部署的东西全扔云服务器上 2、P16，P17没法搭起来的建议照着rerenfast的github上的教程搭 3、项目搭起来后，每学完一章一定要用git提交一次，不然后续排错会令人崩溃 4、多记笔记，尤其是分布式，架构，锁相关的知识，有利于面试 5、IDEA的jrebel插件和ResetfulTool插件至少能提高一半的学习效率，必用 6、这章实在找不到解决办法看下弹幕，其余情况一律关闭 7、Maven依赖版本号一定要一模一样（除非你知道高版本怎么配置） 8、当前章节没达到老师的效果不要继续往下做，这个项目是线性的，你卡在这个环节后面基本也很难做下去，直到P325 9、单纯想学后端东西的，前端代码照抄，P28-P44跳过 10、ES的内存分配不要128MB，要256MB起步，商品上架的测试数据建议和老师的一模一样（除了图片），不然不好对照 11、nginx可以不用部署在服务器上，有windows版可以本地运行，跳过穿透 12、单点登录有条件直接用github的，不要用微博的，提高效率，可以用api.github.com/user这个接口 13、支付宝沙箱每周日12:00至每周一12:00维护不可用 14、个人认为新增商品，商品上架，保存订单数据，支付这四个功能为该项目最折磨人功能，一P能卡一两天 15、P100之前的内容属于当前JAVA后端能找到工作的最基本水平 16、调试环节是必要的，一定要跟着学，不会调试通过试用期堪忧 17、实际大多数公司的项目技术难点和涵盖范围不如这个项目（所以好多人边上班边学啊）</p><p>4、12</p><p>大佬，这个项目到底能不能写在简历中，很多人说，第一：商城项目烂大街。第二：这个项目涵盖的太多，如果面试官问的太多，可能有难度</p><p>不可以直接写，把知识点穿插写到你的其他项目里就行了，比如你写一个后台系统，防止表单重复提交你用到了鼓粒商城提交订单的幂等性设计，注册登录用到了QQ或者微信的单点登录，如果有定时任务就参考秒杀系统的定时任务设计</p>`,16);function Vn(Nn,Rn){const a=o("ExternalLinkIcon");return l(),i("div",null,[r,n("blockquote",null,[u,n("p",null,[n("a",d,[s("雷神B站教程"),t(a)]),s("，分基础、高级、集群三篇。“不要做锤子之神，要做雷霆之神”")]),n("p",null,[n("a",k,[s("接口文档地址"),t(a)]),s(" 一些业务的实现感觉就挺贴近算法的，自我感觉数据库的设计是最重要的")]),n("p",null,[n("a",v,[s("别人前端代码"),t(a)]),s(),n("a",m,[s("别人后端代码"),t(a)])]),n("p",null,[s("Google到的笔记很详细："),n("a",g,[s("别人笔记"),t(a)]),s(),n("a",b,[s("别人代码"),t(a)])]),h]),f,n("blockquote",null,[n("p",null,[s("根据 "),n("a",y,[s("官网文档"),t(a)]),s(" 来安装...")]),n("p",null,[s("建议看看 "),n("a",q,[s("菜鸟"),t(a)]),s(" 的教程入门一下 Docker！！！")])]),_,n("p",null,[s("具体看文档："),n("a",x,[s("03、前端开发基础知识"),t(a)]),s(" 点 "),j,s(" 可以看！")]),n("blockquote",null,[w,n("ol",null,[z,n("li",null,[n("p",null,[n("mark",null,[n("a",S,[s("函数表达式"),t(a)]),s(" 区别 "),E])])]),C])]),M,n("blockquote",null,[A,n("ul",null,[O,n("li",null,[s("或者调用"),n("a",T,[B,t(a)]),s("对象的构造函数，如下所示： "),P])])]),I,n("blockquote",null,[n("p",null,[s("详细点看："),n("a",V,[s("Vue入门学习笔记"),t(a)]),s(" & "),n("a",N,[s("03、前端开发基础知识"),t(a)])]),R,L,D]),J,n("ul",null,[F,U,G,H,Q,n("li",null,[W,n("ul",null,[n("li",null,[n("a",X,[$,t(a)]),s(" ——将输入的合法符串转为数字 "),n("a",K,[s("建议看这个例子"),t(a)])])])]),Y,Z]),nn,n("p",null,[s("导入"),n("a",sn,[s("人人开源"),t(a)]),s("的项目到idea时，报错。通过改parent的boot版本解决！")]),an,n("blockquote",null,[n("p",null,[n("mark",null,[n("a",tn,[s("org.junit.jupiter.api.Test和org.junit.Test区别"),t(a)])])]),en,n("p",null,[n("a",pn,[s("关于@RunWith(SpringRunner.class)的作用"),t(a)])]),on]),ln,n("h3",cn,[n("a",rn,[n("span",null,[s("2. "),n("a",un,[s("跨源资源共享（CORS）"),t(a)])])])]),dn,kn,vn,n("blockquote",null,[n("p",null,[s("理解 "),n("a",mn,[s("简单请求"),t(a)]),s(" 和"),n("a",gn,[s("预检请求"),t(a)]),s(" 看Title解释，1）请求类型得是Get,Post 2）Content-Type：text，form")])]),bn,n("p",null,[s("值得一看CorsConfig："),n("a",hn,[s("【跨域】使用CorsConfig和注解，解决跨域"),t(a)]),s(" 和 "),n("a",fn,[s("gateway跨域解决方案"),t(a)])]),yn,qn,_n,n("h5",xn,[n("a",jn,[n("span",null,[s("补充："),n("a",wn,[s("我现在说的两种方式（1.第一种 （CorsConfig ） 2.注解方式）"),t(a)]),s(" Nginx 算一种，还有RuoYi前端Vue解决")])])]),zn,Sn,n("h3",En,[n("a",Cn,[n("span",null,[s("3. "),n("a",Mn,[An,t(a)])])])]),On,n("p",null,[n("a",Tn,[s("JavaGuide 最重要的 JVM 参数总结"),t(a)])]),Bn,n("p",null,[n("a",Pn,[s("场景：springboot项目启动开始可以访问数据库，但是几分钟之后就会报错"),t(a)])]),In])}const Jn=p(c,[["render",Vn],["__file","Basic.html.vue"]]),Fn=JSON.parse('{"path":"/studynotes/GuliMall/Basic.html","title":"","lang":"zh-CN","frontmatter":{"description":"Basic 谷粒商城是一个B2C模式的电商平台，销售自营商品给客户 雷神B站教程，分基础、高级、集群三篇。“不要做锤子之神，要做雷霆之神” 接口文档地址 一些业务的实现感觉就挺贴近算法的，自我感觉数据库的设计是最重要的 别人前端代码 别人后端代码 Google到的笔记很详细：别人笔记 别人代码 最高境界就是数据库设计师和系统架构师 一、前言 1. 项目...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/GuliMall/Basic.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:description","content":"Basic 谷粒商城是一个B2C模式的电商平台，销售自营商品给客户 雷神B站教程，分基础、高级、集群三篇。“不要做锤子之神，要做雷霆之神” 接口文档地址 一些业务的实现感觉就挺贴近算法的，自我感觉数据库的设计是最重要的 别人前端代码 别人后端代码 Google到的笔记很详细：别人笔记 别人代码 最高境界就是数据库设计师和系统架构师 一、前言 1. 项目..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.zzq8.cn/img/202207202224096.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T15:48:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T15:48:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://images.zzq8.cn/img/202207202224096.png\\",\\"https://images.zzq8.cn/img/202207221542079.png\\",\\"https://images.zzq8.cn/img/202207221518690.png\\",\\"https://images.zzq8.cn/img/202207241602886.png\\",\\"https://images.zzq8.cn/img/202210191401611.png\\",\\"https://images.zzq8.cn/img/202208141617036.png\\",\\"https://images.zzq8.cn/img/202208131758590.png\\",\\"https://images.zzq8.cn/img/202208131809687.png\\",\\"https://images.zzq8.cn/img/202208131824168.png\\",\\"https://images.zzq8.cn/img/202208131854872.png\\",\\"https://images.zzq8.cn/img/202208131912755.png\\",\\"https://images.zzq8.cn/img/202208182222062.png\\",\\"https://images.zzq8.cn/img/202208201455426.png\\",\\"https://images.zzq8.cn/img/202208211050573.png\\",\\"https://images.zzq8.cn/img/202208241615461.png\\",\\"https://images.zzq8.cn/img/202208281709300.png\\",\\"https://images.zzq8.cn/img/202208281711096.png\\",\\"https://images.zzq8.cn/img/202208281717252.png\\",\\"https://images.zzq8.cn/img/202208281717694.png\\"],\\"dateModified\\":\\"2024-05-08T15:48:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Basic","slug":"basic","link":"#basic","children":[]},{"level":2,"title":"一、前言","slug":"一、前言","link":"#一、前言","children":[{"level":3,"title":"1. 项目简介","slug":"_1-项目简介","link":"#_1-项目简介","children":[]},{"level":3,"title":"2. 架构图：","slug":"_2-架构图","link":"#_2-架构图","children":[]},{"level":3,"title":"3. 分布式基础概念","slug":"_3-分布式基础概念","link":"#_3-分布式基础概念","children":[]}]},{"level":2,"title":"二、Docker 学习","slug":"二、docker-学习","link":"#二、docker-学习","children":[{"level":3,"title":"1. MySQL","slug":"_1-mysql","link":"#_1-mysql","children":[]},{"level":3,"title":"2. Redis","slug":"_2-redis","link":"#_2-redis","children":[]}]},{"level":2,"title":"三、项目准备","slug":"三、项目准备","link":"#三、项目准备","children":[{"level":3,"title":"1. 前端","slug":"_1-前端","link":"#_1-前端","children":[]},{"level":3,"title":"2. 后端","slug":"_2-后端","link":"#_2-后端","children":[]},{"level":3,"title":"3. 技术选型","slug":"_3-技术选型","link":"#_3-技术选型","children":[]}]},{"level":2,"title":"四、项目开始","slug":"四、项目开始","link":"#四、项目开始","children":[{"level":3,"title":"1. 注意小点","slug":"_1-注意小点","link":"#_1-注意小点","children":[]},{"level":3,"title":"2. 跨源资源共享（CORS）","slug":"_2-跨源资源共享-cors","link":"#_2-跨源资源共享-cors","children":[]},{"level":3,"title":"3. axios和vue-axios的关系及使用区别","slug":"_3-axios和vue-axios的关系及使用区别","link":"#_3-axios和vue-axios的关系及使用区别","children":[]},{"level":3,"title":"4. 三级菜单：拖拽前端业务实现","slug":"_4-三级菜单-拖拽前端业务实现","link":"#_4-三级菜单-拖拽前端业务实现","children":[]},{"level":3,"title":"5. 踩坑","slug":"_5-踩坑","link":"#_5-踩坑","children":[]},{"level":3,"title":"6. OSS（Object Storage Service）","slug":"_6-oss-object-storage-service","link":"#_6-oss-object-storage-service","children":[]},{"level":3,"title":"7. JSR 303","slug":"_7-jsr-303","link":"#_7-jsr-303","children":[]},{"level":3,"title":"8. SPU 与 SKU","slug":"_8-spu-与-sku","link":"#_8-spu-与-sku","children":[]},{"level":3,"title":"9. 其他重要的点","slug":"_9-其他重要的点","link":"#_9-其他重要的点","children":[]}]},{"level":2,"title":"五、基础篇总结","slug":"五、基础篇总结","link":"#五、基础篇总结","children":[]},{"level":2,"title":"摘自评论","slug":"摘自评论","link":"#摘自评论","children":[]}],"git":{"createdTime":1712997543000,"updatedTime":1715183298000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1},{"name":"MiniPC","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":34.07,"words":10221},"filePathRelative":"studynotes/GuliMall/Basic.md","localizedDate":"2024年4月13日","autoDesc":true}');export{Jn as comp,Fn as data};
