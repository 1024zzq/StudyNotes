import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,a as s}from"./app-jldjUy9n.js";const t={},o=s(`<h1 id="尚上优选" tabindex="-1"><a class="header-anchor" href="#尚上优选"><span>尚上优选</span></a></h1><blockquote><p>41h/3=14 2_week 尚上优选类似多多买菜、美团优选 230910 END+++ Fighting？</p><p>依托社区和团长社交关系实现生鲜商品流通的新零售模式</p></blockquote><h1 id="一、准备-配置" tabindex="-1"><a class="header-anchor" href="#一、准备-配置"><span>一、准备-配置</span></a></h1><h3 id="_1-knife4j" tabindex="-1"><a class="header-anchor" href="#_1-knife4j"><span>1.knife4j</span></a></h3><blockquote><p>knife4j &gt; swagger2 里面有它的jar是它的增强版</p></blockquote><p>@Bean return Docket.class 这样是为了分组 例如后台系统一个，用户前台一个</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token comment">//具体怎么配置Goolge就好</span>
	<span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">webApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">adminApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问Knife4j的文档地址：<strong>http://ip:port/doc.html</strong>即可查看文档</p><p>初印象：好用 内容很详细。。<strong>重点还能调试模拟PostMan发请求！！！</strong></p><h3 id="_2-module" tabindex="-1"><a class="header-anchor" href="#_2-module"><span>2.Module</span></a></h3><p>VO包下的类一般封装查询条件，比如JD想检索商品 即可把所有检索点放VO实体类</p><h3 id="_3-node-js" tabindex="-1"><a class="header-anchor" href="#_3-node-js"><span>3.Node.js</span></a></h3><blockquote><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。<code>简单的说 Node.js 就是运行在服务端的 JavaScript</code></p></blockquote><h3 id="_4-vscode" tabindex="-1"><a class="header-anchor" href="#_4-vscode"><span>4.VSCode</span></a></h3><p>vs新建工作区 -&gt; 将当前保存为工作区会有一个xxx.code-workspace的文件。。。类似java的父目录，下面就可以新建各种 Module 项目是放在工作区中运行，可以一个正式项目 一个test项目</p><p>权限</p><p>整合 spring security 可以弄。但这里不整了就简单弄基础功能</p><h1 id="二、代码学习" tabindex="-1"><a class="header-anchor" href="#二、代码学习"><span>二、代码学习</span></a></h1><h2 id="_1-mp-框架api-get-it" tabindex="-1"><a class="header-anchor" href="#_1-mp-框架api-get-it"><span>1.MP 框架API(Get It)</span></a></h2><p><mark>这里已经挪到 lambda 笔记中</mark></p><p>MP中有Lambda的Wrapper（为了避免了字段硬编码和拼写错误的问题，即使用普通QueryWrapper的缺陷）</p><blockquote><p>对于 <code>QueryWrapper</code> 类的 <code>like</code> 方法，它不支持使用 Lambda 表达式作为参数。只有 <code>LambdaQueryWrapper</code> 类支持使用 Lambda 表达式。</p><p>在 <code>LambdaQueryWrapper</code> 中，我们可以使用 <code>Role::getRoleName</code> 来指定查询条件的字段。而在 <code>QueryWrapper</code> 中，我们需要使用字符串 <code>&quot;role_name&quot;</code> 来指定数据库表中的字段名。</p><p><mark>TODO 搞不懂这里的第一个参数的Lambda为什么拿的是@TableField(&quot;role_name&quot;)的值</mark></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//创建条件构造器对象</span>
<span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//TODO 搞不懂这里的第一个参数的Lambda为什么拿的是@TableField(&quot;role_name&quot;)的值   private String roleName;</span>
wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">Role</span><span class="token operator">::</span><span class="token function">getRoleName</span><span class="token punctuation">,</span>roleName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>😡TODO：这两个类的<code>like</code> 方法是通过继承父类 <code>AbstractWrapper</code> 来获得，具体在这两个类中也没看到重写，不清楚怎么弄的？？？ ctrl+p方法签名里面有AnnotationFunction，但是实际点击源码看没看到（ctrl+左键看不到！）</p><p>既然这两个类都是通过继承父类AbstractWrapper获得的like方法，那么父类怎么区分这两个类分别给他们各自的like实现</p><p>这种差异是因为 <code>LambdaQueryWrapper</code> 类在设计时针对 Lambda 表达式进行了特殊处理，以提供更加便捷的语法。而 <code>QueryWrapper</code> 类则是基于传统的字符串字段名的方式。</p><figure><img src="http://images.zzq8.cn/img/image-20230902215155311.png" alt="image-20230902215155311" tabindex="0" loading="lazy"><figcaption>image-20230902215155311</figcaption></figure>`,27),p=[o];function c(i,l){return a(),n("div",null,p)}const u=e(t,[["render",c],["__file","尚上优选_Abandon.html.vue"]]),m=JSON.parse('{"path":"/studynotes/ZOther/Abandon_Project/%E5%B0%9A%E4%B8%8A%E4%BC%98%E9%80%89_Abandon.html","title":"尚上优选","lang":"zh-CN","frontmatter":{"description":"尚上优选 41h/3=14 2_week 尚上优选类似多多买菜、美团优选 230910 END+++ Fighting？ 依托社区和团长社交关系实现生鲜商品流通的新零售模式 一、准备-配置 1.knife4j knife4j > swagger2 里面有它的jar是它的增强版 @Bean return Docket.class 这样是为了分组 例如后台...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/ZOther/Abandon_Project/%E5%B0%9A%E4%B8%8A%E4%BC%98%E9%80%89_Abandon.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:title","content":"尚上优选"}],["meta",{"property":"og:description","content":"尚上优选 41h/3=14 2_week 尚上优选类似多多买菜、美团优选 230910 END+++ Fighting？ 依托社区和团长社交关系实现生鲜商品流通的新零售模式 一、准备-配置 1.knife4j knife4j > swagger2 里面有它的jar是它的增强版 @Bean return Docket.class 这样是为了分组 例如后台..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.zzq8.cn/img/image-20230902215155311.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T08:39:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T08:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"尚上优选\\",\\"image\\":[\\"http://images.zzq8.cn/img/image-20230902215155311.png\\"],\\"dateModified\\":\\"2024-04-13T08:39:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"1.knife4j","slug":"_1-knife4j","link":"#_1-knife4j","children":[]},{"level":3,"title":"2.Module","slug":"_2-module","link":"#_2-module","children":[]},{"level":3,"title":"3.Node.js","slug":"_3-node-js","link":"#_3-node-js","children":[]},{"level":3,"title":"4.VSCode","slug":"_4-vscode","link":"#_4-vscode","children":[]},{"level":2,"title":"1.MP 框架API(Get It)","slug":"_1-mp-框架api-get-it","link":"#_1-mp-框架api-get-it","children":[]}],"git":{"createdTime":1712997543000,"updatedTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":2.36,"words":709},"filePathRelative":"studynotes/ZOther/Abandon_Project/尚上优选_Abandon.md","localizedDate":"2024年4月13日","autoDesc":true}');export{u as comp,m as data};
