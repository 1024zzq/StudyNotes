import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as r,e as n,f as a,b as s,w as i,a as e}from"./app-CFBzGTKF.js";const u={},d=n("h2",{id:"springboot2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#springboot2"},[n("span",null,"SpringBoot2")])],-1),k={href:"https://www.yuque.com/atguigu/springboot",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"还有自动化配置文档，这个倒idea双shift找properties也行",-1),v=n("p",null,"看到了P25，由于求职形势逼迫。搁浅... 做项目快速上手能干，往后再回头了",-1),b=n("p",null,"补充面试常问：SpringBoot：",-1),h=n("ol",null,[n("li",null,"自动装载"),n("li",null,[n("code",null,"怎么实现starter"),a(" （看我SpringBoot代码的Demo，要知道流程）")]),n("li",null,"bean的生命周期")],-1),f=e('<img src="https://images.zzq8.cn/img/202302111035624.png" alt="image" style="zoom:80%;"><p>上面图片的所有基础原生开发，都有另一套方案用响应式替代。支持两种模式开发 <code>@ConditionalOnWebApplication(type = Type.SERVLET)</code> Spring5 除现在用的原生Servlet外多了一套解决方案：响应式开发！！于是SpringBoot出2跟着整 第一季就是掌握整个Sevlet技术栈</p><p><strong>第二季响应式还没出，坐等</strong>，底层依赖reactor、Netty-reactor <strong>异步非阻塞的方式占用少量资源处理大量并发</strong>SpringBoot 2.0 基于 Spring 5 最大的变化就是引入了 React（响应式编程）-&gt; Web Flux（可以非常容易的创建出高性能、高并发的 Web 应用）</p><p>例如：Gateway 的跨域 Filter 网关，CorsWebFilter 它是属于 Webflux</p><h2 id="基础入门" tabindex="-1"><a class="header-anchor" href="#基础入门"><span>------基础入门------</span></a></h2><h2 id="一、spring与springboot" tabindex="-1"><a class="header-anchor" href="#一、spring与springboot"><span>一、Spring与SpringBoot</span></a></h2><h3 id="_1-spring能做什么" tabindex="-1"><a class="header-anchor" href="#_1-spring能做什么"><span>1.Spring能做什么</span></a></h3><h4 id="_1-1-spring的能力" tabindex="-1"><a class="header-anchor" href="#_1-1-spring的能力"><span>1.1.Spring的能力</span></a></h4>',8),_={href:"https://spring.io/projects/spring-boot",target:"_blank",rel:"noopener noreferrer"},y=n("li",null,"Spring Boot",-1),x=n("li",null,"Spring Cloud (Spring Cloud Alibaba)",-1),S=n("li",null,"Spring Framework (Features:Integration->Caching)",-1),q={href:"https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:support:cache-abstraction",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,"Spring Session (Data Redis)",-1),C=n("li",null,"Spring AMQP (RabbitMQ)",-1),w=e('<h4 id="_1-2-spring5重大升级" tabindex="-1"><a class="header-anchor" href="#_1-2-spring5重大升级"><span>1.2.Spring5重大升级</span></a></h4><h5 id="_1-2-1-响应式编程" tabindex="-1"><a class="header-anchor" href="#_1-2-1-响应式编程"><span>1.2.1.响应式编程</span></a></h5><img src="https://images.zzq8.cn/img/202302111528869.png" alt="image-20230211152821781" style="zoom:67%;"><h5 id="_1-2-2-内部源码设计" tabindex="-1"><a class="header-anchor" href="#_1-2-2-内部源码设计"><span>1.2.2.内部源码设计</span></a></h5><p>由于Spring5重大升级 内部源码设计基于Java8的一些新特性，如：接口默认实现。重新设计源码架构！</p><p>Spring5基于jdk8，jdk8特性多了接口的默认实现。带来的变化： <strong>问题场景</strong>：要是以前底层还需搞个<mark>适配器模式</mark>（适配器实现接口，实现类继承适配器重写 -&gt; 避免必须实现一些不需要的方法） <strong>处理</strong>：接口都统一给一个默认实现，就不需要适配器类了！！！</p><h3 id="_2-为什么用springboot" tabindex="-1"><a class="header-anchor" href="#_2-为什么用springboot"><span>2.为什么用SpringBoot</span></a></h3><blockquote><p>举例如要组装成一台电脑集合上面的技术 <strong>配置地狱</strong>，而这就是SpringBoot的存在意义它是一个高层框架底层是Spring为了整合Spring整个技术栈 专心于业务逻辑（框架的框架），免于那么多繁琐的配置。不用自己手动组装电脑了，直接买个品牌机！无需掌握各种组装技术！！！</p></blockquote>',8),B={id:"_2-1-springboot优点",tabindex:"-1"},j={class:"header-anchor",href:"#_2-1-springboot优点"},P={href:"https://spring.io/projects/spring-boot",target:"_blank",rel:"noopener noreferrer"},R=e('<blockquote><p>以下摘自官网，Title Link 可入 ~ 可以细看心里解读解读</p><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can &quot;just run&quot;. 能快速创建出生产级别的Spring应用</p></blockquote><ul><li><p>Create stand-alone Spring applications</p></li><li><ul><li>创建独立Spring应用</li></ul></li><li><p>Embed Tomcat, Jetty or Undertow directly <strong>(no need to deploy WAR files)</strong></p></li><li><ul><li>内嵌web服务器</li></ul></li><li><p>Provide opinionated &#39;starter&#39; dependencies to simplify your build configuration</p></li><li><ul><li>自动starter依赖，简化构建配置**（防止各jar包冲突）**</li></ul></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p></li><li><ul><li>自动配置Spring以及第三方功能**（激动人心的特性，对于固定化配置全给你配好 例如mysql redis只要告诉地址之类的而不需要再告诉它什么东西怎么做例如配置数据源。）**</li></ul></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p></li><li><ul><li>提供生产级别的监控、健康检查及外部化配置**（针对运维来说巴适，例如写个配置文件无需回头改代码再发布）**</li></ul></li><li><p>Absolutely no code generation and no requirement for XML configuration</p></li><li><ul><li>无代码生成、无需编写XML**（自动配置）**</li></ul></li></ul><p>SpringBoot是整合Spring技术栈的一站式框架</p><p>SpringBoot是简化Spring技术栈的快速开发脚手架</p><h4 id="_2-2-时代背景" tabindex="-1"><a class="header-anchor" href="#_2-2-时代背景"><span>2.2.时代背景</span></a></h4>',5),E={href:"https://www.bilibili.com/video/BV19K4y1L7MT?p=3&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0",target:"_blank",rel:"noopener noreferrer"},M=e(`<ul><li>Spring Cloud Data Flow（那张经典图三板斧中的，连接一切）</li><li>云原生（同运维有很大关系！） Serverless（区别直接买一台几核几G的服务造成浪费，这个可以做到用多少占多少。虽然现在不理解但是先码上）</li></ul><h2 id="二、自动配置" tabindex="-1"><a class="header-anchor" href="#二、自动配置"><span>二、自动配置</span></a></h2><blockquote><p>两大优秀特性：依赖管理、自动配置</p></blockquote><h3 id="_1-依赖管理" tabindex="-1"><a class="header-anchor" href="#_1-依赖管理"><span>1.依赖管理</span></a></h3><h4 id="_1-1-版本仲裁" tabindex="-1"><a class="header-anchor" href="#_1-1-版本仲裁"><span>1.1.版本仲裁</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>1）依赖管理    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

2）他的父项目：几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

-------------------------------------------------------
1、引入依赖默认都可以不写版本
2、引入非版本仲裁的jar，要写版本号。
-------------------------------------------------------

3）舍弃父依赖的版本控制，自定义版本
查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。
在当前项目里面重写配置
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.43<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-starter场景启动器" tabindex="-1"><a class="header-anchor" href="#_1-2-starter场景启动器"><span>1.2.starter场景启动器</span></a></h4><blockquote><p>重点第五点，这个starter又会带出 <code>spring-boot-autoconfigure</code> 具体看自动配置</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>1、见到很多 spring-boot-starter-* ： *就某种场景   All official starters follow a similar naming pattern; 
2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入
3、SpringBoot所有支持的场景
https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter
4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。
5、所有场景启动器最底层的依赖   每个 official starts 下的第一个 dependency 就是下面这个 ↓
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-自动配置-重要" tabindex="-1"><a class="header-anchor" href="#_2-自动配置-重要"><span><mark>2.自动配置（重要）</mark></span></a></h3><blockquote><p>springboot METAINFO-spring.factoies 是 SPI 机制！！！ 写这里面的类会暴露给 EnableAutoConfiguration注解</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
等同于
<span class="token annotation punctuation">@SpringBootConfiguration</span>              #配置类
<span class="token annotation punctuation">@EnableAutoConfiguration</span>              #按需自动配置          <span class="token operator">*</span><span class="token operator">*</span>核心<span class="token operator">*</span><span class="token operator">*</span>
    	<span class="token number">1</span>）<span class="token annotation punctuation">@AutoConfigurationPackage</span>
    		  <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationPackages<span class="token punctuation">.</span>Registrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//扫描的是配置类，区分@ComponentScan</span>
        <span class="token number">2</span>）<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//META-INF/spring.factories  </span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.boot&quot;</span><span class="token punctuation">)</span>    #扫描主启动类下所有组件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-效果体现" tabindex="-1"><a class="header-anchor" href="#_2-1-效果体现"><span>2.1.效果体现</span></a></h4><h5 id="_2-1-1-what-效果" tabindex="-1"><a class="header-anchor" href="#_2-1-1-what-效果"><span>2.1.1.What（效果）</span></a></h5><p>自动配置好了一切，包括SpringMVC常用组件（功能）<br> 搜一下以前的帖子，Spring整合SpringMVC的帖子发现xml会配一大堆东西！！！这些组件springBoot启动的时候会把组件都装配到容器中，不用配。</p><ul><li>前端控制器DispatcherServlet：拦截所有的前端的请求；</li><li>字符编码characterEncodingFilter：解决返回中文字符串乱码问题；</li><li>视图解析器viewResolver：对返回的视图进行渲染呈现；</li><li>文件上传解析器multipatResolver：文件上传；</li></ul><p>代码验证：打印所有启动时候装载的 Beans</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//返回一个IOC容器</span>
<span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-2-why-怎么做到的" tabindex="-1"><a class="header-anchor" href="#_2-1-2-why-怎么做到的"><span><mark>2.1.2.Why（怎么做到的）</mark></span></a></h5><blockquote><p>这个jar里有几乎SpringBoot所需要全场景，有很多爆红的类其实导入相应的dependency就不会爆红了</p><p><code>spring-boot-starter-web</code> -&gt; <code>spring-boot-starter</code> -&gt; <code>spring-boot-autoconfigure</code></p></blockquote><p>For example：以MySQL 配置数据源为例：DataSourceProperties</p><h4 id="_2-2-autoconfigurationpackage🌟" tabindex="-1"><a class="header-anchor" href="#_2-2-autoconfigurationpackage🌟"><span>2.2.@AutoConfigurationPackage🌟</span></a></h4><p>ChatGPT：转念一想，这两个注解都如字面意思 这样就很好区分异同</p><blockquote><p>springboot @ComponentScan和@AutoConfigurationPackage的区别</p><p><code>@ComponentScan</code> 和 <code>@AutoConfigurationPackage</code> 都是 Spring Boot 中用来扫描组件和自动配置的注解，它们的区别在于：</p><ol><li><code>@ComponentScan</code>：这个注解是用来指定 Spring 扫描组件的位置，会扫描指定的包及其子包中的所有类，找到标记为 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code> 等注解的类，并将其注册为 Spring 的 Bean。</li><li><code>@AutoConfigurationPackage</code>：这个注解是用来指定自动配置所在的包，它会扫描指定的包及其子包中的所有类，找到标记为 <code>@Configuration</code> 的类，并将其注册为 Spring 的 Bean。</li></ol><p>简而言之，<code>@ComponentScan</code> 和 <code>@AutoConfigurationPackage</code> 都是用来扫描组件的注解，区别在于 <code>@ComponentScan</code> 扫描的是标记了特定注解的组件类，而 <code>@AutoConfigurationPackage</code> 扫描的是配置类。在 Spring Boot 应用中，通常会在启动类上使用 <code>@SpringBootApplication</code> 注解，该注解中已经包含了 <code>@ComponentScan</code> 和 <code>@AutoConfigurationPackage</code>，因此一般不需要单独使用这两个注解。</p></blockquote><h4 id="_2-3-import-autoconfigurationimportselector-class-🌟" tabindex="-1"><a class="header-anchor" href="#_2-3-import-autoconfigurationimportselector-class-🌟"><span>2.3.@Import(AutoConfigurationImportSelector.class)🌟</span></a></h4><p>1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件 2、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类 3、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件 4、从META-INF/spring.factories位置来加载一个文件。 <strong>默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</strong> spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有 <code>META-INF/spring.factories</code></p><p>作用：文件里面写死了spring-boot一启动就要给容器中加载的所有配置类，并不是所有都生效@Condition 例如AOP、Batch就需导入相关包才生效</p><p>学习：可以找找各个第三方jar包里面的 xxxxxAutoConfiguration 分析是否生效装配进来了</p><p>总结：</p><ol><li><p>用户配的优先 @ConditionalOnMissingBean</p></li><li><p>如果用户配的bean名字不符合规范，就给你纠正过来，如下给容器中加入了文件上传解析器：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Bean</span>
	<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//容器中有这个类型组件</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token constant">MULTIPART_RESOLVER_BEAN_NAME</span><span class="token punctuation">)</span> <span class="token comment">//容器中没有这个名字 multipartResolver 的组件</span>
	<span class="token keyword">public</span> <span class="token class-name">MultipartResolver</span> <span class="token function">multipartResolver</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span>
        <span class="token comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span>
		<span class="token comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span>
		<span class="token keyword">return</span> resolver<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>一般这些自动配置类都绑了xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</li></ol><p>判断场景自动配置那些生效那些没生效：</p><ul><li><ul><li><p>自己分析，引入场景对应的自动配置一般都生效了</p></li><li><p>配置文件中debug=true开启自动配置报告。Negative（不生效）\\Positive（生效）【方便分析源码】</p></li><li><ul><li>自定义器 <strong>XXXXXCustomizer</strong>；【不熟】</li></ul></li></ul></li></ul><h3 id="_3-自动配置-实践" tabindex="-1"><a class="header-anchor" href="#_3-自动配置-实践"><span>3.自动配置-实践</span></a></h3><blockquote><p>想不起配置文件怎么配 SQL 于是有了下文</p></blockquote><h4 id="以mysql-配置数据源为例-datasourceproperties" tabindex="-1"><a class="header-anchor" href="#以mysql-配置数据源为例-datasourceproperties"><span>以MySQL 配置数据源为例：DataSourceProperties</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>DataSourceAutoConfiguration -&gt; 组件 -&gt; DataSourceProperties -&gt; application.properties
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>总结：</p><ul><li><p>SpringBoot先加载所有的自动配置类 xxxxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p></li><li><ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><p><strong>xxxxxAutoConfiguration ---&gt; 组件 ---&gt;</strong> <strong>xxxxProperties里面拿值 ----&gt; application.properties</strong></p><figure><img src="https://images.zzq8.cn/img/202209011803186.png" alt="image-20220901180324251" tabindex="0" loading="lazy"><figcaption>image-20220901180324251</figcaption></figure><figure><img src="https://images.zzq8.cn/img/202209012132180.png" alt="image-20220901213237083" tabindex="0" loading="lazy"><figcaption>image-20220901213237083</figcaption></figure><figure><img src="https://images.zzq8.cn/img/202302171158502.png" alt="image-20230217115759420" tabindex="0" loading="lazy"><figcaption>image-20230217115759420</figcaption></figure><figure><img src="https://images.zzq8.cn/img/202209012205178.png" alt="image-20220901220507136" tabindex="0" loading="lazy"><figcaption>image-20220901220507136</figcaption></figure><h2 id="i、spring-学习" tabindex="-1"><a class="header-anchor" href="#i、spring-学习"><span>Ⅰ、Spring 学习</span></a></h2><h3 id="_1-spring提供的ioc容器实现的两种方式-两个接口" tabindex="-1"><a class="header-anchor" href="#_1-spring提供的ioc容器实现的两种方式-两个接口"><span>1.Spring提供的IOC容器实现的两种方式（两个接口）</span></a></h3><blockquote><p><code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code></p></blockquote><p>a）BeanFactory接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）</p><p>b）ApplicationContext接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</p><p>ps：容器的话主要有两个，BeanFactory和ApplicationContext，他们简单区别就是：BeanFactory是低级容器，延迟加载bean，编程时方式创建；ApplicationContext是 BeanFactory 的子接口，是高级容器，一次性加载bean，以声明式方式创建</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//upupor          TrueSend trueSend = SpringContextUtils.getBean(TrueSend.class);</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringContextUtils</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    <span class="token comment">//UNKNOWN 这里不用注入吗     XD 因为实现了 ApplicationContextAware 此接口重写方法拿到了</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringContextUtils</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-ioc操作bean管理" tabindex="-1"><a class="header-anchor" href="#_2-ioc操作bean管理"><span>2.IOC操作Bean管理</span></a></h3><p>a）Bean管理就是两个操作：（1）Spring创建对象；（2）Spring注入属性</p><p>基于（2）现在理解了：</p><p>a）set方式注入</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//（1）传统方式： 创建类，定义属性和对应的set方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建属性</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> bname<span class="token punctuation">;</span>

        <span class="token comment">//创建属性对应的set方法</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBname</span><span class="token punctuation">(</span><span class="token class-name">String</span> bname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>bname <span class="token operator">=</span> bname<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--（2）spring方式： set方法注入属性--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.spring5.Book<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--使用property完成属性注入
        name：类里面属性名称
        value：向属性注入的值
    --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bname<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bauthor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>World<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b）有参构造函数注入</p><h6 id="补充-构造参数注入-vs-setter注入" tabindex="-1"><a class="header-anchor" href="#补充-构造参数注入-vs-setter注入"><span>补充：构造参数注入 <mark>vs</mark> setter注入</span></a></h6><blockquote><p>以前一直不懂 <strong>构造参数注入</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequiredArgsConstructor</span>     <span class="token comment">//XD   lombook</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;member&quot;</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MemberOperateService</span> memberBusinessService<span class="token punctuation">;</span>    <span class="token comment">//XD  final</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>setter 注入估计就是 @Autowired 好像不是</p></blockquote><p>Q&amp;A 因为有三种注入方式：</p><p>1.set方法注入 2.构造方法注入 3.@autowire自动注入</p><p>总结起来：</p><ul><li><code>@RequiredArgsConstructor</code>与<code>private final</code>一起使用是一种构造函数注入的方式。</li><li><code>@Autowired</code>注解可以用于字段、setter方法或构造函数，用于实现自动装配（autowiring），可以通过setter注入或构造函数注入的方式来注入依赖项。</li></ul><p>@Resource默认通过名称注入，如名称无法找到则通过类型注入； @Autowired默认通过类型注入，如存在多个类型则通过名称注入，也可以配合@Qualifier注解，在@Qualifier中指定bean的名字来注入你想要的那个bean</p><p><strong>其实lombok有个@RequiredArgsConstructor注解，可以帮你用构造器注入</strong></p><h3 id="_3-bean生命周期" tabindex="-1"><a class="header-anchor" href="#_3-bean生命周期"><span>3.Bean生命周期</span></a></h3><blockquote><p><strong>bean 的后置处理器，bean 生命周期有七步</strong> （正常生命周期为五步，而配置后置处理器后为七步）</p><ul><li>实例化</li><li>属性赋值 （构造参数注入，setter注入等）</li><li>初始化 （检查aware接口，前置处理，后置处理等，这个过程中可能自定义了一些初始化之前的操作和之后的操作）</li><li>使用</li><li>销毁 （销毁前可能自己配置了一些销毁之前的方法)</li></ul></blockquote><p>第一步：Construction 构造Bean对象</p><p>第二步：set Bean 属性值</p><p><mark>（1）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization</mark></p><p>第三步：init调用自定义的初始化方法 //这前三步在 <code>new ClassPathXmlApplicationContext(&quot;beans-test.xml&quot;);</code> 就搞完</p><p><mark>（2）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization</mark></p><p>第四步：获取实例化后的 Bean 可以开始使用 Bean org.example.bean.BeanLife@649bec2e</p><p>第五步：destroy调用自定义销毁的方法 //手动让 bean 实例销毁 context.close(); //ClassPathXmlApplicationContext</p><p>​</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanLife<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.example.bean.BeanLife<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>destroy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>properties<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>属性XD<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--配置后置处理器--&gt;</span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBeanPost<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.example.config.MyBeanPost<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>public class MyBeanPost implements BeanPostProcessor //创建后置处理器实现类，对应（1）（2）</code></p><h3 id="_4-aop" tabindex="-1"><a class="header-anchor" href="#_4-aop"><span>4.AOP</span></a></h3><blockquote><p>RuoYi、upupor 自定义注解全是和 AOP 相关</p><p>除了有个注解是配合SpringSecurity实现注解地方放行访问 （RUOYI）</p></blockquote><blockquote><h4 id="学习手册-pdf-补充" tabindex="-1"><a class="header-anchor" href="#学习手册-pdf-补充"><span>学习手册.pdf 补充：</span></a></h4><p>多个切面的情况下，可以通过 @Order 指定先后顺序，数字越小，优先级越高。</p><img src="http://images.zzq8.cn/img/image-20240315165659313.png" alt="image-20240315165659313" style="zoom:50%;"><h4 id="说说你平时有用到aop吗-例子很好-要知行合一" tabindex="-1"><a class="header-anchor" href="#说说你平时有用到aop吗-例子很好-要知行合一"><span>说说你平时有用到AOP吗？ （例子很好，要知行合一）</span></a></h4><p>PS：这道题老三的同事面试候选人的时候问到了，候选人说了一堆AOP原理，同事 就势来一句，你能现场写一下AOP的应用吗？结果——场面一度很尴尬。虽然我对面 试写这种百度就能出来的东西持保留意见，但是还是加上了这一问，毕竟招人最后 都是要撸代码的。</p><p>这里给出一个小例子，SpringBoot项目中，利用AOP打印接口的入参和出参日志，以 及执行时间，还是比较快捷的。</p><ul><li><p>引入依赖：引入AOP依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自定义注解：自定义一个注解作为切点</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">WebLog</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置AOP切面：</p><ul><li>@Aspect：标识切面</li><li>@Pointcut：设置切点，这里以自定义注解为切点，定义切点有很多其它种方 式，自定义注解是比较常用的一种。</li><li>@Before：在切点之前织入，打印了一些入参信息</li><li>@Around：环绕切点，打印返回参数和接口执行时间</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebLogAspect</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span>
	<span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">WebLogAspect</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token doc-comment comment">/**
	* 以自定义 @WebLog 注解为切点
	**/</span>
	<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(cn.fighter3.spring.aop_demo.WebLog)&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">webLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token doc-comment comment">/**
	* 在切点之前织入
	*/</span>
	<span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;webLog()&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
		<span class="token comment">// 开始打印请求日志</span>
		<span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span>
		<span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印请求相关参数</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;============ Start==========================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印请求 url</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;URL : {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印 Http method</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP Method : {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印调用 controller 的全路径以及执行方法</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Class Method : {}.{}&quot;</span><span class="token punctuation">,</span>
			joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印请求的 IP</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;IP : {}&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印请求入参</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Request Args : {}&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span>
			<span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token doc-comment comment">/**
	* 在切点之后织入
	*/</span>
	<span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;webLog()&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
		<span class="token comment">// 结束后打个分隔线，方便查看</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;================== End===========================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token doc-comment comment">/**
	* 环绕
	*/</span>
	<span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;webLog()&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
		<span class="token comment">//开始时间</span>
		<span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Object</span> result <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 打印出参</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Response Args : {}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span>
			<span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 执行耗时</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Time-Consuming : {} ms&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用：只需要在接口上加上自定义注解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@WebLog</span><span class="token punctuation">(</span>desc <span class="token operator">=</span> <span class="token string">&quot;这是一个欢迎接口&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span><span class="token operator">+</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></blockquote><blockquote><h2 id="静态代理为什么是静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理为什么是静态代理"><span>静态代理为什么是静态代理？</span></a></h2><p>aop就是用的代理实现，代理分为静态代理和动态代理</p><p>静态代理比如 AspectJ，AOP框架会在编译阶段生成AOP代理类，属于编译时的增强</p><p>动态代理比如 jdk动态代理 和 CGLIB ，AOP框架不会去修改字节码，而是每次运行时在内存临时为方法生成一个AOP对象，AOP对象包含了目标对象的全部方法，在特定切点做了增强处理，并回调原对象的方法。</p><p>当时的回答：spring使用的就是动态代理，动态代理有两个：jdk自带的和Cglib，jdk的代理效率会高一些，Cglib是动态代码生成库</p><p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作</p></blockquote><h5 id="补充-spring-aop-和-aspectj-aop-有什么区别" tabindex="-1"><a class="header-anchor" href="#补充-spring-aop-和-aspectj-aop-有什么区别"><span>补充：Spring AOP 和 AspectJ AOP 有什么区别？</span></a></h5><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。</p><p>Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，</p><p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比 Spring AOP 快很多。</p><hr><p>著作权归所有 原文链接：https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html</p><h6 id="ruoyi-补充-aop-实操" tabindex="-1"><a class="header-anchor" href="#ruoyi-补充-aop-实操"><span>RuoYi 补充 AOP 实操</span></a></h6><p>1.<code>@Before</code> 使用场景：<em>限流处理</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>  <span class="token comment">//切面声明？</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiterAspect</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(rateLimiter)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> point<span class="token punctuation">,</span> <span class="token class-name">RateLimiter</span> rateLimiter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis Key： <code>rate_limit:com.ruoyi.web.controller.system.SysUserController-list</code></p><p>JoinPoint point 这个类可以获取 AOP 前置通知（Before Advice）注解标注的类名及其方法名【<strong>反射</strong>】</p><p>2.<code>@AfterReturning</code> 使用场景：日志记录 增删改</p><p><em>处理完请求后执行</em></p><h6 id="upupor-补充-aop-实操" tabindex="-1"><a class="header-anchor" href="#upupor-补充-aop-实操"><span>Upupor 补充 AOP 实操</span></a></h6><ol><li><code>@Around</code> 使用场景：博客下面统计记录 <strong>响应时间</strong> （spring的 StopWatch 类 + @Around 实现！！！）</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;controllerLog()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用业务方法</span>
    result <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//XD 这里调用目标方法，这之前的代码都是【前置逻辑】    下面的代码都是【后置逻辑】</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-spring-事务" tabindex="-1"><a class="header-anchor" href="#_5-spring-事务"><span>5.Spring 事务</span></a></h3><blockquote><p>问：项目中什么地方用到了 AOP 在 Spring 中进行事务管理中就用到了！！！</p></blockquote><p><mark>声明式事务：就是用注解的方式/xml开启事务底层使用的是 AOP，相对的手动写代码开事务关事务</mark></p><h3 id="_6-设计模式" tabindex="-1"><a class="header-anchor" href="#_6-设计模式"><span>6.设计模式</span></a></h3><blockquote><p>至少前5种答出来</p></blockquote><ol><li>IOC 工厂模式 : Spring 容器本质是一个大工厂，使用工厂模式通过 BeanFactory、 ApplicationContext 创建 bean 对象。</li><li>AOP 代理模式 : <strong>Spring AOP 功能就是通过代理模式来实现的</strong>，分为动态代理和静 态代理。</li><li>IOC 单例模式 : Spring 中的 Bean 默认都是单例的，这样有利于容器对Bean的管理。</li><li>模板模式 : Spring 中 JdbcTemplate、RestTemplate 等以 Template结尾的对数据 库、网络等等进行操作的模板类，就使用到了模板模式。</li><li>观察者模式: Spring 事件驱动模型就是观察者模式很经典的一个应用。 <ul><li>可以将观察者模式看作是发布订阅模式的一个特例</li><li>在Spring框架中，事件驱动的编程模型是基于发布订阅模式的。</li></ul></li><li>适配器模式 :Spring AOP 的增强或通知 (Advice) 使用到了适配器模式、Spring MVC 中也是用到了适配器模式适配 Controller。</li><li>策略模式：Spring中有一个Resource接口，它的不同实现类，会根据不同的策略 去访问资源。</li></ol><h3 id="_7-哪些模块组成" tabindex="-1"><a class="header-anchor" href="#_7-哪些模块组成"><span>7.哪些模块组成</span></a></h3><blockquote><p>https://juejin.cn/post/6997930907227127838</p></blockquote><ul><li>四个<strong>核心模块</strong></li></ul><figure><img src="http://images.zzq8.cn/img/928164d48bbf4019a6a5131fd4cdfec9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210818214831566" tabindex="0" loading="lazy"><figcaption>image-20210818214831566</figcaption></figure><ul><li>根据 <code>Spring</code> 源码模块中的 <code>gradle</code> 依赖，可以整理出这么一张<strong>依赖关系图</strong></li></ul><figure><img src="http://images.zzq8.cn/img/062d90e772644ee9962185234ee6d12e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20210818222259022" tabindex="0" loading="lazy"><figcaption>image-20210818222259022</figcaption></figure><hr><h2 id="分割线" tabindex="-1"><a class="header-anchor" href="#分割线"><span><mark>------分割线------</mark></span></a></h2><h2 id="_1-常用注解" tabindex="-1"><a class="header-anchor" href="#_1-常用注解"><span>1）常用注解</span></a></h2><blockquote><p>搞个时间重新排个版！知识待完善</p></blockquote>`,117),z={href:"https://www.yuque.com/atguigu/springboot/vgzmgh",target:"_blank",rel:"noopener noreferrer"},I={href:"https://liayun.blog.csdn.net/article/details/115053350",target:"_blank",rel:"noopener noreferrer"},O=e(`<li><h4 id="enabletransactionmanagement-开启注解事务管理-等价于xml配置方式的-tx-annotation-driven" tabindex="-1"><a class="header-anchor" href="#enabletransactionmanagement-开启注解事务管理-等价于xml配置方式的-tx-annotation-driven"><span>@EnableTransactionManagement // 开启注解事务管理，等价于xml配置方式的 &lt;tx:annotation-driven /&gt;</span></a></h4><ul><li><pre><code>Spring提供了一个@EnableTransactionManagement 注解以在配置类上开启声明式事务的支持。添加该注解后，Spring容器会自动扫描被@Transactional注解的方法和类。
</code></pre></li></ul></li><li><h4 id="retention-retentionpolicy-runtime" tabindex="-1"><a class="header-anchor" href="#retention-retentionpolicy-runtime"><span>@Retention(RetentionPolicy.RUNTIME)</span></a></h4><ul><li>用于使注解在运行时可以通过反射来访问和处理。这对于某些需要在运行时动态处理注解的场景非常有用</li><li>RuoYi 运行时候动态获取注解信息，比如</li></ul></li><li><h4 id="postconstruct" tabindex="-1"><a class="header-anchor" href="#postconstruct"><span>@PostConstruct</span></a></h4><ul><li><code>@PostConstruct</code> 是一个在 Spring 框架中常用的注解，它用于指定在对象创建完成后需要立即执行的方法。当使用 <code>@PostConstruct</code> 注解标记一个方法时，Spring 在实例化该对象并完成依赖注入后，会自动调用该方法。</li><li>RuoYi 中用来开启 quartz</li></ul></li><li><h4 id="rquestbody" tabindex="-1"><a class="header-anchor" href="#rquestbody"><span>@RquestBody</span></a></h4><ul><li><p>获取请求体，<strong>必须发送POST请求</strong>。SpringMVC自动将请求体的数据**（json），转为对应Java对象**（+形参Entity上）</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//以较简单的User对象接收前端传过来的ison数据(SpringMVC会智能的将符合要求的数据装配进该User对象中)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h4 id="responsebody" tabindex="-1"><a class="header-anchor" href="#responsebody"><span>@ResponseBody</span></a></h4><ul><li><p>例如，异步获取<code>json</code>数据，加上<code>@Responsebody</code>注解后，就会直接返回<code>json</code>数据。</p></li><li><p>@RestController = @Controller + <code>@ResponseBody</code></p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span> <span class="token comment">//返回json数据</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//本来这里返回 Result 对象，但是加上上面注解。会返回 JSON（@ResponseBody）</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h4 id="scope" tabindex="-1"><a class="header-anchor" href="#scope"><span>@Scope</span></a></h4><ul><li><p>配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//@Scope(&quot;prototype&quot;) // 现在还不是多例，还需要指定代理模式</span>
<span class="token comment">//* 原生 Spring JDK代理  * 现在 SpringBoot 2.X 之后都是CGlib，这里用 CGlib</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;prototype&quot;</span><span class="token punctuation">,</span> proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,6),L=n("h4",{id:"value",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#value"},[n("span",null,"@Value")])],-1),T={href:"https://m.yisu.com/zixun/723340.html",target:"_blank",rel:"noopener noreferrer"},D=n("li",null,"2）变量不能用static修饰！！！",-1),F={href:"https://blog.csdn.net/ZYC88888/article/details/87863038",target:"_blank",rel:"noopener noreferrer"},J=n("li",null,`**先说明冒号的作用 ：可以设置默认值 **@Value("\${prop.url:'http://myurl.com'}")`,-1),V={id:"springbootapplication-exclude-datasourceautoconfiguration-class",tabindex:"-1"},N={class:"header-anchor",href:"#springbootapplication-exclude-datasourceautoconfiguration-class"},U=n("ul",null,[n("li",null,"适用场景：pom 引入的 Common 有数据源，但是本 Demo 不需要。启动报错要求配"),n("li",null,"后话：个人觉得pom exclude 应该也行")],-1),W=n("h4",{id:"enableconfigurationproperties",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enableconfigurationproperties"},[n("span",null,[n("mark",null,"@EnableConfigurationProperties")])])],-1),H=n("strong",null,"因为这个类没有@Conponent，用这种方法放到 IOC 容器中才能用",-1),X=n("li",null,"场景：如果@ConfigurationProperties是在第三方包中，那么@component是不能注入到容器的。只有@EnableConfigurationProperties才可以注入到容器。 RedisCacheConfiguration配置kv的序列化的时候需要把其它配置也给拿上就需要CacheProperties放入容器使用",-1),G=n("li",null,[n("h4",{id:"configurationproperties",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#configurationproperties"},[n("span",null,"@ConfigurationProperties")])]),n("ul",null,[n("li",null,"解决：以前得IO流拿properties里的k v")])],-1),$=e('<p>​</p><ul><li><h4 id="import-componentscan" tabindex="-1"><a class="header-anchor" href="#import-componentscan"><span>@Import &amp; @ComponentScan</span></a></h4><ul><li>我使用的场景：配置类放在 common 模块，其它模块都来用这个配置类</li><li>导入组件默认组件名字是 com.example.boot.bean.Cat 全类名</li><li>也可以导入dependence jar里的class</li></ul></li><li><h4 id="postconstruct-1" tabindex="-1"><a class="header-anchor" href="#postconstruct-1"><span>@PostConstruct</span></a></h4><ul><li>场景：MyRabbitConfig对象创建完成以后，执行这个方法<code>rabbitTemplate.setConfirmCallback</code>用于设置确认回调 ConfirmCallback</li></ul></li></ul>',2),Q={id:"requestparam-pathparam-pathvariable等注解区别",tabindex:"-1"},Y={class:"header-anchor",href:"#requestparam-pathparam-pathvariable等注解区别"},Z={href:"https://blog.csdn.net/u011410529/article/details/66974974",target:"_blank",rel:"noopener noreferrer"},K=e(`<ul><li><h4 id="pathvariable-page" tabindex="-1"><a class="header-anchor" href="#pathvariable-page"><span>@PathVariable(&quot;page&quot;)</span></a></h4><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/{page}.html&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">listPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>使用@RequestParam时，URL是这样的：http://host:port/path?参数名=参数值</p><p>使用@PathVariable时，URL是这样的：http://host:port/path/参数值</p></li><li><h4 id="pathparam-发现post请求的话只能用这个来拿参数-注意参数过长拿不到需要用request类拿" tabindex="-1"><a class="header-anchor" href="#pathparam-发现post请求的话只能用这个来拿参数-注意参数过长拿不到需要用request类拿"><span>@PathParam 发现post请求的话只能用这个来拿参数 注意参数过长拿不到需要用request类拿</span></a></h4><ul><li><p>My：应该是Get URL有大小限制？ 也不对request不是拿到了吗</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span><span class="token string">&quot;imegse&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> imageBase64 <span class="token comment">//@PostMapping(&quot;/photo&quot;) 拿不到参数</span>
<span class="token class-name">String</span> channel <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;imegse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//能拿到</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><hr><ul><li><h4 id="builder" tabindex="-1"><a class="header-anchor" href="#builder"><span>@Builder</span></a></h4><ul><li><p>Lombok annotation为你的类生成相对略微复杂的构建器API，放随意参数的构造器 链式调用就行</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">&quot;hh&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">passWord</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h4 id="bean" tabindex="-1"><a class="header-anchor" href="#bean"><span>@Bean</span></a></h4><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//    @Autowired</span>
<span class="token comment">//    CacheProperties cacheProperties;  //因为下面是 @Bean 直接放参数用就行！</span>
    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//原来@Bean注解想容器注入对象的时候，会自动将容器中已经有的对象传入到@Bean注解的方法参数中</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这个参数能拿值？  这个方法就是给容器放东西，方法传的所有参数所有参数都会从容器中进行确定  所以会自动去IOC中拿</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h4 id="getmapping" tabindex="-1"><a class="header-anchor" href="#getmapping"><span>@GetMapping</span></a></h4><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//场景：return	String 内容是支付宝付款页面</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/aliPayOrder&quot;</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h4 id="componentscan-com-example-springbootapplication-scanbasepackages-com-example" tabindex="-1"><a class="header-anchor" href="#componentscan-com-example-springbootapplication-scanbasepackages-com-example"><span>@ComponentScan(&quot;com.example&quot;) -&gt; @SpringBootApplication(scanBasePackages = &quot;com.example&quot;)</span></a></h4></li><li><h4 id="configuration-proxybeanmethods-false-默认是true-告诉springboot这是一个配置类-配置文件" tabindex="-1"><a class="header-anchor" href="#configuration-proxybeanmethods-false-默认是true-告诉springboot这是一个配置类-配置文件"><span>@Configuration(proxyBeanMethods = false)//默认是true //告诉SpringBoot这是一个配置类 == 配置文件</span></a></h4><p>底层会有非常多这样的写法，为的就是加速容器启动过程，减少判断（前提：类组件之间无依赖关系）</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MyConfig</span> bean <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\`com.example.boot.config.MyConfig$$EnhancerBySpringCGLIB$$1@38fc34fd\`    默认是Full模式，每一次都从容器中拿       相对的还有Lite即false模式，为什么这么叫因为这样不用去容器中对照来一个返回一个！</span>
最佳实战：别人不依赖这些组件（<span class="token class-name">Person</span>里面拿<span class="token class-name">Pet</span>）就给调成<span class="token boolean">false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> bean<span class="token punctuation">.</span><span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最佳实战：</p><ul><li><p>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</p></li><li><p>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</p></li></ul></li><li><p>Mark！！！<mark>Bean的加载顺序</mark> 在spring ioc的过程中，</p><ul><li>1）优先解析@Component，@Service，@Controller...注解的类。</li><li>2）其次解析配置类，也就是@Configuration标注的类</li><li>3）最后开始解析配置类中定义的bean。</li></ul></li></ul></li></ul><p>但是tomXXX的条件注解依赖的是user01，user01是被定义的配置类中的， 所以此时配置类的解析无法保证先后顺序，就会出现不生效的情况。 me：所以才会有condition这些？</p><ul><li><h4 id="importresource-classpath-beans-xml" tabindex="-1"><a class="header-anchor" href="#importresource-classpath-beans-xml"><span>@ImportResource(&quot;classpath:beans.xml&quot;)</span></a></h4><ul><li>这里之所以要classpath，个人理解：resources不是相对路径</li><li>总有些老jar包或公司老配置需要的</li></ul></li><li><h4 id="controlleradvice" tabindex="-1"><a class="header-anchor" href="#controlleradvice"><span>@ControllerAdvice</span></a></h4><ul><li>基于 AOP 实现，不改变源代码增加原功能</li></ul></li><li><h4 id="restcontrolleradvice" tabindex="-1"><a class="header-anchor" href="#restcontrolleradvice"><span>@RestControllerAdvice</span></a></h4><blockquote><p><code>@RestControllerAdvice</code>是<code>@ControllerAdvice</code>的衍生注解，专门用于处理RESTful风格的控制器。与<code>@ControllerAdvice</code>类似， 使用<code>@RestControllerAdvice</code>的好处是，它不仅会处理异常，还会以RESTful风格返回响应，而不仅仅是视图。这对于构建RESTful API非常方便。</p></blockquote><ul><li><p>@RestControllerAdvice 是 Spring MVC 提供的一个注解，<strong>用于统一处理所有 Controller 层抛出的异常</strong>。当 Controller 层抛出异常时，可以使用 @RestControllerAdvice 注解的类来捕获并处理异常，从而对异常进行统一处理。</p></li><li><p>@RestControllerAdvice 注解的类通常会包含多个 @ExceptionHandler 注解的方法，每个 @ExceptionHandler 注解的方法用于处理不同类型的异常。例如，以下代码演示了如何使用 @RestControllerAdvice 注解处理 RuntimeException 类型的异常</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span>
                <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**总结：**通过 @RestControllerAdvice 注解，我们可以将所有 Controller 层抛出的异常集中处理，避免代码重复，提高代码复用性和可维护性。同时，由于 @RestControllerAdvice 注解是基于 AOP 实现的，因此可以很方便地添加全局异常处理逻辑，例如日志记录、邮件通知等。</p></li></ul></li><li><h4 id="servletcomponentscan" tabindex="-1"><a class="header-anchor" href="#servletcomponentscan"><span>@ServletComponentScan</span></a></h4><ul><li>Servlet（控制器）、Filter（过滤器）、Listener（监听器）可以直接通过@WebServlet、@WebFilter、@WebListener注解自动注册到Spring容器中，无需其他代码。</li></ul></li></ul><h2 id="_2-技术点" tabindex="-1"><a class="header-anchor" href="#_2-技术点"><span>2）技术点</span></a></h2><h3 id="_1-一些小点" tabindex="-1"><a class="header-anchor" href="#_1-一些小点"><span>1）一些小点</span></a></h3>`,7),nn=e(`<li><p>classpath 和 classpath* 区别：</p><ul><li>classpath：只会到你的class路径中查找找文件。 classpath*：不仅包含class路径，还包括jar文件中（class路径）进行查找</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>问题提出：
<span class="token comment">&lt;!-- 指定MyBatis Mapper文件的位置 --&gt;</span>    <span class="token comment">&lt;!-- 我就是这里配错了找了半天！！！注意加上 /*.xml --&gt;</span>
<span class="token comment">&lt;!-- 提出问题：在引入资源文件时，classpath 什么时候用，什么时候不用？  以前这个错误我踩过两次坑，找了很久！！！ --&gt;</span>
<span class="token comment">&lt;!--猜测：引用包时不加，引用具体文件时候加？--&gt;</span>

目前的答案：
classpath：只会到你的class路径中查找找文件;
classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找 ---- 够深入的吧
classpath路径是来引用文件的，在编译生成的项目下的bulid/classes/ 下具有的文件都是classpath 路径下的文件，都可以通过classpath：方法获取。
    如何获取项目类编译后的路径
    **String path = 类名.class.getClassLoader().getResource(&quot;&quot;).getPath();**
&quot;**/&quot; 表示的是任意目录； 
&quot;**/applicationContext-*.xml&quot; 表示任意目录下的以&quot;applicationContext-&quot;开头的XML文件。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我 download 了upupor的开源项目发现项目里的数据库敏感信息都是 \${} 方式给的！！！</p><ul><li><blockquote><p>在 Spring Boot 项目的 YAML 配置文件中，<code>\${}</code> 是用于引用外部属性或配置的占位符。你可以为这些占位符提供具体的值，以替换配置文件中的 <code>\${}</code> 表达式。</p><p>有几种方式可以给 <code>\${}</code> 占位符提供值：</p><ol><li><p>application.properties/application.yml 文件：在 Spring Boot 项目的 <code>src/main/resources</code> 目录下，你可以创建一个 <code>application.properties</code> 文件（或 <code>application.yml</code>，根据你的选择）来提供属性的具体值。例如，如果你在配置文件中有 <code>\${my.property}</code> 占位符，那么你可以在 <code>application.properties</code> 文件中添加以下内容：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>my.property=具体的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>命令行参数：你可以在启动项目时通过命令行参数来传递属性值。例如，使用以下命令启动 Spring Boot 项目，并为 <code>\${my.property}</code> 提供具体值： 【idea Environment variables 里面给也行！！！】</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>java -jar myproject.jar --my.property=具体的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>环境变量：你可以将属性值设置为环境变量，并在项目启动时读取这些环境变量。例如，将 <code>\${my.property}</code> 设置为环境变量 <code>MY_PROPERTY</code>，然后在项目启动时，它将自动读取该环境变量的值。</p></li></ol><p>这些是最常用的给 <code>\${}</code> 占位符提供值的方法。你可以根据实际需求选择适合的方式来提供属性的具体值。</p><p>需要注意的是，如果你在 <code>application.properties</code> 文件中定义了属性的默认值，那么当没有其他方式提供属性值时，将使用该默认值。例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>my.property=默认值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有其他方式提供 <code>\${my.property}</code> 的具体值，它将默认使用 &quot;默认值&quot;。</p><p>希望这可以帮助你给 Spring Boot 项目的 YAML 文件中的 <code>\${}</code> 占位符提供具体的值。如有进一步的疑问，请随时提问。</p></blockquote></li></ul></li>`,2),an={id:"springboot-因为默认加入了slf4j-api和logback的依赖-所以只需要添加lombok的依赖即可",tabindex:"-1"},sn={class:"header-anchor",href:"#springboot-因为默认加入了slf4j-api和logback的依赖-所以只需要添加lombok的依赖即可"},tn=n("mark",null,"Slf4j-api和logback",-1),en={href:"https://so.csdn.net/so/search?q=lombok&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},pn=n("ul",null,[n("li",null,"注意IDEA 2020.3以及之后的版本内置了lombok插件")],-1),on=e(`<li><p>在 Spring Boot 中，您可以使用 <code>logging.level</code> 属性来配置不同包或类的日志级别。</p><ul><li><p>通过配置 Spring Boot 的日志级别，您可以同时控制 MyBatis-Plus 和 MyBatis 的日志输出。</p></li><li><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.zzq.gulimall</span><span class="token punctuation">:</span> DEBUG
——————————————————————
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.example.distributedlock.dao</span><span class="token punctuation">:</span> debug <span class="token comment">#一定要加这一行指定目录，不然报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h4 id="spring-boot-2-默认连接池hikaricp-黑卡丽-光的意思很快-日本人发明。区分druid连接池为监控而生扩展点多" tabindex="-1"><a class="header-anchor" href="#spring-boot-2-默认连接池hikaricp-黑卡丽-光的意思很快-日本人发明。区分druid连接池为监控而生扩展点多"><span><mark>Spring Boot 2.+默认连接池HikariCP</mark> ”黑卡丽“，光的意思很快 日本人发明。区分Druid连接池为监控而生扩展点多..</span></a></h4></li><li><h4 id="spring-mvc-的默认json解析器便是-jackson" tabindex="-1"><a class="header-anchor" href="#spring-mvc-的默认json解析器便是-jackson"><span><mark>Spring MVC 的默认json解析器便是 Jackson</mark></span></a></h4><ul><li>如果用了 Nacos 会依赖导入 fastjson（雷神用了这个）</li></ul></li><li><h4 id="快速定位报错原因" tabindex="-1"><a class="header-anchor" href="#快速定位报错原因"><span>快速定位报错原因</span></a></h4><ul><li><img src="https://images.zzq8.cn/img/202210171647567.png" alt="image-20221017164745509" tabindex="0" loading="lazy"><figcaption>image-20221017164745509</figcaption></li></ul></li><li></li>`,5),ln=n("h3",{id:"_3-test-测试类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-test-测试类"},[n("span",null,"3）Test 测试类：")])],-1),cn={id:"org-junit-jupiter-api-test和org-junit-test区别",tabindex:"-1"},rn={class:"header-anchor",href:"#org-junit-jupiter-api-test和org-junit-test区别"},un={href:"https://blog.csdn.net/qq_36050981/article/details/119565383",target:"_blank",rel:"noopener noreferrer"},dn=n("ul",null,[n("li",null,[a("现在需要知道！主要是 spring boot "),n("mark",null,"2.2之前使用的是 Junit4 之后是 Junit5"),a("，还需知道他们两个有什么区别看网站！ "),n("ul",null,[n("li",null,"都要 public"),n("li",null,"@RunWith")])])],-1),kn={id:"关于-runwith-springrunner-class-的作用",tabindex:"-1"},mn={class:"header-anchor",href:"#关于-runwith-springrunner-class-的作用"},gn={href:"https://blog.csdn.net/qq_21108099/article/details/111496005",target:"_blank",rel:"noopener noreferrer"},vn=e(`<ul><li><p>SpringBoot 测试类 需要从容器中获取实例是需要加上该注解，否则空指针，管你是啥IDE。貌似是Junit4用的注解</p></li><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//不加@RunWith(SpringRunner.class)就取不到容器中的 Bean</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RestHighLevelClient</span> client<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//null</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),bn=e(`<li><h4 id="单元测试类中-初始化方法" tabindex="-1"><a class="header-anchor" href="#单元测试类中-初始化方法"><span>单元测试类中，初始化方法</span></a></h4><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//单元测试类中，初始化方法    alt+insert SetUpMethod</span>
<span class="token comment">//视频中是测 Jedis 用这个方法连 Redis</span>
<span class="token annotation punctuation">@BeforeEach</span>
<span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,1),hn={id:"补充-springboottest",tabindex:"-1"},fn={class:"header-anchor",href:"#补充-springboottest"},_n={href:"https://blog.csdn.net/wwwwwww31311/article/details/115461920",target:"_blank",rel:"noopener noreferrer"},yn=n("p",null,"我们新建 SpringBoot 程序发现 src 包和 test 包路径一开始初始化就是一样的！",-1),xn=n("ul",null,[n("li",null,"因为测试类包名得和主启动类一致才能跑测试类"),n("li",null,[a("如果不想修改包名，那么需要在注解上加上@SpringBootTest(classes = xxx.class) "),n("ul",null,[n("li",null,[a("但这里会产生额外的问题，因为此时springboot已经把该类当成一个独立的测试类了，这意味着这个测试类对应独立的IOC容器，所以此时我们无法注入到main包中的组件，案例如下,main包下的路径是com.sobot.demo7,而同理，test包下com.sobot.demo7路径下测试类，可以正常装配userMapper组件com.sobot.demo8路径下测试类，则根本无法找到userMapper这个组件 "),n("ul",null,[n("li",null,[n("img",{src:"https://img-blog.csdnimg.cn/f8be2ba0c5f64f779696924284214be8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Z6D5Zy-546L5a2Q5pmX,size_20,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述",tabindex:"0",loading:"lazy"}),n("figcaption",null,"在这里插入图片描述")])])])])])],-1),Sn={id:"_4-有参数的-bean-configuration注解",tabindex:"-1"},qn={class:"header-anchor",href:"#_4-有参数的-bean-configuration注解"},An={href:"https://codeantenna.com/a/6mscWp9KMx",target:"_blank",rel:"noopener noreferrer"},Cn=e(`<blockquote><p>：）以前竟然不知道</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//    @Autowired</span>
<span class="token comment">//    CacheProperties cacheProperties;  //因为下面是 @Bean 直接放参数用就行！</span>

    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//原来@Bean注解想容器注入对象的时候，会自动将容器中已经有的对象传入到@Bean注解的方法参数中</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这个参数能拿值？  这个方法就是给容器放东西，方法传的所有参数所有参数都会从容器中进行确定  所以会自动去IOC中拿</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-数据校验" tabindex="-1"><a class="header-anchor" href="#_5-数据校验"><span>5）数据校验</span></a></h3><p><a href="../gulimall/%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7#%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B">分布式高级</a></p><h3 id="_6-拦截器" tabindex="-1"><a class="header-anchor" href="#_6-拦截器"><span>6）拦截器</span></a></h3><p>实现步骤:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zzq<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span></span>CartIntercept</span>   #编写拦截器
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CartIntercept</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span>
    
<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zzq<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span>GulimallWebConfig</span>    #注册拦截器
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为什么InterceptorRegistry不需要调用addPathPatterns(&quot;/**&quot;)也可以拦截所有请求 我在源码看到的是 private final List&lt;String&gt; includePatterns = new ArrayList(); 不能理解为什么会默认拦截所有请求</p><p>InterceptorRegistry 是 Spring 框架中用于管理拦截器的注册表，其本身并不具备拦截请求的能力。实际上，InterceptorRegistry 中的拦截器在拦截请求时，是由 HandlerMapping 所管理的 HandlerExecutionChain 中的拦截器链来调用的。而 HandlerMapping 中的拦截器链的触发是由 RequestMappingHandlerMapping 实现的。</p><p>在 Spring MVC 中，所有请求都会被 RequestMappingHandlerMapping 处理，而 RequestMappingHandlerMapping 会在初始化时自动注册一个拦截器 HandlerInterceptorAdapter，用于拦截所有请求。所以，即使我们没有在拦截器中调用 addPathPatterns(&quot;/**&quot;) 方法来设置拦截路径，也能默认拦截所有请求。</p><p>在实际开发中，如果我们需要自定义拦截器，并且只拦截部分请求，可以使用 addPathPatterns 方法来指定拦截路径。如果需要拦截所有请求，则无需设置拦截路径，InterceptorRegistry 会默认将拦截器添加到拦截器链中。</p></blockquote><h3 id="_7-controller方法常用参数" tabindex="-1"><a class="header-anchor" href="#_7-controller方法常用参数"><span>7）Controller方法常用参数</span></a></h3><h4 id="_7-1-model-redirectattributes" tabindex="-1"><a class="header-anchor" href="#_7-1-model-redirectattributes"><span>7.1.Model / RedirectAttributes</span></a></h4><p>可以往 Thymeleaf 携带参数，模拟的 HttpSession</p><p>Model 数据是在请求域中的！ vs RedirectAttributes 重定向视图（addFlashAttribute方法代表只需要取一次！跳转取到后刷新页面就没了 | addAttribute():将数据放在url后面）</p><ul><li><p>重定向携带数据,利用session原理.将数据放在session中.</p></li><li><p>只要跳到下一个页面取出这个数据以后,session里面的数据就会删掉</p></li></ul><p><strong>问题：但是他是利用的session原理，所以后期我们需要解决分布式的session问题</strong></p><h5 id="_8-idea设置程序根目录" tabindex="-1"><a class="header-anchor" href="#_8-idea设置程序根目录"><span>8）idea设置程序根目录</span></a></h5><p>在 IntelliJ IDEA 中，你可以设置程序的根目录（Working Directory）来影响程序运行时的默认路径。这个设置决定了程序在启动时的默认工作目录。</p><p>以下是在 IntelliJ IDEA 中设置程序根目录的步骤：</p><ol><li>打开 IntelliJ IDEA，并打开你的项目。</li><li>在顶部菜单栏中，选择 &quot;Run&quot;（运行）菜单，然后选择 &quot;Edit Configurations&quot;（编辑配置）。</li><li>在弹出的窗口中，选择你要修改的运行配置（例如，一个 Java Application 或一个 Spring Boot Application）。</li><li>在右侧面板中，找到 &quot;Configuration&quot; 选项卡。</li><li>在 &quot;Working directory&quot;（工作目录）部分，选择 &quot;Specified&quot;（指定）选项。</li><li>点击 &quot;...&quot; 按钮，选择你想要设置为程序根目录的目录。</li><li>确认设置后，点击 &quot;OK&quot; 保存修改。</li></ol><p>现在，当你运行这个配置时，程序将使用你指定的目录作为根目录。在程序中使用相对路径时，它们将以这个根目录为基准。</p><p>请注意，这个设置仅影响程序在 IntelliJ IDEA 中运行时的默认工作目录，并不会改变程序在实际部署或运行环境中的行为。在实际部署时，程序的根目录可能由部署环境或命令行参数决定。</p><h3 id="_8-实现applicationcontextaware接口的作用" tabindex="-1"><a class="header-anchor" href="#_8-实现applicationcontextaware接口的作用"><span>8) 实现ApplicationContextAware接口的作用</span></a></h3><p>实现 <code>ApplicationContextAware</code> 接口的作用是允许一个类获取对 Spring 应用程序上下文（<code>ApplicationContext</code>）的访问权限。通过实现该接口，类可以获得对应用程序上下文的引用，从而能够进行更高级别的操作，例如获取和管理 Spring Bean、发布应用程序事件等。</p><p>具体来说，当一个类实现了 <code>ApplicationContextAware</code> 接口，它必须实现接口中的 <code>setApplicationContext()</code> 方法。Spring 在初始化该类的实例时，会自动调用 <code>setApplicationContext()</code> 方法，并将应用程序上下文作为参数传递给该方法。通过该方法，类可以将传递的应用程序上下文存储为一个成员变量，以便在需要时进行访问。</p><p>下面是一个示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextAware</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>即可在 <span class="token class-name">CcEmailUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span> 等没有被<span class="token class-name">Spring</span>管理的工具类中使用<span class="token class-name">Spring</span>对象
    <span class="token class-name">TrueSend</span> trueSend <span class="token operator">=</span> <span class="token class-name">SpringContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TrueSend</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过实现 <code>ApplicationContextAware</code> 接口，类可以直接访问应用程序上下文，从而获得更多的灵活性和功能。例如，可以根据需要获取其他 Bean 的引用、发布应用程序事件、访问配置属性等。</p><h3 id="_9-spring-静态资源启用版本控制" tabindex="-1"><a class="header-anchor" href="#_9-spring-静态资源启用版本控制"><span>9）Spring-静态资源启用版本控制</span></a></h3><blockquote><p>upupor blog Spring版本控制yaml+MinIO+Thymeleaf</p></blockquote><p>犹记毕业第一年时，公司每次发布完成后，都会在一个群里通知【版本更新，各部门清理缓存，有问题及时反馈】之类的话。归根结底就是资源缓存的问题，浏览器会将请求到的静态资源，如JS、CSS等文件缓存到用户本地，当用户再次访问时就不需要再次请求这些资源了，以此也是提升了用户体验。但是也正是因为这些资源缓存，导致客户端的静态文件往往不是当前最新版本。后来有同事增加了时间戳、随机数等，确实这也解决了客户端缓存的问题，但是却又带来了新的麻烦，导致每次访问都要请求服务器，无形中增加了服务器的压力。</p><p>https://www.cnblogs.com/laoyeye/p/10034617.html</p>`,30),wn=n("blockquote",null,[n("p",null,"Q&A"),n("link",{"th:href":"${ossStatic} + @{/semantic-ui/semantic.min.css}",type:"text/css",rel:"stylesheet"}),n("p",null,"Thymeleaf这里@{}会导致 .css 之前会拼接一串-99e54d8e467b26ef66ff560393a00091 为什么？")],-1),Bn=e(`<p>Thymeleaf中的<code>@{}</code>语法用于生成URL，并在URL中附加上下文路径。在你提供的示例中，<code>.css</code>之前附加的<code>-99e54d8e467b26ef66ff560393a00091</code>是一个哈希值，可能是由于你的应用程序或Thymeleaf的资源管理策略而生成的。</p><p>这种哈希值的添加通常是为了解决浏览器缓存的问题。当静态资源（如CSS文件）发生更改时，为了确保浏览器加载最新的版本而不使用缓存，可以通过在URL中添加哈希值来创建一个唯一的URL。当资源发生更改时，哈希值也会随之变化，从而强制浏览器重新加载资源。</p><p>在你的示例中，<code>\${ossStatic}</code>是一个变量，可能包含了资源的基本URL路径。而<code>@{/semantic-ui/semantic.min.css}</code>则使用了Thymeleaf的URL表达式生成相对于当前请求上下文的CSS文件URL。结合起来，生成的URL将是<code>\${ossStatic}</code>的值加上<code>/semantic-ui/semantic.min.css</code>，并附加上哈希值。</p><p>如果你想去除哈希值的附加，可以检查你的应用程序或Thymeleaf的资源管理配置，看是否有相关配置项控制哈希值的添加。具体配置方式可能因你所使用的框架或工具而异。</p><p>是由Spring配置控制的： 使用MD5生成版本号进行管理 <mark>资源名-md5 方式</mark></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token comment"># 静态资源启用版本控制</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">chain</span><span class="token punctuation">:</span>
      <span class="token key atrule">strategy</span><span class="token punctuation">:</span>
        <span class="token comment">#MD5实现</span>
        <span class="token key atrule">content</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">paths</span><span class="token punctuation">:</span> /<span class="token important">**</span>
          
          
注：第二种、版本号实现
<span class="token key atrule">spring</span><span class="token punctuation">:</span> 
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">chain</span><span class="token punctuation">:</span>
      <span class="token key atrule">strategy</span><span class="token punctuation">:</span>
        <span class="token key atrule">fixed</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">paths</span><span class="token punctuation">:</span> /mods/admin/<span class="token important">*.js</span>
          <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">20181128</span>
&lt;script src=&quot;/20181128/mods/admin/login.js&quot;<span class="token punctuation">&gt;</span>&lt;/script<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps: MD5（Message Digest Algorithm 5）是一种哈希函数，用于将任意长度的数据映射为固定长度的哈希值。因此，可以说MD5是通过哈希实现的。</p>`,7),jn=n("strong",null,"注",-1),Pn=n("code",null,"ResourceUrlEncodingFilter",-1),Rn={href:"http://docs.spring.io/spring/docs/4.3.3.RELEASE/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProvider.html",target:"_blank",rel:"noopener noreferrer"},En=e(`<h4 id="_9-1-minio处理" tabindex="-1"><a class="header-anchor" href="#_9-1-minio处理"><span>9.1.MinIO处理</span></a></h4><p>upupor博主处理方式为 py 改名用CLI上传文件</p><p>我这里就简单粗暴的把 MinIO 的文件全部改名 GPT：递归地处理当前文件夹及其所有子文件夹中的文件，并更改它们的文件名（在文件名的后缀名前附加&quot;-&lt;文件的MD5值&gt;&quot;）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> hashlib

<span class="token keyword">def</span> <span class="token function">calculate_md5</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    md5_hash <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">for</span> chunk <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            md5_hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
    <span class="token keyword">return</span> md5_hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">rename_files_with_md5</span><span class="token punctuation">(</span>folder_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 定义要处理的后缀名列表</span>
    allowed_extensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;.svg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.webp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.css&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.jpeg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.ico&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>folder_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> filename <span class="token keyword">in</span> files<span class="token punctuation">:</span>
            file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
            file_name<span class="token punctuation">,</span> file_ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>

            <span class="token comment"># 检查文件后缀名是否在允许的列表中</span>
            <span class="token keyword">if</span> file_ext<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> allowed_extensions<span class="token punctuation">:</span>
                md5_value <span class="token operator">=</span> calculate_md5<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
                new_filename <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>file_name<span class="token punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">{</span>md5_value<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>file_ext<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
                new_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> new_filename<span class="token punctuation">)</span>
                os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> new_file_path<span class="token punctuation">)</span>

<span class="token comment">## 获取当前文件夹路径</span>
current_folder <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## 调用函数递归处理文件夹中的文件</span>
rename_files_with_md5<span class="token punctuation">(</span>current_folder<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Mn={id:"_10-springboot-配置加载优先级详解",tabindex:"-1"},zn={class:"header-anchor",href:"#_10-springboot-配置加载优先级详解"},In={href:"https://blog.csdn.net/lazycheerup/article/details/122257003",target:"_blank",rel:"noopener noreferrer"},On=e(`<h4 id="_1-加载位置与顺序" tabindex="-1"><a class="header-anchor" href="#_1-加载位置与顺序"><span>1. 加载位置与顺序</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>file:./config/
file:./
classpath:/config/
classpath:/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>file: 指当前项目根目录</li><li>classpath: 指当前项目的resources目录</li></ul><h4 id="_2-q-a" tabindex="-1"><a class="header-anchor" href="#_2-q-a"><span>2. Q&amp;A</span></a></h4><p>Q: springboot项目同时有application.properties和application-default.properties配置文件，启动应用两个都会生效吗</p><p>A: 是的，Spring Boot应用程序同时拥有application.properties和application-default.properties配置文件时，启动应用程序时会同时生效。</p><p>先后顺序如下：</p><p>application.properties application-{active}.properties（例如，application-dev.properties、application-prod.properties） application-default.properties</p><p>详细：</p><blockquote><p><strong>综上，本地及Nacos配置中心共同加载顺序为</strong>：</p><ol><li>bootstrap.yaml</li><li>bootstrap.properties</li><li>bootstrap-{profile}.yaml</li><li>bootstrap-{profile}.properties</li><li>application.yaml</li><li>application.properties</li><li>application-{profile}.yaml</li><li>application-{profile}.properties</li><li>nacos配置中心共享配置（通过spring.cloud.nacos.config.shared-configs指定）</li><li>Nacos配置中心该服务配置（通过spring.cloud.nacos.config.prefix和spring.cloud.nacos.config.file-extension指定）</li><li>Nacos配置中心该服务-{profile}配置（通过spring.cloud.nacos.config.prefix和spring.cloud.nacos.config.file-extension、以及spring.profiles.active指定）</li></ol><p><strong>因此，配置生效覆盖关系：</strong></p><p>对于key名相同，后加载会覆盖掉前加载，故而最终为后加载的配置项生效！</p><p>对于key名不同，则直接生效（会加载，但不会被覆盖）；</p><p><strong>注意：不能理解为文件级整体覆盖，而仅是同名key会被后加载的键值覆盖。</strong></p><p>实测 application-default.properties 覆盖 application.properties</p></blockquote><p>ps:</p><ul><li><p>也就是说如果没有指定 {active} &amp; 如果有 default 那么它就会生效</p></li><li><p>如果你在 <code>application.properties</code> 中设置了 <code>spring.profiles.active=dev</code>，那么 <code>application-default.properties</code> 的属性值将不会生效，而是会根据当前活动的配置文件来加载对应的属性。</p></li><li><p>因此，application.properties文件的优先级高于application-default.properties文件。在同一个包下，如果存在同名的属性，则后者会覆盖前者（<mark>没有active的话两者都是会生效的</mark>）</p></li></ul><h2 id="_3-spring-循环依赖" tabindex="-1"><a class="header-anchor" href="#_3-spring-循环依赖"><span>3）Spring 循环依赖</span></a></h2><blockquote><p>PS：其实正确答案是开发人员做好设计，别让Bean循环依赖，但是没办法，面 试官不想听这个。</p><p>我们都知道，单例Bean初始化完成，要经历三步：<code>实例化、属性赋值、初始化</code> 使用、销毁</p><p><strong>注入就发生在第二步，属性赋值，结合这个过程，Spring 通过<code>三级缓存</code>解决了循环依赖：</strong> 采用了**“<code>提前暴露</code>”**的策略</p><ol><li>一级缓存 : Map singletonObjects，单例池，用于保存实例化、属 性赋值（注入）、初始化完成的 bean 实例</li><li>二级缓存 : Map earlySingletonObjects，早期曝光对象，用于保存实例化完成的 bean 实例</li><li>三级缓存 : Map&gt; singletonFactories，早期曝光对象工厂，用于保存 bean 创建工厂，以便于后面扩展有机会创建代理对象。</li></ol></blockquote><p>是什么：</p><blockquote><p>在 Spring 应用程序中，一个 Bean 可以依赖于另一个 Bean。当一个 Bean 依赖于另一个 Bean 时，Spring 会在容器中查找并注入该 Bean，以满足当前 Bean 的需求。这种依赖关系可以是单向的，也可以是循环的。循环依赖指的是两个或多个 Bean 之间相互依赖的情况。</p><p>举个例子，假设我们有两个 Bean：Bean A 和 Bean B。Bean A 依赖于 Bean B，而 Bean B 也依赖于 Bean A。这种情况下，Spring 容器会在实例化 Bean A 和 Bean B 时发现循环依赖，因为它们相互依赖，无法先创建一个 Bean，然后注入另一个 Bean。</p><p>为了解决这个问题，Spring 提供了一个机制，称为“循环依赖解析”。在循环依赖解析期间，Spring 容器会创建一个 Bean 的“早期实例”，然后注入它所依赖的 Bean 的引用。然后，Spring 会继续创建依赖于当前 Bean 的其他 Bean，直到创建完整个 Bean 图，然后将这些 Bean 实例化并注入它们所依赖的 Bean。</p><p>总的来说，Spring 的循环依赖解析机制可以帮助开发人员处理循环依赖的情况，但是需要注意的是，过多的循环依赖可能会导致性能问题，并且在解析过程中也可能出现一些不可预测的问题。因此，在设计 Spring 应用程序时，应该尽可能减少循环依赖的使用，并合理设计 Bean 之间的依赖关系。</p></blockquote><p>循环依赖解析是指 Spring 框架中解决循环依赖问题的过程。循环依赖指的是两个或多个 Bean 之间相互依赖的情况，这会导致在 Bean 实例化时出现无限递归的问题，从而导致应用程序启动失败。</p><p>在 Spring 容器中，<strong>Bean 的创建分为两个阶段：实例化和初始化</strong>。在实例化阶段，Spring 会为 Bean 创建一个空对象；在初始化阶段，Spring 会调用 Bean 的构造函数、Setter 方法和其他初始化方法，将 Bean 实例化并初始化。</p><p>在解决循环依赖问题时，Spring 采用了“提前暴露”的策略。具体来说，当 Spring 容器在实例化一个 Bean 时，如果发现该 Bean 依赖于另一个还未创建的 Bean，那么 Spring 会先为依赖的 Bean 创建一个“早期暴露的半成品实例”，然后将其注入到当前 Bean 中。这个“早期暴露的半成品实例”是一个未完成初始化的 Bean 实例，它只包含当前 Bean 的依赖项，还没有完成初始化。当所有 Bean 实例都创建完成后，Spring 容器会按照依赖关系将这些“半成品实例”逐个进行初始化，从而完成 Bean 实例化和初始化的过程。</p><p>需要注意的是，循环依赖解析的过程中可能会出现死循环的情况，因此 Spring 容器会设置一个默认值为 50 的解析深度限制，防止无限循环。如果超过了这个限制，Spring 会抛出异常，提示存在循环依赖的问题。</p><h2 id="_4-事件驱动-eventlistener" tabindex="-1"><a class="header-anchor" href="#_4-事件驱动-eventlistener"><span>4)事件驱动-@EventListener</span></a></h2><p>笔记：https://www.cnblogs.com/dafengdeai/articles/17073114.html</p><p>视频：https://www.bilibili.com/video/BV1Cd4y1q7Vm/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0</p><p>更好的视频：https://www.bilibili.com/video/BV1Wa4y1477d?p=3&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0</p><blockquote><p><mark>Spring、SpringBoot常用扩展特性之事件驱动</mark> 看代码demo Spring Boot 2 项目</p><p>一般搭配以下两个注解一起使用： <strong>@EventListener @Async</strong></p><ol><li>@0rder指定执行顺序在同步的情况下生效 看视频也可以搭配这个注解，加个权重 假如多个Listener消费谁先</li><li>@Async 异步执行需要 @EnableAsync 开启异步</li></ol></blockquote><blockquote><p>事件驱动:即跟随当前时间点上出现的事件,调动可用资源,执行相关任务,使不断出现的问题得以解决,防止事务堆积. 如:注册账户时会收到短信验证码,火车发车前收到提醒,预定酒店后收到短信通知等.如:浏宽器中点击按钮请求后台,鼠标点击变化内容,键盘输入显示数据,服务接收请求后分发请求等.在解决上述问题时,应用程序是由&quot;事件驱动运行的,这类程序在编写时往往可以采用相同的模型实现,我们可以将这种编程模型称为事件驱动模型. (PS:事件驱动模型其实是一种抽象模型,用于对由外部事件驱动系统业务逻辑这类应用程序进行建模.)</p></blockquote><p>debug走到一步，不懂</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">ApplicationEventPublisher</span> eventPublisher<span class="token punctuation">;</span>

<span class="token comment">//UNKNOWN @FunctionalInterface这里的作用是什么          @EventListener注解！！！！！？？？？</span>
eventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>sendEmailEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>后来懂了，上面是发布事件了              有相对于的方法监听消费这个事件：<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
    <span class="token annotation punctuation">@EventListener</span>
    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">EmailEvent</span> emailEvent<span class="token punctuation">)</span> 
    
<span class="token constant">PS</span>：方法参数需要和发布 sendEmailEvent 类型对应，   这样才是一一对应消费
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>重点就是这三个类，搞清就行！！！可以看自己写的代码 注意：ApplicationEvent 可以不实现所以重心其实就两个类</mark></p><ol><li>Spring事件驱动最基本的使用 <code>ApplicationEventPublisher</code>,<code>ApplicationEvent</code>,<code>ApplicationListener</code> （Spring抽象出了这基本的三个。 事件生产方、事件、事件消费方）</li><li>ApplicotionEventPublisher 子类 <code>ApplicationContext</code> （在启动类中这个常用一些applicationContext.publishEvent(new ApplicationEvent(this){})）</li><li>事件源、监听器需要被spring管理</li><li>监听器需要实现ApplicationListener&lt;ApplicotionEvent&gt; xd: 可注解！</li><li><strong>可体现事件源和监听器之间的松耦合仅依赖spring、ApplicationEvent</strong>（发布、监听两个类中都没有另一个的引用！）</li></ol><p>XD：</p><ol><li><p>publisher-生产者， Listener（注解到方法）-消费者 publishEvent几次，listener就会消费几次</p></li><li><p>ApplicationEvent 可以不实现，看顶层的这个接口源码其实也转成了 Object，但是按规范注释来说希望所有的事件类都最好实现 ApplicationEvent</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span><span class="token keyword">class</span>

<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
	

<span class="token comment">//所以事件类没有extends ApplicationEvent也行其实走的是这里</span>
<span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_5-springmvc的执行流程" tabindex="-1"><a class="header-anchor" href="#_5-springmvc的执行流程"><span>5）SpringMVC的执行流程</span></a></h2><ol><li>用户发起请求，请求先被 Servlet 拦截转发给 Spring MVC 框架</li><li>Spring MVC 里面的 DispatcherSerlvet 核心控制器，会接收到请求并转发给HandlerMapping</li><li>HandlerMapping 负责解析请求，根据请求信息和配置信息找到匹配的 Controller类，不过这里如果有配置拦截器，就会按照顺序执行拦截器里面的 preHandle方法</li><li>找到匹配的 Controller 以后，把请求参数传递给 Controller 里面的方法</li><li>Controller 中的方法执行完以后，会返回一个 ModeAndView，这里面会包括视图名称和需要传递给视图的模型数据</li><li>视图解析器根据名称找到视图，然后把数据模型填充到视图里面再渲染成 Html 内容返回给客户端</li></ol><h2 id="_6-cors-跨域" tabindex="-1"><a class="header-anchor" href="#_6-cors-跨域"><span>6）CORS 跨域</span></a></h2><blockquote><p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策</p><p><strong>其实，准确的来说，跨域机制是阻止了数据的跨域获取，不是阻止请求发送。</strong></p></blockquote><h4 id="目的-解决springboot跨域请求的问题" tabindex="-1"><a class="header-anchor" href="#目的-解决springboot跨域请求的问题"><span>目的：解决springboot跨域请求的问题</span></a></h4><h5 id="第一种-corsconfig" tabindex="-1"><a class="header-anchor" href="#第一种-corsconfig"><span>第一种 （CorsConfig ）</span></a></h5><p>配置 @Bean CorsFilter.class 实现全局跨域,自定义可以访问的地址</p><h5 id="第二种-注解方式" tabindex="-1"><a class="header-anchor" href="#第二种-注解方式"><span>第二种：注解方式</span></a></h5><p>@CrossOrigin</p><h2 id="oo-碰到过的问题" tabindex="-1"><a class="header-anchor" href="#oo-碰到过的问题"><span>OO）碰到过的问题</span></a></h2><blockquote><p>配置文件热部署：因为这个Bean是启动时加载的，并不是运行时候实时拿</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">#spring cache</span>
  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> <span class="token number">100000</span> <span class="token comment">#这里我想热部署，搞一下午  jrebel+devtools 都不行还得重启项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>静态资源访问不到，因为加了上下文路径</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">#会导致问题</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /yigo
    
<span class="token comment">#暂时用的是这个解决</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /static/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,47),Ln=n("p",null,"未解决：父 Module有",-1),Tn={href:"https://www.cnblogs.com/wandoupeas/p/spring-boot-configuration-processor-not-configured.html#!comments",target:"_blank",rel:"noopener noreferrer"},Dn=e(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>父有这个按道理子引入父应该也有
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>


但是子必须自己导入并加个 optional 才可以
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@import公共模块的实体类导致lombok的注解失效 Gulimall未解决不做了，是做到限流突然就这个问题不做了</p></blockquote><figure><img src="https://images.zzq8.cn/img/202302111407769.png" alt="image-20230211140746713" tabindex="0" loading="lazy"><figcaption>image-20230211140746713</figcaption></figure><p>今天重新导入这个项目时，看到 idea 的这个报错突然醒悟！！！看上面笔记当时为什么用它的场景</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                    有这个注解会导致 lombok 注解不能正常编译！！！要么加进来要么去掉这个注解！<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                    <span class="token generics"><span class="token punctuation">&lt;</span>annotationProcessorPaths<span class="token punctuation">&gt;</span></span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                        <span class="token generics"><span class="token punctuation">&lt;</span>path<span class="token punctuation">&gt;</span></span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>configuration<span class="token operator">-</span>processor<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.1</span><span class="token number">.8</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>path<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>annotationProcessorPaths<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><blockquote><p>多配置激活问题：active profiles 只要写application后面的名字就行，写全了反而失效！！！ https://segmentfault.com/q/1010000042312154 也可 --spring.profiles.active=app-bpdev (等同于在idea中配置 如下图位置)</p></blockquote><figure><img src="https://images.zzq8.cn/img/202308020858808.png" alt="image-20230802085814446" tabindex="0" loading="lazy"><figcaption>image-20230802085814446</figcaption></figure>`,8),Fn={id:"玩转-spring-全家桶",tabindex:"-1"},Jn={class:"header-anchor",href:"#玩转-spring-全家桶"},Vn={href:"https://time.geekbang.org/course/intro/100023501",target:"_blank",rel:"noopener noreferrer"},Nn=e('<blockquote><p>进 title link 看课程目录、课程介绍</p></blockquote><p>平板问题：</p><p>springboot datasource自动装配mysql数据源。。h2为什么不用配数据源</p><blockquote><p>项目需要有自己的parel如何处置springboot的parent</p></blockquote><p>spring-boot-dependencies 放到 &lt;denpendencyManagement&gt;</p><img src="https://images.zzq8.cn/img/202302231452941.png" alt="image-20230223145242628" style="zoom:25%;"><blockquote><p>CommandLineRunner 接口的作用</p></blockquote><p>CommandLineRunner 接口是 Spring Boot 中的一个接口，用于在应用启动后执行一些特定的任务。该接口只有一个方法 run()，当 Spring Boot 应用启动完成后，会自动执行 run() 方法。CommandLineRunner 接口常用于执行一些初始化任务，例如读取配置文件、初始化数据等。与之类似的还有另一个接口 ApplicationRunner，<code>不同之处在于它的 run() 方法接收的参数是一个 ApplicationArguments 对象，该对象封装了命令行参数的信息。</code>通常情况下，我们可以通过实现 CommandLineRunner 或 ApplicationRunner 接口，在 Spring Boot 应用启动后自动执行一些初始化任务。</p><p><strong>XD: 其实一样的，可能就是ApplicationArguments这个对象封装了更好操作 程序参数（Program arguments）而已。。。<code>args.getSourceArgs()</code></strong><strong>而 String... args其实一样可以拿参数！！！</strong></p><p>java -jar your-project.jar --param1=value1 --param2=value2 通过在 <code>java -jar</code> 命令后添加参数，<mark>-- 开头的这些参数被认为是程序参数（Program arguments）。 区分（Environment variables）</mark></p><p>以下几种方式都可以被@Value读取到:</p><h5 id="_1、vm-options" tabindex="-1"><a class="header-anchor" href="#_1、vm-options"><span>1、VM options</span></a></h5><p><code>java -jar -Dserver.port=8888 -Xms1024m demo.jar</code> 这种方式增加的参数是被设置到应用的系统属性中，可以使用System.getProperty(“server.port”)获取（可以在idea的idea VM options中配置，以空格分隔）</p><p><strong>VM options其实就是我们在程序中需要的运行时环境变量，它需要以-D或-X或-XX开头，每个参数使用空格分隔</strong> 使用最多的就是-Dkey=value设定系统属性值，比如-Dspring.profiles.active=dev3 -D（defintion）表示自定义参数</p><h5 id="_2、program-arguments" tabindex="-1"><a class="header-anchor" href="#_2、program-arguments"><span>2、Program arguments</span></a></h5><p><code>java -jar demo.jar --server.port=8888</code> 这种方式增加的参数是属于命令行参数，即会从springboot启动时的main方法的String[] args中作为参数传入（可以在idea的program arguments中配置，<strong>以空格分隔</strong>）</p><p><strong>Program arguments为我们传入main方法的字符串数组args[]，<mark>它通常以--开头</mark></strong>，如--spring.profiles.active=dev3</p><p>等价于-Dspring.profiles.active=dev3如果同时存在，以Program arguments配置优先</p><h5 id="_3、environment-variables" tabindex="-1"><a class="header-anchor" href="#_3、environment-variables"><span>3、Environment variables</span></a></h5><p>从操作系统的环境变量中读取 这种方式的参数即属于操作系统方面的，比如安装jdk时设置的环境变量，定义JAVA_HOME，也可以通过System.getenv(“JAVA_HOME”)获取，（可以在idea的VM Environment variables中配置，以;分隔）</p><p>Environment variables没有前缀，优先级低于VM options，即如果VM options有一个变量和Environment variable中的变量的key相同，则以VM options中为准。</p><h5 id="_4、通过项目中配置文件bootstrap-application文件载入" tabindex="-1"><a class="header-anchor" href="#_4、通过项目中配置文件bootstrap-application文件载入"><span>4、通过项目中配置文件bootstrap/application文件载入</span></a></h5><p>这种方式是在项目中配置的方式，比较常见</p><blockquote><p>h2数据库为什么不需要配置</p></blockquote><p>嵌入式数据库：H2数据库是一款嵌入式数据库，也就是说它可以被嵌入到Java应用程序中，作为Java程序的一个库。因此，H2数据库不需要独立的服务器进程，不需要额外的配置和管理，只需要在Java应用程序中进行简单的配置即可使用。</p><h3 id="配置多数据源" tabindex="-1"><a class="header-anchor" href="#配置多数据源"><span>配置多数据源</span></a></h3><blockquote><p>图片很清楚了</p></blockquote><p>我理解：重写三个bean 每加一个数据源就重写一遍放到 Spring Bean</p><ol><li>DataSourceProperties 这样即可在configuration配置我的数据源，区分开其他的加前缀</li><li>DataSource 通过上者的 API Create 数据源，大致就是initializeDataSourceBuilder方法通过 ClassLoader 拿 driverClassName 创建</li><li>PlatformTransactionManager 每个数据库都要设好自己对应的事务管理器</li></ol><img src="https://images.zzq8.cn/img/202302231721768.png" alt="image-20230223172146262" style="zoom:25%;">',30);function Un(Wn,Hn){const t=o("ExternalLinkIcon"),p=o("font");return c(),r("div",null,[d,n("blockquote",null,[n("p",null,[a("三刷总算想起做点笔记，这点很重要 "),n("a",k,[a("语雀官方笔记"),s(t)]),a(" 重点看源码讲解的视频、Web开发这一章")]),n("p",null,[n("a",m,[a("每导入一个 starter 改写哪些配置直接看官网！！！有些什么配置一目了然！"),s(t)])]),g,v,b,h]),f,n("p",null,[n("a",_,[a("Spring 生态很庞大"),s(t)]),a("：细数自己用过的。微观是Spring框架 宏观是一套解决方案生态圈！")]),n("ul",null,[y,x,S,n("li",null,[a("Spring Data (JDBC、JPA、Redis "),n("a",q,[a("implementation"),s(t)]),a(" for Spring 3.1 cache abstraction)")]),A,C]),w,n("h4",B,[n("a",j,[n("span",null,[n("a",P,[a("2.1.SpringBoot优点"),s(t)])])])]),R,n("p",null,[a("陌生的两个东西："),n("a",E,[a("听视频老师讲讲"),s(t)])]),M,n("p",null,[n("a",z,[a("第一季：SpringBoot2核心技术-基础入门"),s(t)])]),n("p",null,[n("a",I,[a("Spring注解驱动"),s(t)])]),n("ul",null,[O,n("li",null,[L,n("ul",null,[n("li",null,[a("1）必须把当前类加入spring的容器管理@Component，注意要在主启动类下，测试类的话用SpringBoot的测试注解，这个也分4/5注意。（容易忽略，不加 ["),n("a",T,[a("貌似"),s(t)]),a("] 得到的为 null）")]),D,n("li",null,[a("如果想要注入静态 "),n("a",F,[a("spring @value 注入static 注入静态变量方法"),s(t)])]),J])]),n("li",null,[n("h4",V,[n("a",N,[n("span",null,[a("@SpringBootApplication("),s(p,{color:"red"},{default:i(()=>[a("exclude = DataSourceAutoConfiguration.class")]),_:1}),a(")")])])]),U]),n("li",null,[W,n("ul",null,[n("li",null,[a("说白了 @"),s(p,{color:"red"},{default:i(()=>[a("Enable")]),_:1}),a("ConfigurationProperties 相当于把使用 @ConfigurationProperties 的类进行了一次注入 "),H,a(" 只有容器中的组件才能有SpringBoot提供的强大的功能")]),X])]),G]),$,n("blockquote",null,[n("h1",Q,[n("a",Y,[n("span",null,[n("a",Z,[a("@RequestParam，@PathParam，@PathVariable等注解区别"),s(t)])])])])]),K,n("ul",null,[nn,n("li",null,[n("h4",an,[n("a",sn,[n("span",null,[a("SpringBoot,因为默认加入了"),tn,a("的依赖,所以只需要添加"),n("a",en,[a("lombok"),s(t)]),a("的依赖即可.")])])]),pn]),on]),ln,n("ul",null,[n("li",null,[n("h4",cn,[n("a",rn,[n("span",null,[n("mark",null,[n("a",un,[a("org.junit.jupiter.api.Test和org.junit.Test区别"),s(t)])])])])]),dn]),n("li",null,[n("h4",kn,[n("a",mn,[n("span",null,[n("a",gn,[a("关于@RunWith(SpringRunner.class)的作用"),s(t)])])])]),vn]),bn]),n("h5",hn,[n("a",fn,[n("span",null,[n("a",_n,[a("补充：@SpringBootTest"),s(t)])])])]),yn,xn,n("h3",Sn,[n("a",qn,[n("span",null,[n("mark",null,[n("a",An,[a("4）有参数的@Bean，@Configuration注解"),s(t)])])])])]),Cn,wn,Bn,n("p",null,[jn,a(" 实现该功能的是"),Pn,a("，它在模板运行期会重写资源链接，Thymeleaf，Velocity和FreeMarker会自动配置该filter，JSP需要手动配置。其他模板引擎还没自动支持，不过你可以使用"),n("a",Rn,[a("ResourceUrlProvider"),s(t)]),a("自定义模块宏或帮助类。")]),En,n("h3",Mn,[n("a",zn,[n("span",null,[a("10. "),n("a",In,[a("SpringBoot 配置加载优先级详解"),s(t)])])])]),On,n("blockquote",null,[Ln,n("p",null,[n("a",Tn,[a("网上还有个解决方法不理解但可行!<path>"),s(t)]),a(" 看下面会出其它问题")])]),Dn,n("h2",Fn,[n("a",Jn,[n("span",null,[n("a",Vn,[a("玩转 Spring 全家桶"),s(t)])])])]),Nn])}const $n=l(u,[["render",Un],["__file","SpringBoot.html.vue"]]),Qn=JSON.parse('{"path":"/studynotes/JavaFramework/SpringBoot.html","title":"@RequestParam，@PathParam，@PathVariable等注解区别","lang":"zh-CN","frontmatter":{"description":"SpringBoot2 三刷总算想起做点笔记，这点很重要 语雀官方笔记 重点看源码讲解的视频、Web开发这一章 每导入一个 starter 改写哪些配置直接看官网！！！有些什么配置一目了然！ 还有自动化配置文档，这个倒idea双shift找properties也行 看到了P25，由于求职形势逼迫。搁浅... 做项目快速上手能干，往后再回头了 补充面试常...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/JavaFramework/SpringBoot.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:title","content":"@RequestParam，@PathParam，@PathVariable等注解区别"}],["meta",{"property":"og:description","content":"SpringBoot2 三刷总算想起做点笔记，这点很重要 语雀官方笔记 重点看源码讲解的视频、Web开发这一章 每导入一个 starter 改写哪些配置直接看官网！！！有些什么配置一目了然！ 还有自动化配置文档，这个倒idea双shift找properties也行 看到了P25，由于求职形势逼迫。搁浅... 做项目快速上手能干，往后再回头了 补充面试常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.zzq8.cn/img/202209011803186.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-15T14:45:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-15T14:45:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"@RequestParam，@PathParam，@PathVariable等注解区别\\",\\"image\\":[\\"https://images.zzq8.cn/img/202209011803186.png\\",\\"https://images.zzq8.cn/img/202209012132180.png\\",\\"https://images.zzq8.cn/img/202302171158502.png\\",\\"https://images.zzq8.cn/img/202209012205178.png\\",\\"http://images.zzq8.cn/img/928164d48bbf4019a6a5131fd4cdfec9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\\",\\"http://images.zzq8.cn/img/062d90e772644ee9962185234ee6d12e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp\\",\\"https://images.zzq8.cn/img/202210171647567.png\\",\\"https://img-blog.csdnimg.cn/f8be2ba0c5f64f779696924284214be8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5Z6D5Zy-546L5a2Q5pmX,size_20,color_FFFFFF,t_70,g_se,x_16\\",\\"https://images.zzq8.cn/img/202302111407769.png\\",\\"https://images.zzq8.cn/img/202308020858808.png\\"],\\"dateModified\\":\\"2024-05-15T14:45:27.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"SpringBoot2","slug":"springboot2","link":"#springboot2","children":[]},{"level":2,"title":"------基础入门------","slug":"基础入门","link":"#基础入门","children":[]},{"level":2,"title":"一、Spring与SpringBoot","slug":"一、spring与springboot","link":"#一、spring与springboot","children":[{"level":3,"title":"1.Spring能做什么","slug":"_1-spring能做什么","link":"#_1-spring能做什么","children":[]},{"level":3,"title":"2.为什么用SpringBoot","slug":"_2-为什么用springboot","link":"#_2-为什么用springboot","children":[]}]},{"level":2,"title":"二、自动配置","slug":"二、自动配置","link":"#二、自动配置","children":[{"level":3,"title":"1.依赖管理","slug":"_1-依赖管理","link":"#_1-依赖管理","children":[]},{"level":3,"title":"2.自动配置（重要）","slug":"_2-自动配置-重要","link":"#_2-自动配置-重要","children":[]},{"level":3,"title":"3.自动配置-实践","slug":"_3-自动配置-实践","link":"#_3-自动配置-实践","children":[]}]},{"level":2,"title":"Ⅰ、Spring 学习","slug":"i、spring-学习","link":"#i、spring-学习","children":[{"level":3,"title":"1.Spring提供的IOC容器实现的两种方式（两个接口）","slug":"_1-spring提供的ioc容器实现的两种方式-两个接口","link":"#_1-spring提供的ioc容器实现的两种方式-两个接口","children":[]},{"level":3,"title":"2.IOC操作Bean管理","slug":"_2-ioc操作bean管理","link":"#_2-ioc操作bean管理","children":[]},{"level":3,"title":"3.Bean生命周期","slug":"_3-bean生命周期","link":"#_3-bean生命周期","children":[]},{"level":3,"title":"4.AOP","slug":"_4-aop","link":"#_4-aop","children":[]},{"level":3,"title":"5.Spring 事务","slug":"_5-spring-事务","link":"#_5-spring-事务","children":[]},{"level":3,"title":"6.设计模式","slug":"_6-设计模式","link":"#_6-设计模式","children":[]},{"level":3,"title":"7.哪些模块组成","slug":"_7-哪些模块组成","link":"#_7-哪些模块组成","children":[]}]},{"level":2,"title":"------分割线------","slug":"分割线","link":"#分割线","children":[]},{"level":2,"title":"1）常用注解","slug":"_1-常用注解","link":"#_1-常用注解","children":[]},{"level":2,"title":"2）技术点","slug":"_2-技术点","link":"#_2-技术点","children":[{"level":3,"title":"1）一些小点","slug":"_1-一些小点","link":"#_1-一些小点","children":[]},{"level":3,"title":"3）Test 测试类：","slug":"_3-test-测试类","link":"#_3-test-测试类","children":[]},{"level":3,"title":"4）有参数的@Bean，@Configuration注解","slug":"_4-有参数的-bean-configuration注解","link":"#_4-有参数的-bean-configuration注解","children":[]},{"level":3,"title":"5）数据校验","slug":"_5-数据校验","link":"#_5-数据校验","children":[]},{"level":3,"title":"6）拦截器","slug":"_6-拦截器","link":"#_6-拦截器","children":[]},{"level":3,"title":"7）Controller方法常用参数","slug":"_7-controller方法常用参数","link":"#_7-controller方法常用参数","children":[]},{"level":3,"title":"8) 实现ApplicationContextAware接口的作用","slug":"_8-实现applicationcontextaware接口的作用","link":"#_8-实现applicationcontextaware接口的作用","children":[]},{"level":3,"title":"9）Spring-静态资源启用版本控制","slug":"_9-spring-静态资源启用版本控制","link":"#_9-spring-静态资源启用版本控制","children":[]},{"level":3,"title":"10. SpringBoot 配置加载优先级详解","slug":"_10-springboot-配置加载优先级详解","link":"#_10-springboot-配置加载优先级详解","children":[]}]},{"level":2,"title":"3）Spring 循环依赖","slug":"_3-spring-循环依赖","link":"#_3-spring-循环依赖","children":[]},{"level":2,"title":"4)事件驱动-@EventListener","slug":"_4-事件驱动-eventlistener","link":"#_4-事件驱动-eventlistener","children":[]},{"level":2,"title":"5）SpringMVC的执行流程","slug":"_5-springmvc的执行流程","link":"#_5-springmvc的执行流程","children":[]},{"level":2,"title":"6）CORS 跨域","slug":"_6-cors-跨域","link":"#_6-cors-跨域","children":[]},{"level":2,"title":"OO）碰到过的问题","slug":"oo-碰到过的问题","link":"#oo-碰到过的问题","children":[]},{"level":2,"title":"玩转 Spring 全家桶","slug":"玩转-spring-全家桶","link":"#玩转-spring-全家桶","children":[{"level":3,"title":"配置多数据源","slug":"配置多数据源","link":"#配置多数据源","children":[]}]}],"git":{"createdTime":1712997543000,"updatedTime":1715784327000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":2},{"name":"MiniPC","email":"1024zzq@gmail.com","commits":2}]},"readingTime":{"minutes":48.92,"words":14676},"filePathRelative":"studynotes/JavaFramework/SpringBoot.md","localizedDate":"2024年4月13日","autoDesc":true}');export{$n as comp,Qn as data};
