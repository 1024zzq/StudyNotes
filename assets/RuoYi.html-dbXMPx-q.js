import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as n}from"./app-BPiRSQt3.js";const e={},l=n(`<h1 id="ruoyi-vue" tabindex="-1"><a class="header-anchor" href="#ruoyi-vue"><span>RuoYi-Vue</span></a></h1><blockquote><p>该项目没用 MP，整完这个可以再整 <a href="https://doc.ruoyi.vip/ruoyi-cloud/" target="_blank" rel="noopener noreferrer">RuoYi-Cloud</a></p><p>基于SpringBoot、Spring Security、Jwt、Vue的前后端分离的后台管理系统 【权限管理系统】</p><p>楠哥的太浅了，粗略过了一遍 现在在过 <a href="https://www.bilibili.com/video/BV1zm4y1A7yQ?p=7&amp;spm_id_from=pageDriver&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0" target="_blank" rel="noopener noreferrer">王清江</a> 的 约等于 26 h 26/3=9 哪些点想看就可以看他<a href="https://mp.weixin.qq.com/mp/appmsgalbum?search_click_id=4558257005716448117-1704794396839-8017893460&amp;__biz=Mzg5OTgxOTg0Ng==&amp;action=getalbum&amp;album_id=2441331662295973890#wechat_redirect" target="_blank" rel="noopener noreferrer">公众号的讲义</a></p></blockquote><h1 id="_1-验证码" tabindex="-1"><a class="header-anchor" href="#_1-验证码"><span>1.验证码</span></a></h1><blockquote><p>本来想重写 Controller 了解验证码 IO 流的形式的～</p></blockquote><p>验证码生成使用了google kaptcha的验证码组件，没有重复造轮子</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;captchaProducerMath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Producer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> captchaProducerMath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 核心方法 --&gt; 返回一个数学表达式类似于： 5-1=?@4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这里的验证码生成使用了google kaptcha的验证码组件，没有重复造轮子，具体的生成逻辑作者重写了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这里生成表达式的方法（重写）在 com.ruoyi.framework.config包下的KaptchaTextCreator验证码文本生成器类			</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> capText </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> captchaProducerMath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createText</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">----------------------------</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Producer 接口下就两个方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">   *</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BufferedImage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> var1)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      //9-8=?@1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">   *</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createText</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //BufferedImage.class  一张图！</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-1-redis-处理" tabindex="-1"><a class="header-anchor" href="#_1-1-redis-处理"><span>1.1.Redis 处理</span></a></h2><p>Redis 写入两个内容：</p><ol><li><p><code>sys_config:sys.account.captchaEnabled</code></p><ul><li><p>configService.selectCaptchaEnabled(); // XD：这里是否开启状态也会写入 Redis</p></li><li><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;selectConfig&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> parameterType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;SysConfig&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> resultMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;SysConfigResult&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    -- XD: 学到一招，相当于字符串拼接   fragment   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">include</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> refid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;selectConfigVo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">include</span><span style="--shiki-light:#6F42C1;--shiki-dark:#D19A66;"> refid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;sqlwhereSearch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>captcha_codes:e67884e45c464d418284441ab707b7b6</code></p><ul><li>验证码 <code>1+1=?@2</code> 答案 2 会写入 Redis， 1+1=? 会以流的形式转成图片给前端 【问题：登录的时候怎么把答案的key再带回给后端？ 获取验证码的时候顺便把uuid也给了前端 前端Vue data部分直接给值！看 <a href="#1.2.%E5%89%8D%E7%AB%AF">1.2.前端</a> 代码块】 这个点谷粒商城雷神好像是直接用个隐藏的input实现的，这里直接就 vue data() 部分有个 uuid 直接赋值</li></ul></li></ol><h2 id="_1-2-前端" tabindex="-1"><a class="header-anchor" href="#_1-2-前端"><span>1.2.前端</span></a></h2><blockquote><p>一套流程都是从前端发起，不搞懂前端运转就会 <strong>不明不白</strong></p><p>拿验证码请求举例：<code>login.vue（getCodeImg方法封装到login.js） -&gt; login.js(request同理) -&gt; request.js</code> 之所以这样跳，是因为封装了</p></blockquote><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      codeUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      loginForm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        username</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        password</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;admin123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        rememberMe</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        code</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        uuid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">      loginRules</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        username</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">required</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;blur&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;请输入您的账号&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        ],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">      ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    getCodeImg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">captchaEnabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">captchaEnabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">captchaEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">captchaEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">codeUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;data:image/gif;base64,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">loginForm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uuid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//存在Vue的data里面的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-1-vue-baseurl" tabindex="-1"><a class="header-anchor" href="#_1-2-1-vue-baseurl"><span>1.2.1.Vue baseURL</span></a></h3><blockquote><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 创建axios实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> service</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> axios</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // axios中请求配置有baseURL选项，表示请求URL公共部分   【XD:这个很重要，所有URL Request前面加的一层的公共前缀】</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  baseURL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">VUE_APP_BASE_API</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 超时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>.env.production 文件：<code>VUE_APP_BASE_API = &#39;/dev-api&#39;</code></p><p>导致所有请求都会带上 http://localhost**/dev-api**/captchaImage</p></blockquote><h4 id="问题一-env-development" tabindex="-1"><a class="header-anchor" href="#问题一-env-development"><span>问题一：.env.development</span></a></h4><blockquote><p>Q: 为什么用的是 .env.development 文件的配置呢？</p></blockquote><p>A: 您使用<code>npm run dev</code>命令启动开发服务器时，Vue.js会自动加载<code>.env.development</code>文件的配置，并将其中定义的环境变量应用于开发环境。您无需手动判断使用哪个配置文件，Vue.js会自动处理这些细节。</p><h4 id="问题二-vue-config-js-proxy" tabindex="-1"><a class="header-anchor" href="#问题二-vue-config-js-proxy"><span>问题二：vue.config.js -&gt; proxy</span></a></h4><p>标准的：配置反向代理服务器</p><blockquote><p>Q: http://localhost/dev-api/captchaImage 前端80，后端8080 这里没看到端口，Vue获取图片是请求的前端还是后端？</p></blockquote><p>URL 请求前端，通过<strong>反向代理</strong>映射到后端 为什么呢？ -&gt; 巧妙解决跨域问题，这里没用 Nginx</p><p>当然解决跨域也可以在后端处理，这不过这里前端处理掉了</p><h5 id="仍然疑惑" tabindex="-1"><a class="header-anchor" href="#仍然疑惑"><span>仍然疑惑：</span></a></h5><p>那前端逻辑处理还不是要走 8080 要跨域，为什么F12调试地址栏不出来 这里不就又跨域了吗？ 还不是从80到8080请求</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // detail: https://cli.vuejs.org/config/#devserver-proxy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      [</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">VUE_APP_BASE_API</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">\`http://localhost:8080\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        changeOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        pathRewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;^&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">VUE_APP_BASE_API</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置 proxy 理解相当于平替了一下 Nginx 充当了一会代理服务器。但是真实环境更推荐使用 Nginx（专业）</p><blockquote><p>Q: 这段代码能够处理跨域问题是因为它通过配置代理将请求转发到指定的目标URL。</p></blockquote><p>在开发环境中，默认情况下，前端应用运行在一个开发服务器上，而后端 API 通常运行在另一个服务器上，两者的域名或端口不同，因此会涉及到跨域请求。</p><p><strong>通过配置代理，将前端应用发送的请求转发到目标URL，就可以绕过浏览器的同源策略，实现跨域请求</strong></p><blockquote><p>Q: 所以vue配置了proxy相当于部分替代了nginx的功能？相当于一个代理帮你去请求了8080的后端服务</p></blockquote><p><strong>是的，配置Vue的代理相当于在开发环境下使用一个轻量级的代理服务器，帮助前端应用将请求转发到后端服务。这种代理功能可以部分替代Nginx等反向代理服务器的功能。</strong></p><p>通过Vue的代理配置，前端应用可以直接发送请求到代理服务器（一般默认为开发服务器的端口，比如80端口），然后代理服务器会将这些请求转发到后端服务（比如8080端口）上。</p><p>代理服务器会处理跨域请求，并在转发请求时修改请求头等信息，确保请求能够成功到达后端服务，并将后端服务的响应返回给前端应用。</p><p>这种代理配置的好处是，在开发环境下，前端开发人员可以直接通过代理服务器与后端服务进行交互，无需担心跨域问题，简化了开发过程。</p><p><strong>然而，需要注意的是，<mark>Vue的代理只在开发环境下起作用</mark>，用于方便地进行开发和调试。在生产环境中，应该使用真正的反向代理服务器（如Nginx）来处理前后端的请求转发和跨域问题。</strong></p><p>【因为：然而，在生产环境中，Vue的代理配置不会生效。在生产环境中，前端应用通常会经过打包构建，生成静态文件，然后部署到一个独立的Web服务器（如Nginx、Apache等）上。这时候，前端应用和后端API处于不同的域名或端口，需要使用真正的反向代理服务器来处理请求转发和跨域问题。】 所以：感觉还是能用的只要在一台服务器上还是保持这种情况</p><blockquote><p>Q: vue生产环境我也想配置proxy解决代理可以吗</p></blockquote><p>XD: 应该是行的，只是不推荐</p><p>在Vue的生产环境中，配置代理（proxy）并不是一个常见或推荐的做法。Vue的代理配置主要是为了在开发环境下方便调试和解决跨域问题。</p><p>在生产环境中，建议使用适当的反向代理服务器（如Nginx）来处理前端应用和后端服务之间的请求转发和代理。反向代理服务器可以提供更强大和灵活的功能，同时具有更高的性能和稳定性。</p><h1 id="_2-登陆" tabindex="-1"><a class="header-anchor" href="#_2-登陆"><span>2.登陆</span></a></h1><p>后端逻辑三步：</p><ol><li>校验验证码</li><li>校验密码</li><li>生成 Token 给前端（TODO 作用）</li></ol><p>使用异步任务管理器，结合线程池，实现了异步的操作日志记录，和业务逻辑实现异步解耦合。 XD: <code>ScheduledThreadPoolExecutor</code></p><p>三个 XHR：</p><ol><li>http://localhost:1024/dev-api/login</li><li>getInfo (前端每一个页面跳转都要执行，在全局路由实现) <ul><li>获取当前用户的角色和权限信息，存储到 Vuex 中 <ul><li>vuex：Vue提供的状态管理工具，用于统一管理我们项目中各种数据的交互和重用，存储我们需要用到数据对象。</li></ul></li></ul></li><li>getRouters <ul><li>菜单 Entry 信息</li><li>recursionFn 递归实现，parentID 控制父子关系形成好树状结构</li></ul></li></ol><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h2><p>AsyncFactory.class 发现使用 API 方式获取 Bean</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * XD：这里是因为本类只是个工具类，没有加 @Component 托管到 Spring    所以用这种 API 方式获取 Bean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 使用 SpringUtils.getBean(ISysLogininforService.class) 可以在任何地方手动获取 Bean 对象，不受 Spring 容器的控制。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 而 @Autowired 注解需要在受 Spring 管理的类中使用，由 Spring 容器负责注入依赖。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 插入数据  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SpringUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ISysLogininforService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">insertLogininfor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(logininfor);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-用户管理" tabindex="-1"><a class="header-anchor" href="#_3-用户管理"><span>3.用户管理</span></a></h1><blockquote><p>菜单栏的东西大体都一样的，分析了这一个其他都差不多 这里system/user 有 list &amp; tree 两个数据要获取</p><p>http://localhost:1024/dev-api/system/user/list?pageNum=1&amp;pageSize=10</p></blockquote><h2 id="_3-1-list-centerpanel" tabindex="-1"><a class="header-anchor" href="#_3-1-list-centerpanel"><span>3.1.List-centerPanel</span></a></h2><p>这里的 pageNum &amp; pageSize 是通过工具类 ServletUtils 原生方式获取的：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getRequestAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">pageDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setPageNum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Convert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(PAGE_NUM), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">pageDomain</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setPageSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Convert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ServletUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(PAGE_SIZE), </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-tree-leftpanel" tabindex="-1"><a class="header-anchor" href="#_3-2-tree-leftpanel"><span>3.2.Tree-LeftPanel</span></a></h2><p>同路由菜单一样 recursionFn 递归</p><h2 id="ps-pagehelper" tabindex="-1"><a class="header-anchor" href="#ps-pagehelper"><span>PS：PageHelper</span></a></h2><p>分页数据使用的是：Mybatis + PageHelper</p><p><code>PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);</code></p><p>setReasonable 修正参数的作用：</p><p>PageHelper 中的 reasonable 对参数进行逻辑处理，保证参数的正确性，</p><p>pageNum = 0/-1, 就修正为 pageNum = 1</p><p>CURD-URD 略。。</p><h1 id="_4-强退" tabindex="-1"><a class="header-anchor" href="#_4-强退"><span>4.强退</span></a></h1><blockquote><p>在 Boke 有些系统也有这个功能，这里也有感兴趣学一下</p></blockquote><ol><li>删 Redis 用户信息根据token key删（简单删除就行）</li><li>每个请求会经过过滤器进行权限校验 token</li></ol><h1 id="_5-限流" tabindex="-1"><a class="header-anchor" href="#_5-限流"><span><a href="https://mp.weixin.qq.com/s/g-aB24n31pZuGPSgqrsqCA" target="_blank" rel="noopener noreferrer">5.限流</a></span></a></h1><p>分为 全局限流 vs ip限流</p><blockquote><p><code>RateLimiterAspect.class RateLimiter</code></p><p>用的 Redis 记录次数以及 TTL 底层使用的是 AOP 明面是一个注解加到置顶 API 限流</p></blockquote><p>service：<code>lua</code> 对redis 执行 incr，自增到注解指定的 100 时候就不自增直接 return</p><p>限流部分代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Aspect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> RateLimiterAspect</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Before</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;@annotation(rateLimiter)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">JoinPoint</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> point</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">RateLimiter</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> rateLimiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JoinPoint point 这个类可以获取 AOP 前置通知（Before Advice）注解标注的类名及其方法名当Redis的key</p><p>Redis Key： <code>rate_limit:com.ruoyi.web.controller.system.SysUserController-list</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">MethodSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (MethodSignature) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">point</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Method</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> method </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> signature</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> targetClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getDeclaringClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">stringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">targetClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> stringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-定时任务" tabindex="-1"><a class="header-anchor" href="#_5-定时任务"><span>5.定时任务</span></a></h1><p>主要迷惑前端页面配置好到数据库，后端quartz具体怎么执行的</p><ol><li>项目启动的时候就会执行数据库已有的：通过 <code>@PostConstruct</code> 注解 轮询库然后 createScheduleJob</li><li>新增则 ScheduleUtils.<em>createScheduleJob</em>(scheduler, job);</li></ol><h1 id="_6-防止重复提交过滤" tabindex="-1"><a class="header-anchor" href="#_6-防止重复提交过滤"><span>6.<a href="https://mp.weixin.qq.com/s?__biz=Mzg5OTgxOTg0Ng==&amp;mid=2247484003&amp;idx=1&amp;sn=0524c11d551a34866bb31148ff0d199a&amp;chksm=c04c324af73bbb5c9861aa31289d5545fb3b5a1984932926b0010fa263c2ded7006b539e5972&amp;scene=178&amp;cur_album_id=2441331662295973890#rd" target="_blank" rel="noopener noreferrer">防止重复提交过滤</a></span></a></h1><h4 id="前端" tabindex="-1"><a class="header-anchor" href="#前端"><span>前端：</span></a></h4><p>前端可以针对同一个按钮进行拦截，在 request.js 中有 <strong>request拦截器</strong> （如果请求数据和请求URL和<strong>最近一次</strong>请求一致，并且请求间隔小于1000ms，就进行请求拦截，直接拒绝当前请求。）</p><h4 id="后端" tabindex="-1"><a class="header-anchor" href="#后端"><span>后端：</span></a></h4><p>从我上面的描述，发现了一个bug，总有手快的人，喜欢点A按钮，然后立刻点B按钮，然后又立刻点A按钮。那么对于A按钮是重复提交了，但是又不满足前端判断重复请求的条件，于是重复请求进入了后端，这时候就需要后端再次校验，是不是重复请求。</p><ul><li>防止重复提交拦截器, 获取注解类不为空即判断（看下）</li><li><em>判断请求<strong>url</strong>和数据是否和上一次相同，</em> 借助 Redis 存 「唯一标识（指定key + url + 消息头『\${token.header}』）:values」 <code>compareParams(nowDataMap, preDataMap) &amp;&amp; compareTime(nowDataMap, preDataMap, annotation.interval())</code></li><li>经过debug发现后端判断重复逻辑和前端其实差不多。<strong>难点在于如何确定同一个人的同一个请求，ry使用的url+token的方式</strong>，确定同一个人同一个请求。</li></ul><h1 id="_7-anonymous" tabindex="-1"><a class="header-anchor" href="#_7-anonymous"><span><a href="https://mp.weixin.qq.com/s?__biz=Mzg5OTgxOTg0Ng==&amp;mid=2247483889&amp;idx=1&amp;sn=d0b4e57c288e0bf0667bd5b2d05003e7&amp;chksm=c04c31d8f73bb8ce03437c29224397393c2c19460f261a628b851970be2f92e16112a81ecadb&amp;scene=178&amp;cur_album_id=2441331662295973890#rd" target="_blank" rel="noopener noreferrer">7.@Anonymous</a></span></a></h1><blockquote><p>自定义注解，配合SpringSecurity实现注解地方放行访问 .antMatchers(&quot;/actuator/*&quot;).permitAll() “?”里是注解过的地方</p></blockquote><ol><li><code>PermitAllUrlProperties.class</code> 注解解释器项目启动的时候遍历所有 URL 方法和对应类有没有加这个注解，整成一个 List 暴露到@Configuration容器</li><li>SecurityConfig 配置类中遍历上面类暴露到 List 迭代允许 <code>permitAllUrl.getUrls().forEach(url -&gt; registry.antMatchers(url).permitAll());</code></li></ol><h2 id="tips-注解" tabindex="-1"><a class="header-anchor" href="#tips-注解"><span>Tips:注解</span></a></h2><p>我们一般知道，注解是给程序看的，给机器看的，当然也是给程序员看的。注解如果没有<mark>注解解析器</mark>（注解处理器，注解解释器），那么注解就没有什么作用。所以@Anonyous一定是在某个地方被干嘛干嘛了！</p><p>上三个都是有注解的搭配着注解解析器实现相应功能，限流、定时任务、防重</p><h1 id="_8-token过期问题" tabindex="-1"><a class="header-anchor" href="#_8-token过期问题"><span>8.Token过期问题</span></a></h1><blockquote><p>杭州面试问到这个，全是针对项目的技术栈在问！！！</p></blockquote><p>若依是支持token续期的，具体续期的代码在TokenService类下的verifyToken()方法中，默认是不到20分钟就进行续期，但是必须发生请求才行，可以通过</p><p>更改MILLIS_MINUTE_TEN修改续期判断的剩余时间。按理说只要一直都在发生请求的话是不会出现token过期的情况的。</p><p>在Ruoyi开源项目中，对于令牌续期（Token Renewal）问题的处理通常如下：</p><ol><li>刷新令牌（Refresh Token）：Ruoyi使用JWT（JSON Web Token）进行身份验证和授权。JWT令牌包含了用户的身份信息和权限，并设置了一个有效期。当令牌即将过期时，可以使用刷新令牌来获取新的访问令牌，而无需重新进行用户身份验证。</li><li>拦截器处理：Ruoyi使用拦截器（Interceptor）来对请求进行拦截和处理。在拦截器中，会检查JWT令牌的有效性和过期时间。如果令牌即将过期，拦截器会执行刷新令牌的逻辑，获取新的令牌并将其返回给客户端。客户端可以使用新的令牌继续进行后续请求。</li><li>过期错误处理：如果令牌已经过期，拦截器会捕获到过期错误，并返回相应的错误响应给客户端。客户端可以根据错误响应中的提示信息，重新进行用户身份验证或刷新令牌操作。</li><li>刷新令牌接口：Ruoyi通常会提供一个刷新令牌的接口，用于客户端发送刷新令牌的请求。该接口会根据刷新令牌的有效性，颁发一个新的访问令牌，并返回给客户端。客户端可以使用新的访问令牌继续进行后续请求。</li></ol><p><code>刷新令牌的拦截器通常是通过Spring Security框架的拦截器实现的 </code> GPT:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> JwtTokenRefreshFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> OncePerRequestFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doFilterInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">FilterChain</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> filterChain</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 检查请求中是否携带有效的JWT令牌</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 验证JWT令牌的有效性和过期时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 如果令牌即将过期，执行刷新令牌的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 将新的令牌添加到响应头中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 继续执行过滤器链，处理后续请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,98),t=[l];function h(p,k){return a(),s("div",null,t)}const g=i(e,[["render",h],["__file","RuoYi.html.vue"]]),c=JSON.parse('{"path":"/studynotes/RuoYi/RuoYi.html","title":"RuoYi-Vue","lang":"zh-CN","frontmatter":{"description":"RuoYi-Vue 该项目没用 MP，整完这个可以再整 RuoYi-Cloud 基于SpringBoot、Spring Security、Jwt、Vue的前后端分离的后台管理系统 【权限管理系统】 楠哥的太浅了，粗略过了一遍 现在在过 王清江 的 约等于 26 h 26/3=9 哪些点想看就可以看他公众号的讲义 1.验证码 本来想重写 Controll...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/RuoYi/RuoYi.html"}],["meta",{"property":"og:site_name","content":"Piglet"}],["meta",{"property":"og:title","content":"RuoYi-Vue"}],["meta",{"property":"og:description","content":"RuoYi-Vue 该项目没用 MP，整完这个可以再整 RuoYi-Cloud 基于SpringBoot、Spring Security、Jwt、Vue的前后端分离的后台管理系统 【权限管理系统】 楠哥的太浅了，粗略过了一遍 现在在过 王清江 的 约等于 26 h 26/3=9 哪些点想看就可以看他公众号的讲义 1.验证码 本来想重写 Controll..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T08:39:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T08:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RuoYi-Vue\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-13T08:39:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.1.Redis 处理","slug":"_1-1-redis-处理","link":"#_1-1-redis-处理","children":[]},{"level":2,"title":"1.2.前端","slug":"_1-2-前端","link":"#_1-2-前端","children":[{"level":3,"title":"1.2.1.Vue baseURL","slug":"_1-2-1-vue-baseurl","link":"#_1-2-1-vue-baseurl","children":[]}]},{"level":2,"title":"日志","slug":"日志","link":"#日志","children":[]},{"level":2,"title":"3.1.List-centerPanel","slug":"_3-1-list-centerpanel","link":"#_3-1-list-centerpanel","children":[]},{"level":2,"title":"3.2.Tree-LeftPanel","slug":"_3-2-tree-leftpanel","link":"#_3-2-tree-leftpanel","children":[]},{"level":2,"title":"PS：PageHelper","slug":"ps-pagehelper","link":"#ps-pagehelper","children":[]},{"level":2,"title":"Tips:注解","slug":"tips-注解","link":"#tips-注解","children":[]}],"git":{"createdTime":1712997543000,"updatedTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":12.17,"words":3652},"filePathRelative":"studynotes/RuoYi/RuoYi.md","localizedDate":"2024年4月13日","autoDesc":true}');export{g as comp,c as data};
