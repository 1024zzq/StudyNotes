import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,d as n,f as a,a as t,e as l}from"./app-meX8Xf3H.js";const i={},u={id:"interviewmv",tabindex:"-1"},r={class:"header-anchor",href:"#interviewmv"},k={href:"https://blog.csdn.net/qq_42999092/article/details/109068522",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"Title 为评论区别人的笔记，很详细"),n("p",null,"这一季基础的东西，每一集一道面试题。我全是错的，没对过一道 230920")],-1),v={id:"i",tabindex:"-1"},m={class:"header-anchor",href:"#i"},b={href:"https://www.bilibili.com/video/BV1Eb411P7bP/?vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0",target:"_blank",rel:"noopener noreferrer"},g=l(`<blockquote><ul><li>栈帧（Stack Frame）： <ul><li>栈帧是用于支持方法调用和方法执行的数据结构，也称为方法帧或活动记录。</li><li>每个方法在运行时都会创建一个对应的栈帧，用于存储局部变量、操作数栈、动态链接、方法返回地址等信息。</li><li>栈帧以后进先出（LIFO）的方式组织在线程的虚拟机栈中，每个线程都有自己的虚拟机栈。</li><li>当一个方法被调用时，会创建一个新的栈帧并压入虚拟机栈顶，当方法执行结束后，对应的栈帧会被弹出。</li></ul></li><li>程序计数器（PC）：XD 可以理解为行号指示器</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>i<span class="token operator">++</span>  <span class="token operator">=</span><span class="token operator">&gt;</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>
i <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">=</span><span class="token operator">&gt;</span> i<span class="token operator">=</span><span class="token number">1</span> 

题目：
 <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
 i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token operator">++</span>i <span class="token operator">*</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i=&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;j=&quot;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;k=&quot;</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>i = i++;</code></p><blockquote><p>XD: i++也是一个表达式，是有返回值的，返回值就是i自增前的值。因此执行i = i++后，虽然i自增为2，但是又被i++的返回值给重新赋值了</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  2: iload_1
  3: iinc          1, 1
  6: istore_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://images.zzq8.cn/img/image-20230915223439680.png" alt="image-20230915223439680" tabindex="0" loading="lazy"><figcaption>image-20230915223439680</figcaption></figure><h3 id="singleton单例模式" tabindex="-1"><a class="header-anchor" href="#singleton单例模式"><span>* Singleton单例模式</span></a></h3><blockquote><p>饿汉式: 在类初始化时直接创建实例对象,不管你是否需要这个对象都会创建 饿汉式: 直接创建对象,不存在线程安全问题</p><p><strong>如果是饿汉式,枚举形式最简单</strong><strong>如果是懒汉式,静态内部类形式最简单</strong></p></blockquote><ol><li>直接实例化饿汉式(简洁直观)</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton1</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>枚举式(最简洁) =&gt; 同上是一样的</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 枚举类型:表示该类型的对象是有限的几个
 * 我们可以限定为一个,就成了单例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">{</span>
    <span class="token constant">INSTANCE</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>静态代码块饿汉式(适合复杂实例化)</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 可能想初始化一些变量，不要构造参数给值(这样要改代码不灵活)。。。是配置文件给值
 * 文件的位置在src下的才能用类加载器加载 
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton3</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton3</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Singleton3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;single.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton3</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：注意，以上三个的属性都是 final 修饰！！！但是懒汉不是</p><blockquote><p>懒汉式:延迟创建对象</p></blockquote><ol><li>线程不安全(适用于单线程) 需要学习多线程使用!!!</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton4</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Singleton4</span> instance<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton4</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>线程安全(适用于多线程)</li></ol><blockquote><p>TODO XD: 2024/01/12 貌似有问题，具体看 JUC 笔记中的 volatile（不加会有指令重排问题！！！）</p><p><code>uniqueInstance</code> 采用 <code>volatile</code> 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 <code>uniqueInstance</code> 分配内存空间</li><li>初始化 <code>uniqueInstance</code></li><li>将 <code>uniqueInstance</code> 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 <code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code> 不为空，因此返回 <code>uniqueInstance</code>，但此时 <code>uniqueInstance</code> 还未被初始化。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span><a href="#volatile-%E5%8F%AF%E4%BB%A5%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7%E4%B9%88">#</a></span></a></h3><hr><p>著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton5</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 说白了，就是在上面的基础上加 synchronized
     * XD: synchronized 下面的这个 if 干什么用的？  【双重检查锁（Double-Checked Locking）】
     *     因为多个线程可以突破第一个 if 是所以下面也要 if
     */</span>
    <span class="token keyword">static</span> <span class="token class-name">Singleton5</span> instance<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton5</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton5</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>静态内部类形式(适用于多线程)</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 推荐静态内部类方式，既能懒加载，又保证了线程安全
 */</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton6</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 1、内部类被加载和初始化时，才创建INSTANCE实例对象
     * 2、静态内部类不会自动创建,随着外部类的加载初始化而初始化，他是要单独去加载和实例化的
     * 3、因为是在内部类加载和初始化时，创建的，因此线程安全
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Singleton6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton6</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton6</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Inner</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法参数传递机制" tabindex="-1"><a class="header-anchor" href="#方法参数传递机制"><span>* 方法参数传递机制</span></a></h3><blockquote><p>String的不可变性我又没理解！！！ <mark>已经无数次</mark> 只对了数组，我真废物阿</p><p>String、包装类等对象的不可变性（本来像对象这种都会跟着变，但这两者是会产生新对象所以。。） XD：可以参考下构造 this.a=a 之所以要这一步可能就是因为这样 方法一执行完，形参都没的情况 所以要赋值出去</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exam4</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">MyData</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">change</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>str<span class="token punctuation">,</span>num<span class="token punctuation">,</span>arr<span class="token punctuation">,</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;i= &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;str= &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;num= &quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;arr= &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;my.a= &quot;</span> <span class="token operator">+</span> my<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Integer</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token class-name">MyData</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        s <span class="token operator">+=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
        n <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        m<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyData</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details><summary>答案：</summary><p>arr my变了 i= 1 str= hello num= 200 arr= [2, 2, 3, 4, 5] my.a= 11 </p></details><figure><img src="http://images.zzq8.cn/img/20201014104401137.png" alt="变量初始化 以及运算时 栈堆内存的变化" tabindex="0" loading="lazy"><figcaption>变量初始化 以及运算时 栈堆内存的变化</figcaption></figure>`,28);function y(w,h){const s=p("ExternalLinkIcon");return o(),c("div",null,[n("h1",u,[n("a",r,[n("span",null,[n("a",k,[a("InterviewMV"),t(s)])])])]),d,n("h3",v,[n("a",m,[n("span",null,[n("a",b,[a("* i++"),t(s)])])])]),g])}const q=e(i,[["render",y],["__file","尚硅谷经典Java面试题第一季.html.vue"]]),_=JSON.parse('{"path":"/studynotes/JavaSE/%E5%B0%9A%E7%A1%85%E8%B0%B7%E7%BB%8F%E5%85%B8Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%AC%E4%B8%80%E5%AD%A3.html","title":"InterviewMV","lang":"zh-CN","frontmatter":{"description":"InterviewMV Title 为评论区别人的笔记，很详细 这一季基础的东西，每一集一道面试题。我全是错的，没对过一道 230920 * i++ 栈帧（Stack Frame）： 栈帧是用于支持方法调用和方法执行的数据结构，也称为方法帧或活动记录。 每个方法在运行时都会创建一个对应的栈帧，用于存储局部变量、操作数栈、动态链接、方法返回地址等信息。 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/studynotes/JavaSE/%E5%B0%9A%E7%A1%85%E8%B0%B7%E7%BB%8F%E5%85%B8Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%AC%E4%B8%80%E5%AD%A3.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:title","content":"InterviewMV"}],["meta",{"property":"og:description","content":"InterviewMV Title 为评论区别人的笔记，很详细 这一季基础的东西，每一集一道面试题。我全是错的，没对过一道 230920 * i++ 栈帧（Stack Frame）： 栈帧是用于支持方法调用和方法执行的数据结构，也称为方法帧或活动记录。 每个方法在运行时都会创建一个对应的栈帧，用于存储局部变量、操作数栈、动态链接、方法返回地址等信息。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://images.zzq8.cn/img/image-20230915223439680.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T08:39:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T08:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"InterviewMV\\",\\"image\\":[\\"http://images.zzq8.cn/img/image-20230915223439680.png\\",\\"http://images.zzq8.cn/img/20201014104401137.png\\"],\\"dateModified\\":\\"2024-04-13T08:39:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"* i++","slug":"i","link":"#i","children":[]},{"level":3,"title":"* Singleton单例模式","slug":"singleton单例模式","link":"#singleton单例模式","children":[]},{"level":3,"title":"* 方法参数传递机制","slug":"方法参数传递机制","link":"#方法参数传递机制","children":[]}],"git":{"createdTime":1712997543000,"updatedTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":4.61,"words":1383},"filePathRelative":"studynotes/JavaSE/尚硅谷经典Java面试题第一季.md","localizedDate":"2024年4月13日","autoDesc":true,"excerpt":"\\n<blockquote>\\n<p>Title 为评论区别人的笔记，很详细</p>\\n<p>这一季基础的东西，每一集一道面试题。我全是错的，没对过一道  230920</p>\\n</blockquote>\\n<h3><a class=\\"header-anchor\\" href=\\"#i\\"><span></span></a><a href=\\"https://www.bilibili.com/video/BV1Eb411P7bP/?vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">* i++</a></h3>"}');export{q as comp,_ as data};
