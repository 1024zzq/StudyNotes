import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c,e as n,f as a,b as e,t as l,a as t}from"./app-BCyHbxhX.js";const u={},r={id:"github-actions",tabindex:"-1"},d={class:"header-anchor",href:"#github-actions"},k={href:"https://docs.github.com/en/actions",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.bilibili.com/video/BV1C34y1t79H/?spm_id_from=333.788.recommend_more_video.1&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.bilibili.com/video/BV1RE411R7Uy/?spm_id_from=333.337.search-card.all.click&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0",target:"_blank",rel:"noopener noreferrer"},b=t("<p>起因：LeetCode 自动打卡签到领积分 可见Actions可以拿来跑一些好用的脚本，例如定时签到类的 / 看视频感觉更多的是持续集成</p><p>1）可以围绕自己的仓库做一些流程自动化</p><p>2）CI/CD代表<code>持续集成</code>和<code>持续交付</code> 自动化构建部署 <strong>Continuous Integration/Continuous Deployment</strong></p><p>​ CI：新代码更新集成到现有的代码库中（GitHub Actions就是这个服务）</p><p><strong>CI/CD提供了如下两个主要的好处：它可以帮助你将原本必须由开发人员手动完成的事情自动化（应用交付给客户时候需要经过三个步骤：测试、构建、部署），从而提高你的速度；它也会在小问题发展成重大灾难之前及早地发现它们，从而提高代码质量。</strong></p><p>Devops的核心实践之一是持续集成：好像是有个CI服务器。就是为了避免下面的问题。 我理解：GitHub Actions不同的是 不需要CI服务器了，直接GitHub提供云中的Linux容器给你操作 1）get code 2）setup node 3）test/build/dploy</p><p>My：持续集成的流水线，以前的问题 码农1写了个API 码农2也写了一个UI 但是合并时候发现不兼容 <strong>合并地狱</strong>就需要推翻。而CI/CD会持续集成，每天提交的都会Actions跑看有没有问题。Actions里面写了测试...有问题就会马上显示出来！</p><p>https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</p>",8),h=t(`<p>一个简单的实例：actions GitHub的官方用户</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>name<span class="token punctuation">:</span>MYCI
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token comment">#GitHub Action on:schedule 到指定时间执行任务 / on:push 就是推送就执行</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> src/*
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token comment">#任务名字可随意</span>
  <span class="token key atrule">jobl</span><span class="token punctuation">:</span>
    <span class="token comment">#是个枚举一般用这个可以了</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span> <span class="token comment">#拷贝代码 输出hello </span>
    <span class="token comment">#这里可用 git clone xxx 将代码拷贝，但是还要cd到目录/代码私有麻烦。 GitHub考虑到了用下面的省事</span>
    <span class="token comment">#这里是复用GitHub的流程，其实它有个用户叫actions仓库叫checkout（看了确实是！）  封装了下载代码的流程</span>
    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@vl
    <span class="token comment">#运行shell</span>
    <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> echo hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LeetCode的示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> auto action runner
<span class="token key atrule">run-name</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> github.actor <span class="token punctuation">}</span><span class="token punctuation">}</span> is running
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">&#39;50 16 * * *&#39;</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3
	
	  <span class="token comment">#理解了 user/repositoty/release version 下面三条就好理解都是装环境，能指定版本是因为ubuntu里全装了</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Node
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">16</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install pnpm
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> pnpm/action<span class="token punctuation">-</span>setup@v2
        <span class="token key atrule">id</span><span class="token punctuation">:</span> pnpm<span class="token punctuation">-</span>install
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">7</span>
          <span class="token key atrule">run_install</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies
        <span class="token key atrule">run</span><span class="token punctuation">:</span> pnpm install

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run
        <span class="token key atrule">run</span><span class="token punctuation">:</span> pnpm dev $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCOUNT <span class="token punctuation">}</span><span class="token punctuation">}</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PASSWORD <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y=n("p",null,"可以放个 Docker 在它里面放node的iamge",-1),g=n("p",null,"可以跑个 nginx run的时候curl localhost:8080 是可以证明跑成功的",-1);function _(C,f){const s=p("ExternalLinkIcon");return i(),c("div",null,[n("h1",r,[n("a",d,[n("span",null,[n("a",k,[a("GitHub Actions"),e(s)])])])]),n("blockquote",null,[n("p",null,[n("a",m,[a("100秒解释什么是DevOps CI/CD 中国DevOps社区"),e(s)])]),n("p",null,[n("a",v,[a("【CICD】github新功能actions全方位讲解！！"),e(s)])]),b]),h,n("p",null,"敏感信息放setting里面有个secrets可以设置 $"+l()+" 引用",1),y,g])}const I=o(u,[["render",_],["__file","GitHub Actions.html.vue"]]),H=JSON.parse('{"path":"/studynotes/ZOther/GitHub%20Actions.html","title":"GitHub Actions","lang":"zh-CN","frontmatter":{"description":"GitHub Actions 100秒解释什么是DevOps CI/CD 中国DevOps社区 【CICD】github新功能actions全方位讲解！！ 起因：LeetCode 自动打卡签到领积分 可见Actions可以拿来跑一些好用的脚本，例如定时签到类的 / 看视频感觉更多的是持续集成 1）可以围绕自己的仓库做一些流程自动化 2）CI/CD代表持...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/ZOther/GitHub%20Actions.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:title","content":"GitHub Actions"}],["meta",{"property":"og:description","content":"GitHub Actions 100秒解释什么是DevOps CI/CD 中国DevOps社区 【CICD】github新功能actions全方位讲解！！ 起因：LeetCode 自动打卡签到领积分 可见Actions可以拿来跑一些好用的脚本，例如定时签到类的 / 看视频感觉更多的是持续集成 1）可以围绕自己的仓库做一些流程自动化 2）CI/CD代表持..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T08:39:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T08:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GitHub Actions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-13T08:39:03.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712997543000,"updatedTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":2.46,"words":738},"filePathRelative":"studynotes/ZOther/GitHub Actions.md","localizedDate":"2024年4月13日","autoDesc":true}');export{I as comp,H as data};
