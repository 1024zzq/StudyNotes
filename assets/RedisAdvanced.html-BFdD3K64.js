import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as p,c as o,d as a,f as n,a as e,e as l}from"./app-EyBvMEPc.js";const c={},r={id:"黑马点评",tabindex:"-1"},d={class:"header-anchor",href:"#黑马点评"},u={href:"https://www.bilibili.com/video/BV1PG4y1s7io/?spm_id_from=333.788&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0",target:"_blank",rel:"noopener noreferrer"},m=a("p",null,"set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地理位置",-1),h=l(`<h1 id="一、基础篇" tabindex="-1"><a class="header-anchor" href="#一、基础篇"><span>一、基础篇</span></a></h1><h2 id="_1-课程内容" tabindex="-1"><a class="header-anchor" href="#_1-课程内容"><span>1.课程内容</span></a></h2><blockquote><p>实战篇性价比高，高级篇偏运维一点（高级、原理面试前整）</p></blockquote><figure><img src="https://images.zzq8.cn/img/202303041510042.png" alt="image-20230304151001878" tabindex="0" loading="lazy"><figcaption>image-20230304151001878</figcaption></figure><h2 id="_2-redis的java客户端" tabindex="-1"><a class="header-anchor" href="#_2-redis的java客户端"><span>2.Redis的JAVA客户端</span></a></h2><blockquote><p>单单使用 Jedis 的话记得配 <code>JedisPool</code> 使用Spring Data Redis的话默认实现的 lettuce，如想用 Jedis 需要单独引一下</p><p>需要注意的是，如果你需要对连接池进行更高级的配置，或者使用其他的连接池实现，可能需要手动引入 commons-pool2 依赖，并进行相应的配置。但通常情况下，使用 spring-boot-starter-data-redis 默认提供的配置已经足够满足大部分需求了。 实测：还是需要引入commons-pool2，因为data-redis里面这个依赖是optional true 总之，使用 <code>&lt;optional&gt;</code> 标签可以控制依赖的传递性，避免不必要的依赖冲突和版本冲突，但是需要注意，它的传递性也会被取消，需要手动处理相关的依赖。 <strong>之所以有这个问题，是因为springboot版本低了的原因，导致有这个optional。后面高版本没有这个optional了！</strong></p></blockquote><figure><img src="https://images.zzq8.cn/img/202303041526511.png" alt="image-20230304152602369" tabindex="0" loading="lazy"><figcaption>image-20230304152602369</figcaption></figure><h3 id="_2-1-redistemplate" tabindex="-1"><a class="header-anchor" href="#_2-1-redistemplate"><span>2.1.RedisTemplate</span></a></h3><blockquote><p>RedisTemplate 记得设置一下序列化对象，直接看这个类源码有四个属性要设 可以看这个四个属性的类型 <code>RedisSerializer</code> 接口有哪些实现类！<strong>一般key用RedisSerializer.string、value用json对象</strong>，<mark>但有下面问题！</mark></p></blockquote><p>优势：自动处理序列化问题，不用自己代码层面转来转去了</p><p>弊端：如下，占用额外内控空间去记录该反序列化的那个类的全路径类名</p><img src="https://images.zzq8.cn/img/202303041658585.png" alt="image-20230304165847419" style="zoom:50%;"><h3 id="_2-2-反序列化问题-stringredistemplate" tabindex="-1"><a class="header-anchor" href="#_2-2-反序列化问题-stringredistemplate"><span>2.2.反序列化问题-StringRedisTemplate</span></a></h3><blockquote><p>使用上述配置序列化时，反序列化有浪费内存的问题。</p></blockquote><h4 id="_1-问题" tabindex="-1"><a class="header-anchor" href="#_1-问题"><span>1）问题：</span></a></h4><figure><img src="https://images.zzq8.cn/img/202303041711043.png" alt="image-20230304171121214" tabindex="0" loading="lazy"><figcaption>image-20230304171121214</figcaption></figure><h4 id="_2-解决" tabindex="-1"><a class="header-anchor" href="#_2-解决"><span>2）解决</span></a></h4><p>为了节省内存空间,我们并不会使用JSON序列化器来处理value,而是统一使用String序列化器,要求只能存储String类型的key和value.当需要存储java对象时,手动完成对象的序列化和反序列化. <strong>代码复杂了点多了两个手动序列化操作，但是空间省了</strong></p><p><code>StringRedisTemplate</code>：Spring默认提供了一个StringRedisTemplate类,它的key和value的序列化方式默认就是String方式.省去了我们自定义RedisTemplate的过程</p><h1 id="二、实战篇" tabindex="-1"><a class="header-anchor" href="#二、实战篇"><span>二、实战篇</span></a></h1><figure><img src="https://images.zzq8.cn/img/202303060954783.png" alt="image-20230306095441886" tabindex="0" loading="lazy"><figcaption>image-20230306095441886</figcaption></figure><h1 id="_1-短信登录" tabindex="-1"><a class="header-anchor" href="#_1-短信登录"><span>1.短信登录</span></a></h1><h2 id="_1-1-这里使用hash保存用户信息" tabindex="-1"><a class="header-anchor" href="#_1-1-这里使用hash保存用户信息"><span>1.1.这里使用Hash保存用户信息</span></a></h2><blockquote><p>JSON串的格式，引号冒号还需保存，如果想加一个还得把整个串干掉</p><p>所以从优化的角度，推荐使用hash</p></blockquote><img src="https://images.zzq8.cn/img/202303071617889.png" alt="image-20230307161347386" style="zoom:67%;"><blockquote><p>注意 Hash 结构跟 String 结构区分，这里有Redis的一个 key 而 value（K、V）才是真正的 Hash 结构</p><p><mark>StringRedisTemplate 对象可以创建 Hash！！！</mark> stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);【HASH，KV】</p><p>Note：一般存 key 会加上业务前缀做区分</p></blockquote><figure><img src="https://images.zzq8.cn/img/202303071617089.png" alt="image-20230307161729539" tabindex="0" loading="lazy"><figcaption>image-20230307161729539</figcaption></figure><figure><img src="https://images.zzq8.cn/img/202303071620766.png" alt="image-20230307162022703" tabindex="0" loading="lazy"><figcaption>image-20230307162022703</figcaption></figure><h1 id="_2-商户查询缓存" tabindex="-1"><a class="header-anchor" href="#_2-商户查询缓存"><span>2.商户查询缓存</span></a></h1><blockquote><p>场景：想着自己使用spring cache技术整合Redis，用注解简化</p><p>问题：反序列化报错：我的解决 -&gt; return list / map / String Could not read JSON: Cannot construct instance of <code>java.time.LocalDateTime</code></p><p>XX：衍生出的问题：缓存每次都不会命中</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>之前以为控制台输出了sql就是没有命中缓存，自己方法里加了log来甄别方法到底执行没。发现还是按照预期来了的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><a href="../GuliMall/Advanced">自己 Gulimall 笔记</a></p><p><a href="./Redis">三种问题场景笔记 Redis</a></p><p>亮点：缓存穿透/击穿 可以封装成工具类，给后面复用。 例如heima的视频，就活用泛型+lambda写这个工具类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span>ID<span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span> <span class="token function">queryWithPassThrough</span><span class="token punctuation">(</span>
            <span class="token class-name">String</span> keyPrefix<span class="token punctuation">,</span> <span class="token class-name">ID</span> id<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> dbFallback<span class="token punctuation">,</span> <span class="token class-name">Long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token comment">//因为查询数据库是一段函数！！！这里就可以配合lambda这么用  有一个参数一个返回值</span>
    <span class="token class-name">R</span> r <span class="token operator">=</span> dbFallback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-优惠券秒杀" tabindex="-1"><a class="header-anchor" href="#_3-优惠券秒杀"><span>3.优惠券秒杀</span></a></h1><p>到这里我暂时中断了，因为我发现自己并没有那么想学！</p><p>感觉不想学还是不要强行学这一块了，就学自己想学感兴趣的时间片小的东西吧。例如尝试融入leetcode拿成就感的这种。。。</p><h1 id="hutools-utils" tabindex="-1"><a class="header-anchor" href="#hutools-utils"><span>Hutools Utils</span></a></h1><ol><li><p>复制Bean的属性，好像同Spring有个工具类一样 <code>BeanUtil.copyProperties</code></p></li><li><p>将User对象转为HashMap存储到Redis <code>BeanUtil.beanToMap</code> org.springframework.beans的是 <code>BeanUtils</code></p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//由于UserDTO类有属性是Long的，而StringRedisTemplate&lt;String, String&gt;，所以这里用hutools构造函数定制化全给String</span>
<span class="token comment">//也可笨方法new map自己转成String</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">beanToMap</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">CopyOptions</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">setIgnoreNullValue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">setFieldValueEditor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> fieldValue<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> fieldValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>弹幕: 就这个错误，我在谷粒商城的springsession的序列化器转换异常搞了半天，也是Long类型的！！！！！！</strong></p></li><li><p>有个问题 BeanUtil.copyProperties的ignoreNullValue不生效</p></li><li><p>setFieldValueEditor优先级要高于ignoreNullValue导致前者首先被触发，因此出现空指针问题。你在setFieldValueEditor中也需要判空。</p><p>这么设计的原因主要是，如果原值确实是null，但是你想给一个默认值，在此前过滤掉就不合理了，而你的值编辑后转换为null，后置的判断就会过滤掉。</p></li></ul></li><li><p>和上面反着来，<code>JSONUtil.toBean(shopJson,Shop.class);</code></p></li><li><p>将Redis拿到的Hash填充到Bean <code>BeanUtil.fitlBeanWithMap</code></p></li><li><p><code>JSONUtil.toJsonStr</code></p></li><li><p>判断字符串是否为null及size小于0 <code>StrUtil.isNotBlank(shopJson)</code></p></li><li><p><code>BooleanUtil.isTrue(flag)</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Boolean</span> flag <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//因为这里自动拆箱有可能null，所以用hutools</span>
<span class="token keyword">return</span> <span class="token class-name">BooleanUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,39);function k(v,b){const s=i("ExternalLinkIcon");return p(),o("div",null,[a("h1",r,[a("a",d,[a("span",null,[a("a",u,[n("黑马点评"),e(s)])])])]),a("blockquote",null,[a("p",null,[a("a",g,[n("一个专门学习 Redis 而生的项目"),e(s)]),n("，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video")]),m]),h])}const z=t(c,[["render",k],["__file","RedisAdvanced.html.vue"]]),y=JSON.parse('{"path":"/studynotes/NoSQL/RedisAdvanced.html","title":"黑马点评","lang":"zh-CN","frontmatter":{"description":"黑马点评 一个专门学习 Redis 而生的项目，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zzq8/studynotes/NoSQL/RedisAdvanced.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:title","content":"黑马点评"}],["meta",{"property":"og:description","content":"黑马点评 一个专门学习 Redis 而生的项目，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.zzq8.cn/img/202303041510042.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T08:39:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T08:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"黑马点评\\",\\"image\\":[\\"https://images.zzq8.cn/img/202303041510042.png\\",\\"https://images.zzq8.cn/img/202303041526511.png\\",\\"https://images.zzq8.cn/img/202303041711043.png\\",\\"https://images.zzq8.cn/img/202303060954783.png\\",\\"https://images.zzq8.cn/img/202303071617089.png\\",\\"https://images.zzq8.cn/img/202303071620766.png\\"],\\"dateModified\\":\\"2024-04-13T08:39:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.课程内容","slug":"_1-课程内容","link":"#_1-课程内容","children":[]},{"level":2,"title":"2.Redis的JAVA客户端","slug":"_2-redis的java客户端","link":"#_2-redis的java客户端","children":[{"level":3,"title":"2.1.RedisTemplate","slug":"_2-1-redistemplate","link":"#_2-1-redistemplate","children":[]},{"level":3,"title":"2.2.反序列化问题-StringRedisTemplate","slug":"_2-2-反序列化问题-stringredistemplate","link":"#_2-2-反序列化问题-stringredistemplate","children":[]}]},{"level":2,"title":"1.1.这里使用Hash保存用户信息","slug":"_1-1-这里使用hash保存用户信息","link":"#_1-1-这里使用hash保存用户信息","children":[]}],"git":{"createdTime":1712997543000,"updatedTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":4.8,"words":1439},"filePathRelative":"studynotes/NoSQL/RedisAdvanced.md","localizedDate":"2024年4月13日","autoDesc":true,"excerpt":"\\n<blockquote>\\n<p><a href=\\"https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">一个专门学习 Redis 而生的项目</a>，参考大众点评做的。理论+实战   42h / 3 = 14\\nHere the link is an instructional video, and the title link is a navigation video</p>\\n<p>set: 共同关注\\nzset: 排行榜应用实现，取Top N\\nGeospatial 地理位置</p>\\n</blockquote>"}');export{z as comp,y as data};
