import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-Qhk47erD.js";const p={},t=e(`<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h1><p>Redis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来 说，性能是MySQL的⼏⼗倍。</p><blockquote><p>Q: Redis的lO性能比数据库高的原因是什么？</p><ol><li>基于内存，sql基于磁盘 - 所以少了一步磁盘IO</li><li>单线程模型 - 少了上下文切换开销</li><li>非阻塞IO - 6.0往后出现<strong>网络IO多路复用</strong> TODO？ 允许一个线程同时监听和处理多个网络连接的 I/O 操作</li><li><strong>数据结构简单重设计</strong> - SDS？压= TODO？<em>Sds</em>（Simple Dynamic String，简单动态字符串）是Redis 底层所使用的字符串表示 C 是char 不足（以空字符&#39;\\0&#39;结尾） 总的来说，Redis 的 SDS 结构在原本字符数组之上，增加了三个元数据：len、alloc、flags，<strong>用来解决 C 语言字符串的缺陷</strong> ----C语⾔实现，优化过的数据结构，基于⼏种基础的数据结构，redis做了⼤量的优 化，性能极⾼</li></ol><hr><p>Q: 能说一下I/O多路复用吗？</p><p>引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个 学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择：</p><ul><li>第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间 如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理 socket，根本不具有并发能力。 <strong>（XD 排队一个个检查）</strong></li><li>第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。 这种 类似于为每一个用户创建一个进程或者- 线程处理连接。</li><li>第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答 问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又 举手，然后去处理E和A。 <strong>（XD 举手到坐检查）</strong></li></ul><p>第一种就是阻塞IO模型，第三种就是I/O复用模型。 IO多路复用通过使用特定的系统调用（如 select、poll、epoll等）来解决这些问题。<strong>这些系统调用允许我们同时监视多个I/O流，并在有 I/O事件准备好时进行通知。</strong></p></blockquote><blockquote><p>Redis 可以用来做限流(MQ)、<strong>分布式锁、缓存</strong> 发布订阅（publish、subscribe）</p><p><a href="%E5%B0%9A%E7%A1%85%E8%B0%B7_Redis6%E8%AF%BE%E4%BB%B6.pdf">个人定制化总结，详细信息看课件！</a></p><p><a href="%E7%8B%82%E7%A5%9E%E8%AF%B4Redis%E7%AC%94%E8%AE%B0_%E5%8E%BB%E6%B0%B4%E5%8D%B0.pdf">狂神说Redis笔记</a></p></blockquote><h1 id="_0、限流-分布式锁-缓存" tabindex="-1"><a class="header-anchor" href="#_0、限流-分布式锁-缓存"><span>0、限流 / 分布式锁 / 缓存</span></a></h1><blockquote><p>是的，Redis可以用于限流、分布式锁和缓存等功能。</p><ol><li>限流：通过利用Redis的数据结构和操作，如有序集合(sorted sets)、<strong>带有过期时间的键</strong>(keys with expiration)和原子操作(atomic operations)，可以实现限制请求处理速率的功能。</li><li>分布式锁：Redis可以用于实现分布式锁，通过使用**SETNX（如果不存在则设置）**命令来确保在分布式环境下的互斥访问。通过获取锁的客户端可以执行临界区代码，其他客户端则需要等待或执行其他逻辑。</li><li>缓存：Redis的主要功能之一是作为缓存存储，它提供了快速的读写操作和灵活的键值操作。通过将数据存储在Redis中，可以减少对后端存储系统（如数据库）的访问，从而提高系统的响应速度和性能。</li></ol><p>需要注意的是，以上功能在Redis中是通过使用不同的数据结构和命令来实现的。因此，在具体实现时，需要根据业务需求和场景选择合适的Redis数据结构和操作。</p></blockquote><p>当涉及到使用Redis在Java中实现限流、分布式锁和缓存时，以下是一些示例代码：</p><ol><li><h4 id="限流" tabindex="-1"><a class="header-anchor" href="#限流"><span>限流：</span></a></h4></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> currentTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> windowStartTimestamp <span class="token operator">=</span> currentTimestamp <span class="token operator">-</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 1秒的时间窗口</span>
        <span class="token keyword">long</span> count <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zcount</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> windowStartTimestamp<span class="token punctuation">,</span> currentTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 每秒限制10个请求</span>
            jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> currentTimestamp<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>currentTimestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><h4 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span>分布式锁：</span></a></h4></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedLock</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lockKey<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> lockTimeout <span class="token operator">=</span> <span class="token number">30000</span><span class="token punctuation">;</span> <span class="token comment">// 锁的超时时间，默认30秒</span>

    <span class="token keyword">public</span> <span class="token class-name">DistributedLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lockKey <span class="token operator">=</span> lockKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">acquireLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTimestamp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> lockTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">&quot;LOCKED&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;NX&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PX&quot;</span><span class="token punctuation">,</span> lockTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待一段时间后重试获取锁</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><h4 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存：</span></a></h4></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Cache</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些示例代码提供了基本的使用方法，但在实际应用中可能需要根据具体需求进行适当的调整和扩展。同时，请确保在使用完Redis资源后进行适当的资源释放和异常处理。</p><h1 id="一、模拟手机验证码" tabindex="-1"><a class="header-anchor" href="#一、模拟手机验证码"><span>一、模拟手机验证码</span></a></h1><h2 id="_1-前置条件-改配置" tabindex="-1"><a class="header-anchor" href="#_1-前置条件-改配置"><span>1. 前置条件 - 改配置</span></a></h2><blockquote><p>不改就只能本机连接Redis</p></blockquote><p>bind 127.0.0.1 # 绑定的ip 需要注掉</p><p>protected-mode yes # 保护模式 改成no</p><blockquote><p>如果还连不上, 可以看下防火墙</p></blockquote><h2 id="_2-模拟业务场景-手机验证码" tabindex="-1"><a class="header-anchor" href="#_2-模拟业务场景-手机验证码"><span>2. 模拟业务场景: 手机验证码</span></a></h2><figure><img src="https://images.zzq8.cn/img/202205171956974.png" alt="image-20220410204001304" tabindex="0" loading="lazy"><figcaption>image-20220410204001304</figcaption></figure><p>具体代码看文件</p><h1 id="二、事务" tabindex="-1"><a class="header-anchor" href="#二、事务"><span>二、事务</span></a></h1><p>多个事务是串起来的，也就是说不允许插队和并行, 序列化按顺序执行</p><blockquote><p>Multi (命令/组队阶段): 开启事务, 把命令放队列中, 类似MySQL的 start transaction</p><p>Exec (执行队列)</p><p>discard (命令): 类似回滚事务</p></blockquote><figure><img src="https://images.zzq8.cn/img/202204132019207.png" alt="image-20220413201848353" tabindex="0" loading="lazy"><figcaption>image-20220413201848353</figcaption></figure><blockquote><p>组队的时候有任何一个命令失败, 就都不会成功</p></blockquote><figure><img src="https://images.zzq8.cn/img/202204132037991.png" alt="image-20220413203729944" tabindex="0" loading="lazy"><figcaption>image-20220413203729944</figcaption></figure><blockquote><p>组队成功, 提交有成功有失败情况 也就是说:</p><p>Redis单条命令式保存原子性的，但是<strong>事务不保证原子性</strong>！</p></blockquote><figure><img src="https://images.zzq8.cn/img/202204132051128.png" alt="image-20220413205107400" tabindex="0" loading="lazy"><figcaption>image-20220413205107400</figcaption></figure><h2 id="事务的冲突问题" tabindex="-1"><a class="header-anchor" href="#事务的冲突问题"><span>事务的冲突问题</span></a></h2><blockquote><p>解决方法: 悲观锁 / 乐观锁(默认) Redis事务没有没有隔离级别的概念！</p><p>可以好好看下 <strong>乐观锁</strong>: 适用于多读的应用类型, 这样可以提高吞吐量. 更新的时候会判断你的版本号是否一致</p><p>乐观锁典型例子: <strong>抢票</strong> 可以很多人抢, 但只能一个人支付成功</p></blockquote><figure><img src="https://images.zzq8.cn/img/202204132110320.png" alt="image-20220413211028112" tabindex="0" loading="lazy"><figcaption>image-20220413211028112</figcaption></figure><p><strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p><h2 id="watch-操作" tabindex="-1"><a class="header-anchor" href="#watch-操作"><span>Watch 操作</span></a></h2><blockquote><p>Redis测监视测试</p><p>测试多线程修改值 , 使用watch 可以当做redis的乐观锁操作！</p></blockquote><figure><img src="https://images.zzq8.cn/img/202204132133211.png" alt="image-20220413213359161" tabindex="0" loading="lazy"><figcaption>image-20220413213359161</figcaption></figure><h2 id="redis-秒杀案例" tabindex="-1"><a class="header-anchor" href="#redis-秒杀案例"><span>Redis 秒杀案例</span></a></h2><figure><img src="https://images.zzq8.cn/img/202204161621469.png" alt="image-20210619095633057" tabindex="0" loading="lazy"><figcaption>image-20210619095633057</figcaption></figure><blockquote><p>Redis ab压测安装</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> httpd-tools

ab <span class="token parameter variable">-n</span> <span class="token number">1000</span> <span class="token parameter variable">-c</span> <span class="token number">200</span> <span class="token parameter variable">-p</span> ~/postfile <span class="token parameter variable">-T</span> application/x-www-form-urlencoded http://192.168.1.107:8080/doseckill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>问题：超卖 &amp; 超时</p></blockquote><p>Read timed out 解决：连接池</p><p>超卖：事务 + 乐观锁（Watch）</p><blockquote><p>如果不加watch (结合上面的Watch学习):</p></blockquote><p>秒杀已经结束了 秒杀成功了..</p><h2 id="lua脚本解决库存遗留问题" tabindex="-1"><a class="header-anchor" href="#lua脚本解决库存遗留问题"><span>LUA脚本解决库存遗留问题</span></a></h2><blockquote><p>已经秒光，可是还有库存。原因，就是乐观锁导致很多请求都失败。先点的没秒到，后点的可能秒到了。</p></blockquote><p>我在执行过程中别人不能对我的操作进行插队和干预</p><p>后来补充：Gulimall 好像是Redission的信号量</p><h1 id="三、持久化" tabindex="-1"><a class="header-anchor" href="#三、持久化"><span>三、持久化</span></a></h1><h2 id="rdb" tabindex="-1"><a class="header-anchor" href="#rdb"><span>RDB</span></a></h2><p>Redis 会<strong>单独fork一个子进程来进行持久化</strong>：</p><p>首先将数据写入到一个临时文件中，等所有持久化过程全部结束了，再用<strong>临时文件替换上次持久化好的文件</strong>。（理解的不是很透彻）</p><p>但是最后一次持久化后的数据可能丢失（好理解）</p><h2 id="aof-append-only-file" tabindex="-1"><a class="header-anchor" href="#aof-append-only-file"><span>AOF（Append Only File）</span></a></h2><p>以日志的形式来记录每个写操作，只许追加文件但不可以改写文件</p><p>AOF <strong>默认不开启</strong></p><blockquote><p>如果RDB 和 AOF都开启了，默认是听AOF的</p><p>场景:</p><ol><li>我config刚打开AOF的yes</li><li>kill掉进程重启</li><li>ll命令发现多了AOF文件大小为0字节</li><li>这个时候keys * 会发现数据库为 <strong>空</strong> 的</li></ol></blockquote><h1 id="四、主从复制" tabindex="-1"><a class="header-anchor" href="#四、主从复制"><span>四、主从复制</span></a></h1><blockquote><p>正常一台linux一个Redis，这里通过端口号模拟</p></blockquote><h2 id="_1-搭建一主多从" tabindex="-1"><a class="header-anchor" href="#_1-搭建一主多从"><span>1. 搭建一主多从</span></a></h2><ol><li>整个文件夹搞三个配置文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>include ./redis.conf
pidfile ./redis_6379.pid
port <span class="token number">6379</span>
dbfilename dump6379.rdb
masterauth <span class="token number">547061946</span>   <span class="token comment"># 别忘记这一步，如果有密码的话！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>分别启动，通过命令 <code>slaveof ip port</code> 搞两台从机 注意：如果主机Redis有密码则从机的配置文件还要加一句 masterauth xxx</li></ol><p>配置完后，只能主机写操作，从机只能读操作</p><h2 id="_2-复制原理" tabindex="-1"><a class="header-anchor" href="#_2-复制原理"><span>2. 复制原理</span></a></h2><blockquote><p>这里只介绍表象，具体原理看课件</p><p>在Redis命令中shutdown 就相当于这台服务器挂掉了，对应的看ps命令这个端口的进程也没了</p></blockquote><p>从服务器挂掉了：</p><ol><li>搞台从机shutdown</li><li>主机存几个值</li><li>恢复从机发现之前挂掉时，主机存的值自己这里没有（A: 因为重启后自己变成了主服务器，需要再转成从服务器才能看到值）</li></ol><p>主服务器挂掉了： 从服务器还是从服务器，且主服务器恢复后仍是主服务器（和上面不同）</p><h2 id="_3-薪火相传" tabindex="-1"><a class="header-anchor" href="#_3-薪火相传"><span>3. 薪火相传</span></a></h2><p>贴个图意思就是一条线串起来，压力就没那么大了</p><figure><img src="https://images.zzq8.cn/img/202205171953830.png" alt="image-20220510145507853" tabindex="0" loading="lazy"><figcaption>image-20220510145507853</figcaption></figure><p>区分：一主二仆</p><figure><img src="https://images.zzq8.cn/img/202205171953801.png" alt="image-20220510145619913" tabindex="0" loading="lazy"><figcaption>image-20220510145619913</figcaption></figure><h2 id="_4-反客为主" tabindex="-1"><a class="header-anchor" href="#_4-反客为主"><span>4. 反客为主</span></a></h2><p>主服务器 shutdown ，从服务器 slaveof no one，就会变成主服务器 【缺点：但是是手动完成的】 且之前挂掉的主服务器重连还是主服务器，就2主一从了 进阶：想让上面的自动完成且优化 -&gt; 哨兵模式</p><h2 id="_5-哨兵模式" tabindex="-1"><a class="header-anchor" href="#_5-哨兵模式"><span>5. 哨兵模式</span></a></h2><p>反客为主的自动版 能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p>折腾半天：redis 哨兵模式启动没有检测到从机 看图，我没配密码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sentinel monitor mymaster <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token number">1</span>
sentinel auth-pass mymaster <span class="token number">547061946</span> <span class="token comment"># 别忘记这一步，如果有密码的话！ </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>https://blog.csdn.net/qq_45950109/article/details/115014763 投票是根据这个参数来的 ：replica-priority 100，注意是 -&gt; 谁小投谁</p><p>完成后的现象：主机挂了，从机投票出一台当主机，主机重连后变成从机</p><h1 id="五、集群" tabindex="-1"><a class="header-anchor" href="#五、集群"><span>五、集群</span></a></h1><blockquote><p>扩容 / 并发写 可用集群，具体看课件</p></blockquote><p>一个集群至少要有三个主节点</p><p>好处：实现扩容，分摊压力（插槽）、无中心配置相对简单 缺点：多建操作mset这种不被支持 etc. 无中心化集群，可以贴一下图</p><p><img src="https://images.zzq8.cn/img/202205171953203.png" alt="04-集群简介" loading="lazy">注意旧版本还得装ruby环境 有没有这个环境可以看下src目录有没有redis-trib.rb</p><p>集群搭建好后，cli连接要用集群的方式连接 -c <code>redis -cli -c -p 6379</code> 这里用任何一个端口都是可以的6379、6380、6381。因为是无中心化集群，任何一台都可以作为集群的一个入口</p><p>贴一个插槽的图，每set一个值会有算法计算对应的插槽值【不是随机是跟hash一样固定的】 插槽作用：从6379中set一个值，发现计算后插槽范围在6380中，就会切换到6380做这个set操作 mset操作set多个值是会报错的，因为没法计算插槽范围。如想完成mset操作就需要用到组的方式给这一组set数据一个组名，计算插槽时按这个组名来</p><h1 id="六、redis应用问题" tabindex="-1"><a class="header-anchor" href="#六、redis应用问题"><span><a href="%E5%B0%9A%E7%A1%85%E8%B0%B7_Redis6%E8%AF%BE%E4%BB%B6.pdf">六、Redis应用问题</a></span></a></h1><blockquote><p>缓存穿透/击穿 可以封装成工具类，给后面复用。 例如heima的视频，就活用泛型+lambda写这个工具类</p></blockquote><h2 id="_1-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1-缓存穿透"><span>1. 缓存<mark>穿透</mark></span></a></h2><blockquote><p>空结果缓存||布隆过滤器：解决缓存穿透</p></blockquote><blockquote><p>现在明了了，原来是这么回事，看例子！</p></blockquote><p>一般是黑客恶意攻击：访问数据库中压根就不存在的数据 例如blog/30 后面30对应的是我java那篇文章，而我31是没有文章的404，黑客明知道但就是一直访问这个不存在的资源，导致数据库查询不存在数据</p><p>解决方案看课件 1）可对数据库中不存在的数据做缓存，对空值缓存 例如 31：null 设置个短的过期时间，这种方式只是个简单的应急方案</p><p>2）<strong>看网上说限制 ip 访问次数感觉也不错</strong>（XD：nginx 根据access.log写一段脚本）</p><p>3）布隆过滤器：<strong>说这个元素不在这个集合中就一定不在</strong> 存在有极小概率存在误判可能（XD 有点搞混 不在就一定不在 判断在可能是hash冲突到了） 原理：在Client with Redis 之间又加一层 把数据经过某种hash算法，hash值再转变成二进制位放到布隆过滤器里 <mark>（除非特别大的业务，实际生产不会用到的！！！）</mark></p><ol><li><p><strong>布隆过滤器的底层数据结构可以理解为bitmap,bitmap也可以简单理解为是一个数组，元素只存储0和1，所以它占用的空间相对较小</strong></p></li><li><p>布隆过滤器是可以以较低的空间占用来判断元素是否存在进而用于去重，但是它也有对应的缺点 只要使用哈希算法离不开「哈希冲突」，导致有存在「误判」的情况</p></li></ol><p>实际解决办法就是先报警，网警</p><h2 id="_2-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2-缓存击穿"><span>2. 缓存<mark>击穿</mark></span></a></h2><blockquote><p>加锁：解决缓存击穿 //其它两个好解决，这个代码层面加锁如果加不好又会产生很多问题 加锁是一种解决方案把其它挡外面</p></blockquote><p><a href="%E5%B0%9A%E7%A1%85%E8%B0%B7_Redis6%E8%AF%BE%E4%BB%B6.pdf#16Redis%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3">看课件</a> key 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时 候，需要考虑一个问题：缓存被“击穿”的问题。</p><p>1）预热（后台改改热点数据的ttl）</p><p>2）互斥锁（Mutex）或分布式锁（Distributed Lock）【setnx / Redisson】</p><p>3）逻辑过期（并不会真的设置TTL，加了个时间字段记录过期时间 -&gt; Bean[data,expireTime] 可理解为数据库的逻辑删除字段）判断如已过期会缓存重建</p><h2 id="_3-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3-缓存雪崩"><span>3. 缓存雪崩</span></a></h2><blockquote><p>设置过期时间（加随机值）：解决缓存雪崩</p></blockquote><p>好理解的解决方案：将缓存失效时间分散开 第一个缓存5分01秒，第二个缓存5分07秒搞个随机数分散开 降级限流、多级缓存</p><h1 id="七、分布式锁" tabindex="-1"><a class="header-anchor" href="#七、分布式锁"><span>七、分布式锁</span></a></h1><p>就是给集群中某一台服务器加一把锁，其他的服务器也能看到这把锁。共享锁</p><p>分布式锁主流的实现方案：</p><ol><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis等）</p></li><li><p>基于Zookeeper</p></li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li><p>性能：redis最高</p></li><li><p>可靠性：zookeeper最高</p></li></ol><p>这里，我们就基于redis实现分布式锁。</p><p>具体操作：</p><p>上锁，设置过期时间。两条命令【Redis单条命令式保存原子性的，但是事务不保证原子性！】所以会有问题，可能上完锁服务器宕机就没设置过期时间，会导致这把锁一直不会释放。</p><p>正确做法：一条命令解决上锁同时设置过期时间</p><p>Q：锁误释放问题</p><p>A：优化之UUID防误删</p><p>Lua 脚本原子性，在执行的时候别人不能打断</p><h1 id="八、other" tabindex="-1"><a class="header-anchor" href="#八、other"><span>八、Other</span></a></h1><blockquote><p>java 这个方法接下来都是要操作指定key的crud。有一个api bound</p></blockquote><h1 id="九、如何设计一个排行榜" tabindex="-1"><a class="header-anchor" href="#九、如何设计一个排行榜"><span>九、如何设计一个排行榜？</span></a></h1><p>https://www.yuque.com/snailclimb/mf2z3k/hbsnl8?pwd=cnk4</p><p>Redis 有序集合 Zset(sorted set)</p><p>总结</p><p>上面我一共提到了两种设计排行榜的方法：</p><p>1<strong>MySQL 的 ORDER BY 关键字</strong> 2Redis 的 sorted set</p><p>其实，这两种没有孰好孰坏，还是要看具体的业务场景。如果说你的项目需要排序数据量比较小并且业务场景不复杂的话（比如你对你博客的所有文章按照阅读量来排序），我觉得直接使用 MySQL 的 ORDER BY 关键字就可以了，没必要为了排行榜引入一个 Redis。</p><p>另外，在没有分页并且数据量不大的情况下，直接在前端拿到所有需要用到的数据之后再进行排序也是可以的。</p>`,135),i=[t];function o(l,c){return s(),a("div",null,i)}const d=n(p,[["render",o],["__file","Redis.html.vue"]]),k=JSON.parse('{"path":"/studynotes/NoSQL/Redis.html","title":"Redis","lang":"zh-CN","frontmatter":{"description":"Redis Redis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来 说，性能是MySQL的⼏⼗倍。 Q: Redis的lO性能比数据库高的原因是什么？ 基于内存，sql基于磁盘 - 所以少了一步磁盘IO 单线程模型 - 少了上下文切换开销 非阻塞IO - 6.0往后出现网络IO多路复用 TODO？ 允许一个线程同时监听...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/NoSQL/Redis.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:title","content":"Redis"}],["meta",{"property":"og:description","content":"Redis Redis的速度⾮常的快，单机的Redis就可以⽀撑每秒十几万的并发，相对于MySQL来 说，性能是MySQL的⼏⼗倍。 Q: Redis的lO性能比数据库高的原因是什么？ 基于内存，sql基于磁盘 - 所以少了一步磁盘IO 单线程模型 - 少了上下文切换开销 非阻塞IO - 6.0往后出现网络IO多路复用 TODO？ 允许一个线程同时监听..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.zzq8.cn/img/202205171956974.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T08:39:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T08:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis\\",\\"image\\":[\\"https://images.zzq8.cn/img/202205171956974.png\\",\\"https://images.zzq8.cn/img/202204132019207.png\\",\\"https://images.zzq8.cn/img/202204132037991.png\\",\\"https://images.zzq8.cn/img/202204132051128.png\\",\\"https://images.zzq8.cn/img/202204132110320.png\\",\\"https://images.zzq8.cn/img/202204132133211.png\\",\\"https://images.zzq8.cn/img/202204161621469.png\\",\\"https://images.zzq8.cn/img/202205171953830.png\\",\\"https://images.zzq8.cn/img/202205171953801.png\\",\\"https://images.zzq8.cn/img/202205171953203.png\\"],\\"dateModified\\":\\"2024-04-13T08:39:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 前置条件 - 改配置","slug":"_1-前置条件-改配置","link":"#_1-前置条件-改配置","children":[]},{"level":2,"title":"2. 模拟业务场景: 手机验证码","slug":"_2-模拟业务场景-手机验证码","link":"#_2-模拟业务场景-手机验证码","children":[]},{"level":2,"title":"事务的冲突问题","slug":"事务的冲突问题","link":"#事务的冲突问题","children":[]},{"level":2,"title":"Watch 操作","slug":"watch-操作","link":"#watch-操作","children":[]},{"level":2,"title":"Redis 秒杀案例","slug":"redis-秒杀案例","link":"#redis-秒杀案例","children":[]},{"level":2,"title":"LUA脚本解决库存遗留问题","slug":"lua脚本解决库存遗留问题","link":"#lua脚本解决库存遗留问题","children":[]},{"level":2,"title":"RDB","slug":"rdb","link":"#rdb","children":[]},{"level":2,"title":"AOF（Append Only File）","slug":"aof-append-only-file","link":"#aof-append-only-file","children":[]},{"level":2,"title":"1. 搭建一主多从","slug":"_1-搭建一主多从","link":"#_1-搭建一主多从","children":[]},{"level":2,"title":"2. 复制原理","slug":"_2-复制原理","link":"#_2-复制原理","children":[]},{"level":2,"title":"3. 薪火相传","slug":"_3-薪火相传","link":"#_3-薪火相传","children":[]},{"level":2,"title":"4. 反客为主","slug":"_4-反客为主","link":"#_4-反客为主","children":[]},{"level":2,"title":"5. 哨兵模式","slug":"_5-哨兵模式","link":"#_5-哨兵模式","children":[]},{"level":2,"title":"1. 缓存穿透","slug":"_1-缓存穿透","link":"#_1-缓存穿透","children":[]},{"level":2,"title":"2. 缓存击穿","slug":"_2-缓存击穿","link":"#_2-缓存击穿","children":[]},{"level":2,"title":"3. 缓存雪崩","slug":"_3-缓存雪崩","link":"#_3-缓存雪崩","children":[]}],"git":{"createdTime":1712997543000,"updatedTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":13.98,"words":4195},"filePathRelative":"studynotes/NoSQL/Redis.md","localizedDate":"2024年4月13日","autoDesc":true}');export{d as comp,k as data};
