import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as u,d as n,f as s,a,w as p,e as t}from"./app-B3pOtRME.js";const d={},k=n("h1",{id:"advanced",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#advanced"},[n("span",null,"Advanced")])],-1),m={href:"https://easydoc.net/s/78237135/ZUqEdvA4/hKJTcbfd",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.bilibili.com/video/BV1np4y1C7Yf/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/1024zzq/gulimall",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/hancoder/article/details/106922139",target:"_blank",rel:"noopener noreferrer"},b={href:"https://gitee.com/AdverseQ/gulimall_Advanced",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/NiceSeason/gulimall-learning",target:"_blank",rel:"noopener noreferrer"},_={href:"https://gitee.com/lemon_wan/gulimall/blob/dev/%E9%AB%98%E7%BA%A7%E7%AF%87.md#8%E6%94%AF%E4%BB%98",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/NiceSeason/gulimall-learning/blob/master/docs/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7.md#6-%E6%94%AF%E4%BB%98",target:"_blank",rel:"noopener noreferrer"},q=t(`<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h3><p>视频中雷神stream循环查库了，我问了ChatGPT：</p><blockquote><p>Q: 如何避免stream循环查库</p><p>A: 下面是一些避免stream循环查询数据库的常见方法：</p><ol><li>利用缓存：在访问数据库前，先从缓存中查找所需的数据，只有在缓存中没有找到时才会查询数据库。</li><li>批量读取：对于一次需要多次查询数据库的操作，可以通过一次性读取多条记录，而不是对每一条记录单独读取，从而减少数据库的读取次数。</li><li>延迟加载：可以通过延迟加载技术，在需要时再读取数据库，而不是在一开始就读取。</li><li>分页：对于大量的数据，可以通过分页的方式，分批读取数据，减少单次读取数据的量。</li></ol><p>这些方法都可以减少stream循环查询数据库的次数，提高代码效率。</p></blockquote><p><mark>高并发三宝：缓存、异步、消息队列</mark></p><h3 id="商品上架" tabindex="-1"><a class="header-anchor" href="#商品上架"><span>商品上架</span></a></h3><p>由于是结合 ES 的，我这里就看视频 CV 了。视频给我的感觉还挺繁琐的！</p><p>发请求是得益于 Fegin 的 MethodHandle，在<strong>发请求之前会把请求的数据编码成 JSON</strong> XD：我想的是它可以看成HTTP+JSON</p><p>接受请求体的 JSON 转成 List 得益于 SpringMVC</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/product&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">productStatusUp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuEsModel</span><span class="token punctuation">&gt;</span></span> skuEsModels<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="一、商城业务-架构" tabindex="-1"><a class="header-anchor" href="#一、商城业务-架构"><span>一、商城业务/架构</span></a></h1><blockquote><p>Q：静态资源放 nginx</p><p>A：反证法 -&gt; 请求个图片都要到后台，假如 3k 个请求 2k 都是静态资源请求，真正处理业务的就 1k 拖慢</p><p>QAQ：视频中繁琐的，异常类中的各种常量Enum，各种封装的VO。封装API跨服务调用。返回值R //这个叫分层思想，又不是写学生作业，什么都混一起，能用就行</p></blockquote><figure><img src="https://images.zzq8.cn/img/202212071647791.png" alt="image-20221207164702704" tabindex="0" loading="lazy"><figcaption>image-20221207164702704</figcaption></figure><p>独立自治：不局限于 Java 也可以用 php..</p><h2 id="_1-nginx" tabindex="-1"><a class="header-anchor" href="#_1-nginx"><span>1.Nginx</span></a></h2><blockquote><p>由于这里需要本地开虚拟机操作，我跳过了！如果我要用云服务的Nginx有没有解决方法？ 内网穿透？？？TODO 待定</p><p>注意点：Nginx 代理后会丢失很多东西，比如 host 就是。所以需要注意，看图片红色部分</p></blockquote><figure><img src="https://images.zzq8.cn/img/202212241453788.png" alt="image-20221224145341950" tabindex="0" loading="lazy"><figcaption>image-20221224145341950</figcaption></figure><p>这两块流程具体看我的 Nginx 笔记</p><h3 id="nginx反向代理流程" tabindex="-1"><a class="header-anchor" href="#nginx反向代理流程"><span>Nginx反向代理流程：</span></a></h3><ol><li>本地配Hosts gulimall.com 127.0.0.1</li><li>虚拟机 Nginx 代理 Hosts 里面配的域名转发到 网关（Nginx配置记得set Host不然会丢失）</li><li>网关配置匹配host到指定的 product 集群</li></ol><p>各个模块在host给一个二级域名</p><p>Nginx代理*.gulimall.com丢给网关</p><p>网关再根据二级域名给断言路由到各个模块</p><h3 id="nginx-动静分离" tabindex="-1"><a class="header-anchor" href="#nginx-动静分离"><span>Nginx 动静分离</span></a></h3><p>配置一个 location 静态资源就到 Nginx 拿了！</p><h2 id="_2-thymeleaf" tabindex="-1"><a class="header-anchor" href="#_2-thymeleaf"><span>2.Thymeleaf</span></a></h2><p>为了教学目的考虑：加 Thymeleaf 并关闭缓存</p><p>vue 是客户端渲染，模板引擎是服务端渲染</p><h3 id="_2-1-视图映射" tabindex="-1"><a class="header-anchor" href="#_2-1-视图映射"><span>2.1 视图映射</span></a></h3><blockquote><p>发送一个请求直接跳转到一个页面。 -&gt; SpringMVC viewcontroller;将请求和页面映射过来</p><p><strong>视图映射：请求直接跳转页面的，用这种方式！不写空方法了</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**    
     *     @GetMapping(&quot;/login.html&quot;)
     *     public String loginPage()<span class="token punctuation">{</span>
     *         return &quot;login&quot;;
     *     <span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//路径映射：直接写哪个请求映射哪个页面就行，无需写多余的Controller 【注意：默认都是Get方式访问的】</span>
        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">&quot;/reg.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;reg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-model-redirectattributes" tabindex="-1"><a class="header-anchor" href="#_2-2-model-redirectattributes"><span>2.2 Model / RedirectAttributes</span></a></h3><p>可以往 Thymeleaf 携带参数，模拟的 HttpSession</p><p>Model 数据是在请求域中的！ vs RedirectAttributes 重定向视图（addFlashAttribute方法代表只需要取一次！跳转取到后刷新页面就没了 | addAttribute():将数据放在url后面）</p><ul><li><p>重定向携带数据,利用session原理.将数据放在session中.</p></li><li><p>只要跳到下一个页面取出这个数据以后,session里面的数据就会删掉</p></li></ul><p><strong>问题：但是他是利用的session原理，所以后期我们需要解决分布式的session问题</strong></p><h1 id="二、性能压测" tabindex="-1"><a class="header-anchor" href="#二、性能压测"><span><mark>二、性能压测</mark></span></a></h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言"><span>1）前言</span></a></h2><blockquote><p>微服务模块在上线之前乃至上线之后都会进行压力测试 老师讲课时基本都是50线程持续压</p></blockquote><p><mark>先说答案：CPU核心数和线程数量没什么必然的关系。</mark> 线程是运行在内存中的，因此系统内存的大小也会影响可以创建的线程数 你可以在只有一个核心的CPU上创建任意多线程，也可以在有多个核心的CPU上创建一个线程。要想充分利用多核，一般来说线程数至少不能少于核心数。</p><p>压测目的：首先考虑自己的应用属于 <strong>CPU 密集型 还是 IO 密集型</strong></p><p>例如中间件多是计算基本是 CPU 密集型（Nginx、网关）</p><ul><li>考察当前软硬件环境下系统所能承受的最大负荷并帮助找出系统瓶颈所在</li><li>使用压力测试，我们有希望找到很多种用其他测试方法更难发现的错误。有两种错误类型是: 内存泄漏，并发与同步。</li></ul><h2 id="_2-压力测试-线程" tabindex="-1"><a class="header-anchor" href="#_2-压力测试-线程"><span>2）压力测试-线程</span></a></h2><p>重要指标-吞吐量：</p><ul><li><p>TPS（Transaction per Second）：系统每秒处理交易数，单位是笔/秒。（不能狭义的理解为数据库的事务，而是走完整个事务的流程 电商要求高）</p></li><li><p>QPS（Query per Second）：系统每秒处理查询次数，单位是次/秒。对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS=QPS=HPS，一般情况下用 TPS 来衡量整个业务流程，用 QPS 来衡量接口查询次数，用HPS 来表示对服务器单击请求。</p></li></ul><p>重要指标-吞吐量：</p><ul><li>最大响应时间（Max Response Time） 指用户发出请求或者指令到系统做出反应（响应）的最大时间。</li><li>最少响应时间（Mininum ResponseTime） 指用户发出请求或者指令到系统做出反应（响应）的最少时间。</li><li>90%响应时间（90% Response Time） 是指所有用户的响应时间进行排序，第90%的响 应时间。</li></ul><p>重要指标-错误率</p><p>注意：如测首页不精准只拿了html数据，而我们需要模拟更真实的全量数据（image、js、css），需要到JMeter HTTP请求高级部分设置</p><p>JMeter 可以设置中文</p><p>JMeter 一般就看结果树、汇总报告、聚合报告</p><p>JMeter 压测的时候搭配 jvisualvm 看图形化分析</p><h2 id="_3-性能监控-jvm" tabindex="-1"><a class="header-anchor" href="#_3-性能监控-jvm"><span><mark>3）性能监控-JVM</mark></span></a></h2><blockquote><p>这几集才是成长的精髓啊 以前都不知道这东西</p><p>优化期间看图标衡量这些指标：看当前应用是卡在 cpu 的计算了 还是内存经常容易满 还是线程数不够运行太慢 ...</p></blockquote><p>jconsole 与 jvisualvm（更推荐）</p><p>直接 cmd 输入 jconsole/jvisualvm 即可打开，看到内存占用是我在 idea 设置的 vm option 100 头一次知道还有这个功能！</p><p>jvisualvm 能干什么 监控内存泄露，跟踪垃圾回收，执行时内存、cpu</p><p>安装插件方便查看 gc: <mark>感觉这有点 JVM 调优那味了</mark> 可以和面试官唠唠！</p><p>因为我这个项目 -Xmx 只给了 100MB 一下就满了要回收导致 图 频繁GC直角三角形，所以多给点空间肯定能提升性能！</p><p>可用插件 -&gt; Visual GC</p><h2 id="_4-两者结合-压测同时看性能" tabindex="-1"><a class="header-anchor" href="#_4-两者结合-压测同时看性能"><span><mark>4）两者结合-压测同时看性能</mark></span></a></h2><p>各个中间件的压测数据：04、性能与压力测试.pdf 其实浏览器F12也可以看到一个响应时间也可做一部分依据</p><p><mark>该表极具学习价值：</mark></p><table><thead><tr><th>压测内容</th><th style="text-align:left;">压测线程数</th><th>吞吐量/s</th><th>90%响应时间/ms</th><th>99%响应时间</th></tr></thead><tbody><tr><td>Nginx</td><td style="text-align:left;">50</td><td>2335</td><td>11</td><td>944</td></tr><tr><td>Gateway</td><td style="text-align:left;">50</td><td>10367</td><td>8</td><td>31</td></tr><tr><td>简单服务</td><td style="text-align:left;">50</td><td>11341</td><td>8</td><td>17</td></tr><tr><td>首页一级菜单煊染</td><td style="text-align:left;">50</td><td>270（db,thymeleaf）</td><td>267</td><td>365</td></tr><tr><td>首页染（开缓存）</td><td style="text-align:left;">50</td><td>290</td><td>251</td><td>365</td></tr><tr><td>首页染（开缓存、优化数据库、关日志）</td><td style="text-align:left;">50</td><td>700</td><td>105</td><td>183</td></tr><tr><td>三级分类数据获取</td><td style="text-align:left;">50</td><td>2（db）/8（加索引）</td><td></td><td></td></tr><tr><td>三级分类（优化业务）</td><td style="text-align:left;">50</td><td>111</td><td>571</td><td>896</td></tr><tr><td>三级分类（使用redis 作为缓存）</td><td style="text-align:left;">50</td><td>411</td><td>153</td><td>217</td></tr><tr><td>首页全量数据获取</td><td style="text-align:left;">50</td><td>7（静态资源）</td><td></td><td></td></tr><tr><td>Nginx+Gateway</td><td style="text-align:left;">50</td><td></td><td></td><td></td></tr><tr><td>Gateway+简单服务</td><td style="text-align:left;">50</td><td>3126</td><td>30</td><td>125</td></tr><tr><td>全链路</td><td style="text-align:left;">50</td><td>800</td><td>88</td><td>310</td></tr></tbody></table><p>中间件越多，性能损失越大，大多都损失在网络交互了；</p><p>业务：</p><ul><li>Db（MySQL 优化）</li><li>模板的渲染速度（缓存）</li><li>静态资源</li></ul><h1 id="三、缓存" tabindex="-1"><a class="header-anchor" href="#三、缓存"><span>三、缓存</span></a></h1><h2 id="_1-前言-1" tabindex="-1"><a class="header-anchor" href="#_1-前言-1"><span>1）前言</span></a></h2><blockquote><p>这个项目代码里很多 stream 中循环查表了！ 看本文开头</p><p>初步解决：优化代码 -&gt; 一次性查出所有数据，需要的时候再通过集合操作去filter拿对应的</p><p>提升：例如首页的菜单基本不怎么变，进一次首页就要查一次 考虑 <strong>缓存</strong></p></blockquote><p>缓存的技术有很多 -&gt; 最简单的缓存技术可以用 Map（本地缓存）：声明个Map到最外圈，方法里面if这个Map有没有缓存</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//如果缓存中有就用缓存的</span>
 <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> catalogJson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;catalogJson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;catalogJson&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">//调用业务</span>
     <span class="token comment">//返回数据又放入缓存</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p><ol><li>只适用于单体应用，分布式下会每个一份</li><li>修改没法附带其它服务器一起改缓存（<strong>数据一致性问题</strong>）</li></ol><p>解决:</p><p>不应该存本地服务器，应该在集群服务器上面加一层 中间件 Redis</p><p>注意：<strong>分片存概念</strong>：集群的Redis 1号存id为1-1w的数据 2号存2-3w的数据以此类推</p><blockquote><p>Redis 分片是一种将数据分散存储在多个 Redis 节点上的技术，它可以扩展 Redis 存储容量和吞吐量，以满足大规模应用程序的需求。在 Redis 分片中，数据被分割成多个较小的数据片段，每个数据片段存储在一个单独的 Redis 节点上。通过将数据分散存储在多个节点上，可以将负载均衡到多个节点上，提高系统的可扩展性和可靠性。</p><p>Redis 分片的实现方式通常是将数据根据其键进行哈希，然后将哈希结果映射到不同的 Redis 节点上。具体来说，可以使用一致性哈希算法来实现 Redis 分片。在一致性哈希算法中，每个 Redis 节点被分配一个哈希值，每个键也被映射到一个哈希值。当需要将数据存储到 Redis 中时，可以使用一致性哈希算法将键哈希为一个值，然后将值映射到一个 Redis 节点上，从而将数据存储在相应的节点上。</p></blockquote><h2 id="_2-redis使用" tabindex="-1"><a class="header-anchor" href="#_2-redis使用"><span>2）Redis使用</span></a></h2><h3 id="_2-1-引入-redis-注意-云服务器redis不设密容易被挖矿" tabindex="-1"><a class="header-anchor" href="#_2-1-引入-redis-注意-云服务器redis不设密容易被挖矿"><span>2.1 引入 Redis：注意 -&gt; 云服务器redis不设密容易被挖矿</span></a></h3><ol><li>引入 pom</li><li><strong>no-sql 和sql一样配地址密码</strong></li><li>使用，建议先来个单元测试</li></ol>`,81),x=n("a",{href:"../NoSQL/RedisAdvanced#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98-StringRedisTemplate"},"Redis笔记",-1),C=n("br",null,null,-1),S=t(`<p>com.alibaba.fastjson.JSON（jackson也有这个类） -&gt; <code>TypeReference</code></p><p>jackson都是操作ObjectMapper这个对象进行序列化、反序列化 XD：Jackson笔记官方的，更偏向于它 -&gt; ObjectMapper</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//对象 -&gt; Json</span>
<span class="token doc-comment comment">/**
 * Json -&gt; 对象
 * 重点：protected TypeReference()  构造方法是protected所以需要匿名创建
 */</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>catalogJson<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>jackson 获取json字符串指定key的value值<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>【<span class="token class-name">Spring</span> <span class="token class-name">Boot</span>项目中，<span class="token class-name">Jackson</span>通常是默认集成的】<span class="token operator">--</span><span class="token operator">--</span>
	<span class="token comment">// 创建 ObjectMapper 对象   </span>
    <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 将 JSON 字符串转换为 JsonNode 对象</span>
	<span class="token class-name">JsonNode</span> jsonNode <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readTree</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 获取指定 key 的 value</span>
    <span class="token class-name">String</span> id <span class="token operator">=</span> jsonNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    socialUser<span class="token punctuation">.</span><span class="token function">setSocial_uid</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>   反序列化报错（autoType）因为fastjson的漏洞解决<span class="token operator">:</span> 我这里是降到有漏洞的版本     <span class="token operator">/</span>  按官网加配置<span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.2</span><span class="token number">.47</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
    
    
    后面我光order模块总是有这个问题，其它通过上述解决。不想再纠结了，就换了一个序列化
    https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>qq_40265247<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">114374706</span>


<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">Boke</span> <span class="token class-name">Company</span> 我常用<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
  <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//Map&lt;String, Object&gt; map = mapper.readValue(s, new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {});</span>
  <span class="token comment">//一般二开不复杂，就把map对象转一下。传前端 JsonNode</span>
  <span class="token class-name">JsonNode</span> jsonNode <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token class-name">JsonNode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> jsonNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转 JSON对象 注意不是 String！！！</p><blockquote><p>我测出的两种好一点的方法：</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>		ObjectMapper mapper = new ObjectMapper();
        JsonNode jsonNode = mapper.convertValue(res, JsonNode.class);
        JsonNode jsonNode1 = mapper.valueToTree(res);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-lettuce堆外内存溢出bug" tabindex="-1"><a class="header-anchor" href="#_2-2-lettuce堆外内存溢出bug"><span>2.2 lettuce堆外内存溢出bug</span></a></h3><blockquote><p>这不就是面试中常问的&quot;开发中遇到什么困难,怎么解决的嘛&quot;</p><p><strong>lettuce和jedis是操作redis的底层客户端</strong>，RedisTemplate是再次封装</p></blockquote><h5 id="单个自己测单线程没问题-但当进行压力测试时后期会出现堆外内存溢出outofdirectmemoryerror" tabindex="-1"><a class="header-anchor" href="#单个自己测单线程没问题-但当进行压力测试时后期会出现堆外内存溢出outofdirectmemoryerror"><span>单个自己测单线程没问题，但当进行压力测试时后期会出现<strong>堆外内存溢出OutOfDirectMemoryError</strong></span></a></h5><p>产生原因：lettuce 可能没有及时释放掉内存，导致堆外内存溢出。（源码体现某一块可能没有减内存导致溢出）</p><p>1)、<strong>springboot2.0以后默认使用lettuce作为操作redis的客户端</strong>，它使用netty进行网络通信（优点，所以吞吐量是极大的。而Jedis比较老了）</p><p>2)、lettuce的bug导致netty堆外内存溢出。<strong>netty如果没有指定堆外内存，默认使用Xms的值，可以使用-Dio.netty.maxDirectMemory进行设置</strong></p><p>解决方案：由于是lettuce的bug造成，不要直接使用-Dio.netty.maxDirectMemory去调大虚拟机堆外内存，治标不治本。</p>`,13),E={href:"https://blog.csdn.net/weixin_43878332/article/details/113944197",target:"_blank",rel:"noopener noreferrer"},w=t('<p>摘自弹幕： 2022 2 13 表示和老师同样的版本还会出现和老师同样的问题 其它高版本或许没有这个问题 如果不想改成jedis 先exclusion排除 然后导入letture依赖5.2.*版本的也行 5.2.0.RELEASE亲测可用</p><p>JMeter</p><table><thead><tr><th>压测内容</th><th>压测线程数</th><th>吞吐量/s</th><th>90%响应时间</th><th>99%响应时间</th></tr></thead><tbody><tr><td>三级分类（优化业务）</td><td>50</td><td>2</td><td>21481</td><td>22192</td></tr></tbody></table><p>压测时候 redis上显示timeout连接超时，自己加了配置 timeout 改大了就行</p><p>😡但是我发现 idea 改 yaml 时候点击 build 能编译到 target 但是运行起来修改的这个timeout却还是原先的没有改变，不知道这个参数是不是 Redis 刚跑的时候拿的后面就算修改也不会再去拿了</p><h3 id="_2-3-redis-三大问题" tabindex="-1"><a class="header-anchor" href="#_2-3-redis-三大问题"><span>2.3 <mark>Redis 三大问题</mark></span></a></h3><blockquote><p><a href="../NoSQL/Redis">自己的笔记</a></p></blockquote><p>1）、读模式</p><ul><li><p>缓存穿透【空结果缓存||布隆过滤器】</p></li><li><p>缓存雪崩【加随机时间】</p></li><li><p><mark>缓存击穿【加锁】</mark> //其它两个好解决，这个代码层面加锁如果加不好又会产生很多问题</p><ul><li>使用<code>sync = true</code>来解决击穿问题</li></ul></li></ul><p>2)、写模式：（缓存与数据库一致）</p><ul><li>读写加锁。</li><li>引入Canal，感知到MySQL的更新去更新Redis</li><li>读多写多，直接去数据库查询就行</li></ul><p>3）、总结：</p><ul><li>常规数据（读多写少，即时性，一致性要求不高的数据，完全可以使用Spring-Cache）：</li><li>写模式(只要缓存的数据有过期时间就足够了)</li><li>特殊数据：特殊设计</li></ul><p>加锁初体验：</p>',14),R={href:"https://github.com/mrniko/redisson",target:"_blank",rel:"noopener noreferrer"},T=n("li",null,[s("因为会有集群环境，即每个应用一把锁。所以得用"),n("strong",null,"分布式锁"),s(" 本地锁的this只能锁住当前服务")],-1),j=t(`<p>本地锁体现：因为只锁当前服务，所以下图每个服务都会走一遍数据库。而我们正常想要的是所有服务有一个走了数据库就行了其它用缓存</p><img src="https://images.zzq8.cn/img/202212261651183.png" alt="image-20221226165114071" style="zoom:50%;"><p>加锁问题：查询数据库的业务执行了两次</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//TODO 这里查了两次数据库   原因是锁的时序问题具体看资料图，这个方法完了放入redis的操作没在锁里。所以交互的空隙后面排队的乘空隙判断redis里没数据</span>
<span class="token comment">//解决办法：把redis set也放到这个synchronized块里</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解决：查完后+放缓存 这两步得保证是一个原子操作！在同一把锁内进行的</p><h2 id="_3-分布式锁" tabindex="-1"><a class="header-anchor" href="#_3-分布式锁"><span>3）分布式锁</span></a></h2><blockquote><p>注：我这里 3）4) 都没有手动敲，印象没有那么深刻。以后再回顾，先往下赶进度了</p></blockquote>`,7),A=n("p",null,"分布式项目时，但本地锁只能锁住当前服务，需要分布式锁",-1),z=n("p",null,"redis自己实现分布式锁的最大的问题就是自旋，自旋消耗cpu资源，所以还是得中间件进行拿阻塞，比如zookeeper",-1),B=t('<p>正规笔记看我另一篇笔记，现在是我看视频我接地气的理解：</p><h4 id="加锁" tabindex="-1"><a class="header-anchor" href="#加锁"><span>加锁：</span></a></h4><ol><li>xshell多开，通过撰写栏同时执行 <code>set K V NX</code> 【保证只有一个线程会拿到锁，独占排它 <mark>这是分布式锁的基本原理！</mark>】 <ul><li>前提，锁的key是一定的，value不重要。重点是排它 作为一把锁来用</li><li>题外：Xshell多窗口同时输入命令 窗口 -&gt; 撰写栏</li></ul></li><li>代码初步写好，发现会有死锁问题！expire【防宕机没释放锁，导致死锁】 while好一点，这里递归太容易内存溢出<img src="https://images.zzq8.cn/img/202212261839248.png" alt="image-20221226183938038" loading="lazy"><ul><li>问题来了：设置锁和设置过期时间 java代码体现得有两行。没有原子性！ 换成一行的 API 是有的！</li></ul></li></ol><h4 id="解锁" tabindex="-1"><a class="header-anchor" href="#解锁"><span>解锁：</span></a></h4><ol start="3"><li>业务还没处理完锁就过期，这时候又去删锁就是删别的线程的锁了！【value利用起来，用来辨别当前锁是不是自己拿着】</li></ol>',5),L=n("strong",null,"获取值对比（去）+对比成功删除（回）=原子操作",-1),O={href:"http://www.redis.cn/commands/set.html",target:"_blank",rel:"noopener noreferrer"},P=n("ol",{start:"4"},[n("li",null,"难点：解决 No.3 的难点，业务还没处理完。这时候锁需要自动续期（Redisson有个看门狗）")],-1),M=n("strong",null,"但是分布式锁有更专业的框架！",-1),D=n("strong",null,"不推荐",-1),J={href:"http://www.redis.cn/commands/set.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/mrniko/redisson",target:"_blank",rel:"noopener noreferrer"},F={id:"_4-分布式锁-redisson",tabindex:"-1"},N={class:"header-anchor",href:"#_4-分布式锁-redisson"},Q={href:"https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"它是底层基于Redis实现了一系列的工具（分布式的可伸缩的java工具）",-1),G=n("p",null,[s("JRedis、Lettuce一样都是 Redis 的JAVA客户端 / "),n("strong",null,"redisson是作为分布式锁的客户端 只不过更强大提供分布式解决方案，我觉得可理解为再把JUC包了一层适用于分布式了，而JUC是单体。同样有加锁、信号量等后面项目用到的点！")],-1),H={href:"https://github.com/mrniko/redisson",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"Q：Redisson和redis有什么关联吗 总之，Redisson 和 Redis 之间密切相关，Redisson 是 Redis 的一个客户端，并且对 Redis 进行了封装和扩展，提供了更方便的 Redis 功能和更多的分布式功能。",-1),W=t(`<blockquote><p>突然又看到官网： <strong>Redisson 是具有内存数据网格功能的 Redis Java 客户端</strong>。它提供了更方便和最简单的方式来使用 Redis。Redisson 对象提供关注点分离，使您可以专注于数据建模和应用程序逻辑。</p><p>OpenAI:</p><p>Redisson是基于Redis的分布式Java对象和服务框架。它提供了一系列的分布式Java对象，例如分布式Map、分布式Set、分布式List等等，这些对象都是通过Redis进行存储和同步的。</p><p>Redisson可以用来解决分布式系统中的一些常见问题，例如分布式锁、分布式集群选举、分布式对象存储和分布式限流等。Redisson支持多种部署模式，包括单机模式、哨兵模式、集群模式和云托管模式等，可以适应不同的部署需求。</p><p>除了基本的分布式对象，Redisson还提供了一些高级特性，例如分布式计数器、分布式BitSet、分布式消息队列等等，可以满足更加复杂的分布式应用场景。</p><p>总的来说，Redisson是一个功能强大的分布式Java框架，可以帮助开发者更加容易地构建分布式应用。</p></blockquote><blockquote><p>Q: 老师，问您个很简单的问题我不太懂，就是咱们这个不是一个单体项目嘛，怎么还用到了分布式锁呢？我以为只有分布式项目才会用到分布式锁呢哈哈哈</p><p>A: 单体项目也可以水平扩展，部署多个机器，构成负载均衡集群。此时如果需要加锁，可能就需要分布式锁了</p></blockquote><figure><img src="https://images.zzq8.cn/img/202303041526511.png" alt="image-20230304152602369" tabindex="0" loading="lazy"><figcaption>image-20230304152602369</figcaption></figure><p>pom start好处什么都配好了，只需要写两三个配置就行。而这里我们引入单纯的 Redisson 以学习为目的都自己搞一下</p><p>注意：redission 听听就好，后面还会讲导入 cache、Redis 两个Start 一配置类 后面就直接用注解了方便的很</p><p>具体：看GitHub的Redisson官方文档就行，有中文。看着配：视频以程序化配置讲解</p><h3 id="_4-1-初体验" tabindex="-1"><a class="header-anchor" href="#_4-1-初体验"><span>4.1 初体验</span></a></h3><blockquote><p>看下面代码注释！理清看门狗 结合官方文档</p><p>看门狗机制是Redission提供的一种自动延期机制，这个机制使得<strong>Redission提供的分布式锁是可以自动续期的</strong>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> lockWatchdogTimeout <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>看门狗机制提供的默认超时时间是30*1000毫秒，也就是30秒</strong></p><p><strong>在Redission中想要启动看门狗机制，那么我们就不用获取锁的时候自己定义<code>leaseTime(锁自动释放时间)</code>。</strong></p><p>如果自己定义了锁自动释放时间的话，无论是通过<code>lock</code>还是<code>tryLock</code>方法，都无法启用看门狗机制。</p><p>但是，如果传入的<code>leaseTime</code>为-1，也是会开启看门狗机制的。</p><blockquote><p>看门狗机制的工作原理如下：</p><ol><li><strong>当一个线程成功获取到分布式锁后，看门狗会启动一个定时任务</strong>（默认加锁 30秒，每10秒钟检查一次，如果存在就重新设置 过期时间为30秒）</li><li>定时任务会定期发送续约请求到Redis，更新锁的过期时间。</li><li>如果获取锁的线程因为某种原因（如网络故障、线程挂起等）未能及时续约锁的过期时间，锁会在过期时间到达后自动释放，其他线程可以获取到锁。</li><li>如果获取锁的线程仍然活跃，并且定时任务成功续约了锁的过期时间，那么锁将一直保持有效，直到线程显式释放锁。</li></ol></blockquote><blockquote><h4 id="项目上怎么用的分布式锁-原理是什么" tabindex="-1"><a class="header-anchor" href="#项目上怎么用的分布式锁-原理是什么"><span>项目上怎么用的分布式锁，原理是什么？</span></a></h4><p>首先分布式锁是一种<strong>跨进程跨机器节点的互斥锁</strong>，可以保证在多机器节点下对共享资源的排他性，通过第三方服务比如 reids 去共享锁，保证同一时刻只能有一个实例能够获取到锁。</p><p>然后分布式锁主要使用 Redisson 去实现的，Redisson的底层逻辑是基于 lua 脚本去实现的；</p><p>如果是第一次加锁，就会在 key 对应的 hash结构中添加一个 UUID：线程标识和1，代表了该线程对这个 key加锁了一次；</p><p>并且key的过期时间默认为30秒，如果启用了 watchdog机制，就会在后台启用一个线程，该线程会去执行一个定时任务，每10秒检查一次，如果key存在，就重置key的生存时间为30秒；</p><p>并且 Redisson 也实现了可重入锁的机制，当再次加锁，会对key对应的value加1，当value为0或者宕机，锁就会释放。</p><h4 id="分布式锁用的redis的哪种数据结构" tabindex="-1"><a class="header-anchor" href="#分布式锁用的redis的哪种数据结构"><span>分布式锁用的redis的哪种数据结构？</span></a></h4><p>hash结构，用来线程id+重入次数，（然后扯一下它的流程和原理）</p><p><code>String lockKey = &quot;DISTRIBUTE_LOCK:redissonLock:product_&quot; + productId;</code></p><figure><img src="http://images.zzq8.cn/img/8813c6efcba2437dad736fe89b43ebc5.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure></blockquote></blockquote>`,8),K={href:"http://static.javadoc.io/org.redisson/redisson/3.10.0/org/redisson/api/RLock.html",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"RLock",-1),$=n("code",null,"java.util.concurrent.locks.Lock",-1),X=t(`<p>优秀的地方：模拟两个服务，业务处理3秒。第一个服务处理业务途中给停掉还没有释放锁，第二个服务此时发现过一过时间还是能拿到锁！【有ttl默认30s】 没有手动解锁它也会给解锁 看Redis的表现：锁的ttl30，刷新到18..再刷新又变成了30 看来是实现了自动续期【<strong>看门狗</strong>】 <mark>注意：用带参参构造就不会用看门狗</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 参数为锁名字  锁的粒度，越细越快。   即名字可以细致一点 不要很多都公用一把锁</span>
<span class="token comment">// 锁的粒度：具体缓存的是某个数据，11-号商品； product-11-Lockproduct-12-Lock product-Lock</span>
<span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;CatalogJson-Lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该锁实现了JUC.locks.lock接口</span>

    <span class="token doc-comment comment">/**
     * 问题：Lock.Lock（10,TimeUnit.SECONDS）在锁时间到了以后，不会自动续期。
     * 1、如果我们传递了锁的超时时间，就发送给redis执行脚本，进行占锁，默认超时就是我们指定的时间
     * 2、如果我们未指定锁的超时时间，就使用30*1000【LockWatchdogTimeout看门狗的默认时间】；
     * 只要占锁成功，就会启动一个定时任务【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】每隔10s续期续成30s看下行
     * internalLockLeaseTime【看门狗时间】／3,10s  续期  默认30s-20&gt;=10给恢复到30
     * //最佳实战
     * //1）、Lock.Lock（30,TimeUnit.SECONDS）省掉了整个续期操作。手动解锁         注意：有参构造没用看门狗
     */</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞式等待，以前是自旋  这里的加锁是给 redis 给的Key里放UUID+线程号和之前是差不多的</span>

<span class="token comment">// 解锁放到finally // 如果这里宕机：有看门狗，不用担心</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些其它锁，API和JUC差不多 例如读写锁可以看看[自己笔记](../juc/juc#4） 独占锁（写锁） / 共享锁（读锁） / 互斥锁)</p><h2 id="_5-分布式锁-缓存数据一致性" tabindex="-1"><a class="header-anchor" href="#_5-分布式锁-缓存数据一致性"><span>5）分布式锁-缓存数据一致性</span></a></h2><blockquote><p>缓存里面的数据如何和数据库保持一致，针对读多写少的场景</p><p>缓存本来保证的就是 最终一致性，反正有 ttl 失效后重查放入缓存就又是最新数据了</p></blockquote><img src="https://images.zzq8.cn/img/202308231025871.png" alt="image-20230314161335765" style="zoom:67%;"><h3 id="_1-、双写模式-写数据库后-写缓存" tabindex="-1"><a class="header-anchor" href="#_1-、双写模式-写数据库后-写缓存"><span>1）、双写模式：写数据库后，写缓存</span></a></h3><p>问题：脏数据（No.1写完数据库还没写缓存，此时 No.2也写完这两个了。这时No.1再写缓存就覆盖No.2的新数据了）</p><img src="https://images.zzq8.cn/img/202212271758645.png" alt="image-20221227175831418" style="zoom:50%;"><p>解决：加锁写数据和写缓存锁一起</p><h3 id="_2-、失效模式-写完数据库后-删缓存-推荐" tabindex="-1"><a class="header-anchor" href="#_2-、失效模式-写完数据库后-删缓存-推荐"><span>2）、失效模式：写完数据库后，删缓存（推荐）</span></a></h3><p>解决：可以 读写锁 但是如果不关心这些数据有点延迟也没关系那就不加锁没事。例如 iphone 11刚发布的商品介绍变了点参数我晚一点看也不影响</p><img src="https://images.zzq8.cn/img/202212271819194.png" alt="image-20221227181939118" style="zoom:67%;"><p>解决方案：</p><p>如果是用户纬度数据（订单数据、用户数据），这种并发几率非常小，不用考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可 如果是菜单，商品介绍等基础数据，也可以去使用canal订阅binlog的方式 缓存数据+过期时间也足够解决大部分业务对于缓存的要求。 通过加锁保证并发读写，写写的时候按顺序排好队。读读无所谓。所以适合使用读写锁。（业务不关心脏数据，允许临时脏数据可忽略）；</p><p>总结：</p><p>我们能放入缓存的数据本就不应该是实时性、一致性要求超高的。所以缓存数据的时候加上过期时间，保证每天拿到当前最新数据即可。 我们不应该过度设计，增加系统的复杂性 遇到实时性、一致性要求高的数据，就应该查数据库，即使慢点。</p><h3 id="_5-1-canal-了解" tabindex="-1"><a class="header-anchor" href="#_5-1-canal-了解"><span>5.1 Canal 了解</span></a></h3><p>最好的解决方法：Canal 原理伪装成mysql的一个从服务器 通过订阅 binlog 拿每一次的更新 好处：只需要关心数据库就好，不用管缓存（屏蔽了对整个缓存的操作） 缺点又加了个中间件 canal 还可以做数据异构：jd 首页每个人的个性化推荐</p><img src="https://images.zzq8.cn/img/202212271822130.png" alt="image-20221227182220035" style="zoom:80%;">`,20),Z={id:"_6-springcache",tabindex:"-1"},nn={class:"header-anchor",href:"#_6-springcache"},sn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache",target:"_blank",rel:"noopener noreferrer"},an=t('<blockquote><p>这是属于 Spring 框架里面的 Integration 里面有个 Caching（具体看官网文档！）</p></blockquote><h3 id="_6-1-why" tabindex="-1"><a class="header-anchor" href="#_6-1-why"><span>6.1 Why：</span></a></h3><p>先读缓存，缓存没有再读数据库 封装查询一大块。每次都那样写缓存太麻烦了。有简单的方式处理这些 Spring Cache可以通过简单的几个注解把缓存功能跑起来，不用编写一大堆的模式代码了。spring从3.1开始定义了Cache、CacheManager接口来统一不同的缓存技术。并支持使用JCache(JSR-107)注解简化我们的开发</p><h3 id="_6-2-初步理解" tabindex="-1"><a class="header-anchor" href="#_6-2-初步理解"><span>6.2 初步理解：</span></a></h3><p>CacheManager（Redis） 规则制定者管理不同名字的 Cache Cache则是管自己的CRUD CacheManager(RedisCacheManager)-&gt;Cache(RedisCache)-&gt;Cache负责缓存的读写</p><p>Cache接口的实现包括RedisCache、EhCacheCache、ConcurrentMapCache等</p><p>每次调用需要缓存功能的方法时，spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</p><p>使用Spring缓存抽象时我们需要关注以下两点：</p><p>1、确定方法需要缓存以及他们的缓存策略 2、从缓存中读取之前缓存存储的数据</p>',9),en={id:"_6-3-使用步骤",tabindex:"-1"},tn={class:"header-anchor",href:"#_6-3-使用步骤"},pn={href:"https://www.cnblogs.com/songjilong/p/12901397.html",target:"_blank",rel:"noopener noreferrer"},on=t(`<blockquote><p><code>@Cacheable</code> 注解是用于将<strong>方法的返回值</strong>缓存起来</p><p>注意：<strong>使用spring-data-redis2.x版本时，@Cacheable缓存key值时默认会给vlue或cacheNames后加上双引号</strong>，具体看如下类 <code>org.springframework.data.redis.cache.CacheKeyPrefix</code></p><blockquote><p>SpringSession整合redis，Redis 存的 Session 是自动续期的吗</p><p>一开始听chatgpt说是的，经过验证发现不是那么回事！！！</p><p>使用Spring Cache的<code>CacheManager</code>接口提供的<code>putIfAbsent</code>方法来更新缓存的过期时间。</p></blockquote><blockquote><p>框架实现的，保存会存类的全限定类名 用于反序列化，在RedisAdvaced笔记中说了这样占地方</p></blockquote></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1</span>）导入 cache、<span class="token class-name">Redis</span> 的 <span class="token class-name">Start</span>
<span class="token number">2</span>）spring<span class="token operator">:</span>
      cache<span class="token operator">:</span>
        #指定缓存类型为redis
        type<span class="token operator">:</span> redis
        redis<span class="token operator">:</span>
      		time<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>live<span class="token operator">:</span> <span class="token number">100000</span> #这里我想热部署，搞一下午  jrebel<span class="token operator">+</span>devtools 都不行还得重启项目
     # 我想到的结论： <span class="token annotation punctuation">@Bean</span>是项目启动时候加载进来的！所以得重启项目才会跑<span class="token annotation punctuation">@Bean</span>加载配置！不像<span class="token class-name">Demo</span>中<span class="token class-name">Entity</span>直接绑yaml没有代码处理
     # 热部署部署代码和配置文件，而这里部署了yaml但是读这个yaml的代码<span class="token annotation punctuation">@Bean</span>没变动不会重新去读？
     # 总之：涉及启动流程的配置就不能热部署
<span class="token number">3</span>）主启动类<span class="token operator">/</span>配置类 <span class="token annotation punctuation">@EnableCaching</span>
            
            
使用：
<span class="token comment">//每一个需要缓存的数据我们都来指定要放到那个名字的缓存。【缓存的分区（按照业务类型分）】</span>
<span class="token comment">// sync表示该方法的缓存被读取时会加锁]【注意：是本地锁！！分布式锁重】 本地锁的确够了，一个单体锁一个查询，100个单体才100个查询</span>
                <span class="token comment">// value等同于cacheNames // key是SpEL表达式如果是字符串&quot;&#39;&#39;&quot;</span>
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">&quot;#root.method.name&quot;</span><span class="token punctuation">,</span>sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> 
    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;cache:shop&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#root.args[0]&quot;</span><span class="token punctuation">,</span> sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">//cache:shop::1</span>
            <span class="token comment">//代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。如果缓存中没有，会调用方法，最后将方法的结果放入缓存！</span>
                
                
<span class="token comment">//    @Caching(evict = {</span>
<span class="token comment">//            @CacheEvict(value = &quot;category&quot;,key = &quot;&#39;getLevel1Category&#39;&quot;),</span>
<span class="token comment">//            @CacheEvict(value = &quot;category&quot;,key = &quot;&#39;getCatalogJson&#39;&quot;)</span>
<span class="token comment">//    })//Group annotation for multiple cache annotations</span>
<span class="token comment">//调用该方法会删除缓存category下的所有cache，如果要删除某个具体，用key=&quot;&#39;&#39;&quot;</span>
<span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ln=n("a",{href:"%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90key%E5%80%BC"},null,-1),cn=n("h4",{id:"补充-题外-redis热部署不生效",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#补充-题外-redis热部署不生效"},[n("span",null,"补充：题外-redis热部署不生效")])],-1),rn={href:"https://blog.51cto.com/u_15072908/3946684",target:"_blank",rel:"noopener noreferrer"},un=n("strong",null,"Springboot重新加载Bean",-1),dn=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;execute&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Execute</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//Execute是我逻辑中需要的类</span>
        <span class="token class-name">Execute</span> execute <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>（逻辑过程省略）
        <span class="token keyword">return</span> execute<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getVersion&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reloadInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//获取上下文</span>
        <span class="token class-name">DefaultListableBeanFactory</span> defaultListableBeanFactory <span class="token operator">=</span>
                <span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//销毁指定实例 execute是上文注解过的实例名称 name=&quot;execute&quot;</span>
        defaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">destroySingleton</span><span class="token punctuation">(</span><span class="token string">&quot;execute&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//按照旧有的逻辑重新获取实例,Excute是我自己逻辑中的类</span>
        <span class="token class-name">Execute</span> execute <span class="token operator">=</span> <span class="token class-name">DemoConfiguration</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//重新注册同名实例，这样在其他地方注入的实例还是同一个名称，但是实例内容已经重新加载</span>
        defaultListableBeanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">&quot;execute&quot;</span><span class="token punctuation">,</span>execute<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token class-name">Springboot</span>重新加载<span class="token class-name">Bean</span>
https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span><span class="token number">51</span>cto<span class="token punctuation">.</span>com<span class="token operator">/</span>u_15072908<span class="token operator">/</span><span class="token number">3946684</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 Debug 了下看到进了应该是的吧，但是又有问题：那不是那些配置的东西基本都是@Bean操作了下启动时才进来的。换句话说也就是配置文件热部署也就只能对自己Demo中Entity直接绑yaml没有代码处理的有效了 也就没有第三方jar yaml配置能热部署的了 因为基本都依赖启动</p><h3 id="_6-4-配置原理" tabindex="-1"><a class="header-anchor" href="#_6-4-配置原理"><span><mark>6.4 配置原理：</mark></span></a></h3><p>CacheAutoConfiguration -&gt; RedisCacheConfiguration -&gt; 自动配置了RedisCacheManager-&gt;初始化所有的缓存-&gt;每个缓存决定使用什么配置 -&gt;如果redisCacheConfiguration有就用已有的，没有就用默认配置 -&gt;想改缓存的配置，只需要给容器中放一个RedisCacheConfiguration即可 -&gt;就会应用到当前RedisCacheManager管理的所有缓存分区中</p><p><strong>全是抄的源码createConfiguration方法</strong>，目的只是为了把value改为json序列化！源码key好像是用的string的 <code>org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration#createConfiguration</code></p><blockquote><p>Q：我这里其实对每一次的<code>&quot;config =&quot;</code>都充满疑惑：这样不是每次都指向一个新对象那么意义何在？？？</p><p>A：因为<code>RedisCacheConfiguration.class</code>中的属性都是<code>final</code>，所以每次<code>&quot;config =&quot;</code>等号右边可以理解为在<code>setxxx</code></p><blockquote><p>Q：我可以理解为这样的目的是使得final属性获得指定的值吗</p><p>不完全是这样的，如果某个属性是final类型，那么它只能在构造函数或者成员变量声明的时候初始化一次，并且不能被修改。因此，为了在构造RedisCacheConfiguration对象的时候能够对final属性进行初始化，我们需要使用这种“链式调用”的方式，每次调用方法时都会返回一个新的RedisCacheConfiguration对象，这样就能保证final属性每次都能被正确初始化。</p></blockquote><blockquote><p>Q：那上一次&quot;config =&quot;指向的对象不会被回收吗</p><p>Java中的对象是有垃圾回收机制的，当对象不再被任何引用所指向时，垃圾回收机制会将其回收。在该代码片段中，每次重新赋值config时，前一次指向的对象会失去引用，如果没有其他引用指向该对象，则该对象会被垃圾回收机制回收。因此，不需要担心对象的内存泄漏问题。</p></blockquote><blockquote><p>Q：被回收掉后RedisCacheConfiguration的final属性变量所得到的值还会保留吗</p><p>是的，一旦一个final属性被初始化，它的值就不能被改变，即使它所引用的对象被回收了，final属性依然会持有它最初引用的对象的值。因此，在这种情况下，即使上一次&quot;config =&quot;所指向的对象被回收了，最终的返回值仍然会包含之前设置的所有属性和值。</p></blockquote></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheConfig</span> <span class="token punctuation">{</span>
<span class="token comment">//    @Autowired</span>
<span class="token comment">//    CacheProperties cacheProperties;  //因为下面是 @Bean 直接放参数用就行！</span>
    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//原来@Bean注解想容器注入对象的时候，会自动将容器中已经有的对象传入到@Bean注解的方法参数中</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这个参数能拿值？  这个方法就是给容器放东西，方法传的所有参数所有参数都会从容器中进行确定  所以会自动去IOC中拿</span>
        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 序列化 value 时使用此序列化方法</span>
        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">//下面抄源码，不然配置文件写的过期时间之类的失效   具体看 RedisCacheConfiguration.java【注意是autoconfigure包下的！】</span>
        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>碰到的问题</p><ul><li><p>JDK8 中新的时间 API LocalDateTime，究其原因是 Jackson 在序列化 LocalDateTime 时输出的不是普通的字符串时间格式【解决】</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
//JDK8 中新的时间 API LocalDateTime，究其原因是 Jackson 在序列化 LocalDateTime 时输出的不是普通的字符串时间格式
//解决Could not read JSON: Cannot construct instance of \`java.time.LocalDateTime\`
//发现一开始我就错了，我return的是一个Bean才会引发这个。实际还是return list / map / String好一些
*/</span>
<span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
objectMapper<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 序列化 value 时使用此序列化方法</span>
config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>反序列化报错，总是用map强转相应的Bean</p><ul><li>我的解决 -&gt; return list / map / String</li></ul></li></ul></blockquote><h1 id="四、检索服务" tabindex="-1"><a class="header-anchor" href="#四、检索服务"><span>四、检索服务</span></a></h1><p>js 报错 search() 不是一个方法，前面加<code>javascript:</code>解决</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;a href=&quot;javascript:search();&quot; &gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),kn=n("code",null,'PRODUCT_INDEX = "gulimall_product";',-1),mn={href:"https://www.bilibili.com/video/BV1np4y1C7Yf/?p=133&spm_id_from=pageDriver&vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0&t=0h4m0s",target:"_blank",rel:"noopener noreferrer"},vn=t(`<p>找不到数据的，看看自己的EsConstant里面的索引名字写对没</p><h2 id="_1-商品搜索" tabindex="-1"><a class="header-anchor" href="#_1-商品搜索"><span>1）商品搜索</span></a></h2><p>重点：</p><p>1、准备检索请求 把写的DSL语句转成java执行</p><p>2、执行检索请求 调用es api执行上面处理好的检索请求得到响应数据</p><p>3、分析响应数据，封装成我们需要的格式</p><p>DSL转java书写，返回值封装成对象</p><p>Other：</p><p>面包屑导航：选一个就有个title标签后面有个×，把这些标签组合起来搜。也可删掉</p><p>这一个章节对急着找工作人士的性价比极低 商品搜索直接 copy 跳了，营养价值不大</p><h1 id="五、异步-线程池" tabindex="-1"><a class="header-anchor" href="#五、异步-线程池"><span>五、异步&amp;线程池</span></a></h1><blockquote><p>CompletableFuture 异步编排、 实现 Callable 接口 + FutureTask</p><p>这章知识以前是很陌生的，感觉很有用！</p></blockquote><p><a href="../juc/juc">juc</a></p><h1 id="六、认证服务" tabindex="-1"><a class="header-anchor" href="#六、认证服务"><span>六、认证服务</span></a></h1><blockquote><p>架构图-认证中心：处理<strong>登录</strong>注册，再放行请求到服务器</p><p>面试就喜欢问认证，授权，社交登录，单点登录。 来判断新手，逻辑思维能力</p></blockquote><p>SMS 具体看ali官网给的文档就行，优雅一点放配置文件 @ConfigurationProperties(prefix = &quot;spring.cloud.alicloud.sms&quot;)</p><p>具体写的Controller应该是提供给别的服务进行调用的！</p><h2 id="_1-注册流程" tabindex="-1"><a class="header-anchor" href="#_1-注册流程"><span>1.注册流程</span></a></h2><h3 id="_1-1-js-验证码倒计时" tabindex="-1"><a class="header-anchor" href="#_1-1-js-验证码倒计时"><span>1.1 JS 验证码倒计时</span></a></h3><p>点击获取验证码后，进入倒计时</p><ul><li>计时功能可以使用js的timing计时时间，setTimeout()可以设置一段时间后执行代码</li><li>递归回调可以解决倒计时刷新的功能</li><li>开始倒计时后设置按钮不可用<code>$(&quot;#sendCode&quot;).attr(&quot;class&quot;, &quot;disabled&quot;)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//当文档载入完成的时候执行的</span>
       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#sendCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//2、倒计时</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">&quot;disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">//正在倒计时中</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token comment">//1、给指定手机号发送验证码</span>
         $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/sms/sendCode?phone=&quot;</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#phoneNum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>code <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">timeoutChangeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
   <span class="token keyword">function</span> <span class="token function">timeoutChangeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#sendCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#sendCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;发送验证码&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          num <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#sendCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> str <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token string">&quot;s 后再次发送&quot;</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#sendCode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">&quot;timeoutChangeStyle()&quot;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   num <span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//凭前缀是因为redis会存大量不同的数据，方便区分，小傻瓜</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SMS_CODE_CACHE_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;sms:code:&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span><code>缺点：</code></span></a></h4><ul><li>1）暴露了短信接口API，会被别人恶意调用 【接口防刷 -&gt; Redis拼个_时间戳校验】 2）倒计时刷新就没用了 【同上用时间戳校验】 <ul><li><strong>Redis存 code_时间戳，校验时间戳是不是60s内</strong> （后端校验解决此问题）</li></ul></li></ul><h3 id="_1-2-jsr303" tabindex="-1"><a class="header-anchor" href="#_1-2-jsr303"><span>1.2 JSR303</span></a></h3><blockquote><p>值得学习：哪天完全脱离自己写，要有这思路</p></blockquote><p>获取表单信息、<code>封装VO（需要JSR303校验）</code>、重定向登录页面 【搞熟三个参数、Lambda】</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token doc-comment comment">/**
     *
     * TODO: 重定向携带数据：利用session原理，将数据放在session中。
     * TODO: 只要跳转到下一个页面取出这个数据以后，session里面的数据就会删掉
     * TODO：分布下session问题
     * RedirectAttributes：重定向也可以保留数据，不会丢失
     * 用户注册
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/register&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">UserRegisterVo</span> vos<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">,</span>
                           <span class="token class-name">RedirectAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">FieldError</span><span class="token operator">::</span><span class="token function">getField</span><span class="token punctuation">,</span> <span class="token class-name">FieldError</span><span class="token operator">::</span><span class="token function">getDefaultMessage</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attributes<span class="token punctuation">.</span><span class="token function">addFlashAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;errors&quot;</span><span class="token punctuation">,</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[2.2 Model / RedirectAttributes](#2.2 Model / RedirectAttributes) -&gt; <strong>TODO 但是他是利用的session原理，所以后期我们需要解决分布式的session问题</strong></p><h3 id="_1-3-md5" tabindex="-1"><a class="header-anchor" href="#_1-3-md5"><span>1.3 MD5</span></a></h3><p>密码存数据库加密分: 可逆 vs 不可逆（√）</p><p>不可逆更合理一些 MD5+salt</p>`,33),hn={href:"https://www.liaoxuefeng.com/wiki/1016959663602400/1017684507717184",target:"_blank",rel:"noopener noreferrer"},gn=t('<h4 id="md5使用场景-百度网盘秒传功能" tabindex="-1"><a class="header-anchor" href="#md5使用场景-百度网盘秒传功能"><span>MD5使用场景：百度网盘秒传功能</span></a></h4><blockquote><p>Answer：算出MD5值，看别人有没有上传过</p></blockquote><p>因为这些特性:</p><p>无论多大文件MD5都会搞成固定长度的串（压缩性）</p><p>两个不同的数据要有一样的MD5是非常困难的（强抗碰撞）</p><p>从原数据计算出MD5值很容易（容易计算）</p><p>对原数据进行任何改动,哪怕只修改1个字节,所得到的MD5值都有很大区别（抗修改性）</p><p>最大特点：<strong>不可逆</strong></p><p>使用：以前还傻傻的自己Copy工具类</p><p>org.apache.commonns 有很多加密算法 -&gt; DigestUtils.md5Hex()、Md5Crypt.md5Crypt()</p>',10),bn={href:"https://zh.m.wikipedia.org/wiki/%E5%BD%A9%E8%99%B9%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},fn=t(`<p>解决+salt 问题：我这个盐存哪里？难道再维护一个字段放盐？</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Apache commons包 DigestUtils类，【简单的MD5】</span>
<span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Apache commons包 Md5Crypt类，这个方法的颜值有正则限定，需要以$1$开头，【MD5+salt】</span>
<span class="token class-name">Md5Crypt</span><span class="token punctuation">.</span><span class="token function">md5Crypt</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;$1$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解决-org-springframework-security-bcryptpasswordencoder-class-把盐交给-spring-工具类" tabindex="-1"><a class="header-anchor" href="#解决-org-springframework-security-bcryptpasswordencoder-class-把盐交给-spring-工具类"><span>解决：org.springframework.security -&gt; <code>BCryptPasswordEncoder.class</code> 把盐交给 Spring 工具类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 密码加密器：多个用户过来存 123456 用这个Util存的值都不一样，但是都能 match 123456
 * 加了个算法生成盐
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">BCryptPasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//$2a$10$Vu.YcPJ5LOY.pIXhqxvgGuO/haGTVe5g/bpXCYYasSgS9sF2vxauC</span>
    <span class="token comment">//$2a$10$C/7Ur.ScOTYkYIOKChppD.TwGZfMyl3QbgWtbiYU1VIYWcNJ.dNH.</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//两个都是 true</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$2a$10$Vu.YcPJ5LOY.pIXhqxvgGuO/haGTVe5g/bpXCYYasSgS9sF2vxauC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$2a$10$C/7Ur.ScOTYkYIOKChppD.TwGZfMyl3QbgWtbiYU1VIYWcNJ.dNH.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-总结" tabindex="-1"><a class="header-anchor" href="#_1-4-总结"><span>1.4 总结</span></a></h3><ol><li>校验表单 JSR303 redis 存key-phone,value-code</li><li>截串取 Redis 验证码 <ol><li>通过则删 Redis，远程调用注册API（BCryptPasswordEncoder存密码）</li></ol></li></ol><h2 id="_2-社交登录" tabindex="-1"><a class="header-anchor" href="#_2-社交登录"><span>2.社交登录</span></a></h2><blockquote><p>社交登录指的是用QQ微信等方式登录</p></blockquote><ul><li>点击QQ按钮</li><li>引导跳转到QQ授权页</li><li>用户主动点击授权，跳回之前网页</li></ul><h3 id="_2-1-oauth2-0" tabindex="-1"><a class="header-anchor" href="#_2-1-oauth2-0"><span>2.1 OAuth2.0</span></a></h3><p>上面社交登录的流程就是OAuth协议</p><p>OAuth（开放授权）是一个开放标准，允许用户授权第三方移动应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容，OAuth2.0是OAuth协议的延续版本，但不向后兼容OAuth 1.0即完全废止了OAuth1.0。</p><figure><img src="https://images.zzq8.cn/img/202301041827971.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><blockquote><p>微信：https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_Login/Development_Guide.html</p><p>客户端是</p><p>资源拥有者：用户本人</p><p>授权服务器：QQ服务器，微信服务器等。返回访问令牌</p><p>资源服务器：拿着令牌访问资源服务器看令牌合法性</p></blockquote><figure><img src="https://images.zzq8.cn/img/202301041828301.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>1、使用Code换取AccessToken，Code只能用一次 2、同一个用户的accessToken一段时间是不会变化的，即使多次获取</p>`,16),_n={id:"_2-2-github",tabindex:"-1"},yn={class:"header-anchor",href:"#_2-2-github"},qn={href:"https://docs.github.com/zh/developers/apps/building-oauth-apps/authorizing-oauth-apps",target:"_blank",rel:"noopener noreferrer"},xn=t(`<h4 id="_1-大致流程" tabindex="-1"><a class="header-anchor" href="#_1-大致流程"><span>1）大致流程</span></a></h4><p>授权获取重定向到自己url 会拼个code 【获取code】</p><p>【code换accessToken】 -&gt; 这里要写后端代码</p><p>accessToken访问GitHub开放的API openAPI获取用户信息</p><h4 id="_2-httputils" tabindex="-1"><a class="header-anchor" href="#_2-httputils"><span>2）HttpUtils</span></a></h4><p>是搞短信验证码ali的文档给的java示例代码教引入的，这里可以拿来用</p><p><code>org.apache.http.util.EntityUtils#toString(org.apache.http.HttpEntity) //可以拿HttpEntity响应体的json内容</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//也可以转成指定对象  </span>
<span class="token comment">//SocialUser socialUser = JSON.parseObject(json, SocialUser.class);</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>严谨点可以</p><p>针对不同的社交网站可能需要建不同的表 这里视频直接在会员信息加了个字段放社交id，关联本系统会员信息</p><h2 id="_3-分布式session" tabindex="-1"><a class="header-anchor" href="#_3-分布式session"><span>3.分布式session</span></a></h2><blockquote><p>原理：session存储在服务端 tomcat 源码其实就是个 map，jsessionId存在客户端，每次通过<code>jsessionid</code>取出保存的数据</p><p>org.apache.tomcat.embed:tomcat-embed-core:9.0.24 (tomcat-embed-core-9.0.24.jar) javax.servlet.http.HttpSession#setAttribute</p></blockquote><h3 id="_3-1-session-两个问题" tabindex="-1"><a class="header-anchor" href="#_3-1-session-两个问题"><span>3.1 Session 两个问题：</span></a></h3><p>问题 1：<strong>Session 不能跨不同域名共享</strong> 场景：在 auth 模块存的session，只在它这个模块的登录页面有 session 而 product对应的主页模块没有 session jsessionid这个cookie默认是当前系统域名的（具体验证F12 Session有Domain限定，所以 auth.gulimall.com VS gulimall.com 不同域）</p><figure><img src="https://images.zzq8.cn/img/202301051713942.png" alt="image-20230105171317820" tabindex="0" loading="lazy"><figcaption>image-20230105171317820</figcaption></figure><p>问题 2：Session 是放服务器中，即使是单体应用（同域名）。但是它集群的话不同服务器也不能共享 Session</p><h3 id="_3-2-分布式session解决方案" tabindex="-1"><a class="header-anchor" href="#_3-2-分布式session解决方案"><span>3.2 分布式session解决方案</span></a></h3><p><code>不用的两种方案：</code></p><h5 id="_1-session复制" tabindex="-1"><a class="header-anchor" href="#_1-session复制"><span>1) session复制</span></a></h5><p>用户登录后得到session后，服务把session也复制到别的机器上，显然这种处理很不好</p><figure><img src="https://images.zzq8.cn/img/202301051653057.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>2）<img src="https://images.zzq8.cn/img/202301051702278.png" alt="" loading="lazy"></p><p><code>可用的两种方案：</code></p><h5 id="_3-hash一致性" tabindex="-1"><a class="header-anchor" href="#_3-hash一致性"><span>3) hash一致性</span></a></h5><blockquote><p>记得看了个文章还是视频：问 hash 有什么应用场景，这里就是。负载均衡</p></blockquote><p>根据用户，到指定的机器上登录。但是远程调用还是不好解决</p><figure><img src="https://images.zzq8.cn/img/202301051653500.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="_4-redis统一存储" tabindex="-1"><a class="header-anchor" href="#_4-redis统一存储"><span>4) redis统一存储</span></a></h5><p>最终的选择方案，把session放到redis中</p><figure><img src="https://images.zzq8.cn/img/202301051701799.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-3-springsession整合redis" tabindex="-1"><a class="header-anchor" href="#_3-3-springsession整合redis"><span>3.3 SpringSession整合redis</span></a></h3><blockquote><p>针对上面的 4） Spring 早就想到了解决方案：SpringSession 和 SpringCache 样的去官网摸索</p></blockquote><h4 id="_3-3-1-简单配置" tabindex="-1"><a class="header-anchor" href="#_3-3-1-简单配置"><span>3.3.1 简单配置</span></a></h4>`,33),Cn={href:"https://docs.spring.io/spring-session/reference/samples.html",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://docs.spring.io/spring-session/reference/http-session.html#httpsession",target:"_blank",rel:"noopener noreferrer"},En=t(`<p>不要忘了第二个网址告诉的需要配置类加：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//创建了一个springSessionRepositoryFilter ，负责将原生HttpSession 替换为Spring Session的实现</span>
<span class="token annotation punctuation">@EnableRedisHttpSession</span><span class="token comment">//整合redis作为session存储</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：session 的操作API不变 <code>session.setAttribute(LOGIN_USER,data);</code></p><p>做完上述简单的配置操作数据是放redis了，但仍有问题：</p><p><strong>//TODO 1、默认发的令牌。当前域（解决子域session共享问题 扩大作用域：二级域名扩大到一级域名（auth.gulimall.com 扩大成 gulimall.com））</strong></p><p><strong>//TODO 2、使用JSON的序列化方式来序列化对象到Redis中</strong></p><h4 id="_3-3-2-bean-配置" tabindex="-1"><a class="header-anchor" href="#_3-3-2-bean-配置"><span>3.3.2 Bean 配置</span></a></h4><p>解决上述两个问题：看官网！ctrl+f 搜 keyword: customize 两个@Bean解决 GulimallSessionConfig.java</p><p>序列化时Bean需要返回的实现类：FastJsonRedisSerializer.class 因为要通用用泛型的：GenericFastJsonRedisSerializer.class</p><h3 id="_3-4-我遇到的坑" tabindex="-1"><a class="header-anchor" href="#_3-4-我遇到的坑"><span>3.4 我遇到的坑</span></a></h3><h4 id="_1-redis、session的yaml配置每个model都要" tabindex="-1"><a class="header-anchor" href="#_1-redis、session的yaml配置每个model都要"><span>1）redis、session的yaml配置每个model都要</span></a></h4><p>解决：放Nacos，配置 <code>shared-dataids: common.yaml</code></p><p>但是中途总是不生效，踩坑很久发现我Nacos配<strong>Data ID</strong>时候没有加后缀</p><h4 id="_2-gulimallsessionconfig-这个配置类每个model都要" tabindex="-1"><a class="header-anchor" href="#_2-gulimallsessionconfig-这个配置类每个model都要"><span>2）GulimallSessionConfig 这个配置类每个model都要</span></a></h4><p>解决：放common模块 <code>@ComponentScan({&quot;com.zzq&quot;})</code> or <code>@Import</code></p>`,15),wn={id:"_3-5-springsession核心原理-装饰者模式",tabindex:"-1"},Rn={class:"header-anchor",href:"#_3-5-springsession核心原理-装饰者模式"},Tn={href:"https://blog.csdn.net/m0_46539364/article/details/110533408",target:"_blank",rel:"noopener noreferrer"},jn=t(`<blockquote><p>这里我暂时掠过</p></blockquote><p>核心原理 1）、@EnableRedisHttpSession导入RedisHttpSessionConfiguration配置 1、给容器中添加了一个组件 RedisOperationsSessionRepository：Redis操作session，session的增删改查封装类</p><p><mark>Redis 存的 Session 是自动续期的</mark> TODO：待验证</p><blockquote><p>是的，Spring Session 整合 Redis 后，Redis 存储的 Session 是自动续期的。</p><p>在 Spring Session 中，当一个 Session 被创建时，会生成一个唯一的 Session ID，并且这个 Session ID 会被用来作为 Redis 中存储 Session 的 key。同时，Spring Session 会将这个 Session ID 作为 cookie 发送给客户端。</p><p>当客户端发送请求时，Spring Session 会根据请求中携带的 Session ID 从 Redis 中获取对应的 Session 数据，并检查 Session 是否过期。如果 Session 没有过期，Spring Session 会自动将 Session 的过期时间延长，确保 Session 不会在使用期间过期。</p><p>因此，Spring Session 整合 Redis 后，Redis 存储的 Session 是自动续期的。</p></blockquote><p>GPT：</p><p>会话过期时间重置：每当用户进行会话操作时（例如访问页面或发送请求），Spring Session 会自动更新 Redis 中存储的会话的过期时间。这样，只要用户保持活动状态，会话就会自动续期，不会过期。</p><h2 id="_4-单点登录-sso" tabindex="-1"><a class="header-anchor" href="#_4-单点登录-sso"><span>4.单点登录-SSO</span></a></h2><blockquote><p>Single Sign-On，简称 SSO</p><p>一级域名都不一样 taobao.com tmall.com 所以不能用 SpringSession 解决不了不同域名的问题了。无法扩大域名</p></blockquote><p>Gitee 有个开源Demo：<code>xxl-sso</code></p><p>最终解决方案：都去中央认证器</p><p>记住一个核心思想：建议一个公共的登陆点server，他登录了代表这个集团的产品就登录过了</p><p>开源项目，一个认证中心，其它客户端：1）配好配置文件、2）cmd maven打包</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mvn clean package -Dmaven.skip.test=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>流程： server：登录服务器、8080 、ssoserver.com web-sample1：项目1 、8081 、client1.com web-sample2：项目1 、8082 、client2.com 3个系统即使域名不一样，想办法给三个系统同步同一个用户的票据；</p><p><strong>中央认证服务器：</strong> 其他系统都去【中央认证服务器】登录，登录成功后跳转回原服务 一个系统登录，都登录；一个系统登出，都登出 全系统统一一个 sso-sessionId</p><hr><p>开源项目试过了能行，自己的项目怎么整合：</p><p>雷神写了Demo，这里暂时掠过</p><p>问了 chatGPT：</p><p>要用 Java 实现单点登录，你需要做以下几件事：</p><ol><li>建立认证服务器：你可以使用 Java 开发认证服务器，负责存储用户的认证信息并负责验证用户的身份。</li><li>在应用程序或网站中集成认证接口：你需要在应用程序或网站中集成认证接口，以便与认证服务器进行通信。</li><li>处理用户输入的认证信息：你需要设计一个用户登录界面，让用户输入认证信息（例如用户名和密码）。</li><li>发送认证请求：当用户点击登录按钮时，你的应用程序或网站需要向认证服务器发送认证请求，以验证用户的身份。</li><li>处理认证结果：当你的应用程序或网站收到认证服务器的认证结果时，你需要根据认证结果来决定是否允许用户登录。如果认证成功，你可以允许用户登录；如果认证失败，你可以提示用户输入的认证信息有误，并让用户重新输入。</li></ol><p><code>Spring Security</code> 是一款流行的 Java 安全框架，提供了认证和授权功能，包括单点登录功能。使用 Spring Security 实现单点登录，你需要在应用程序中配置 Spring Security，然后在认证服务器上配置相应的认证提供者。具体实现细节可以参考 Spring Security 的文档和教程。另外，你还可以参考其他框架或库，例如 <code>Apache Shiro</code> 或 PicketLink，它们也提供了单点登录功能。</p><p>认证服务器通常使用数据库来存储用户的认证信息，但也可以使用其他的存储方式，例如文件系统或内存数据库。</p><p>此外，在单点登录的认证过程中，应用程序或网站可能会为用户生成一个认证令牌，并将这个令牌存储在用户的浏览器上。这样，当用户访问其他应用程序或网站时，就可以通过这个认证令牌来验证用户的身份，而无需再次输入认证信息。这个认证令牌通常是一个字符串，包含了用户的认证信息和其他相关信息。</p><p>总之，单点登录的认证信息可以存储在认证服务器上或者存储在用户的浏览器上（通过认证令牌）</p><h1 id="七、购物车" tabindex="-1"><a class="header-anchor" href="#七、购物车"><span><a href="09%E3%80%81%E5%95%86%E5%9F%8E%E4%B8%9A%E5%8A%A1.pdf">七、购物车</a></span></a></h1><h2 id="_1-需求描述" tabindex="-1"><a class="header-anchor" href="#_1-需求描述"><span>1.需求描述</span></a></h2><blockquote><p>在线购物车 vs 离线购物车</p></blockquote><p>特点：读多写少，放入数据库并不合适</p><p><strong>登录状态：登录购物车:</strong></p><ul><li>放入数据库</li><li>mongodb</li><li>放入redis（采用） <ul><li>登录以后，将离线购物车里合并后清空离线购物车</li></ul></li></ul><p><strong>未登录状态：离线购物车</strong>：JD 貌似删了这个功能了</p><ul><li>放入localstorage浏览器的技术（浏览器的技术，缺点：大数据时代后台没法分析用户推荐）</li><li>cookie</li><li>WebSQL</li><li>放入redis（采用） <ul><li>浏览器重启后还在</li></ul></li></ul><h2 id="_2-redis-存储设计-vo" tabindex="-1"><a class="header-anchor" href="#_2-redis-存储设计-vo"><span>2.Redis 存储设计 &amp; VO：</span></a></h2><ul><li>每个人都有购物车</li><li>购物车排列有顺序，例如选择了第三个商品进行增删改查</li></ul><p>redis有5种不同数据结构，这里选择哪一种比较合适呢？<code>Map&lt;String,List&lt;String&gt;&gt;</code></p><ul><li><p>首先不同用户应该有独立的购物车，因此购物车应该以用户的作为key 来存储，Value 是用户的所有购物车信息。这样看来基本的<code>k-v</code>结构就可以了。</p></li><li><p>但是，我们对购物车中的商品进行增、删、改操作，基本都需要根据商品id 进行判断，为了方便后期处理，我们的购物车也应该是<code>k-v</code>结构，key 是商品 id，value 才是这个商品的购物车信息。</p></li></ul><p>综上所述，我们的购物车结构是一个双层 <code>Map：Map&lt;String,Map&lt;String,String&gt;&gt;</code></p><ul><li>第一层 Map，Key 是用户 id</li></ul><ul><li>第二层 Map，Key 是购物车中商品 id，值是购物项数据</li></ul><h2 id="_3-threadlocal用户身份鉴别" tabindex="-1"><a class="header-anchor" href="#_3-threadlocal用户身份鉴别"><span>3.<mark>ThreadLocal用户身份鉴别</mark></span></a></h2><blockquote><p>通常情况下,我们创建的变量是可以被任何一个线程访问并修改的.如果想实现每一个线程都有自己的专属本地变量该如何解决呢?</p></blockquote><p>常用应用场景：保存用户登录信息<br> 需要注意的是，ThreadLocal 存储的数据仅对当前线程可见，因此适合存储一些只有在当前线程中使用的数据，例如用户信息等。而 Session 存储的数据对于整个 Web 应用程序都是可见的，因此适合存储一些需要在多个页面或请求之间共享的数据，例如用户登录状态、购物车信息等。</p><blockquote><p>Q：Threadlocal存用户信息比用session存用户信息有什么优势</p><p>ThreadLocal 和 Session 都是在多线程环境下存储用户信息的方式，但是它们的作用和使用场景有所不同。下面是 ThreadLocal 存储用户信息比 Session 存储用户信息的一些优势：</p><ol><li>线程安全性：ThreadLocal 是线程局部变量，每个线程拥有自己的一个变量副本，不同线程之间不会相互影响，可以有效地避免多线程环境下的竞态条件和线程安全问题。</li><li>跨请求访问：ThreadLocal 可以在同一线程内的多个请求之间共享数据，而 Session 则只能在同一会话（同一用户在同一浏览器中访问同一网站期间的所有请求）之间共享数据。</li><li>性能优势：由于 ThreadLocal 是线程内部的变量，存取速度相对于 Session 更快，而且不需要将数据序列化和反序列化，也不需要在不同的请求之间进行传输，因此对系统性能的影响更小。(XD：Session一般会借助 Redis 存取，所以要 serialize)</li></ol><p>需要注意的是，ThreadLocal 适用于单个线程内部共享数据，而不适合在不同线程之间传递数据。此外，使用 ThreadLocal 时需要注意及时清除数据，否则可能会出现内存泄漏等问题。</p><p>ThreadLocal 是一种线程本地存储的机制，它可以为每个线程维护一个独立的变量副本。因此，当多个线程访问同一个 ThreadLocal 变量时，它们看到的值是不同的。<strong>在一个 Web 应用程序中，每个请求都由一个独立的线程处理，因此可以将用户信息存储在 ThreadLocal 中，以便在整个请求处理过程中都可以访问这些信息，而不必将这些信息存储在 Session 中。</strong></p></blockquote><blockquote><p>实现：参考京东，在点击购物车时，会为<strong>临时用户</strong>生成一个<code>name</code>为<code>user-key</code>的<code>cookie</code>临时标识，过期时间为一个月，如果手动清除<code>user-key</code>，那么临时购物车的购物项也被清除，所以<code>user-key</code>是用来标识和存储临时购物车数据的</p></blockquote><p>解决：搞个拦截器（<strong>TODO：不知道能用AOP实现不，弹幕说执行太晚了</strong> <strong>面试官：拦截器跟过滤器有什么区别</strong>） 前后端分离的话，是用token，其实你登没登录，只要看前端能不能获取到token就行了</p><p>场景：com.zzq.gulimall.cart.intercept.CartIntercept <strong>XD: SpringBoot的拦截器HandlerInterceptor + Threadlocal</strong></p><pre><code>												判断用户登录状态，把购物车临时用户 / 登录用户放到 Threadlocal 里
</code></pre><hr>`,49),An={href:"https://blog.csdn.net/q957967519/article/details/91544888",target:"_blank",rel:"noopener noreferrer"},zn=t(`<p>过滤器：是在请求和响应被发送到服务器之间执行的，用于检查请求和响应，可以修改请求和响应内容。<code>（1.场景学JSP的时候好像把请求的编码统一改成UTF-8。。。。。2.学SpringSecurity的时候用来校验 Token 并把用户信息放到指定class里面）</code></p><p>拦截器：是在请求被发送到服务器之前和服务器处理请求之后执行的，可以拦截请求，并在请求到达服务器之前进行预处理。<code>（使用场景看下面笔记 1.fegin源码 cookie丢失。。。2.Threadlocal 判断用户是否登陆）</code></p><p><strong>简而言之，过滤器主要用于请求和响应的修改，而拦截器主要用于请求的拦截和预处理。</strong></p><p>从灵活性上说拦截器功能更强大些，Filter能做的事情，他都能做，而且可以在请求前，请求后执行，比较灵活。Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），太细的话，还是建议用interceptor。不过还是根据不同情况选择合适的。但是Aspect能够做到方法级更细的操作。</p><p>ChatGPT：通俗来说过滤器和拦截器的区别：</p><p>过滤器和拦截器是用于对Web请求进行预处理和后处理的不同技术。</p><p>区别：</p><ol><li>执行位置：过滤器在请求被路由之前执行，拦截器在请求被路由后执行。</li><li>执行顺序：过滤器可以定义执行顺序(学SpringSecurity配置 <code>http.addFilterBefore</code>)，拦截器按照配置顺序执行。</li><li>功能：过滤器可以对请求数据进行预处理，拦截器可以对请求结果进行后处理。</li></ol><p>231115 回顾</p><blockquote><blockquote><p>什么时候用过滤器什么时候用拦截器</p></blockquote><p>在软件开发中，使用过滤器(Filter)或拦截器(Interceptor)取决于具体的需求和应用场景。虽然它们都可以用于处理请求和响应，但它们在功能和使用方式上有一些区别。</p><p>过滤器适合于以下情况：</p><ol><li>请求和响应的处理流程较为简单，不需要涉及复杂的业务逻辑。</li><li>需要对请求进行预处理或对响应进行后处理，例如数据转换、验证、日志记录等。</li><li>需要在请求到达业务处理之前或响应返回给客户端之前进行干预。</li><li>需要在整个应用程序中统一应用某种处理逻辑。</li></ol><p>拦截器适合于以下情况：</p><ol><li>需要对请求和响应进行更细粒度的拦截和处理。</li><li>需要在业务处理的前后进行额外的操作，例如事务管理、异常处理、权限控制等。</li><li>需要在不同层级的组件之间进行交互和协调，例如在控制器(Controller)和服务(Service)之间进行拦截和处理。</li><li>需要在多个请求之间共享或传递特定的上下文信息。</li></ol><p>总的来说，过滤器适用于较为简单和统一的处理逻辑，而拦截器适用于更灵活和复杂的处理需求。根据具体的应用架构和需求，可以综合考虑使用过滤器和拦截器来满足功能和性能的要求。</p></blockquote><p>不清楚的点：</p><p><mark>拦截器可以处理响应。拦截器通常用于在请求处理的前后进行额外的操作，包括对请求的预处理和对响应的后处理。在后处理阶段，拦截器可以对生成的响应进行修改、添加额外的信息或执行其他相关操作。</mark></p><p>以下是一些拦截器处理响应的典型使用场景：</p><ol><li>响应数据格式化：拦截器可以对返回的数据进行格式化，例如将数据转换为特定的格式（如JSON、XML）或进行数据加工。</li><li>响应结果的处理：拦截器可以检查响应结果，根据特定条件对结果进行处理，例如对结果进行筛选、排序或分页。</li><li>响应的日志记录：拦截器可以记录响应的详细信息，如响应状态码、响应时间、返回的数据等，以用于后续的分析和监控。</li><li>响应的异常处理：拦截器可以捕获响应过程中发生的异常，并进行统一的异常处理、错误日志记录或错误页面的返回。</li></ol><hr><p><mark>拦截器使用场景</mark>：1）这里判断用户状态信息，是否登录再决定要不要放行。</p><p>​ 2）Feign远程调用丢失请求头：订单模块的 Feign 源码会自动创 Request 导致丢失 Cookie。而底层自创的时候用到拦截器增强（即DIY 个拦截器把原Requset Cookie放新Request） 解决重点：Spring类 <code>RequestContextHolder</code></p><p>拦截器拦完后，想要快速得到用户信息（to对象）：id,user-key <b style="color:red;">即截器定义好了，将来怎么把拦截器中获取的用户信息传递给后续的每个业务逻辑：</b></p><blockquote><p>后续的每个业务逻辑也可以从 Redis 中直接获取用户信息，但是这样会增加 Redis 的访问次数，对系统性能造成影响。为了提高系统的响应速度，建议将用户信息存储到 ThreadLocal 中，并在业务逻辑中直接从 ThreadLocal 中获取用户信息，以避免频繁地访问 Redis。</p></blockquote><ol><li>public类型的公共变量。线程不安全</li><li>request对象。不够优雅</li><li>ThreadLocal线程变量。推荐</li></ol><img src="https://images.zzq8.cn/img/202301071601779.png" alt="image-20230107160059758" style="zoom:50%;"><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
threadLocals 是 Thread 类的属性之一
1）它是一个 ThreadLocal.ThreadLocalMap 类型的对象，用于存储线程的局部变量。每个线程都有自己的 threadLocals 对象，用于管理该线程的局部变量。
2）threadLocals 字段使用了线程封闭设计模式，确保每个线程都拥有自己独立的局部变量存储空间，避免了线程之间的数据共享和冲突。
3）threadLocals 字段的类型为 ThreadLocal.ThreadLocalMap。它是 ThreadLocal 类的内部类，用于存储 ThreadLocal 实例和对应的局部变量值的映射关系。

通过 threadLocals 字段，每个线程可以维护自己的局部变量，并且线程之间的局部变量不会相互干扰。
需要注意的是，threadLocals 字段是 Thread 类的实例级别字段，每个线程对象都有自己的 threadLocals 对象。这意味着每个线程都可以独立地管理和访问其自己的局部变量。
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>

    <span class="token comment">/* ThreadLocal values pertaining to this thread. This map is maintained
     * by the ThreadLocal class. */</span>
    <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：java.lang.ThreadLocal 是一个类，用泛型来放我们的TO对象 <code>public static ThreadLocal&lt;MemberResponseVo&gt; loginUser = new ThreadLocal&lt;&gt;();</code></p><p>​ tomcat多线程接收请求，这个点不知道的话，整个过程内心会充满疑问的 同一个线程共享。其他用户是其他线程</p><p>​</p>`,25),Bn={id:"_3-1-上面补充",tabindex:"-1"},Ln={class:"header-anchor",href:"#_3-1-上面补充"},On={href:"https://mp.weixin.qq.com/s/nPCQadj8-7WBu7GVJRv4JQ",target:"_blank",rel:"noopener noreferrer"},Pn=t(`<blockquote><p>具体结合 title link 一起看，还有下面自己的文中 link</p><p>订单确认页需要feign拿用户地址、购物车数据都需用户数据这个ThreadLocal</p></blockquote><p>为什么用它，它有什么优势，简单来说有两点</p><ol><li><strong>无锁化提升并发性能</strong></li><li><strong>简化变量的传递逻辑</strong></li></ol><p>文中多个不同线程拿用户信息是通过 <code>InheritableThreadLocal</code></p><p>Gulimall的时候雷神好像是用的拦截器，每次请求进来从spring session(redis)拿封装给ThreadLocal。现在不确定的点是拦截/**是不是也可把远程Feign的拦下来？(如可以那这也算种做法吧)</p><blockquote><p><strong>Q：preHandle可以拦截fegin的请求吗</strong></p><p>A：是的，preHandle方法可以拦截Feign的请求。Feign是基于HTTP客户端的声明式Web服务客户端，通过拦截器可以对Feign发送的请求进行拦截。preHandle方法是在请求发送之前被调用，因此可以在该方法中对请求数据进行处理或修改。</p><p>问题场景：ware远程调用订单（有拦截器），请求头没有登录消息被拦截，应该放行</p><p>解决：订单的拦截器使用new AntPathMatcher().match(“放行路径”，目标路径)</p></blockquote><hr><p><a href="#2%EF%BC%89Feign%E5%BC%82%E6%AD%A5%E6%83%85%E5%86%B5%E4%B8%A2%E5%A4%B1%E4%B8%8A%E4%B8%8B%E6%96%87%E9%97%AE%E9%A2%98">2）Feign异步情况丢失上下文问题</a></p><p>突然发现他是 RequestContextHolder 来解决异步编排会丢失 ThreadLocal</p><p>发现上面说的并不是这么回事，拦截器只是针对每一个请求</p><blockquote><p>Q: RequestContextHolder解决CompletableFuture丢失ThreadLocal</p><p>RequestContextHolder是Spring框架提供的一个用于保存请求上下文的工具类，可以用来解决CompletableFuture丢失ThreadLocal的问题。</p><p>通过将请求上下文存储到RequestContextHolder中，在CompletableFuture执行时可以在需要的地方访问请求上下文。</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncMethodWithContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RequestContext</span> context <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// access to context here</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Result of async method&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，通过<code>RequestContextHolder.currentRequestAttributes()</code></p></blockquote><blockquote><p>Q: InheritableThreadLocal解决CompletableFuture丢失ThreadLocal</p><p>InheritableThreadLocal是Java提供的一个用于在父线程和子线程之间传递ThreadLocal变量值的工具类，可以用来解决CompletableFuture丢失ThreadLocal的问题。</p><p>通过使用InheritableThreadLocal，在父线程中设置的ThreadLocal变量值会被子线程继承。</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>javaCopy codepublic <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">childValue</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> parentValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        context<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncMethodWithContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Context</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// access to context here</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Result of async method&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，通过<code>Context.context.get()</code>获取父线程的Context，并在子线程中使用<code>Context.context.set(context)</code>将该Context设置为子线程的Context，从而实现在子线程中访问请求上下文。</p></blockquote><blockquote><p>!!! ThreadLocal 记得回收</p><p>ThreadLocal内存泄漏问题与线程的创建方式没有直接的关联。 需要注意的是，使用线程池的情况下，由于线程是被重用的，可能会导致ThreadLocal中的数据在多个任务之间共享。这可能会引发意料之外的问题</p></blockquote><p>ThreadLocalMap中使用的 key 为ThreadLocal 的弱引用,而 value 是强引用</p><p>具体来说，如果在线程执行过程中，使用ThreadLocal存储了一些对象或数据，并且没有在线程执行结束后手动清理ThreadLocal变量，那么这些对象或数据将会一直被ThreadLocal持有，无法被垃圾回收，从而导致内存泄漏。</p><p>ThreadLocal对象之后,手动调用ThreadLocal的remove方法,手动清除Entry对象</p><p><mark>在拦截器中设置ThreadLocal的值，在请求处理完成后进行清理操作</mark></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&gt;</span></span> userInfoThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在拦截器中设置ThreadLocal的值</span>
        <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token function">retrieveUserInfoFromRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userInfoThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在请求处理完成后进行清理操作</span>
        userInfoThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="八、消息队列" tabindex="-1"><a class="header-anchor" href="#八、消息队列"><span>八、消息队列</span></a></h1><p><a href="../mq/rabbitmq">自己的MQ笔记</a></p><h1 id="九、订单服务" tabindex="-1"><a class="header-anchor" href="#九、订单服务"><span>九、订单服务</span></a></h1><h2 id="_1-模块介绍" tabindex="-1"><a class="header-anchor" href="#_1-模块介绍"><span>1.模块介绍</span></a></h2><blockquote><p>比较复杂且重要：需要多模块查询检索 复杂的流程调用，具体看 PDF 结算的Service是我看过的最繁琐的</p></blockquote><p>电商系统涉及到3流，分别是信息流，资金流，物流，而订单系统作为中枢将三者有机的集合起来。</p><ol><li>信息流：商品信息、优惠信息</li><li>资金流：退款、付款</li><li>物流：发送、退货</li></ol><p>订单模块是电商系统的枢纽，在订单这个环节上需求获取多个模块的数据和信息，同时对这些信息进行加工处理后流向下个环节，这一系列就构成了订单的信息流通。</p><img src="https://images.zzq8.cn/img/202301141808024.png" alt="image-20230114180830391" style="zoom:67%;"><h2 id="_2-feign-两个问题" tabindex="-1"><a class="header-anchor" href="#_2-feign-两个问题"><span>2.Feign 两个问题</span></a></h2><blockquote><p>看两张图特别清楚，涉及到 Feign 的底层逻辑要看个大概</p></blockquote><h3 id="_1-feign远程调用丢失请求头问题" tabindex="-1"><a class="header-anchor" href="#_1-feign远程调用丢失请求头问题"><span>1）Feign远程调用丢失请求头问题</span></a></h3><blockquote><p>场景：Feign 源码会自创 Request 导致丢失老Request Cookie，而自创的时候用到拦截器增强 解决：即可DIY个拦截器把原Requset Cookie放新Request 解决重点：Spring类 <code>RequestContextHolder</code></p></blockquote><img src="https://images.zzq8.cn/img/202301161056022.png" alt="image-20230116105558996" style="zoom:67%;"><h3 id="_2-feign异步情况丢失上下文问题" tabindex="-1"><a class="header-anchor" href="#_2-feign异步情况丢失上下文问题"><span><a href="#3.1.%E4%B8%8A%E9%9D%A2%E8%A1%A5%E5%85%85%EF%BC%9A">2）Feign异步情况丢失上下文问题</a></span></a></h3><blockquote><p>场景：<code>RequestContextHolder</code> 也是通过 ThreadLocal 拿数据，就会每个线程都不一样（异步编排会丢失 ThreadLocal）</p><p>解决：主线程 <code>RequestContextHolder.getRequestAttributes(); </code> 其它两个线程 <code>RequestContextHolder.setRequestAttributes(requestAttributes);</code></p><p>知道 Thread.class 属性有 ThreadLocalMap 这样就好理解了 具体看title link</p></blockquote><figure><img src="https://images.zzq8.cn/img/202301161056979.png" alt="image-20230116105631702" tabindex="0" loading="lazy"><figcaption>image-20230116105631702</figcaption></figure><p>PS：Feign 源码暂时掠过了，其实想看一下自己new request、set过滤器增强的地方</p><h2 id="_3-接口幂等性" tabindex="-1"><a class="header-anchor" href="#_3-接口幂等性"><span><a href="02%E3%80%81%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7.pdf"><mark>3.接口幂等性</mark></a></span></a></h2><blockquote><p>面试这里是高频考点，认真听！！！！！！！</p><p><mark>说白了幂等性设计就是：通过 redis 或者数据库唯一键</mark></p></blockquote><h3 id="_1-前言-2" tabindex="-1"><a class="header-anchor" href="#_1-前言-2"><span>1）前言</span></a></h3><h4 id="哪些情况需要防止" tabindex="-1"><a class="header-anchor" href="#哪些情况需要防止"><span>哪些情况需要防止：</span></a></h4><ul><li>用户多次点击按钮</li><li>用户页面回退再次提交</li><li>微服务互相调用，由于网络问题，导致请求失败。feign触发重试机制</li><li>其他业务情况 例如update tab1 set col1=col1+1 where col2 = 2，每次执行结果不一样</li></ul><h4 id="天然幂等性" tabindex="-1"><a class="header-anchor" href="#天然幂等性"><span>天然幂等性：</span></a></h4><ul><li>查询接口</li><li>更新接口update tab1 set col1=1 where col2=2</li><li>delete from user where userId = 1</li><li>insert user(userId, name) values(1, &#39;wan&#39;)，其中userId为主键</li></ul><h3 id="_2-解决方案" tabindex="-1"><a class="header-anchor" href="#_2-解决方案"><span>2）解决方案</span></a></h3><h4 id="_2-1-token令牌机制" tabindex="-1"><a class="header-anchor" href="#_2-1-token令牌机制"><span>2.1 token令牌机制</span></a></h4><p>服务器存储了一个令牌，页面请求时要带上令牌，服务器接收请求后会匹配令牌，匹配成功则删除令牌（再次提交则匹配失败，服务器已删除令牌。但是F5刷新的话就不一样了，会有新的token产生）</p><p>注意： 1.删除令牌要在执行业务代码之前 2.获取redis令牌、令牌匹配、令牌删除要保证原子性（lua脚本）</p><p>场景：好像是 注册时候验证码页面</p><p>服务器Redis 放一个，页面放一个这里是放一个hidden的input里面 TODO：这不是可以刷新重复提交吗 : 理解刷新会覆盖，然后再一和redis如果还在的一比对就发现不对！</p><h4 id="_2-2-各种锁机制" tabindex="-1"><a class="header-anchor" href="#_2-2-各种锁机制"><span>2.2 各种锁机制</span></a></h4><h5 id="_2-2-1-数据库悲观锁" tabindex="-1"><a class="header-anchor" href="#_2-2-1-数据库悲观锁"><span>2.2.1.数据库悲观锁</span></a></h5><blockquote><p><strong>随着互联网三高架构（高并发、高性能、高可用）的提出，悲观锁已经越来越少的被使用到生产环境中了，尤其是并发量比较大的业务场景。</strong></p></blockquote><p>使用 <code>select * from xxx where id = 1 for update;</code> 查询的时候锁定该条数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>//0.开始事务
begin; 
//1.查询出商品库存信息
select quantity from items where id=1 for update;
//2.修改商品库存为2
update items set quantity=2 where id = 1;
//3.提交事务
commit;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上，在对id = 1的记录修改前，先通过for update的方式进行加锁，然后再进行修改。这就是比较典型的悲观锁策略。</p><p>注意： 悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用。 id字段一定是主键或者唯一索引，不然可能造成锁表的结果，处理起来会非常麻烦。</p><h5 id="_2-2-2-数据库乐观锁【带上版本号】" tabindex="-1"><a class="header-anchor" href="#_2-2-2-数据库乐观锁【带上版本号】"><span>2.2.2.数据库乐观锁【带上版本号】</span></a></h5><p>这种方法适合在更新的场景中 <code>update t_goods set count = count-1,version =version + 1 where good_id=2 and version = 1</code> 根据version版本，也就是在操作库存前先获取当前商品的version版本号，然后操作的时候带上此version号。 第一次操作库存时，得到version为1，调用库存服务version变成了2﹔但返回给订单服务出现了问题，订单服务又一次发起调用库存服务，当订单服务传的version还是1，再执行上面的sal语句时，就不会执行﹔因为version已经变为2了，where条件就不成立。这样就保证了不管调用几次，只会真正的处理一次。 乐观锁主要使用于处理读多写少的问题</p><h5 id="_2-2-3-分布式锁-todo-不太理解-xd-20240320再学redisson理解了" tabindex="-1"><a class="header-anchor" href="#_2-2-3-分布式锁-todo-不太理解-xd-20240320再学redisson理解了"><span>2.2.3.分布式锁：(TODO 不太理解 XD:20240320再学Redisson理解了)</span></a></h5><p>​ 例如集群下多个定时器处理相同的数据，可以加分布式锁，锁定此数据，处理完成后释放锁。获取到锁的必须先判断这个数据是否被处理过（double check）</p><h4 id="_2-3-各种唯一约束" tabindex="-1"><a class="header-anchor" href="#_2-3-各种唯一约束"><span>2.3 各种唯一约束</span></a></h4><p>1.数据库唯一约束 order_sn字段【数据库层面】</p><p>2.redis set防重【百度网盘秒传功能】 需要处理的数据 计算MD5放入redis的set，每次处理数据，先看MD5是否存在，存在就不处理</p><h4 id="_2-4-防重表" tabindex="-1"><a class="header-anchor" href="#_2-4-防重表"><span>2.4 防重表</span></a></h4><p>数据库创建防重表，插入成功才可以操作【不采用，DB慢】 使用订单号orderNo作为去重表唯一索引，然后将数据插入去重表+业务操作 放在同一事物中，如果插入失败事物回滚导致业务操作也同时回滚，（如果业务操作失败也会导致插入去重表回滚）保证了数据一致性</p><h4 id="_2-5-全局唯一id" tabindex="-1"><a class="header-anchor" href="#_2-5-全局唯一id"><span>2.5 全局唯一id</span></a></h4><blockquote><p>全局请求唯一id：Fegin重复请求会带上老的id去（感觉是Token的感觉），弹幕中很多人公司是这么做的</p></blockquote><p>调用接口时，生成一个唯一ID，redis将数据保存到集合中（去重），存在即处理过</p><p>情景1：feign调用 生成一个请求唯一ID，A调用B时带上唯一ID，B处理feign请求时判断此唯一ID是否已处理（feign重试时会带上相同ID）</p><p>情景2：页面请求 可以使用nginx设置每一个请求的唯一id，proxy_set_header X-Request-ld $request_id; 【链路追踪】但是没办法保证请求幂等性，因为每次请求nginx都会生成一个新的ID</p><h2 id="_4-分布式事务" tabindex="-1"><a class="header-anchor" href="#_4-分布式事务"><span><a href="./03%E3%80%81%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.pdf">4.分布式事务</a></span></a></h2><h3 id="_4-1-本地事务问题" tabindex="-1"><a class="header-anchor" href="#_4-1-本地事务问题"><span>4.1.本地事务问题</span></a></h3><blockquote><p><mark>@Transactional 是本地事务，Fegin 调用的是远程服务 即需要分布式事务</mark></p><p>本地事务：在分布式系统 只能控制住自己的回滚，控制不了其他服务的回滚（同一个数据库&amp;连接）</p><p>分布式事务：最大原因 网络问题+分布式机器（不同数据库）</p></blockquote><p>实现：抛异常来使整个 @Transactional 回滚</p><p>问题：执行成功的远程Feign调用的服务肯定不会回滚了 这里所库存是Fegin，创订单是本方法。如出异常订单库不会创建但是库存表会锁</p><p>假失败：Feign Read Out time 但实际执行成功，可能就只是由于网络抖动造成没及时返回</p><img src="https://images.zzq8.cn/img/202301190948245.png" alt="image-20230119094829799" style="zoom:67%;"><p>ps：都会导致 订单回滚但是下面Feign调用的不会回滚</p><h3 id="_4-2-事务的两大属性-本地事务隔离级别-传播行为" tabindex="-1"><a class="header-anchor" href="#_4-2-事务的两大属性-本地事务隔离级别-传播行为"><span>4.2.事务的两大属性-本地事务隔离级别&amp;传播行为</span></a></h3><p>针对 @Transactional 就是 propagation、isolation</p><h4 id="_4-2-1-传播行为" tabindex="-1"><a class="header-anchor" href="#_4-2-1-传播行为"><span>4.2.1.传播行为</span></a></h4>`,81),Mn=n("p",null,"事务的传播行为:一个方法运行在了一个开启了事务的方法中时,当前方法是使用原来的事务还是开启一个新的事务",-1),Dn={href:"https://www.bilibili.com/video/BV1Eb411P7bP?t=873.3&p=8",target:"_blank",rel:"noopener noreferrer"},Jn=n("p",null,[n("mark",null,"注意：看了视频，以下两个方法分别属于不同的类")],-1),In=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span><span class="token constant">READ_COMMITTED</span><span class="token punctuation">)</span> <span class="token comment">//设置事务的隔离级别</span>
<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">)</span>   <span class="token comment">//设置事务的传播级别，默认值就是这个</span>
							<span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span>  <span class="token comment">/*将原来的事务挂起,开启一个新的事务    记一下，这两个就行*/</span>
<span class="token annotation punctuation">@Transactional</span>                                
method01<span class="token punctuation">{</span>  <span class="token comment">/*前置：账户余额只有买一本书，现在方法调用要买两本  */</span>
    <span class="token keyword">for</span> bookShopService<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1001、1002 两本书              </span>
<span class="token punctuation">}</span>
<span class="token comment">/*
 * REQUIRES_NEW：
 *  1）开启这个事务会成功买上一本，不开则都不成功。。
 *  2）买1001、1002都是新事务，与上面的互不影响
 *
 * REQUIRED：都会用父method01的事务，两次买都会失败（事务原子性回滚）
 */</span>
<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span> 
purchase<span class="token punctuation">{</span>
    buyBook
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>😡TODO：事务的7大传播行为：<strong>传播行为那里，防止本地事务失效</strong> 默认是 required</p><figure><img src="https://img-blog.csdnimg.cn/3a71d6de6f534303944a52c73a33335e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5ZWG5L-K5biF,size_20,color_FFFFFF,t_70,g_se,x_16" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><img src="https://images.zzq8.cn/img/202302231803673.png" alt="image-20230223180315464" style="zoom:67%;"><p>分析 Maven 依赖发现：可能知道会有本地事务失效的问题，搞个AOP给你去代理解决</p><ul><li>org.springframework.cloud:spring-cloud-starter-openfeign:2.1.3.RELEASE</li><li>带了</li><li>org.springframework.boot:spring-boot-starter-aop:2.1.8.RELEASE</li></ul>`,6),Fn={id:"_4-2-1-1-transactional",tabindex:"-1"},Nn={class:"header-anchor",href:"#_4-2-1-1-transactional"},Qn={href:"https://blog.csdn.net/shang_0122/article/details/120627232",target:"_blank",rel:"noopener noreferrer"},Un=t(`<p>My：方便本类方法互调！好像是用AOP的aspectJ实现同一个服务的不同方法用不同事务，不然默认都是用同一个事务</p><p>Why：在同一个类里面，编写两个方法，内部调用的时候，会导致事务设置失效。原因是没有用到 代理对象 的缘故。</p><blockquote><ul><li><p>Spring的声明式事务本质上是通过AOP来增强了类的功能</p><ul><li>本质在这个类上的方法在执行前后开启了事务</li></ul></li><li><p>Spring的AOP本质上就是为类做了一个代理</p><ul><li>看似在调用自己写的类,实际用的是增强后的代理类</li></ul></li><li><p>问题的解法</p><ul><li>访问增强后的代理类的方法,而非直接访问自身的方法</li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token doc-comment comment">/**
     * 本地事务失效问题
     * 同一个对象内事务方法互调默认失效,原因绕过了代理对象,事务使用代理对象来控制的
     * 解决:使用代理对象来调用事务方法
     *    1)、引入aop-starter;spring-boot-starter-aop;引入了aspectj
     *    2)、@EnableAspectJAutoProxy(exposeProxy=true);开启aspectJ动态代理功能.以后所有的动态代理都是aspectJ（即使没有接口也可以创建动态代理）  对外暴露代理对象
     *    3)、本类互调用调用对象
     *      OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy();
     *      orderService.b();
     *      orderService.c();
     */</span>
    <span class="token comment">//同一个对象内事务方法互调默认失效,原因绕过了代理对象</span>
    <span class="token comment">//事务使用代理对象来控制的</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">//a事务的所有设置就传播到了和他公用一个事务的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//b,c做任何设置都没用.都是和α公用一个事务 只相当于是把b()c()的代码放过来了 MY:这样bc的@Transactional失效</span>
        <span class="token comment">//this.b();//没用</span>
        <span class="token comment">//this.c();//没用</span>
      
        <span class="token comment">//OrderServiceImpl is YourClassName  通过使用AopContext.currentProxy()方法来获取代理对象，并通过代理对象调用methodB方法，可以确保methodB方法被AOP代理捕获，从而使得事务注解生效。</span>
       <span class="token comment">//需要注意的是，使用AopContext.currentProxy()方法需要确保Spring的exposeProxy属性设置为true，以便让Spring能够在当前线程中暴露代理对象。@EnableAspectJAutoProxy(exposeProxy=true);这里没用Spring默认的AOP（JDK / CGLib）</span>
        <span class="token class-name">OrderServiceImpl</span> orderService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderServiceImpl</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        orderService<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orderService<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//这里是REQUIRED所以后面的timeout等设置都没用，会跟着a()的来 30</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRED</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">//7s</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么会失效呢？<code>其实原因很简单，Spring在扫描Bean的时候会自动为标注了@Transactional注解的类生成一个代理类（proxy）,当有注解的方法被调用的时候，实际上是代理类调用的，代理类在调用之前会开启事务，执行事务的操作，但是同类中的方法互相调用，相当于this.B()，此时的B方法并非是代理类调用，而是直接通过原有的Bean直接调用，所以注解会失效。</code></p><p>默认的事务传播属性是Propagation.REQUIRED</p><blockquote><p>后来补充：因为看了上面笔记 REQUIRES_NEW 以为是同一个类的两个方法 看了视频后发现不是。。。仍不知道以下是否成立</p><blockquote><p>TODO：是否也能通过 @Transactional(propagation = Propagation.REQUIRES_NEW) 解决</p><p>同一个对象内事务方法互调默认失效可以通过代理对象调用解决，是否也可以通过@Transactional(propagation = Propagation.REQUIRES_NEW) 设置事务的传播行为解决</p></blockquote><p>是的，您可以通过使用<code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code>注解来设置事务的传播行为，以解决同一个对象内事务方法互调时默认失效的问题。</p><p>当一个事务方法（例如<code>method01</code>）内部调用同一个对象的另一个事务方法（例如<code>purchase</code>）时，默认情况下，Spring事务管理器会忽略内部方法的事务设置，而沿用外部方法的事务。这意味着内部方法的事务设置将被忽略，事务行为将按照外部方法的事务来执行。</p><p>为了解决这个问题，可以在内部方法上使用<code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code>注解。这将使内部方法在一个新的事务中运行，而不受外部方法事务的影响。当内部方法调用完成后，外部方法的事务会继续执行。</p><p>下面是示例代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 事务A</span>
    bookShopService<span class="token punctuation">.</span><span class="token function">purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事务B</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">purchase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 事务B的逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>method01</code>方法标记了<code>@Transactional</code>注解，表示它运行在一个事务（事务A）中。而<code>purchase</code>方法标记了<code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code>注解，表示它运行在一个新的事务（事务B）中。</p><p>当<code>method01</code>方法调用<code>bookShopService.purchase()</code>时，<code>purchase</code>方法将在一个新的事务B中执行，独立于外部方法的事务A。如果在<code>purchase</code>方法内部发生异常，只会回滚事务B，而事务A将不受影响。</p><p>通过设置事务的传播行为为<code>Propagation.REQUIRES_NEW</code>，您可以解决同一个对象内事务方法互调时默认失效的问题。这样，内部方法的事务设置将得到正确的应用，并且可以独立于外部方法的事务运行。</p></blockquote><h4 id="_4-2-2-隔离级别" tabindex="-1"><a class="header-anchor" href="#_4-2-2-隔离级别"><span>4.2.2.隔离级别</span></a></h4><h5 id="联想-title-的另外一大特性-事务属性-具体看自己笔记-mysql-事务隔离级别回顾" tabindex="-1"><a class="header-anchor" href="#联想-title-的另外一大特性-事务属性-具体看自己笔记-mysql-事务隔离级别回顾"><span>联想（Title 的另外一大特性 <strong>事务属性</strong> 具体看自己笔记）：<a href="..%5Csql%5Cmysql%E5%AE%9E%E6%88%9845%E8%AE%B2#%E9%9A%94%E7%A6%BB%E6%80%A7%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">MySQL 事务隔离级别回顾</a></span></a></h5><h4 id="_4-2-3-补充" tabindex="-1"><a class="header-anchor" href="#_4-2-3-补充"><span>4.2.3.补充</span></a></h4><blockquote><p>@Transactional失效大概列举几种情况，仅供参考；</p></blockquote><ol><li><p>直接new出来的对象添加事务不起作用，因为只有spring定义的bean才接受事务。（XD：既然要享受Spring的好处，那就得是Spring）</p></li><li><p>由于mysql的引擎用Myisam不支持事务，所以如果使用mysal的myisam引擎的话，事务不起作用。</p></li><li><p>如果@Transaction注解到非public方法上，事务不起作用，这是因为spring的AOP特性。</p><ul><li>当<code>@Transactional</code>注解应用于非public方法时，Spring的AOP代理机制默认只会代理public方法。这是因为Spring使用基于代理的AOP来实现事务管理，默认使用的是JDK动态代理或CGLIB代理。JDK动态代理只能代理实现接口的类的方法，而CGLIB代理可以代理任何类的方法。但无论是JDK动态代理还是CGLIB代理，它们都无法代理非public方法。因此，如果你将<code>@Transactional</code>注解应用于非public方法，事务将不会起作用。</li></ul></li><li><p>如果在当前类中进行内部调用方法，比如在A类中有a方法和b方法，a方法没有加@Transaction，b方法加了@Transaction，在方法a中调用方法b，方法b中的事务也不会生效。这是因为spring在扫描bean的时候会自动为标注了@Transaction注解类生成一个代理类，在有注解方法被调用时，实际上是代理类调用的，代理类在调用之前会开启事务，执行事务操作。但是同类中的方法相互调用，相当于this.b（），此时的b方法并非代理类调用，而是直接通过原有的bean直接调用，所以注解不起作用。</p></li><li><p>异常类型错误，如果抛出的 <strong>RuntimeException及其子类</strong> 事务才会回滚。XD：（废话）不是废话，看下面例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;Insufficient balance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出已检查异常</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果异常被catch到，必须要抛出异常，事务才会回滚。</p></li></ol><blockquote><p>GPT：</p><p>Spring AOP默认使用的是JDK动态代理或CGLIB代理吗？ 为什么不能代理非public方法？ aspectJ可以代理非public方法吗？</p></blockquote><p>默认情况下，Spring AOP 使用 JDK 动态代理来生成代理对象。JDK 动态代理是基于接口的代理，它通过运行时生成代理对象的方式来实现对目标对象方法的拦截和增强。</p><p>Spring AOP 也支持使用 CGLIB 代理，当目标对象没有实现接口时，会自动切换到使用 CGLIB 代理。CGLIB 代理是基于继承的代理，它通过生成目标对象的子类来实现对方法的拦截和增强。</p><p>关于代理非public方法的问题，这涉及到 JDK 动态代理和 CGLIB 代理的限制。</p><p>JDK 动态代理只能代理实现了接口的目标对象，并且只能代理接口中定义的方法。它无法代理目标对象中的非 public 方法，因为接口中的方法默认为 public，而非 public 方法在接口中是不可见的。</p><p>==CGLIB 代理可以代理目标对象中的非 public 方法，因为它是通过生成目标对象的子类来实现代理的，子类可以访问父类的非 public 方法。==但是，CGLIB 代理也有一个限制，就是无法代理被 final 关键字修饰的方法，因为 final 方法无法被子类重写。</p><p><mark>关于 AspectJ，它是一个独立的 AOP 框架，与 Spring AOP 有所不同。AspectJ 可以代理非 public 方法，因为它在编译时织入切面，直接修改字节码。AspectJ 可以实现更强大的切面功能，包括对非 public 方法的拦截和增强。</mark></p><p>总结起来，Spring AOP 默认使用 JDK 动态代理，无法代理非 public 方法。如果需要代理非 public 方法或使用更强大的切面功能，可以考虑使用 AspectJ。</p><h3 id="_4-3-分布式事务几种方案" tabindex="-1"><a class="header-anchor" href="#_4-3-分布式事务几种方案"><span><a href="./03%E3%80%81%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.pdf">4.3.分布式事务几种方案</a></span></a></h3>`,21),Gn={href:"https://www.yuque.com/snailclimb/mf2z3k/ng9vmg",target:"_blank",rel:"noopener noreferrer"},Hn=n("p",null,"微服务架构下，一个系统被拆分为多个小的微服务。每个微服务都可能存在不同的机器上，并且每个微服务可能都有一个单独的数据库供自己使用。这种情况下，一组操作可能会涉及到多个微服务以及多个数据库。举个例子：电商系统中，你创建一个订单往往会涉及到订单服务（订单数加一）、库存服务（库存减一）等等服务，这些服务会有供自己单独使用的数据库。",-1),Vn=n("p",null,"那么如何保证这一组操作要么都执行成功，要么都执行失败呢？",-1),Wn=n("p",null,"这个时候单单依靠数据库事务就不行了！我们就需要引入 分布式事务 这个概念了！",-1),Kn=n("p",null,"实际上，只要跨数据库的场景都需要用到引入分布式事务。比如说单个数据库的性能达到瓶颈或者数据量太大的时候，我们需要进行 分库。分库之后，同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。",-1),Yn=n("p",null,[n("strong",null,"一言蔽之，分布式事务的终极目标就是保证系统中多个相关联的数据库中的数据的一致性！")],-1),$n=n("p",null,"那既然分布式事务也属于事务，理论上就应该准守事物的 ACID 四大特性。但是，考虑到性能、可用性等各方面因素，我们往往是无法完全满足 ACID 的，只能选择一个比较折中的方案。",-1),Xn=n("p",null,[s("针对分布式事务，又诞生了一些新的理论。 "),n("mark",null,"分布式事务基础理论 ---> CAP 理论和 BASE 理论")],-1),Zn=t(`<p>分布式每个服务用自己的数据库，每个服务放的机器还不一样 一个机器的成功失败，别的节点无法感知</p><p>分布式系统经常出现的异常 机器宕机、网络异常、消息丢失、消息乱序、数据错误、不可靠的 TCP、存储数据丢失...</p><img src="https://images.zzq8.cn/img/202301191503753.png" alt="image-20230119150306322" style="zoom:67%;"><p><a href="../javaframework/springcloud#cap">CAP &amp; BASE &amp; Seata with My</a> 建议结合自己的这篇Seata笔记看，更了解 2PC</p><blockquote><p>刚性事务（强一致性） vs 柔性事务（最终一致性）</p><p><a href="./03%E3%80%81%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.pdf">这里具体看 PDF！</a>注意方案是方案框架是框架（落地实现这个方案） <strong>✔是高并发优先考虑的，用MQ</strong> 订单用异步确保型/商品保存可2PC</p><p>实际上，柔性事务就是 BASE 理论 +业务实践 <strong>柔性事务追求的是最终一致性。</strong></p></blockquote><ul><li><p><code>2PC</code>（Seata AT事务模式是这个的一个变形）还有3PC 【2 phase commit 二阶提交】 准备阶段+提交阶段 注意和MySQL写日志的两阶段提交区分，是不一样的东西。Seata AT是第一阶段提交+2第二阶段看要不要补偿-2 只适合一般的分布式事务不合适高并发 虽然它有补偿机制，但他就是刚性事务</p></li><li><p>柔性事务-<code>TCC</code> 事务补偿型方案：相当于3PC的手动版 【TCC 是 Try、Confirm、Cancel 三个词的缩写，它分为三个阶段】 商城项目用的很多，也有很多框架给你去用。把正常的业务代码按照框架要求拆成z和三部分就行 Try+2/add Cancel-2/delete</p></li><li><p>柔性事务-最大努力通知型方案（弹幕有公司是这个）✔ 支付宝告诉你有没有支付成功，MQ 一会发个消息告诉你成了 一会发个消息告诉你成了</p></li><li><p>柔性事务-<strong>可靠消息</strong>+最终一致性方案（异步确保型，视频是这个）✔ 也是借助 MQ 总结一句：异步下单，提高并发，提升响应，提升购物体验。</p></li></ul><blockquote><h4 id="后来补充-总结两者" tabindex="-1"><a class="header-anchor" href="#后来补充-总结两者"><span>后来补充-总结两者：</span></a></h4><ul><li><code>2PC/3PC</code> 依靠数据库或者存储资源层面的事务（XD: Seata好像借助了表），<code>TCC</code> 主要通过修改业务代码来实现。</li><li><code>2PC/3PC</code> 属于业务代码无侵入的，<code>TCC</code> 对业务代码有侵入。</li><li><code>2PC/3PC</code> 追求的是强一致性，在两阶段提交的整个过程中，一直会持有数据库的锁。<code>TCC</code> 追求的是最终一致性，不会一直持有各个业务资源的锁。</li></ul><h4 id="_2pc-看seata那篇" tabindex="-1"><a class="header-anchor" href="#_2pc-看seata那篇"><span>2PC 看Seata那篇</span></a></h4><h4 id="tcc-补充" tabindex="-1"><a class="header-anchor" href="#tcc-补充"><span>TCC 补充：</span></a></h4><p>TCC 属于目前比较火的一种柔性事务解决方案</p><p>简单来说，TCC 是 Try、Confirm、Cancel 三个词的缩写，它分为三个阶段：</p><ol><li><p>Try（尝试）阶段 : 尝试执行。完成业务检查，并预留好必需的业务资源。</p></li><li><p>Confirm（确认）阶段 ：确认执行。当所有事务参与者的 Try 阶段执行成功就会执行 Confirm ，Confirm 阶段会处理 Try 阶段预留的业务资源。否则，就会执行 Cancel 。</p></li><li><p>Cancel（取消）阶段 ：取消执行，释放 Try 阶段预留的业务资源。</p></li></ol><p><strong>每个阶段由业务代码控制，这样可以避免长事务，性能更好。</strong></p><p>我们拿转账场景来说：</p><ol><li>Try（尝试）阶段 : 在转账场景下，Try 要做的事情是就是检查账户余额是否充足，预留的资源就是转账资金。</li><li>Confirm（确认）阶段 ： 如果 Try 阶段执行成功的话，Confirm 阶段就会执行真正的扣钱操作。</li><li>Cancel（取消）阶段 ：释放 Try 阶段预留的转账资金。</li></ol><p>一般情况下，当我们使用TCC模式的时候，需要自己实现 try, confirm, cancel 这三个方法，来达到最终一致性。</p><p>正常情况下，会执行 try, confirm 方法。</p><img src="http://images.zzq8.cn/img/image-20230907213620218.png" alt="image-20230907213620218" style="zoom:50%;"><p>出现异常的话，会执行 try, cancel 方法。</p><img src="http://images.zzq8.cn/img/image-20230907213650656.png" alt="image-20230907213650656" style="zoom:50%;"><p>Try 阶段出现问题的话，可以执行 Cancel。那如果 Confirm 或者 Cancel 阶段失败了怎么办呢？</p><p>TCC 会记录事务日志并持久化事务日志到某种存储介质上比如本地文件、关系型数据库、Zookeeper，事务日志包含了事务的执行状态，通过事务执行状态可以判断出事务是提交成功了还是提交失败了，以及具体失败在哪一步。如果发现是 Confirm 或者 Cancel 阶段失败的话，会进行重试，继续尝试执行 Confirm 或者 Cancel 阶段的逻辑。重试的次数通常为 6 次，如果超过重试的次数还未成功执行的话，就需要人工介入处理了。</p><p>如果代码没有特殊 Bug 的话，Confirm 或者 Cancel 阶段出现问题的概率是比较小的。</p><p>事务日志会被删除吗？ 会的。如果事务提交成功（没有抛出任何异常），就可以删除对应的事务日志，节省资源。</p><p>TCC 模式不需要依赖于底层数据资源的事务支持，但是需要我们手动实现更多的代码，属于 <strong>侵入业务代码</strong> 的一种分布式解决方案。</p><p>TCC 事务模型的思想类似 2PC，我简单花了一张图对比一下二者。</p><img src="http://images.zzq8.cn/img/image-20230907213858567.png" alt="image-20230907213858567" style="zoom:67%;"></blockquote><h2 id="_5-rabbitmq延时队列-实现定时任务" tabindex="-1"><a class="header-anchor" href="#_5-rabbitmq延时队列-实现定时任务"><span>5.RabbitMQ延时队列(实现定时任务)</span></a></h2><p><a href="../mq/rabbitmq">MQ笔记</a></p><p><a href="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%B5%81%E7%A8%8B.jpg">该业务的MQ架构图</a></p><h2 id="_6-解锁库存" tabindex="-1"><a class="header-anchor" href="#_6-解锁库存"><span>6.解锁库存</span></a></h2><p>看着有些繁琐，直接 CV ，没有去捋了</p><h2 id="_7-支付" tabindex="-1"><a class="header-anchor" href="#_7-支付"><span>7.支付</span></a></h2><blockquote><p>以后有空可以试着做做微信的！项目代码中他做了！！！可以参考</p></blockquote><h3 id="_7-1-前言" tabindex="-1"><a class="header-anchor" href="#_7-1-前言"><span>7.1.前言</span></a></h3><blockquote><p>用的是支付宝的沙盒，测试时候这个通了正式环境改个参数就行</p></blockquote><p>签名可以想象为 MD5 稍微变动就变</p><p>支付宝私钥是肯定不知道的</p><figure><img src="https://images.zzq8.cn/img/202302021100433.png" alt="image-20230202110044964" tabindex="0" loading="lazy"><figcaption>image-20230202110044964</figcaption></figure><h3 id="_7-2-使用" tabindex="-1"><a class="header-anchor" href="#_7-2-使用"><span>7.2.使用</span></a></h3><p>具体想体验深一点可以下载ali的model有几个jsp页面和一个配置类，导入Eclipse进行测试。这个model有很多东西可以抽出来用。</p><p>雷神自己根据 ali 的 model 封装了一个<code>AlipayTemplate</code> 使用就 <code>alipayTemplate.pay(payVo)</code> 完成！其它全是配参数</p><h4 id="_7-2-1-异步回调" tabindex="-1"><a class="header-anchor" href="#_7-2-1-异步回调"><span>7.2.1.异步回调</span></a></h4><p>我这里由于没有用内网穿透暂且搁置</p><p>不建议在同步回调直接修改订单状态，推荐在异步回调的时候修改订单状态 因为：支付成功后url? 后会带签名等信息给你去验证。但是用户可能没进这个成功页面</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 服务器[异步通知]页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问</span>
<span class="token comment">// 支付宝会悄悄的给我们发送一个请求，告诉我们支付成功的信息       </span>
<span class="token keyword">public</span> <span class="token class-name">String</span> notify_url
    
    
写一个<span class="token class-name">Controller</span>处理订单状态，最后得 <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span> 不然支付宝服务器还会通知【柔性事务<span class="token operator">-</span>最大努力通知型方案】
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：修改订单状态之前一定要验签！万一别人知道这个请求路径用postman发一个假的数据让你改订单状态能篡改伪造</strong></p><p>各位注意:这里老师在配置文件中改时间格式一定用弃用的格式化方式和老师一样，不然会报错，而且贼难找。排了2个多小时。</p><p>mvc配时间格式</p><h4 id="_7-2-2-收单" tabindex="-1"><a class="header-anchor" href="#_7-2-2-收单"><span>7.2.2.收单</span></a></h4><p>pay时候可以根据官网给一个时间参数</p><p>时延问题：订单关单的时候手动调用支付宝的收单</p><p>也可 搞个定时任务与支付宝对账 这些在ali api中都有示例</p><h2 id="_8-内网穿透" tabindex="-1"><a class="header-anchor" href="#_8-内网穿透"><span>8.内网穿透</span></a></h2><blockquote><p>支付宝服务器异步回调 验签、改订单状态 时候。肯定需要公网ip才能访问到你</p></blockquote><h3 id="_8-1-原理" tabindex="-1"><a class="header-anchor" href="#_8-1-原理"><span>8.1.原理</span></a></h3><p>说白了就是用内网穿透服务商备案好了的提供给你用 主域名备案好了下面的二级三级就不需要了</p><img src="https://images.zzq8.cn/img/202302021058877.png" alt="image-20230202105845657" style="zoom:67%;"><h3 id="_8-2-适用场景" tabindex="-1"><a class="header-anchor" href="#_8-2-适用场景"><span>8.2.适用场景</span></a></h3><p>1、开发测试（微信、支付宝）</p><p>2、智慧互联 （路由器可以绑花生壳，我没在家也能访问！！！）</p><p>3、远程控制 4、私有云</p><h3 id="_8-3-服务商" tabindex="-1"><a class="header-anchor" href="#_8-3-服务商"><span>8.3.服务商</span></a></h3><p>utools也可以内网穿透，我之前用过</p><p>1、natapp：https://natapp.cn/ 优惠码：022B93FD（9 折）[仅限第一次使用]</p><p>2、续断：www.zhexi.tech 优惠码：SBQMEA（95 折）[仅限第一次使用] 视频中用的这个一个月9块</p><p>3、花生壳：https://www.oray.com/</p><h3 id="_8-4-我的问题" tabindex="-1"><a class="header-anchor" href="#_8-4-我的问题"><span>8.4.我的问题</span></a></h3><p>注意支付成功后的异步回调需要内网穿透和Nginx联调</p><p>问题是域名问题 沿用了外网的域名 所以到不了网关</p><p>注意：内网穿透后发现F12是下面的，访问也老是404。第二天才发现是clash的问题查了7890的端口 <mark>但是改了后还是不行搞了几个小时搞不好</mark></p><p>Remote Address: 192.168.0.1:7890</p><h1 id="十、秒杀" tabindex="-1"><a class="header-anchor" href="#十、秒杀"><span>十、秒杀</span></a></h1>`,53),ns=n("p",null,[n("mark",null,"打算一口气看完视频，后期自己根据网友笔记再补代码"),s(" 跳过")],-1),ss={href:"https://www.bilibili.com/video/BV1np4y1C7Yf?t=92.6&p=321",target:"_blank",rel:"noopener noreferrer"},as=t(`<p>秒杀具有瞬间高并发的特点，针对这一特点，必须要做限流 + 异步+ 缓存（页面静态化）+ 独立部署。</p><h2 id="_1-秒杀-高并发-系统关注的问题" tabindex="-1"><a class="header-anchor" href="#_1-秒杀-高并发-系统关注的问题"><span>1. 秒杀（高并发）系统关注的问题</span></a></h2><p>前端限流：点一下要1s后才能再点..</p><p>07 保证服务的稳，其它有了快</p><img src="https://images.zzq8.cn/img/202308231025296.png" alt="image-20230316140448941" style="zoom:33%;"><img src="https://images.zzq8.cn/img/202308231025131.png" alt="image-20230316140459330" style="zoom:33%;"><h2 id="_2-quartz" tabindex="-1"><a class="header-anchor" href="#_2-quartz"><span>2.Quartz</span></a></h2><blockquote><p>jdk Timer.class 可以做一点定时任务，包括Spring也有自己的定时任务注解。可能实际开发更多的是用框架 Quartz 视频用的就是 Spring 的定时任务</p></blockquote><h3 id="_2-1-cron-表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-cron-表达式"><span>2.1.cron 表达式</span></a></h3><p>可以使用在线的Cron表达式生成器</p><p>语法：秒 分 时 日 月 周 年（Spring 不支持） 日和周的位置至少有个?因为两个制约了</p><p>注意周中1代表周日 看pdf的图片</p><h3 id="_2-2-spring-定时任务demo" tabindex="-1"><a class="header-anchor" href="#_2-2-spring-定时任务demo"><span>2.2.Spring 定时任务Demo</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 定时任务
 * 1、@EnableScheduling 开启定时任务
 * 2、@Scheduled开启一个定时任务
 * 3、自动配置类 TaskSchedulingAutoConfiguration
 *
 * 异步任务
 * 1、@EnableAsync:开启异步任务
 * 2、@Async：给希望异步执行的方法标注
 * 3、自动配置类 TaskExecutionAutoConfiguration
 *
 * 思考异步编排和异步任务的区别，这种异步任务不好管理好像也是个Executor
 * 觉得可以把他当成异步编排，该配置去yaml配。一种手动写代码一种直接注解到方法
 */</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@EnableAsync</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloSchedule</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 与Quarz Cron的两点区别：
     * 1、在Spring中表达式是6位组成，不允许第七位的年份
     * 2、在周几的的位置,1-7代表周一到周日  MON-SUN（英文标识也行）
     *
     * 定时任务不该阻塞。（默认是阻塞的）
     * 1）、可以让业务以异步的方式，自己提交到线程池
     *      CompletableFuture.runAsync(() -&gt; <span class="token punctuation">{</span>
     *      <span class="token punctuation">}</span>,execute);
     *
     * 2）、支持定时任务线程池；设置 TaskSchedulingProperties （size 默认是1 所以才会阻塞）
     *      spring.task.scheduling.pool.size: 5  【雷神说这个不好使，有bug】
     *
     * 3）、让定时任务异步执行
     *      异步任务
     *
     * 解决：使用异步任务 + 定时任务来完成定时任务不阻塞的功能
     * 注意：这两者都有其线程池，注意要配置
     */</span>
    <span class="token annotation punctuation">@Async</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;*/5 * * ? * 5&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hello...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加商品随机码 秒杀链接加密，防黄牛 随机码，秒杀开始才暴露</p><p>Redisson的信号量 每一个商品都有它的参与秒杀的库存信号量 <code>redissonClient.getSemaphore(SKU_STOCK_SEMAPHORE + token);</code> 信号量最大作用：限流</p><p>定时任务上架：TODO 幂等性处理</p><p>伪完结：</p><p>1）秒杀往后没跟</p>`,19),es=n("strong",null,"可以由全自动部署机制独立部署",-1),ts={href:"https://www.yuque.com/atguigu/springboot/na3pfd#gXHqd",target:"_blank",rel:"noopener noreferrer"};function ps(os,is){const e=i("ExternalLinkIcon"),o=i("font"),l=i("RouteLink");return r(),u("div",null,[k,n("blockquote",null,[n("p",null,[n("a",m,[s("API 文档"),a(e)])]),n("p",null,[n("a",v,[s("项目视频地址"),a(e)]),s("，碰到忘记点搜本笔记配合视频再度复习！"),n("a",h,[s("自己代码地址"),a(e)])]),n("p",null,[s("Google 到的笔记，很详细比视频评论下我看初级篇找的要详细："),n("a",g,[s("别人笔记"),a(e)]),s(),n("a",b,[s("还是评论区的更贴近视频"),a(e)]),s(),n("a",f,[s("别人代码"),a(e)]),s(" 建议搭配食用")]),n("p",null,[s("我看到后面看的两篇别人的笔记 "),n("a",_,[s("一"),a(e)]),s(),n("a",y,[s("二"),a(e)])]),n("p",null,[s("个人认为"),a(o,{color:"red"},{default:p(()=>[s("新增商品，商品上架，保存订单数据，支付")]),_:1}),s("这四个功能为该项目最折磨人功能，一P能卡一两天")])]),q,a(o,{color:"red"},{default:p(()=>[s("==缓存中存的数据是json字符串==")]),_:1}),s(" 一般都是用 StringRedisTemplate 够用 注意：至于为什么看自己"),x,s("，这个也可操作Hash"),a(o,{color:"red"},{default:p(()=>[s("原因：JSON跨语言。跨平台兼容。 因为微服务各个模块不一定是用java写，php写的也可以去拿json。 "),C,s("但是如果存的是java序列化对象php没用整个java系统不能解析。而JSON全语言全平台")]),_:1}),S,n("p",null,[s("1)、升级lettuce客户端。但是没有解决的 2)、"),n("a",E,[s("切换使用jedis"),a(e)])]),w,n("ol",null,[n("li",null,[s("加本地锁 Synchronized / JUC（Lock）这些都只放在单体应用的话都可以叫本地锁， 在分布式环境下这些JUC类都没法用 想用的话得用 "),n("a",R,[s("Redisson"),a(e)]),s(" (Java implementation) 它对这些类封装成了分布式可用的！")]),T]),j,n("blockquote",null,[n("p",null,[s("结合前面的笔记 + "),a(l,{to:"/studynotes/DistributedLock/DistributedLock.html#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81"},{default:p(()=>[s("以及自己有篇笔记")]),_:1})]),A,z]),B,n("ul",null,[n("li",null,[s("问题来了：与Redis有个网络IO。去的时候判断是自己的锁，回的途中时间过期别的线程占了这把锁 而此时我却删了它！没锁住！ 即 "),L,s("【"),n("a",O,[s("Lua 脚本原子删锁"),a(e)]),s("】 不然就会出现上述问题")])]),P,n("p",null,[s("总结：原子加锁、原子解锁、续期不想做了就把锁时间搞长一点（加锁解锁都是这段代码可以封装工具类，"),M,s("） 官网给出了以上流程，在 setnx 中，最后的总结说"),D,s("用这种，"),n("a",J,[s("并指出了更专业的：Redlock"),a(e)]),s(" -> "),n("a",I,[s("Redisson"),a(e)]),s(" (Java implementation).")]),n("h2",F,[n("a",N,[n("span",null,[n("a",Q,[s("4）分布式锁-Redisson"),a(e)])])])]),U,n("blockquote",null,[G,n("p",null,[s("在分布式环境下这些本地锁JUC类都没法用 想用的话得用 "),n("a",H,[s("Redisson"),a(e)]),s(" (Java implementation) 它对这些类封装成了分布式可用的！")]),V]),W,n("p",null,[s("基于Redis的Redisson分布式可重入锁"),n("a",K,[Y,a(e)]),s(" Java对象实现了"),$,s("接口。 也就是如果学过 Lock 就不用再花时间成本学了，都是一样的API。厉害的点是：一个本地锁一个分布式锁")]),X,n("h2",Z,[n("a",nn,[n("span",null,[s("6）"),n("a",sn,[s("SpringCache"),a(e)])])])]),an,n("h3",en,[n("a",tn,[n("span",null,[s("6.3 "),n("a",pn,[s("使用步骤："),a(e)])])])]),on,n("p",null,[s("默认行为 如果缓存中有，方法不再调用 key是默认生成的:缓存的名字 -> SimpleKey::"),ln,s(" 【value::key】 缓存的value值，默认使用jdk序列化机制，将序列化的数据存到redis中 默认时间是 -1： 自定义操作：key的生成 指定生成缓存的key【key属性指定，接收一个Spel "),a(o,{color:"red"},{default:p(()=>[s(`（所以key要给String得 key="'string'"）`)]),_:1}),s("】 指定缓存的数据的存活时间【配置文档中修改存活时间】 将数据保存为json格式【配置一个config类，仿照源码抄部分】")]),cn,n("p",null,[n("a",rn,[un,a(e)]),s(" @Bean 在 application 启动的时候加载！所以配置文件改了热部署也没用 有解决方案但是要多写个接口调用一下：销毁这个Bean再重新注册进来：")]),dn,n("blockquote",null,[n("p",null,[s("我被这里卡了半天，因为我es查的是product，而我java写的EsConstant是 "),kn,n("a",mn,[s("p133第4分钟"),a(e)])])]),vn,n("p",null,[n("a",hn,[s("apache base64"),a(e)]),s(" 长度能改变么 没有办法，base64是编码而已，是对称的，不是像md5那样的非对称的加密算法能够讲任意长度字符加密后长固定长度。")]),gn,n("p",null,[s("但是光零零一个MD5，网上随便搜破解随便破。 原因："),n("a",bn,[s("彩虹表"),a(e)]),s(" -> 预先计算（因为123456的MD5不可变我就把这个放数据库）在字典法的基础上改进")]),fn,n("h3",_n,[n("a",yn,[n("span",null,[n("a",qn,[s("2.2 GitHub"),a(e)])])])]),xn,n("p",null,[s("怎么用："),n("a",Cn,[s("spring 官网！！！"),a(e)]),s(" 必须学会看"),n("a",Sn,[s("官方文档"),a(e)]),s("解决问题！！！官网解决不了的再 Google")]),En,n("h3",wn,[n("a",Rn,[n("span",null,[s("3.5 "),n("a",Tn,[s("SpringSession核心原理 - 装饰者模式"),a(e)])])])]),jn,n("p",null,[n("a",An,[s("过滤器和拦截器是两种不同的Web请求处理机制。"),a(e)])]),zn,n("h2",Bn,[n("a",Ln,[n("span",null,[n("a",On,[s("3.1.上面补充："),a(e)])])])]),Pn,n("blockquote",null,[Mn,n("p",null,[s("XD: 就是开启的 @Transactional 的方法里面调用的另外的方法也用了 @Transactional ("),n("a",Dn,[s("以下例子视频 Link"),a(e)]),s(")")]),Jn]),In,n("h5",Fn,[n("a",Nn,[n("span",null,[n("a",Qn,[s("4.2.1.1.@Transactional"),a(e)])])])]),Un,n("blockquote",null,[n("p",null,[s("后面补充：（前言）："),n("a",Gn,[s("JavaGuide-《Java面试指北》-服务治理：分布式事务解决方案有哪些？"),a(e)]),s("这一篇讲的真好，真细致！！！🤺🤺🤺")]),Hn,Vn,Wn,Kn,Yn,$n,Xn]),Zn,n("blockquote",null,[ns,n("p",null,[s("定时任务就参考秒杀系统的定时任务设计 "),n("a",ss,[s("重点看一下秒杀系统设计的那一集"),a(e)])])]),as,n("p",null,[s("微服务因为模块很多需要 "),es,s("，"),n("a",ts,[s("具体看 martinfowler 的见解！"),a(e)])])])}const rs=c(d,[["render",ps],["__file","Advanced.html.vue"]]),us=JSON.parse('{"path":"/studynotes/GuliMall/Advanced.html","title":"Advanced","lang":"zh-CN","frontmatter":{"description":"Advanced API 文档 项目视频地址，碰到忘记点搜本笔记配合视频再度复习！自己代码地址 Google 到的笔记，很详细比视频评论下我看初级篇找的要详细：别人笔记 还是评论区的更贴近视频 别人代码 建议搭配食用 我看到后面看的两篇别人的笔记 一 二 个人认为这四个功能为该项目最折磨人功能，一P能卡一两天 前言 视频中雷神stream循环查库了，我...","head":[["meta",{"property":"og:url","content":"https://doc.zzq8.cn/studynotes/GuliMall/Advanced.html"}],["meta",{"property":"og:site_name","content":"Zz"}],["meta",{"property":"og:title","content":"Advanced"}],["meta",{"property":"og:description","content":"Advanced API 文档 项目视频地址，碰到忘记点搜本笔记配合视频再度复习！自己代码地址 Google 到的笔记，很详细比视频评论下我看初级篇找的要详细：别人笔记 还是评论区的更贴近视频 别人代码 建议搭配食用 我看到后面看的两篇别人的笔记 一 二 个人认为这四个功能为该项目最折磨人功能，一P能卡一两天 前言 视频中雷神stream循环查库了，我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.zzq8.cn/img/202212071647791.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-13T08:54:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-13T08:54:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced\\",\\"image\\":[\\"https://images.zzq8.cn/img/202212071647791.png\\",\\"https://images.zzq8.cn/img/202212241453788.png\\",\\"https://images.zzq8.cn/img/202212261839248.png\\",\\"https://images.zzq8.cn/img/202303041526511.png\\",\\"http://images.zzq8.cn/img/8813c6efcba2437dad736fe89b43ebc5.png\\",\\"https://images.zzq8.cn/img/202301041827971.png\\",\\"https://images.zzq8.cn/img/202301041828301.png\\",\\"https://images.zzq8.cn/img/202301051713942.png\\",\\"https://images.zzq8.cn/img/202301051653057.png\\",\\"https://images.zzq8.cn/img/202301051702278.png\\",\\"https://images.zzq8.cn/img/202301051653500.png\\",\\"https://images.zzq8.cn/img/202301051701799.png\\",\\"https://images.zzq8.cn/img/202301161056979.png\\",\\"https://img-blog.csdnimg.cn/3a71d6de6f534303944a52c73a33335e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5ZWG5L-K5biF,size_20,color_FFFFFF,t_70,g_se,x_16\\",\\"https://images.zzq8.cn/img/202302021100433.png\\"],\\"dateModified\\":\\"2024-04-13T08:54:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"商品上架","slug":"商品上架","link":"#商品上架","children":[]},{"level":2,"title":"1.Nginx","slug":"_1-nginx","link":"#_1-nginx","children":[{"level":3,"title":"Nginx反向代理流程：","slug":"nginx反向代理流程","link":"#nginx反向代理流程","children":[]},{"level":3,"title":"Nginx 动静分离","slug":"nginx-动静分离","link":"#nginx-动静分离","children":[]}]},{"level":2,"title":"2.Thymeleaf","slug":"_2-thymeleaf","link":"#_2-thymeleaf","children":[{"level":3,"title":"2.1 视图映射","slug":"_2-1-视图映射","link":"#_2-1-视图映射","children":[]},{"level":3,"title":"2.2 Model / RedirectAttributes","slug":"_2-2-model-redirectattributes","link":"#_2-2-model-redirectattributes","children":[]}]},{"level":2,"title":"1）前言","slug":"_1-前言","link":"#_1-前言","children":[]},{"level":2,"title":"2）压力测试-线程","slug":"_2-压力测试-线程","link":"#_2-压力测试-线程","children":[]},{"level":2,"title":"3）性能监控-JVM","slug":"_3-性能监控-jvm","link":"#_3-性能监控-jvm","children":[]},{"level":2,"title":"4）两者结合-压测同时看性能","slug":"_4-两者结合-压测同时看性能","link":"#_4-两者结合-压测同时看性能","children":[]},{"level":2,"title":"1）前言","slug":"_1-前言-1","link":"#_1-前言-1","children":[]},{"level":2,"title":"2）Redis使用","slug":"_2-redis使用","link":"#_2-redis使用","children":[{"level":3,"title":"2.1 引入 Redis：注意 -> 云服务器redis不设密容易被挖矿","slug":"_2-1-引入-redis-注意-云服务器redis不设密容易被挖矿","link":"#_2-1-引入-redis-注意-云服务器redis不设密容易被挖矿","children":[]},{"level":3,"title":"2.2 lettuce堆外内存溢出bug","slug":"_2-2-lettuce堆外内存溢出bug","link":"#_2-2-lettuce堆外内存溢出bug","children":[]},{"level":3,"title":"2.3 Redis 三大问题","slug":"_2-3-redis-三大问题","link":"#_2-3-redis-三大问题","children":[]}]},{"level":2,"title":"3）分布式锁","slug":"_3-分布式锁","link":"#_3-分布式锁","children":[]},{"level":2,"title":"4）分布式锁-Redisson","slug":"_4-分布式锁-redisson","link":"#_4-分布式锁-redisson","children":[{"level":3,"title":"4.1 初体验","slug":"_4-1-初体验","link":"#_4-1-初体验","children":[]}]},{"level":2,"title":"5）分布式锁-缓存数据一致性","slug":"_5-分布式锁-缓存数据一致性","link":"#_5-分布式锁-缓存数据一致性","children":[{"level":3,"title":"1）、双写模式：写数据库后，写缓存","slug":"_1-、双写模式-写数据库后-写缓存","link":"#_1-、双写模式-写数据库后-写缓存","children":[]},{"level":3,"title":"2）、失效模式：写完数据库后，删缓存（推荐）","slug":"_2-、失效模式-写完数据库后-删缓存-推荐","link":"#_2-、失效模式-写完数据库后-删缓存-推荐","children":[]},{"level":3,"title":"5.1 Canal 了解","slug":"_5-1-canal-了解","link":"#_5-1-canal-了解","children":[]}]},{"level":2,"title":"6）SpringCache","slug":"_6-springcache","link":"#_6-springcache","children":[{"level":3,"title":"6.1 Why：","slug":"_6-1-why","link":"#_6-1-why","children":[]},{"level":3,"title":"6.2 初步理解：","slug":"_6-2-初步理解","link":"#_6-2-初步理解","children":[]},{"level":3,"title":"6.3 使用步骤：","slug":"_6-3-使用步骤","link":"#_6-3-使用步骤","children":[]},{"level":3,"title":"6.4 配置原理：","slug":"_6-4-配置原理","link":"#_6-4-配置原理","children":[]}]},{"level":2,"title":"1）商品搜索","slug":"_1-商品搜索","link":"#_1-商品搜索","children":[]},{"level":2,"title":"1.注册流程","slug":"_1-注册流程","link":"#_1-注册流程","children":[{"level":3,"title":"1.1 JS 验证码倒计时","slug":"_1-1-js-验证码倒计时","link":"#_1-1-js-验证码倒计时","children":[]},{"level":3,"title":"1.2 JSR303","slug":"_1-2-jsr303","link":"#_1-2-jsr303","children":[]},{"level":3,"title":"1.3 MD5","slug":"_1-3-md5","link":"#_1-3-md5","children":[]},{"level":3,"title":"1.4 总结","slug":"_1-4-总结","link":"#_1-4-总结","children":[]}]},{"level":2,"title":"2.社交登录","slug":"_2-社交登录","link":"#_2-社交登录","children":[{"level":3,"title":"2.1 OAuth2.0","slug":"_2-1-oauth2-0","link":"#_2-1-oauth2-0","children":[]},{"level":3,"title":"2.2 GitHub","slug":"_2-2-github","link":"#_2-2-github","children":[]}]},{"level":2,"title":"3.分布式session","slug":"_3-分布式session","link":"#_3-分布式session","children":[{"level":3,"title":"3.1 Session 两个问题：","slug":"_3-1-session-两个问题","link":"#_3-1-session-两个问题","children":[]},{"level":3,"title":"3.2 分布式session解决方案","slug":"_3-2-分布式session解决方案","link":"#_3-2-分布式session解决方案","children":[]},{"level":3,"title":"3.3 SpringSession整合redis","slug":"_3-3-springsession整合redis","link":"#_3-3-springsession整合redis","children":[]},{"level":3,"title":"3.4 我遇到的坑","slug":"_3-4-我遇到的坑","link":"#_3-4-我遇到的坑","children":[]},{"level":3,"title":"3.5 SpringSession核心原理 - 装饰者模式","slug":"_3-5-springsession核心原理-装饰者模式","link":"#_3-5-springsession核心原理-装饰者模式","children":[]}]},{"level":2,"title":"4.单点登录-SSO","slug":"_4-单点登录-sso","link":"#_4-单点登录-sso","children":[]},{"level":2,"title":"1.需求描述","slug":"_1-需求描述","link":"#_1-需求描述","children":[]},{"level":2,"title":"2.Redis 存储设计 & VO：","slug":"_2-redis-存储设计-vo","link":"#_2-redis-存储设计-vo","children":[]},{"level":2,"title":"3.ThreadLocal用户身份鉴别","slug":"_3-threadlocal用户身份鉴别","link":"#_3-threadlocal用户身份鉴别","children":[]},{"level":2,"title":"3.1.上面补充：","slug":"_3-1-上面补充","link":"#_3-1-上面补充","children":[]},{"level":2,"title":"1.模块介绍","slug":"_1-模块介绍","link":"#_1-模块介绍","children":[]},{"level":2,"title":"2.Feign 两个问题","slug":"_2-feign-两个问题","link":"#_2-feign-两个问题","children":[{"level":3,"title":"1）Feign远程调用丢失请求头问题","slug":"_1-feign远程调用丢失请求头问题","link":"#_1-feign远程调用丢失请求头问题","children":[]},{"level":3,"title":"2）Feign异步情况丢失上下文问题","slug":"_2-feign异步情况丢失上下文问题","link":"#_2-feign异步情况丢失上下文问题","children":[]}]},{"level":2,"title":"3.接口幂等性","slug":"_3-接口幂等性","link":"#_3-接口幂等性","children":[{"level":3,"title":"1）前言","slug":"_1-前言-2","link":"#_1-前言-2","children":[]},{"level":3,"title":"2）解决方案","slug":"_2-解决方案","link":"#_2-解决方案","children":[]}]},{"level":2,"title":"4.分布式事务","slug":"_4-分布式事务","link":"#_4-分布式事务","children":[{"level":3,"title":"4.1.本地事务问题","slug":"_4-1-本地事务问题","link":"#_4-1-本地事务问题","children":[]},{"level":3,"title":"4.2.事务的两大属性-本地事务隔离级别&传播行为","slug":"_4-2-事务的两大属性-本地事务隔离级别-传播行为","link":"#_4-2-事务的两大属性-本地事务隔离级别-传播行为","children":[]},{"level":3,"title":"4.3.分布式事务几种方案","slug":"_4-3-分布式事务几种方案","link":"#_4-3-分布式事务几种方案","children":[]}]},{"level":2,"title":"5.RabbitMQ延时队列(实现定时任务)","slug":"_5-rabbitmq延时队列-实现定时任务","link":"#_5-rabbitmq延时队列-实现定时任务","children":[]},{"level":2,"title":"6.解锁库存","slug":"_6-解锁库存","link":"#_6-解锁库存","children":[]},{"level":2,"title":"7.支付","slug":"_7-支付","link":"#_7-支付","children":[{"level":3,"title":"7.1.前言","slug":"_7-1-前言","link":"#_7-1-前言","children":[]},{"level":3,"title":"7.2.使用","slug":"_7-2-使用","link":"#_7-2-使用","children":[]}]},{"level":2,"title":"8.内网穿透","slug":"_8-内网穿透","link":"#_8-内网穿透","children":[{"level":3,"title":"8.1.原理","slug":"_8-1-原理","link":"#_8-1-原理","children":[]},{"level":3,"title":"8.2.适用场景","slug":"_8-2-适用场景","link":"#_8-2-适用场景","children":[]},{"level":3,"title":"8.3.服务商","slug":"_8-3-服务商","link":"#_8-3-服务商","children":[]},{"level":3,"title":"8.4.我的问题","slug":"_8-4-我的问题","link":"#_8-4-我的问题","children":[]}]},{"level":2,"title":"1. 秒杀（高并发）系统关注的问题","slug":"_1-秒杀-高并发-系统关注的问题","link":"#_1-秒杀-高并发-系统关注的问题","children":[]},{"level":2,"title":"2.Quartz","slug":"_2-quartz","link":"#_2-quartz","children":[{"level":3,"title":"2.1.cron 表达式","slug":"_2-1-cron-表达式","link":"#_2-1-cron-表达式","children":[]},{"level":3,"title":"2.2.Spring 定时任务Demo","slug":"_2-2-spring-定时任务demo","link":"#_2-2-spring-定时任务demo","children":[]}]}],"git":{"createdTime":1712997543000,"updatedTime":1712998443000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":2}]},"readingTime":{"minutes":87,"words":26101},"filePathRelative":"studynotes/GuliMall/Advanced.md","localizedDate":"2024年4月13日","autoDesc":true,"excerpt":"\\n<blockquote>\\n<p><a href=\\"https://easydoc.net/s/78237135/ZUqEdvA4/hKJTcbfd\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">API 文档</a></p>\\n<p><a href=\\"https://www.bilibili.com/video/BV1np4y1C7Yf/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">项目视频地址</a>，碰到忘记点搜本笔记配合视频再度复习！<a href=\\"https://github.com/1024zzq/gulimall\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">自己代码地址</a></p>\\n<p>Google 到的笔记，很详细比视频评论下我看初级篇找的要详细：<a href=\\"https://blog.csdn.net/hancoder/article/details/106922139\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">别人笔记</a> <a href=\\"https://gitee.com/AdverseQ/gulimall_Advanced\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">还是评论区的更贴近视频</a>  <a href=\\"https://github.com/NiceSeason/gulimall-learning\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">别人代码</a>  建议搭配食用</p>\\n<p>我看到后面看的两篇别人的笔记 <a href=\\"https://gitee.com/lemon_wan/gulimall/blob/dev/%E9%AB%98%E7%BA%A7%E7%AF%87.md#8%E6%94%AF%E4%BB%98\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">一</a>    <a href=\\"https://github.com/NiceSeason/gulimall-learning/blob/master/docs/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7.md#6-%E6%94%AF%E4%BB%98\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">二</a></p>\\n<p>个人认为这四个功能为该项目最折磨人功能，一P能卡一两天</p>\\n</blockquote>"}');export{rs as comp,us as data};
